void (***siri::dialogengine::GetUserSpecifiedMeasurementSystem(uint64_t a1, uint64_t a2))(siri::dialogengine::CountryMetric *__hidden this)
{
  BOOL v4;
  BOOL v5;
  void (***MeasurementSystemForLocale)(siri::dialogengine::CountryMetric *__hidden);
  void *v7;
  BOOL v8;
  BOOL v9;
  void *v11[2];
  char v12;
  std::string __p[20];
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(__p, "region-specified");
  v4 = siri::dialogengine::StringsEqual(a2, (uint64_t)__p);
  v5 = v4;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v5)
    {
LABEL_3:
      siri::dialogengine::Context::GetDeviceLocale((siri::dialogengine::Context *)a1, __p);
      MeasurementSystemForLocale = siri::dialogengine::GetMeasurementSystemForLocale();
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        v7 = (void *)__p[0].__r_.__value_.__r.__words[0];
LABEL_12:
        operator delete(v7);
        return MeasurementSystemForLocale;
      }
      return MeasurementSystemForLocale;
    }
  }
  else if (v4)
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "device-specified");
  v8 = siri::dialogengine::StringsEqual(a2, (uint64_t)__p);
  v9 = v8;
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_8;
    }
    return 0;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (!v9) {
    return 0;
  }
LABEL_8:
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, (const siri::dialogengine::RequestInfo *)(a1 + 8));
  std::string::basic_string[abi:ne180100]<0>(v11, "userMeasurementUnit");
  siri::dialogengine::RequestInfo::GetUserSetting((uint64_t)__p, (const void **)v11, &v14);
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p[0].__r_.__value_.__l.__data_);
  MeasurementSystemForLocale = siri::dialogengine::GetMeasurementSystemByType((uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = (void *)v14.__r_.__value_.__r.__words[0];
    goto LABEL_12;
  }
  return MeasurementSystemForLocale;
}

void sub_1C60AB5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 - 33) < 0) {
    operator delete(*(void **)(v20 - 56));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Speed>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v4 = (std::string *)(a2 + 8);
  *(void *)(a2 + 24) = 0;
  *(double *)(a2 + 32) = a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)&__p, a1);
  v6 = RequiredStringParameter;
  if (v8 < 0)
  {
    operator delete(__p);
    if (!v6) {
      return;
    }
LABEL_5:
    if (v6[95] < 0) {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
    }
    else {
      std::string __str = *(std::string *)(v6 + 3);
    }
    std::string::operator=(v4, &__str);
    siri::dialogengine::ParseUnitLabel<siri::dialogengine::Speed>();
  }
  if (RequiredStringParameter) {
    goto LABEL_5;
  }
}

void sub_1C60AB8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v34 + 31) < 0) {
    operator delete(*v33);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Temperature>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v4 = (std::string *)(a2 + 8);
  *(void *)(a2 + 24) = 0;
  *(double *)(a2 + 32) = a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)&__p, a1);
  v6 = RequiredStringParameter;
  if (v8 < 0)
  {
    operator delete(__p);
    if (!v6) {
      return;
    }
LABEL_5:
    if (v6[95] < 0) {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
    }
    else {
      std::string __str = *(std::string *)(v6 + 3);
    }
    std::string::operator=(v4, &__str);
    siri::dialogengine::ParseUnitLabel<siri::dialogengine::Temperature>();
  }
  if (RequiredStringParameter) {
    goto LABEL_5;
  }
}

void sub_1C60ABC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v34 + 31) < 0) {
    operator delete(*v33);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Density>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v4 = (std::string *)(a2 + 8);
  *(void *)(a2 + 24) = 0;
  *(double *)(a2 + 32) = a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)&__p, a1);
  v6 = RequiredStringParameter;
  if (v8 < 0)
  {
    operator delete(__p);
    if (!v6) {
      return;
    }
LABEL_5:
    if (v6[95] < 0) {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
    }
    else {
      std::string __str = *(std::string *)(v6 + 3);
    }
    std::string::operator=(v4, &__str);
    siri::dialogengine::ParseUnitLabel<siri::dialogengine::Density>();
  }
  if (RequiredStringParameter) {
    goto LABEL_5;
  }
}

void sub_1C60ABF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v34 + 31) < 0) {
    operator delete(*v33);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Pressure>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v4 = (std::string *)(a2 + 8);
  *(void *)(a2 + 24) = 0;
  *(double *)(a2 + 32) = a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)&__p, a1);
  v6 = RequiredStringParameter;
  if (v8 < 0)
  {
    operator delete(__p);
    if (!v6) {
      return;
    }
LABEL_5:
    if (v6[95] < 0) {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
    }
    else {
      std::string __str = *(std::string *)(v6 + 3);
    }
    std::string::operator=(v4, &__str);
    siri::dialogengine::ParseUnitLabel<siri::dialogengine::Pressure>();
  }
  if (RequiredStringParameter) {
    goto LABEL_5;
  }
}

void sub_1C60AC2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v34 + 31) < 0) {
    operator delete(*v33);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Length>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v4 = (std::string *)(a2 + 8);
  *(void *)(a2 + 24) = 0;
  *(double *)(a2 + 32) = a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)&__p, a1);
  v6 = RequiredStringParameter;
  if (v8 < 0)
  {
    operator delete(__p);
    if (!v6) {
      return;
    }
LABEL_5:
    if (v6[95] < 0) {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
    }
    else {
      std::string __str = *(std::string *)(v6 + 3);
    }
    std::string::operator=(v4, &__str);
    siri::dialogengine::ParseUnitLabel<siri::dialogengine::Length>();
  }
  if (RequiredStringParameter) {
    goto LABEL_5;
  }
}

void sub_1C60AC66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v34 + 31) < 0) {
    operator delete(*v33);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Weight>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v4 = (std::string *)(a2 + 8);
  *(void *)(a2 + 24) = 0;
  *(double *)(a2 + 32) = a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)&__p, a1);
  v6 = RequiredStringParameter;
  if (v8 < 0)
  {
    operator delete(__p);
    if (!v6) {
      return;
    }
LABEL_5:
    if (v6[95] < 0) {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
    }
    else {
      std::string __str = *(std::string *)(v6 + 3);
    }
    std::string::operator=(v4, &__str);
    siri::dialogengine::ParseUnitLabel<siri::dialogengine::Weight>();
  }
  if (RequiredStringParameter) {
    goto LABEL_5;
  }
}

void sub_1C60AC9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v34 + 31) < 0) {
    operator delete(*v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t YAML::ScanVerbatimTag@<X0>(YAML *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  YAML::Stream::get(this);
  while (1)
  {
    BOOL v5 = YAML::Stream::operator BOOL(this);
    if (!v5)
    {
LABEL_15:
      exception = __cxa_allocate_exception(0x38uLL);
      int v11 = *((_DWORD *)this + 4);
      uint64_t v12 = *((void *)this + 1);
      int v13 = v11;
      std::string::basic_string[abi:ne180100]<0>(&__p, "end of verbatim tag not found");
      YAML::Exception::Exception((uint64_t)exception, &v12, (long long *)&__p);
      void *exception = &unk_1F2127238;
    }
    if (*((void *)this + 8)
      && *(unsigned char *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                  + (*((void *)this + 7) & 0xFFFLL)) == 62)
    {
      return YAML::Stream::get(this);
    }
    YAML::Exp::URI((YAML::Exp *)v5);
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    int v6 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::URI(void)::e, (unint64_t *)&__p);
    if (v6 < 1) {
      goto LABEL_15;
    }
    YAML::Stream::get(this, v6, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C60ACC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t YAML::ScanTagHandle@<X0>(YAML *this@<X0>, YAML::Stream *a2@<X1>, std::string *a3@<X8>)
{
  int v7 = 0;
  uint64_t v8 = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  *(unsigned char *)a2 = 1;
  while (1)
  {
    uint64_t result = YAML::Stream::operator BOOL(this);
    if (!result) {
      return result;
    }
    if (*((void *)this + 8))
    {
      int v10 = *(unsigned __int8 *)a2;
      if (*(unsigned char *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                    + (*((void *)this + 7) & 0xFFFLL)) == 33)
      {
        uint64_t v16 = v8;
        int v17 = v7;
        if (!v10)
        {
          exception = __cxa_allocate_exception(0x38uLL);
          std::string::basic_string[abi:ne180100]<0>(&__p, "illegal character found while scanning tag handle");
          YAML::Exception::Exception((uint64_t)exception, &v16, (long long *)&__p);
          void *exception = &unk_1F2127238;
        }
        return result;
      }
      if (!*(unsigned char *)a2) {
        goto LABEL_12;
      }
    }
    else if (!*(unsigned char *)a2)
    {
      goto LABEL_12;
    }
    YAML::Exp::Word((YAML::Exp *)result);
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    uint64_t result = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Word(void)::e, (unint64_t *)&__p);
    int v11 = result;
    if ((int)result <= 0)
    {
      *(unsigned char *)a2 = 0;
      uint64_t v8 = *((void *)this + 1);
      int v7 = *((_DWORD *)this + 4);
    }
    else if (*(unsigned char *)a2)
    {
      goto LABEL_13;
    }
LABEL_12:
    YAML::Exp::Tag((YAML::Exp *)result);
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    uint64_t result = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::Tag(void)::e, (unint64_t *)&__p);
    int v11 = result;
    if ((int)result < 1) {
      return result;
    }
LABEL_13:
    YAML::Stream::get(this, v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a3, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C60ACE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v15 + 23) < 0) {
        operator delete(*(void **)v15);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t YAML::ScanTagSuffix@<X0>(YAML *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  while (1)
  {
    uint64_t result = YAML::Stream::operator BOOL(this);
    if (!result) {
      break;
    }
    YAML::Exp::Tag((YAML::Exp *)result);
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    uint64_t result = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::Tag(void)::e, (unint64_t *)&__p);
    if ((int)result < 1) {
      break;
    }
    YAML::Stream::get(this, result, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a2, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    int v10 = *((_DWORD *)this + 4);
    uint64_t v11 = *((void *)this + 1);
    int v12 = v10;
    std::string::basic_string[abi:ne180100]<0>(&__p, "tag handle with no suffix");
    YAML::Exception::Exception((uint64_t)exception, &v11, (long long *)&__p);
    void *exception = &unk_1F2127238;
  }
  return result;
}

void sub_1C60AD01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v17 + 23) < 0) {
        operator delete(*(void **)v17);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

double siri::dialogengine::Variable::ToString@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

{
  double result;

  *(void *)(a1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t siri::dialogengine::Variable::IsMutable(siri::dialogengine::Variable *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t siri::dialogengine::Variable::IsEmpty(siri::dialogengine::Variable *this)
{
  return 1;
}

void *siri::dialogengine::Variable::GetSemanticConcept@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void siri::dialogengine::Variable::~Variable(void **this)
{
  siri::dialogengine::Variable::~Variable(this);
  JUMPOUT(0x1C8796D70);
}

{
  *this = &unk_1F21245A8;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

siri::dialogengine::Variable *siri::dialogengine::Variable::Variable(siri::dialogengine::Variable *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1F21245A8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 4, siri::dialogengine::TYPE_STRING);
  *((void *)this + 7) = 0;
  *((_WORD *)this + 32) = 256;
  return this;
}

void sub_1C60AD1F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Variable::Variable(uint64_t a1, const std::string *a2, const std::string *a3)
{
  *(void *)a1 = &unk_1F21245A8;
  *(_OWORD *)(a1 + 8) = 0u;
  BOOL v5 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::string::operator=((std::string *)(a1 + 8), a2);
  std::string::operator=(v5, a3);
  *(void *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 256;
  return a1;
}

void sub_1C60AD29C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::Variable::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

std::string *siri::dialogengine::Variable::SetType(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

uint64_t siri::dialogengine::Variable::SetParent(uint64_t this, siri::dialogengine::Variable *a2)
{
  *(void *)(this + 56) = a2;
  return this;
}

uint64_t siri::dialogengine::Variable::SetIsMutable(uint64_t this, char a2)
{
  *(unsigned char *)(this + 64) = a2;
  return this;
}

uint64_t siri::dialogengine::Variable::SetRedacted(uint64_t this, char a2)
{
  *(unsigned char *)(this + 65) = a2;
  return this;
}

void siri::dialogengine::Variable::GetName(siri::dialogengine::Variable *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

void siri::dialogengine::Variable::GetFullName(siri::dialogengine::Variable *this@<X0>, uint64_t a2@<X8>)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
    *(void *)(a2 + 16) = *((void *)this + 3);
  }
  for (uint64_t i = *((void *)this + 7); i; uint64_t i = *(void *)(i + 56))
  {
    if (*(char *)(i + 31) < 0)
    {
      if (!*(void *)(i + 16)) {
        return;
      }
    }
    else if (!*(unsigned char *)(i + 31))
    {
      return;
    }
    if (*(char *)(i + 31) >= 0) {
      size_t v5 = *(unsigned __int8 *)(i + 31);
    }
    else {
      size_t v5 = *(void *)(i + 16);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v14, v5 + 1);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v6 = &v14;
    }
    else {
      int v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    if (v5)
    {
      if (*(char *)(i + 31) >= 0) {
        int v7 = (const void *)(i + 8);
      }
      else {
        int v7 = *(const void **)(i + 8);
      }
      memmove(v6, v7, v5);
    }
    *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 46;
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      v9 = (const std::string::value_type *)a2;
    }
    else {
      v9 = *(const std::string::value_type **)a2;
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v10 = *(void *)(a2 + 8);
    }
    uint64_t v11 = std::string::append(&v14, v9, v10);
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
    v15[0] = v11->__r_.__value_.__l.__size_;
    *(void *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v15[0];
    *(void *)(a2 + 15) = *(void *)((char *)v15 + 7);
    *(unsigned char *)(a2 + 23) = v13;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C60AD4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Variable::GetType(siri::dialogengine::Variable *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 6);
  }
}

uint64_t siri::dialogengine::Variable::IsRedacted(uint64_t this)
{
  uint64_t v1 = this;
  LOBYTE(this) = 1;
  do
  {
    int v2 = *(unsigned __int8 *)(v1 + 65);
    uint64_t v1 = *(void *)(v1 + 56);
    this = this & (v2 != 0);
  }
  while (v1);
  return this;
}

uint64_t siri::dialogengine::Variable::GetParent(siri::dialogengine::Variable *this)
{
  return *((void *)this + 7);
}

uint64_t siri::dialogengine::Variable::RemoveSelfAsParentOfChild(uint64_t this, siri::dialogengine::Variable *a2)
{
  if (*((void *)a2 + 7) == this) {
    *((void *)a2 + 7) = 0;
  }
  return this;
}

void sub_1C60AD810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  _Unwind_Resume(a1);
}

void ___ZL11CATExecutorP8NSBundleP5NSURLP8NSStringS4_S4_P12NSDictionaryP11objc_objectPU22objcproto11CATCallback11objc_objectiU13block_pointerFvPK21DialogExecutionResultPK7NSErrorE_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  v3 = +[CATCommonApi DEResultToDialogExecutionResult:catId:](CATCommonApi, "DEResultToDialogExecutionResult:catId:");
  v4 = [v10 status];
  char v5 = [v4 isEqualToString:@"success"];

  uint64_t v6 = *(void *)(a1 + 40);
  if (v5)
  {
    int v7 = +[CATCommonApi NSErrorFromString:&stru_1F2127290 errorCode:0];
    (*(void (**)(uint64_t, void *, void *))(v6 + 16))(v6, v3, v7);
  }
  else
  {
    int v7 = [v10 error];
    int v8 = [v10 status];
    v9 = +[CATCommonApi NSErrorFromString:v7 errorCode:v8];
    (*(void (**)(uint64_t, void *, void *))(v6 + 16))(v6, v3, v9);
  }
}

void sub_1C60AD9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::TraceWriter::TraceWriter(uint64_t this)
{
  *(unsigned char *)this = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 24) = this + 32;
  return this;
}

{
  *(unsigned char *)this = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 24) = this + 32;
  return this;
}

uint64_t siri::dialogengine::TraceWriter::IsEnabled(siri::dialogengine::TraceWriter *this)
{
  return *(unsigned __int8 *)this;
}

void siri::dialogengine::TraceWriter::Initialize(siri::dialogengine::TraceWriter *this, siri::dialogengine::Context *a2)
{
  if (a2)
  {
    v4 = siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v14, (siri::dialogengine::Context *)((char *)a2 + 8));
    if ((v16 & 0x10) != 0 || siri::dialogengine::TraceEnabled(v4))
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Trace creation is enabled", v5);
      *(unsigned char *)this = 1;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v15;
      }
      uint64_t v6 = (std::string *)operator new(0x320uLL);
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F21245F8;
      *(void *)&long long v8 = siri::dialogengine::Trace::Trace(v6 + 1, (long long *)&v13, 1, 0.0);
      *((void *)&v8 + 1) = v6;
      v9 = (std::__shared_weak_count *)*((void *)this + 2);
      *(_OWORD *)((char *)this + 8) = v8;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      uint64_t v10 = *((void *)this + 1);
      if (*(char *)(v10 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(v10 + 32), *(void *)(v10 + 40));
      }
      else {
        std::string v13 = *(std::string *)(v10 + 32);
      }
      uint64_t v11 = &v13;
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
      }
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Trace folder: %s", v7, v11);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      std::__tree<std::string>::destroy((uint64_t)this + 24, *((char **)this + 4));
      *((void *)this + 3) = (char *)this + 32;
      *((void *)this + 4) = 0;
      *((void *)this + 5) = 0;
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write request info", v12);
      siri::dialogengine::Trace::WriteRequestInfo(*((std::string **)this + 1), a2);
    }
    siri::dialogengine::RequestInfo::~RequestInfo(v14);
  }
}

void sub_1C60ADDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18)
{
}

void std::__shared_ptr_emplace<siri::dialogengine::Trace>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<siri::dialogengine::Trace>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21245F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::Trace>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21245F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void siri::dialogengine::TraceWriter::WriteExpandedParams(siri::dialogengine::TraceWriter *this, siri::dialogengine::Context *a2)
{
  if (*(unsigned char *)this)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write expanded params info", (const char *)a2);
    v4 = (siri::dialogengine::Trace *)*((void *)this + 1);
    siri::dialogengine::Trace::WriteExpandedParams(v4, a2);
  }
}

void siri::dialogengine::TraceWriter::WriteRequestJson(uint64_t a1, const char *a2)
{
  if (*(unsigned char *)a1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write request JSON", a2);
    v4 = *(siri::dialogengine::Trace **)(a1 + 8);
    siri::dialogengine::Trace::WriteRequestJson(v4, (uint64_t)a2);
  }
}

uint64_t siri::dialogengine::TraceWriter::CopyParamsFile(uint64_t result, const void **a2)
{
  if (*(unsigned char *)result)
  {
    uint64_t v3 = result;
    double result = siri::dialogengine::TraceWriter::IsFileAlreadyCopied(result, a2);
    if ((result & 1) == 0)
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Copy params file", v4);
      siri::dialogengine::Trace::CopyFile(*(siri::dialogengine::Trace **)(v3 + 8), (uint64_t)a2, *(void *)(v3 + 8) + 176);
      return (uint64_t)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v3 + 24), a2, (uint64_t)a2);
    }
  }
  return result;
}

BOOL siri::dialogengine::TraceWriter::IsFileAlreadyCopied(uint64_t a1, const void **a2)
{
  int v2 = a2;
  uint64_t v4 = std::__tree<std::string>::find<std::string>(a1 + 24, a2);
  uint64_t v5 = v4;
  uint64_t v6 = a1 + 32;
  if (*((char *)v2 + 23) < 0) {
    int v2 = (const void **)*v2;
  }
  if (v6 == v4) {
    int v7 = "false";
  }
  else {
    int v7 = "true";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v7);
  if (v12 >= 0) {
    v9 = __p;
  }
  else {
    v9 = (void **)__p[0];
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"CREATE TRACE: File [%s] was already copied? %s", v8, v2, v9);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return v6 != v5;
}

void sub_1C60AE054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::TraceWriter::CopyLocaleFile(uint64_t result, const void **a2)
{
  if (*(unsigned char *)result)
  {
    uint64_t v3 = result;
    double result = siri::dialogengine::TraceWriter::IsFileAlreadyCopied(result, a2);
    if ((result & 1) == 0)
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Copy locale file", v4);
      siri::dialogengine::Trace::CopyFile(*(siri::dialogengine::Trace **)(v3 + 8), (uint64_t)a2, *(void *)(v3 + 8) + 176);
      return (uint64_t)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v3 + 24), a2, (uint64_t)a2);
    }
  }
  return result;
}

void siri::dialogengine::TraceWriter::WriteParamsString(uint64_t a1, const char *a2)
{
  if (*(unsigned char *)a1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write params string to file", a2);
    uint64_t v4 = *(siri::dialogengine::Trace **)(a1 + 8);
    siri::dialogengine::Trace::WriteParamsXmlFile(v4, (uint64_t)a2);
  }
}

void siri::dialogengine::TraceWriter::WriteLocaleString(uint64_t a1, const char *a2)
{
  if (*(unsigned char *)a1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write locale string to file", a2);
    uint64_t v4 = *(siri::dialogengine::Trace **)(a1 + 8);
    siri::dialogengine::Trace::WriteLocaleXmlFile(v4, (uint64_t)a2);
  }
}

void siri::dialogengine::TraceWriter::WriteVisualString(uint64_t a1, const char *a2)
{
  if (*(unsigned char *)a1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write visual string to file", a2);
    uint64_t v4 = *(siri::dialogengine::Trace **)(a1 + 8);
    siri::dialogengine::Trace::WriteVisualXmlFile(v4, (uint64_t)a2);
  }
}

uint64_t siri::dialogengine::TraceWriter::CopySchemaFile(uint64_t result, const void **a2)
{
  if (*(unsigned char *)result)
  {
    uint64_t v3 = result;
    double result = siri::dialogengine::TraceWriter::IsFileAlreadyCopied(result, a2);
    if ((result & 1) == 0)
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Copy schema file", v4);
      siri::dialogengine::Trace::CopyFile(*(siri::dialogengine::Trace **)(v3 + 8), (uint64_t)a2, *(void *)(v3 + 8) + 152);
      return (uint64_t)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v3 + 24), a2, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t siri::dialogengine::TraceWriter::CopyMetadataFile(uint64_t result, std::string *a2)
{
  if (*(unsigned char *)result)
  {
    uint64_t v3 = result;
    double result = siri::dialogengine::TraceWriter::IsFileAlreadyCopied(result, (const void **)&a2->__r_.__value_.__l.__data_);
    if ((result & 1) == 0)
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Copy metadata file", v4);
      siri::dialogengine::Trace::CopyMetadataFile(*(siri::dialogengine::Trace **)(v3 + 8), a2);
      return (uint64_t)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v3 + 24), (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)a2);
    }
  }
  return result;
}

void siri::dialogengine::TraceWriter::WriteDialogStateToFile(uint64_t a1, char *a2, int a3)
{
  if (*(unsigned char *)a1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write dialog state", a2);
    uint64_t v6 = *(siri::dialogengine::Trace **)(a1 + 8);
    siri::dialogengine::Trace::WriteDialogStateToFile(v6, (const void ***)a2, a3);
  }
}

void siri::dialogengine::TraceWriter::WriteResponseJson(uint64_t a1, const char *a2)
{
  if (*(unsigned char *)a1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write response JSON", a2);
    uint64_t v4 = *(siri::dialogengine::Trace **)(a1 + 8);
    siri::dialogengine::Trace::WriteResponseJson(v4, (uint64_t)a2);
  }
}

void siri::dialogengine::TraceWriter::WriteRunScript(siri::dialogengine::TraceWriter *this, const siri::dialogengine::Context *a2)
{
  if (*(unsigned char *)this)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CREATE TRACE: Write run script", (const char *)a2);
    uint64_t v4 = (siri::dialogengine::Trace *)*((void *)this + 1);
    siri::dialogengine::Trace::WriteRunScript(v4, a2);
  }
}

void siri::dialogengine::TraceWriter::GetTracePath(siri::dialogengine::TraceWriter *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    if (*(char *)(v2 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 32), *(void *)(v2 + 40));
    }
    else
    {
      long long v3 = *(_OWORD *)(v2 + 32);
      a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 48);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void YAML::Emitter::Emitter(YAML::Emitter *this)
{
}

void sub_1C60AE4BC(_Unwind_Exception *a1)
{
  std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

YAML::EmitterState *std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100](YAML::EmitterState **a1)
{
  double result = *a1;
  *a1 = 0;
  if (result)
  {
    YAML::EmitterState::~EmitterState(result);
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

void YAML::Emitter::Emitter()
{
}

void sub_1C60AE5AC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x1032C409558ADD0);
  _Unwind_Resume(a1);
}

void YAML::Emitter::~Emitter(YAML::Emitter *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100]((YAML::EmitterState **)this);
}

{
  void *v2;

  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100]((YAML::EmitterState **)this);
}

uint64_t YAML::Emitter::c_str(YAML::Emitter *this)
{
  if (*((void *)this + 4)) {
    return 0;
  }
  *(unsigned char *)(*((void *)this + 1) + *((void *)this + 5)) = 0;
  return *((void *)this + 1);
}

uint64_t YAML::Emitter::size(YAML::Emitter *this)
{
  return *((void *)this + 5);
}

uint64_t YAML::Emitter::good(YAML::Emitter *this)
{
  return **(unsigned __int8 **)this;
}

void YAML::Emitter::GetLastError(YAML::Emitter *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 8);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 24);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

BOOL YAML::Emitter::SetOutputCharset(uint64_t *a1, uint64_t a2)
{
  if ((a2 - 3) <= 1) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 32, a2, 1);
  }
  return (a2 - 3) < 2;
}

uint64_t YAML::Emitter::SetStringFormat(uint64_t *a1, uint64_t a2)
{
  if (a2 <= 7 && ((1 << a2) & 0xE1) != 0) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 36, a2, 1);
  }
  return 0;
}

BOOL YAML::Emitter::SetBoolFormat(uint64_t *a1, uint64_t a2)
{
  if ((a2 - 8) <= 2)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *a1 + 40;
    goto LABEL_5;
  }
  if ((a2 - 11) <= 2)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *a1 + 48;
LABEL_5:
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(v4, v5, a2, 1);
  }
  if ((a2 & 0xFFFFFFFE) == 0xE) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 44, a2, 1);
  }
  return (a2 - 8) < 6;
}

BOOL YAML::Emitter::SetIntBase(uint64_t *a1, uint64_t a2)
{
  if ((a2 - 16) <= 2) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 52, a2, 1);
  }
  return (a2 - 16) < 3;
}

BOOL YAML::Emitter::SetSeqFormat(uint64_t *a1, uint64_t a2)
{
  if ((a2 - 23) <= 1) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 80, a2, 1);
  }
  return (a2 - 23) < 2;
}

BOOL YAML::Emitter::SetMapFormat(uint64_t *a1, uint64_t a2)
{
  if ((a2 - 23) <= 1) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 84, a2, 1);
  }
  if (a2 == 29 || !a2) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 88, a2, 1);
  }
  return (a2 - 23) < 2;
}

BOOL YAML::Emitter::SetIndent(YAML::Emitter *this, unint64_t a2)
{
  if (a2 >= 2) {
    YAML::EmitterState::_Set<unsigned long>(*(void *)this, *(void *)this + 56, a2, 1);
  }
  return a2 > 1;
}

uint64_t YAML::Emitter::SetPreCommentIndent(YAML::Emitter *this, uint64_t a2)
{
  if (a2) {
    YAML::EmitterState::_Set<unsigned long>(*(void *)this, *(void *)this + 64, a2, 1);
  }
  return 0;
}

uint64_t YAML::Emitter::SetPostCommentIndent(YAML::Emitter *this, uint64_t a2)
{
  if (a2) {
    YAML::EmitterState::_Set<unsigned long>(*(void *)this, *(void *)this + 72, a2, 1);
  }
  return 0;
}

BOOL YAML::Emitter::SetFloatPrecision(YAML::Emitter *this, unint64_t a2)
{
  if (a2 <= 9) {
    YAML::EmitterState::_Set<unsigned long>(*(void *)this, *(void *)this + 96, a2, 1);
  }
  return a2 < 0xA;
}

BOOL YAML::Emitter::SetDoublePrecision(YAML::Emitter *this, unint64_t a2)
{
  if (a2 <= 0x11) {
    YAML::EmitterState::_Set<unsigned long>(*(void *)this, *(void *)this + 104, a2, 1);
  }
  return a2 < 0x12;
}

YAML::Emitter *YAML::Emitter::SetLocalValue(YAML::Emitter *this, uint64_t a2)
{
  long long v3 = *(unsigned char **)this;
  if (*v3)
  {
    switch((int)a2)
    {
      case 19:
        YAML::Emitter::EmitBeginDoc(this);
        break;
      case 20:
        YAML::Emitter::EmitEndDoc(this);
        break;
      case 21:
        YAML::Emitter::EmitBeginSeq(this);
        break;
      case 22:
        YAML::Emitter::EmitEndSeq(this);
        break;
      case 23:
      case 24:
        goto LABEL_7;
      case 25:
        YAML::Emitter::EmitBeginMap(this);
        break;
      case 26:
        YAML::Emitter::EmitEndMap(this);
        break;
      case 27:
      case 28:
        return this;
      default:
        if (a2 == 1)
        {
          YAML::Emitter::EmitKindTag(this);
        }
        else if (a2 == 2)
        {
          YAML::Emitter::EmitNewline(this);
        }
        else
        {
LABEL_7:
          YAML::EmitterState::SetLocalValue((uint64_t)v3, a2);
        }
        break;
    }
  }
  return this;
}

void YAML::Emitter::EmitBeginDoc(YAML::Emitter *this)
{
  uint64_t v1 = *(void *)this;
  if (**(unsigned char **)this)
  {
    uint64_t v3 = *(void *)(v1 + 168);
    if (*(void *)(v1 + 160) != v3 && **(_DWORD **)(v3 - 8) || *(unsigned char *)(v1 + 192) || *(unsigned char *)(v1 + 193))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "Unexpected begin document");
      *(unsigned char *)uint64_t v1 = 0;
      std::string::operator=((std::string *)(v1 + 8), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (*((void *)this + 7)) {
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      }
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "---\n", 4uLL);
      uint64_t v4 = *(void *)this;
      *(_WORD *)(v4 + 192) = 0;
      *(unsigned char *)(v4 + 194) = 0;
    }
  }
}

void sub_1C60AEC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void YAML::Emitter::EmitEndDoc(YAML::Emitter *this)
{
  uint64_t v1 = *(void *)this;
  if (**(unsigned char **)this)
  {
    uint64_t v2 = *(void *)(v1 + 168);
    if (*(void *)(v1 + 160) != v2 && **(_DWORD **)(v2 - 8) || *(unsigned char *)(v1 + 192) || *(unsigned char *)(v1 + 193))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "Unexpected begin document");
      *(unsigned char *)uint64_t v1 = 0;
      std::string::operator=((std::string *)(v1 + 8), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v3 = (std::vector<char> *)((char *)this + 8);
      if (*((void *)this + 7)) {
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      }
      YAML::ostream_wrapper::write(v3, "...\n", 4uLL);
    }
  }
}

void sub_1C60AED38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

YAML::Emitter *YAML::Emitter::EmitBeginSeq(YAML::Emitter *this)
{
  uint64_t v1 = *(void *)this;
  if (**(unsigned char **)this)
  {
    uint64_t v2 = this;
    uint64_t v3 = *(void *)(v1 + 168);
    if (*(void *)(v1 + 160) == v3 || *(_DWORD *)(*(void *)(v3 - 8) + 4) != 1)
    {
      if (*(_DWORD *)(v1 + 80) == 24) {
        unsigned int v4 = 4;
      }
      else {
        unsigned int v4 = 3;
      }
    }
    else
    {
      unsigned int v4 = 3;
    }
    YAML::Emitter::PrepareNode(this, v4);
    uint64_t v5 = *(void **)v2;
    YAML::EmitterState::StartedGroup(v5);
  }
  return this;
}

void YAML::Emitter::EmitEndSeq(YAML::Emitter *this)
{
  uint64_t v2 = *(void *)this;
  if (*(unsigned char *)v2)
  {
    uint64_t v3 = *(void *)(v2 + 168);
    if (*(void *)(v2 + 160) == v3)
    {
      if (!*(void *)(v2 + 200)) {
        __assert_rtn("ForceFlow", "emitterstate.cpp", 69, "!m_groups.empty()");
      }
    }
    else
    {
      if (!*(void *)(*(void *)(v3 - 8) + 16)) {
        *(_DWORD *)(*(void *)(v3 - 8) + 4) = 1;
      }
      if (*(_DWORD *)(*(void *)(v3 - 8) + 4) == 1)
      {
        if (*((unsigned char *)this + 64))
        {
          YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
          uint64_t v2 = *(void *)this;
        }
        unint64_t v4 = *(void *)(v2 + 184);
        if (*((void *)this + 7) < v4)
        {
          do
          {
            char __src = 32;
            YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
          }
          while (*((void *)this + 7) < v4);
          uint64_t v2 = *(void *)this;
        }
        uint64_t v5 = *(void *)(v2 + 168);
        if (*(void *)(v2 + 160) == v5) {
          uint64_t v6 = (void *)(v2 + 200);
        }
        else {
          uint64_t v6 = (void *)(*(void *)(v5 - 8) + 16);
        }
        if (!*v6) {
          YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "[", 1uLL);
        }
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "]", 1uLL);
        uint64_t v2 = *(void *)this;
      }
    }
    YAML::EmitterState::EndedGroup(v2, 1);
  }
}

YAML::Emitter *YAML::Emitter::EmitBeginMap(YAML::Emitter *this)
{
  uint64_t v1 = *(void *)this;
  if (**(unsigned char **)this)
  {
    uint64_t v2 = this;
    uint64_t v3 = *(void *)(v1 + 168);
    if (*(void *)(v1 + 160) == v3 || *(_DWORD *)(*(void *)(v3 - 8) + 4) != 1)
    {
      if (*(_DWORD *)(v1 + 84) == 24) {
        unsigned int v4 = 6;
      }
      else {
        unsigned int v4 = 5;
      }
    }
    else
    {
      unsigned int v4 = 5;
    }
    YAML::Emitter::PrepareNode(this, v4);
    uint64_t v5 = *(void **)v2;
    YAML::EmitterState::StartedGroup(v5);
  }
  return this;
}

void YAML::Emitter::EmitEndMap(YAML::Emitter *this)
{
  uint64_t v2 = *(void *)this;
  if (*(unsigned char *)v2)
  {
    uint64_t v3 = *(void *)(v2 + 168);
    if (*(void *)(v2 + 160) == v3)
    {
      if (!*(void *)(v2 + 200)) {
        __assert_rtn("ForceFlow", "emitterstate.cpp", 69, "!m_groups.empty()");
      }
    }
    else
    {
      if (!*(void *)(*(void *)(v3 - 8) + 16)) {
        *(_DWORD *)(*(void *)(v3 - 8) + 4) = 1;
      }
      if (*(_DWORD *)(*(void *)(v3 - 8) + 4) == 1)
      {
        if (*((unsigned char *)this + 64))
        {
          YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
          uint64_t v2 = *(void *)this;
        }
        unint64_t v4 = *(void *)(v2 + 184);
        if (*((void *)this + 7) < v4)
        {
          do
          {
            char __src = 32;
            YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
          }
          while (*((void *)this + 7) < v4);
          uint64_t v2 = *(void *)this;
        }
        uint64_t v5 = *(void *)(v2 + 168);
        if (*(void *)(v2 + 160) == v5) {
          uint64_t v6 = (void *)(v2 + 200);
        }
        else {
          uint64_t v6 = (void *)(*(void *)(v5 - 8) + 16);
        }
        if (!*v6) {
          YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "{", 1uLL);
        }
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "}", 1uLL);
        uint64_t v2 = *(void *)this;
      }
    }
    YAML::EmitterState::EndedGroup(v2, 2);
  }
}

void YAML::Emitter::EmitKindTag(YAML::Emitter *this)
{
  std::string::basic_string[abi:ne180100]<0>(v2, "");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  YAML::_Tag::_Tag(&v4, &v7, (long long *)v2, 1);
  if (v8 < 0) {
    operator delete((void *)v7);
  }
  YAML::Emitter::Write(this, (uint64_t)&v4);
  if (v6 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_1C60AF1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void YAML::Emitter::EmitNewline(YAML::Emitter *this)
{
  if (**(unsigned char **)this)
  {
    YAML::Emitter::PrepareNode(this, 0);
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    *(unsigned char *)(*(void *)this + 194) = 1;
  }
}

void YAML::Emitter::PrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v2 = *(void *)(*(void *)this + 168);
  if (*(void *)(*(void *)this + 160) == v2)
  {
    YAML::Emitter::PrepareTopNode(this, a2);
  }
  else
  {
    char v3 = *(int **)(v2 - 8);
    int v4 = *v3;
    BOOL v5 = v3[1] == 1;
    if (v3[1] == 1) {
      int v6 = 5;
    }
    else {
      int v6 = 6;
    }
    if (v5) {
      int v7 = 3;
    }
    else {
      int v7 = 4;
    }
    if (v4 == 1) {
      int v6 = v7;
    }
    switch(v6)
    {
      case 3:
        YAML::Emitter::FlowSeqPrepareNode(this, a2);
        break;
      case 4:
        YAML::Emitter::BlockSeqPrepareNode(this, a2);
        break;
      case 5:
        YAML::Emitter::FlowMapPrepareNode(this, a2);
        break;
      case 6:
        YAML::Emitter::BlockMapPrepareNode(this, a2);
        break;
      default:
        return;
    }
  }
}

void YAML::Emitter::PrepareTopNode(YAML::Emitter *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(*(void *)this + 168);
    if (*(void *)(*(void *)this + 160) == v4) {
      BOOL v5 = (void *)(*(void *)this + 200);
    }
    else {
      BOOL v5 = (void *)(*(void *)(v4 - 8) + 16);
    }
    if (*v5 && *((void *)this + 7)) {
      YAML::Emitter::EmitBeginDoc(this);
    }
    if (a2 <= 6)
    {
      if (((1 << a2) & 0x2E) != 0)
      {
        if (*(unsigned char *)(*(void *)this + 192)) {
          BOOL v6 = 1;
        }
        else {
          BOOL v6 = *(unsigned __int8 *)(*(void *)this + 193) != 0;
        }
        YAML::Emitter::SpaceOrIndentTo(this, v6, 0);
      }
      else if (((1 << a2) & 0x50) != 0)
      {
        uint64_t v7 = *(void *)this;
        if (*(unsigned char *)(*(void *)this + 192) || *(unsigned char *)(v7 + 193) || *(unsigned char *)(v7 + 194))
        {
          YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
        }
      }
    }
  }
}

void YAML::Emitter::FlowSeqPrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)(*(void *)this + 168) - *(void *)(*(void *)this + 160) >= 0x10uLL) {
    unint64_t v5 = *(void *)(v4 + 184) - *(void *)(*(void *)(*(void *)(*(void *)this + 168) - 16) + 8);
  }
  else {
    unint64_t v5 = 0;
  }
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193) && !*(unsigned char *)(v4 + 194))
  {
    if (*((unsigned char *)this + 64)) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    while (*((void *)this + 7) < v5)
    {
      char __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    uint64_t v6 = *(void *)(*(void *)this + 168);
    if (*(void *)(*(void *)this + 160) == v6) {
      uint64_t v7 = (void *)(*(void *)this + 200);
    }
    else {
      uint64_t v7 = (void *)(*(void *)(v6 - 8) + 16);
    }
    if (*v7) {
      char v8 = ",";
    }
    else {
      char v8 = "[";
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), v8, 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      uint64_t v9 = *(void *)this;
      if (*(unsigned char *)(*(void *)this + 192) || *(unsigned char *)(v9 + 193))
      {
        BOOL v10 = 1;
      }
      else
      {
        uint64_t v11 = *(void *)(v9 + 168);
        if (*(void *)(v9 + 160) == v11) {
          char v12 = (void *)(v9 + 200);
        }
        else {
          char v12 = (void *)(*(void *)(v11 - 8) + 16);
        }
        BOOL v10 = *v12 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v10, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowSeqPrepareNode", "emitter.cpp", 336, "false");
    }
  }
}

void YAML::Emitter::BlockSeqPrepareNode(YAML::Emitter *this, int a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v6 = *(void *)(*(void *)this + 160);
  uint64_t v5 = *(void *)(*(void *)this + 168);
  if (v6 == v5)
  {
    uint64_t v7 = 0;
    if (!a2) {
      return;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 8);
    if (!a2) {
      return;
    }
  }
  unint64_t v8 = *(void *)(v4 + 184);
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193))
  {
    if (v6 == v5) {
      uint64_t v9 = (void *)(v4 + 200);
    }
    else {
      uint64_t v9 = (void *)(*(void *)(v5 - 8) + 16);
    }
    if (*v9 || *((unsigned char *)this + 64)) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    while (*((void *)this + 7) < v8)
    {
      char __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "-", 1uLL);
  }
  switch(a2)
  {
    case 1:
    case 2:
    case 3:
    case 5:
      if (*(unsigned char *)(*(void *)this + 192)) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = *(unsigned __int8 *)(*(void *)this + 193) != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v10, v7 + v8);
      break;
    case 4:
      goto LABEL_24;
    case 6:
      if (*(unsigned char *)(*(void *)this + 192) || *(unsigned char *)(*(void *)this + 193) || *((unsigned char *)this + 64)) {
LABEL_24:
      }
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      break;
    default:
      return;
  }
}

void YAML::Emitter::FlowMapPrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v6 = *(void *)(v4 + 160);
  uint64_t v5 = *(void *)(v4 + 168);
  if (v6 == v5)
  {
    if (*(unsigned char *)(v4 + 200))
    {
LABEL_15:
      YAML::Emitter::FlowMapPrepareSimpleKeyValue(this, a2);
      return;
    }
  }
  else if (*(unsigned char *)(*(void *)(v5 - 8) + 16))
  {
    if (*(unsigned char *)(*(void *)(v5 - 8) + 24))
    {
      YAML::Emitter::FlowMapPrepareLongKeyValue(this, a2);
      return;
    }
    goto LABEL_15;
  }
  if (*(_DWORD *)(v4 + 88) == 29)
  {
    YAML::EmitterState::SetLongKey(v4);
    uint64_t v6 = *(void *)(*(void *)this + 160);
    uint64_t v5 = *(void *)(*(void *)this + 168);
  }
  if (v6 == v5 || !*(unsigned char *)(*(void *)(v5 - 8) + 24))
  {
    YAML::Emitter::FlowMapPrepareSimpleKey(this, a2);
  }
  else
  {
    YAML::Emitter::FlowMapPrepareLongKey(this, a2);
  }
}

void YAML::Emitter::BlockMapPrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *(void *)(v4 + 168);
  if (*(void *)(v4 + 160) == v5)
  {
    if (*(unsigned char *)(v4 + 200))
    {
LABEL_17:
      YAML::Emitter::BlockMapPrepareSimpleKeyValue(this, a2);
      return;
    }
  }
  else if (*(unsigned char *)(*(void *)(v5 - 8) + 16))
  {
    if (*(unsigned char *)(*(void *)(v5 - 8) + 24))
    {
      YAML::Emitter::BlockMapPrepareLongKeyValue(this, a2);
      return;
    }
    goto LABEL_17;
  }
  if (*(_DWORD *)(v4 + 88) == 29)
  {
    YAML::EmitterState::SetLongKey(v4);
    uint64_t v4 = *(void *)this;
  }
  if ((a2 & 0xFFFFFFFD) == 4)
  {
    YAML::EmitterState::SetLongKey(v4);
    uint64_t v4 = *(void *)this;
  }
  uint64_t v6 = *(void *)(v4 + 168);
  if (*(void *)(v4 + 160) == v6 || !*(unsigned char *)(*(void *)(v6 - 8) + 24))
  {
    YAML::Emitter::BlockMapPrepareSimpleKey(this, a2);
  }
  else
  {
    YAML::Emitter::BlockMapPrepareLongKey(this, a2);
  }
}

void YAML::Emitter::BlockMapPrepareLongKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *(void *)(*(void *)this + 168);
  if (*(void *)(*(void *)this + 160) == v5)
  {
    uint64_t v6 = (void *)(v4 + 200);
    if (!a2) {
      return;
    }
  }
  else
  {
    uint64_t v6 = (void *)(*(void *)(v5 - 8) + 16);
    if (!a2) {
      return;
    }
  }
  unint64_t v7 = *(void *)(v4 + 184);
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193))
  {
    if (*v6) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    if (*((unsigned char *)this + 64)) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    while (*((void *)this + 7) < v7)
    {
      char __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "?", 1uLL);
  }
  if (a2 <= 5 && ((1 << a2) & 0x2E) != 0) {
    YAML::Emitter::SpaceOrIndentTo(this, 1, v7 + 1);
  }
}

void YAML::Emitter::BlockMapPrepareSimpleKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *(void *)(*(void *)this + 168);
  if (*(void *)(*(void *)this + 160) == v5)
  {
    uint64_t v6 = (uint64_t *)(v4 + 200);
    if (!a2) {
      return;
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(*(void *)(v5 - 8) + 16);
    if (!a2) {
      return;
    }
  }
  unint64_t v7 = *(void *)(v4 + 184);
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193))
  {
    uint64_t v8 = *v6;
    if (!*(unsigned char *)(v4 + 194) && v8 != 0) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
  }
  if (a2 <= 5 && ((1 << a2) & 0x2E) != 0)
  {
    if (*(unsigned char *)(*(void *)this + 192)) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = *(unsigned __int8 *)(*(void *)this + 193) != 0;
    }
    YAML::Emitter::SpaceOrIndentTo(this, v10, v7);
  }
}

void YAML::Emitter::BlockMapPrepareLongKeyValue(YAML::Emitter *this, unsigned int a2)
{
  if (a2)
  {
    unint64_t v4 = *(void *)(*(void *)this + 184);
    if (!*(unsigned char *)(*(void *)this + 192) && !*(unsigned char *)(*(void *)this + 193))
    {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      while (*((void *)this + 7) < v4)
      {
        char __src = 32;
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
      }
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
    }
    if (a2 <= 6) {
      YAML::Emitter::SpaceOrIndentTo(this, 1, v4 + 1);
    }
  }
}

void YAML::Emitter::BlockMapPrepareSimpleKeyValue(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *(void *)(*(void *)this + 168);
  if (*(void *)(*(void *)this + 160) == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v5 - 8) + 8);
  }
  uint64_t v7 = *(void *)(v4 + 184);
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193) && !*(unsigned char *)(v4 + 194)) {
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      YAML::Emitter::SpaceOrIndentTo(this, 1, v6 + v7);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
  }
}

void YAML::Emitter::SpaceOrIndentTo(YAML::Emitter *this, int a2, unint64_t a3)
{
  uint64_t v6 = (std::vector<char> *)((char *)this + 8);
  if (*((unsigned char *)this + 64)) {
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
  }
  unint64_t v7 = *((void *)this + 7);
  if (v7) {
    BOOL v8 = a2 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    YAML::ostream_wrapper::write(v6, " ", 1uLL);
    unint64_t v7 = *((void *)this + 7);
  }
  if (v7 < a3)
  {
    do
    {
      char __src = 32;
      YAML::ostream_wrapper::write(v6, &__src, 1uLL);
    }
    while (*((void *)this + 7) < a3);
  }
}

void YAML::Emitter::FlowMapPrepareLongKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)(*(void *)this + 168) - *(void *)(*(void *)this + 160) >= 0x10uLL) {
    unint64_t v5 = *(void *)(v4 + 184) - *(void *)(*(void *)(*(void *)(*(void *)this + 168) - 16) + 8);
  }
  else {
    unint64_t v5 = 0;
  }
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193) && !*(unsigned char *)(v4 + 194))
  {
    if (*((unsigned char *)this + 64)) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    while (*((void *)this + 7) < v5)
    {
      char __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    uint64_t v6 = *(void *)(*(void *)this + 168);
    if (*(void *)(*(void *)this + 160) == v6) {
      unint64_t v7 = (void *)(*(void *)this + 200);
    }
    else {
      unint64_t v7 = (void *)(*(void *)(v6 - 8) + 16);
    }
    if (*v7) {
      BOOL v8 = ", ?";
    }
    else {
      BOOL v8 = "{ ?";
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), v8, 3uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      uint64_t v9 = *(void *)this;
      if (*(unsigned char *)(*(void *)this + 192) || *(unsigned char *)(v9 + 193))
      {
        BOOL v10 = 1;
      }
      else
      {
        uint64_t v11 = *(void *)(v9 + 168);
        if (*(void *)(v9 + 160) == v11) {
          char v12 = (void *)(v9 + 200);
        }
        else {
          char v12 = (void *)(*(void *)(v11 - 8) + 16);
        }
        BOOL v10 = *v12 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v10, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareLongKey", "emitter.cpp", 418, "false");
    }
  }
}

void YAML::Emitter::FlowMapPrepareSimpleKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)(*(void *)this + 168) - *(void *)(*(void *)this + 160) >= 0x10uLL) {
    unint64_t v5 = *(void *)(v4 + 184) - *(void *)(*(void *)(*(void *)(*(void *)this + 168) - 16) + 8);
  }
  else {
    unint64_t v5 = 0;
  }
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193) && !*(unsigned char *)(v4 + 194))
  {
    if (*((unsigned char *)this + 64)) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    while (*((void *)this + 7) < v5)
    {
      char __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    uint64_t v6 = *(void *)(*(void *)this + 168);
    if (*(void *)(*(void *)this + 160) == v6) {
      unint64_t v7 = (void *)(*(void *)this + 200);
    }
    else {
      unint64_t v7 = (void *)(*(void *)(v6 - 8) + 16);
    }
    if (*v7) {
      BOOL v8 = ",";
    }
    else {
      BOOL v8 = "{";
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), v8, 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      uint64_t v9 = *(void *)this;
      if (*(unsigned char *)(*(void *)this + 192) || *(unsigned char *)(v9 + 193))
      {
        BOOL v10 = 1;
      }
      else
      {
        uint64_t v11 = *(void *)(v9 + 168);
        if (*(void *)(v9 + 160) == v11) {
          char v12 = (void *)(v9 + 200);
        }
        else {
          char v12 = (void *)(*(void *)(v11 - 8) + 16);
        }
        BOOL v10 = *v12 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v10, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareSimpleKey", "emitter.cpp", 477, "false");
    }
  }
}

void YAML::Emitter::FlowMapPrepareLongKeyValue(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)(*(void *)this + 168) - *(void *)(*(void *)this + 160) >= 0x10uLL) {
    unint64_t v5 = *(void *)(v4 + 184) - *(void *)(*(void *)(*(void *)(*(void *)this + 168) - 16) + 8);
  }
  else {
    unint64_t v5 = 0;
  }
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193) && !*(unsigned char *)(v4 + 194))
  {
    if (*((unsigned char *)this + 64)) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    while (*((void *)this + 7) < v5)
    {
      char __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      uint64_t v6 = *(void *)this;
      if (*(unsigned char *)(*(void *)this + 192) || *(unsigned char *)(v6 + 193))
      {
        BOOL v7 = 1;
      }
      else
      {
        uint64_t v8 = *(void *)(v6 + 168);
        if (*(void *)(v6 + 160) == v8) {
          uint64_t v9 = (void *)(v6 + 200);
        }
        else {
          uint64_t v9 = (void *)(*(void *)(v8 - 8) + 16);
        }
        BOOL v7 = *v9 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v7, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareLongKeyValue", "emitter.cpp", 446, "false");
    }
  }
}

void YAML::Emitter::FlowMapPrepareSimpleKeyValue(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)(*(void *)this + 168) - *(void *)(*(void *)this + 160) >= 0x10uLL) {
    unint64_t v5 = *(void *)(v4 + 184) - *(void *)(*(void *)(*(void *)(*(void *)this + 168) - 16) + 8);
  }
  else {
    unint64_t v5 = 0;
  }
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193) && !*(unsigned char *)(v4 + 194))
  {
    if (*((unsigned char *)this + 64)) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    while (*((void *)this + 7) < v5)
    {
      char __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      uint64_t v6 = *(void *)this;
      if (*(unsigned char *)(*(void *)this + 192) || *(unsigned char *)(v6 + 193))
      {
        BOOL v7 = 1;
      }
      else
      {
        uint64_t v8 = *(void *)(v6 + 168);
        if (*(void *)(v6 + 160) == v8) {
          uint64_t v9 = (void *)(v6 + 200);
        }
        else {
          uint64_t v9 = (void *)(*(void *)(v8 - 8) + 16);
        }
        BOOL v7 = *v9 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v7, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareSimpleKeyValue", "emitter.cpp", 505, "false");
    }
  }
}

YAML::Emitter *YAML::Emitter::Write(YAML::Emitter *a1, uint64_t a2)
{
  char v3 = *(unsigned char **)a1;
  if (!**(unsigned char **)a1) {
    return a1;
  }
  if (v3[193])
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "invalid tag");
    unsigned char *v3 = 0;
    std::string::operator=((std::string *)(v3 + 8), &__str);
    goto LABEL_12;
  }
  YAML::Emitter::PrepareNode(a1, 1u);
  int v5 = *(_DWORD *)(a2 + 48);
  uint64_t v6 = (std::vector<char> *)((char *)a1 + 8);
  if (v5 == 1)
  {
    BOOL v7 = (uint64_t *)(a2 + 24);
    int v8 = 0;
  }
  else
  {
    if (v5)
    {
      if (YAML::Utils::WriteTagWithPrefix(v6, (uint64_t *)a2, (uint64_t *)(a2 + 24))) {
        goto LABEL_9;
      }
      goto LABEL_11;
    }
    BOOL v7 = (uint64_t *)(a2 + 24);
    int v8 = 1;
  }
  if (YAML::Utils::WriteTag(v6, v7, v8))
  {
LABEL_9:
    *(unsigned char *)(*(void *)a1 + 193) = 1;
    return a1;
  }
LABEL_11:
  uint64_t v9 = *(void *)a1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "invalid tag");
  *(unsigned char *)uint64_t v9 = 0;
  std::string::operator=((std::string *)(v9 + 8), &__str);
LABEL_12:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C60B0550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *YAML::Emitter::SetLocalIndent(uint64_t *result, int *a2)
{
  uint64_t v2 = *a2;
  if (v2 >= 2) {
    YAML::EmitterState::_Set<unsigned long>(*result, *result + 56, v2, 0);
  }
  return result;
}

uint64_t *YAML::Emitter::SetLocalPrecision(uint64_t *result, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if (v2 <= 9) {
    YAML::EmitterState::_Set<unsigned long>(*result, *result + 96, v2, 0);
  }
  uint64_t v3 = a2[1];
  if (v3 <= 0x11) {
    YAML::EmitterState::_Set<unsigned long>(*result, *result + 104, v3, 0);
  }
  return result;
}

uint64_t YAML::Emitter::CanEmitNewline(YAML::Emitter *this)
{
  return 1;
}

void *YAML::Emitter::PrepareIntegralStream(void *result, uint64_t a2)
{
  int v3 = *(_DWORD *)(*result + 52);
  switch(v3)
  {
    case 18:
      double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a2 + 16), (uint64_t)"0", 1);
      int v4 = 64;
      break;
    case 17:
      double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a2 + 16), (uint64_t)"0x", 2);
      int v4 = 8;
      break;
    case 16:
      int v4 = 2;
      break;
    default:
      __assert_rtn("PrepareIntegralStream", "emitter.cpp", 666, "false");
  }
  uint64_t v5 = a2 + 16 + *(void *)(*(void *)(a2 + 16) - 24);
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(v5 + 8) & 0xFFFFFFB5 | v4;
  return result;
}

void *YAML::Emitter::StartedScalar(YAML::Emitter *this)
{
  uint64_t v1 = *(void *)this;
  YAML::EmitterState::StartedNode(*(void *)this);
  return YAML::SettingChanges::clear((uint64_t **)(v1 + 112));
}

uint64_t YAML::Emitter::Write(uint64_t a1, char *a2)
{
  uint64_t v3 = *(void *)a1;
  if (**(unsigned char **)a1)
  {
    int v6 = *(_DWORD *)(v3 + 32);
    int v5 = *(_DWORD *)(v3 + 36);
    uint64_t v8 = *(void *)(v3 + 160);
    uint64_t v7 = *(void *)(v3 + 168);
    if (v8 == v7) {
      int v9 = 0;
    }
    else {
      int v9 = *(_DWORD *)(*(void *)(v7 - 8) + 4);
    }
    int v10 = YAML::Utils::ComputeStringFormat(a2, v5, v9, v6 == 4);
    if (v10 == 3) {
      YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*(void *)a1, *(void *)a1 + 88, 29, 0);
    }
    int v11 = v10;
    YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
    switch(v11)
    {
      case 2:
        YAML::Utils::WriteDoubleQuotedString((std::vector<char> *)(a1 + 8), (unsigned __int8 *)a2, v6 == 4);
        break;
      case 1:
        YAML::Utils::WriteSingleQuotedString((std::vector<char> *)(a1 + 8), (unsigned __int8 *)a2);
        break;
      case 0:
        YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 8), (const void **)a2);
        break;
    }
    uint64_t v12 = *(void *)a1;
    YAML::EmitterState::StartedNode(*(void *)a1);
    YAML::SettingChanges::clear((uint64_t **)(v12 + 112));
  }
  return a1;
}

uint64_t YAML::Emitter::GetFloatPrecision(YAML::Emitter *this)
{
  return *(void *)(*(void *)this + 96);
}

uint64_t YAML::Emitter::GetDoublePrecision(YAML::Emitter *this)
{
  return *(void *)(*(void *)this + 104);
}

const char *YAML::Emitter::ComputeFullBoolName(YAML::Emitter *this, int a2)
{
  uint64_t v2 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 44) == 15)
  {
    int v3 = *(_DWORD *)(v2 + 48);
    goto LABEL_3;
  }
  int v6 = *(_DWORD *)(v2 + 40);
  int v3 = *(_DWORD *)(v2 + 48);
  switch(v6)
  {
    case 10:
      switch(v3)
      {
        case 13:
          int v4 = "Off";
          int v5 = "On";
          break;
        case 12:
          int v4 = "off";
          int v5 = "on";
          break;
        case 11:
          int v4 = "OFF";
          int v5 = "ON";
          goto LABEL_22;
        default:
          goto LABEL_21;
      }
      break;
    case 9:
      switch(v3)
      {
        case 13:
          int v4 = "False";
          int v5 = "True";
          break;
        case 12:
          int v4 = "false";
          int v5 = "true";
          break;
        case 11:
          int v4 = "FALSE";
          int v5 = "TRUE";
          goto LABEL_22;
        default:
          goto LABEL_21;
      }
      break;
    case 8:
LABEL_3:
      switch(v3)
      {
        case 13:
          int v4 = "No";
          int v5 = "Yes";
          goto LABEL_22;
        case 12:
          int v4 = "no";
          int v5 = "yes";
          goto LABEL_22;
        case 11:
          int v4 = "NO";
          int v5 = "YES";
          goto LABEL_22;
      }
      goto LABEL_21;
    default:
LABEL_21:
      int v4 = "n";
      int v5 = "y";
      break;
  }
LABEL_22:
  if (a2) {
    return v5;
  }
  else {
    return v4;
  }
}

YAML::Emitter *YAML::Emitter::Write(YAML::Emitter *this, int a2)
{
  if (**(unsigned char **)this)
  {
    YAML::Emitter::PrepareNode(this, 2u);
    int v4 = (char *)YAML::Emitter::ComputeFullBoolName(this, a2);
    if (*(_DWORD *)(*(void *)this + 44) == 15)
    {
      LOBYTE(__p[0]) = *v4;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), (const char *)__p, 1uLL);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, v4);
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), (const void **)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v5 = *(void *)this;
    YAML::EmitterState::StartedNode(*(void *)this);
    YAML::SettingChanges::clear((uint64_t **)(v5 + 112));
  }
  return this;
}

void sub_1C60B0A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

YAML::Emitter *YAML::Emitter::Write(YAML::Emitter *this, YAML::ostream_wrapper *a2)
{
  if (**(unsigned char **)this)
  {
    YAML::Emitter::PrepareNode(this, 2u);
    YAML::Utils::WriteChar((std::vector<char> *)((char *)this + 8), a2);
    uint64_t v4 = *(void *)this;
    YAML::EmitterState::StartedNode(*(void *)this);
    YAML::SettingChanges::clear((uint64_t **)(v4 + 112));
  }
  return this;
}

uint64_t *YAML::Emitter::Write(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  if (*(unsigned char *)*a1)
  {
    if (*(unsigned char *)(v3 + 192) || *(unsigned char *)(v3 + 193))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid alias");
      *(unsigned char *)uint64_t v3 = 0;
      std::string::operator=((std::string *)(v3 + 8), &__str);
    }
    else
    {
      YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
      YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), "*", 1uLL);
      uint64_t v7 = *a1;
      if (v6)
      {
        YAML::EmitterState::StartedNode(*a1);
        YAML::SettingChanges::clear((uint64_t **)(v7 + 112));
        return a1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid alias");
      *(unsigned char *)uint64_t v7 = 0;
      std::string::operator=((std::string *)(v7 + 8), &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

{
  uint64_t v3;
  BOOL v5;
  uint64_t v6;
  std::string __str;

  uint64_t v3 = *a1;
  if (*(unsigned char *)*a1)
  {
    if (*(unsigned char *)(v3 + 192))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid anchor");
      *(unsigned char *)uint64_t v3 = 0;
      std::string::operator=((std::string *)(v3 + 8), &__str);
    }
    else
    {
      YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 1u);
      YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), "&", 1uLL);
      BOOL v6 = *a1;
      if (v5)
      {
        *(unsigned char *)(v6 + 192) = 1;
        return a1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid anchor");
      *(unsigned char *)BOOL v6 = 0;
      std::string::operator=((std::string *)(v6 + 8), &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  char __src;

  if (*(unsigned char *)*a1)
  {
    YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 0);
    uint64_t v4 = *a1;
    if (a1[7])
    {
      uint64_t v5 = *(void *)(v4 + 64);
      if (v5)
      {
        do
        {
          char __src = 32;
          YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), &__src, 1uLL);
          --v5;
        }
        while (v5);
        uint64_t v4 = *a1;
      }
    }
    YAML::Utils::WriteComment((uint64_t)(a1 + 1), a2, *(void *)(v4 + 72));
    *(unsigned char *)(*a1 + 194) = 1;
  }
  return a1;
}

void sub_1C60B0BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C60B0CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *YAML::Emitter::Write(uint64_t *a1)
{
  if (*(unsigned char *)*a1)
  {
    YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
    YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), "~", 1uLL);
    uint64_t v2 = *a1;
    YAML::EmitterState::StartedNode(*a1);
    YAML::SettingChanges::clear((uint64_t **)(v2 + 112));
  }
  return a1;
}

uint64_t *YAML::Emitter::Write(uint64_t *a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "binary");
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  YAML::_Tag::_Tag(&v8, &v11, (long long *)v6, 2);
  if (v12 < 0) {
    operator delete((void *)v11);
  }
  YAML::Emitter::Write((YAML::Emitter *)a1, (uint64_t)&v8);
  if (v10 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (*(unsigned char *)*a1)
  {
    YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
    YAML::Utils::WriteBinary((std::vector<char> *)(a1 + 1), a2);
    uint64_t v4 = *a1;
    YAML::EmitterState::StartedNode(*a1);
    YAML::SettingChanges::clear((uint64_t **)(v4 + 112));
  }
  return a1;
}

void sub_1C60B0F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

siri::dialogengine::RandomNumberGenerator *siri::dialogengine::RandomNumberGenerator::RandomNumberGenerator(siri::dialogengine::RandomNumberGenerator *this, unsigned int a2)
{
  unsigned int v2 = a2;
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
    std::random_device::random_device(&v8, &__token);
    if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__token.__r_.__value_.__l.__data_);
    }
    unsigned int v2 = MEMORY[0x1C8796B90](&v8);
    std::random_device::~random_device(&v8);
  }
  *(_DWORD *)this = v2;
  *((_DWORD *)this + 2) = v2;
  uint64_t v4 = 1;
  for (uint64_t i = 3; i != 626; ++i)
  {
    int v6 = 1812433253 * (v2 ^ (v2 >> 30));
    unsigned int v2 = v6 + v4;
    *((_DWORD *)this + i) = i + v6 - 2;
    ++v4;
  }
  *((void *)this + 313) = 0;
  return this;
}

void sub_1C60B0FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, std::random_device a10, std::random_device __p, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

unint64_t siri::dialogengine::RandomNumberGenerator::GenerateRandomNumber(siri::dialogengine::RandomNumberGenerator *this, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = (char *)this + 8;
  unint64_t v4 = a2 + 1;
  if (a2 == -1)
  {
    std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v8, (uint64_t)v3, 0x40uLL);
    return std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v8);
  }
  else
  {
    unint64_t v5 = __clz(v4);
    uint64_t v6 = 63;
    if (((v4 << v5) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v6 = 64;
    }
    std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v8, (uint64_t)v3, v6 - v5);
    do
      unint64_t result = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v8);
    while (result >= v4);
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)unint64_t result = a2;
  *(void *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0) {
    unint64_t v3 = (a3 >> 5) + 1;
  }
  else {
    unint64_t v3 = a3 >> 5;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16) = a3 / v3;
  *(void *)(result + 24) = v3;
  unint64_t v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40) {
    unint64_t v5 = 0;
  }
  *(void *)(result + 40) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    unint64_t v4 = a3 / v3;
    *(void *)(result + 16) = a3 / v3;
    *(void *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      *(void *)(result + 32) = v3 - a3 + (v3 << 6);
      *(void *)(result + 40) = 0;
      LOBYTE(v4) = 64;
      goto LABEL_15;
    }
    *(void *)(result + 40) = (-1 << v4) & 0x100000000;
  }
  *(void *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 >= 0x3F)
  {
LABEL_15:
    *(void *)(result + 48) = 0;
    unsigned int v6 = -1;
    *(_DWORD *)(result + 56) = 0xFFFFFFFF >> -(char)v4;
    goto LABEL_16;
  }
  *(void *)(result + 48) = 0x80000000uLL >> v4 << (v4 + 1);
  unsigned int v6 = -1;
  unsigned int v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4) {
    unsigned int v7 = 0;
  }
  *(_DWORD *)(result + 56) = v7;
  if (v4 <= 0x1E) {
    unsigned int v6 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
LABEL_16:
  *(_DWORD *)(result + 60) = v6;
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      do
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
      while (*(void *)(a1 + 40) <= (unint64_t)v4);
      unint64_t v5 = *(void *)(a1 + 16);
      if (v5 >= 0x40) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = v2 << v5;
      }
      uint64_t v2 = v6 + (*(_DWORD *)(a1 + 56) & v4);
      ++v3;
      unint64_t v7 = *(void *)(a1 + 32);
    }
    while (v3 < v7);
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v7 = 0;
  }
  for (; v7 < *(void *)(a1 + 24); ++v7)
  {
    do
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
    while (*(void *)(a1 + 48) <= (unint64_t)v8);
    unint64_t v9 = *(void *)(a1 + 16);
    if (v9 >= 0x3F) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v2 << (v9 + 1);
    }
    uint64_t v2 = v10 + (*(_DWORD *)(a1 + 60) & v8);
  }
  return v2;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i = this->__i_;
  size_t v2 = (i + 1) % 0x270;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (i << 15) & 0xEFC60000 ^ i ^ (((i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t siri::dialogengine::RandomNumberGenerator::GetSeed(siri::dialogengine::RandomNumberGenerator *this)
{
  return *(unsigned int *)this;
}

void InitDefaultsscc_info_VisualProperty_VisualProperty_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/VisualProperty.pb.cc", a4);
  SnippetUI::VisualProperty::VisualProperty((SnippetUI::VisualProperty *)&SnippetUI::_VisualProperty_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_VisualProperty_default_instance_, v4);
  qword_1EB6901A8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB6901B0 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::VisualProperty *SnippetUI::VisualProperty::VisualProperty(SnippetUI::VisualProperty *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F2124648;
  *((_DWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load_explicit(scc_info_VisualProperty_VisualProperty_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_VisualProperty_VisualProperty_2eproto);
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  return this;
}

void sub_1C60B1410(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::VisualProperty::GetMetadata(SnippetUI::VisualProperty *this)
{
  return file_level_metadata_VisualProperty_2eproto;
}

uint64_t SnippetUI::VisualProperty::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

void SnippetUI::VisualProperty::MergeFrom(int **this, int **lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/VisualProperty.pb.cc", 372);
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::VisualProperty::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
  }
}

void sub_1C60B1534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::VisualProperty::MergeFrom(int **this, int **a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/VisualProperty.pb.cc", 387);
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  unint64_t v5 = (unint64_t)a2[1];
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  if (a2 != (int **)&SnippetUI::_VisualProperty_default_instance_)
  {
    uint64_t v6 = (int **)a2[5];
    if (v6)
    {
      char v7 = (int **)this[5];
      if (!v7)
      {
        char v7 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        this[5] = (int *)v7;
        uint64_t v6 = (int **)a2[5];
      }
      if (v6) {
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8 = v6;
      }
      else {
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v7, v8);
    }
    unint64_t v9 = (int **)a2[6];
    if (v9)
    {
      uint64_t v10 = (int **)this[6];
      if (!v10)
      {
        uint64_t v10 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        this[6] = (int *)v10;
        unint64_t v9 = (int **)a2[6];
      }
      if (v9) {
        long long v11 = v9;
      }
      else {
        long long v11 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v10, v11);
    }
  }
  if (*((unsigned char *)a2 + 56)) {
    *((unsigned char *)this + 56) = 1;
  }
  if (*((unsigned char *)a2 + 57)) {
    *((unsigned char *)this + 57) = 1;
  }
}

void sub_1C60B166C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      std::string v13 = (const SnippetUI::VisualElement **)(v6 + 8);
      std::string v14 = (SnippetUI::VisualElement **)v7;
      do
      {
        char v16 = *v13++;
        std::string v15 = v16;
        uint64_t v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::VisualElement>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::VisualElement **)((char *)v8 + v20);
      v22 = (const SnippetUI::VisualElement **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::VisualElement>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_1C60B17DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::VisualElement>::Merge(const SnippetUI::VisualElement *a1, SnippetUI::VisualElement *a2)
{
}

void SnippetUI::VisualProperty::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::VisualProperty::Clear((SnippetUI::VisualProperty *)this);
    SnippetUI::VisualProperty::MergeFrom(this, a2);
  }
}

{
  uint64_t v2;

  if (a2 != this)
  {
    SnippetUI::VisualProperty::Clear((SnippetUI::VisualProperty *)this);
    SnippetUI::VisualProperty::MergeFrom(this, a2);
  }
}

void SnippetUI::VisualProperty::Clear(SnippetUI::VisualProperty *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16);
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 5) = 0;
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v5 = *((unsigned char *)this + 8);
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = (char *)this + 8;
  *((void *)v4 + 5) = 0;
  *((_WORD *)v4 + 24) = 0;
  if (v5)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v4);
  }
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    char v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    uint64_t v3 = (SnippetUI::VisualElement **)(*(void *)(a1 + 16) + 8);
    do
    {
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = *v3++;
      SnippetUI::VisualElement::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1C60B199C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(SnippetUI::VisualProperty *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    int v8 = 0;
    while ((unint64_t)a2 < *(void *)a3)
    {
      if (v8 < 0) {
        goto LABEL_5;
      }
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v41, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        uint64_t v10 = google::protobuf::internal::LogMessage::operator<<(v41, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v40, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v41[0].__r_.__value_.__l.__data_);
      }
      int v11 = *(SnippetUI::VisualElement **)(*((void *)this + 4) + 8 * v8 + 8);
      *(unsigned char *)a2 = 10;
      unsigned int v12 = *((_DWORD *)v11 + 6);
      if (v12 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v12 | 0x80;
        unsigned int v14 = v12 >> 7;
        if (v12 >> 14)
        {
          std::string v15 = (char *)a2 + 2;
          do
          {
            char v16 = v15;
            *v15++ = v14 | 0x80;
            unsigned int v17 = v14 >> 7;
            unsigned int v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          std::string v13 = v16 + 2;
          *std::string v15 = v17;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v14;
          std::string v13 = (char *)a2 + 3;
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v12;
        std::string v13 = (char *)a2 + 2;
      }
      a2 = SnippetUI::VisualElement::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7) {
        goto LABEL_19;
      }
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v41, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    uint64_t v9 = google::protobuf::internal::LogMessage::operator<<(v41, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v40, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v41[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  if (*((unsigned char *)this + 56))
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v19 = *((unsigned char *)this + 56);
    }
    else
    {
      char v19 = 1;
    }
    *(unsigned char *)a2 = 16;
    *((unsigned char *)a2 + 1) = v19;
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
  }
  if (this != (SnippetUI::VisualProperty *)&SnippetUI::_VisualProperty_default_instance_)
  {
    uint64_t v20 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    if (!v20) {
      goto LABEL_36;
    }
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v20 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    }
    *(unsigned char *)a2 = 26;
    unsigned int v21 = *((_DWORD *)v20 + 12);
    if (v21 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v21 | 0x80;
      unsigned int v23 = v21 >> 7;
      if (v21 >> 14)
      {
        int v25 = (char *)a2 + 2;
        do
        {
          v26 = v25;
          *v25++ = v23 | 0x80;
          unsigned int v27 = v23 >> 7;
          unsigned int v28 = v23 >> 14;
          v23 >>= 7;
        }
        while (v28);
        v24 = (google::protobuf::UnknownFieldSet *)(v26 + 2);
        *int v25 = v27;
        goto LABEL_35;
      }
      *((unsigned char *)a2 + 2) = v23;
      uint64_t v22 = 3;
    }
    else
    {
      *((unsigned char *)a2 + 1) = v21;
      uint64_t v22 = 2;
    }
    v24 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v22);
LABEL_35:
    a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v20, v24, a3, a4);
LABEL_36:
    v29 = (SnippetUI::ActionProperty *)*((void *)this + 6);
    if (v29)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v29 = (SnippetUI::ActionProperty *)*((void *)this + 6);
      }
      *(unsigned char *)a2 = 34;
      unsigned int v30 = *((_DWORD *)v29 + 12);
      if (v30 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v30 | 0x80;
        unsigned int v32 = v30 >> 7;
        if (v30 >> 14)
        {
          v33 = (char *)a2 + 2;
          do
          {
            uint64_t v34 = v33;
            *v33++ = v32 | 0x80;
            unsigned int v35 = v32 >> 7;
            unsigned int v36 = v32 >> 14;
            v32 >>= 7;
          }
          while (v36);
          v31 = (google::protobuf::UnknownFieldSet *)(v34 + 2);
          unsigned char *v33 = v35;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v32;
          v31 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v30;
        v31 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v29, v31, a3, a4);
    }
  }
  if (*((unsigned char *)this + 57))
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v37 = *((unsigned char *)this + 57);
    }
    else
    {
      char v37 = 1;
    }
    *(unsigned char *)a2 = 40;
    *((unsigned char *)a2 + 1) = v37;
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
  }
  uint64_t v38 = *((void *)this + 1);
  if ((v38 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v38 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

void sub_1C60B1D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::VisualProperty::_InternalParse(SnippetUI::VisualProperty *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v32 = a2;
  char v5 = (unsigned int *)((char *)this + 16);
  char v6 = (unint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v32, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v32 + 1);
      uint64_t v9 = (char *)*(unsigned __int8 *)v32;
      if (*(char *)v32 < 0)
      {
        uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v32, v9);
          unsigned int v32 = TagFallback;
          if (!TagFallback) {
            return TagFallback;
          }
LABEL_7:
          switch(v9 >> 3)
          {
            case 1u:
              if (v9 != 10) {
                goto LABEL_39;
              }
              uint64_t v10 = (char *)TagFallback - 1;
              break;
            case 2u:
              if (v9 != 16) {
                goto LABEL_39;
              }
              unsigned int v18 = (google::protobuf::internal *)((char *)TagFallback + 1);
              unint64_t v19 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0) {
                goto LABEL_25;
              }
              int v20 = *(char *)v18;
              unint64_t v19 = v19 + (v20 << 7) - 128;
              if (v20 < 0)
              {
                unsigned int v27 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v19);
                unsigned int v32 = v27;
                *((unsigned char *)this + 56) = v28 != 0;
                if (!v27) {
                  return 0;
                }
              }
              else
              {
                unsigned int v18 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_25:
                unsigned int v32 = v18;
                *((unsigned char *)this + 56) = v19 != 0;
              }
              continue;
            case 3u:
              if (v9 != 26) {
                goto LABEL_39;
              }
              unsigned int v21 = (SnippetUI::ActionProperty *)*((void *)this + 5);
              if (v21) {
                goto LABEL_33;
              }
              unsigned int v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
              *((void *)this + 5) = v21;
              goto LABEL_32;
            case 4u:
              if (v9 != 34) {
                goto LABEL_39;
              }
              unsigned int v21 = (SnippetUI::ActionProperty *)*((void *)this + 6);
              if (v21) {
                goto LABEL_33;
              }
              unsigned int v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
              *((void *)this + 6) = v21;
LABEL_32:
              TagFallback = v32;
LABEL_33:
              uint64_t v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v21, TagFallback);
              goto LABEL_44;
            case 5u:
              if (v9 != 40) {
                goto LABEL_39;
              }
              unsigned int v23 = (google::protobuf::internal *)((char *)TagFallback + 1);
              unint64_t v24 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0) {
                goto LABEL_38;
              }
              int v25 = *(char *)v23;
              unint64_t v24 = v24 + (v25 << 7) - 128;
              if (v25 < 0)
              {
                v29 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v24);
                unsigned int v32 = v29;
                *((unsigned char *)this + 57) = v30 != 0;
                if (!v29) {
                  return 0;
                }
              }
              else
              {
                unsigned int v23 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_38:
                unsigned int v32 = v23;
                *((unsigned char *)this + 57) = v24 != 0;
              }
              continue;
            default:
LABEL_39:
              if (v9) {
                BOOL v26 = (v9 & 7) == 4;
              }
              else {
                BOOL v26 = 1;
              }
              if (v26)
              {
                *((_DWORD *)a3 + 20) = v9 - 1;
                return TagFallback;
              }
              uint64_t v22 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_44:
              unsigned int v32 = (google::protobuf::internal *)v22;
              if (v22) {
                continue;
              }
              return 0;
          }
          while (1)
          {
            int v11 = (google::protobuf::internal *)(v10 + 1);
            unsigned int v32 = (google::protobuf::internal *)(v10 + 1);
            unsigned int v12 = (int *)*((void *)this + 4);
            if (!v12) {
              break;
            }
            uint64_t v13 = *((int *)this + 6);
            int v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *((_DWORD *)this + 7))
              {
LABEL_15:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v14 + 1);
                unsigned int v12 = (int *)*((void *)this + 4);
                int v14 = *v12;
              }
              *unsigned int v12 = v14 + 1;
              std::string v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                          + 2));
              uint64_t v16 = *((void *)this + 4);
              uint64_t v17 = *((int *)this + 6);
              *((_DWORD *)this + 6) = v17 + 1;
              *(void *)(v16 + 8 * v17 + 8) = v15;
              int v11 = v32;
              goto LABEL_17;
            }
            *((_DWORD *)this + 6) = v13 + 1;
            std::string v15 = *(SnippetUI::VisualElement **)&v12[2 * v13 + 2];
LABEL_17:
            uint64_t v10 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualElement>(a3, v15, v11);
            unsigned int v32 = (google::protobuf::internal *)v10;
            if (!v10) {
              return 0;
            }
            if (*(void *)a3 <= (unint64_t)v10 || *v10 != 10) {
              goto LABEL_2;
            }
          }
          int v14 = *((_DWORD *)this + 7);
          goto LABEL_15;
        }
        TagFallback = (google::protobuf::internal *)((char *)v32 + 2);
      }
      unsigned int v32 = TagFallback;
      goto LABEL_7;
    }
    return v32;
  }
}

uint64_t SnippetUI::VisualProperty::GetCachedSize(SnippetUI::VisualProperty *this)
{
  return *((unsigned int *)this + 15);
}

char *SnippetUI::VisualProperty::ByteSizeLong(SnippetUI::VisualProperty *this)
{
  uint64_t v2 = *((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = (SnippetUI::ImageElement ***)(v3 + 8);
  }
  else {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      char v6 = *v4++;
      int v7 = SnippetUI::VisualElement::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (this != (SnippetUI::VisualProperty *)&SnippetUI::_VisualProperty_default_instance_)
  {
    int v8 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    if (v8)
    {
      uint64_t v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      v2 += (uint64_t)&v9[((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    uint64_t v10 = (SnippetUI::ActionProperty *)*((void *)this + 6);
    if (v10)
    {
      int v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      v2 += (uint64_t)&v11[((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((unsigned char *)this + 56)) {
    uint64_t v12 = v2 + 2;
  }
  else {
    uint64_t v12 = v2;
  }
  if (*((unsigned char *)this + 57)) {
    uint64_t v13 = (const google::protobuf::UnknownFieldSet *)(v12 + 2);
  }
  else {
    uint64_t v13 = (const google::protobuf::UnknownFieldSet *)v12;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::VisualProperty *)((char *)this + 8), v13, (_DWORD *)this + 15);
  }
  else
  {
    *((_DWORD *)this + 15) = v13;
    return (char *)v13;
  }
}

uint64_t SnippetUI::VisualProperty::IsInitialized(SnippetUI::VisualProperty *this)
{
  return 1;
}

SnippetUI::VisualProperty *SnippetUI::VisualProperty::New(SnippetUI::VisualProperty *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(a2);
}

SnippetUI::VisualProperty *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::VisualProperty *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::VisualProperty>);
  }
  SnippetUI::VisualProperty::VisualProperty(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60B2294(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40BEC01B52);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::VisualProperty>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::VisualProperty *SnippetUI::VisualProperty::New(SnippetUI::VisualProperty *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
}

void SnippetUI::VisualProperty::~VisualProperty(SnippetUI::VisualProperty *this)
{
  SnippetUI::VisualProperty::~VisualProperty(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1F2124648;
  if (this != (SnippetUI::VisualProperty *)&SnippetUI::_VisualProperty_default_instance_)
  {
    uint64_t v2 = *((void *)this + 5);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 6);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::VisualProperty *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::VisualProperty::InitAsDefaultInstance(SnippetUI::VisualProperty *this)
{
  qword_1EB6901A8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB6901B0 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::VisualProperty::_Internal::focus_action(SnippetUI::VisualProperty::_Internal *this, const SnippetUI::VisualProperty *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::VisualProperty::_Internal::selected_action(SnippetUI::VisualProperty::_Internal *this, const SnippetUI::VisualProperty *a2)
{
  return *((void *)this + 6);
}

void SnippetUI::VisualProperty::clear_visuals(SnippetUI::VisualProperty *this)
{
}

uint64_t SnippetUI::VisualProperty::clear_focus_action(SnippetUI::VisualProperty *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::VisualProperty::clear_selected_action(SnippetUI::VisualProperty *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

SnippetUI::VisualProperty *SnippetUI::VisualProperty::VisualProperty(SnippetUI::VisualProperty *this, const SnippetUI::VisualProperty *a2)
{
  *(void *)this = &unk_1F2124648;
  *(_OWORD *)((char *)this + 8) = 0u;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = (SnippetUI::VisualProperty *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 15) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 == (const SnippetUI::VisualProperty *)&SnippetUI::_VisualProperty_default_instance_)
  {
    *((void *)this + 5) = 0;
  }
  else
  {
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
  }
  *((void *)this + 6) = 0;
  *((_WORD *)this + 28) = *((_WORD *)a2 + 28);
  return this;
}

void sub_1C60B25CC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v3, 0x10A1C40B18DE219);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::VisualProperty::default_instance(SnippetUI::VisualProperty *this)
{
  if (atomic_load_explicit(scc_info_VisualProperty_VisualProperty_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_VisualProperty_VisualProperty_2eproto);
  }
  return &SnippetUI::_VisualProperty_default_instance_;
}

void SnippetUI::VisualProperty::InternalSwap(SnippetUI::VisualProperty *this, SnippetUI::VisualProperty *a2)
{
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = (SnippetUI::VisualProperty *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      char v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::VisualProperty *)((char *)this + 16), (SnippetUI::VisualProperty *)((char *)a2 + 16));
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 57);
  *((unsigned char *)this + 57) = *((unsigned char *)a2 + 57);
  *((unsigned char *)a2 + 57) = v8;
}

void siri::dialogengine::ParsePatternXmlFile(long long **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  siri::dialogengine::FindPatternFile(a1, a2, (uint64_t)&v6);
  if (siri::dialogengine::FileExists((uint64_t *)&v6))
  {
    siri::dialogengine::ParsePatternXmlFile(&v6, (long long *)a3);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (v5 < 0) {
      operator delete(__p);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C60B27EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ParsePatternXmlFile(std::string *a1@<X0>, long long *a2@<X8>)
{
  uint64_t v2 = a1;
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    a1 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  xmlTextReaderPtr v4 = xmlReaderForFile((const char *)a1, 0, 0);
  xmlTextReaderPtr v110 = v4;
  if (!v4)
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__str, 3u);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    return;
  }
  char v5 = v4;
  std::string v6 = (char *)operator new(0x100uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)std::string v6 = &unk_1F2124720;
  *(void *)&long long v109 = siri::dialogengine::PatternFile::PatternFile((siri::dialogengine::PatternFile *)(v6 + 24));
  *((void *)&v109 + 1) = v6;
  siri::dialogengine::CatPathToId((unsigned __int8 *)v2, &__str);
  std::string::operator=((std::string *)(v6 + 88), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string::operator=((std::string *)(v6 + 112), v2);
  siri::dialogengine::XmlErrorHandler::XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)v108, 0);
  long long v104 = 0uLL;
  uint64_t v105 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  siri::dialogengine::ReadNextNode(v5, (uint64_t)&__str);
  int data = (int)__str.__r_.__value_.__l.__data_;
  int v103 = (int)__str.__r_.__value_.__l.__data_;
  long long v104 = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
  uint64_t v105 = v90;
  long long v106 = v91;
  __int16 v107 = v92;
  char v8 = 1;
  while (data == 1)
  {
    int v9 = HIBYTE(v105);
    if (v8)
    {
      if (v105 < 0)
      {
        if (*((void *)&v104 + 1) != 7) {
          goto LABEL_191;
        }
        uint64_t v10 = (int *)v104;
      }
      else
      {
        uint64_t v10 = (int *)&v104;
        if (HIBYTE(v105) != 7) {
          goto LABEL_191;
        }
      }
      int v12 = *v10;
      int v13 = *(int *)((char *)v10 + 3);
      if (v12 != 1953784176 || v13 != 1852990836)
      {
LABEL_191:
        siri::dialogengine::GetXmlLineString((uint64_t)&v103, &v99);
        v67 = std::string::insert(&v99, 0, "Root node in XML file is not <pattern> ");
        long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::LogWithLevel((uint64_t)&__str, 3u);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        {
          v66 = (void *)v99.__r_.__value_.__r.__words[0];
          goto LABEL_195;
        }
        goto LABEL_196;
      }
      uint64_t v15 = v109;
      std::string::basic_string[abi:ne180100]<0>(__p, "type");
      siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)__p, &__str);
      std::string::operator=((std::string *)(v15 + 112), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v98 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v95, "id");
      siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v95, &__str);
      std::string::operator=((std::string *)(v15 + 64), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v96 < 0) {
        operator delete(v95[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v93, "xmlns");
      siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v93, &v99);
      siri::dialogengine::StringSplit((unsigned __int8 *)&v99, ":", &__str);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      if (v94 < 0) {
        operator delete(v93[0]);
      }
      if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
      {
        uint64_t v16 = (const std::string::value_type **)(__str.__r_.__value_.__l.__size_ - 24);
        if (*(char *)(__str.__r_.__value_.__l.__size_ - 1) < 0)
        {
          std::string::__init_copy_ctor_external(&v99, *v16, *(void *)(__str.__r_.__value_.__l.__size_ - 16));
        }
        else
        {
          long long v17 = *(_OWORD *)v16;
          v99.__r_.__value_.__r.__words[2] = *(void *)(__str.__r_.__value_.__l.__size_ - 8);
          *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v17;
        }
        if (siri::dialogengine::IsValidVersionNumber((char *)&v99)) {
          std::string::operator=((std::string *)(v15 + 136), &v99);
        }
        else {
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Pattern file does not define a valid version number in an xmlns attribute", v22);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
      }
      v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
      goto LABEL_163;
    }
    if (v105 < 0)
    {
      uint64_t v18 = *((void *)&v104 + 1);
      if (*((void *)&v104 + 1) != 8)
      {
        if (!(_BYTE)v107) {
          goto LABEL_148;
        }
        goto LABEL_58;
      }
      int v11 = (long long *)v104;
    }
    else
    {
      int v11 = &v104;
      if (HIBYTE(v105) != 8)
      {
        if (!(_BYTE)v107) {
          goto LABEL_148;
        }
LABEL_45:
        int v19 = v9;
        int v20 = &v104;
        if (v9 == 4) {
          goto LABEL_82;
        }
        unsigned int v21 = (int *)&v104;
        if (v9 != 7) {
          goto LABEL_75;
        }
        goto LABEL_60;
      }
    }
    if (*(void *)v11 == 0x746E656D6D6F6323)
    {
      std::string::basic_string[abi:ne180100]<0>(&v99, "XML comments are not supported in Pattern files. Use a <meta/> element instead");
      siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&__str, *((uint64_t *)&v106 + 1), v2);
      siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
    }
    if (!(_BYTE)v107) {
      goto LABEL_148;
    }
    if ((v9 & 0x80) == 0) {
      goto LABEL_45;
    }
    uint64_t v18 = *((void *)&v104 + 1);
LABEL_58:
    if (v18 != 7) {
      goto LABEL_80;
    }
    unsigned int v21 = (int *)v104;
LABEL_60:
    int v23 = *v21;
    int v24 = *(int *)((char *)v21 + 3);
    if (v23 != 1953785203 || v24 != 1735289204) {
      goto LABEL_72;
    }
    std::string::basic_string[abi:ne180100]<0>(v87, "name");
    siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v87, &__str);
    if (v88 < 0) {
      operator delete(v87[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v85, "value");
    siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v85, &v99);
    if (v86 < 0) {
      operator delete(v85[0]);
    }
    v111[0] = (long long *)&__str;
    BOOL v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v109 + 160), (const void **)&__str.__r_.__value_.__l.__data_, v111);
    std::string::operator=((std::string *)(v26 + 7), &v99);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v99.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((v9 & 0x80) != 0)
      {
LABEL_79:
        uint64_t v18 = *((void *)&v104 + 1);
LABEL_80:
        int v19 = v9;
        if (v18 != 4) {
          goto LABEL_95;
        }
        int v20 = (long long *)v104;
        int v19 = v9;
        goto LABEL_82;
      }
    }
    else
    {
LABEL_72:
      if ((v9 & 0x80) != 0) {
        goto LABEL_79;
      }
    }
    if (v9 != 4)
    {
LABEL_75:
      if (v9 == 5)
      {
        int v19 = 5;
        unsigned int v27 = &v104;
        goto LABEL_97;
      }
      int v19 = v9;
LABEL_102:
      unsigned int v32 = &v104;
      if (v19 != 6) {
        goto LABEL_139;
      }
      goto LABEL_135;
    }
    int v19 = 4;
    int v20 = &v104;
LABEL_82:
    if (*(_DWORD *)v20 != 1635018093)
    {
      if ((v19 & 0x80) == 0) {
        goto LABEL_139;
      }
LABEL_94:
      uint64_t v18 = *((void *)&v104 + 1);
LABEL_95:
      if (v18 == 5)
      {
        unsigned int v27 = (long long *)v104;
LABEL_97:
        int v29 = *(_DWORD *)v27;
        int v30 = *((unsigned __int8 *)v27 + 4);
        if (v29 == 1970238055 && v30 == 112)
        {
          v33 = (char *)operator new(0xE8uLL);
          *((void *)v33 + 1) = 0;
          *((void *)v33 + 2) = 0;
          *(void *)v33 = &unk_1F2124770;
          uint64_t v71 = siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)(v33 + 24), *((uint64_t *)&v106 + 1), v2);
          *((void *)v33 + 3) = &unk_1F211EA78;
          *(_OWORD *)(v33 + 88) = 0u;
          *(_OWORD *)(v33 + 104) = 0u;
          *(_OWORD *)(v33 + 120) = 0u;
          *(_OWORD *)(v33 + 136) = 0u;
          *(_OWORD *)(v33 + 152) = 0u;
          *(_OWORD *)(v33 + 168) = 0u;
          *(_OWORD *)(v33 + 184) = 0u;
          *(_OWORD *)(v33 + 200) = 0u;
          *(_OWORD *)(v33 + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0u;
          std::string::basic_string[abi:ne180100]<0>(v79, "name");
          siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v79, &__str);
          std::string::operator=((std::string *)(v33 + 88), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (v80 < 0) {
            operator delete(v79[0]);
          }
          std::string::basic_string[abi:ne180100]<0>(v77, "pattern");
          siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v77, &__str);
          std::string::operator=((std::string *)(v33 + 160), &__str);
          uint64_t v34 = v71;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__str.__r_.__value_.__l.__data_);
            uint64_t v34 = v71;
          }
          if (v78 < 0)
          {
            operator delete(v77[0]);
            uint64_t v34 = v71;
          }
          uint64_t v35 = v109;
          v76[0] = v34;
          v76[1] = (uint64_t)v33;
          atomic_fetch_add_explicit((atomic_ullong *volatile)v33 + 1, 1uLL, memory_order_relaxed);
          siri::dialogengine::PatternFile::AddPatternGroup(v35, v76);
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v33);
          unsigned int v36 = v101;
          if (v101 >= v102)
          {
            v69 = v2;
            v70 = a2;
            uint64_t v38 = v100;
            uint64_t v39 = ((char *)v101 - (char *)v100) >> 4;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 60) {
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v41 = (char *)v102 - (char *)v100;
            if (v102 - v100 > v40) {
              unint64_t v40 = v41 >> 3;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v40;
            }
            if (v42 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v43 = (char *)operator new(16 * v42);
            *(void *)&long long v44 = v71;
            *((void *)&v44 + 1) = v33;
            v45 = &v43[16 * v39];
            *(_OWORD *)v45 = v44;
            char v37 = (uint64_t *)(v45 + 16);
            atomic_fetch_add_explicit((atomic_ullong *volatile)v33 + 1, 1uLL, memory_order_relaxed);
            if (v36 == v38)
            {
              v100 = (uint64_t *)&v43[16 * v39];
              v101 = (uint64_t *)(v45 + 16);
              v102 = (uint64_t *)&v43[16 * v42];
              uint64_t v2 = v69;
              a2 = v70;
            }
            else
            {
              do
              {
                long long v46 = *((_OWORD *)v36 - 1);
                v36 -= 2;
                *((_OWORD *)v45 - 1) = v46;
                v45 -= 16;
                uint64_t *v36 = 0;
                v36[1] = 0;
              }
              while (v36 != v38);
              v47 = v100;
              unsigned int v36 = v101;
              v100 = (uint64_t *)v45;
              v101 = v37;
              v102 = (uint64_t *)&v43[16 * v42];
              uint64_t v2 = v69;
              a2 = v70;
              if (v36 != v47)
              {
                do
                {
                  v48 = (std::__shared_weak_count *)*(v36 - 1);
                  if (v48) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
                  }
                  v36 -= 2;
                }
                while (v36 != v47);
                unsigned int v36 = v47;
              }
            }
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            uint64_t *v101 = v71;
            v36[1] = (uint64_t)v33;
            atomic_fetch_add_explicit((atomic_ullong *volatile)v33 + 1, 1uLL, memory_order_relaxed);
            char v37 = v36 + 2;
          }
          v101 = v37;
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v33);
          int v9 = HIBYTE(v105);
          int v19 = HIBYTE(v105);
          if ((v105 & 0x8000000000000000) == 0) {
            goto LABEL_102;
          }
        }
        else if ((v19 & 0x80) == 0)
        {
          goto LABEL_102;
        }
        uint64_t v18 = *((void *)&v104 + 1);
      }
      if (v18 != 6) {
        goto LABEL_139;
      }
      unsigned int v32 = (long long *)v104;
LABEL_135:
      int v49 = *(_DWORD *)v32;
      int v50 = *((unsigned __int16 *)v32 + 2);
      BOOL v51 = v49 == 1818323300 && v50 == 26479;
      if (v51 && v100 != v101)
      {
        uint64_t v65 = *(v101 - 2);
        v64 = (std::__shared_weak_count *)*(v101 - 1);
        if (v64) {
          atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v74, "id");
        siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v74, &__str);
        siri::dialogengine::PatternGroup::SetDialogIdWithComponent(v65, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v75 < 0) {
          operator delete(v74[0]);
        }
        if (v64) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v64);
        }
      }
      goto LABEL_139;
    }
    std::string::basic_string[abi:ne180100]<0>(v83, "name");
    siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v83, &__str);
    if (v84 < 0) {
      operator delete(v83[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v81, "value");
    siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v81, &v99);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    v111[0] = (long long *)&__str;
    uint64_t v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v109 + 184), (const void **)&__str.__r_.__value_.__l.__data_, v111);
    std::string::operator=((std::string *)(v28 + 7), &v99);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v99.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    int v19 = v9;
    if ((v9 & 0x80) != 0) {
      goto LABEL_94;
    }
LABEL_139:
    if ((v9 & 0x80) != 0)
    {
      if (*((void *)&v104 + 1) == 6)
      {
        v52 = (long long *)v104;
LABEL_144:
        int v53 = *(_DWORD *)v52;
        int v54 = *((unsigned __int16 *)v52 + 2);
        BOOL v55 = v53 == 1970497910 && v54 == 27745;
        if (v55 && v100 != v101)
        {
          uint64_t v63 = *(v101 - 2);
          v62 = (std::__shared_weak_count *)*(v101 - 1);
          if (v62) {
            atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v72, "id");
          siri::dialogengine::GetXmlAttr(v5, (const xmlChar *)v72, &__str);
          siri::dialogengine::PatternGroup::SetVisualIdWithComponent(v63, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (v73 < 0) {
            operator delete(v72[0]);
          }
          if (v62) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v62);
          }
        }
      }
    }
    else
    {
      v52 = &v104;
      if (v9 == 6) {
        goto LABEL_144;
      }
    }
LABEL_148:
    if (!HIBYTE(v107)) {
      goto LABEL_163;
    }
    if ((v9 & 0x80) != 0)
    {
      if (*((void *)&v104 + 1) != 5) {
        goto LABEL_163;
      }
      v56 = (long long *)v104;
    }
    else
    {
      v56 = &v104;
      if (v9 != 5) {
        goto LABEL_163;
      }
    }
    int v57 = *(_DWORD *)v56;
    int v58 = *((unsigned __int8 *)v56 + 4);
    if (v57 == 1970238055 && v58 == 112)
    {
      v60 = v101;
      if (v100 != v101)
      {
        v61 = (std::__shared_weak_count *)*(v101 - 1);
        if (v61) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        }
        v101 = v60 - 2;
      }
    }
LABEL_163:
    siri::dialogengine::ReadNextNode(v5, (uint64_t)&__str);
    int data = (int)__str.__r_.__value_.__l.__data_;
    int v103 = (int)__str.__r_.__value_.__l.__data_;
    if ((v9 & 0x80) != 0) {
      operator delete((void *)v104);
    }
    char v8 = 0;
    long long v104 = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
    uint64_t v105 = v90;
    long long v106 = v91;
    __int16 v107 = v92;
  }
  if (!data)
  {
    *a2 = v109;
    a2 = &v109;
    goto LABEL_196;
  }
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)&__str, 3u);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v66 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_195:
    operator delete(v66);
  }
LABEL_196:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v105) < 0) {
    operator delete((void *)v104);
  }
  siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)v108);
  if (*((void *)&v109 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v109 + 1));
  }
  xmlTextReaderPtr v110 = 0;
  xmlFreeTextReader(v5);
}

void sub_1C60B33F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  std::string __p = (void *)(v41 - 240);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v39 < 0) {
    operator delete(*(void **)(v41 - 208));
  }
  siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)(v41 - 160));
  if (*(void *)(v41 - 120)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v41 - 120));
  }
  std::unique_ptr<_xmlTextReader,siri::dialogengine::xmlTextReaderDeleter>::reset[abi:ne180100]((xmlTextReader **)(v41 - 112));
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::PatternGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2124770;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2124770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::PatternFile>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternFile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2124720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternFile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2124720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL siri::dialogengine::TimeStamp::IsValid(siri::dialogengine::TimeStamp *this)
{
  return *(void *)this != 0x7FFFFFFFFFFFFFFFLL;
}

void siri::dialogengine::GetICUTimeStamp(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int v4 = *(char *)(a3 + 23);
  std::string::size_type v5 = *(void *)(a3 + 8);
  uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
  if (v4 < 0) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = a1 == 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v8 = a2;
  if (v7) {
    uint64_t v8 = 0;
  }
  *a4 = v8 + a1;
  int v9 = (std::string *)(a4 + 1);
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, v5);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
}

void siri::dialogengine::GetICUTimeStamp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

double siri::dialogengine::GetSecsSinceEpoch(siri::dialogengine *this)
{
  gettimeofday(&v2, 0);
  return (double)v2.tv_usec / 1000000.0 + (double)v2.tv_sec;
}

double siri::dialogengine::GetUTCOffsetSecs(siri::dialogengine *this)
{
  time_t v6 = time(0);
  gmtime_r(&v6, &v5);
  localtime_r(&v6, &v4);
  v5.tm_isdst = 0;
  v4.tm_isdst = 0;
  time_t v1 = mktime(&v4);
  time_t v2 = mktime(&v5);
  return difftime(v1, v2);
}

double siri::dialogengine::GetLocalTime(siri::dialogengine *this)
{
  time_t v5 = time(0);
  localtime_r(&v5, &v4);
  time_t v1 = timegm(&v4);
  gettimeofday(&v3, 0);
  return (double)v3.tv_usec / 1000000.0 + (double)v1;
}

void siri::dialogengine::GetTimeStampFromString(const std::string *a1@<X0>, unsigned char *a2@<X1>, time_t *a3@<X8>)
{
  *a3 = 0;
  time_t v6 = (std::string *)(a3 + 1);
  std::string::basic_string[abi:ne180100]<0>(a3 + 1, "");
  siri::dialogengine::StringTrim(" \t\n\r", a1, (std::string *)&__p);
  siri::dialogengine::StringToUpper((uint64_t)&__p, (uint64_t)&v24);
  if (SHIBYTE(__p.tm_year) < 0) {
    operator delete(*(void **)&__p.tm_sec);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "(");
  if (siri::dialogengine::StringStartsWith(&v24, (unsigned __int8 *)&__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, ")");
    BOOL v7 = !siri::dialogengine::StringEndsWith(&v24, (unsigned __int8 *)&v21);
    if (v23 < 0) {
      operator delete(v21);
    }
  }
  else
  {
    BOOL v7 = 1;
  }
  if ((SHIBYTE(__p.tm_year) & 0x80000000) == 0)
  {
    if (v7) {
      goto LABEL_9;
    }
LABEL_12:
    siri::dialogengine::StringTrim("()", &v24, (std::string *)&__p);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.tm_sec;
    v24.__r_.__value_.__r.__words[2] = *(void *)&__p.tm_mon;
    siri::dialogengine::StringSplit((unsigned __int8 *)&v24, ",", &v21);
    if (v21 == v22 || 0xAAAAAAAAAAAAAAABLL * ((v22 - (unsigned char *)v21) >> 3) >= 7)
    {
      if (a2) {
        *a2 = 0;
      }
LABEL_59:
      *(void *)&__p.tm_sec = &v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_60;
    }
    p_str = &__str;
    siri::dialogengine::StringTrim(" \t\n\r", (const std::string *)((char *)v21 + 8 * ((v22 - (unsigned char *)v21) >> 3) - 24), &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = __str.__r_.__value_.__l.__size_;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (size >= 1)
    {
      uint64_t v10 = (char *)p_str + size;
      int v11 = p_str;
      while (1)
      {
        int v12 = memchr(v11, 32, size);
        if (!v12) {
          goto LABEL_45;
        }
        if (*v12 == 32) {
          break;
        }
        int v11 = (std::string *)(v12 + 1);
        int64_t size = v10 - (unsigned char *)v11;
        if (v10 - (unsigned char *)v11 < 1) {
          goto LABEL_45;
        }
      }
      if (v12 == v10 || v12 - (unsigned char *)p_str == -1) {
        goto LABEL_45;
      }
      std::string::basic_string(&v19, &__str, v12 - (unsigned char *)p_str, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v25);
      siri::dialogengine::StringTrim(" \t\n\r", &v19, (std::string *)&__p);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v19, "UTC");
      BOOL v13 = siri::dialogengine::StringsEqual((uint64_t)&__p, (uint64_t)&v19);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      if (v13)
      {
        std::string::operator=(v6, (const std::string *)&__p);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v19, "LOCAL");
        BOOL v14 = siri::dialogengine::StringsEqual((uint64_t)&__p, (uint64_t)&v19);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        if (!v14)
        {
          char v15 = 0;
          if (a2) {
            *a2 = 0;
          }
LABEL_42:
          if (SHIBYTE(__p.tm_year) < 0) {
            operator delete(*(void **)&__p.tm_sec);
          }
          if ((v15 & 1) == 0) {
            goto LABEL_57;
          }
          goto LABEL_45;
        }
        MEMORY[0x1C8796900](v6, "");
      }
      char v15 = 1;
      goto LABEL_42;
    }
LABEL_45:
    memset(&__p, 0, sizeof(__p));
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (unsigned char *)v21) >> 3);
    __p.tm_year = siri::dialogengine::StringToInt((const std::string *)v21, 0, 0) - 1900;
    if (v16 <= 1)
    {
      __p.tm_mon = 0;
    }
    else
    {
      __p.tm_mon = siri::dialogengine::StringToInt((const std::string *)v21 + 1, 0, 0) - 1;
      if (v16 >= 3)
      {
        __p.tm_mday = siri::dialogengine::StringToInt((const std::string *)v21 + 2, 0, 0);
        if (v16 >= 4)
        {
          __p.tm_hour = siri::dialogengine::StringToInt((const std::string *)v21 + 3, 0, 0);
          if (v16 >= 5)
          {
            __p.tm_min = siri::dialogengine::StringToInt((const std::string *)v21 + 4, 0, 0);
            if (v16 < 6) {
              int v17 = 0;
            }
            else {
              int v17 = siri::dialogengine::StringToInt((const std::string *)v21 + 5, 0, 0);
            }
            goto LABEL_55;
          }
LABEL_54:
          int v17 = 0;
          __p.tm_min = 0;
LABEL_55:
          __p.tm_sec = v17;
          *a3 = timegm(&__p);
          if (a2) {
            *a2 = 1;
          }
LABEL_57:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          goto LABEL_59;
        }
LABEL_53:
        __p.tm_hour = 0;
        goto LABEL_54;
      }
    }
    __p.tm_mday = 1;
    goto LABEL_53;
  }
  operator delete(*(void **)&__p.tm_sec);
  if (!v7) {
    goto LABEL_12;
  }
LABEL_9:
  if (a2) {
    *a2 = 0;
  }
LABEL_60:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1C60B3E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  a9 = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v38 - 57) < 0) {
    operator delete(*(void **)(v38 - 80));
  }
  if (*(char *)(v36 + 31) < 0) {
    operator delete(*v37);
  }
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternFile *siri::dialogengine::PatternFile::PatternFile(siri::dialogengine::PatternFile *this)
{
  *((void *)this + 7) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(void *)this = &unk_1F21247C0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 17, "1.0");
  *((void *)this + 21) = 0;
  *((void *)this + 20) = (char *)this + 168;
  *((void *)this + 24) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = (char *)this + 192;
  *((void *)this + 28) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = (char *)this + 216;
  return this;
}

void sub_1C60B4030(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 135) < 0) {
    operator delete(*(void **)(v1 + 112));
  }
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*(void **)(v1 + 88));
  }
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternFile::~PatternFile(siri::dialogengine::PatternFile *this)
{
  siri::dialogengine::PatternFile::~PatternFile(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F21247C0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((void **)this + 27));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 24));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 21));
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

void siri::dialogengine::PatternFile::GetName(siri::dialogengine::PatternFile *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 8), *((void *)this + 9));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 4);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 10);
  }
}

std::string *siri::dialogengine::PatternFile::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 64), a2);
}

void siri::dialogengine::PatternFile::GetPath(siri::dialogengine::PatternFile *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((void *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 13);
  }
}

std::string *siri::dialogengine::PatternFile::SetPath(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 88), a2);
}

void siri::dialogengine::PatternFile::GetType(siri::dialogengine::PatternFile *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 135) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 14), *((void *)this + 15));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 7);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 16);
  }
}

std::string *siri::dialogengine::PatternFile::SetType(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 112), a2);
}

void siri::dialogengine::PatternFile::GetFormatVersion(siri::dialogengine::PatternFile *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 159) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 17), *((void *)this + 18));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 136);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 19);
  }
}

std::string *siri::dialogengine::PatternFile::SetFormatVersion(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 136), a2);
}

uint64_t siri::dialogengine::PatternFile::GetSettings@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, this + 20);
}

void siri::dialogengine::PatternFile::GetSettingsAsVariables(siri::dialogengine::PatternFile *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)a2 = a2 + 8;
  time_t v2 = (long long *)*((void *)this + 20);
  timeval v3 = (char *)this + 168;
  if (v2 != (long long *)((char *)this + 168))
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v15, v2 + 2);
      siri::dialogengine::PatternFile::GetSettingAsVariable((uint64_t)this, &v15, (uint64_t)&v13);
      uint64_t v6 = v13;
      if (v13)
      {
        uint64_t v18 = &v15;
        BOOL v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)&v15.__r_.__value_.__l.__data_, (long long **)&v18);
        uint64_t v8 = v14;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v9 = (std::__shared_weak_count *)v7[8];
        v7[7] = v6;
        v7[8] = (uint64_t)v8;
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        if (!v8) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v8 = v14;
        if (!v14) {
          goto LABEL_9;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_9:
      if (v17 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      uint64_t v10 = (long long *)*((void *)v2 + 1);
      if (v10)
      {
        do
        {
          int v11 = v10;
          uint64_t v10 = *(long long **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int v11 = (long long *)*((void *)v2 + 2);
          BOOL v12 = *(void *)v11 == (void)v2;
          time_t v2 = v11;
        }
        while (!v12);
      }
      time_t v2 = v11;
    }
    while (v11 != (long long *)v3);
  }
}

void sub_1C60B437C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v4);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternFile::GetSettingAsVariable(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  siri::dialogengine::Context::Context((siri::dialogengine::Context *)v13);
  siri::dialogengine::PatternFile::GetSetting(a1, (const void **)&a2->__r_.__value_.__l.__data_, &v11);
  std::string::basic_string[abi:ne180100]<0>(&v10, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::ResolveValue(v13, (const void **)&v11.__r_.__value_.__l.__data_, 1, (uint64_t)&v10, (uint64_t)__p, (uint64_t *)&v12);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if ((void)v12)
  {
    std::string::operator=((std::string *)(v12 + 8), a2);
    *(_OWORD *)a3 = v12;
  }
  else
  {
    std::operator+<char>();
    uint64_t v6 = std::string::append(&v10, "'");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v11, 3u);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    if (*((void *)&v12 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v13);
}

void sub_1C60B4510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,char a31)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a31);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternFile::GetSetting(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = std::__tree<std::string>::find<std::string>(a1 + 160, a2);
  if (a1 + 168 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v5 + 79) < 0)
  {
    long long v7 = *(const std::string::value_type **)(v5 + 56);
    std::string::size_type v8 = *(void *)(v5 + 64);
    std::string::__init_copy_ctor_external(a3, v7, v8);
  }
  else
  {
    long long v6 = *(_OWORD *)(v5 + 56);
    a3->__r_.__value_.__r.__words[2] = *(void *)(v5 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

void siri::dialogengine::PatternFile::SetSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 160;
  if (v2 != a2) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v2, *(long long **)a2, (long long *)(a2 + 8));
  }
}

std::string *siri::dialogengine::PatternFile::AddSetting(uint64_t a1, long long *a2, const std::string *a3)
{
  long long v6 = a2;
  tm v4 = (std::string *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 160), (const void **)a2, &v6)+ 7);
  return std::string::operator=(v4, a3);
}

uint64_t siri::dialogengine::PatternFile::GetPrintSupportingDialog(uint64_t a1, int a2)
{
  if ((a2 - 3) > 1) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "printSupportingDialogInDisplayModes");
  siri::dialogengine::PatternFile::GetSetting(a1, (const void **)__p, &v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = siri::dialogengine::StringToBool(&v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_1C60B474C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::PatternFile::GetMetadata@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, this + 23);
}

void siri::dialogengine::PatternFile::GetMetadata(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = std::__tree<std::string>::find<std::string>(a1 + 184, a2);
  if (a1 + 192 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, 0);
  }
  else if (*(char *)(v5 + 79) < 0)
  {
    std::string v7 = *(const std::string::value_type **)(v5 + 56);
    std::string::size_type v8 = *(void *)(v5 + 64);
    std::string::__init_copy_ctor_external(a3, v7, v8);
  }
  else
  {
    long long v6 = *(_OWORD *)(v5 + 56);
    a3->__r_.__value_.__r.__words[2] = *(void *)(v5 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

void siri::dialogengine::PatternFile::SetMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 184;
  if (v2 != a2) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v2, *(long long **)a2, (long long *)(a2 + 8));
  }
}

std::string *siri::dialogengine::PatternFile::AddMetadata(uint64_t a1, long long *a2, const std::string *a3)
{
  long long v6 = a2;
  tm v4 = (std::string *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 184), (const void **)a2, &v6)+ 7);
  return std::string::operator=(v4, a3);
}

uint64_t siri::dialogengine::PatternFile::GetPatternGroups@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>::map[abi:ne180100](a2, this + 26);
}

uint64_t std::map<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)a1 = a1 + 8;
  tm v4 = a2 + 1;
  uint64_t v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (*(uint64_t ***)a1 == v3) {
        break;
      }
      std::string v7 = v3;
      if (v6)
      {
        do
        {
          uint64_t v8 = v6;
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v8 = (uint64_t)v7[2];
          BOOL v9 = *(void *)v8 == (void)v7;
          std::string v7 = (uint64_t **)v8;
        }
        while (v9);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v8 + 32), v5 + 4))
      {
        if (!*v3) {
          goto LABEL_9;
        }
LABEL_11:
        std::string v15 = (void *)v8;
        std::string v10 = (uint64_t **)(v8 + 8);
        goto LABEL_13;
      }
      std::string v10 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, &v15, v5 + 4);
LABEL_13:
      if (!*v10) {
        goto LABEL_14;
      }
LABEL_15:
      std::string v11 = (const void **)v5[1];
      if (v11)
      {
        do
        {
          long long v12 = (const void ***)v11;
          std::string v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          long long v12 = (const void ***)v5[2];
          BOOL v9 = *v12 == v5;
          uint64_t v5 = (const void **)v12;
        }
        while (!v9);
      }
      uint64_t v5 = (const void **)v12;
      if (v12 == v4) {
        return a1;
      }
    }
    uint64_t v8 = (uint64_t)v3;
    if (!v6)
    {
LABEL_9:
      std::string v15 = v3;
      std::string v10 = v3;
LABEL_14:
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::PatternGroup>> const&>((uint64_t)v14, a1, (long long *)v5 + 2);
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v10, v14[0]);
      v14[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_1C60B4A00(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::PatternGroup>> const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  uint64_t result = std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(unsigned char *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 1;
  return result;
}

void sub_1C60B4A68(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternFile::GetPatternGroup@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__tree<std::string>::find<std::string>(a1 + 208, a2);
  if (a1 + 216 == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(result + 64);
    *a3 = *(void *)(result + 56);
    a3[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void siri::dialogengine::PatternFile::SetPatternGroups(uint64_t a1, void *a2)
{
  uint64_t v2 = (uint64_t **)(a1 + 208);
  if ((void *)(a1 + 208) != a2)
  {
    uint64_t v3 = a2 + 1;
    tm v4 = (void *)*a2;
    if (*(void *)(a1 + 224))
    {
      uint64_t v6 = *(void *)(a1 + 216);
      uint64_t v5 = (void *)(a1 + 216);
      std::string v7 = (void *)*(v5 - 1);
      *(v5 - 1) = v5;
      *(void *)(v6 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
      *uint64_t v5 = 0;
      v5[1] = 0;
      if (v7[1]) {
        uint64_t v8 = (void *)v7[1];
      }
      else {
        uint64_t v8 = v7;
      }
      uint64_t v22 = v2;
      char v23 = v8;
      std::string v24 = v8;
      if (!v8 || (char v23 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8), v4 == v3))
      {
        std::string v15 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
          uint64_t v10 = v4[7];
          uint64_t v9 = v4[8];
          if (v9) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
          }
          std::string v11 = (std::__shared_weak_count *)v8[8];
          v8[7] = v10;
          v8[8] = v9;
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          long long v12 = v24;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v21, (const void **)v24 + 4);
          std::__tree<std::string>::__insert_node_at(v2, v21, leaf_high, v12);
          uint64_t v8 = v23;
          std::string v24 = v23;
          if (v23) {
            char v23 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v23);
          }
          BOOL v14 = (void *)v4[1];
          if (v14)
          {
            do
            {
              std::string v15 = v14;
              BOOL v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              std::string v15 = (void *)v4[2];
              BOOL v16 = *v15 == (void)v4;
              tm v4 = v15;
            }
            while (!v16);
          }
          if (!v8) {
            break;
          }
          tm v4 = v15;
        }
        while (v15 != v3);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v22);
      tm v4 = v15;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::PatternGroup>> const&>((uint64_t)&v22, (uint64_t)v2, (long long *)v4 + 2);
        char v17 = (uint64_t *)v22;
        uint64_t v18 = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v21, (const void **)v22 + 4);
        std::__tree<std::string>::__insert_node_at(v2, v21, v18, v17);
        uint64_t v22 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v22);
        std::string v19 = (void *)v4[1];
        if (v19)
        {
          do
          {
            int v20 = v19;
            std::string v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            int v20 = (void *)v4[2];
            BOOL v16 = *v20 == (void)v4;
            tm v4 = v20;
          }
          while (!v16);
        }
        tm v4 = v20;
      }
      while (v20 != v3);
    }
  }
}

void sub_1C60B4CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternFile::AddPatternGroup(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v5 = (uint64_t **)(a1 + 208);
    if (*(char *)(v2 + 87) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 64), *(void *)(v2 + 72));
    }
    else {
      std::string __p = *(std::string *)(v2 + 64);
    }
    uint64_t v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)v5, &v16, (const void **)&__p.__r_.__value_.__l.__data_);
    std::string v7 = *v6;
    if (!*v6)
    {
      uint64_t v8 = (uint64_t **)v6;
      std::string v7 = operator new(0x48uLL);
      v14[1] = a1 + 216;
      *((_OWORD *)v7 + 2) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      std::string::size_type v9 = __p.__r_.__value_.__r.__words[2];
      memset(&__p, 0, sizeof(__p));
      *((void *)v7 + 7) = 0;
      *((void *)v7 + 8) = 0;
      *((void *)v7 + 6) = v9;
      char v15 = 1;
      std::__tree<std::string>::__insert_node_at(v5, v16, v8, (uint64_t *)v7);
      v14[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
    }
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    long long v12 = (std::__shared_weak_count *)*((void *)v7 + 8);
    *((void *)v7 + 7) = v11;
    *((void *)v7 + 8) = v10;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C60B4DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ValidateSettingValue(void *a1, uint64_t a2)
{
  v24[3] = *MEMORY[0x1E4F143B8];
  siri::dialogengine::StringToLower(a2, (uint64_t)__p);
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = a1[1];
    if (v5 != 10)
    {
      if (v5 != 11)
      {
        if (v5 != 14) {
          goto LABEL_49;
        }
        if (*(void *)*a1 != 0x6F4C6C6175736976 || *(void *)(*a1 + 6) != 0x6E6F697461636F4CLL) {
          goto LABEL_49;
        }
LABEL_19:
        std::string::basic_string[abi:ne180100]<0>(v22, "conversationspace");
        std::string::basic_string[abi:ne180100]<0>(v23, "snippetspace");
        std::unordered_set<std::string>::unordered_set((uint64_t)v18, v22, 2);
        std::string v7 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(v19, (unsigned __int8 **)__p);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v18);
        for (uint64_t i = 0; i != -6; i -= 3)
        {
          if (SHIBYTE(v23[i + 2]) < 0) {
            operator delete(*(void **)&v22[i * 8 + 24]);
          }
        }
        goto LABEL_59;
      }
      if (*(void *)*a1 != 0x7242776F646E6977 || *(void *)(*a1 + 3) != 0x6B61657242776F64) {
        goto LABEL_49;
      }
LABEL_55:
      std::string::basic_string[abi:ne180100]<0>(v22, "sentence");
      std::string::basic_string[abi:ne180100]<0>(v23, "word");
      std::unordered_set<std::string>::unordered_set((uint64_t)v18, v22, 2);
      std::string v7 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(v19, (unsigned __int8 **)__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v18);
      for (uint64_t j = 0; j != -6; j -= 3)
      {
        if (SHIBYTE(v23[j + 2]) < 0) {
          operator delete(*(void **)&v22[j * 8 + 24]);
        }
      }
      goto LABEL_59;
    }
    a1 = (void *)*a1;
  }
  else
  {
    int v3 = *((unsigned __int8 *)a1 + 23);
    if (v3 != 10)
    {
      if (v3 != 11)
      {
        if (v3 != 14
          || (*a1 == 0x6F4C6C6175736976 ? (BOOL v4 = *(void *)((char *)a1 + 6) == 0x6E6F697461636F4CLL) : (BOOL v4 = 0), !v4))
        {
LABEL_49:
          BOOL v14 = 1;
          goto LABEL_60;
        }
        goto LABEL_19;
      }
      if (*a1 != 0x7242776F646E6977 || *(void *)((char *)a1 + 3) != 0x6B61657242776F64) {
        goto LABEL_49;
      }
      goto LABEL_55;
    }
  }
  if (*a1 == 0x795474706D6F7270 && *((_WORD *)a1 + 4) == 25968)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "action");
    std::string::basic_string[abi:ne180100]<0>(v23, "continuation");
    std::unordered_set<std::string>::unordered_set((uint64_t)v18, v22, 2);
    std::string v7 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(v19, (unsigned __int8 **)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v18);
    for (uint64_t k = 0; k != -6; k -= 3)
    {
      if (SHIBYTE(v23[k + 2]) < 0) {
        operator delete(*(void **)&v22[k * 8 + 24]);
      }
    }
  }
  else
  {
    if (*a1 != 0x7954776F646E6977 || *((_WORD *)a1 + 4) != 25968) {
      goto LABEL_49;
    }
    std::string::basic_string[abi:ne180100]<0>(v22, "character");
    std::string::basic_string[abi:ne180100]<0>(v23, "sentence");
    std::string::basic_string[abi:ne180100]<0>(v24, "word");
    std::unordered_set<std::string>::unordered_set((uint64_t)v18, v22, 3);
    std::string v7 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(v19, (unsigned __int8 **)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v18);
    for (uint64_t m = 0; m != -9; m -= 3)
    {
      if (SHIBYTE(v24[m + 2]) < 0) {
        operator delete((void *)v24[m]);
      }
    }
  }
LABEL_59:
  BOOL v14 = v7 != 0;
LABEL_60:
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  return v14;
}

void sub_1C60B51E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v27 = 0;
  while (1)
  {
    if (*(char *)(v25 + v27 + 71) < 0) {
      operator delete(*(void **)(v25 + v27 + 48));
    }
    v27 -= 24;
    if (v27 == -72)
    {
      if (a19 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t *std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    char v3 = *((unsigned char *)a2 + 23);
    if (v3 >= 0) {
      BOOL v4 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      BOOL v4 = a2[1];
    }
    if (v3 >= 0) {
      uint64_t v5 = (unsigned __int8 *)a2;
    }
    else {
      uint64_t v5 = *a2;
    }
    do
    {
      uint64_t v6 = *((unsigned __int8 *)v2 + 39);
      if ((v6 & 0x80u) == 0) {
        std::string v7 = (unsigned __int8 *)*((unsigned __int8 *)v2 + 39);
      }
      else {
        std::string v7 = (unsigned __int8 *)v2[3];
      }
      if (v7 == v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v2[2], v5, v2[3])) {
            return v2;
          }
        }
        else
        {
          if (!*((unsigned char *)v2 + 39)) {
            return v2;
          }
          uint64_t v8 = 0;
          while (*((unsigned __int8 *)v2 + v8 + 16) == v5[v8])
          {
            if (v6 == ++v8) {
              return v2;
            }
          }
        }
      }
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return v2;
}

uint64_t siri::dialogengine::PatternFile::Validate(siri::dialogengine::PatternFile *this, siri::dialogengine::Context *a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](this);
  v309 = v3;
  uint64_t v352 = *MEMORY[0x1E4F143B8];
  uint64_t v308 = v2;
  v291 = (std::string *)(v2 + 88);
  siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)v321, 0, (const std::string *)(v2 + 88));
  std::string::basic_string[abi:ne180100]<0>(__p, "Pattern.dtd");
  if (*(char *)(v308 + 111) >= 0) {
    BOOL v4 = (const char *)v291;
  }
  else {
    BOOL v4 = *(const char **)(v308 + 88);
  }
  uint64_t v5 = xmlParseFile(v4);
  char v307 = siri::dialogengine::ValidateXmlDoc(v309, v5, (uint64_t)__p);
  if (v320 < 0) {
    operator delete(__p[0]);
  }
  siri::dialogengine::PatternRegistry::GetSchema((uint64_t)v309, (const std::string::value_type **)(v308 + 112), (uint64_t *)&v317);
  uint64_t v6 = v317;
  if (!v317)
  {
    std::operator+<char>();
    siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v329, 0);
    if (SHIBYTE(v329.__end_) < 0) {
      operator delete(v329.__first_);
    }
    char v307 = 0;
    goto LABEL_835;
  }
  siri::dialogengine::CatPathToId((unsigned __int8 *)v291, &v329);
  v288 = (const void **)(v308 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v308 + 87);
  if ((v7 & 0x80u) == 0) {
    std::__split_buffer<std::string>::pointer v8 = (std::__split_buffer<std::string>::pointer)*(unsigned __int8 *)(v308 + 87);
  }
  else {
    std::__split_buffer<std::string>::pointer v8 = *(std::__split_buffer<std::string>::pointer *)(v308 + 72);
  }
  std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(v329.__end_);
  int v10 = SHIBYTE(v329.__end_);
  if (SHIBYTE(v329.__end_) < 0) {
    std::__split_buffer<std::string>::pointer end_high = v329.__begin_;
  }
  if (v8 == end_high)
  {
    if (SHIBYTE(v329.__end_) >= 0) {
      first = (unsigned __int8 *)&v329;
    }
    else {
      first = (unsigned __int8 *)v329.__first_;
    }
    if ((v7 & 0x80) != 0)
    {
      BOOL v17 = memcmp(*v288, first, *(void *)(v308 + 72)) != 0;
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_25;
      }
    }
    else if (*(unsigned char *)(v308 + 87))
    {
      uint64_t v12 = v7 - 1;
      uint64_t v13 = (unsigned __int8 *)(v308 + 64);
      do
      {
        int v15 = *v13++;
        int v14 = v15;
        int v16 = *first++;
        BOOL v17 = v14 != v16;
        BOOL v18 = v14 != v16 || v12-- == 0;
      }
      while (!v18);
      if ((SHIBYTE(v329.__end_) & 0x80000000) == 0)
      {
LABEL_25:
        if (!v17) {
          goto LABEL_52;
        }
LABEL_32:
        siri::dialogengine::DirName(v291, (uint64_t)&v312);
        siri::dialogengine::BaseName((uint64_t)&v312, &v344);
        siri::dialogengine::BaseName((uint64_t)v291, &v343);
        siri::dialogengine::JoinPath((uint64_t)&v344, (uint64_t)&v343, (uint64_t)&v329);
        if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v343.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v344.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v312.__r_.__value_.__l.__data_);
        }
        std::operator+<char>();
        std::string v19 = std::string::append(&v343, "' does not match file path: ");
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v312.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v329.__end_) >= 0) {
          char v21 = (const std::string::value_type *)&v329;
        }
        else {
          char v21 = (const std::string::value_type *)v329.__first_;
        }
        if (SHIBYTE(v329.__end_) >= 0) {
          std::string::size_type begin = HIBYTE(v329.__end_);
        }
        else {
          std::string::size_type begin = (std::string::size_type)v329.__begin_;
        }
        char v23 = std::string::append(&v312, v21, begin);
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v344.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v344.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v344, (uint64_t)v321);
        if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v344.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v312.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v343.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v329.__end_) < 0) {
          operator delete(v329.__first_);
        }
        goto LABEL_52;
      }
    }
    else
    {
      BOOL v17 = 0;
      if ((SHIBYTE(v329.__end_) & 0x80000000) == 0) {
        goto LABEL_25;
      }
    }
  }
  else
  {
    BOOL v17 = 1;
    if ((SHIBYTE(v329.__end_) & 0x80000000) == 0) {
      goto LABEL_25;
    }
  }
  operator delete(v329.__first_);
  if (v17) {
    goto LABEL_32;
  }
LABEL_52:
  siri::dialogengine::PatternSchema::GetGroups(v6, &v344);
  *(void *)v294 = v344.__r_.__value_.__l.__size_;
  uint64_t v25 = (uint64_t *)v344.__r_.__value_.__r.__words[0];
  if (v344.__r_.__value_.__r.__words[0] != v344.__r_.__value_.__l.__size_)
  {
    uint64_t v26 = v308 + 208;
    v292 = (std::string *)*MEMORY[0x1E4FBA408];
    v290 = *(std::string **)(MEMORY[0x1E4FBA408] + 64);
    v289 = *(std::string **)(MEMORY[0x1E4FBA408] + 72);
    do
    {
      uint64_t v28 = *v25;
      uint64_t v27 = (std::__shared_weak_count *)v25[1];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v303 = v27;
      if (*(char *)(v28 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v312, *(const std::string::value_type **)(v28 + 8), *(void *)(v28 + 16));
      }
      else
      {
        long long v29 = *(_OWORD *)(v28 + 8);
        v312.__r_.__value_.__r.__words[2] = *(void *)(v28 + 24);
        *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v29;
      }
      uint64_t v30 = std::__tree<std::string>::find<std::string>(v26, (const void **)&v312.__r_.__value_.__l.__data_);
      if (v308 + 216 == v30)
      {
        int v34 = 0;
        uint64_t v32 = 0;
        v300 = 0;
        goto LABEL_92;
      }
      uint64_t v32 = *(void *)(v30 + 56);
      v31 = *(std::__shared_weak_count **)(v30 + 64);
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v300 = v31;
      if (!v32)
      {
        int v34 = 0;
        goto LABEL_92;
      }
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr, uint64_t))(*(void *)v28 + 96))(&v329, v28);
      if (SHIBYTE(v329.__end_) >= 0) {
        std::__split_buffer<std::string>::pointer v33 = (std::__split_buffer<std::string>::pointer)HIBYTE(v329.__end_);
      }
      else {
        std::__split_buffer<std::string>::pointer v33 = v329.__begin_;
      }
      if (SHIBYTE(v329.__end_) < 0)
      {
        operator delete(v329.__first_);
        if (v33)
        {
LABEL_72:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v329);
          uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v329.__end_, (uint64_t)"Pattern uses deprecated group '", 31);
          if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v36 = &v312;
          }
          else {
            uint64_t v36 = (std::string *)v312.__r_.__value_.__r.__words[0];
          }
          if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v312.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v312.__r_.__value_.__l.__size_;
          }
          uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, size);
          char v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"' (", 3);
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v28 + 96))(&v343, v28);
          if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v40 = &v343;
          }
          else {
            unint64_t v40 = (std::string *)v343.__r_.__value_.__r.__words[0];
          }
          if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v41 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v41 = v343.__r_.__value_.__l.__size_;
          }
          unint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)")", 1);
          if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v343.__r_.__value_.__l.__data_);
          }
          std::stringbuf::str();
          siri::dialogengine::Context::AddValidationWarning((uint64_t)v309, (long long *)&v343, v32);
          if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v343.__r_.__value_.__l.__data_);
          }
          v329.__first_ = v292;
          *(std::__split_buffer<std::string>::pointer *)((char *)&v329.__first_ + v292[-1].__r_.__value_.__r.__words[0]) = v290;
          v329.__end_ = v289;
          v329.__end_cap_.__value_ = (std::string *)(MEMORY[0x1E4FBA470] + 16);
          if (v334 < 0) {
            operator delete(v333);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1C8796CC0](v335);
          char v307 = 0;
        }
      }
      else if (v33)
      {
        goto LABEL_72;
      }
      int v34 = 1;
LABEL_92:
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr, uint64_t))(*(void *)v28 + 40))(&v329, v28);
      int v43 = siri::dialogengine::ResolveUsage((uint64_t)v309, v308, (int ***)&v329);
      v343.__r_.__value_.__r.__words[0] = (std::string::size_type)&v329;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v343);
      if (v43 == 4)
      {
        if (v34)
        {
          std::operator+<char>();
          siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v329, v32);
LABEL_98:
          if (SHIBYTE(v329.__end_) < 0)
          {
            std::__split_buffer<std::string>::pointer v44 = v329.__first_;
            goto LABEL_197;
          }
          goto LABEL_198;
        }
      }
      else if (v43 == 1 && (v34 & 1) == 0)
      {
        std::operator+<char>();
        siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v329, (uint64_t)v321);
        goto LABEL_98;
      }
      int v295 = v34;
      uint64_t v297 = v32;
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr, uint64_t))(*(void *)v28 + 56))(&v329, v28);
      std::__split_buffer<std::string>::pointer v46 = v329.__begin_;
      std::__split_buffer<std::string>::pointer v45 = v329.__first_;
      if (v329.__first_ == v329.__begin_)
      {
        v343.__r_.__value_.__r.__words[0] = (std::string::size_type)&v329;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v343);
        goto LABEL_149;
      }
      char v47 = 0;
      int v48 = 0;
      do
      {
        std::string::size_type v49 = v45->__r_.__value_.__r.__words[0];
        int v50 = (std::__shared_weak_count *)v45->__r_.__value_.__l.__size_;
        if (v50) {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        memset(&v343, 0, sizeof(v343));
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(&v343, *(void **)(v49 + 24), *(void **)(v49 + 32), (uint64_t)(*(void *)(v49 + 32) - *(void *)(v49 + 24)) >> 4);
        int v51 = siri::dialogengine::ResolveUsage((uint64_t)v309, v308, (int ***)&v343);
        v342.__r_.__value_.__r.__words[0] = (std::string::size_type)&v343;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v342);
        if (v51 == 4) {
          int v52 = 1;
        }
        else {
          int v52 = v48;
        }
        if (v51 == 1) {
          char v47 = 1;
        }
        else {
          int v48 = v52;
        }
        if (v50) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
        }
        std::__split_buffer<std::string>::pointer v45 = (std::__split_buffer<std::string>::pointer)((char *)v45 + 16);
      }
      while (v45 != v46);
      v343.__r_.__value_.__r.__words[0] = (std::string::size_type)&v329;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v343);
      if ((v47 & 1) == 0)
      {
        uint64_t v26 = v308 + 208;
        int v53 = v295;
        goto LABEL_133;
      }
      uint64_t v26 = v308 + 208;
      int v53 = v295;
      if (!v295) {
        goto LABEL_128;
      }
      if (*(char *)(v297 + 111) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v329, *(const std::string::value_type **)(v297 + 88), *(void *)(v297 + 96));
      }
      else
      {
        *(_OWORD *)&v329.__first_ = *(_OWORD *)(v297 + 88);
        v329.__end_ = *(std::__split_buffer<std::string>::pointer *)(v297 + 104);
      }
      if (SHIBYTE(v329.__end_) >= 0) {
        std::__split_buffer<std::string>::pointer v54 = (std::__split_buffer<std::string>::pointer)HIBYTE(v329.__end_);
      }
      else {
        std::__split_buffer<std::string>::pointer v54 = v329.__begin_;
      }
      if (SHIBYTE(v329.__end_) < 0)
      {
        operator delete(v329.__first_);
        if (!v54)
        {
LABEL_128:
          std::operator+<char>();
          BOOL v55 = std::string::append(&v343, "' requires a dialog component but one is not defined.");
          long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v329.__end_ = (std::__split_buffer<std::string>::pointer)v55->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v329.__first_ = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v329, v297);
          if (SHIBYTE(v329.__end_) < 0) {
            operator delete(v329.__first_);
          }
          if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v343.__r_.__value_.__l.__data_);
          }
          char v307 = 0;
LABEL_133:
          if ((v53 & v48 & 1) == 0) {
            goto LABEL_149;
          }
          goto LABEL_134;
        }
      }
      else if (!v54)
      {
        goto LABEL_128;
      }
      if ((v48 & 1) == 0) {
        goto LABEL_149;
      }
LABEL_134:
      if (*(char *)(v297 + 111) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v329, *(const std::string::value_type **)(v297 + 88), *(void *)(v297 + 96));
      }
      else
      {
        *(_OWORD *)&v329.__first_ = *(_OWORD *)(v297 + 88);
        v329.__end_ = *(std::__split_buffer<std::string>::pointer *)(v297 + 104);
      }
      if (SHIBYTE(v329.__end_) >= 0) {
        std::__split_buffer<std::string>::pointer v57 = (std::__split_buffer<std::string>::pointer)HIBYTE(v329.__end_);
      }
      else {
        std::__split_buffer<std::string>::pointer v57 = v329.__begin_;
      }
      if (SHIBYTE(v329.__end_) < 0)
      {
        operator delete(v329.__first_);
        if (!v57) {
          goto LABEL_149;
        }
      }
      else if (!v57)
      {
        goto LABEL_149;
      }
      std::operator+<char>();
      int v58 = std::string::append(&v343, "' disallows a dialog component but one is defined.");
      long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v329.__end_ = (std::__split_buffer<std::string>::pointer)v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v329.__first_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v329, v297);
      if (SHIBYTE(v329.__end_) < 0) {
        operator delete(v329.__first_);
      }
      if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v343.__r_.__value_.__l.__data_);
      }
      char v307 = 0;
LABEL_149:
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr, uint64_t))(*(void *)v28 + 72))(&v329, v28);
      std::__split_buffer<std::string>::pointer v61 = v329.__begin_;
      std::__split_buffer<std::string>::pointer v60 = v329.__first_;
      if (v329.__first_ == v329.__begin_)
      {
        v343.__r_.__value_.__r.__words[0] = (std::string::size_type)&v329;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v343);
        goto LABEL_199;
      }
      char v62 = 0;
      int v63 = 0;
      do
      {
        std::string::size_type v64 = v60->__r_.__value_.__r.__words[0];
        uint64_t v65 = (std::__shared_weak_count *)v60->__r_.__value_.__l.__size_;
        if (v65) {
          atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        memset(&v343, 0, sizeof(v343));
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(&v343, *(void **)(v64 + 24), *(void **)(v64 + 32), (uint64_t)(*(void *)(v64 + 32) - *(void *)(v64 + 24)) >> 4);
        int v66 = siri::dialogengine::ResolveUsage((uint64_t)v309, v308, (int ***)&v343);
        v342.__r_.__value_.__r.__words[0] = (std::string::size_type)&v343;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v342);
        if (v66 == 4) {
          int v67 = 1;
        }
        else {
          int v67 = v63;
        }
        if (v66 == 1) {
          char v62 = 1;
        }
        else {
          int v63 = v67;
        }
        if (v65) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v65);
        }
        std::__split_buffer<std::string>::pointer v60 = (std::__split_buffer<std::string>::pointer)((char *)v60 + 16);
      }
      while (v60 != v61);
      v343.__r_.__value_.__r.__words[0] = (std::string::size_type)&v329;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v343);
      if ((v62 & 1) == 0)
      {
        uint64_t v68 = v297;
        int v69 = v295;
        goto LABEL_182;
      }
      uint64_t v68 = v297;
      int v69 = v295;
      if (!v295) {
        goto LABEL_177;
      }
      if (*(char *)(v297 + 135) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v329, *(const std::string::value_type **)(v297 + 112), *(void *)(v297 + 120));
      }
      else
      {
        *(_OWORD *)&v329.__first_ = *(_OWORD *)(v297 + 112);
        v329.__end_ = *(std::__split_buffer<std::string>::pointer *)(v297 + 128);
      }
      if (SHIBYTE(v329.__end_) >= 0) {
        std::__split_buffer<std::string>::pointer v70 = (std::__split_buffer<std::string>::pointer)HIBYTE(v329.__end_);
      }
      else {
        std::__split_buffer<std::string>::pointer v70 = v329.__begin_;
      }
      if (SHIBYTE(v329.__end_) < 0)
      {
        operator delete(v329.__first_);
        if (!v70)
        {
LABEL_177:
          std::operator+<char>();
          uint64_t v71 = std::string::append(&v343, "' requires a visual component but one is not defined.");
          long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
          v329.__end_ = (std::__split_buffer<std::string>::pointer)v71->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v329.__first_ = v72;
          v71->__r_.__value_.__l.__size_ = 0;
          v71->__r_.__value_.__r.__words[2] = 0;
          v71->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v329, v297);
          if (SHIBYTE(v329.__end_) < 0) {
            operator delete(v329.__first_);
          }
          if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v343.__r_.__value_.__l.__data_);
          }
          char v307 = 0;
LABEL_182:
          if ((v69 & v63 & 1) == 0) {
            goto LABEL_199;
          }
          goto LABEL_183;
        }
      }
      else if (!v70)
      {
        goto LABEL_177;
      }
      if ((v63 & 1) == 0) {
        goto LABEL_199;
      }
LABEL_183:
      if (*(char *)(v68 + 135) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v329, *(const std::string::value_type **)(v68 + 112), *(void *)(v68 + 120));
      }
      else
      {
        *(_OWORD *)&v329.__first_ = *(_OWORD *)(v68 + 112);
        v329.__end_ = *(std::__split_buffer<std::string>::pointer *)(v68 + 128);
      }
      if (SHIBYTE(v329.__end_) >= 0) {
        std::__split_buffer<std::string>::pointer v73 = (std::__split_buffer<std::string>::pointer)HIBYTE(v329.__end_);
      }
      else {
        std::__split_buffer<std::string>::pointer v73 = v329.__begin_;
      }
      if ((SHIBYTE(v329.__end_) & 0x80000000) == 0)
      {
        if (!v73) {
          goto LABEL_199;
        }
LABEL_193:
        std::operator+<char>();
        v74 = std::string::append(&v343, "' disallows a visual component but one is defined.");
        long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
        v329.__end_ = (std::__split_buffer<std::string>::pointer)v74->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v329.__first_ = v75;
        v74->__r_.__value_.__l.__size_ = 0;
        v74->__r_.__value_.__r.__words[2] = 0;
        v74->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v329, v68);
        if (SHIBYTE(v329.__end_) < 0) {
          operator delete(v329.__first_);
        }
        if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
        {
          std::__split_buffer<std::string>::pointer v44 = (std::__split_buffer<std::string>::pointer)v343.__r_.__value_.__r.__words[0];
LABEL_197:
          operator delete(v44);
        }
LABEL_198:
        char v307 = 0;
        goto LABEL_199;
      }
      operator delete(v329.__first_);
      if (v73) {
        goto LABEL_193;
      }
LABEL_199:
      if (v300) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v300);
      }
      if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v312.__r_.__value_.__l.__data_);
      }
      if (v303) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v303);
      }
      v25 += 2;
    }
    while (v25 != *(uint64_t **)v294);
  }
  v329.__first_ = &v344;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v329);
  std::map<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>::map[abi:ne180100]((uint64_t)&v315, (const void ***)(v308 + 208));
  v76 = v315;
  if (v315 != (long long *)v316)
  {
    v304 = (siri::dialogengine::RequestInfo *)((char *)v309 + 8);
    while (1)
    {
      std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100](&v312, v76 + 2);
      uint64_t v77 = v313;
      siri::dialogengine::PatternSchema::GetGroup((uint64_t)v317, (uint64_t)&v312, &v310);
      if (!v310)
      {
        std::operator+<char>();
        siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v329, v77);
        if (SHIBYTE(v329.__end_) < 0)
        {
          std::__split_buffer<std::string>::pointer v78 = v329.__first_;
          goto LABEL_223;
        }
LABEL_224:
        char v307 = 0;
        goto LABEL_225;
      }
      if (*(char *)(v77 + 111) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v329, *(const std::string::value_type **)(v77 + 88), *(void *)(v77 + 96));
      }
      else
      {
        *(_OWORD *)&v329.__first_ = *(_OWORD *)(v77 + 88);
        v329.__end_ = *(std::__split_buffer<std::string>::pointer *)(v77 + 104);
      }
      std::__split_buffer<std::string>::pointer v79 = (std::__split_buffer<std::string>::pointer)HIBYTE(v329.__end_);
      if (SHIBYTE(v329.__end_) < 0) {
        std::__split_buffer<std::string>::pointer v79 = v329.__begin_;
      }
      uint64_t v293 = v77;
      if (v79)
      {
        BOOL v80 = 0;
        if ((HIBYTE(v329.__end_) & 0x80) == 0) {
          goto LABEL_218;
        }
        goto LABEL_247;
      }
      if (*(char *)(v77 + 135) < 0) {
        std::string::__init_copy_ctor_external(&v344, *(const std::string::value_type **)(v77 + 112), *(void *)(v77 + 120));
      }
      else {
        std::string v344 = *(std::string *)(v77 + 112);
      }
      std::string::size_type v85 = HIBYTE(v344.__r_.__value_.__r.__words[2]);
      if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v85 = v344.__r_.__value_.__l.__size_;
      }
      if (v85) {
        break;
      }
      if (*(char *)(v77 + 159) < 0) {
        std::string::__init_copy_ctor_external(&v343, *(const std::string::value_type **)(v77 + 136), *(void *)(v77 + 144));
      }
      else {
        std::string v343 = *(std::string *)(v77 + 136);
      }
      std::string::size_type v126 = v343.__r_.__value_.__l.__size_;
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v126 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
      }
      BOOL v80 = v126 == 0;
      if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v343.__r_.__value_.__l.__data_);
      }
      if ((*((unsigned char *)&v344.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_245;
      }
LABEL_246:
      if ((HIBYTE(v329.__end_) & 0x80) == 0)
      {
LABEL_218:
        if (v80) {
          goto LABEL_219;
        }
        goto LABEL_248;
      }
LABEL_247:
      operator delete(v329.__first_);
      if (v80)
      {
LABEL_219:
        std::operator+<char>();
        v81 = std::string::append(&v344, "' has no dialog or visual IDs");
        long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
        v329.__end_ = (std::__split_buffer<std::string>::pointer)v81->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v329.__first_ = v82;
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v329, v77);
        if (SHIBYTE(v329.__end_) < 0) {
          operator delete(v329.__first_);
        }
        if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
        {
          std::__split_buffer<std::string>::pointer v78 = (std::__split_buffer<std::string>::pointer)v344.__r_.__value_.__r.__words[0];
LABEL_223:
          operator delete(v78);
        }
        goto LABEL_224;
      }
LABEL_248:
      uint64_t v86 = v313;
      uint64_t v87 = v313 + 88;
      if (*(char *)(v313 + 111) < 0)
      {
        std::string::__init_copy_ctor_external(&v324, *(const std::string::value_type **)(v313 + 88), *(void *)(v313 + 96));
      }
      else
      {
        *(_OWORD *)&v324.__r_.__value_.__l.__data_ = *(_OWORD *)v87;
        v324.__r_.__value_.__r.__words[2] = *(void *)(v313 + 104);
      }
      std::string::size_type v88 = HIBYTE(v324.__r_.__value_.__r.__words[2]);
      if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v88 = v324.__r_.__value_.__l.__size_;
      }
      if (!v88)
      {
        char v89 = 1;
        if ((*((unsigned char *)&v324.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_441;
        }
LABEL_440:
        operator delete(v324.__r_.__value_.__l.__data_);
        goto LABEL_441;
      }
      if (*(char *)(v86 + 111) < 0) {
        std::string::__init_copy_ctor_external(&v343, *(const std::string::value_type **)(v86 + 88), *(void *)(v86 + 96));
      }
      else {
        std::string v343 = *(std::string *)v87;
      }
      siri::dialogengine::CatIdToPath((uint64_t)&v343, &v344);
      siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v329, v304);
      memset(&v342, 0, sizeof(v342));
      std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v342, (uint64_t)v329.__begin_, (uint64_t)v329.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v329.__end_ - (char *)v329.__begin_) >> 5));
      siri::dialogengine::FindFileInUpdatableDirs((uint64_t)&v344, (uint64_t *)&v342, (uint64_t)v322);
      v341.__r_.__value_.__r.__words[0] = (std::string::size_type)&v342;
      std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v341);
      siri::dialogengine::RequestInfo::~RequestInfo((void **)&v329.__first_);
      if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v344.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v343.__r_.__value_.__l.__data_);
      }
      unint64_t v90 = v323;
      if ((v323 & 0x80u) != 0) {
        unint64_t v90 = (unint64_t)v322[1];
      }
      if (v90)
      {
        if (*(char *)(v86 + 111) < 0) {
          std::string::__init_copy_ctor_external(&v343, *(const std::string::value_type **)(v86 + 88), *(void *)(v86 + 96));
        }
        else {
          std::string v343 = *(std::string *)v87;
        }
        siri::dialogengine::CatIdToPath((uint64_t)&v343, &v344);
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v329, v304);
        memset(&v342, 0, sizeof(v342));
        std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v342, (uint64_t)v329.__begin_, (uint64_t)v329.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v329.__end_ - (char *)v329.__begin_) >> 5));
        siri::dialogengine::FindFileInUpdatableDirs((uint64_t)&v344, (uint64_t *)&v342, (uint64_t)&__str);
        v341.__r_.__value_.__r.__words[0] = (std::string::size_type)&v342;
        std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v341);
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&v329.__first_);
        if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v344.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v343.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v329, v304);
        memset(&v344, 0, sizeof(v344));
        std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v344, (uint64_t)v329.__begin_, (uint64_t)v329.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v329.__end_ - (char *)v329.__begin_) >> 5));
        if (*(char *)(v86 + 111) < 0) {
          std::string::__init_copy_ctor_external(&v343, *(const std::string::value_type **)(v86 + 88), *(void *)(v86 + 96));
        }
        else {
          std::string v343 = *(std::string *)v87;
        }
        siri::dialogengine::GetCatLocales((uint64_t *)&v344, (uint64_t)&v343, &v325);
        if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v343.__r_.__value_.__l.__data_);
        }
        v343.__r_.__value_.__r.__words[0] = (std::string::size_type)&v344;
        std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v343);
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&v329.__first_);
        uint64_t v91 = v325;
        uint64_t v301 = v326;
        if (v325 != v326)
        {
          char v89 = 1;
          while (1)
          {
            siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v329, v304);
            memset(&v343, 0, sizeof(v343));
            std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v343, (uint64_t)v329.__begin_, (uint64_t)v329.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v329.__end_ - (char *)v329.__begin_) >> 5));
            siri::dialogengine::RequestInfo::~RequestInfo((void **)&v329.__first_);
            if (*(char *)(v86 + 111) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v329, *(const std::string::value_type **)(v86 + 88), *(void *)(v86 + 96));
            }
            else
            {
              *(_OWORD *)&v329.__first_ = *(_OWORD *)v87;
              v329.__end_ = *(std::__split_buffer<std::string>::pointer *)(v87 + 16);
            }
            siri::dialogengine::FindParamsFile((long long **)&v343, (uint64_t)&v329, (uint64_t)&v342);
            if (SHIBYTE(v329.__end_) < 0) {
              operator delete(v329.__first_);
            }
            if (*(char *)(v91 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v344, *(const std::string::value_type **)v91, *(void *)(v91 + 8));
            }
            else
            {
              long long v92 = *(_OWORD *)v91;
              v344.__r_.__value_.__r.__words[2] = *(void *)(v91 + 16);
              *(_OWORD *)&v344.__r_.__value_.__l.__data_ = v92;
            }
            memset(&v329, 0, 24);
            v340.__r_.__value_.__r.__words[0] = (std::string::size_type)&v329;
            v340.__r_.__value_.__s.__data_[8] = 0;
            v329.__first_ = (std::__split_buffer<std::string>::pointer)operator new(0x18uLL);
            v329.__begin_ = v329.__first_;
            v329.__end_ = v329.__first_ + 1;
            v329.__begin_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v329.__end_, (long long *)&v344, &v345, v329.__first_);
            if (*(char *)(v86 + 111) < 0) {
              std::string::__init_copy_ctor_external(&v340, *(const std::string::value_type **)(v86 + 88), *(void *)(v86 + 96));
            }
            else {
              std::string v340 = *(std::string *)v87;
            }
            siri::dialogengine::FindLocaleFile((long long **)&v343, (long long **)&v329, (uint64_t)&v340, (uint64_t)&v341);
            if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v340.__r_.__value_.__l.__data_);
            }
            v340.__r_.__value_.__r.__words[0] = (std::string::size_type)&v329;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v340);
            if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v344.__r_.__value_.__l.__data_);
            }
            std::string::size_type v93 = HIBYTE(v341.__r_.__value_.__r.__words[2]);
            if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v93 = v341.__r_.__value_.__l.__size_;
            }
            if (!v93)
            {
              std::operator+<char>();
              char v94 = std::string::append(&v339, "' locale file in CAT '");
              long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
              v340.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v340.__r_.__value_.__l.__data_ = v95;
              v94->__r_.__value_.__l.__size_ = 0;
              v94->__r_.__value_.__r.__words[2] = 0;
              v94->__r_.__value_.__r.__words[0] = 0;
              if (*(char *)(v86 + 111) < 0) {
                std::string::__init_copy_ctor_external(&v338, *(const std::string::value_type **)(v86 + 88), *(void *)(v86 + 96));
              }
              else {
                std::string v338 = *(std::string *)v87;
              }
              if ((v338.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v113 = &v338;
              }
              else {
                v113 = (std::string *)v338.__r_.__value_.__r.__words[0];
              }
              if ((v338.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v114 = HIBYTE(v338.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v114 = v338.__r_.__value_.__l.__size_;
              }
              v115 = std::string::append(&v340, (const std::string::value_type *)v113, v114);
              long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
              v344.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v344.__r_.__value_.__l.__data_ = v116;
              v115->__r_.__value_.__l.__size_ = 0;
              v115->__r_.__value_.__r.__words[2] = 0;
              v115->__r_.__value_.__r.__words[0] = 0;
              v117 = std::string::append(&v344, "'");
              long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
              v329.__end_ = (std::__split_buffer<std::string>::pointer)v117->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v329.__first_ = v118;
              v117->__r_.__value_.__l.__size_ = 0;
              v117->__r_.__value_.__r.__words[2] = 0;
              v117->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v329, v86);
              if (SHIBYTE(v329.__end_) < 0) {
                operator delete(v329.__first_);
              }
              if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v344.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v338.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v340.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v339.__r_.__value_.__l.__data_);
              }
              LOBYTE(v108) = 0;
              goto LABEL_386;
            }
            siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v329);
            siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v344);
            std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)&v344.__r_.__value_.__l.__size_, (std::string *)v343.__r_.__value_.__l.__data_, (std::string *)v343.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v343.__r_.__value_.__l.__size_ - v343.__r_.__value_.__r.__words[0]) >> 5));
            std::string::operator=(v349, &v342);
            std::string::operator=(v350, &v341);
            LODWORD(v344.__r_.__value_.__l.__data_) = 0;
            siri::dialogengine::Context::SetRequestInfo((uint64_t)&v329, (uint64_t)&v344);
            siri::dialogengine::RequestInfo::~RequestInfo((void **)&v344.__r_.__value_.__l.__data_);
            if (*(char *)(v86 + 111) < 0) {
              std::string::__init_copy_ctor_external(&v338, *(const std::string::value_type **)(v86 + 88), *(void *)(v86 + 96));
            }
            else {
              std::string v338 = *(std::string *)v87;
            }
            char v96 = std::string::append(&v338, " (");
            long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
            v339.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v339.__r_.__value_.__l.__data_ = v97;
            v96->__r_.__value_.__l.__size_ = 0;
            v96->__r_.__value_.__r.__words[2] = 0;
            v96->__r_.__value_.__r.__words[0] = 0;
            int v98 = *(char *)(v91 + 23);
            if (v98 >= 0) {
              std::string v99 = (const std::string::value_type *)v91;
            }
            else {
              std::string v99 = *(const std::string::value_type **)v91;
            }
            if (v98 >= 0) {
              std::string::size_type v100 = *(unsigned __int8 *)(v91 + 23);
            }
            else {
              std::string::size_type v100 = *(void *)(v91 + 8);
            }
            v101 = std::string::append(&v339, v99, v100);
            long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
            v340.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v340.__r_.__value_.__l.__data_ = v102;
            v101->__r_.__value_.__l.__size_ = 0;
            v101->__r_.__value_.__r.__words[2] = 0;
            v101->__r_.__value_.__r.__words[0] = 0;
            int v103 = std::string::append(&v340, ")");
            long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
            v344.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v344.__r_.__value_.__l.__data_ = v104;
            v103->__r_.__value_.__l.__size_ = 0;
            v103->__r_.__value_.__r.__words[2] = 0;
            v103->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v340.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v339.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v338.__r_.__value_.__l.__data_);
            }
            char v105 = siri::dialogengine::Context::Load((siri::dialogengine::Context *)&v329);
            uint64_t v106 = v336;
            __int16 v107 = v337;
            if ((v105 & 1) == 0)
            {
              if (v337) {
                atomic_fetch_add_explicit(&v337->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v110 = *((void *)v309 + 63);
              long long v109 = (std::__shared_weak_count *)*((void *)v309 + 64);
              if (v109) {
                atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              siri::dialogengine::DirName(&v341, (uint64_t)&v340);
              siri::dialogengine::CopyValidationEntries(v106, v110, &v340);
              if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v340.__r_.__value_.__l.__data_);
                if (v109) {
LABEL_331:
                }
                  std::__shared_weak_count::__release_shared[abi:ne180100](v109);
              }
              else if (v109)
              {
                goto LABEL_331;
              }
              if (v107) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v107);
              }
              std::operator+<char>();
              v111 = std::string::append(&v338, " for group: ");
              long long v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
              v339.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v339.__r_.__value_.__l.__data_ = v112;
              v111->__r_.__value_.__l.__size_ = 0;
              v111->__r_.__value_.__r.__words[2] = 0;
              v111->__r_.__value_.__r.__words[0] = 0;
              if (*(char *)(v86 + 87) < 0) {
                std::string::__init_copy_ctor_external(&v328, *(const std::string::value_type **)(v86 + 64), *(void *)(v86 + 72));
              }
              else {
                std::string v328 = *(std::string *)(v86 + 64);
              }
              if ((v328.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v119 = &v328;
              }
              else {
                v119 = (std::string *)v328.__r_.__value_.__r.__words[0];
              }
              if ((v328.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v120 = HIBYTE(v328.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v120 = v328.__r_.__value_.__l.__size_;
              }
              v121 = std::string::append(&v339, (const std::string::value_type *)v119, v120);
              long long v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
              v340.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v340.__r_.__value_.__l.__data_ = v122;
              v121->__r_.__value_.__l.__size_ = 0;
              v121->__r_.__value_.__r.__words[2] = 0;
              v121->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v340, v86);
              if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v340.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v328.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v339.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v338.__r_.__value_.__l.__data_);
              }
              LOBYTE(v108) = 0;
              goto LABEL_383;
            }
            if (v337) {
              atomic_fetch_add_explicit(&v337->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v106
              && ((*(uint64_t (**)(uint64_t, std::__split_buffer<std::string> *))(*(void *)v106 + 16))(v106, &v329) & 1) == 0)
            {
              break;
            }
            LOBYTE(v108) = 1;
LABEL_381:
            if (v107) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v107);
            }
LABEL_383:
            if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v344.__r_.__value_.__l.__data_);
            }
            siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v329);
LABEL_386:
            if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v341.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v342.__r_.__value_.__l.__data_);
            }
            v329.__first_ = &v343;
            std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v329);
            v89 &= v108;
            v91 += 24;
            if (v91 == v301) {
              goto LABEL_435;
            }
          }
          uint64_t v123 = v336;
          v108 = v337;
          if (v337) {
            atomic_fetch_add_explicit(&v337->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v125 = *((void *)v309 + 63);
          v124 = (std::__shared_weak_count *)*((void *)v309 + 64);
          if (v124) {
            atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::DirName(&v341, (uint64_t)&v340);
          siri::dialogengine::CopyValidationEntries(v123, v125, &v340);
          if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v340.__r_.__value_.__l.__data_);
            if (v124) {
LABEL_378:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v124);
          }
          else if (v124)
          {
            goto LABEL_378;
          }
          if (v108)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v108);
            LOBYTE(v108) = 0;
          }
          goto LABEL_381;
        }
        if (*(char *)(v86 + 87) < 0) {
          std::string::__init_copy_ctor_external(&v342, *(const std::string::value_type **)(v86 + 64), *(void *)(v86 + 72));
        }
        else {
          std::string v342 = *(std::string *)(v86 + 64);
        }
        v135 = std::string::insert(&v342, 0, "Cannot find any locale files in CAT directory for group '");
        long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
        v343.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v343.__r_.__value_.__l.__data_ = v136;
        v135->__r_.__value_.__l.__size_ = 0;
        v135->__r_.__value_.__r.__words[2] = 0;
        v135->__r_.__value_.__r.__words[0] = 0;
        v137 = std::string::append(&v343, "': ");
        long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
        v344.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v344.__r_.__value_.__l.__data_ = v138;
        v137->__r_.__value_.__l.__size_ = 0;
        v137->__r_.__value_.__r.__words[2] = 0;
        v137->__r_.__value_.__r.__words[0] = 0;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v140 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v140 = __str.__r_.__value_.__l.__size_;
        }
        v141 = std::string::append(&v344, (const std::string::value_type *)p_str, v140);
        long long v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
        v329.__end_ = (std::__split_buffer<std::string>::pointer)v141->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v329.__first_ = v142;
        v141->__r_.__value_.__l.__size_ = 0;
        v141->__r_.__value_.__r.__words[2] = 0;
        v141->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v329, v86);
        if (SHIBYTE(v329.__end_) < 0) {
          operator delete(v329.__first_);
        }
        if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v344.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v343.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v342.__r_.__value_.__l.__data_);
        }
        char v89 = 0;
LABEL_435:
        v329.__first_ = (std::__split_buffer<std::string>::pointer)&v325;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v329);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        if (*(char *)(v86 + 87) < 0) {
          std::string::__init_copy_ctor_external(&v342, *(const std::string::value_type **)(v86 + 64), *(void *)(v86 + 72));
        }
        else {
          std::string v342 = *(std::string *)(v86 + 64);
        }
        v127 = std::string::insert(&v342, 0, "CAT file for group '");
        long long v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
        v343.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v343.__r_.__value_.__l.__data_ = v128;
        v127->__r_.__value_.__l.__size_ = 0;
        v127->__r_.__value_.__r.__words[2] = 0;
        v127->__r_.__value_.__r.__words[0] = 0;
        v129 = std::string::append(&v343, "' does not exist: ");
        long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
        v344.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v344.__r_.__value_.__l.__data_ = v130;
        v129->__r_.__value_.__l.__size_ = 0;
        v129->__r_.__value_.__r.__words[2] = 0;
        v129->__r_.__value_.__r.__words[0] = 0;
        if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v131 = &v324;
        }
        else {
          v131 = (std::string *)v324.__r_.__value_.__r.__words[0];
        }
        if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v132 = HIBYTE(v324.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v132 = v324.__r_.__value_.__l.__size_;
        }
        v133 = std::string::append(&v344, (const std::string::value_type *)v131, v132);
        long long v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
        v329.__end_ = (std::__split_buffer<std::string>::pointer)v133->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v329.__first_ = v134;
        v133->__r_.__value_.__l.__size_ = 0;
        v133->__r_.__value_.__r.__words[2] = 0;
        v133->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v329, v86);
        if (SHIBYTE(v329.__end_) < 0) {
          operator delete(v329.__first_);
        }
        if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v344.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v343.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v342.__r_.__value_.__l.__data_);
        }
        char v89 = 0;
      }
      if ((char)v323 < 0) {
        operator delete(v322[0]);
      }
      if ((*((unsigned char *)&v324.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_440;
      }
LABEL_441:
      uint64_t v143 = v313;
      v144 = (_OWORD *)(v313 + 112);
      if (*(char *)(v313 + 135) < 0)
      {
        std::string::__init_copy_ctor_external(&v338, *(const std::string::value_type **)(v313 + 112), *(void *)(v313 + 120));
      }
      else
      {
        *(_OWORD *)&v338.__r_.__value_.__l.__data_ = *v144;
        v338.__r_.__value_.__r.__words[2] = *(void *)(v313 + 128);
      }
      std::string::size_type v145 = HIBYTE(v338.__r_.__value_.__r.__words[2]);
      if ((v338.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v145 = v338.__r_.__value_.__l.__size_;
      }
      if (!v145)
      {
        LOBYTE(v147) = 1;
        if ((*((unsigned char *)&v338.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_522;
        }
LABEL_521:
        operator delete(v338.__r_.__value_.__l.__data_);
        goto LABEL_522;
      }
      siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v329, v304);
      memset(&v328, 0, sizeof(v328));
      std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v328, (uint64_t)v329.__begin_, (uint64_t)v329.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v329.__end_ - (char *)v329.__begin_) >> 5));
      siri::dialogengine::RequestInfo::~RequestInfo((void **)&v329.__first_);
      siri::dialogengine::FindVisualFile((long long **)&v328, (uint64_t)&v338, (uint64_t)&__str);
      std::string::size_type v146 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v146 = __str.__r_.__value_.__l.__size_;
      }
      if (v146)
      {
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v329, v304);
        memset(&v343, 0, sizeof(v343));
        std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v343, (uint64_t)v329.__begin_, (uint64_t)v329.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v329.__end_ - (char *)v329.__begin_) >> 5));
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&v329.__first_);
        siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v329);
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v344);
        std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)&v344.__r_.__value_.__l.__size_, (std::string *)v343.__r_.__value_.__l.__data_, (std::string *)v343.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v343.__r_.__value_.__l.__size_ - v343.__r_.__value_.__r.__words[0]) >> 5));
        std::string::operator=(v351, &__str);
        LODWORD(v344.__r_.__value_.__l.__data_) = 1;
        siri::dialogengine::Context::SetRequestInfo((uint64_t)&v329, (uint64_t)&v344);
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&v344.__r_.__value_.__l.__data_);
        if (*(char *)(v143 + 135) < 0) {
          std::string::__init_copy_ctor_external(&v344, *(const std::string::value_type **)(v143 + 112), *(void *)(v143 + 120));
        }
        else {
          std::string v344 = *(std::string *)v144;
        }
        char v148 = siri::dialogengine::Context::Load((siri::dialogengine::Context *)&v329);
        uint64_t v149 = v336;
        v150 = v337;
        if (v148)
        {
          if (v337) {
            atomic_fetch_add_explicit(&v337->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v149
            && ((*(uint64_t (**)(uint64_t, std::__split_buffer<std::string> *))(*(void *)v149 + 16))(v149, &v329) & 1) == 0)
          {
            uint64_t v167 = v336;
            v147 = v337;
            if (v337) {
              atomic_fetch_add_explicit(&v337->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v168 = *((void *)v309 + 63);
            v169 = (std::__shared_weak_count *)*((void *)v309 + 64);
            if (v169) {
              atomic_fetch_add_explicit(&v169->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            siri::dialogengine::CopyValidationEntries(v167, v168, &__str);
            if (v169) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v169);
            }
            if (v147)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v147);
              LOBYTE(v147) = 0;
            }
          }
          else
          {
            LOBYTE(v147) = 1;
          }
          if (v150) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v150);
          }
        }
        else
        {
          if (v337) {
            atomic_fetch_add_explicit(&v337->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v151 = *((void *)v309 + 63);
          v152 = (std::__shared_weak_count *)*((void *)v309 + 64);
          if (v152) {
            atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::CopyValidationEntries(v149, v151, &__str);
          if (v152) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v152);
          }
          if (v150) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v150);
          }
          std::operator+<char>();
          v153 = std::string::append(&v340, " for group: ");
          long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
          v341.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v341.__r_.__value_.__l.__data_ = v154;
          v153->__r_.__value_.__l.__size_ = 0;
          v153->__r_.__value_.__r.__words[2] = 0;
          v153->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(v143 + 87) < 0) {
            std::string::__init_copy_ctor_external(&v339, *(const std::string::value_type **)(v143 + 64), *(void *)(v143 + 72));
          }
          else {
            std::string v339 = *(std::string *)(v143 + 64);
          }
          if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v163 = &v339;
          }
          else {
            v163 = (std::string *)v339.__r_.__value_.__r.__words[0];
          }
          if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v164 = HIBYTE(v339.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v164 = v339.__r_.__value_.__l.__size_;
          }
          v165 = std::string::append(&v341, (const std::string::value_type *)v163, v164);
          long long v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
          v342.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v342.__r_.__value_.__l.__data_ = v166;
          v165->__r_.__value_.__l.__size_ = 0;
          v165->__r_.__value_.__r.__words[2] = 0;
          v165->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v342, v143);
          if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v342.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v339.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v341.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v340.__r_.__value_.__l.__data_);
          }
          LOBYTE(v147) = 0;
        }
        if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v344.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v329);
        v329.__first_ = &v343;
        std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v329);
      }
      else
      {
        if (*(char *)(v143 + 87) < 0) {
          std::string::__init_copy_ctor_external(&v342, *(const std::string::value_type **)(v143 + 64), *(void *)(v143 + 72));
        }
        else {
          std::string v342 = *(std::string *)(v143 + 64);
        }
        v155 = std::string::insert(&v342, 0, "Visual CAT file for group '");
        long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
        v343.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v343.__r_.__value_.__l.__data_ = v156;
        v155->__r_.__value_.__l.__size_ = 0;
        v155->__r_.__value_.__r.__words[2] = 0;
        v155->__r_.__value_.__r.__words[0] = 0;
        v157 = std::string::append(&v343, "' does not exist: ");
        long long v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
        v344.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v344.__r_.__value_.__l.__data_ = v158;
        v157->__r_.__value_.__l.__size_ = 0;
        v157->__r_.__value_.__r.__words[2] = 0;
        v157->__r_.__value_.__r.__words[0] = 0;
        if ((v338.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v159 = &v338;
        }
        else {
          v159 = (std::string *)v338.__r_.__value_.__r.__words[0];
        }
        if ((v338.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v160 = HIBYTE(v338.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v160 = v338.__r_.__value_.__l.__size_;
        }
        v161 = std::string::append(&v344, (const std::string::value_type *)v159, v160);
        long long v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
        v329.__end_ = (std::__split_buffer<std::string>::pointer)v161->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v329.__first_ = v162;
        v161->__r_.__value_.__l.__size_ = 0;
        v161->__r_.__value_.__r.__words[2] = 0;
        v161->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v329, v143);
        if (SHIBYTE(v329.__end_) < 0) {
          operator delete(v329.__first_);
        }
        if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v344.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v343.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v342.__r_.__value_.__l.__data_);
        }
        LOBYTE(v147) = 0;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      v329.__first_ = &v328;
      std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v329);
      if ((*((unsigned char *)&v338.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_521;
      }
LABEL_522:
      v170 = (_OWORD *)(v293 + 136);
      if (*(char *)(v293 + 159) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v329, *(const std::string::value_type **)(v293 + 136), *(void *)(v293 + 144));
      }
      else
      {
        *(_OWORD *)&v329.__first_ = *v170;
        v329.__end_ = *(std::__split_buffer<std::string>::pointer *)(v293 + 152);
      }
      v307 &= v89 & v147;
      if (SHIBYTE(v329.__end_) < 0)
      {
        std::__split_buffer<std::string>::pointer v171 = v329.__begin_;
        operator delete(v329.__first_);
        if (v171)
        {
LABEL_529:
          siri::dialogengine::DirName(v291, (uint64_t)&v342);
          siri::dialogengine::DirName(&v342, (uint64_t)&v343);
          siri::dialogengine::DirName(&v343, (uint64_t)&v344);
          siri::dialogengine::UpdatableDir::UpdatableDir((siri::dialogengine::UpdatableDir *)&v329, (long long *)&v344, 0);
          if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v344.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v343.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v342.__r_.__value_.__l.__data_);
          }
          siri::dialogengine::UpdatableDir::UpdatableDir(&v344, (const siri::dialogengine::UpdatableDir *)&v329);
          memset(&v343, 0, sizeof(v343));
          v342.__r_.__value_.__r.__words[0] = (std::string::size_type)&v343;
          v342.__r_.__value_.__s.__data_[8] = 0;
          v343.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
          v343.__r_.__value_.__l.__size_ = v343.__r_.__value_.__r.__words[0];
          v343.__r_.__value_.__r.__words[2] = v343.__r_.__value_.__r.__words[0] + 96;
          v343.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir*>((uint64_t)&v343.__r_.__value_.__r.__words[2], (uint64_t)&v344, (uint64_t)&v349[0].__r_.__value_.__r.__words[2], (uint64_t)v343.__r_.__value_.__l.__data_);
          if (*(char *)(v293 + 159) < 0)
          {
            std::string::__init_copy_ctor_external(&v342, *(const std::string::value_type **)(v293 + 136), *(void *)(v293 + 144));
          }
          else
          {
            *(_OWORD *)&v342.__r_.__value_.__l.__data_ = *v170;
            v342.__r_.__value_.__r.__words[2] = *(void *)(v293 + 152);
          }
          siri::dialogengine::FindPatternFile((long long **)&v343, (uint64_t)&v342, (uint64_t)&v328);
          if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v342.__r_.__value_.__l.__data_);
          }
          v342.__r_.__value_.__r.__words[0] = (std::string::size_type)&v343;
          std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v342);
          v342.__r_.__value_.__r.__words[0] = (std::string::size_type)&v348;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v342);
          v342.__r_.__value_.__r.__words[0] = (std::string::size_type)&v347;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v342);
          if (v346 < 0) {
            operator delete((void *)v345);
          }
          if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v344.__r_.__value_.__l.__data_);
          }
          siri::dialogengine::PatternFile::LoadFromPath((uint64_t)v309, &v328, 0, (uint64_t *)&__str);
          long long v172 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          if (__str.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v173 = v310;
          v174 = v311;
          if (v311) {
            atomic_fetch_add_explicit(&v311->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v175 = v313;
          v176 = v314;
          if (v314) {
            atomic_fetch_add_explicit(&v314->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v309 && v175 && (void)v172)
          {
            (*(void (**)(std::string *__return_ptr))(*(void *)v173 + 48))(&v344);
            if (*(char *)(v172 + 135) < 0) {
              std::string::__init_copy_ctor_external(&v343, *(const std::string::value_type **)(v172 + 112), *(void *)(v172 + 120));
            }
            else {
              std::string v343 = *(std::string *)(v172 + 112);
            }
            std::string::size_type v177 = v344.__r_.__value_.__l.__size_;
            if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)v344.__r_.__value_.__l.__data_, v344.__r_.__value_.__l.__size_, (unsigned __int8 **)&v343) == v177)
            {
              if (*(char *)(v175 + 87) < 0) {
                std::string::__init_copy_ctor_external(&v338, *(const std::string::value_type **)(v175 + 64), *(void *)(v175 + 72));
              }
              else {
                std::string v338 = *(std::string *)(v175 + 64);
              }
              v178 = std::string::insert(&v338, 0, "Group '");
              long long v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
              v339.__r_.__value_.__r.__words[2] = v178->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v339.__r_.__value_.__l.__data_ = v179;
              v178->__r_.__value_.__l.__size_ = 0;
              v178->__r_.__value_.__r.__words[2] = 0;
              v178->__r_.__value_.__r.__words[0] = 0;
              v180 = std::string::append(&v339, "' refers to a nested pattern of type '");
              long long v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
              v340.__r_.__value_.__r.__words[2] = v180->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v340.__r_.__value_.__l.__data_ = v181;
              v180->__r_.__value_.__l.__size_ = 0;
              v180->__r_.__value_.__r.__words[2] = 0;
              v180->__r_.__value_.__r.__words[0] = 0;
              if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v182 = &v343;
              }
              else {
                v182 = (std::string *)v343.__r_.__value_.__r.__words[0];
              }
              if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v183 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v183 = v343.__r_.__value_.__l.__size_;
              }
              v184 = std::string::append(&v340, (const std::string::value_type *)v182, v183);
              long long v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
              v341.__r_.__value_.__r.__words[2] = v184->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v341.__r_.__value_.__l.__data_ = v185;
              v184->__r_.__value_.__l.__size_ = 0;
              v184->__r_.__value_.__r.__words[2] = 0;
              v184->__r_.__value_.__r.__words[0] = 0;
              v186 = std::string::append(&v341, "' that is not supported.");
              long long v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
              v342.__r_.__value_.__r.__words[2] = v186->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v342.__r_.__value_.__l.__data_ = v187;
              v186->__r_.__value_.__l.__size_ = 0;
              v186->__r_.__value_.__r.__words[2] = 0;
              v186->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v342, v175);
              if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v342.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v341.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v340.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v339.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v338.__r_.__value_.__l.__data_);
              }
            }
            if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v343.__r_.__value_.__l.__data_);
            }
            v343.__r_.__value_.__r.__words[0] = (std::string::size_type)&v344;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v343);
          }
          if (v176) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v176);
          }
          if (v174) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v174);
          }
          if (*((void *)&v172 + 1))
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v172 + 1));
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v172 + 1));
          }
          if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v328.__r_.__value_.__l.__data_);
          }
          v344.__r_.__value_.__r.__words[0] = (std::string::size_type)&v332;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v344);
          v344.__r_.__value_.__r.__words[0] = (std::string::size_type)&v331;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v344);
          if (v330 < 0) {
            operator delete(v329.__end_cap_.__value_);
          }
          if (SHIBYTE(v329.__end_) < 0) {
            operator delete(v329.__first_);
          }
        }
      }
      else if (HIBYTE(v329.__end_))
      {
        goto LABEL_529;
      }
LABEL_225:
      if (v311) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v311);
      }
      if (v314) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v314);
      }
      if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v312.__r_.__value_.__l.__data_);
      }
      v83 = (long long *)*((void *)v76 + 1);
      if (v83)
      {
        do
        {
          char v84 = v83;
          v83 = *(long long **)v83;
        }
        while (v83);
      }
      else
      {
        do
        {
          char v84 = (long long *)*((void *)v76 + 2);
          BOOL v18 = *(void *)v84 == (void)v76;
          v76 = v84;
        }
        while (!v18);
      }
      v76 = v84;
      if (v84 == (long long *)v316) {
        goto LABEL_591;
      }
    }
    BOOL v80 = 0;
    if ((*((unsigned char *)&v344.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_246;
    }
LABEL_245:
    operator delete(v344.__r_.__value_.__l.__data_);
    goto LABEL_246;
  }
LABEL_591:
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v316[0]);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v344, (const void ***)(v308 + 160));
  std::string::size_type v188 = v344.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v344.__r_.__value_.__l.__data_ != &v344.__r_.__value_.__r.__words[1])
  {
    v305 = (std::string *)*MEMORY[0x1E4FBA408];
    v296 = *(std::string **)(MEMORY[0x1E4FBA408] + 72);
    v298 = *(std::string **)(MEMORY[0x1E4FBA408] + 64);
    do
    {
      if (*(char *)(v188 + 55) < 0)
      {
        if (!*(void *)(v188 + 40))
        {
LABEL_602:
          std::string::basic_string[abi:ne180100]<0>(&v329, "Setting defined in file without a name");
          siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v329, 0);
          if (SHIBYTE(v329.__end_) < 0) {
            operator delete(v329.__first_);
          }
          char v307 = 0;
          goto LABEL_613;
        }
      }
      else if (!*(unsigned char *)(v188 + 55))
      {
        goto LABEL_602;
      }
      uint64_t v189 = (uint64_t)v317;
      uint64_t v190 = std::__tree<std::string>::find<std::string>((uint64_t)(v317 + 15), (const void **)(v188 + 32));
      if (v189 + 128 == v190)
      {
        v192 = 0;
LABEL_606:
        std::operator+<char>();
        v194 = std::string::append(&v312, "'");
        long long v195 = *(_OWORD *)&v194->__r_.__value_.__l.__data_;
        v329.__end_ = (std::__split_buffer<std::string>::pointer)v194->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v329.__first_ = v195;
        v194->__r_.__value_.__l.__size_ = 0;
        v194->__r_.__value_.__r.__words[2] = 0;
        v194->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v329, 0);
        if (SHIBYTE(v329.__end_) < 0) {
          operator delete(v329.__first_);
        }
        if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v312.__r_.__value_.__l.__data_);
        }
        char v307 = 0;
        goto LABEL_611;
      }
      uint64_t v191 = *(void *)(v190 + 56);
      v192 = *(std::__shared_weak_count **)(v190 + 64);
      if (v192) {
        atomic_fetch_add_explicit(&v192->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v191) {
        goto LABEL_606;
      }
      v193 = (_OWORD *)(v191 + 128);
      if (*(char *)(v191 + 151) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v329, *(const std::string::value_type **)(v191 + 128), *(void *)(v191 + 136));
      }
      else
      {
        *(_OWORD *)&v329.__first_ = *v193;
        v329.__end_ = *(std::__split_buffer<std::string>::pointer *)(v191 + 144);
      }
      if (SHIBYTE(v329.__end_) < 0)
      {
        std::__split_buffer<std::string>::pointer v198 = v329.__begin_;
        operator delete(v329.__first_);
        if (!v198) {
          goto LABEL_658;
        }
      }
      else if (!HIBYTE(v329.__end_))
      {
        goto LABEL_658;
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v329);
      v199 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v329.__end_, (uint64_t)"Setting '", 9);
      int v200 = *(char *)(v188 + 55);
      if (v200 >= 0) {
        uint64_t v201 = v188 + 32;
      }
      else {
        uint64_t v201 = *(void *)(v188 + 32);
      }
      if (v200 >= 0) {
        uint64_t v202 = *(unsigned __int8 *)(v188 + 55);
      }
      else {
        uint64_t v202 = *(void *)(v188 + 40);
      }
      v203 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, v201, v202);
      v204 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v203, (uint64_t)"' in pattern '", 14);
      if (*(char *)(v308 + 87) < 0)
      {
        std::string::__init_copy_ctor_external(&v312, *(const std::string::value_type **)(v308 + 64), *(void *)(v308 + 72));
      }
      else
      {
        *(_OWORD *)&v312.__r_.__value_.__l.__data_ = *(_OWORD *)v288;
        v312.__r_.__value_.__r.__words[2] = *(void *)(v308 + 80);
      }
      if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v205 = &v312;
      }
      else {
        v205 = (std::string *)v312.__r_.__value_.__r.__words[0];
      }
      if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v206 = HIBYTE(v312.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v206 = v312.__r_.__value_.__l.__size_;
      }
      v207 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v204, (uint64_t)v205, v206);
      v208 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v207, (uint64_t)"' is deprecated: ", 17);
      if (*(char *)(v191 + 151) < 0)
      {
        std::string::__init_copy_ctor_external(&v343, *(const std::string::value_type **)(v191 + 128), *(void *)(v191 + 136));
      }
      else
      {
        *(_OWORD *)&v343.__r_.__value_.__l.__data_ = *v193;
        v343.__r_.__value_.__r.__words[2] = *(void *)(v191 + 144);
      }
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v209 = &v343;
      }
      else {
        v209 = (std::string *)v343.__r_.__value_.__r.__words[0];
      }
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v210 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v210 = v343.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)v209, v210);
      if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v343.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v312.__r_.__value_.__l.__data_);
      }
      std::stringbuf::str();
      siri::dialogengine::Context::AddValidationWarning((uint64_t)v309, (long long *)&v312, (uint64_t)v321);
      if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v312.__r_.__value_.__l.__data_);
      }
      v329.__first_ = v305;
      *(std::__split_buffer<std::string>::pointer *)((char *)&v329.__first_ + v305[-1].__r_.__value_.__r.__words[0]) = v298;
      v329.__end_ = v296;
      v329.__end_cap_.__value_ = (std::string *)(MEMORY[0x1E4FBA470] + 16);
      if (v334 < 0) {
        operator delete(v333);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1C8796CC0](v335);
LABEL_658:
      if (*(char *)(v188 + 79) < 0) {
        uint64_t v211 = *(void *)(v188 + 64);
      }
      else {
        uint64_t v211 = *(unsigned __int8 *)(v188 + 79);
      }
      if (!v211) {
        goto LABEL_749;
      }
      siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v329);
      siri::dialogengine::ResolveType(0, (uint64_t)&v329, v188 + 56, 1, (uint64_t)&v312);
      if (*(char *)(v191 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v343, *(const std::string::value_type **)(v191 + 32), *(void *)(v191 + 40));
      }
      else {
        std::string v343 = *(std::string *)(v191 + 32);
      }
      size_t v212 = strlen(siri::dialogengine::TYPE_UNKNOWN);
      size_t v213 = v212;
      std::string::size_type v214 = HIBYTE(v312.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v212 != v312.__r_.__value_.__l.__size_) {
          goto LABEL_672;
        }
        if (v212 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        v215 = (std::string *)v312.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (v212 != HIBYTE(v312.__r_.__value_.__r.__words[2])) {
          goto LABEL_672;
        }
        v215 = &v312;
      }
      if (!memcmp(v215, siri::dialogengine::TYPE_UNKNOWN, v213))
      {
        std::operator+<char>();
        v220 = std::string::append(&v338, "' with value '");
        long long v221 = *(_OWORD *)&v220->__r_.__value_.__l.__data_;
        v339.__r_.__value_.__r.__words[2] = v220->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v339.__r_.__value_.__l.__data_ = v221;
        v220->__r_.__value_.__l.__size_ = 0;
        v220->__r_.__value_.__r.__words[2] = 0;
        v220->__r_.__value_.__r.__words[0] = 0;
        int v222 = *(char *)(v188 + 79);
        if (v222 >= 0) {
          v223 = (const std::string::value_type *)(v188 + 56);
        }
        else {
          v223 = *(const std::string::value_type **)(v188 + 56);
        }
        if (v222 >= 0) {
          std::string::size_type v224 = *(unsigned __int8 *)(v188 + 79);
        }
        else {
          std::string::size_type v224 = *(void *)(v188 + 64);
        }
        v225 = std::string::append(&v339, v223, v224);
        long long v226 = *(_OWORD *)&v225->__r_.__value_.__l.__data_;
        v340.__r_.__value_.__r.__words[2] = v225->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v340.__r_.__value_.__l.__data_ = v226;
        v225->__r_.__value_.__l.__size_ = 0;
        v225->__r_.__value_.__r.__words[2] = 0;
        v225->__r_.__value_.__r.__words[0] = 0;
        v227 = std::string::append(&v340, "' has an unknown type. Expected it to be ");
        long long v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
        v341.__r_.__value_.__r.__words[2] = v227->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v341.__r_.__value_.__l.__data_ = v228;
        v227->__r_.__value_.__l.__size_ = 0;
        v227->__r_.__value_.__r.__words[2] = 0;
        v227->__r_.__value_.__r.__words[0] = 0;
        if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v229 = &v343;
        }
        else {
          v229 = (std::string *)v343.__r_.__value_.__r.__words[0];
        }
        if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v230 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v230 = v343.__r_.__value_.__l.__size_;
        }
        v231 = std::string::append(&v341, (const std::string::value_type *)v229, v230);
        long long v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
        v342.__r_.__value_.__r.__words[2] = v231->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v342.__r_.__value_.__l.__data_ = v232;
        v231->__r_.__value_.__l.__size_ = 0;
        v231->__r_.__value_.__r.__words[2] = 0;
        v231->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v342, 0);
        if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v342.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v341.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v340.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v339.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
        {
          v233 = (void *)v338.__r_.__value_.__r.__words[0];
          goto LABEL_742;
        }
LABEL_743:
        char v307 = 0;
        goto LABEL_744;
      }
LABEL_672:
      if ((v214 & 0x80u) == 0) {
        std::string::size_type v216 = v214;
      }
      else {
        std::string::size_type v216 = v312.__r_.__value_.__l.__size_;
      }
      std::string::size_type v217 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v217 = v343.__r_.__value_.__l.__size_;
      }
      if (v216 != v217) {
        goto LABEL_710;
      }
      if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v218 = &v343;
      }
      else {
        v218 = (std::string *)v343.__r_.__value_.__r.__words[0];
      }
      if ((v214 & 0x80) != 0)
      {
        if (memcmp(v312.__r_.__value_.__l.__data_, v218, v312.__r_.__value_.__l.__size_)) {
          goto LABEL_710;
        }
      }
      else if (v214)
      {
        v219 = &v312;
        while (v219->__r_.__value_.__s.__data_[0] == v218->__r_.__value_.__s.__data_[0])
        {
          v219 = (std::string *)((char *)v219 + 1);
          v218 = (std::string *)((char *)v218 + 1);
          if (!--v214) {
            goto LABEL_744;
          }
        }
LABEL_710:
        std::operator+<char>();
        v234 = std::string::append(&__str, "' with value '");
        long long v235 = *(_OWORD *)&v234->__r_.__value_.__l.__data_;
        v328.__r_.__value_.__r.__words[2] = v234->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v328.__r_.__value_.__l.__data_ = v235;
        v234->__r_.__value_.__l.__size_ = 0;
        v234->__r_.__value_.__r.__words[2] = 0;
        v234->__r_.__value_.__r.__words[0] = 0;
        int v236 = *(char *)(v188 + 79);
        if (v236 >= 0) {
          v237 = (const std::string::value_type *)(v188 + 56);
        }
        else {
          v237 = *(const std::string::value_type **)(v188 + 56);
        }
        if (v236 >= 0) {
          std::string::size_type v238 = *(unsigned __int8 *)(v188 + 79);
        }
        else {
          std::string::size_type v238 = *(void *)(v188 + 64);
        }
        v239 = std::string::append(&v328, v237, v238);
        long long v240 = *(_OWORD *)&v239->__r_.__value_.__l.__data_;
        v338.__r_.__value_.__r.__words[2] = v239->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v338.__r_.__value_.__l.__data_ = v240;
        v239->__r_.__value_.__l.__size_ = 0;
        v239->__r_.__value_.__r.__words[2] = 0;
        v239->__r_.__value_.__r.__words[0] = 0;
        v241 = std::string::append(&v338, "' is of type ");
        long long v242 = *(_OWORD *)&v241->__r_.__value_.__l.__data_;
        v339.__r_.__value_.__r.__words[2] = v241->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v339.__r_.__value_.__l.__data_ = v242;
        v241->__r_.__value_.__l.__size_ = 0;
        v241->__r_.__value_.__r.__words[2] = 0;
        v241->__r_.__value_.__r.__words[0] = 0;
        if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v243 = &v312;
        }
        else {
          v243 = (std::string *)v312.__r_.__value_.__r.__words[0];
        }
        if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v244 = HIBYTE(v312.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v244 = v312.__r_.__value_.__l.__size_;
        }
        v245 = std::string::append(&v339, (const std::string::value_type *)v243, v244);
        long long v246 = *(_OWORD *)&v245->__r_.__value_.__l.__data_;
        v340.__r_.__value_.__r.__words[2] = v245->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v340.__r_.__value_.__l.__data_ = v246;
        v245->__r_.__value_.__l.__size_ = 0;
        v245->__r_.__value_.__r.__words[2] = 0;
        v245->__r_.__value_.__r.__words[0] = 0;
        v247 = std::string::append(&v340, " which is not ");
        long long v248 = *(_OWORD *)&v247->__r_.__value_.__l.__data_;
        v341.__r_.__value_.__r.__words[2] = v247->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v341.__r_.__value_.__l.__data_ = v248;
        v247->__r_.__value_.__l.__size_ = 0;
        v247->__r_.__value_.__r.__words[2] = 0;
        v247->__r_.__value_.__r.__words[0] = 0;
        if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v249 = &v343;
        }
        else {
          v249 = (std::string *)v343.__r_.__value_.__r.__words[0];
        }
        if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v250 = HIBYTE(v343.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v250 = v343.__r_.__value_.__l.__size_;
        }
        v251 = std::string::append(&v341, (const std::string::value_type *)v249, v250);
        long long v252 = *(_OWORD *)&v251->__r_.__value_.__l.__data_;
        v342.__r_.__value_.__r.__words[2] = v251->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v342.__r_.__value_.__l.__data_ = v252;
        v251->__r_.__value_.__l.__size_ = 0;
        v251->__r_.__value_.__r.__words[2] = 0;
        v251->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v342, 0);
        if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v342.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v341.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v340.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v339.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v338.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v328.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          v233 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_742:
          operator delete(v233);
        }
        goto LABEL_743;
      }
LABEL_744:
      if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v343.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v312.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v329);
LABEL_749:
      if (*(char *)(v191 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v329, *(const std::string::value_type **)(v191 + 32), *(void *)(v191 + 40));
      }
      else
      {
        *(_OWORD *)&v329.__first_ = *(_OWORD *)(v191 + 32);
        v329.__end_ = *(std::__split_buffer<std::string>::pointer *)(v191 + 48);
      }
      if (SHIBYTE(v329.__end_) < 0)
      {
        std::__split_buffer<std::string>::pointer v254 = v329.__first_;
        if (v329.__begin_ != (std::__split_buffer<std::string>::pointer)13) {
          goto LABEL_784;
        }
        BOOL v256 = v329.__first_->__r_.__value_.__r.__words[0] != 0x532E676F6C616964
            || *(std::string::size_type *)((char *)v329.__first_->__r_.__value_.__r.__words + 5) != 0x676E697274532E67;
        operator delete(v329.__first_);
        if (!v256)
        {
LABEL_768:
          siri::dialogengine::StringTrim("'", (const std::string *)(v188 + 56), (std::string *)&v329);
          if (!siri::dialogengine::ValidateSettingValue((void *)(v188 + 32), (uint64_t)&v329))
          {
            std::operator+<char>();
            v257 = std::string::append(&v342, "' has an invalid value: ");
            long long v258 = *(_OWORD *)&v257->__r_.__value_.__l.__data_;
            v343.__r_.__value_.__r.__words[2] = v257->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v343.__r_.__value_.__l.__data_ = v258;
            v257->__r_.__value_.__l.__size_ = 0;
            v257->__r_.__value_.__r.__words[2] = 0;
            v257->__r_.__value_.__r.__words[0] = 0;
            int v259 = *(char *)(v188 + 79);
            if (v259 >= 0) {
              v260 = (const std::string::value_type *)(v188 + 56);
            }
            else {
              v260 = *(const std::string::value_type **)(v188 + 56);
            }
            if (v259 >= 0) {
              std::string::size_type v261 = *(unsigned __int8 *)(v188 + 79);
            }
            else {
              std::string::size_type v261 = *(void *)(v188 + 64);
            }
            v262 = std::string::append(&v343, v260, v261);
            long long v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
            v312.__r_.__value_.__r.__words[2] = v262->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v263;
            v262->__r_.__value_.__l.__size_ = 0;
            v262->__r_.__value_.__r.__words[2] = 0;
            v262->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v312, 0);
            if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v312.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v343.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v342.__r_.__value_.__l.__data_);
            }
            char v307 = 0;
          }
          if ((SHIBYTE(v329.__end_) & 0x80000000) == 0) {
            goto LABEL_611;
          }
          std::__split_buffer<std::string>::pointer v254 = v329.__first_;
LABEL_784:
          operator delete(v254);
        }
      }
      else if (SHIBYTE(v329.__end_) == 13 {
             && v329.__first_ == (std::__split_buffer<std::string>::pointer)0x532E676F6C616964
      }
             && *(std::__split_buffer<std::string>::pointer *)((char *)&v329.__first_ + 5) == (std::__split_buffer<std::string>::pointer)0x676E697274532E67)
      {
        goto LABEL_768;
      }
LABEL_611:
      if (v192) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v192);
      }
LABEL_613:
      v196 = *(std::string **)(v188 + 8);
      if (v196)
      {
        do
        {
          v197 = v196;
          v196 = (std::string *)v196->__r_.__value_.__r.__words[0];
        }
        while (v196);
      }
      else
      {
        do
        {
          v197 = *(std::string **)(v188 + 16);
          BOOL v18 = v197->__r_.__value_.__r.__words[0] == v188;
          std::string::size_type v188 = (std::string::size_type)v197;
        }
        while (!v18);
      }
      std::string::size_type v188 = (std::string::size_type)v197;
    }
    while (v197 != (std::string *)&v344.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v344.__r_.__value_.__l.__size_);
  *(_OWORD *)&v344.__r_.__value_.__r.__words[1] = 0uLL;
  v344.__r_.__value_.__r.__words[0] = (std::string::size_type)&v344.__r_.__value_.__l.__size_;
  LOBYTE(v345) = 0;
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v329, (const siri::dialogengine::RequestInfo *)((char *)v309 + 8));
  memset(&v312, 0, sizeof(v312));
  std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v312, (uint64_t)v329.__begin_, (uint64_t)v329.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v329.__end_ - (char *)v329.__begin_) >> 5));
  siri::dialogengine::GetParamsForPattern(v308, (std::string **)&v312, 2, 1, 1, (uint64_t)&v344);
  v343.__r_.__value_.__r.__words[0] = (std::string::size_type)&v312;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v343);
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&v329.__first_);
  siri::dialogengine::ParameterCollection::GetConflictingParameters((uint64_t **)&v344, (siri::dialogengine::Context *)v309, (uint64_t **)&v312);
  std::string::size_type v264 = v312.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v312.__r_.__value_.__l.__data_ != &v312.__r_.__value_.__r.__words[1])
  {
    v302 = *(std::string **)(MEMORY[0x1E4FBA408] + 64);
    v306 = (std::string *)*MEMORY[0x1E4FBA408];
    v299 = *(std::string **)(MEMORY[0x1E4FBA408] + 72);
    do
    {
      memset(&v343, 0, sizeof(v343));
      for (uint64_t i = *(void **)(v264 + 72); i; uint64_t i = (void *)*i)
      {
        uint64_t v266 = i[2];
        if (*(char *)(v266 + 279) < 0) {
          std::string::__init_copy_ctor_external(&v341, *(const std::string::value_type **)(v266 + 256), *(void *)(v266 + 264));
        }
        else {
          std::string v341 = *(std::string *)(v266 + 256);
        }
        siri::dialogengine::CatPathToId((unsigned __int8 *)&v341, &v342);
        v267 = (_OWORD *)v343.__r_.__value_.__l.__size_;
        if (v343.__r_.__value_.__l.__size_ >= v343.__r_.__value_.__r.__words[2])
        {
          unint64_t v269 = 0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v343.__r_.__value_.__l.__size_ - v343.__r_.__value_.__r.__words[0]) >> 3);
          unint64_t v270 = v269 + 1;
          if (v269 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556
             * ((uint64_t)(v343.__r_.__value_.__r.__words[2] - v343.__r_.__value_.__r.__words[0]) >> 3) > v270)
            unint64_t v270 = 0x5555555555555556
                 * ((uint64_t)(v343.__r_.__value_.__r.__words[2] - v343.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v343.__r_.__value_.__r.__words[2] - v343.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            unint64_t v271 = 0xAAAAAAAAAAAAAAALL;
          else {
            unint64_t v271 = v270;
          }
          v329.__end_cap_.__value_ = (std::allocator<std::string> *)&v343.__r_.__value_.__r.__words[2];
          if (v271) {
            v272 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v343.__r_.__value_.__r.__words[2], v271);
          }
          else {
            v272 = 0;
          }
          v273 = v272 + v269;
          v329.__first_ = v272;
          v329.__begin_ = v273;
          v329.__end_cap_.__value_ = &v272[v271];
          long long v274 = *(_OWORD *)&v342.__r_.__value_.__l.__data_;
          v273->__r_.__value_.__r.__words[2] = v342.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v273->__r_.__value_.__l.__data_ = v274;
          memset(&v342, 0, sizeof(v342));
          v329.__end_ = v273 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v343, &v329);
          std::string::size_type v275 = v343.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer(&v329);
          v343.__r_.__value_.__l.__size_ = v275;
          if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v342.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v268 = *(_OWORD *)&v342.__r_.__value_.__l.__data_;
          *(void *)(v343.__r_.__value_.__l.__size_ + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *((void *)&v342.__r_.__value_.__l + 2);
          _OWORD *v267 = v268;
          memset(&v342, 0, sizeof(v342));
          v343.__r_.__value_.__l.__size_ = (std::string::size_type)v267 + 24;
        }
        if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v341.__r_.__value_.__l.__data_);
        }
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v329);
      v276 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v329.__end_, (uint64_t)"The parameter '", 15);
      int v277 = *(char *)(v264 + 55);
      if (v277 >= 0) {
        uint64_t v278 = v264 + 32;
      }
      else {
        uint64_t v278 = *(void *)(v264 + 32);
      }
      if (v277 >= 0) {
        uint64_t v279 = *(unsigned __int8 *)(v264 + 55);
      }
      else {
        uint64_t v279 = *(void *)(v264 + 40);
      }
      v280 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v276, v278, v279);
      v281 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"' is defined in multiple files with different types (", 53);
      std::string::basic_string[abi:ne180100]<0>(&v341, ", ");
      siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v342, (uint64_t)v343.__r_.__value_.__l.__data_, v343.__r_.__value_.__l.__size_, (uint64_t)&v341);
      if ((v342.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v282 = &v342;
      }
      else {
        v282 = (std::string *)v342.__r_.__value_.__r.__words[0];
      }
      if ((v342.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v283 = HIBYTE(v342.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v283 = v342.__r_.__value_.__l.__size_;
      }
      v284 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v281, (uint64_t)v282, v283);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v284, (uint64_t)")", 1);
      if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v342.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v341.__r_.__value_.__l.__data_);
      }
      std::stringbuf::str();
      siri::dialogengine::Context::AddValidationError((uint64_t)v309, (long long *)&v342, 0);
      if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v342.__r_.__value_.__l.__data_);
      }
      v329.__first_ = v306;
      *(std::__split_buffer<std::string>::pointer *)((char *)&v329.__first_ + v306[-1].__r_.__value_.__r.__words[0]) = v302;
      v329.__end_ = v299;
      v329.__end_cap_.__value_ = (std::string *)(MEMORY[0x1E4FBA470] + 16);
      if (v334 < 0) {
        operator delete(v333);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1C8796CC0](v335);
      v329.__first_ = &v343;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v329);
      v285 = *(std::string **)(v264 + 8);
      if (v285)
      {
        do
        {
          v286 = v285;
          v285 = (std::string *)v285->__r_.__value_.__r.__words[0];
        }
        while (v285);
      }
      else
      {
        do
        {
          v286 = *(std::string **)(v264 + 16);
          BOOL v18 = v286->__r_.__value_.__r.__words[0] == v264;
          std::string::size_type v264 = (std::string::size_type)v286;
        }
        while (!v18);
      }
      std::string::size_type v264 = (std::string::size_type)v286;
    }
    while (v286 != (std::string *)&v312.__r_.__value_.__r.__words[1]);
    char v307 = 0;
  }
  std::__tree<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>>>::destroy((void *)v312.__r_.__value_.__l.__size_);
  std::__tree<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>>>::destroy((void *)v344.__r_.__value_.__l.__size_);
LABEL_835:
  if (v318) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v318);
  }
  siri::dialogengine::LineNumberBase::~LineNumberBase(v321);
  return v307 & 1;
}

void sub_1C60B8B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x1067]) < 0) {
    operator delete((void *)STACK[0x1050]);
  }
  STACK[0x1050] = (unint64_t)&STACK[0x1070];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1050]);
  if (v75) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  }
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  if (v73)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  siri::dialogengine::UpdatableDir::~UpdatableDir((void **)&a73);
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair((uint64_t)&a33);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a39);
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  siri::dialogengine::LineNumberBase::~LineNumberBase(&a46);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ResolveUsage(uint64_t a1, uint64_t a2, int ***a3)
{
  v61[4] = *MEMORY[0x1E4F143B8];
  {
    std::string::basic_string[abi:ne180100]<0>(&v57, "defined");
    std::string::basic_string[abi:ne180100]<0>(v58, "undefined");
    std::string::basic_string[abi:ne180100]<0>(v60, "==");
    std::string::basic_string[abi:ne180100]<0>(v61, "!=");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&siri::dialogengine::ResolveUsage(siri::dialogengine::Context *,siri::dialogengine::PatternFile *,std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>> const&)::VALID_OPERATORS, (const void **)&v57.__r_.__value_.__l.__data_, 4);
    for (uint64_t i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v61[i + 2]) < 0) {
        operator delete((void *)v61[i]);
      }
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &siri::dialogengine::ResolveUsage(siri::dialogengine::Context *,siri::dialogengine::PatternFile *,std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>> const&)::VALID_OPERATORS, &dword_1C5C1E000);
  }
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 == v5) {
    return 0;
  }
  std::__split_buffer<std::string>::pointer v45 = a3[1];
  std::__split_buffer<std::string>::pointer v46 = (const void ***)(a2 + 160);
  while (1)
  {
    uint64_t v7 = *v6;
    std::__split_buffer<std::string>::pointer v8 = (std::__shared_weak_count *)v6[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v9 = (long long *)(v7 + 2);
    if (*((char *)v7 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v57, *((const std::string::value_type **)v7 + 1), *((void *)v7 + 2));
    }
    else
    {
      long long v10 = *v9;
      v57.__r_.__value_.__r.__words[2] = *((void *)v7 + 3);
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v10;
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = v57.__r_.__value_.__l.__size_;
      operator delete(v57.__r_.__value_.__l.__data_);
      if (!size)
      {
LABEL_14:
        unsigned int v49 = *v7;
        int v13 = 1;
        if (!v8) {
          goto LABEL_123;
        }
LABEL_122:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        goto LABEL_123;
      }
    }
    else if (!*((unsigned char *)&v57.__r_.__value_.__s + 23))
    {
      goto LABEL_14;
    }
    if (*((char *)v7 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v57, *((const std::string::value_type **)v7 + 1), *((void *)v7 + 2));
    }
    else
    {
      long long v11 = *v9;
      v57.__r_.__value_.__r.__words[2] = *((void *)v7 + 3);
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v11;
    }
    siri::dialogengine::StringSplit((unsigned __int8 *)&v57, " \t\n\r", v56);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56[1] - v56[0]) >> 3)) & 0xFFFFFFFFFFFFFFFELL) == 2)
    {
      if (*(char *)(v56[0] + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v56[0], *(void *)(v56[0] + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v56[0];
        v55.__r_.__value_.__r.__words[2] = *(void *)(v56[0] + 16);
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v14;
      }
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v53, v46);
      int v48 = v8;
      int v16 = (void **)v53[0];
      if (v53[0] != &v53[1])
      {
        int v17 = 0;
        while (1)
        {
          std::pair<std::string const,std::string>::pair[abi:ne180100](&v57, (long long *)v16 + 2);
          siri::dialogengine::StringToLower((uint64_t)&v57, (uint64_t)&__s1);
          siri::dialogengine::StringToLower((uint64_t)&v55, (uint64_t)__p);
          uint64_t v18 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          char v19 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v20 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v20 = __s1.__r_.__value_.__l.__size_;
          }
          unint64_t v21 = v51;
          int v22 = (char)v51;
          if ((v51 & 0x80u) != 0) {
            unint64_t v21 = (unint64_t)__p[1];
          }
          if (v20 == v21)
          {
            char v23 = __p[0];
            if ((v51 & 0x80u) == 0) {
              long long v24 = __p;
            }
            else {
              long long v24 = (void **)__p[0];
            }
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            {
              if (!memcmp(__s1.__r_.__value_.__l.__data_, v24, __s1.__r_.__value_.__l.__size_))
              {
LABEL_46:
                if ((v59 & 0x80u) == 0) {
                  unint64_t v26 = v59;
                }
                else {
                  unint64_t v26 = (unint64_t)v58[1];
                }
                if (v22 < 0)
                {
                  operator delete(v23);
                  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
                    goto LABEL_51;
                  }
                }
                else if ((v19 & 0x80) == 0)
                {
LABEL_51:
                  v17 |= v26 != 0;
                  goto LABEL_54;
                }
                operator delete(__s1.__r_.__value_.__l.__data_);
                goto LABEL_51;
              }
            }
            else
            {
              if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
                goto LABEL_46;
              }
              p_s1 = &__s1;
              while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v24)
              {
                p_s1 = (std::string *)((char *)p_s1 + 1);
                long long v24 = (void **)((char *)v24 + 1);
                if (!--v18) {
                  goto LABEL_46;
                }
              }
            }
          }
          if (v22 < 0)
          {
            operator delete(__p[0]);
            if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_53:
            }
              operator delete(__s1.__r_.__value_.__l.__data_);
          }
          else if (v19 < 0)
          {
            goto LABEL_53;
          }
LABEL_54:
          if ((char)v59 < 0) {
            operator delete(v58[0]);
          }
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v57.__r_.__value_.__l.__data_);
          }
          uint64_t v27 = (void **)v16[1];
          if (v27)
          {
            do
            {
              uint64_t v28 = v27;
              uint64_t v27 = (void **)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              uint64_t v28 = (void **)v16[2];
              BOOL v35 = *v28 == v16;
              int v16 = v28;
            }
            while (!v35);
          }
          int v16 = v28;
          if (v28 == &v53[1]) {
            goto LABEL_74;
          }
        }
      }
      int v17 = 0;
LABEL_74:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v53[1]);
      siri::dialogengine::StringToLower(v56[0] + 24, (uint64_t)&v57);
      if ((_UNKNOWN *)std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::ResolveUsage(siri::dialogengine::Context *,siri::dialogengine::PatternFile *,std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>> const&)::VALID_OPERATORS, (const void **)&v57.__r_.__value_.__l.__data_) == &unk_1EA3DA358)
      {
        if (*((char *)v7 + 31) < 0)
        {
          std::__split_buffer<std::string>::pointer v8 = v48;
          std::string::__init_copy_ctor_external(&__s1, *((const std::string::value_type **)v7 + 1), *((void *)v7 + 2));
        }
        else
        {
          long long v32 = *v9;
          __s1.__r_.__value_.__r.__words[2] = *((void *)v7 + 3);
          *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v32;
          std::__split_buffer<std::string>::pointer v8 = v48;
        }
        uint64_t v5 = v45;
        char v37 = std::string::insert(&__s1, 0, "Unsupported operator in usage condition: ");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        std::string::size_type v54 = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v53 = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError(a1, (long long *)v53, 0);
        if (SHIBYTE(v54) < 0) {
          operator delete(v53[0]);
        }
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        int v13 = 3;
        if ((*((unsigned char *)&v57.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_119;
        }
      }
      else
      {
        if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (HIBYTE(v57.__r_.__value_.__r.__words[2]) == 7)
          {
            BOOL v40 = LODWORD(v57.__r_.__value_.__l.__data_) == 1768318308
               && *(_DWORD *)((char *)v57.__r_.__value_.__r.__words + 3) == 1684369001;
            if (v40 & v17) {
              goto LABEL_114;
            }
          }
          else if (HIBYTE(v57.__r_.__value_.__r.__words[2]) == 9)
          {
            v31 = &v57;
            goto LABEL_84;
          }
          int v13 = 0;
          std::__split_buffer<std::string>::pointer v8 = v48;
          uint64_t v5 = v45;
          goto LABEL_119;
        }
        if (v57.__r_.__value_.__l.__size_ == 7)
        {
          BOOL v42 = *(_DWORD *)v57.__r_.__value_.__l.__data_ == 1768318308
             && *(_DWORD *)(v57.__r_.__value_.__r.__words[0] + 3) == 1684369001;
          if (v42 & v17) {
            goto LABEL_114;
          }
        }
        else if (v57.__r_.__value_.__l.__size_ == 9)
        {
          v31 = (std::string *)v57.__r_.__value_.__r.__words[0];
LABEL_84:
          std::string::size_type v33 = v31->__r_.__value_.__r.__words[0];
          int v34 = v31->__r_.__value_.__s.__data_[8];
          BOOL v35 = v33 == 0x656E696665646E75 && v34 == 100;
          int v36 = !v35;
          if ((v36 | v17))
          {
            int v13 = 0;
            goto LABEL_115;
          }
LABEL_114:
          unsigned int v49 = *v7;
          int v13 = 1;
LABEL_115:
          std::__split_buffer<std::string>::pointer v8 = v48;
          uint64_t v5 = v45;
          if ((*((unsigned char *)&v57.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_119;
          }
          goto LABEL_118;
        }
        int v13 = 0;
        std::__split_buffer<std::string>::pointer v8 = v48;
        uint64_t v5 = v45;
      }
LABEL_118:
      operator delete(v57.__r_.__value_.__l.__data_);
LABEL_119:
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      goto LABEL_121;
    }
    if (*((char *)v7 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v55, *((const std::string::value_type **)v7 + 1), *((void *)v7 + 2));
    }
    else
    {
      long long v15 = *v9;
      v55.__r_.__value_.__r.__words[2] = *((void *)v7 + 3);
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v15;
    }
    long long v29 = std::string::insert(&v55, 0, "Unsupported condition syntax for usage: ");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError(a1, (long long *)&v57, 0);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    unsigned int v49 = 0;
    int v13 = 1;
LABEL_121:
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
    if (v8) {
      goto LABEL_122;
    }
LABEL_123:
    if (v13 != 3 && v13) {
      return v49;
    }
    v6 += 2;
    if (v6 == v5) {
      return 0;
    }
  }
}

void sub_1C60BA1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v47 = 0;
  while (1)
  {
    if (*(char *)(v45 + v47 + 95) < 0) {
      operator delete(*(void **)(v45 + v47 + 72));
    }
    v47 -= 24;
    if (v47 == -96)
    {
      _Unwind_Resume(a1);
    }
  }
}

void siri::dialogengine::CopyValidationEntries(uint64_t a1, uint64_t a2, const std::string *a3)
{
  if (a1 && a2)
  {
    std::vector<siri::dialogengine::ValidationEntry>::vector<std::__tree_const_iterator<siri::dialogengine::ValidationEntry,std::__tree_node<siri::dialogengine::ValidationEntry,void *> *,long>,0>(&v17, *(void **)(a1 + 592), (void *)(a1 + 600));
    uint64_t v6 = v17;
    for (uint64_t i = v18; v6 != i; v6 += 88)
    {
      if (*(char *)(v6 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v6 + 16), *(void *)(v6 + 24));
      }
      else
      {
        long long v8 = *(_OWORD *)(v6 + 16);
        v16.__r_.__value_.__r.__words[2] = *(void *)(v6 + 32);
        *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v8;
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = v16.__r_.__value_.__l.__size_;
        operator delete(v16.__r_.__value_.__l.__data_);
        if (!size) {
LABEL_11:
        }
          siri::dialogengine::LineNumberBase::SetFullPath(v6, a3);
      }
      else if (!*((unsigned char *)&v16.__r_.__value_.__s + 23))
      {
        goto LABEL_11;
      }
      std::__tree<siri::dialogengine::ValidationEntry>::__emplace_unique_key_args<siri::dialogengine::ValidationEntry,siri::dialogengine::ValidationEntry const&>((uint64_t **)(a2 + 592), v6, (const siri::dialogengine::ValidationEntry *)v6);
    }
    std::vector<siri::dialogengine::ValidationEntry>::vector<std::__tree_const_iterator<siri::dialogengine::ValidationEntry,std::__tree_node<siri::dialogengine::ValidationEntry,void *> *,long>,0>(&v16, *(void **)(a1 + 568), (void *)(a1 + 576));
    std::string::size_type v11 = v16.__r_.__value_.__l.__size_;
    uint64_t v10 = v16.__r_.__value_.__r.__words[0];
    if (v16.__r_.__value_.__r.__words[0] != v16.__r_.__value_.__l.__size_)
    {
      uint64_t v12 = (uint64_t **)(a2 + 568);
      do
      {
        if (*(char *)(v10 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v10 + 16), *(void *)(v10 + 24));
        }
        else
        {
          long long v13 = *(_OWORD *)(v10 + 16);
          v15.__r_.__value_.__r.__words[2] = *(void *)(v10 + 32);
          *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v13;
        }
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v14 = v15.__r_.__value_.__l.__size_;
          operator delete(v15.__r_.__value_.__l.__data_);
          if (!v14) {
LABEL_22:
          }
            siri::dialogengine::LineNumberBase::SetFullPath(v10, a3);
        }
        else if (!*((unsigned char *)&v15.__r_.__value_.__s + 23))
        {
          goto LABEL_22;
        }
        std::__tree<siri::dialogengine::ValidationEntry>::__emplace_unique_key_args<siri::dialogengine::ValidationEntry,siri::dialogengine::ValidationEntry const&>(v12, v10, (const siri::dialogengine::ValidationEntry *)v10);
        v10 += 88;
      }
      while (v10 != v11);
    }
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
    std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  }
  else
  {
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Either fromContext or toContext has no File", (const char *)a2);
  }
}

void sub_1C60BA51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a13 = (void **)&a16;
  std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      siri::dialogengine::UpdatableDir::UpdatableDir((std::string *)(a4 + v7), (const siri::dialogengine::UpdatableDir *)(a2 + v7));
      v7 += 96;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void siri::dialogengine::PatternFile::LoadFromPath(uint64_t a1@<X0>, std::string *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = (uint64_t *)a2;
  }
  else {
    uint64_t v5 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Attempting to load a pattern file from path '%s'", (const char *)a2, v5);
  if (siri::dialogengine::HasPatternExtension(a2, 0)) {
    siri::dialogengine::ParsePatternXmlFile(a2, (long long *)&v118);
  }
  else {
    siri::dialogengine::ParsePatternBinaryFile(&v118);
  }
  std::string::size_type size = (std::__shared_weak_count *)v118.__r_.__value_.__l.__size_;
  uint64_t v6 = v118.__r_.__value_.__r.__words[0];
  if (v118.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v111 = v118.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]<0>(&v118, "printSupportingDialogInDisplayOnly");
    std::string::basic_string[abi:ne180100]<0>(&v119, "printSupportingDialogInDisplayModes");
    memset(&v117, 0, sizeof(v117));
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    __str.__r_.__value_.__s.__data_[8] = 0;
    v117.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v117.__r_.__value_.__l.__size_ = v117.__r_.__value_.__r.__words[0];
    v117.__r_.__value_.__r.__words[2] = v117.__r_.__value_.__r.__words[0] + 48;
    v117.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v117.__r_.__value_.__r.__words[2], (uint64_t)&v118, (uint64_t)&v121, (uint64_t)v117.__r_.__value_.__l.__data_);
    if (v120 < 0) {
      operator delete(v119);
    }
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v118.__r_.__value_.__l.__data_);
    }
    uint64_t v110 = (uint64_t **)(v6 + 160);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v118, (const void ***)(v6 + 160));
    std::string::size_type v8 = v117.__r_.__value_.__l.__size_;
    for (std::string::size_type i = v117.__r_.__value_.__r.__words[0]; i != v8; i += 48)
    {
      siri::dialogengine::PatternFile::GetSetting(v6, (const void **)i, &__str);
      std::string::size_type v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v10 = __str.__r_.__value_.__l.__size_;
      }
      if (v10)
      {
        if (&v118.__r_.__value_.__r.__words[1] == (std::string::size_type *)std::__tree<std::string>::find<std::string>((uint64_t)&v118, (const void **)(i + 24)))
        {
          std::operator+<char>();
          std::string::size_type v20 = std::string::append(&v112, "' from the value of old pattern setting '");
          long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          v113.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          int v22 = *(char *)(i + 23);
          if (v22 >= 0) {
            char v23 = (const std::string::value_type *)i;
          }
          else {
            char v23 = *(const std::string::value_type **)i;
          }
          if (v22 >= 0) {
            std::string::size_type v24 = *(unsigned __int8 *)(i + 23);
          }
          else {
            std::string::size_type v24 = *(void *)(i + 8);
          }
          uint64_t v25 = std::string::append(&v113, v23, v24);
          long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          v114.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          uint64_t v27 = std::string::append(&v114, "': ");
          long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          v115.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v30 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v30 = __str.__r_.__value_.__l.__size_;
          }
          v31 = std::string::append(&v115, (const std::string::value_type *)p_str, v30);
          long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
          v121.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v32;
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v121, 0);
          if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v121.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v115.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v113.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v112.__r_.__value_.__l.__data_);
          }
          v121.__r_.__value_.__r.__words[0] = i + 24;
          std::string::size_type size = (std::__shared_weak_count *)v111;
          std::string::size_type v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v110, (const void **)(i + 24), (long long **)&v121);
          std::string::operator=((std::string *)(v33 + 7), &__str);
        }
        else
        {
          std::operator+<char>();
          std::string::size_type v11 = std::string::append(&v113, "' and the new pattern setting '");
          long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          v114.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v12;
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          int v13 = *(char *)(i + 47);
          if (v13 >= 0) {
            std::string::size_type v14 = (const std::string::value_type *)(i + 24);
          }
          else {
            std::string::size_type v14 = *(const std::string::value_type **)(i + 24);
          }
          if (v13 >= 0) {
            std::string::size_type v15 = *(unsigned __int8 *)(i + 47);
          }
          else {
            std::string::size_type v15 = *(void *)(i + 32);
          }
          std::string v16 = std::string::append(&v114, v14, v15);
          long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          v115.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v17;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type size = (std::__shared_weak_count *)v111;
          uint64_t v18 = std::string::append(&v115, "'; Ignoring the old one");
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v121.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v121, 1u);
          if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v121.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v115.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v113.__r_.__value_.__l.__data_);
          }
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v118.__r_.__value_.__l.__size_);
    v118.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    if (a3)
    {
      if (size) {
        atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v35 = a1;
      if (a1)
      {
        int v36 = (_OWORD *)(v6 + 112);
        if (*(char *)(v6 + 135) < 0)
        {
          std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(v6 + 112), *(void *)(v6 + 120));
          uint64_t v35 = a1;
        }
        else
        {
          *(_OWORD *)&v118.__r_.__value_.__l.__data_ = *v36;
          v118.__r_.__value_.__r.__words[2] = *(void *)(v6 + 128);
        }
        siri::dialogengine::PatternRegistry::GetSchema(v35, (const std::string::value_type **)&v118.__r_.__value_.__l.__data_, (uint64_t *)&v113);
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v118.__r_.__value_.__l.__data_);
        }
        if (v113.__r_.__value_.__r.__words[0])
        {
          siri::dialogengine::PatternSchema::GetSettings((siri::dialogengine::PatternSchema *)v113.__r_.__value_.__l.__data_, (uint64_t)&v117);
          std::string::size_type v39 = v117.__r_.__value_.__r.__words[0];
          if ((std::string::size_type *)v117.__r_.__value_.__l.__data_ == &v117.__r_.__value_.__r.__words[1]) {
            goto LABEL_266;
          }
          BOOL v40 = (_OWORD *)(v6 + 64);
          while (1)
          {
            uint64_t v41 = *(void *)(v39 + 56);
            if (*(char *)(v41 + 231) < 0) {
              std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(v41 + 208), *(void *)(v41 + 216));
            }
            else {
              std::string v118 = *(std::string *)(v41 + 208);
            }
            std::string::size_type v42 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
            if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v42 = v118.__r_.__value_.__l.__size_;
            }
            if (!v42) {
              break;
            }
            BOOL v43 = 0;
            if ((*((unsigned char *)&v118.__r_.__value_.__s + 23) & 0x80) != 0) {
              goto LABEL_80;
            }
LABEL_81:
            std::__split_buffer<std::string>::pointer v44 = (void *)(v39 + 32);
            if (v43)
            {
              if (*(char *)(v39 + 55) < 0) {
                std::__split_buffer<std::string>::pointer v44 = (void *)*v44;
              }
              if (*(char *)(v6 + 87) < 0)
              {
                std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(v6 + 64), *(void *)(v6 + 72));
              }
              else
              {
                *(_OWORD *)&v118.__r_.__value_.__l.__data_ = *v40;
                v118.__r_.__value_.__r.__words[2] = *(void *)(v6 + 80);
              }
              if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v48 = &v118;
              }
              else {
                int v48 = (std::string *)v118.__r_.__value_.__r.__words[0];
              }
              siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Setting '%s' in pattern '%s' has no default value", v38, v44, v48);
              goto LABEL_142;
            }
            siri::dialogengine::PatternFile::GetSetting(v6, (const void **)(v39 + 32), &v118);
            if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::size_type v49 = v118.__r_.__value_.__l.__size_;
              operator delete(v118.__r_.__value_.__l.__data_);
              if (v49)
              {
LABEL_88:
                std::__split_buffer<std::string>::pointer v46 = (void *)(v39 + 32);
                if (*(char *)(v39 + 55) < 0) {
                  std::__split_buffer<std::string>::pointer v46 = (void *)*v44;
                }
                if (*(char *)(v6 + 87) < 0)
                {
                  std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(v6 + 64), *(void *)(v6 + 72));
                }
                else
                {
                  *(_OWORD *)&v118.__r_.__value_.__l.__data_ = *v40;
                  v118.__r_.__value_.__r.__words[2] = *(void *)(v6 + 80);
                }
                int v52 = SHIBYTE(v118.__r_.__value_.__r.__words[2]);
                std::string::size_type v53 = v118.__r_.__value_.__r.__words[0];
                siri::dialogengine::PatternFile::GetSetting(v6, (const void **)(v39 + 32), &__str);
                if (v52 >= 0) {
                  std::string v55 = &v118;
                }
                else {
                  std::string v55 = (std::string *)v53;
                }
                long long v56 = &__str;
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  long long v56 = (std::string *)__str.__r_.__value_.__r.__words[0];
                }
                siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Not applying default value for setting '%s' in pattern '%s' because it already has a value: %s", v54, v46, v55, v56);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                goto LABEL_142;
              }
            }
            else if (*((unsigned char *)&v118.__r_.__value_.__s + 23))
            {
              goto LABEL_88;
            }
            uint64_t v50 = *(void *)(v39 + 56);
            if (!v50)
            {
              if (*(char *)(v39 + 55) < 0) {
                std::__split_buffer<std::string>::pointer v44 = (void *)*v44;
              }
              if (*(char *)(v113.__r_.__value_.__r.__words[0] + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)v113.__r_.__value_.__l.__data_, *(void *)(v113.__r_.__value_.__r.__words[0] + 8));
              }
              else
              {
                long long v57 = *(_OWORD *)v113.__r_.__value_.__l.__data_;
                v118.__r_.__value_.__r.__words[2] = *(void *)(v113.__r_.__value_.__r.__words[0] + 16);
                *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v57;
              }
              if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::__split_buffer<std::string>::pointer v61 = &v118;
              }
              else {
                std::__split_buffer<std::string>::pointer v61 = (std::string *)v118.__r_.__value_.__r.__words[0];
              }
              siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Found null setting for key '%s' in pattern schema '%s' (This should never happen!)", v45, v44, v61);
LABEL_142:
              if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
              {
                char v62 = (void *)v118.__r_.__value_.__r.__words[0];
                goto LABEL_144;
              }
              goto LABEL_145;
            }
            if (*(char *)(v50 + 151) < 0) {
              std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(v50 + 128), *(void *)(v50 + 136));
            }
            else {
              std::string v118 = *(std::string *)(v50 + 128);
            }
            if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::size_type v58 = v118.__r_.__value_.__l.__size_;
              operator delete(v118.__r_.__value_.__l.__data_);
              if (v58)
              {
LABEL_125:
                if (*(char *)(v39 + 55) < 0) {
                  std::__split_buffer<std::string>::pointer v44 = (void *)*v44;
                }
                if (*(char *)(v6 + 87) < 0)
                {
                  std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(v6 + 64), *(void *)(v6 + 72));
                }
                else
                {
                  *(_OWORD *)&v118.__r_.__value_.__l.__data_ = *v40;
                  v118.__r_.__value_.__r.__words[2] = *(void *)(v6 + 80);
                }
                if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::__split_buffer<std::string>::pointer v60 = &v118;
                }
                else {
                  std::__split_buffer<std::string>::pointer v60 = (std::string *)v118.__r_.__value_.__r.__words[0];
                }
                siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Not applying default value for setting '%s' in pattern '%s' because the setting is deprecated", v45, v44, v60);
                goto LABEL_142;
              }
            }
            else if (*((unsigned char *)&v118.__r_.__value_.__s + 23))
            {
              goto LABEL_125;
            }
            uint64_t v59 = *(void *)(v39 + 56);
            if (*(char *)(v59 + 231) < 0) {
              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v59 + 208), *(void *)(v59 + 216));
            }
            else {
              std::string __str = *(std::string *)(v59 + 208);
            }
            std::string::size_type v66 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            char v67 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v66 = __str.__r_.__value_.__l.__size_;
            }
            if (v66)
            {
              uint64_t v68 = (void *)(v39 + 32);
              if (*(char *)(v39 + 55) < 0) {
                uint64_t v68 = (void *)*v44;
              }
              if (*(char *)(v6 + 87) < 0)
              {
                std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(v6 + 64), *(void *)(v6 + 72));
                char v67 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              }
              else
              {
                *(_OWORD *)&v118.__r_.__value_.__l.__data_ = *v40;
                v118.__r_.__value_.__r.__words[2] = *(void *)(v6 + 80);
              }
              if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v71 = &v118;
              }
              else {
                uint64_t v71 = (std::string *)v118.__r_.__value_.__r.__words[0];
              }
              BOOL v72 = v67 < 0;
              std::__split_buffer<std::string>::pointer v73 = &__str;
              if (v72) {
                std::__split_buffer<std::string>::pointer v73 = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Applying default value for setting '%s' to pattern '%s': %s", v45, v68, v71, v73);
              if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v118.__r_.__value_.__l.__data_);
              }
              v118.__r_.__value_.__r.__words[0] = v39 + 32;
              v74 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v110, (const void **)(v39 + 32), (long long **)&v118);
              std::string::operator=((std::string *)(v74 + 7), &__str);
              goto LABEL_264;
            }
            uint64_t v69 = *(void *)(v39 + 56);
            if (*(char *)(v69 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)(v69 + 8), *(void *)(v69 + 16));
            }
            else
            {
              long long v70 = *(_OWORD *)(v69 + 8);
              v121.__r_.__value_.__r.__words[2] = *(void *)(v69 + 24);
              *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v70;
            }
            std::unordered_set<std::string>::unordered_set((uint64_t)&v118, (unsigned __int8 *)&v121, 1);
            if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v121.__r_.__value_.__l.__data_);
            }
            uint64_t v75 = *(void *)(v39 + 56);
            if (*(char *)(v75 + 359) < 0) {
              std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)(v75 + 336), *(void *)(v75 + 344));
            }
            else {
              std::string v121 = *(std::string *)(v75 + 336);
            }
            while (1)
            {
              std::string::size_type v76 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
              if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v76 = v121.__r_.__value_.__l.__size_;
              }
              if (!v76) {
                break;
              }
              if (std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>((uint64_t *)v118.__r_.__value_.__r.__words[2], (unsigned __int8 **)&v121))
              {
                if (*(char *)(v39 + 55) < 0) {
                  std::__split_buffer<std::string>::pointer v44 = (void *)*v44;
                }
                if (*(char *)(v113.__r_.__value_.__r.__words[0] + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)v113.__r_.__value_.__l.__data_, *(void *)(v113.__r_.__value_.__r.__words[0] + 8));
                }
                else
                {
                  long long v102 = *(_OWORD *)v113.__r_.__value_.__l.__data_;
                  v115.__r_.__value_.__r.__words[2] = *(void *)(v113.__r_.__value_.__r.__words[0] + 16);
                  *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v102;
                }
                int v103 = &v115;
                if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  int v103 = (std::string *)v115.__r_.__value_.__r.__words[0];
                }
                siri::dialogengine::Log::Error((siri::dialogengine::Log *)"The setting '%s' in pattern schema '%s' is part of a cycle of references between settings", v77, v44, v103);
                if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v115.__r_.__value_.__l.__data_);
                }
                break;
              }
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v118, (unsigned __int8 *)&v121, (uint64_t)&v121);
              siri::dialogengine::PatternFile::GetSetting(v6, (const void **)&v121.__r_.__value_.__l.__data_, &v115);
              std::string::size_type v79 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
              char v80 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
              if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v79 = v115.__r_.__value_.__l.__size_;
              }
              if (v79)
              {
                if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v81 = &v121;
                }
                else {
                  v81 = (std::string *)v121.__r_.__value_.__r.__words[0];
                }
                long long v82 = (void *)(v39 + 32);
                if (*(char *)(v39 + 55) < 0) {
                  long long v82 = (void *)*v44;
                }
                if (*(char *)(v6 + 87) < 0)
                {
                  std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)(v6 + 64), *(void *)(v6 + 72));
                  char v80 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
                }
                else
                {
                  *(_OWORD *)&v114.__r_.__value_.__l.__data_ = *v40;
                  v114.__r_.__value_.__r.__words[2] = *(void *)(v6 + 80);
                }
                std::string::size_type v88 = &v114;
                if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v88 = (std::string *)v114.__r_.__value_.__r.__words[0];
                }
                BOOL v72 = v80 < 0;
                char v89 = &v115;
                if (v72) {
                  char v89 = (std::string *)v115.__r_.__value_.__r.__words[0];
                }
                siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Applying the value of pattern setting '%s' to setting '%s' in pattern '%s': %s", v78, v81, v82, v88, v89);
                if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v114.__r_.__value_.__l.__data_);
                }
                v114.__r_.__value_.__r.__words[0] = v39 + 32;
                unint64_t v90 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v110, (const void **)(v39 + 32), (long long **)&v114);
                std::string::operator=((std::string *)(v90 + 7), &v115);
                int v91 = 5;
                goto LABEL_242;
              }
              std::string::size_type v83 = v113.__r_.__value_.__r.__words[0];
              uint64_t v84 = std::__tree<std::string>::find<std::string>(v113.__r_.__value_.__r.__words[0] + 120, (const void **)&v121.__r_.__value_.__l.__data_);
              if (v83 + 128 == v84)
              {
                uint64_t v86 = 0;
LABEL_206:
                long long v92 = (void *)(v39 + 32);
                if (*(char *)(v39 + 55) < 0) {
                  long long v92 = (void *)*v44;
                }
                if (*(char *)(v6 + 87) < 0)
                {
                  std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)(v6 + 64), *(void *)(v6 + 72));
                }
                else
                {
                  *(_OWORD *)&v114.__r_.__value_.__l.__data_ = *v40;
                  v114.__r_.__value_.__r.__words[2] = *(void *)(v6 + 80);
                }
                std::string::size_type v93 = &v114;
                if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v93 = (std::string *)v114.__r_.__value_.__r.__words[0];
                }
                char v94 = &v121;
                if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  char v94 = (std::string *)v121.__r_.__value_.__r.__words[0];
                }
                siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Not applying default value for setting '%s' in pattern '%s' because the reference setting '%s' does not exist", v85, v92, v93, v94);
                if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v114.__r_.__value_.__l.__data_);
                }
                goto LABEL_240;
              }
              uint64_t v87 = *(void *)(v84 + 56);
              uint64_t v86 = *(std::__shared_weak_count **)(v84 + 64);
              if (v86) {
                atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (!v87) {
                goto LABEL_206;
              }
              if (*(char *)(v87 + 231) < 0) {
                std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)(v87 + 208), *(void *)(v87 + 216));
              }
              else {
                std::string v114 = *(std::string *)(v87 + 208);
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string __str = v114;
              std::string::size_type v95 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
              char v96 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
              if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v95 = v114.__r_.__value_.__l.__size_;
              }
              if (!v95)
              {
                if (*(char *)(v87 + 359) < 0) {
                  std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)(v87 + 336), *(void *)(v87 + 344));
                }
                else {
                  std::string v114 = *(std::string *)(v87 + 336);
                }
                if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v121.__r_.__value_.__l.__data_);
                }
                int v91 = 0;
                std::string v121 = v114;
                if (!v86) {
                  goto LABEL_242;
                }
LABEL_241:
                std::__shared_weak_count::__release_shared[abi:ne180100](v86);
                goto LABEL_242;
              }
              if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v97 = &v121;
              }
              else {
                long long v97 = (std::string *)v121.__r_.__value_.__r.__words[0];
              }
              int v98 = (void *)(v39 + 32);
              if (*(char *)(v39 + 55) < 0) {
                int v98 = (void *)*v44;
              }
              if (*(char *)(v6 + 87) < 0)
              {
                std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)(v6 + 64), *(void *)(v6 + 72));
                char v96 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              }
              else
              {
                *(_OWORD *)&v114.__r_.__value_.__l.__data_ = *v40;
                v114.__r_.__value_.__r.__words[2] = *(void *)(v6 + 80);
              }
              std::string v99 = &v114;
              if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string v99 = (std::string *)v114.__r_.__value_.__r.__words[0];
              }
              BOOL v72 = v96 < 0;
              std::string::size_type v100 = &__str;
              if (v72) {
                std::string::size_type v100 = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Applying default value for setting '%s' to setting '%s' in pattern '%s': %s", v85, v97, v98, v99, v100);
              if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v114.__r_.__value_.__l.__data_);
              }
              v114.__r_.__value_.__r.__words[0] = v39 + 32;
              v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v110, (const void **)(v39 + 32), (long long **)&v114);
              std::string::operator=((std::string *)(v101 + 7), &__str);
LABEL_240:
              int v91 = 5;
              if (v86) {
                goto LABEL_241;
              }
LABEL_242:
              if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v115.__r_.__value_.__l.__data_);
                if (v91) {
                  break;
                }
              }
              else if (v91)
              {
                break;
              }
            }
            if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v121.__r_.__value_.__l.__data_);
            }
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v118);
LABEL_264:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            {
              char v62 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_144:
              operator delete(v62);
            }
LABEL_145:
            int v63 = *(std::string **)(v39 + 8);
            if (v63)
            {
              do
              {
                std::string::size_type v64 = v63;
                int v63 = (std::string *)v63->__r_.__value_.__r.__words[0];
              }
              while (v63);
            }
            else
            {
              do
              {
                std::string::size_type v64 = *(std::string **)(v39 + 16);
                BOOL v65 = v64->__r_.__value_.__r.__words[0] == v39;
                std::string::size_type v39 = (std::string::size_type)v64;
              }
              while (!v65);
            }
            std::string::size_type v39 = (std::string::size_type)v64;
            if (v64 == (std::string *)&v117.__r_.__value_.__r.__words[1])
            {
LABEL_266:
              std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)v117.__r_.__value_.__l.__size_);
              std::string::size_type size = (std::__shared_weak_count *)v111;
              goto LABEL_287;
            }
          }
          uint64_t v47 = *(void *)(v39 + 56);
          if (*(char *)(v47 + 359) < 0) {
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v47 + 336), *(void *)(v47 + 344));
          }
          else {
            std::string __str = *(std::string *)(v47 + 336);
          }
          std::string::size_type v51 = __str.__r_.__value_.__l.__size_;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v51 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          BOOL v43 = v51 == 0;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if ((*((unsigned char *)&v118.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_81;
          }
LABEL_80:
          operator delete(v118.__r_.__value_.__l.__data_);
          goto LABEL_81;
        }
        if (*(char *)(v6 + 135) < 0)
        {
          std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(v6 + 112), *(void *)(v6 + 120));
        }
        else
        {
          *(_OWORD *)&v118.__r_.__value_.__l.__data_ = *v36;
          v118.__r_.__value_.__r.__words[2] = *(void *)(v6 + 128);
        }
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v105 = &v118;
        }
        else {
          char v105 = (std::string *)v118.__r_.__value_.__r.__words[0];
        }
        if (*(char *)(v6 + 87) < 0) {
          std::string::__init_copy_ctor_external(&v117, *(const std::string::value_type **)(v6 + 64), *(void *)(v6 + 72));
        }
        else {
          std::string v117 = *(std::string *)(v6 + 64);
        }
        uint64_t v106 = &v117;
        if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v106 = (std::string *)v117.__r_.__value_.__r.__words[0];
        }
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to load schema '%s' for pattern '%s'", v37, v105, v106);
        if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v117.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v118.__r_.__value_.__l.__data_);
        }
LABEL_287:
        if (v113.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v113.__r_.__value_.__l.__size_);
        }
      }
      else
      {
        if (*(char *)(v6 + 87) < 0) {
          std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(v6 + 64), *(void *)(v6 + 72));
        }
        else {
          std::string v118 = *(std::string *)(v6 + 64);
        }
        long long v104 = &v118;
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v104 = (std::string *)v118.__r_.__value_.__r.__words[0];
        }
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't apply setting defaults to pattern '%s' because the given context is null", v34, v104);
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v118.__r_.__value_.__l.__data_);
        }
      }
      if (size) {
        std::__shared_weak_count::__release_shared[abi:ne180100](size);
      }
    }
    *a4 = v6;
    a4[1] = (uint64_t)size;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    if (size) {
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
    }
  }
}

void sub_1C60BB518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,std::__shared_weak_count *a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (*(char *)(v50 - 105) < 0) {
    operator delete(*(void **)(v50 - 128));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v50 - 176);
  if (a50 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(void **)(v50 - 200));
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternFile::LoadFromId(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  long long v20 = 0uLL;
  std::string::size_type v21 = 0;
  if (a1)
  {
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, (const siri::dialogengine::RequestInfo *)(a1 + 8));
    long long v18 = 0uLL;
    std::string::size_type v19 = 0;
    std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v18, __p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p[0].__r_.__value_.__r.__words[2] - __p[0].__r_.__value_.__l.__size_) >> 5));
    std::vector<siri::dialogengine::UpdatableDir>::__vdeallocate((void **)&v20);
    long long v20 = v18;
    std::string::size_type v21 = v19;
    std::string::size_type v19 = 0;
    long long v18 = 0uLL;
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
    std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p[0].__r_.__value_.__l.__data_);
  }
  int v8 = *(char *)(a2 + 23);
  uint64_t v9 = *(void *)a2;
  siri::dialogengine::GetBaseDir((long long **)&v20, __p);
  if (v8 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = v9;
  }
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v12 = __p;
  }
  else {
    long long v12 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Attempting to load a pattern file from Id '%s' and template dir '%s'", v10, v11, v12);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  siri::dialogengine::FindPatternFile((long long **)&v20, a2, (uint64_t)__p);
  std::string::size_type size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
  }
  if (size)
  {
    siri::dialogengine::PatternFile::LoadFromPath(a1, __p, a3, a4);
  }
  else
  {
    std::operator+<char>();
    std::string::size_type v14 = std::string::append(&v16, "'");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v19 = v14->__r_.__value_.__r.__words[2];
    long long v18 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v18, 3u);
    if (SHIBYTE(v19) < 0) {
      operator delete((void *)v18);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    *a4 = 0;
    a4[1] = 0;
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1C60BBA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 - 121) < 0) {
    operator delete(*(void **)(v23 - 144));
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  a18 = (void *)(v23 - 112);
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternFile::Save(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    BOOL v4 = (std::__shared_weak_count *)a1[1];
    v8[0] = *a1;
    v8[1] = (uint64_t)v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = siri::dialogengine::WritePatternBinaryFile(v8, a2, a3);
  }
  else
  {
    BOOL v4 = (std::__shared_weak_count *)a1[1];
    v9[0] = *a1;
    v9[1] = (uint64_t)v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = siri::dialogengine::WritePatternXmlFile(v9, a2, a3);
  }
  uint64_t v6 = v5;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v6;
}

void sub_1C60BBB60(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::PatternFile::Save(uint64_t *a1, std::string *a2)
{
  int HasPatternExtension = siri::dialogengine::HasPatternExtension(a2, 0);
  uint64_t v5 = *a1;
  if (HasPatternExtension)
  {
    uint64_t v6 = (std::__shared_weak_count *)a1[1];
    v11[0] = v5;
    v11[1] = (uint64_t)v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = siri::dialogengine::WritePatternXmlFile(v11, a2);
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)a1[1];
    v10[0] = v5;
    v10[1] = (uint64_t)v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = siri::dialogengine::WritePatternBinaryFile(v10, a2);
  }
  uint64_t v8 = v7;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v8;
}

void sub_1C60BBC1C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogWeight::toString(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::FormatWeight(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredNumberParameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  BOOL v4 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v4)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(&__p, "units");
      OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
      uint64_t v6 = OptionalStringParameter;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v6)
        {
LABEL_5:
          if (v6[95] < 0) {
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
          }
          else {
            std::string __p = *(std::string *)(v6 + 3);
          }
LABEL_12:
          siri::dialogengine::ParseUnitLabel<siri::dialogengine::Weight>();
        }
      }
      else if (OptionalStringParameter)
      {
        goto LABEL_5;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      goto LABEL_12;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C60BC3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a70 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(&a43);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogWeight::abbreviated(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogWeight::approximate(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogWeight::compactDecimalLong(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogWeight::compactDecimalShort(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogWeight::units(siri::dialogengine::DialogWeight *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60BC6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v21, 0x10B3C40D3060B95);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogWeight::value(siri::dialogengine::DialogWeight *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v6, "value");
  RequiredNumberParameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&v6, (uint64_t)a2);
  uint64_t v5 = RequiredNumberParameter;
  if (v7 < 0)
  {
    operator delete(v6);
    if (v5) {
LABEL_3:
    }
      siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Weight>();
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C60BC850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v24, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetArrayElementType(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "[]");
  BOOL v4 = siri::dialogengine::StringEndsWith((std::string *)a1, (unsigned __int8 *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if (v4)
  {
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    std::string::basic_string(a2, (const std::string *)a1, 0, v5 - 2, (std::allocator<char> *)__p);
  }
  else if ((v5 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

void sub_1C60BC9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::SetArrayElementType(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "[]");
  BOOL v4 = siri::dialogengine::StringEndsWith((std::string *)a1, (unsigned __int8 *)__p);
  BOOL v5 = v4;
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v5)
    {
LABEL_3:
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)a2 = *(_OWORD *)a1;
        *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *(void *)(a1 + 16);
      }
      return;
    }
  }
  else if (v4)
  {
    goto LABEL_3;
  }
  if (*(char *)(a1 + 23) >= 0) {
    size_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v6 = *(void *)(a1 + 8);
  }
  std::string::basic_string[abi:ne180100](a2, v6 + 2);
  if (*(char *)(a2 + 23) < 0) {
    a2 = *(void *)a2;
  }
  if (v6)
  {
    if (*(char *)(a1 + 23) >= 0) {
      char v7 = (const void *)a1;
    }
    else {
      char v7 = *(const void **)a1;
    }
    memmove((void *)a2, v7, v6);
  }
  strcpy((char *)(a2 + v6), "[]");
}

void sub_1C60BCAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetLiteralType(std::string *a1@<X0>, void *a2@<X8>)
{
  siri::dialogengine::StringTrim(" \t\n\r", a1, &v14);
  std::string::basic_string[abi:ne180100]<0>(&v13, "'");
  if (siri::dialogengine::StringStartsWith(a1, (unsigned __int8 *)&v13))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "'");
    BOOL v4 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if (v4) {
      goto LABEL_7;
    }
  }
  else if (v4)
  {
LABEL_7:
    BOOL v5 = &siri::dialogengine::TYPE_STRING;
LABEL_40:
    std::string::basic_string[abi:ne180100]<0>(a2, *v5);
    goto LABEL_41;
  }
  siri::dialogengine::StringToLower((uint64_t)&v14, (uint64_t)&v13);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  std::string v14 = v13;
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v13.__r_.__value_.__r.__words[2]) != 4)
    {
      if (HIBYTE(v13.__r_.__value_.__r.__words[2]) != 5) {
        goto LABEL_22;
      }
      size_t v6 = &v14;
      goto LABEL_18;
    }
    int data = (int)v14.__r_.__value_.__l.__data_;
LABEL_38:
    if (data != 1702195828) {
      goto LABEL_22;
    }
LABEL_39:
    BOOL v5 = &siri::dialogengine::TYPE_BOOLEAN;
    goto LABEL_40;
  }
  if (v14.__r_.__value_.__l.__size_ == 4)
  {
    int data = *(_DWORD *)v14.__r_.__value_.__l.__data_;
    goto LABEL_38;
  }
  if (v14.__r_.__value_.__l.__size_ != 5) {
    goto LABEL_22;
  }
  size_t v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
LABEL_18:
  int v7 = (int)v6->__r_.__value_.__l.__data_;
  int v8 = v6->__r_.__value_.__s.__data_[4];
  if (v7 == 1936482662 && v8 == 101) {
    goto LABEL_39;
  }
LABEL_22:
  if (siri::dialogengine::IsStringANumber(&v14))
  {
    BOOL v5 = &siri::dialogengine::TYPE_NUMBER;
    goto LABEL_40;
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "[");
  if (siri::dialogengine::StringStartsWith(a1, (unsigned __int8 *)&v13))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "]");
    BOOL v10 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    BOOL v10 = 0;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if (v10) {
      goto LABEL_31;
    }
LABEL_36:
    BOOL v5 = (char **)&siri::dialogengine::TYPE_UNKNOWN;
    goto LABEL_40;
  }
  if (!v10) {
    goto LABEL_36;
  }
LABEL_31:
  siri::dialogengine::StringTrim("[]", &v14, &__p);
  siri::dialogengine::ParseStringList((uint64_t *)&__p, 0, (uint64_t *)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v13.__r_.__value_.__r.__words[0] == v13.__r_.__value_.__l.__size_) {
    std::string::basic_string[abi:ne180100]<0>(&__p, siri::dialogengine::TYPE_STRING);
  }
  else {
    siri::dialogengine::GetLiteralType(&__p);
  }
  siri::dialogengine::SetArrayElementType((uint64_t)&__p, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_41:
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1C60BCD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::ResolveLiteral(std::string *a1@<X0>, void *a2@<X8>)
{
  siri::dialogengine::StringTrim(" \t\n\r", a1, &v15);
  std::string::basic_string[abi:ne180100]<0>(&v14, "'");
  if (siri::dialogengine::StringStartsWith(a1, (unsigned __int8 *)&v14))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "'");
    BOOL v4 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if (v4) {
LABEL_7:
    }
      operator new();
  }
  else if (v4)
  {
    goto LABEL_7;
  }
  siri::dialogengine::StringToLower((uint64_t)&v15, (uint64_t)&v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  std::string v15 = v14;
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v14.__r_.__value_.__r.__words[2]) != 4)
    {
      if (HIBYTE(v14.__r_.__value_.__r.__words[2]) != 5) {
        goto LABEL_22;
      }
      BOOL v5 = &v15;
      goto LABEL_18;
    }
    int data = (int)v15.__r_.__value_.__l.__data_;
LABEL_33:
    if (data != 1702195828) {
      goto LABEL_22;
    }
LABEL_34:
    operator new();
  }
  if (v15.__r_.__value_.__l.__size_ == 4)
  {
    int data = *(_DWORD *)v15.__r_.__value_.__l.__data_;
    goto LABEL_33;
  }
  if (v15.__r_.__value_.__l.__size_ != 5) {
    goto LABEL_22;
  }
  BOOL v5 = (std::string *)v15.__r_.__value_.__r.__words[0];
LABEL_18:
  int v6 = (int)v5->__r_.__value_.__l.__data_;
  int v7 = v5->__r_.__value_.__s.__data_[4];
  if (v6 == 1936482662 && v7 == 101) {
    goto LABEL_34;
  }
LABEL_22:
  char v11 = 1;
  siri::dialogengine::StringToDouble(&v15, &v11);
  if (v11) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, "[");
  if (siri::dialogengine::StringStartsWith(a1, (unsigned __int8 *)&v14))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "]");
    BOOL v9 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v9 = 0;
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if (v9) {
LABEL_31:
    }
      operator new();
  }
  else if (v9)
  {
    goto LABEL_31;
  }
  *a2 = 0;
  a2[1] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1C60BD3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::IsPrimitiveType(const void **a1)
{
  uint64_t v1 = a1;
  v8[3] = *MEMORY[0x1E4F143B8];
  {
    uint64_t v1 = a1;
    if (v4)
    {
      std::string::basic_string[abi:ne180100]<0>(v6, siri::dialogengine::TYPE_STRING);
      std::string::basic_string[abi:ne180100]<0>(v7, siri::dialogengine::TYPE_NUMBER);
      std::string::basic_string[abi:ne180100]<0>(v8, siri::dialogengine::TYPE_BOOLEAN);
      std::set<std::string>::set[abi:ne180100]((uint64_t)&siri::dialogengine::IsPrimitiveType(std::string const&)::sPrimitiveTypes, v6, 3);
      for (uint64_t i = 0; i != -9; i -= 3)
      {
        if (SHIBYTE(v8[i + 2]) < 0) {
          operator delete((void *)v8[i]);
        }
      }
      __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &siri::dialogengine::IsPrimitiveType(std::string const&)::sPrimitiveTypes, &dword_1C5C1E000);
      uint64_t v1 = a1;
    }
  }
  return std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::IsPrimitiveType(std::string const&)::sPrimitiveTypes, v1) != (void)&unk_1EA3D7C48;
}

void sub_1C60BD75C(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 71) < 0) {
      operator delete(*(void **)(v1 + v3 + 48));
    }
    v3 -= 24;
    if (v3 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

BOOL siri::dialogengine::IsArrayType(std::string *a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "[]");
  BOOL v2 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C60BD82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::IsObjectType(std::string *a1)
{
  return !siri::dialogengine::IsPrimitiveType((const void **)&a1->__r_.__value_.__l.__data_)
      && !siri::dialogengine::IsArrayType(a1);
}

BOOL siri::dialogengine::IsValidVariableName(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (!v1) {
    return 0;
  }
  uint64_t v3 = v2 >= 0 ? (unsigned __int8 *)a1 : *(unsigned __int8 **)a1;
  int v4 = *v3;
  if ((v4 - 97) >= 0x1A && v4 != 95 && (v4 - 65) > 0x19) {
    return 0;
  }
  int v6 = v3 + 1;
  uint64_t v7 = v1 - 1;
  if (v1 != 1)
  {
    do
    {
      int v8 = *v6;
      if ((v8 - 97) >= 0x1A && v8 != 45)
      {
        BOOL v9 = v8 != 95 && (v8 - 65) >= 0x1A;
        if (v9 && (v8 - 48) > 9) {
          break;
        }
      }
      ++v6;
      --v7;
    }
    while (v7);
  }
  if (&v3[v1] != v6) {
    return 0;
  }
  siri::dialogengine::GetLiteralType((std::string *)a1, __s1);
  char v11 = (const void *)strlen(siri::dialogengine::TYPE_UNKNOWN);
  if (((char)v16 & 0x80000000) == 0)
  {
    if (v11 == (const void *)v16) {
      return memcmp(__s1, siri::dialogengine::TYPE_UNKNOWN, (size_t)v11) == 0;
    }
    return 0;
  }
  if (v11 == __s1[1])
  {
    if (v11 == (const void *)-1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    std::string v14 = (void *)__s1[0];
    BOOL v12 = memcmp(__s1[0], siri::dialogengine::TYPE_UNKNOWN, (size_t)v11) == 0;
  }
  else
  {
    BOOL v12 = 0;
    std::string v14 = (void *)__s1[0];
  }
  operator delete(v14);
  return v12;
}

BOOL siri::dialogengine::IsValidCompoundVariableName(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (!v1) {
    return 0;
  }
  siri::dialogengine::StringSplit((unsigned __int8 *)a1, ".", &v9);
  uint64_t v2 = v10;
  if (v9 == v10)
  {
    BOOL IsValidVariableName = 1;
  }
  else
  {
    uint64_t v3 = v9 + 24;
    do
    {
      if (*(char *)(v3 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v3 - 24), *(void *)(v3 - 16));
      }
      else
      {
        long long v4 = *(_OWORD *)(v3 - 24);
        __p.__r_.__value_.__r.__words[2] = *(void *)(v3 - 8);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
      }
      BOOL IsValidVariableName = siri::dialogengine::IsValidVariableName((uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      BOOL v6 = v3 != v2 && IsValidVariableName;
      v3 += 24;
    }
    while (v6);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return IsValidVariableName;
}

void sub_1C60BDAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::IsValidTypeName(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  BOOL v2 = v1 < 0;
  uint64_t v3 = *(unsigned char **)a1;
  if (v1 >= 0) {
    uint64_t v3 = (unsigned char *)a1;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if (v2) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (!v4) {
    return 0;
  }
  if ((*v3 & 0xDFu) - 91 < 0xFFFFFFE6 || v4 == 1) {
    return 0;
  }
  uint64_t v7 = 0;
  int v8 = v3 + 1;
  while (1)
  {
    int v9 = v8[v7];
    if ((v9 - 97) >= 0x1A && (v9 - 45) >= 2)
    {
      BOOL v10 = v9 != 95 && (v9 - 65) >= 0x1A;
      if (v10 && (v9 - 48) > 9) {
        break;
      }
    }
    if (v4 - 1 == ++v7)
    {
      uint64_t v7 = v4 - 1;
      BOOL v12 = &v3[v4];
      goto LABEL_24;
    }
  }
  BOOL v12 = &v8[v7];
LABEL_24:
  BOOL result = 0;
  if (v7 && &v3[v4] == v12)
  {
    uint64_t v13 = 0;
    do
    {
      int v14 = *v3++;
      if (v14 == 46) {
        ++v13;
      }
      --v4;
    }
    while (v4);
    return v13 != 0;
  }
  return result;
}

BOOL siri::dialogengine::IsBuiltinType(std::string *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "dialog.");
  if (siri::dialogengine::StringStartsWith(a1, (unsigned __int8 *)v6))
  {
    BOOL v2 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "sirikit.");
    BOOL v2 = siri::dialogengine::StringStartsWith(a1, (unsigned __int8 *)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  return v2;
}

void sub_1C60BDC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::IsValidType(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (!v2) {
    return 0;
  }
  siri::dialogengine::GetArrayElementType(a2, &__p);
  if (siri::dialogengine::IsPrimitiveType((const void **)&__p.__r_.__value_.__l.__data_))
  {
    BOOL v4 = 1;
  }
  else
  {
    siri::dialogengine::ObjectRegistry::GetObject(a1, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, &v6);
    BOOL v4 = v6 != 0;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1C60BDD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::IsPropertyValidForType(BOOL a1, unsigned __int8 *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "gender");
    std::string::basic_string[abi:ne180100]<0>(&v14, "dialog.String");
    std::string::basic_string[abi:ne180100]<0>(v16, "dialog.String[]");
    std::string::basic_string[abi:ne180100]<0>(v17, "dialog.Pronoun");
    std::set<std::string>::set[abi:ne180100]((uint64_t)__p, (const void **)&v14, 3);
    std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100]<true,0>(&v18, (long long *)v12, (const void ***)__p);
    std::map<std::string,std::set<std::string>>::map[abi:ne180100]((uint64_t)&siri::dialogengine::IsPropertyValidForType(siri::dialogengine::Context *,std::string const&)::validTypesForProperties, (const void **)&v18.__r_.__value_.__l.__data_, 1);
    std::pair<std::string const,std::set<std::string> const>::~pair((uint64_t)&v18);
    std::__tree<std::string>::destroy((uint64_t)__p, (char *)__p[1]);
    for (uint64_t i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v17[i + 2]) < 0) {
        operator delete((void *)v17[i]);
      }
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    __cxa_atexit((void (*)(void *))std::map<std::string,std::set<std::string>>::~map[abi:ne180100], &siri::dialogengine::IsPropertyValidForType(siri::dialogengine::Context *,std::string const&)::validTypesForProperties, &dword_1C5C1E000);
  }
  siri::dialogengine::StringSplit(a2, ".", &v14);
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - v14) >> 3) >= 2)
  {
    if (*((char *)v15 - 1) < 0)
    {
      std::string::__init_copy_ctor_external(&v18, (const std::string::value_type *)*(v15 - 3), (std::string::size_type)*(v15 - 2));
    }
    else
    {
      long long v4 = *(_OWORD *)(v15 - 3);
      v18.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v15 - 1);
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v4;
    }
    char v5 = (char *)std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::IsPropertyValidForType(siri::dialogengine::Context *,std::string const&)::validTypesForProperties, (const void **)&v18.__r_.__value_.__l.__data_);
    if (v5 == (char *)&unk_1EA3DA378)
    {
      a1 = 1;
    }
    else if (a1)
    {
      uint64_t v6 = v5;
      char v7 = v15 - 3;
      if (*((char *)v15 - 1) < 0) {
        operator delete(*v7);
      }
      std::string v15 = v7;
      std::string::basic_string[abi:ne180100]<0>(__p, ".");
      siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)v12, v14, (uint64_t)v15, (uint64_t)__p);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      siri::dialogengine::ResolveType(0, a1, (uint64_t)v12, 1, (uint64_t)__p);
      a1 = v6 + 64 != (char *)std::__tree<std::string>::find<std::string>((uint64_t)(v6 + 56), (const void **)__p);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    a1 = 1;
  }
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  return a1;
}

void sub_1C60BE030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char *a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::pair<std::string const,std::set<std::string> const>::~pair(v22 - 96);
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  uint64_t v24 = 0;
  while (1)
  {
    if (*(&a22 + v24 + 71) < 0) {
      operator delete(*(void **)(&a22 + v24 + 48));
    }
    v24 -= 24;
    if (v24 == -72)
    {
      if (a21 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
}

std::string *std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, const void ***a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], a3);
  return this;
}

void sub_1C60BE1B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::set<std::string>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<std::string>> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1C60BE240(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ResolveType(void **this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (this && *((unsigned char *)this + 240))
  {
    siri::dialogengine::ObjectProperty::~ObjectProperty(this);
    *((unsigned char *)this + 240) = 0;
  }
  if (a2)
  {
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a3 + 8);
    }
    if (v10)
    {
      siri::dialogengine::GetLiteralType((std::string *)a3, &v38);
      size_t v11 = strlen(siri::dialogengine::TYPE_UNKNOWN);
      size_t v12 = v11;
      if (SHIBYTE(v39) < 0)
      {
        if (v11 == *((void *)&v38 + 1))
        {
          if (v11 == -1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          char v13 = (long long *)v38;
LABEL_17:
          if (memcmp(v13, siri::dialogengine::TYPE_UNKNOWN, v12)) {
            goto LABEL_18;
          }
          uint64_t v17 = *(void *)(a2 + 504);
          unsigned __int8 v16 = *(std::__shared_weak_count **)(a2 + 512);
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!v17)
          {
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"No file loaded for context - cannot determine type.", v15);
            std::string::basic_string[abi:ne180100]<0>((void *)a5, siri::dialogengine::TYPE_UNKNOWN);
LABEL_77:
            if (v16) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
            if (SHIBYTE(v39) < 0) {
              operator delete((void *)v38);
            }
            return;
          }
          siri::dialogengine::StringSplit((unsigned __int8 *)a3, ".", &v36);
          if (v36 == (const std::string *)v37)
          {
            std::string::basic_string[abi:ne180100]<0>((void *)a5, siri::dialogengine::TYPE_UNKNOWN);
LABEL_76:
            v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
            goto LABEL_77;
          }
          siri::dialogengine::ParseVariableReference(&v32, v36);
          std::string::basic_string[abi:ne180100]<0>((void *)a5, siri::dialogengine::TYPE_UNKNOWN);
          uint64_t Parameter = siri::dialogengine::File::GetParameter(v17, (unsigned __int8 **)&v32);
          uint64_t v19 = (siri::dialogengine::ObjectProperty *)Parameter;
          if (Parameter)
          {
            if (*(char *)(Parameter + 55) < 0) {
              std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(Parameter + 32), *(void *)(Parameter + 40));
            }
            else {
              std::string v26 = *(std::string *)(Parameter + 32);
            }
            if (*(char *)(a5 + 23) < 0) {
              operator delete(*(void **)a5);
            }
            *(std::string *)a5 = v26;
            if (this) {
              std::optional<siri::dialogengine::ObjectProperty>::operator=[abi:ne180100]<siri::dialogengine::Parameter const&,void>((siri::dialogengine::ObjectProperty *)this, v19);
            }
          }
          size_t v20 = strlen(siri::dialogengine::TYPE_UNKNOWN);
          size_t v21 = v20;
          if (*(char *)(a5 + 23) < 0)
          {
            if (v20 != *(void *)(a5 + 8))
            {
LABEL_41:
              if (v33)
              {
                siri::dialogengine::GetArrayElementType(a5, &v26);
                if (*(char *)(a5 + 23) < 0) {
                  operator delete(*(void **)a5);
                }
                *(std::string *)a5 = v26;
              }
              memset(&v31, 0, sizeof(v31));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v31, (long long *)&v36[1], v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)&v36[1]) >> 3));
              siri::dialogengine::ResolveTypeRecursive(&v26, (const char *)a2, a5, (uint64_t)&v31, (uint64_t)this);
              if (*(char *)(a5 + 23) < 0) {
                operator delete(*(void **)a5);
              }
              *(std::string *)a5 = v26;
              *((unsigned char *)&v26.__r_.__value_.__s + 23) = 0;
              v26.__r_.__value_.__s.__data_[0] = 0;
              long long v29 = &v31;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
              if (a4 == 1 && siri::dialogengine::IsObjectType((std::string *)a5))
              {
                siri::dialogengine::ObjectRegistry::GetObject(a2, (const std::string::value_type **)a5, (uint64_t *)&v29);
                p_int data = (void **)&v29->__r_.__value_.__l.__data_;
                if (v29)
                {
                  std::string::basic_string[abi:ne180100]<0>(&v31, (char *)siri::dialogengine::TO_STRING);
                  siri::dialogengine::ObjectSchema::GetProperty((uint64_t)p_data, (const char *)a2, (const void **)&v31.__r_.__value_.__l.__data_, 0, (siri::dialogengine::ObjectProperty *)&v26);
                  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v31.__r_.__value_.__l.__data_);
                  }
                  if (v28)
                  {
                    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external(&v31, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string v31 = v27;
                    }
                    if (*(char *)(a5 + 23) < 0) {
                      operator delete(*(void **)a5);
                    }
                    *(std::string *)a5 = v31;
                    if (this) {
                      std::optional<siri::dialogengine::ObjectProperty>::operator=[abi:ne180100]<siri::dialogengine::Parameter const&,void>((siri::dialogengine::ObjectProperty *)this, (siri::dialogengine::ObjectProperty *)&v26);
                    }
                    if (v28) {
                      siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&v26.__r_.__value_.__l.__data_);
                    }
                  }
                }
                if (v30) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
                }
              }
              if (v35 < 0) {
                operator delete(v34);
              }
              if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v32.__r_.__value_.__l.__data_);
              }
              goto LABEL_76;
            }
            if (v20 == -1) {
              std::string::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v22 = *(const void **)a5;
          }
          else
          {
            uint64_t v22 = (const void *)a5;
            if (v21 != *(unsigned __int8 *)(a5 + 23)) {
              goto LABEL_41;
            }
          }
          if (!memcmp(v22, siri::dialogengine::TYPE_UNKNOWN, v21))
          {
            Globaluint64_t Parameter = siri::dialogengine::Context::GetGlobalParameter(a2, (const void **)&v32.__r_.__value_.__l.__data_);
            if (GlobalParameter)
            {
              uint64_t v25 = (siri::dialogengine::ObjectProperty *)GlobalParameter;
              if (*(char *)(GlobalParameter + 55) < 0) {
                std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(GlobalParameter + 32), *(void *)(GlobalParameter + 40));
              }
              else {
                std::string v26 = *(std::string *)(GlobalParameter + 32);
              }
              if (*(char *)(a5 + 23) < 0) {
                operator delete(*(void **)a5);
              }
              *(std::string *)a5 = v26;
              if (this) {
                std::optional<siri::dialogengine::ObjectProperty>::operator=[abi:ne180100]<siri::dialogengine::Parameter const&,void>((siri::dialogengine::ObjectProperty *)this, v25);
              }
            }
          }
          goto LABEL_41;
        }
      }
      else if (v11 == HIBYTE(v39))
      {
        char v13 = &v38;
        goto LABEL_17;
      }
LABEL_18:
      *(_OWORD *)a5 = v38;
      *(void *)(a5 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v39;
      return;
    }
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"ResolveType sanity check failed", (const char *)a3);
  uint64_t v14 = (char *)siri::dialogengine::TYPE_UNKNOWN;
  std::string::basic_string[abi:ne180100]<0>((void *)a5, v14);
}

void sub_1C60BE740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a39) {
    siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&a9);
  }
  BOOL v43 = *(std::__shared_weak_count **)(v41 - 216);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (*(char *)(v40 + 23) < 0) {
    operator delete(*(void **)v40);
  }
  siri::dialogengine::VariableReference::~VariableReference((void **)(v41 - 184));
  a9 = v41 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (*(char *)(v41 - 81) < 0) {
    operator delete(*(void **)(v41 - 104));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseVariableReference(std::string *a1, const std::string *a2)
{
  char v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v4 >= 0) {
    int64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = a2->__r_.__value_.__l.__size_;
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (size >= 1)
  {
    char v7 = (char *)v6 + size;
    int v8 = (std::string *)v6;
    do
    {
      int v9 = (char *)memchr(v8, 91, size);
      if (!v9) {
        break;
      }
      if (*v9 == 91)
      {
        if (v9 == v7) {
          break;
        }
        std::string::size_type v10 = v9 - (char *)v6;
        if (v10 == -1) {
          break;
        }
        std::string::basic_string(&v13, a2, 0, v10, (std::allocator<char> *)&__p);
        siri::dialogengine::StringTrim(" \t\n\r", &v13, &v14);
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v13.__r_.__value_.__l.__data_);
        }
        std::string::basic_string(&__p, a2, v10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v15);
        siri::dialogengine::StringTrim("[]", &__p, &v13);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(a1, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
        }
        else {
          *a1 = v14;
        }
        a1[1].__r_.__value_.__s.__data_[0] = 1;
        size_t v11 = (std::string *)((char *)a1 + 32);
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v11, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
          if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v13.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
          a1[2].__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
        }
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v14.__r_.__value_.__l.__data_);
        }
        return;
      }
      int v8 = (std::string *)(v9 + 1);
      int64_t size = v7 - (char *)v8;
    }
    while (v7 - (char *)v8 >= 1);
  }
  siri::dialogengine::StringTrim(" \t\n\r", a2, a1);
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&a1[1].__r_.__value_.__l.__size_, "");
}

void sub_1C60BE9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 + 23) < 0) {
    operator delete(*(void **)v26);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

siri::dialogengine::ObjectProperty *std::optional<siri::dialogengine::ObjectProperty>::operator=[abi:ne180100]<siri::dialogengine::Parameter const&,void>(siri::dialogengine::ObjectProperty *this, siri::dialogengine::ObjectProperty *a2)
{
  if (*((unsigned char *)this + 240))
  {
    std::string::operator=((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
    std::string::operator=((std::string *)((char *)this + 32), (const std::string *)((char *)a2 + 32));
    std::string::operator=((std::string *)((char *)this + 56), (const std::string *)((char *)a2 + 56));
    std::string::operator=((std::string *)((char *)this + 80), (const std::string *)((char *)a2 + 80));
    std::string::operator=((std::string *)((char *)this + 104), (const std::string *)((char *)a2 + 104));
    std::string::operator=((std::string *)((char *)this + 128), (const std::string *)((char *)a2 + 128));
    char v4 = *((unsigned char *)a2 + 154);
    *((_WORD *)this + 76) = *((_WORD *)a2 + 76);
    *((unsigned char *)this + 154) = v4;
    std::string::operator=((std::string *)((char *)this + 160), (const std::string *)((char *)a2 + 160));
    std::string::operator=((std::string *)((char *)this + 184), (const std::string *)((char *)a2 + 184));
    std::string::operator=((std::string *)((char *)this + 208), (const std::string *)((char *)a2 + 208));
    *((_WORD *)this + 1google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *((_WORD *)a2 + 116);
  }
  else
  {
    siri::dialogengine::ObjectProperty::ObjectProperty(this, a2);
    *((unsigned char *)this + 240) = 1;
  }
  return this;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    BOOL result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1C60BEB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ResolveTypeRecursive(std::string *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)a4 == *(void *)(a4 + 8))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      uint64_t v10 = *(const std::string::value_type **)a3;
      std::string::size_type v11 = *(void *)(a3 + 8);
      std::string::__init_copy_ctor_external(a1, v10, v11);
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      a1->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
    }
  }
  else
  {
    if (a5 && *(unsigned char *)(a5 + 240))
    {
      siri::dialogengine::ObjectProperty::~ObjectProperty((void **)a5);
      *(unsigned char *)(a5 + 240) = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v27, "");
    if (siri::dialogengine::IsArrayType((std::string *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(&v26, (char *)siri::dialogengine::TYPE_ARRAY);
    }
    else if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      std::string v26 = *(std::string *)a3;
    }
    siri::dialogengine::ObjectRegistry::GetObject((uint64_t)a2, (const std::string::value_type **)&v26.__r_.__value_.__l.__data_, &v24);
    uint64_t v12 = v24;
    if (v24)
    {
      siri::dialogengine::ParseVariableReference(&v20, *(const std::string **)a4);
      siri::dialogengine::ObjectSchema::GetProperty(v12, a2, (const void **)&v20.__r_.__value_.__l.__data_, 0, (siri::dialogengine::ObjectProperty *)&v17);
      if (v19)
      {
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v16, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
        }
        else {
          std::string v16 = v18;
        }
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        std::string v27 = v16;
        if (v21)
        {
          siri::dialogengine::GetArrayElementType((uint64_t)&v27, &v16);
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v27.__r_.__value_.__l.__data_);
          }
          std::string v27 = v16;
        }
        if (a5) {
          std::__optional_storage_base<siri::dialogengine::ObjectProperty,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<siri::dialogengine::ObjectProperty,false> const&>((siri::dialogengine::ObjectProperty *)a5, (siri::dialogengine::ObjectProperty *)&v17);
        }
        if (v19) {
          siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&v17.__r_.__value_.__l.__data_);
        }
      }
      if (v23 < 0) {
        operator delete(v22);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
    }
    std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v27.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::string v14 = *(long long **)(a4 + 8);
      char v15 = (long long *)(*(void *)a4 + 24);
      memset(&v17, 0, sizeof(v17));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v17, v15, v14, 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v15) >> 3));
      siri::dialogengine::ResolveTypeRecursive(a1, a2, &v27, &v17, a5);
      v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(a1, siri::dialogengine::TYPE_UNKNOWN);
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C60BEE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a43) {
    siri::dialogengine::ObjectProperty::~ObjectProperty(&a13);
  }
  siri::dialogengine::VariableReference::~VariableReference((void **)(v43 - 184));
  uint64_t v45 = *(std::__shared_weak_count **)(v43 - 120);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (*(char *)(v43 - 89) < 0) {
    operator delete(*(void **)(v43 - 112));
  }
  if (*(char *)(v43 - 57) < 0) {
    operator delete(*(void **)(v43 - 80));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableReference::~VariableReference(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t std::map<std::string,std::set<std::string>>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t siri::dialogengine::IsPropertyValidForLocale(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  {
    uint64_t v2 = a2;
    if (v9)
    {
      std::string::basic_string[abi:ne180100]<0>(v17, siri::dialogengine::TYPE_STRING);
      std::string::basic_string[abi:ne180100]<0>(&v21, "count");
      std::string::basic_string[abi:ne180100]<0>(v23, "number");
      std::string::basic_string[abi:ne180100]<0>(v24, "gender");
      std::string::basic_string[abi:ne180100]<0>(v25, "animacy");
      std::string::basic_string[abi:ne180100]<0>(v26, "case");
      std::string::basic_string[abi:ne180100]<0>(v27, "definiteness");
      std::string::basic_string[abi:ne180100]<0>(v28, "pos");
      std::set<std::string>::set[abi:ne180100]((uint64_t)&__p, (const void **)&v21, 7);
      std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100]<true,0>(v29, (long long *)v17, (const void ***)&__p);
      std::string::basic_string[abi:ne180100]<0>(&v15, "dialog.Array");
      std::string::basic_string[abi:ne180100]<0>(v19, "gender");
      std::set<std::string>::set[abi:ne180100]((uint64_t)&v13, (const void **)v19, 1);
      std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100]<true,0>(v30, (long long *)&v15, &v13);
      std::map<std::string,std::set<std::string>>::map[abi:ne180100]((uint64_t)&siri::dialogengine::IsPropertyValidForLocale(siri::dialogengine::Context *,std::string const&)::morphunProperties, (const void **)&v29[0].__r_.__value_.__l.__data_, 2);
      for (unint64_t i = 48; i != -48; i -= 48)
        std::pair<std::string const,std::set<std::string> const>::~pair((uint64_t)&v29[i / 0x18]);
      std::__tree<std::string>::destroy((uint64_t)&v13, v14);
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      std::__tree<std::string>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
      for (uint64_t j = 0; j != -21; j -= 3)
      {
        if (SHIBYTE(v28[j + 2]) < 0) {
          operator delete((void *)v28[j]);
        }
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      __cxa_atexit((void (*)(void *))std::map<std::string,std::set<std::string>>::~map[abi:ne180100], &siri::dialogengine::IsPropertyValidForLocale(siri::dialogengine::Context *,std::string const&)::morphunProperties, &dword_1C5C1E000);
      uint64_t v2 = a2;
    }
  }
  siri::dialogengine::StringSplit(v2, ".", &v21);
  uint64_t v4 = (uint64_t)v22;
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v22 - v21) >> 3) >= 2)
  {
    if (a1)
    {
      if (*((char *)v22 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(v29, (const std::string::value_type *)*(v22 - 3), (std::string::size_type)*(v22 - 2));
        uint64_t v4 = (uint64_t)v22;
      }
      else
      {
        long long v5 = *(_OWORD *)(v22 - 3);
        v29[0].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v22 - 1);
        *(_OWORD *)&v29[0].__r_.__value_.__l.__data_ = v5;
      }
      uint64_t v6 = (void **)(v4 - 24);
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*v6);
      }
      uint64_t v22 = v6;
      std::string::basic_string[abi:ne180100]<0>(&__p, ".");
      siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)v17, v21, (uint64_t)v22, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::ResolveType(0, a1, (uint64_t)v17, 0, (uint64_t)&__p);
      if (siri::dialogengine::IsArrayType(&__p))
      {
        std::string::basic_string[abi:ne180100]<0>(&v15, (char *)siri::dialogengine::TYPE_ARRAY);
      }
      else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        std::string v15 = __p;
      }
      uint64_t v7 = std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::IsPropertyValidForLocale(siri::dialogengine::Context *,std::string const&)::morphunProperties, (const void **)&v15.__r_.__value_.__l.__data_);
      if ((_UNKNOWN *)v7 == &unk_1EA3DA398)
      {
        a1 = 1;
      }
      else
      {
        std::set<std::string>::set[abi:ne180100]((uint64_t *)&v13, (const void ***)(v7 + 56));
        a1 = &v14 == (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v13, (const void **)&v29[0].__r_.__value_.__l.__data_)|| siri::dialogengine::IsValidFeatureValue((siri::dialogengine *)a1, (uint64_t)v29);
        std::__tree<std::string>::destroy((uint64_t)&v13, v14);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      if (SHIBYTE(v29[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29[0].__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    a1 = 1;
  }
  v29[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
  return a1;
}

void sub_1C60BF3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,char *a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  for (uint64_t i = 48; i != -48; i -= 48)
    std::pair<std::string const,std::set<std::string> const>::~pair(v38 + i);
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  std::__tree<std::string>::destroy((uint64_t)&a20, a21);
  uint64_t v41 = 0;
  while (1)
  {
    if (*(&a38 + v41 + 167) < 0) {
      operator delete(*(void **)(&a38 + v41 + 144));
    }
    v41 -= 24;
    if (v41 == -168)
    {
      if (a31 < 0) {
        operator delete(a26);
      }
      _Unwind_Resume(a1);
    }
  }
}

void siri::dialogengine::ResolveValue(uint64_t **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  *(void *)&long long v61 = *MEMORY[0x1E4F143B8];
  if (*((char *)a2 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  if (!a1 || !v7)
  {
    *a6 = 0;
    a6[1] = 0;
    return;
  }
  std::string v13 = &v60;
  std::string::basic_string[abi:ne180100]((uint64_t)&v60, v7 + 1);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string v13 = (std::string *)v60.__r_.__value_.__r.__words[0];
  }
  if (*((char *)a2 + 23) >= 0) {
    std::string v14 = a2;
  }
  else {
    std::string v14 = *a2;
  }
  memmove(v13, v14, v7);
  *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v7) = 35;
  std::to_string(&v56, a3);
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v15 = &v56;
  }
  else {
    std::string v15 = (std::string *)v56.__r_.__value_.__r.__words[0];
  }
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v56.__r_.__value_.__l.__size_;
  }
  std::string v17 = std::string::append(&v60, (const std::string::value_type *)v15, size);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  char v19 = std::string::append(&v57, "#");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  int v21 = *(char *)(a4 + 23);
  if (v21 >= 0) {
    uint64_t v22 = (const std::string::value_type *)a4;
  }
  else {
    uint64_t v22 = *(const std::string::value_type **)a4;
  }
  if (v21 >= 0) {
    std::string::size_type v23 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v23 = *(void *)(a4 + 8);
  }
  uint64_t v24 = std::string::append(&v58, v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  std::string v26 = std::string::append(&v47, "#");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  int v28 = *(char *)(a5 + 23);
  if (v28 >= 0) {
    long long v29 = (const std::string::value_type *)a5;
  }
  else {
    long long v29 = *(const std::string::value_type **)a5;
  }
  if (v28 >= 0) {
    std::string::size_type v30 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    std::string::size_type v30 = *(void *)(a5 + 8);
  }
  uint64_t v31 = std::string::append(&v52, v29, v30);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  uint64_t v33 = std::__tree<std::string>::find<std::string>((uint64_t)(a1 + 68), (const void **)&v59.__r_.__value_.__l.__data_);
  if (a1 + 69 != (uint64_t **)v33)
  {
    *a6 = *(void *)(v33 + 56);
    uint64_t v34 = *(void *)(v33 + 64);
    a6[1] = v34;
    if (v34) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
    }
    goto LABEL_104;
  }
  siri::dialogengine::StringSplit((unsigned __int8 *)a2, ".", &v58);
  if (v58.__r_.__value_.__r.__words[0] == v58.__r_.__value_.__l.__size_)
  {
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v52, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
    }
    else {
      std::string v52 = v59;
    }
    uint64_t v53 = 0;
    std::string::size_type v54 = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<siri::dialogengine::Variable>>>(a1 + 68, (const void **)&v52.__r_.__value_.__l.__data_, (uint64_t)&v52);
    if (v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    *a6 = 0;
    a6[1] = 0;
    goto LABEL_103;
  }
  v52.__r_.__value_.__s.__data_[0] = 0;
  char v55 = 0;
  memset(&v57, 0, sizeof(v57));
  siri::dialogengine::ResolveLiteral((std::string *)a2, &v51);
  if ((void)v51)
  {
    siri::dialogengine::GetLiteralType((std::string *)a2, &v47);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    std::string v57 = v47;
    BOOL IsArrayType = siri::dialogengine::IsArrayType(&v57);
    BOOL v36 = IsArrayType;
    if (IsArrayType)
    {
      memset(&v47, 0, sizeof(v47));
    }
    else
    {
      if (*((char *)a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v60, (const std::string::value_type *)*a2, (std::string::size_type)a2[1]);
      }
      else {
        std::string v60 = *(std::string *)a2;
      }
      memset(&v47, 0, sizeof(v47));
      v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
      v56.__r_.__value_.__s.__data_[8] = 0;
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v47.__r_.__value_.__l.__size_ = v47.__r_.__value_.__r.__words[0];
      v47.__r_.__value_.__r.__words[2] = v47.__r_.__value_.__r.__words[0] + 24;
      v47.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v47.__r_.__value_.__r.__words[2], (long long *)&v60, &v61, (std::string *)v47.__r_.__value_.__l.__data_);
    }
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&v58);
    std::string v58 = v47;
    memset(&v47, 0, sizeof(v47));
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    if (v36 || (SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_75;
    }
    uint64_t v38 = (void *)v60.__r_.__value_.__r.__words[0];
  }
  else
  {
    siri::dialogengine::ParseVariableReference(&v47, (const std::string *)v58.__r_.__value_.__l.__data_);
    siri::dialogengine::Context::FindVariable(&v60, a1, &v47);
    char v37 = (std::__shared_weak_count *)*((void *)&v51 + 1);
    long long v51 = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    siri::dialogengine::ResolveType((void **)&v52.__r_.__value_.__l.__data_, (uint64_t)a1, (uint64_t)&v47, 0, (uint64_t)&v60);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    std::string v57 = v60;
    if (v50 < 0) {
      operator delete(__p);
    }
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_75;
    }
    uint64_t v38 = (void *)v47.__r_.__value_.__r.__words[0];
  }
  operator delete(v38);
LABEL_75:
  long long v46 = v51;
  if (*((void *)&v51 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v45, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v45 = v57;
  }
  memset(&v44, 0, sizeof(v44));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v44, (long long *)v58.__r_.__value_.__l.__data_, (long long *)v58.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58.__r_.__value_.__l.__size_ - v58.__r_.__value_.__r.__words[0]) >> 3));
  std::string::basic_string[abi:ne180100]<0>(v42, "");
  std::__optional_copy_base<siri::dialogengine::ObjectProperty,false>::__optional_copy_base[abi:ne180100]((siri::dialogengine::ObjectProperty *)v40, (const siri::dialogengine::ObjectProperty *)&v52);
  siri::dialogengine::ResolveValueRecursive(a6, (siri::dialogengine::Context *)a1, &v46, (uint64_t)&v45, (uint64_t *)&v44, (uint64_t)v42, (uint64_t)v40, a3, (std::string *)a4, a5);
  if (v41) {
    siri::dialogengine::ObjectProperty::~ObjectProperty(v40);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v46 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v46 + 1));
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v47, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  }
  else {
    std::string v47 = v59;
  }
  uint64_t v39 = (atomic_ullong *)a6[1];
  uint64_t v48 = *a6;
  std::string __p = v39;
  if (v39) {
    atomic_fetch_add_explicit(v39 + 1, 1uLL, memory_order_relaxed);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<siri::dialogengine::Variable>>>(a1 + 68, (const void **)&v47.__r_.__value_.__l.__data_, (uint64_t)&v47);
  if (__p) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v51 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v51 + 1));
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (v55) {
    siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&v52.__r_.__value_.__l.__data_);
  }
LABEL_103:
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
LABEL_104:
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
}

void sub_1C60BFC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a64);
  }
  if (*(char *)(v65 - 201) < 0) {
    operator delete(*(void **)(v65 - 224));
  }
  if (LOBYTE(STACK[0x2B0])) {
    siri::dialogengine::ObjectProperty::~ObjectProperty(&a65);
  }
  a65 = (void *)(v65 - 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  if (*(char *)(v65 - 137) < 0) {
    operator delete(*(void **)(v65 - 160));
  }
  _Unwind_Resume(a1);
}

void sub_1C60BFE44()
{
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<siri::dialogengine::Variable>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  long long v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  if (!*v5)
  {
    uint64_t v6 = v5;
    size_t v7 = operator new(0x48uLL);
    v8[1] = a1 + 1;
    std::string v7[2] = *(_OWORD *)a3;
    *((void *)v7 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v7 + 56) = *(_OWORD *)(a3 + 24);
    *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    char v9 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v10, v6, (uint64_t *)v7);
    v8[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v8);
  }
}

void siri::dialogengine::ResolveValueRecursive(void *a1, siri::dialogengine::Context *a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, std::string *a9, uint64_t a10)
{
  uint64_t v16 = *a3;
  if (*a3)
  {
    uint64_t v17 = *a5;
    goto LABEL_8;
  }
  if (!siri::dialogengine::IsPrimitiveType((const void **)a4)
    && !siri::dialogengine::IsArrayType((std::string *)a4)
    && 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3) >= 2)
  {
    operator new();
  }
  uint64_t v16 = *a3;
  uint64_t v17 = *a5;
  if (*a3)
  {
LABEL_8:
    if (v17 == a5[1])
    {
      uint64_t v19 = a3[1];
      *a1 = v16;
      a1[1] = v19;
      goto LABEL_135;
    }
    int v18 = *(char *)(a4 + 23);
    if (v18 < 0)
    {
      if (*(void *)(a4 + 8)) {
        goto LABEL_18;
      }
    }
    else if (*(unsigned char *)(a4 + 23))
    {
      goto LABEL_18;
    }
    if (*(char *)(v16 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 32), *(void *)(v16 + 40));
      if ((*(unsigned char *)(a4 + 23) & 0x80) == 0) {
        goto LABEL_17;
      }
    }
    else
    {
      std::string __p = *(std::string *)(v16 + 32);
      if ((v18 & 0x80) == 0)
      {
LABEL_17:
        *(std::string *)a4 = __p;
        uint64_t v16 = *a3;
LABEL_18:
        if (*(char *)(v16 + 55) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 32), *(void *)(v16 + 40));
        }
        else {
          std::string __p = *(std::string *)(v16 + 32);
        }
        BOOL IsPrimitiveType = siri::dialogengine::IsPrimitiveType((const void **)&__p.__r_.__value_.__l.__data_);
        uint64_t v21 = a10;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (IsPrimitiveType)
        {
          siri::dialogengine::PushKeyPath(&__p, a6, *a5);
          if (*(char *)(a6 + 23) < 0) {
            operator delete(*(void **)a6);
          }
          *(std::string *)a6 = __p;
          if (*(unsigned char *)(a7 + 240))
          {
            if (*(char *)(a7 + 183) < 0) {
              std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)(a7 + 160), *(void *)(a7 + 168));
            }
            else {
              std::string v88 = *(std::string *)(a7 + 160);
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v88, "");
          }
          uint64_t v32 = *(unsigned __int8 *)(a10 + 23);
          if ((v32 & 0x80u) != 0) {
            uint64_t v32 = *(void *)(a10 + 8);
          }
          if (v32) {
            std::string::operator=(&v88, (const std::string *)a10);
          }
          size_t v33 = strlen(siri::dialogengine::TYPE_STRING);
          size_t v34 = v33;
          if (*(char *)(a4 + 23) < 0)
          {
            if (v33 != *(void *)(a4 + 8)) {
              goto LABEL_137;
            }
            if (v33 == -1) {
              std::string::__throw_out_of_range[abi:ne180100]();
            }
            char v35 = *(const void **)a4;
          }
          else
          {
            char v35 = (const void *)a4;
            if (v34 != *(unsigned __int8 *)(a4 + 23)) {
              goto LABEL_137;
            }
          }
          if (!memcmp(v35, siri::dialogengine::TYPE_STRING, v34))
          {
            std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
            if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v88.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              siri::dialogengine::StringSplit((unsigned __int8 *)&v88, "|", &v127);
              if (v127.__r_.__value_.__r.__words[0] != v127.__r_.__value_.__l.__size_)
              {
                if (*(char *)(v127.__r_.__value_.__r.__words[0] + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)v127.__r_.__value_.__l.__data_, *(void *)(v127.__r_.__value_.__r.__words[0] + 8));
                }
                else
                {
                  long long v37 = *(_OWORD *)v127.__r_.__value_.__l.__data_;
                  v126.__r_.__value_.__r.__words[2] = *(void *)(v127.__r_.__value_.__r.__words[0] + 16);
                  *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v37;
                }
                if (a8)
                {
                  (*(void (**)(std::string *__return_ptr))(*(void *)*a3 + 48))(&__p);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string __str = __p;
                  }
                  std::string::operator=(&v99, &__str);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                  std::string::operator=(&v100, &v126);
                  std::string::operator=(&v101, a9);
                  operator new();
                }
                (*(void (**)(std::string *__return_ptr))(*(void *)*a3 + 48))(&__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                }
                else {
                  std::string __str = __p;
                }
                if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v101.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v100.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v99.__r_.__value_.__l.__data_);
                }
                if (v98 < 0) {
                  operator delete(v97);
                }
                if (v96 < 0) {
                  operator delete(v95);
                }
                if (v94 < 0) {
                  operator delete(v92);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                siri::dialogengine::SemanticFeatureConstraint::FromString((uint64_t)a2, (unsigned __int8 *)a9, &v123);
                siri::dialogengine::ApplySemanticConcept(a2, &v126, &__str, &v123, &__p);
                operator new();
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v127;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            }
          }
LABEL_137:
          if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3) > 1)
          {
            uint64_t v48 = *a5 + 24;
            std::string::size_type v49 = (std::__shared_weak_count *)a3[1];
            v122[0] = *a3;
            v122[1] = v49;
            if (v49) {
              atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            siri::dialogengine::ConceptCallbacks::InvokePrimitiveMethod((uint64_t)a2, (const void **)a4, v48, v122, &__p);
            if (v49) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v49);
            }
            std::string::size_type v50 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              long long v121 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              if (__p.__r_.__value_.__l.__size_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
              }
              if (*(char *)(v50 + 55) < 0) {
                std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)(v50 + 32), *(void *)(v50 + 40));
              }
              else {
                std::string v120 = *(std::string *)(v50 + 32);
              }
              long long v51 = (long long *)a5[1];
              std::string v52 = (long long *)(*a5 + 24);
              memset(&v119, 0, sizeof(v119));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v119, v52, v51, 0xAAAAAAAAAAAAAAABLL * (((char *)v51 - (char *)v52) >> 3));
              if (*(char *)(a6 + 23) < 0) {
                std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
              }
              else {
                std::string v118 = *(std::string *)a6;
              }
              std::__optional_copy_base<siri::dialogengine::ObjectProperty,false>::__optional_copy_base[abi:ne180100]((siri::dialogengine::ObjectProperty *)v116, (const siri::dialogengine::ObjectProperty *)a7);
              siri::dialogengine::ResolveValueRecursive(a1, a2, &v121, &v120, &v119, &v118, v116, a8, a9, a10);
              if (v117) {
                siri::dialogengine::ObjectProperty::~ObjectProperty(v116);
              }
              if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v118.__r_.__value_.__l.__data_);
              }
              v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
              if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v120.__r_.__value_.__l.__data_);
              }
              if (*((void *)&v121 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v121 + 1));
              }
            }
            else
            {
              *(_OWORD *)a1 = *(_OWORD *)a3;
              *a3 = 0;
              a3[1] = 0;
            }
            if (__p.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
            }
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)a3;
            *a3 = 0;
            a3[1] = 0;
          }
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v53 = (void *)v88.__r_.__value_.__r.__words[0];
LABEL_165:
            operator delete(v53);
            return;
          }
          return;
        }
        uint64_t v22 = *a3;
        unsigned int v78 = a8;
        if (*(char *)(*a3 + 55) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v22 + 32), *(void *)(v22 + 40));
        }
        else {
          std::string __p = *(std::string *)(v22 + 32);
        }
        size_t v23 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v23 == __p.__r_.__value_.__l.__size_)
          {
            if (v23 == -1) {
              std::string::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v24 = (void *)__p.__r_.__value_.__r.__words[0];
            int v25 = memcmp(__p.__r_.__value_.__l.__data_, (const void *)siri::dialogengine::TYPE_ARRAY, v23);
            operator delete(v24);
            uint64_t v21 = a10;
            if (!v25) {
              goto LABEL_44;
            }
          }
          else
          {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else if (v23 == HIBYTE(__p.__r_.__value_.__r.__words[2]) {
               && !memcmp(&__p, (const void *)siri::dialogengine::TYPE_ARRAY, v23))
        }
        {
LABEL_44:
          std::string v26 = (const void *)*a3;
          if (*a3)
          {
            if (v27)
            {
              int v28 = v27;
              long long v29 = (std::__shared_weak_count *)a3[1];
              if (v29) {
                atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              siri::dialogengine::ParseVariableReference(&__p, (const std::string *)*a5);
              if (!(_BYTE)v92)
              {
                if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3) < 2)
                {
                  *(_OWORD *)a1 = *(_OWORD *)a3;
                  *a3 = 0;
                  a3[1] = 0;
LABEL_248:
                  if (SHIBYTE(v95) < 0) {
                    operator delete(v93);
                  }
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (!v29) {
                    return;
                  }
                  uint64_t v68 = v29;
LABEL_254:
                  std::__shared_weak_count::__release_shared[abi:ne180100](v68);
                  return;
                }
                std::string::basic_string[abi:ne180100]<0>(&v88, (char *)siri::dialogengine::TYPE_ARRAY);
                uint64_t v55 = *a5 + 24;
                v115[0] = v28;
                v115[1] = v29;
                if (v29) {
                  atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                siri::dialogengine::ConceptCallbacks::InvokePrimitiveMethod((uint64_t)a2, (const void **)&v88.__r_.__value_.__l.__data_, v55, v115, &v127);
                if (v29) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
                }
                if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v88.__r_.__value_.__l.__data_);
                }
                std::string::size_type v56 = v127.__r_.__value_.__r.__words[0];
                if (v127.__r_.__value_.__r.__words[0])
                {
                  long long v114 = *(_OWORD *)&v127.__r_.__value_.__l.__data_;
                  if (v127.__r_.__value_.__l.__size_) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v127.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  }
                  if (*(char *)(v56 + 55) < 0) {
                    std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)(v56 + 32), *(void *)(v56 + 40));
                  }
                  else {
                    std::string v113 = *(std::string *)(v56 + 32);
                  }
                  std::string::size_type v76 = (long long *)a5[1];
                  uint64_t v77 = (long long *)(*a5 + 24);
                  memset(&v112, 0, sizeof(v112));
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v112, v77, v76, 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (char *)v77) >> 3));
                  if (*(char *)(a6 + 23) < 0) {
                    std::string::__init_copy_ctor_external(&v111, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
                  }
                  else {
                    std::string v111 = *(std::string *)a6;
                  }
                  std::__optional_copy_base<siri::dialogengine::ObjectProperty,false>::__optional_copy_base[abi:ne180100]((siri::dialogengine::ObjectProperty *)v109, (const siri::dialogengine::ObjectProperty *)a7);
                  siri::dialogengine::ResolveValueRecursive(a1, a2, &v114, &v113, &v112, &v111, v109, a8, a9, v21);
                  if (v110) {
                    siri::dialogengine::ObjectProperty::~ObjectProperty(v109);
                  }
                  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v111.__r_.__value_.__l.__data_);
                  }
                  v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
                  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v113.__r_.__value_.__l.__data_);
                  }
                  if (*((void *)&v114 + 1)) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v114 + 1));
                  }
                }
                else
                {
                  *(_OWORD *)a1 = *(_OWORD *)a3;
                  *a3 = 0;
                  a3[1] = 0;
                }
                std::__split_buffer<std::string>::pointer v73 = (std::__shared_weak_count *)v127.__r_.__value_.__l.__size_;
                if (!v127.__r_.__value_.__l.__size_) {
                  goto LABEL_248;
                }
LABEL_247:
                std::__shared_weak_count::__release_shared[abi:ne180100](v73);
                goto LABEL_248;
              }
              std::string::basic_string[abi:ne180100]<0>(&v88, "");
              std::string::basic_string[abi:ne180100]<0>(&v127, "");
              siri::dialogengine::ResolveValue(&v126, a2, &v93, 1, &v88, &v127);
              if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v127.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v88.__r_.__value_.__l.__data_);
              }
              std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableNumber,siri::dialogengine::Variable>(&__str, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
              if (!__str.__r_.__value_.__r.__words[0])
              {
                std::operator+<char>();
                std::string v57 = std::string::append(&v127, "'");
                long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
                v88.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v58;
                v57->__r_.__value_.__l.__size_ = 0;
                v57->__r_.__value_.__r.__words[2] = 0;
                v57->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Log::LogWithLevel((uint64_t)&v88, 3u);
LABEL_239:
                if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v88.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v127.__r_.__value_.__l.__data_);
                }
                *a1 = 0;
                a1[1] = 0;
LABEL_244:
                if (__str.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
                }
                std::__split_buffer<std::string>::pointer v73 = (std::__shared_weak_count *)v126.__r_.__value_.__l.__size_;
                if (!v126.__r_.__value_.__l.__size_) {
                  goto LABEL_248;
                }
                goto LABEL_247;
              }
              int v30 = (int)*(double *)(__str.__r_.__value_.__r.__words[0] + 72);
              if (v30 < 0)
              {
                uint64_t v31 = (v28[10] - v28[9]) >> 4;
                v30 += v31;
                if (v30 < 0)
                {
LABEL_238:
                  std::to_string(&v127, v30);
                  uint64_t v71 = std::string::insert(&v127, 0, "Out-of-bounds array index: ");
                  long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
                  v88.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v72;
                  v71->__r_.__value_.__l.__size_ = 0;
                  v71->__r_.__value_.__r.__words[2] = 0;
                  v71->__r_.__value_.__r.__words[0] = 0;
                  siri::dialogengine::Log::LogWithLevel((uint64_t)&v88, 3u);
                  goto LABEL_239;
                }
              }
              else
              {
                uint64_t v31 = (v28[10] - v28[9]) >> 4;
              }
              if (v30 < (int)v31)
              {
                siri::dialogengine::GetArrayElementType(a4, &v88);
                uint64_t v69 = v28[9];
                if (v30 >= (unint64_t)((v28[10] - v69) >> 4))
                {
                  long long v108 = 0uLL;
                }
                else
                {
                  long long v70 = *(_OWORD *)(v69 + 16 * v30);
                  long long v108 = v70;
                  if (*((void *)&v70 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v70 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                }
                if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v107, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v107 = v88;
                }
                memset(&v106, 0, sizeof(v106));
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v106, (long long *)*a5, (long long *)a5[1], 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3));
                if (*(char *)(a6 + 23) < 0) {
                  std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
                }
                else {
                  std::string v105 = *(std::string *)a6;
                }
                std::__optional_copy_base<siri::dialogengine::ObjectProperty,false>::__optional_copy_base[abi:ne180100]((siri::dialogengine::ObjectProperty *)v103, (const siri::dialogengine::ObjectProperty *)a7);
                siri::dialogengine::ResolveValueRecursive(a1, a2, &v108, &v107, &v106, &v105, v103, a8, a9, v21);
                if (v104) {
                  siri::dialogengine::ObjectProperty::~ObjectProperty(v103);
                }
                if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v105.__r_.__value_.__l.__data_);
                }
                v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
                if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v107.__r_.__value_.__l.__data_);
                }
                if (*((void *)&v108 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v108 + 1));
                }
                if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v88.__r_.__value_.__l.__data_);
                }
                goto LABEL_244;
              }
              goto LABEL_238;
            }
          }
          uint64_t v54 = a3[1];
          *a1 = v26;
          a1[1] = v54;
LABEL_135:
          *a3 = 0;
          a3[1] = 0;
          return;
        }
        uint64_t v38 = *a3;
        if (*(char *)(*a3 + 55) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v38 + 32), *(void *)(v38 + 40));
        }
        else {
          std::string __p = *(std::string *)(v38 + 32);
        }
        size_t v39 = strlen((const char *)siri::dialogengine::TYPE_OBJECT);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v39 == __p.__r_.__value_.__l.__size_)
          {
            if (v39 == -1) {
              std::string::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v40 = v21;
            char v41 = (void *)__p.__r_.__value_.__r.__words[0];
            int v42 = memcmp(__p.__r_.__value_.__l.__data_, (const void *)siri::dialogengine::TYPE_OBJECT, v39);
            operator delete(v41);
            uint64_t v21 = v40;
            if (!v42)
            {
LABEL_113:
              siri::dialogengine::PushKeyPath(&__p, a6, *a5);
              if (*(char *)(a6 + 23) < 0) {
                operator delete(*(void **)a6);
              }
              *(std::string *)a6 = __p;
              siri::dialogengine::ObjectRegistry::GetObject((uint64_t)a2, (const std::string::value_type **)a4, (uint64_t *)&v126);
              char v43 = (const std::string *)*a5;
              if (a5[1] - *a5 == 24)
              {
                uint64_t v44 = v126.__r_.__value_.__r.__words[0];
                if (!v126.__r_.__value_.__r.__words[0]) {
                  goto LABEL_170;
                }
                uint64_t v45 = v21;
                std::string::basic_string[abi:ne180100]<0>(&v88, (char *)siri::dialogengine::TO_STRING);
                siri::dialogengine::ObjectSchema::GetProperty(v44, (const char *)a2, (const void **)&v88.__r_.__value_.__l.__data_, 0, (siri::dialogengine::ObjectProperty *)&__p);
                int v46 = v102;
                if (v102) {
                  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v88.__r_.__value_.__l.__data_);
                }
                if (!v46)
                {
LABEL_170:
                  *(_OWORD *)a1 = *(_OWORD *)a3;
                  *a3 = 0;
                  a3[1] = 0;
                  goto LABEL_230;
                }
                if (!siri::dialogengine::IsBuiltinType((std::string *)a4) && !*((void *)a2 + 99))
                {
                  std::operator+<char>();
                  v74 = std::string::append(&v88, ".toString' call. Returning empty string.");
                  long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v75;
                  v74->__r_.__value_.__l.__size_ = 0;
                  v74->__r_.__value_.__r.__words[2] = 0;
                  v74->__r_.__value_.__r.__words[0] = 0;
                  siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v88.__r_.__value_.__l.__data_);
                  }
                  operator new();
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, (char *)siri::dialogengine::TO_STRING);
                std::vector<std::string>::push_back[abi:ne180100]((std::vector<std::string> *)a5, (long long *)&__p);
                uint64_t v21 = v45;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                char v43 = (const std::string *)*a5;
              }
              siri::dialogengine::ParseVariableReference(&v88, v43 + 1);
              std::string::basic_string[abi:ne180100]<0>(&v127, "");
              uint64_t v47 = v126.__r_.__value_.__r.__words[0];
              if (!v126.__r_.__value_.__r.__words[0]) {
                goto LABEL_191;
              }
              siri::dialogengine::ObjectSchema::GetProperty((uint64_t)v126.__r_.__value_.__l.__data_, (const char *)a2, (const void **)&v88.__r_.__value_.__l.__data_, 0, (siri::dialogengine::ObjectProperty *)&__p);
              std::__optional_storage_base<siri::dialogengine::ObjectProperty,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<siri::dialogengine::ObjectProperty,false> const&>((siri::dialogengine::ObjectProperty *)a7, (siri::dialogengine::ObjectProperty *)&__p);
              if (v102) {
                siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p.__r_.__value_.__l.__data_);
              }
              if (*(unsigned char *)(a7 + 240))
              {
                if (*(char *)(a7 + 55) < 0) {
                  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a7 + 32), *(void *)(a7 + 40));
                }
                else {
                  std::string __p = *(std::string *)(a7 + 32);
                }
                if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v127.__r_.__value_.__l.__data_);
                }
                std::string v127 = __p;
              }
              siri::dialogengine::ObjectSchema::GetInput(v47, (const char *)a2, (const void **)&v88.__r_.__value_.__l.__data_, 0, (uint64_t)&__p);
              if (v101.__r_.__value_.__s.__data_[16])
              {
                int v59 = HIDWORD(v101.__r_.__value_.__r.__words[1]);
                siri::dialogengine::PropertyBase::~PropertyBase((void **)&__p.__r_.__value_.__l.__data_);
                std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableObject,siri::dialogengine::Variable>(&__str, (void *)*a3, a3[1]);
                if (v59 != 1)
                {
                  std::string v60 = 0;
                  std::string::size_type v61 = __str.__r_.__value_.__r.__words[0];
                  goto LABEL_198;
                }
              }
              else
              {
LABEL_191:
                std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableObject,siri::dialogengine::Variable>(&__str, (void *)*a3, a3[1]);
              }
              std::string::size_type v61 = __str.__r_.__value_.__r.__words[0];
              uint64_t v62 = std::__tree<std::string>::find<std::string>(__str.__r_.__value_.__r.__words[0] + 72, (const void **)&v88.__r_.__value_.__l.__data_);
              if (v61 + 80 == v62)
              {
                std::string v60 = 0;
              }
              else
              {
                int v63 = *(long long **)(v62 + 56);
                std::string v60 = *(std::__shared_weak_count **)(v62 + 64);
                if (v60) {
                  atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (v63) {
                  goto LABEL_204;
                }
              }
LABEL_198:
              siri::dialogengine::PushKeyPath(&__p, a6, (uint64_t)&v88);
              uint64_t v64 = v21;
              siri::dialogengine::ConceptCallbacks::InvokeCallback(a2, a4, &v88, v61, &__p);
              int v63 = v123;
              uint64_t v65 = v124;
              uint64_t v123 = 0;
              v124 = 0;
              if (v60)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v60);
                if (v124) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v124);
                }
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              std::string v60 = v65;
              uint64_t v21 = v64;
LABEL_204:
              uint64_t v86 = v63;
              uint64_t v87 = v60;
              if (v60) {
                atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v85, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
              }
              else {
                std::string v85 = v127;
              }
              std::string::size_type v66 = (long long *)a5[1];
              char v67 = (long long *)(*a5 + 24);
              memset(&v84, 0, sizeof(v84));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v84, v67, v66, 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)v67) >> 3));
              if (*(char *)(a6 + 23) < 0) {
                std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
              }
              else {
                std::string v83 = *(std::string *)a6;
              }
              std::__optional_copy_base<siri::dialogengine::ObjectProperty,false>::__optional_copy_base[abi:ne180100]((siri::dialogengine::ObjectProperty *)v81, (const siri::dialogengine::ObjectProperty *)a7);
              siri::dialogengine::ResolveValueRecursive(a1, a2, &v86, &v85, &v84, &v83, v81, v78, a9, v21);
              if (v82) {
                siri::dialogengine::ObjectProperty::~ObjectProperty(v81);
              }
              if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v83.__r_.__value_.__l.__data_);
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v85.__r_.__value_.__l.__data_);
              }
              if (v87) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v87);
              }
              if (v60) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v60);
              }
              if (__str.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
              }
              if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v127.__r_.__value_.__l.__data_);
              }
              if (v90 < 0) {
                operator delete(v89);
              }
              if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v88.__r_.__value_.__l.__data_);
              }
LABEL_230:
              uint64_t v68 = (std::__shared_weak_count *)v126.__r_.__value_.__l.__size_;
              if (!v126.__r_.__value_.__l.__size_) {
                return;
              }
              goto LABEL_254;
            }
          }
          else
          {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else if (v39 == HIBYTE(__p.__r_.__value_.__r.__words[2]) {
               && !memcmp(&__p, (const void *)siri::dialogengine::TYPE_OBJECT, v39))
        }
        {
          goto LABEL_113;
        }
        *(_OWORD *)a1 = *(_OWORD *)a3;
        goto LABEL_135;
      }
    }
    operator delete(*(void **)a4);
    goto LABEL_17;
  }
  if (a5[1] - v17 != 24)
  {
LABEL_34:
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  if (*(char *)(a6 + 23) < 0)
  {
    if (*(void *)(a6 + 8)) {
      goto LABEL_34;
    }
  }
  else if (*(unsigned char *)(a6 + 23))
  {
    goto LABEL_34;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::ConceptCallbacks::InvokeCallback(a2, a4, &__p, 0, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v53 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_165;
  }
}

void sub_1C60C152C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  a63 = &STACK[0x558];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (SLOBYTE(STACK[0x587]) < 0) {
    operator delete((void *)STACK[0x570]);
  }
  if (STACK[0x590]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x590]);
  }
  v74 = *(std::__shared_weak_count **)(v72 - 120);
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  siri::dialogengine::VariableReference::~VariableReference(&a71);
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::PushKeyPath(std::string *this, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    *this = *(std::string *)a2;
  }
  std::string::size_type v6 = *(unsigned __int8 *)(a3 + 23);
  char v7 = v6;
  std::string::size_type v8 = *(void *)(a3 + 8);
  if ((v6 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  if (v9)
  {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    if (v10)
    {
      std::string::append(this, ".");
      std::string::size_type v6 = *(unsigned __int8 *)(a3 + 23);
      std::string::size_type v8 = *(void *)(a3 + 8);
      char v7 = *(unsigned char *)(a3 + 23);
    }
    if (v7 >= 0) {
      std::string::size_type v11 = (const std::string::value_type *)a3;
    }
    else {
      std::string::size_type v11 = *(const std::string::value_type **)a3;
    }
    if (v7 >= 0) {
      std::string::size_type v12 = v6;
    }
    else {
      std::string::size_type v12 = v8;
    }
    std::string::append(this, v11, v12);
  }
}

void sub_1C60C1BD8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableNumber,siri::dialogengine::Variable>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void std::vector<std::string>::push_back[abi:ne180100](std::vector<std::string> *a1, long long *a2)
{
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  long long v5 = value;
  unint64_t v7 = *((void *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v13) {
      std::string v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v13);
    }
    else {
      std::string v14 = 0;
    }
    std::string v15 = v14 + v10;
    __v.__first_ = v14;
    __v.__begin_ = v15;
    __v.__end_cap_.__value_ = &v14[v13];
    long long v16 = *a2;
    v15->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    __v.__end_ = v15 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    end = (std::string *)(v7 + 24);
    a1->__end_ = (std::vector<std::string>::pointer)(v7 + 24);
  }
  a1->__end_ = end;
}

void sub_1C60C1DAC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t siri::dialogengine::VariableNumber::ToString(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

void siri::dialogengine::VariableNumber::ToString(uint64_t a1@<X8>)
{
  siri::dialogengine::StringFromDouble((siri::dialogengine *)0xFFFFFFFFLL, (uint64_t)__p);
  siri::dialogengine::SpeakableString::SpeakableString(a1, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C60C1E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::VariableNumber::IsEmpty(siri::dialogengine::VariableNumber *this)
{
  return 0;
}

uint64_t siri::dialogengine::VariableNumber::Accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a1);
}

void siri::dialogengine::VariableNumber::~VariableNumber(void **this)
{
  siri::dialogengine::Variable::~Variable(this);
  JUMPOUT(0x1C8796D70);
}

siri::dialogengine::VariableNumber *siri::dialogengine::VariableNumber::VariableNumber(siri::dialogengine::VariableNumber *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::dialogengine::TYPE_NUMBER);
  siri::dialogengine::Variable::Variable((uint64_t)this, &v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_1F2124AB8;
  *((void *)this + 9) = 0;
  return this;
}

void sub_1C60C1F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::VariableNumber::VariableNumber(uint64_t a1, const std::string *a2, double a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::dialogengine::TYPE_NUMBER);
  siri::dialogengine::Variable::Variable(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F2124AB8;
  *(double *)(a1 + 72) = a3;
  return a1;
}

void sub_1C60C2028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::VariableNumber::SetValue(uint64_t this, double a2)
{
  *(double *)(this + 72) = a2;
  return this;
}

double siri::dialogengine::VariableNumber::GetValue(siri::dialogengine::VariableNumber *this)
{
  return *((double *)this + 9);
}

void siri::dialogengine::AllComputedParameterNames(uint64_t *a1@<X8>)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v5, "isConclusion");
  std::string::basic_string[abi:ne180100]<0>(v6, "isFirstWindow");
  std::string::basic_string[abi:ne180100]<0>(v7, "isLastWindow");
  std::string::basic_string[abi:ne180100]<0>(v8, "isNextWindowLastWindow");
  std::string::basic_string[abi:ne180100]<0>(v9, "nextWindowItemCount");
  std::string::basic_string[abi:ne180100]<0>(v10, "windowSize");
  uint64_t v3 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  do
  {
    std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(a1, a1 + 1, &v5[v3], (uint64_t)&v5[v3]);
    v3 += 3;
  }
  while (v3 != 18);
  for (uint64_t i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v10[i + 2]) < 0) {
      operator delete((void *)v10[i]);
    }
  }
}

void sub_1C60C2194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void siri::dialogengine::GetParamsForPattern(uint64_t a1, std::string **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  siri::dialogengine::Context::Context((siri::dialogengine::Context *)v40, a2);
  std::map<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>::map[abi:ne180100]((uint64_t)&v39, (const void ***)(a1 + 208));
  unint64_t v12 = (std::string::__raw *)v39.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v39.__r_.__value_.__l.__data_ != &v39.__r_.__value_.__r.__words[1])
  {
    do
    {
      std::string::size_type v13 = v12[2].__words[1];
      if (*(char *)(v13 + 111) < 0) {
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(v13 + 88), *(void *)(v13 + 96));
      }
      else {
        std::string v38 = *(std::string *)(v13 + 88);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = v38.__r_.__value_.__l.__size_;
        operator delete(v38.__r_.__value_.__l.__data_);
        if (!size) {
          goto LABEL_14;
        }
      }
      else if (!*((unsigned char *)&v38.__r_.__value_.__s + 23))
      {
        goto LABEL_14;
      }
      std::string::size_type v15 = v12[2].__words[1];
      if (*(char *)(v15 + 111) < 0) {
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(v15 + 88), *(void *)(v15 + 96));
      }
      else {
        std::string v38 = *(std::string *)(v15 + 88);
      }
      siri::dialogengine::GetParamsForDialogCat((uint64_t *)a2, (uint64_t)&v38, a6, 0);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
LABEL_14:
      std::string::size_type v16 = v12[2].__words[1];
      if (*(char *)(v16 + 135) < 0) {
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(v16 + 112), *(void *)(v16 + 120));
      }
      else {
        std::string v38 = *(std::string *)(v16 + 112);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v17 = v38.__r_.__value_.__l.__size_;
        operator delete(v38.__r_.__value_.__l.__data_);
        if (!v17) {
          goto LABEL_26;
        }
      }
      else if (!*((unsigned char *)&v38.__r_.__value_.__s + 23))
      {
        goto LABEL_26;
      }
      std::string::size_type v18 = v12[2].__words[1];
      if (*(char *)(v18 + 135) < 0) {
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(v18 + 112), *(void *)(v18 + 120));
      }
      else {
        std::string v38 = *(std::string *)(v18 + 112);
      }
      siri::dialogengine::GetParamsForVisualCat((uint64_t)a2);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
LABEL_26:
      std::string::size_type v19 = v12[2].__words[1];
      if (*(char *)(v19 + 159) < 0) {
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(v19 + 136), *(void *)(v19 + 144));
      }
      else {
        std::string v38 = *(std::string *)(v19 + 136);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v20 = v38.__r_.__value_.__l.__size_;
        operator delete(v38.__r_.__value_.__l.__data_);
        if (v20)
        {
LABEL_33:
          std::string::size_type v21 = v12[2].__words[1];
          if (*(char *)(v21 + 159) < 0) {
            std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(v21 + 136), *(void *)(v21 + 144));
          }
          else {
            std::string v38 = *(std::string *)(v21 + 136);
          }
          siri::dialogengine::PatternFile::LoadFromId((uint64_t)v40, (uint64_t)&v38, 0, (uint64_t *)&v36);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
          if (v36) {
            siri::dialogengine::GetParamsForPattern(v36, a2, a3, a4, a5, a6);
          }
          if (v37) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v37);
          }
        }
      }
      else if (*((unsigned char *)&v38.__r_.__value_.__s + 23))
      {
        goto LABEL_33;
      }
      uint64_t v22 = (std::string *)v12->__words[1];
      if (v22)
      {
        do
        {
          size_t v23 = v22;
          uint64_t v22 = (std::string *)v22->__r_.__value_.__r.__words[0];
        }
        while (v22);
      }
      else
      {
        do
        {
          size_t v23 = (std::string *)v12->__words[2];
          BOOL v24 = v23->__r_.__value_.__r.__words[0] == (void)v12;
          unint64_t v12 = (std::string::__raw *)v23;
        }
        while (!v24);
      }
      unint64_t v12 = (std::string::__raw *)v23;
    }
    while (v23 != (std::string *)&v39.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)v39.__r_.__value_.__l.__size_);
  if (*(char *)(a1 + 135) < 0) {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(a1 + 112), *(void *)(a1 + 120));
  }
  else {
    std::string v39 = *(std::string *)(a1 + 112);
  }
  siri::dialogengine::PatternRegistry::GetSchema((uint64_t)v40, (const std::string::value_type **)&v39.__r_.__value_.__l.__data_, (uint64_t *)&v38);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  int v25 = (siri::dialogengine::PatternSchema *)v38.__r_.__value_.__r.__words[0];
  if (a3 == 2 && v38.__r_.__value_.__r.__words[0])
  {
    std::map<std::string,std::shared_ptr<siri::dialogengine::Parameter>>::map[abi:ne180100]((uint64_t)&v39, (const void ***)(v38.__r_.__value_.__r.__words[0] + 168));
    std::string v26 = (std::string::__raw *)v39.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v39.__r_.__value_.__l.__data_ != &v39.__r_.__value_.__r.__words[1])
    {
      do
      {
        siri::dialogengine::ParameterCollection::AddParameter(a6, (uint64_t *)&v26[2].__words[1]);
        long long v27 = (std::string *)v26->__words[1];
        if (v27)
        {
          do
          {
            int v28 = v27;
            long long v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
          }
          while (v27);
        }
        else
        {
          do
          {
            int v28 = (std::string *)v26->__words[2];
            BOOL v24 = v28->__r_.__value_.__r.__words[0] == (void)v26;
            std::string v26 = (std::string::__raw *)v28;
          }
          while (!v24);
        }
        std::string v26 = (std::string::__raw *)v28;
      }
      while (v28 != (std::string *)&v39.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)v39.__r_.__value_.__l.__size_);
  }
  if (v25 && a4)
  {
    siri::dialogengine::PatternSchema::GetSettings(v25, (uint64_t)&v39);
    long long v29 = (std::string::__raw *)v39.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v39.__r_.__value_.__l.__data_ != &v39.__r_.__value_.__r.__words[1])
    {
      do
      {
        if (*(unsigned char *)(v29[2].__words[1] + 233))
        {
          int v30 = (std::__shared_weak_count *)v29[2].__words[2];
          std::string::size_type v36 = v29[2].__words[1];
          long long v37 = v30;
          if (v30) {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::ParameterCollection::AddParameter(a6, (uint64_t *)&v36);
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
        }
        uint64_t v31 = (std::string *)v29->__words[1];
        if (v31)
        {
          do
          {
            uint64_t v32 = v31;
            uint64_t v31 = (std::string *)v31->__r_.__value_.__r.__words[0];
          }
          while (v31);
        }
        else
        {
          do
          {
            uint64_t v32 = (std::string *)v29->__words[2];
            BOOL v24 = v32->__r_.__value_.__r.__words[0] == (void)v29;
            long long v29 = (std::string::__raw *)v32;
          }
          while (!v24);
        }
        long long v29 = (std::string::__raw *)v32;
      }
      while (v32 != (std::string *)&v39.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)v39.__r_.__value_.__l.__size_);
  }
  if (a3 == 1)
  {
    siri::dialogengine::AllComputedParameterNames((uint64_t *)&v39);
    size_t v33 = (std::string::__raw *)v39.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v39.__r_.__value_.__l.__data_ != &v39.__r_.__value_.__r.__words[1])
    {
      do
      {
        siri::dialogengine::ParameterCollection::RemoveParameter(a6, &v33[1].__words[1]);
        size_t v34 = (std::string *)v33->__words[1];
        if (v34)
        {
          do
          {
            char v35 = v34;
            size_t v34 = (std::string *)v34->__r_.__value_.__r.__words[0];
          }
          while (v34);
        }
        else
        {
          do
          {
            char v35 = (std::string *)v33->__words[2];
            BOOL v24 = v35->__r_.__value_.__r.__words[0] == (void)v33;
            size_t v33 = (std::string::__raw *)v35;
          }
          while (!v24);
        }
        size_t v33 = (std::string::__raw *)v35;
      }
      while (v35 != (std::string *)&v39.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::string>::destroy((char *)v39.__r_.__value_.__l.__size_);
  }
  if (v38.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38.__r_.__value_.__l.__size_);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v40);
}

void sub_1C60C26AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
}

void siri::dialogengine::DialogPreciseTemperature::toString(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPreciseTemperature::longSpoken(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPreciseTemperature::shortSpoken(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPreciseTemperature::mediumSpoken(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPreciseTemperature::value(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPreciseTemperature::oneDigit(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPreciseTemperature::longSpokenOneDigit(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPreciseTemperature::shortSpokenOneDigit(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPreciseTemperature::mediumSpokenOneDigit(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPreciseTemperature::valueOneDigit(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPreciseTemperature::twoDigits(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPreciseTemperature::longSpokenTwoDigits(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPreciseTemperature::shortSpokenTwoDigits(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPreciseTemperature::mediumSpokenTwoDigits(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPreciseTemperature::valueTwoDigits(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPreciseTemperature::asTemperature(siri::dialogengine::DialogPreciseTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C60C2A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  MEMORY[0x1C8796D70](v22, 0x10B3C40C1072A30);
  _Unwind_Resume(a1);
}

id siri::dialogengine::GetUAFAssetSet(siri::dialogengine *this)
{
  {
    __cxa_atexit(MEMORY[0x1E4FBA268], &siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex, &dword_1C5C1E000);
  }
  {
    operator new();
  }
  uint64_t v1 = (std::once_flag::_State_type *)siri::dialogengine::GetUAFAssetSet(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetUAFAssetSet(void)::flag, memory_order_acquire) != -1)
  {
    std::string::size_type v6 = &v4;
    long long v5 = &v6;
    std::__call_once(v1, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetUAFAssetSet(void)::$_0 &&>>);
  }
  std::mutex::lock(&siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex);
  id v2 = (id)siri::dialogengine::GetUAFAssetSet(void)::assetSet;
  std::mutex::unlock(&siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex);
  return v2;
}

void sub_1C60C2C5C(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetUAFAssetSet(void)::$_0 &&>>()
{
  uint64_t v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  v0 = dispatch_queue_create("com.apple.siri.dialogengine.GetUAFAssetSet", v1);
  dispatch_async(v0, &__block_literal_global);
}

void ___ZZN4siri12dialogengine14GetUAFAssetSetEvENK3__0clEv_block_invoke()
{
  v0 = os_log_create("com.apple.siri.DialogEngine", "UAFAssetSet");
  os_signpost_id_t v1 = os_signpost_id_generate(v0);
  id v2 = v0;
  uint64_t v3 = v2;
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "UAFAssetSet_Create", "", buf, 2u);
  }

  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"UAFAssetSet creation begin", v4);
  char v24 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  *(void *)buf = 0;
  char v23 = 0;
  siri::dialogengine::ElapsedTimer::Reset((siri::dialogengine::ElapsedTimer *)buf);
  long long v5 = [MEMORY[0x1E4FB35A0] sharedManager];
  std::string::size_type v6 = [v5 retrieveAssetSet:@"com.apple.siri.dialog" usages:0];

  siri::dialogengine::ElapsedTimer::Stop((siri::dialogengine **)buf);
  siri::dialogengine::ElapsedTimer::GetCombinedMSecsAsString((siri::dialogengine::ElapsedTimer *)buf, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"UAFAssetSet creation time: %s", v7, p_p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6) {
      goto LABEL_9;
    }
LABEL_15:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to create UAFAssetSet for dialog updates", v9);
    goto LABEL_16;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v6) {
    goto LABEL_15;
  }
LABEL_9:
  id v10 = (id)[v6 assetNamed:@"com.apple.siri.dialog.dialogengine"];
  std::mutex::lock(&siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex);
  objc_storeStrong((id *)&siri::dialogengine::GetUAFAssetSet(void)::assetSet, v6);
  std::mutex::unlock(&siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex);
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"UAFAssetSet was created and is available", v11);
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"UAFAssetSetObserver creation begin", v12);
  siri::dialogengine::ElapsedTimer::Reset((siri::dialogengine::ElapsedTimer *)buf);
  uint64_t v13 = [objc_alloc(MEMORY[0x1E4FB35A8]) initWithAssetSet:@"com.apple.siri.dialog" queue:0 updateHandler:&__block_literal_global_300];
  std::string v14 = (void *)siri::dialogengine::GetUAFAssetSet(void)::assetSetObserver;
  siri::dialogengine::GetUAFAssetSet(void)::assetSetObserver = v13;

  siri::dialogengine::ElapsedTimer::Stop((siri::dialogengine **)buf);
  siri::dialogengine::ElapsedTimer::GetCombinedMSecsAsString((siri::dialogengine::ElapsedTimer *)buf, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = &__p;
  }
  else {
    std::string::size_type v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"UAFAssetSetObserver creation time: %s", v15, v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_16:
  std::string::size_type v17 = v3;
  std::string::size_type v18 = v17;
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v18, OS_SIGNPOST_INTERVAL_END, v1, "UAFAssetSet_Create", "", (uint8_t *)&__p, 2u);
  }
}

void sub_1C60C2F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ___ZZN4siri12dialogengine14GetUAFAssetSetEvENK3__0clEv_block_invoke_298()
{
  std::mutex::lock(&siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex);
  v0 = [MEMORY[0x1E4FB35A0] sharedManager];
  uint64_t v1 = [v0 retrieveAssetSet:@"com.apple.siri.dialog" usages:0];
  id v2 = (void *)siri::dialogengine::GetUAFAssetSet(void)::assetSet;
  siri::dialogengine::GetUAFAssetSet(void)::assetSet = v1;

  std::mutex::unlock(&siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex);
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"handleAssetUpdate(): Dialog assets were updated; Begin clearing caches",
    v3);
  SemanticModelCache = (siri::dialogengine::SemanticModelCache *)siri::dialogengine::GetSemanticModelCache(v4);
  siri::dialogengine::SemanticModelCache::clear(SemanticModelCache);
  siri::dialogengine::ObjectRegistry::Clear(v6);
  siri::dialogengine::ClearSearchPathCaches(v7);
  siri::dialogengine::ClearTemplateDirsCache(v8);
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"handleAssetUpdate(): Done clearing caches", v9);
}

void sub_1C60C3080(_Unwind_Exception *a1)
{
  std::mutex::unlock(&siri::dialogengine::GetUAFAssetSet(void)::assetSetMutex);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetUpdatedTemplateDir(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  v81[0] = 0;
  v81[1] = 0;
  uint64_t v82 = 0;
  unsigned int v78 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  uint64_t AssetDeliveryConfig = siri::dialogengine::ReadAssetDeliveryConfig((uint64_t *)a1, (uint64_t)v81, (uint64_t)&v78, 0);
  if (AssetDeliveryConfig)
  {
    std::string::size_type v6 = siri::dialogengine::GetUAFAssetSet((siri::dialogengine *)AssetDeliveryConfig);
    if (!v6)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to check for dialog updates due to nil UAFAssetSet", v5);
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      }
      goto LABEL_67;
    }
    if (v82 >= 0) {
      unint64_t v7 = v81;
    }
    else {
      unint64_t v7 = (void **)v81[0];
    }
    long long v8 = [NSString stringWithUTF8String:v7];
    uint64_t v9 = [v6 assetNamed:v8];
    id v10 = v9;
    if (!v9) {
      goto LABEL_28;
    }
    unint64_t v11 = [v9 location];
    if (!v11) {
      goto LABEL_28;
    }
    unint64_t v12 = [v10 location];
    uint64_t v13 = [v12 path];
    uint64_t v14 = [v13 length];

    if (!v14)
    {
LABEL_28:
      uint64_t v27 = [v8 UTF8String];
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Failed to find asset named \"%s\" with path", v28, v27);
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      }
LABEL_66:

LABEL_67:
      goto LABEL_68;
    }
    v76[0] = 0;
    v76[1] = 0;
    uint64_t v77 = 0;
    v74[0] = 0;
    v74[1] = 0;
    uint64_t v75 = 0;
    std::string::size_type v15 = [v10 location];
    id v16 = [v15 path];
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v16 UTF8String]);
    char v17 = siri::dialogengine::ReadAssetDeliveryConfig((uint64_t *)__p, 0, (uint64_t)v76, (uint64_t)v74);
    if (v73 < 0) {
      operator delete(__p[0]);
    }

    if ((v17 & 1) == 0)
    {
      uint64_t v29 = [v8 UTF8String];
      uint64_t v22 = [v10 location];
      id v30 = [v22 path];
      uint64_t v31 = [v30 UTF8String];
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unexpected missing DialogAssetDelivery.plist in asset \"%s\" (directory \"%s\")", v32, v29, v31);

      goto LABEL_59;
    }
    if (SHIBYTE(v80) < 0)
    {
      if (v79)
      {
LABEL_14:
        if (siri::dialogengine::IsValidVersionNumber((char *)&v78))
        {
          if ((siri::dialogengine::IsValidVersionNumber((char *)v76) & 1) == 0)
          {
            uint64_t v22 = [v10 location];
            id v23 = [v22 path];
            uint64_t v45 = [v23 UTF8String];
            uint64_t v47 = v76;
            if (v77 < 0) {
              uint64_t v47 = (void **)v76[0];
            }
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s has invalid version \"%s\", preferring built in asset", v46, v45, v47);
            goto LABEL_58;
          }
          if (siri::dialogengine::VersionGreaterThan((uint64_t)&v78, (uint64_t)v76))
          {
            if (*(char *)(a1 + 23) >= 0) {
              std::string::size_type v20 = (const std::string::value_type *)a1;
            }
            else {
              std::string::size_type v20 = *(const std::string::value_type **)a1;
            }
            if (v80 >= 0) {
              uint64_t v21 = &v78;
            }
            else {
              uint64_t v21 = v78;
            }
            uint64_t v22 = [v10 location];
            id v23 = [v22 path];
            uint64_t v24 = [v23 UTF8String];
            std::string v26 = v76;
            if (v77 < 0) {
              std::string v26 = (void **)v76[0];
            }
            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s has has newer version \"%s\" than that in %s with version \"%s\", preferring built in asset", v25, v20, v21, v24, v26);
LABEL_58:

LABEL_59:
            if (*(char *)(a1 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
            }
            else
            {
              *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
              a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
            }
LABEL_62:
            if (SHIBYTE(v75) < 0) {
              operator delete(v74[0]);
            }
            if (SHIBYTE(v77) < 0) {
              operator delete(v76[0]);
            }
            goto LABEL_66;
          }
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v74, ""))
          {
            if (*(char *)(a1 + 23) >= 0) {
              uint64_t v48 = (const std::string::value_type *)a1;
            }
            else {
              uint64_t v48 = *(const std::string::value_type **)a1;
            }
            if (v80 >= 0) {
              std::string::size_type v49 = &v78;
            }
            else {
              std::string::size_type v49 = v78;
            }
            std::string::size_type v50 = [v10 location];
            id v51 = [v50 path];
            uint64_t v52 = [v51 UTF8String];
            uint64_t v54 = v76;
            if (v77 < 0) {
              uint64_t v54 = (void **)v76[0];
            }
            siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s has has older version \"%s\" than that in %s with version \"%s\" and not a differential update, preferring asset", v53, v48, v49, v52, v54);
          }
          else
          {
            if ((siri::dialogengine::IsValidVersionNumber((char *)v74) & 1) == 0)
            {
              if (*(char *)(a1 + 23) >= 0) {
                uint64_t v62 = (const std::string::value_type *)a1;
              }
              else {
                uint64_t v62 = *(const std::string::value_type **)a1;
              }
              if (v80 >= 0) {
                int v63 = &v78;
              }
              else {
                int v63 = v78;
              }
              uint64_t v22 = [v10 location];
              id v23 = [v22 path];
              uint64_t v64 = [v23 UTF8String];
              std::string::size_type v66 = v76;
              if (v77 < 0) {
                std::string::size_type v66 = (void **)v76[0];
              }
              char v67 = v74;
              if (v75 < 0) {
                char v67 = (void **)v74[0];
              }
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s has has older version \"%s\" than that in %s with version \"%s\" and but differential update has invalid minimum version \"%s\", preferring built in asset", v65, v62, v63, v64, v66, v67);
              goto LABEL_58;
            }
            int v55 = siri::dialogengine::VersionGreaterThan((uint64_t)v74, (uint64_t)&v78);
            if (*(char *)(a1 + 23) >= 0) {
              std::string::size_type v56 = (const std::string::value_type *)a1;
            }
            else {
              std::string::size_type v56 = *(const std::string::value_type **)a1;
            }
            if (v80 >= 0) {
              std::string v57 = &v78;
            }
            else {
              std::string v57 = v78;
            }
            if (v55)
            {
              uint64_t v22 = [v10 location];
              id v23 = [v22 path];
              uint64_t v58 = [v23 UTF8String];
              std::string v60 = v76;
              if (v77 < 0) {
                std::string v60 = (void **)v76[0];
              }
              std::string::size_type v61 = v74;
              if (v75 < 0) {
                std::string::size_type v61 = (void **)v74[0];
              }
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s has has older version \"%s\" than that in %s with version \"%s\" and but differential update has newer minimum version \"%s\", preferring built in asset", v59, v56, v57, v58, v60, v61);
              goto LABEL_58;
            }
            std::string::size_type v50 = [v10 location];
            id v51 = [v50 path];
            uint64_t v68 = [v51 UTF8String];
            long long v70 = v76;
            if (v77 < 0) {
              long long v70 = (void **)v76[0];
            }
            uint64_t v71 = v74;
            if (v75 < 0) {
              uint64_t v71 = (void **)v74[0];
            }
            siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s has has older version \"%s\" than that in %s with version \"%s\" and is newer than differential update with minimum version \"%s\", preferring asset", v69, v56, v57, v68, v70, v71);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) >= 0) {
            size_t v34 = (const std::string::value_type *)a1;
          }
          else {
            size_t v34 = *(const std::string::value_type **)a1;
          }
          char v35 = &v78;
          if (v80 < 0) {
            char v35 = v78;
          }
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s has invalid version \"%s\", preferring asset", v19, v34, v35);
        }
LABEL_47:
        std::string::size_type v36 = [v10 location];
        id v37 = [v36 path];
        uint64_t v38 = [v37 UTF8String];
        uint64_t v40 = v76;
        if (v77 < 0) {
          uint64_t v40 = (void **)v76[0];
        }
        if (*(char *)(a1 + 23) >= 0) {
          char v41 = (const std::string::value_type *)a1;
        }
        else {
          char v41 = *(const std::string::value_type **)a1;
        }
        int v42 = &v78;
        if (v80 < 0) {
          int v42 = v78;
        }
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Using updated template dir %s (version: \"%s\") instead of specified template dir %s (version: \"%s\")", v39, v38, v40, v41, v42);

        char v43 = [v10 location];
        id v44 = [v43 path];
        std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v44 UTF8String]);

        goto LABEL_62;
      }
    }
    else if (HIBYTE(v80))
    {
      goto LABEL_14;
    }
    if (*(char *)(a1 + 23) >= 0) {
      size_t v33 = (const std::string::value_type *)a1;
    }
    else {
      size_t v33 = *(const std::string::value_type **)a1;
    }
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"DialogAssetDelivery.plist in %s lacks version, preferring asset", v18, v33);
    goto LABEL_47;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
LABEL_68:
  if (SHIBYTE(v80) < 0) {
    operator delete(v78);
  }
  if (SHIBYTE(v82) < 0) {
    operator delete(v81[0]);
  }
}

void sub_1C60C37C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }

  if (a37 < 0) {
    operator delete(a32);
  }
  if (*(char *)(v41 - 81) < 0) {
    operator delete(*(void **)(v41 - 104));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogPercent::toString(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::FormatPercent(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  RequiredNumberuint64_t Parameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)__p, a2);
  char v4 = RequiredNumberParameter;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v4)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(__p, "units");
      OptionalStringuint64_t Parameter = (siri::dialogengine *)siri::dialogengine::GetOptionalStringParameter((const void **)__p, a2);
      std::string::size_type v6 = OptionalStringParameter;
      if (v14 < 0)
      {
        operator delete(__p[0]);
        if (!v6) {
          goto LABEL_53;
        }
      }
      else if (!OptionalStringParameter)
      {
        goto LABEL_53;
      }
      if (*((char *)v6 + 95) < 0) {
        std::string::__init_copy_ctor_external(&v12, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
      }
      else {
        std::string v12 = *(std::string *)((unsigned char *)v6 + 3);
      }
      siri::dialogengine::StringToLower((uint64_t)&v12, (uint64_t)__p);
      if (v14 < 0)
      {
        BOOL v8 = __p[1] != (void *)7 || *(_DWORD *)__p[0] != 1668441456 || *(_DWORD *)((char *)__p[0] + 3) != 1953391971;
        operator delete(__p[0]);
      }
      else
      {
        BOOL v8 = v14 != 7 || LODWORD(__p[0]) != 1668441456 || *(_DWORD *)((char *)__p + 3) != 1953391971;
      }
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v12.__r_.__value_.__l.__data_);
        if (!v8) {
          goto LABEL_53;
        }
      }
      else if (!v8)
      {
        goto LABEL_53;
      }
      (*(void (**)(void **__return_ptr, siri::dialogengine *))(*(void *)v6 + 48))(__p, v6);
      siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)__p, &v12);
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v11 = &v12;
      }
      else {
        unint64_t v11 = (std::string *)v12.__r_.__value_.__r.__words[0];
      }
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Invalid 'units' property provided for 'dialog.Percent' object: %s", v10, v11);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if (v24 < 0) {
        operator delete(v23);
      }
      if (v22 < 0) {
        operator delete(v21);
      }
      if (v20 < 0) {
        operator delete(v19);
      }
      if (v18 < 0) {
        operator delete(v17);
      }
      if (v16 < 0) {
        operator delete(v15);
      }
      if (v14 < 0) {
        operator delete(__p[0]);
      }
LABEL_53:
      siri::dialogengine::CreateJSONDoubleVal(OptionalStringParameter, v4[9]);
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C60C3DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(&a31);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogPercent::roundToHundredths(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPercent::roundToTenths(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void InitDefaultsscc_info_Button_Container_ButtonItem_Container_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Container.pb.cc", a4);
  SnippetUI::Button_Container_ButtonItem::Button_Container_ButtonItem((SnippetUI::Button_Container_ButtonItem *)&SnippetUI::_Button_Container_ButtonItem_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Button_Container_ButtonItem_default_instance_, v4);
  qword_1EB6900F8 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1EB690100 = &SnippetUI::_PlayerButton_default_instance_;
  qword_1EB690108 = (uint64_t)&SnippetUI::_CustomCanvas_default_instance_;
}

SnippetUI::Button_Container_ButtonItem *SnippetUI::Button_Container_ButtonItem::Button_Container_ButtonItem(SnippetUI::Button_Container_ButtonItem *this)
{
  *(void *)this = &unk_1F2124B48;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load_explicit(scc_info_Button_Container_ButtonItem_Container_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Button_Container_ButtonItem_Container_2eproto);
  }
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_1C60C40C0(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Button_Container_ButtonItem::GetMetadata(SnippetUI::Button_Container_ButtonItem *this)
{
  return file_level_metadata_Container_2eproto;
}

uint64_t SnippetUI::Button_Container_ButtonItem::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void SnippetUI::Button_Container_ButtonItem::MergeFrom(SnippetUI::Button_Container_ButtonItem *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Container.pb.cc", 437);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Button_Container_ButtonItem::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C60C41DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Button_Container_ButtonItem::MergeFrom(SnippetUI::Button_Container_ButtonItem *this, const SnippetUI::Button_Container_ButtonItem *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Container.pb.cc", 452);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Button_Container_ButtonItem *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  int v6 = *((_DWORD *)a2 + 7);
  if (v6 == 1)
  {
    if (*((_DWORD *)this + 7) == 1)
    {
      BOOL v8 = (SnippetUI::Button *)*((void *)this + 2);
    }
    else
    {
      SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      BOOL v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
      *((void *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) != 1)
      {
        unint64_t v11 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
        goto LABEL_23;
      }
    }
    unint64_t v11 = (const SnippetUI::Button *)*((void *)a2 + 2);
LABEL_23:
    SnippetUI::Button::MergeFrom(v8, v11);
    return;
  }
  if (v6 != 2)
  {
    if (v6 != 3) {
      return;
    }
    if (*((_DWORD *)this + 7) == 3)
    {
      char v7 = (SnippetUI::CustomCanvas *)*((void *)this + 2);
    }
    else
    {
      SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      char v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
      *((void *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) != 3)
      {
        id v10 = (const SnippetUI::CustomCanvas *)&SnippetUI::_CustomCanvas_default_instance_;
        goto LABEL_21;
      }
    }
    id v10 = (const SnippetUI::CustomCanvas *)*((void *)a2 + 2);
LABEL_21:
    SnippetUI::CustomCanvas::MergeFrom(v7, v10);
    return;
  }
  if (*((_DWORD *)this + 7) == 2)
  {
    uint64_t v9 = (SnippetUI::PlayerButton *)*((void *)this + 2);
  }
  else
  {
    SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
    *((_DWORD *)this + 7) = 2;
    uint64_t v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(0);
    *((void *)this + 2) = v9;
    if (*((_DWORD *)a2 + 7) != 2)
    {
      std::string v12 = (const SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_;
      goto LABEL_25;
    }
  }
  std::string v12 = (const SnippetUI::PlayerButton *)*((void *)a2 + 2);
LABEL_25:
  SnippetUI::PlayerButton::MergeFrom(v9, v12);
}

void sub_1C60C438C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Button_Container_ButtonItem::clear_value(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 28);
  if (v2 == 3 || v2 == 2 || v2 == 1)
  {
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

void SnippetUI::Button_Container_ButtonItem::CopyFrom(SnippetUI::Button_Container_ButtonItem *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Button_Container_ButtonItem::Clear(this);
    SnippetUI::Button_Container_ButtonItem::MergeFrom(this, a2);
  }
}

void SnippetUI::Button_Container_ButtonItem::Clear(SnippetUI::Button_Container_ButtonItem *this)
{
  SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::Button_Container_ButtonItem *)((char *)this + 8);
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Button_Container_ButtonItem::InternalSerializeWithCachedSizesToArray(SnippetUI::Button_Container_ButtonItem *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6 = *((_DWORD *)this + 7);
  if (v6 == 1)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    char v7 = (SnippetUI::Button *)*((void *)this + 2);
    *a2 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 17);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        unint64_t v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          std::string v12 = v11;
          *v11++ = v10 | 0x80;
          unsigned int v13 = v10 >> 7;
          unsigned int v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        uint64_t v9 = v12 + 2;
        *unint64_t v11 = v13;
      }
      else
      {
        a2[2] = v10;
        uint64_t v9 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v8;
      uint64_t v9 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v7, (google::protobuf::UnknownFieldSet *)v9, a3, a4);
    int v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    std::string::size_type v15 = (SnippetUI::PlayerButton *)*((void *)this + 2);
    *a2 = 18;
    unsigned int v16 = *((_DWORD *)v15 + 8);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        std::string::size_type v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          char v20 = v19;
          *v19++ = v18 | 0x80;
          unsigned int v21 = v18 >> 7;
          unsigned int v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        char v17 = v20 + 2;
        *std::string::size_type v19 = v21;
      }
      else
      {
        a2[2] = v18;
        char v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      char v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::PlayerButton::InternalSerializeWithCachedSizesToArray(v15, (char *)v17, a3, a4);
    int v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 3)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    id v23 = (SnippetUI::CustomCanvas *)*((void *)this + 2);
    *a2 = 26;
    unsigned int v24 = *((_DWORD *)v23 + 13);
    if (v24 > 0x7F)
    {
      a2[1] = v24 | 0x80;
      unsigned int v26 = v24 >> 7;
      if (v24 >> 14)
      {
        uint64_t v27 = (unsigned __int8 *)(a2 + 2);
        do
        {
          int v28 = v27;
          *v27++ = v26 | 0x80;
          unsigned int v29 = v26 >> 7;
          unsigned int v30 = v26 >> 14;
          v26 >>= 7;
        }
        while (v30);
        int v25 = v28 + 2;
        *uint64_t v27 = v29;
      }
      else
      {
        a2[2] = v26;
        int v25 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v24;
      int v25 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::CustomCanvas::InternalSerializeWithCachedSizesToArray(v23, (char *)v25, a3, a4);
  }
  uint64_t v31 = *((void *)this + 1);
  if ((v31 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v31 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::Button_Container_ButtonItem::_InternalParse(SnippetUI::Button_Container_ButtonItem *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  char v17 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23))) {
      return v17;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v17 + 1);
    unsigned int v8 = (char *)*(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      char v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v8);
    char v17 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    unsigned int v9 = v8 >> 3;
    if (v8 >> 3 == 3)
    {
      if (v8 == 26)
      {
        if (*((_DWORD *)this + 7) == 3)
        {
          unsigned int v13 = (SnippetUI::CustomCanvas *)*((void *)this + 2);
        }
        else
        {
          SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          unsigned int v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
          *((void *)this + 2) = v13;
          TagFallbacuint64_t k = v17;
        }
        std::string v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::CustomCanvas>(a3, v13, TagFallback);
        goto LABEL_34;
      }
    }
    else if (v9 == 2)
    {
      if (v8 == 18)
      {
        if (*((_DWORD *)this + 7) == 2)
        {
          unsigned int v14 = (SnippetUI::PlayerButton *)*((void *)this + 2);
        }
        else
        {
          SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(0);
          *((void *)this + 2) = v14;
          TagFallbacuint64_t k = v17;
        }
        std::string v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::PlayerButton>(a3, v14, TagFallback);
        goto LABEL_34;
      }
    }
    else if (v9 == 1 && v8 == 10)
    {
      if (*((_DWORD *)this + 7) == 1)
      {
        std::string::size_type v15 = (SnippetUI::Button *)*((void *)this + 2);
      }
      else
      {
        SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        std::string::size_type v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((void *)this + 2) = v15;
        TagFallbacuint64_t k = v17;
      }
      std::string v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Button>(a3, v15, TagFallback);
      goto LABEL_34;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    std::string v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
LABEL_34:
    char v17 = (google::protobuf::internal *)v12;
    if (!v12) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::PlayerButton>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::PlayerButton *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  char v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    BOOL result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  BOOL result = (char *)SnippetUI::PlayerButton::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t SnippetUI::Button_Container_ButtonItem::GetCachedSize(SnippetUI::Button_Container_ButtonItem *this)
{
  return *((unsigned int *)this + 6);
}

char *SnippetUI::Button_Container_ButtonItem::ByteSizeLong(SnippetUI::Button_Container_ButtonItem *this)
{
  int v2 = *((_DWORD *)this + 7);
  switch(v2)
  {
    case 3:
      char v3 = SnippetUI::CustomCanvas::ByteSizeLong(*((SnippetUI::CustomCanvas **)this + 2));
      goto LABEL_7;
    case 2:
      char v3 = SnippetUI::PlayerButton::ByteSizeLong(*((SnippetUI::PlayerButton **)this + 2));
      goto LABEL_7;
    case 1:
      char v3 = SnippetUI::Button::ByteSizeLong(*((SnippetUI::Button **)this + 2));
LABEL_7:
      char v4 = (const google::protobuf::UnknownFieldSet *)&v3[((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1];
      goto LABEL_9;
  }
  char v4 = 0;
LABEL_9:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Button_Container_ButtonItem *)((char *)this + 8), v4, (_DWORD *)this + 6);
  }
  else
  {
    *((_DWORD *)this + 6) = v4;
    return (char *)v4;
  }
}

uint64_t SnippetUI::Button_Container_ButtonItem::IsInitialized(SnippetUI::Button_Container_ButtonItem *this)
{
  return 1;
}

SnippetUI::Button_Container_ButtonItem *SnippetUI::Button_Container_ButtonItem::New(SnippetUI::Button_Container_ButtonItem *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container_ButtonItem>(a2);
}

SnippetUI::Button_Container_ButtonItem *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container_ButtonItem>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Button_Container_ButtonItem *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Button_Container_ButtonItem>);
  }
  SnippetUI::Button_Container_ButtonItem::Button_Container_ButtonItem(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60C4AF0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Button_Container_ButtonItem>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Button_Container_ButtonItem *SnippetUI::Button_Container_ButtonItem::New(SnippetUI::Button_Container_ButtonItem *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container_ButtonItem>(0);
}

void SnippetUI::Button_Container_ButtonItem::~Button_Container_ButtonItem(SnippetUI::Button_Container_ButtonItem *this)
{
  SnippetUI::Button_Container_ButtonItem::~Button_Container_ButtonItem(this);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F2124B48;
  if (*((_DWORD *)this + 7)) {
    SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Button_Container_Container_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Container.pb.cc", a4);
  SnippetUI::Button_Container::Button_Container((SnippetUI::Button_Container *)&SnippetUI::_Button_Container_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Button_Container_default_instance_, v4);
}

SnippetUI::Button_Container *SnippetUI::Button_Container::Button_Container(SnippetUI::Button_Container *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F2124C08;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load_explicit(scc_info_Button_Container_Container_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Button_Container_Container_2eproto);
  }
  return this;
}

void sub_1C60C4CC0(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Button_Container::GetMetadata(SnippetUI::Button_Container *this)
{
  return qword_1EA3DA3C8;
}

uint64_t SnippetUI::Button_Container::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void SnippetUI::Button_Container::MergeFrom(int **this, int **lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Container.pb.cc", 645);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Button_Container::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
  }
}

void sub_1C60C4DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Button_Container::MergeFrom(int **this, int **a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Container.pb.cc", 660);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  unint64_t v5 = (unint64_t)a2[1];
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Button_Container_ButtonItem>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
}

void sub_1C60C4E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Button_Container_ButtonItem>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    unsigned int v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      BOOL v13 = (SnippetUI::Button_Container_ButtonItem **)(v6 + 8);
      int v14 = (SnippetUI::Button_Container_ButtonItem **)v7;
      do
      {
        unsigned int v16 = *v13++;
        int v15 = v16;
        char v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Button_Container_ButtonItem>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      unsigned int v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      unsigned int v21 = (SnippetUI::Button_Container_ButtonItem **)((char *)v8 + v20);
      unsigned int v22 = (SnippetUI::Button_Container_ButtonItem **)(v20 + v6 + 8);
      do
      {
        id v23 = *v22++;
        unsigned int v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container_ButtonItem>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Button_Container_ButtonItem>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    unsigned int v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_1C60C4FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::Button_Container_ButtonItem>::Merge(SnippetUI::Button_Container_ButtonItem *a1, SnippetUI::Button_Container_ButtonItem *this)
{
}

void SnippetUI::Button_Container::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::Button_Container::Clear((SnippetUI::Button_Container *)this);
    SnippetUI::Button_Container::MergeFrom(this, a2);
  }
}

{
  uint64_t v2;

  if (a2 != this)
  {
    SnippetUI::Button_Container::Clear((SnippetUI::Button_Container *)this);
    SnippetUI::Button_Container::MergeFrom(this, a2);
  }
}

void SnippetUI::Button_Container::Clear(SnippetUI::Button_Container *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  else if (v2)
  {
    char v3 = (SnippetUI::Button_Container_ButtonItem **)(*((void *)this + 4) + 8);
    do
    {
      char v4 = *v3++;
      SnippetUI::Button_Container_ButtonItem::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  char v7 = *((unsigned char *)this + 8);
  uint64_t v6 = (SnippetUI::Button_Container *)((char *)this + 8);
  if (v7)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
  }
}

void sub_1C60C5138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *SnippetUI::Button_Container::InternalSerializeWithCachedSizesToArray(SnippetUI::Button_Container *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    int v8 = 0;
    while ((unint64_t)a2 < *(void *)a3)
    {
      if (v8 < 0) {
        goto LABEL_5;
      }
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        uint64_t v10 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
      }
      int v11 = *(SnippetUI::Button_Container_ButtonItem **)(*((void *)this + 4) + 8 * v8 + 8);
      *(unsigned char *)a2 = 10;
      unsigned int v12 = *((_DWORD *)v11 + 6);
      if (v12 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v12 | 0x80;
        unsigned int v14 = v12 >> 7;
        if (v12 >> 14)
        {
          int v15 = (char *)a2 + 2;
          do
          {
            unsigned int v16 = v15;
            *v15++ = v14 | 0x80;
            unsigned int v17 = v14 >> 7;
            unsigned int v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          BOOL v13 = v16 + 2;
          *int v15 = v17;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v14;
          BOOL v13 = (char *)a2 + 3;
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v12;
        BOOL v13 = (char *)a2 + 2;
      }
      a2 = SnippetUI::Button_Container_ButtonItem::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7) {
        goto LABEL_19;
      }
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    uint64_t v9 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  uint64_t v19 = *((void *)this + 1);
  if ((v19 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v19 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

void sub_1C60C5338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::Button_Container::_InternalParse(SnippetUI::Button_Container *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v30 = a2;
  int v5 = (unint64_t *)((char *)this + 8);
  uint64_t v6 = (unsigned int *)((char *)this + 16);
  do
  {
LABEL_2:
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23))) {
      return v30;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v30 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v30;
    if ((*(char *)v30 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v30 + 2);
LABEL_6:
      unsigned int v30 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, v9);
    unsigned int v30 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v9 == 10)
    {
      int v11 = (google::protobuf::internal *)((char *)TagFallback - 1);
      while (1)
      {
        unsigned int v12 = (google::protobuf::internal *)((char *)v11 + 1);
        unsigned int v30 = v12;
        BOOL v13 = (int *)*((void *)this + 4);
        if (!v13) {
          break;
        }
        uint64_t v14 = *((int *)this + 6);
        int v15 = *v13;
        if ((int)v14 < *v13)
        {
          *((_DWORD *)this + 6) = v14 + 1;
          unsigned int v16 = *(SnippetUI::Button_Container_ButtonItem **)&v13[2 * v14 + 2];
          goto LABEL_22;
        }
        if (v15 == *((_DWORD *)this + 7)) {
          goto LABEL_20;
        }
LABEL_21:
        *BOOL v13 = v15 + 1;
        unsigned int v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container_ButtonItem>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                                  + 2));
        uint64_t v17 = *((void *)this + 4);
        uint64_t v18 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v18 + 1;
        *(void *)(v17 + 8 * v18 + 8) = v16;
        unsigned int v12 = v30;
LABEL_22:
        unsigned int v19 = *(unsigned __int8 *)v12;
        if (*(char *)v12 < 0)
        {
          SizeFallbacuint64_t k = google::protobuf::internal::ReadSizeFallback(v12, (const char *)*(unsigned __int8 *)v12);
          if (!SizeFallback) {
            return 0;
          }
          uint64_t v20 = SizeFallback;
          unsigned int v19 = v22;
        }
        else
        {
          uint64_t v20 = (char *)v12 + 1;
        }
        int v23 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v20, v19);
        int v24 = *((_DWORD *)a3 + 22);
        BOOL v25 = __OFSUB__(v24--, 1);
        *((_DWORD *)a3 + 22) = v24;
        if (v24 < 0 != v25) {
          return 0;
        }
        int v26 = v23;
        int v11 = SnippetUI::Button_Container_ButtonItem::_InternalParse(v16, (google::protobuf::internal *)v20, a3);
        if (!v11) {
          return 0;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          return 0;
        }
        int v27 = *((_DWORD *)a3 + 7) + v26;
        *((_DWORD *)a3 + 7) = v27;
        unint64_t v28 = *((void *)a3 + 1) + (v27 & (v27 >> 31));
        *(void *)a3 = v28;
        unsigned int v30 = v11;
        if (v28 <= (unint64_t)v11 || *(unsigned char *)v11 != 10) {
          goto LABEL_2;
        }
      }
      int v15 = *((_DWORD *)this + 7);
LABEL_20:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v15 + 1);
      BOOL v13 = (int *)*((void *)this + 4);
      int v15 = *v13;
      goto LABEL_21;
    }
    if (v9) {
      BOOL v10 = (v9 & 7) == 4;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      *((_DWORD *)a3 + 20) = v9 - 1;
      return TagFallback;
    }
    unsigned int v30 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v5, TagFallback, a3, v7);
  }
  while (v30);
  return 0;
}

uint64_t SnippetUI::Button_Container::GetCachedSize(SnippetUI::Button_Container *this)
{
  return *((unsigned int *)this + 10);
}

char *SnippetUI::Button_Container::ByteSizeLong(SnippetUI::Button_Container *this)
{
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    char v4 = (SnippetUI::Button_Container_ButtonItem **)(v3 + 8);
  }
  else {
    char v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * (void)v2;
    do
    {
      uint64_t v6 = *v4++;
      int v7 = SnippetUI::Button_Container_ButtonItem::ByteSizeLong(v6);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (void)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Button_Container *)((char *)this + 8), v2, (_DWORD *)this + 10);
  }
  else
  {
    *((_DWORD *)this + 10) = v2;
    return (char *)v2;
  }
}

uint64_t SnippetUI::Button_Container::IsInitialized(SnippetUI::Button_Container *this)
{
  return 1;
}

SnippetUI::Button_Container *SnippetUI::Button_Container::New(SnippetUI::Button_Container *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container>(a2);
}

SnippetUI::Button_Container *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Button_Container *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Button_Container>);
  }
  SnippetUI::Button_Container::Button_Container(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60C56EC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Button_Container>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Button_Container *SnippetUI::Button_Container::New(SnippetUI::Button_Container *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button_Container>(0);
}

void SnippetUI::Button_Container::~Button_Container(SnippetUI::Button_Container *this)
{
  *(void *)this = &unk_1F2124C08;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Button_Container *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F2124C08;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Button_Container *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F2124C08;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Button_Container *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

void SnippetUI::Button_Container_ButtonItem::InitAsDefaultInstance(SnippetUI::Button_Container_ButtonItem *this)
{
  qword_1EB6900F8 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1EB690100 = &SnippetUI::_PlayerButton_default_instance_;
  qword_1EB690108 = (uint64_t)&SnippetUI::_CustomCanvas_default_instance_;
}

uint64_t SnippetUI::Button_Container_ButtonItem::_Internal::button(SnippetUI::Button_Container_ButtonItem::_Internal *this, const SnippetUI::Button_Container_ButtonItem *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::Button_Container_ButtonItem::_Internal::player_button(SnippetUI::Button_Container_ButtonItem::_Internal *this, const SnippetUI::Button_Container_ButtonItem *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::Button_Container_ButtonItem::_Internal::custom_canvas(SnippetUI::Button_Container_ButtonItem::_Internal *this, const SnippetUI::Button_Container_ButtonItem *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::Button_Container_ButtonItem::set_allocated_button(SnippetUI::Button_Container_ButtonItem *this, SnippetUI::Button *a2)
{
  uint64_t result = SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 1;
    *((void *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::Button_Container_ButtonItem::clear_button(uint64_t this)
{
  if (*(_DWORD *)(this + 28) == 1)
  {
    uint64_t v1 = this;
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
    *(_DWORD *)(v1 + 28) = 0;
  }
  return this;
}

uint64_t SnippetUI::Button_Container_ButtonItem::set_allocated_player_button(SnippetUI::Button_Container_ButtonItem *this, SnippetUI::PlayerButton *a2)
{
  uint64_t result = SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 2;
    *((void *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::Button_Container_ButtonItem::clear_player_button(uint64_t this)
{
  if (*(_DWORD *)(this + 28) == 2)
  {
    uint64_t v1 = this;
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
    *(_DWORD *)(v1 + 28) = 0;
  }
  return this;
}

uint64_t SnippetUI::Button_Container_ButtonItem::set_allocated_custom_canvas(SnippetUI::Button_Container_ButtonItem *this, SnippetUI::CustomCanvas *a2)
{
  uint64_t result = SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 3;
    *((void *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::Button_Container_ButtonItem::clear_custom_canvas(uint64_t this)
{
  if (*(_DWORD *)(this + 28) == 3)
  {
    uint64_t v1 = this;
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
    *(_DWORD *)(v1 + 28) = 0;
  }
  return this;
}

SnippetUI::Button_Container_ButtonItem *SnippetUI::Button_Container_ButtonItem::Button_Container_ButtonItem(SnippetUI::Button_Container_ButtonItem *this, const SnippetUI::Button_Container_ButtonItem *a2)
{
  *(void *)this = &unk_1F2124B48;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Button_Container_ButtonItem *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((_DWORD *)this + 7) = 0;
  int v5 = *((_DWORD *)a2 + 7);
  switch(v5)
  {
    case 1:
      SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      int v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
      *((void *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) == 1) {
        uint64_t v9 = (const SnippetUI::Button *)*((void *)a2 + 2);
      }
      else {
        uint64_t v9 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      }
      SnippetUI::Button::MergeFrom(v8, v9);
      break;
    case 2:
      SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      BOOL v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(0);
      *((void *)this + 2) = v10;
      if (*((_DWORD *)a2 + 7) == 2) {
        int v11 = (const SnippetUI::PlayerButton *)*((void *)a2 + 2);
      }
      else {
        int v11 = (const SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_;
      }
      SnippetUI::PlayerButton::MergeFrom(v10, v11);
      break;
    case 3:
      SnippetUI::Button_Container_ButtonItem::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      uint64_t v6 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
      *((void *)this + 2) = v6;
      if (*((_DWORD *)a2 + 7) == 3) {
        int v7 = (const SnippetUI::CustomCanvas *)*((void *)a2 + 2);
      }
      else {
        int v7 = (const SnippetUI::CustomCanvas *)&SnippetUI::_CustomCanvas_default_instance_;
      }
      SnippetUI::CustomCanvas::MergeFrom(v6, v7);
      break;
  }
  return this;
}

void sub_1C60C5B44(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Button_Container_ButtonItem::default_instance(SnippetUI::Button_Container_ButtonItem *this)
{
  if (atomic_load_explicit(scc_info_Button_Container_ButtonItem_Container_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Button_Container_ButtonItem_Container_2eproto);
  }
  return &SnippetUI::_Button_Container_ButtonItem_default_instance_;
}

void SnippetUI::Button_Container_ButtonItem::CopyFrom(SnippetUI::Button_Container_ButtonItem *this, const SnippetUI::Button_Container_ButtonItem *a2)
{
  if (a2 != this)
  {
    SnippetUI::Button_Container_ButtonItem::Clear(this);
    SnippetUI::Button_Container_ButtonItem::MergeFrom(this, a2);
  }
}

void SnippetUI::Button_Container_ButtonItem::InternalSwap(SnippetUI::Button_Container_ButtonItem *this, SnippetUI::Button_Container_ButtonItem *a2)
{
  uint64_t v4 = (SnippetUI::Button_Container_ButtonItem *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
}

SnippetUI::Button_Container *SnippetUI::Button_Container::Button_Container(SnippetUI::Button_Container *this, const SnippetUI::Button_Container *a2)
{
  *(void *)this = &unk_1F2124C08;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (SnippetUI::Button_Container *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Button_Container_ButtonItem>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 10) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  return this;
}

void sub_1C60C5CF4(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Button_Container::default_instance(SnippetUI::Button_Container *this)
{
  if (atomic_load_explicit(scc_info_Button_Container_Container_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Button_Container_Container_2eproto);
  }
  return &SnippetUI::_Button_Container_default_instance_;
}

void SnippetUI::Button_Container::InternalSwap(SnippetUI::Button_Container *this, SnippetUI::Button_Container *a2)
{
  uint64_t v4 = (SnippetUI::Button_Container *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v7;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Button_Container *)((char *)this + 16), (SnippetUI::Button_Container *)((char *)a2 + 16));
}

void InitDefaultsscc_info_Switch_Switch_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Switch.pb.cc", a4);
  SnippetUI::Switch::Switch((SnippetUI::Switch *)&SnippetUI::_Switch_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Switch_default_instance_, v4);
  qword_1EB68F3D8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB68F3E0 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Switch *SnippetUI::Switch::Switch(SnippetUI::Switch *this)
{
  *(void *)this = &unk_1F2124CF8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 13) = 0;
  if (atomic_load_explicit(scc_info_Switch_Switch_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Switch_Switch_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = 0;
  return this;
}

void sub_1C60C5F68(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Switch::GetMetadata(SnippetUI::Switch *this)
{
  return file_level_metadata_Switch_2eproto;
}

uint64_t SnippetUI::Switch::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 52) = a2;
  return this;
}

void SnippetUI::Switch::MergeFrom(SnippetUI::Switch *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Switch.pb.cc", 372);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Switch::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C60C6084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Switch::MergeFrom(SnippetUI::Switch *this, const SnippetUI::Switch *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Switch.pb.cc", 387);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Switch *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::Switch *)&SnippetUI::_Switch_default_instance_)
  {
    BOOL v10 = (int **)*((void *)a2 + 4);
    if (v10)
    {
      int v11 = (int **)*((void *)this + 4);
      if (!v11)
      {
        int v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 4) = v11;
        BOOL v10 = (int **)*((void *)a2 + 4);
      }
      if (v10) {
        unsigned int v12 = v10;
      }
      else {
        unsigned int v12 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v11, v12);
    }
    BOOL v13 = (int **)*((void *)a2 + 5);
    if (v13)
    {
      uint64_t v14 = (int **)*((void *)this + 5);
      if (!v14)
      {
        uint64_t v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 5) = v14;
        BOOL v13 = (int **)*((void *)a2 + 5);
      }
      if (v13) {
        int v15 = v13;
      }
      else {
        int v15 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v14, v15);
    }
  }
  if (*((unsigned char *)a2 + 48)) {
    *((unsigned char *)this + 48) = 1;
  }
}

void sub_1C60C6240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Switch::CopyFrom(SnippetUI::Switch *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Switch::Clear(this);
    SnippetUI::Switch::MergeFrom(this, a2);
  }
}

void SnippetUI::Switch::Clear(SnippetUI::Switch *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  char v7 = *((unsigned char *)this + 8);
  uint64_t v6 = (char *)this + 8;
  *((void *)v6 + 4) = 0;
  v6[40] = 0;
  if (v7)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v6);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Switch::InternalSerializeWithCachedSizesToArray(SnippetUI::Switch *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char v7 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    uint64_t v8 = (const char *)*((void *)v7 + 1);
    if (!v8) {
      goto LABEL_7;
    }
    char v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  uint64_t v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((unsigned char *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.Switch.identifier");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 2), a2);
  }
LABEL_7:
  if (this == (SnippetUI::Switch *)&SnippetUI::_Switch_default_instance_) {
    goto LABEL_31;
  }
  uint64_t v9 = (SnippetUI::ActionProperty *)*((void *)this + 4);
  if (v9)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      uint64_t v9 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    }
    *a2 = 18;
    unsigned int v10 = *((_DWORD *)v9 + 12);
    if (v10 > 0x7F)
    {
      a2[1] = v10 | 0x80;
      unsigned int v12 = v10 >> 7;
      if (v10 >> 14)
      {
        uint64_t v14 = (unsigned __int8 *)(a2 + 2);
        do
        {
          int v15 = v14;
          *v14++ = v12 | 0x80;
          unsigned int v16 = v12 >> 7;
          unsigned int v17 = v12 >> 14;
          v12 >>= 7;
        }
        while (v17);
        BOOL v13 = (google::protobuf::UnknownFieldSet *)(v15 + 2);
        *uint64_t v14 = v16;
        goto LABEL_19;
      }
      a2[2] = v12;
      uint64_t v11 = 3;
    }
    else
    {
      a2[1] = v10;
      uint64_t v11 = 2;
    }
    BOOL v13 = (google::protobuf::UnknownFieldSet *)&a2[v11];
LABEL_19:
    a2 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v9, v13, a3, a4);
  }
  uint64_t v18 = (SnippetUI::ActionProperty *)*((void *)this + 5);
  if (v18)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      uint64_t v18 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    }
    *a2 = 26;
    unsigned int v19 = *((_DWORD *)v18 + 12);
    if (v19 > 0x7F)
    {
      a2[1] = v19 | 0x80;
      unsigned int v21 = v19 >> 7;
      if (v19 >> 14)
      {
        unsigned int v22 = (unsigned __int8 *)(a2 + 2);
        do
        {
          int v23 = v22;
          *v22++ = v21 | 0x80;
          unsigned int v24 = v21 >> 7;
          unsigned int v25 = v21 >> 14;
          v21 >>= 7;
        }
        while (v25);
        uint64_t v20 = v23 + 2;
        *unsigned int v22 = v24;
      }
      else
      {
        a2[2] = v21;
        uint64_t v20 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v19;
      uint64_t v20 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v18, (google::protobuf::UnknownFieldSet *)v20, a3, a4);
  }
LABEL_31:
  if (*((unsigned char *)this + 48))
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned __int8 v26 = *((unsigned char *)this + 48);
    }
    else
    {
      unsigned __int8 v26 = 1;
    }
    *a2 = 32;
    a2[1] = v26;
    a2 += 2;
  }
  uint64_t v27 = *((void *)this + 3);
  if ((*(char *)(v27 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v27 + 23)) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (*(void *)(v27 + 8)) {
LABEL_37:
  }
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, (const void **)v27, a2);
LABEL_38:
  uint64_t v28 = *((void *)this + 1);
  if ((v28 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v28 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::Switch::_InternalParse(SnippetUI::Switch *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v20 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  char v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v20, *((_DWORD *)a3 + 23))) {
      return v20;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v20 + 1);
    unsigned int v10 = (char *)*(unsigned __int8 *)v20;
    if ((*(char *)v20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v20 + 2);
LABEL_6:
      uint64_t v20 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v20, v10);
    uint64_t v20 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_29;
        }
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v6, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Switch.identifier");
        goto LABEL_34;
      case 2u:
        if (v10 != 18) {
          goto LABEL_29;
        }
        unsigned int v12 = (SnippetUI::ActionProperty *)*((void *)this + 4);
        if (v12) {
          goto LABEL_19;
        }
        unsigned int v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 4) = v12;
        goto LABEL_18;
      case 3u:
        if (v10 != 26) {
          goto LABEL_29;
        }
        unsigned int v12 = (SnippetUI::ActionProperty *)*((void *)this + 5);
        if (v12) {
          goto LABEL_19;
        }
        unsigned int v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 5) = v12;
LABEL_18:
        TagFallbacuint64_t k = v20;
LABEL_19:
        uint64_t v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v12, TagFallback);
        goto LABEL_34;
      case 4u:
        if (v10 != 32) {
          goto LABEL_29;
        }
        BOOL v13 = (google::protobuf::internal *)((char *)TagFallback + 1);
        unint64_t v14 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_24;
        }
        int v15 = *(char *)v13;
        unint64_t v14 = v14 + (v15 << 7) - 128;
        if (v15 < 0)
        {
          unsigned int v17 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v14);
          uint64_t v20 = v17;
          *((unsigned char *)this + 48) = v18 != 0;
          if (!v17) {
            goto LABEL_39;
          }
        }
        else
        {
          BOOL v13 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_24:
          uint64_t v20 = v13;
          *((unsigned char *)this + 48) = v14 != 0;
        }
        continue;
      case 5u:
        if (v10 != 42) {
          goto LABEL_29;
        }
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v11 = google::protobuf::internal::InlineGreedyStringParser(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_34;
      default:
LABEL_29:
        if (v10) {
          BOOL v16 = (v10 & 7) == 4;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        uint64_t v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_34:
        uint64_t v20 = (google::protobuf::internal *)v11;
        if (v11) {
          continue;
        }
LABEL_39:
        TagFallbacuint64_t k = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::Switch::GetCachedSize(SnippetUI::Switch *this)
{
  return *((unsigned int *)this + 13);
}

char *SnippetUI::Switch::ByteSizeLong(SnippetUI::Switch *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  if (this != (SnippetUI::Switch *)&SnippetUI::_Switch_default_instance_)
  {
    uint64_t v9 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    if (v9)
    {
      unsigned int v10 = SnippetUI::ActionProperty::ByteSizeLong(v9);
      v5 += (uint64_t)&v10[((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    uint64_t v11 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    if (v11)
    {
      unsigned int v12 = SnippetUI::ActionProperty::ByteSizeLong(v11);
      v5 += (uint64_t)&v12[((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((unsigned char *)this + 48)) {
    BOOL v13 = (const google::protobuf::UnknownFieldSet *)(v5 + 2);
  }
  else {
    BOOL v13 = (const google::protobuf::UnknownFieldSet *)v5;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Switch *)((char *)this + 8), v13, (_DWORD *)this + 13);
  }
  else
  {
    *((_DWORD *)this + 13) = v13;
    return (char *)v13;
  }
}

uint64_t SnippetUI::Switch::IsInitialized(SnippetUI::Switch *this)
{
  return 1;
}

SnippetUI::Switch *SnippetUI::Switch::New(SnippetUI::Switch *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Switch>(a2);
}

SnippetUI::Switch *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Switch>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Switch *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Switch>);
  }
  SnippetUI::Switch::Switch(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60C6AE0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C405CE0ED13);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Switch>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Switch *SnippetUI::Switch::New(SnippetUI::Switch *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Switch>(0);
}

void SnippetUI::Switch::~Switch(SnippetUI::Switch *this)
{
  SnippetUI::Switch::~Switch(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(void *)this = &unk_1F2124CF8;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Switch *)&SnippetUI::_Switch_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::Switch::InitAsDefaultInstance(SnippetUI::Switch *this)
{
  qword_1EB68F3D8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB68F3E0 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Switch::_Internal::on_action(SnippetUI::Switch::_Internal *this, const SnippetUI::Switch *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::Switch::_Internal::off_action(SnippetUI::Switch::_Internal *this, const SnippetUI::Switch *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::Switch::clear_on_action(SnippetUI::Switch *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Switch::clear_off_action(SnippetUI::Switch *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

SnippetUI::Switch *SnippetUI::Switch::Switch(SnippetUI::Switch *this, const SnippetUI::Switch *a2)
{
  *(void *)this = &unk_1F2124CF8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 13) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Switch *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (a2 == (const SnippetUI::Switch *)&SnippetUI::_Switch_default_instance_)
  {
    *((void *)this + 4) = 0;
  }
  else
  {
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
  }
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  return this;
}

void sub_1C60C6ED0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Switch::default_instance(SnippetUI::Switch *this)
{
  if (atomic_load_explicit(scc_info_Switch_Switch_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Switch_Switch_2eproto);
  }
  return &SnippetUI::_Switch_default_instance_;
}

void SnippetUI::Switch::CopyFrom(SnippetUI::Switch *this, const SnippetUI::Switch *a2)
{
  if (a2 != this)
  {
    SnippetUI::Switch::Clear(this);
    SnippetUI::Switch::MergeFrom(this, a2);
  }
}

void SnippetUI::Switch::InternalSwap(SnippetUI::Switch *this, SnippetUI::Switch *a2)
{
  uint64_t v4 = (SnippetUI::Switch *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v21;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  std::string v9[2] = v10;
LABEL_13:
  BOOL v13 = (uint64_t *)*((void *)this + 3);
  unint64_t v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    BOOL v13 = (uint64_t *)*((void *)this + 3);
  }
  int v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)BOOL v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)int v15 = v17;
  v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  LOBYTE(v20) = *((unsigned char *)this + 48);
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  *((unsigned char *)a2 + 48) = v20;
}

void YAML::Scanner::ScanDirective(YAML::Scanner *this)
{
  memset(v26, 0, 24);
  YAML::Scanner::PopAllIndents(this);
  for (uint64_t i = *((void *)this + 24); i; uint64_t i = *((void *)this + 24))
  {
    *((void *)this + 24) = i - 1;
    std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((void *)this + 19);
  }
  *((_WORD *)this + 73) = 0;
  uint64_t v3 = *((void *)this + 1);
  int v4 = *((_DWORD *)this + 4);
  *(void *)&long long v20 = 0;
  *((void *)&v20 + 1) = v3;
  int v21 = v4;
  *(_OWORD *)std::string __p = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  int v25 = 0;
  YAML::Stream::get(this);
  while (YAML::Stream::operator BOOL(this))
  {
    {
      if (v6)
      {
        YAML::Exp::Blank(v6);
        YAML::Exp::Break(v7);
        YAML::operator|(YAML::Exp::Blank(void)::e, YAML::Exp::Break(void)::e, (uint64_t)YAML::Exp::BlankOrBreak(void)::e);
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::BlankOrBreak(void)::e, &dword_1C5C1E000);
      }
    }
    v18.__r_.__value_.__r.__words[0] = 0;
    v18.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::BlankOrBreak(void)::e, (unint64_t *)&v18) & 0x80000000) == 0)break; {
    std::string::value_type v5 = YAML::Stream::get(this);
    }
    std::string::push_back((std::string *)__p, v5);
  }
  while (1)
  {
    while (1)
    {
      {
        if (v16)
        {
          YAML::Exp::Space(v16);
          YAML::Exp::Tab(v17);
          YAML::operator|(&YAML::Exp::Space(void)::e, &YAML::Exp::Tab(void)::e, (uint64_t)YAML::Exp::Blank(void)::e);
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::Blank(void)::e, &dword_1C5C1E000);
        }
      }
      v18.__r_.__value_.__r.__words[0] = 0;
      v18.__r_.__value_.__l.__size_ = (std::string::size_type)this;
      if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Blank(void)::e, (unint64_t *)&v18) & 0x80000000) != 0) {
        break;
      }
      YAML::Stream::get(this);
    }
    BOOL v8 = YAML::Stream::operator BOOL(this);
    if (!v8) {
      break;
    }
    YAML::Exp::Break((YAML::Exp *)v8);
    v18.__r_.__value_.__r.__words[0] = 0;
    v18.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, (unint64_t *)&v18) & 0x80000000) == 0) {
      break;
    }
    {
      YAML::Exp::Comment(void)::e = 1;
      word_1EA3D788C = 35;
      qword_1EA3D7898 = 0;
      unk_1EA3D78A0 = 0;
      qword_1EA3D7890 = 0;
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_1C5C1E000);
    }
    LODWORD(v18.__r_.__value_.__l.__data_) = YAML::Exp::Comment(void)::e;
    WORD2(v18.__r_.__value_.__r.__words[0]) = word_1EA3D788C;
    uint64_t v19 = 0;
    *(_OWORD *)&v18.__r_.__value_.__r.__words[1] = 0uLL;
    std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(&v18.__r_.__value_.__l.__size_, (int *)qword_1EA3D7890, (int *)qword_1EA3D7898, (qword_1EA3D7898 - qword_1EA3D7890) >> 5);
    p_std::string::size_type size = 0;
    uint64_t v28 = this;
    int v9 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&v18, (unint64_t *)&p_size);
    p_std::string::size_type size = &v18.__r_.__value_.__l.__size_;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
    if ((v9 & 0x80000000) == 0) {
      break;
    }
    memset(&v18, 0, sizeof(v18));
    while (YAML::Stream::operator BOOL(this))
    {
      {
        if (v11)
        {
          YAML::Exp::Blank(v11);
          YAML::Exp::Break(v12);
          YAML::operator|(YAML::Exp::Blank(void)::e, YAML::Exp::Break(void)::e, (uint64_t)YAML::Exp::BlankOrBreak(void)::e);
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::BlankOrBreak(void)::e, &dword_1C5C1E000);
        }
      }
      p_std::string::size_type size = 0;
      uint64_t v28 = this;
      if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::BlankOrBreak(void)::e, (unint64_t *)&p_size) & 0x80000000) == 0)break; {
      std::string::value_type v10 = YAML::Stream::get(this);
      }
      std::string::push_back(&v18, v10);
    }
    BOOL v13 = (_OWORD *)v24;
    if ((unint64_t)v24 >= *((void *)&v24 + 1))
    {
      uint64_t v15 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v23 + 1, (long long *)&v18);
    }
    else
    {
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v24, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v14 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
        *(void *)(v24 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *((void *)&v18.__r_.__value_.__l + 2);
        *BOOL v13 = v14;
      }
      uint64_t v15 = (uint64_t)v13 + 24;
    }
    *(void *)&long long v24 = v15;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
  std::deque<YAML::Token>::push_back((void *)this + 12, &v20);
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v20 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_1C60C755C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  a17 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

std::string *std::deque<YAML::Token>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 51 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<YAML::Token>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x33)) + 80 * (v7 % 0x33);
  }
  long long v9 = *a2;
  *(_DWORD *)(v8 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)unint64_t v8 = v9;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v8 + 24), *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 24);
    *(void *)(v8 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v8 + 24) = v10;
  }
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  uint64_t result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v8 + 48), *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
  *(_DWORD *)(v8 + 72) = *((_DWORD *)a2 + 18);
  ++a1[5];
  return result;
}

void sub_1C60C773C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void YAML::Scanner::ScanDocStart(YAML::Scanner *this)
{
  YAML::Scanner::PopAllIndents(this);
  for (uint64_t i = *((void *)this + 24); i; uint64_t i = *((void *)this + 24))
  {
    *((void *)this + 24) = i - 1;
    std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((void *)this + 19);
  }
  *((_WORD *)this + 73) = 0;
  uint64_t v3 = *((void *)this + 1);
  int v4 = 3;
  int v5 = *((_DWORD *)this + 4);
  do
  {
    YAML::Stream::get(this);
    --v4;
  }
  while (v4);
  *(void *)&long long v6 = 0x100000000;
  *((void *)&v6 + 1) = v3;
  int v7 = v5;
  *(_OWORD *)std::string __p = 0u;
  memset(v9, 0, sizeof(v9));
  int v10 = 0;
  std::deque<YAML::Token>::push_back((void *)this + 12, &v6);
  long long v11 = (void **)v9 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (SBYTE7(v9[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C60C7824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanDocEnd(YAML::Scanner *this)
{
  YAML::Scanner::PopAllIndents(this);
  for (uint64_t i = *((void *)this + 24); i; uint64_t i = *((void *)this + 24))
  {
    *((void *)this + 24) = i - 1;
    std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((void *)this + 19);
  }
  *((_WORD *)this + 73) = 0;
  uint64_t v3 = *((void *)this + 1);
  int v4 = 3;
  int v5 = *((_DWORD *)this + 4);
  do
  {
    YAML::Stream::get(this);
    --v4;
  }
  while (v4);
  *(void *)&long long v6 = 0x200000000;
  *((void *)&v6 + 1) = v3;
  int v7 = v5;
  *(_OWORD *)std::string __p = 0u;
  memset(v9, 0, sizeof(v9));
  int v10 = 0;
  std::deque<YAML::Token>::push_back((void *)this + 12, &v6);
  long long v11 = (void **)v9 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (SBYTE7(v9[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C60C7904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanFlowStart(YAML::Scanner *this)
{
  YAML::Scanner::InsertPotentialSimpleKey(this);
  *((_WORD *)this + 73) = 1;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  int v4 = YAML::Stream::get(this);
  int v5 = v4;
  long long v6 = (char **)((char *)this + 280);
  int v7 = (char *)*((void *)this + 36);
  unint64_t v8 = (char *)*((void *)this + 35);
  uint64_t v9 = v7 - v8;
  if (v7 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = ((v7 - v8) << 7) - 1;
  }
  BOOL v11 = v4 == 91;
  unint64_t v13 = *((void *)this + 38);
  uint64_t v12 = *((void *)this + 39);
  unint64_t v14 = v12 + v13;
  if (v10 == v12 + v13)
  {
    BOOL v124 = v4 == 91;
    if (v13 < 0x400)
    {
      int v122 = v3;
      uint64_t v123 = v2;
      uint64_t v31 = v9 >> 3;
      uint64_t v32 = (char *)*((void *)this + 37);
      size_t v33 = (char *)*((void *)this + 34);
      uint64_t v34 = v32 - v33;
      if (v9 >> 3 >= (unint64_t)((v32 - v33) >> 3))
      {
        if (v32 == v33) {
          unint64_t v37 = 1;
        }
        else {
          unint64_t v37 = v34 >> 2;
        }
        uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v37);
        uint64_t v40 = v39;
        uint64_t v41 = &v38[8 * v31];
        *(void *)&long long v42 = v38;
        *((void *)&v42 + 1) = v41;
        long long v128 = v42;
        char v43 = operator new(0x1000uLL);
        *(void *)&long long v44 = v41;
        *((void *)&v44 + 1) = &v38[8 * v40];
        if (v31 == v40)
        {
          uint64_t v45 = 8 * v31;
          uint64_t v2 = v123;
          *(void *)&long long v46 = v128;
          if (v9 < 1)
          {
            std::string v85 = v43;
            uint64_t v86 = v45 >> 2;
            if (v7 == v8) {
              unint64_t v87 = 1;
            }
            else {
              unint64_t v87 = v86;
            }
            std::string v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v87);
            uint64_t v41 = &v88[8 * (v87 >> 2)];
            *(void *)&long long v46 = v88;
            *((void *)&v46 + 1) = v41;
            *(void *)&long long v44 = v41;
            *((void *)&v44 + 1) = &v88[8 * v89];
            if (v38)
            {
              long long v125 = v44;
              long long v129 = v46;
              operator delete(v38);
              long long v44 = v125;
              long long v46 = v129;
            }
            char v43 = v85;
          }
          else
          {
            uint64_t v47 = v45 >> 3;
            if (v47 >= -1) {
              unint64_t v48 = v47 + 1;
            }
            else {
              unint64_t v48 = v47 + 2;
            }
            v41 -= 8 * (v48 >> 1);
            *(void *)&long long v44 = v41;
            *((void *)&v46 + 1) = v41;
          }
        }
        else
        {
          uint64_t v2 = v123;
          long long v46 = v128;
        }
        *(void *)uint64_t v41 = v43;
        *(void *)&long long v44 = v44 + 8;
        for (uint64_t i = (char *)*((void *)this + 36); i != *v6; i -= 8)
        {
          int v91 = (void *)*((void *)&v46 + 1);
          if (*((void *)&v46 + 1) == (void)v46)
          {
            std::string::size_type v93 = (unsigned char *)v44;
            if ((unint64_t)v44 >= *((void *)&v44 + 1))
            {
              if (*((void *)&v44 + 1) == *((void *)&v46 + 1)) {
                unint64_t v98 = 1;
              }
              else {
                unint64_t v98 = (uint64_t)(*((void *)&v44 + 1) - *((void *)&v46 + 1)) >> 2;
              }
              std::string v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v98);
              long long v92 = &v99[(2 * v98 + 6) & 0xFFFFFFFFFFFFFFF8];
              std::string v101 = v92;
              uint64_t v102 = v93 - (unsigned char *)v91;
              if (v93 != (unsigned char *)v91)
              {
                std::string v101 = &v92[v102 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v103 = 8 * (v102 >> 3);
                char v104 = v92;
                std::string v105 = v91;
                do
                {
                  uint64_t v106 = *v105++;
                  *(void *)char v104 = v106;
                  v104 += 8;
                  v103 -= 8;
                }
                while (v103);
              }
              *(void *)&long long v46 = v99;
              *((void *)&v46 + 1) = v92;
              *(void *)&long long v44 = v101;
              *((void *)&v44 + 1) = &v99[8 * v100];
              if (v91)
              {
                long long v126 = v44;
                long long v131 = v46;
                operator delete(v91);
                long long v44 = v126;
                long long v46 = v131;
              }
            }
            else
            {
              uint64_t v94 = (uint64_t)(*((void *)&v44 + 1) - v44) >> 3;
              if (v94 >= -1) {
                uint64_t v95 = v94 + 1;
              }
              else {
                uint64_t v95 = v94 + 2;
              }
              uint64_t v96 = v95 >> 1;
              uint64_t v97 = v44 + 8 * (v95 >> 1);
              long long v92 = (char *)(v97 - (v44 - *((void *)&v46 + 1)));
              if ((void)v44 == *((void *)&v46 + 1))
              {
                std::string::size_type v93 = (unsigned char *)*((void *)&v46 + 1);
              }
              else
              {
                uint64_t v127 = *((void *)&v44 + 1);
                uint64_t v130 = v46;
                memmove((void *)(v97 - (v44 - *((void *)&v46 + 1))), *((const void **)&v46 + 1), v44 - *((void *)&v46 + 1));
                *((void *)&v44 + 1) = v127;
                *(void *)&long long v46 = v130;
              }
              *((void *)&v46 + 1) = v92;
              *(void *)&long long v44 = &v93[8 * v96];
            }
          }
          else
          {
            long long v92 = (char *)*((void *)&v46 + 1);
          }
          uint64_t v107 = *((void *)i - 1);
          *((void *)v92 - 1) = v107;
          *((void *)&v46 + 1) -= 8;
        }
        long long v108 = (void *)*((void *)this + 34);
        *((_OWORD *)this + 17) = v46;
        *((_OWORD *)this + 18) = v44;
        int v3 = v122;
        if (v108) {
          operator delete(v108);
        }
      }
      else
      {
        char v35 = operator new(0x1000uLL);
        std::string::size_type v36 = v35;
        if (v32 == v7)
        {
          if (v33 == v8)
          {
            if (v7 == v8) {
              unint64_t v62 = 1;
            }
            else {
              unint64_t v62 = v34 >> 2;
            }
            uint64_t v63 = 2 * v62;
            uint64_t v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v62);
            unint64_t v8 = &v64[(v63 + 6) & 0xFFFFFFFFFFFFFFF8];
            std::string::size_type v66 = (uint64_t *)*((void *)this + 35);
            char v67 = v8;
            uint64_t v68 = *((void *)this + 36) - (void)v66;
            if (v68)
            {
              char v67 = &v8[v68 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v69 = 8 * (v68 >> 3);
              long long v70 = v8;
              do
              {
                uint64_t v71 = *v66++;
                *(void *)long long v70 = v71;
                v70 += 8;
                v69 -= 8;
              }
              while (v69);
            }
            uint64_t v72 = (void *)*((void *)this + 34);
            *((void *)this + 34) = v64;
            *((void *)this + 35) = v8;
            *((void *)this + 36) = v67;
            *((void *)this + 37) = &v64[8 * v65];
            if (v72)
            {
              operator delete(v72);
              unint64_t v8 = *v6;
            }
          }
          *((void *)v8 - 1) = v36;
          char v73 = (char *)*((void *)this + 35);
          v74 = (char *)*((void *)this + 36);
          *((void *)this + 35) = v73 - 8;
          uint64_t v75 = *((void *)v73 - 1);
          *((void *)this + 35) = v73;
          uint64_t v2 = v123;
          if (v74 == *((char **)this + 37))
          {
            unint64_t v76 = *((void *)this + 34);
            uint64_t v77 = (uint64_t)&v73[-v76];
            if ((unint64_t)v73 <= v76)
            {
              uint64_t v109 = (uint64_t)&v74[-v76];
              BOOL v49 = v109 == 0;
              uint64_t v110 = v109 >> 2;
              if (v49) {
                unint64_t v111 = 1;
              }
              else {
                unint64_t v111 = v110;
              }
              std::string v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v111);
              long long v114 = &v112[8 * (v111 >> 2)];
              std::string v115 = (uint64_t *)*((void *)this + 35);
              v74 = v114;
              uint64_t v116 = *((void *)this + 36) - (void)v115;
              if (v116)
              {
                v74 = &v114[v116 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v117 = 8 * (v116 >> 3);
                std::string v118 = &v112[8 * (v111 >> 2)];
                do
                {
                  uint64_t v119 = *v115++;
                  *(void *)std::string v118 = v119;
                  v118 += 8;
                  v117 -= 8;
                }
                while (v117);
              }
              std::string v120 = (void *)*((void *)this + 34);
              *((void *)this + 34) = v112;
              *((void *)this + 35) = v114;
              *((void *)this + 36) = v74;
              *((void *)this + 37) = &v112[8 * v113];
              if (v120)
              {
                operator delete(v120);
                v74 = (char *)*((void *)this + 36);
              }
            }
            else
            {
              uint64_t v78 = v77 >> 3;
              BOOL v22 = v77 >> 3 < -1;
              uint64_t v79 = (v77 >> 3) + 2;
              if (v22) {
                uint64_t v80 = v79;
              }
              else {
                uint64_t v80 = v78 + 1;
              }
              uint64_t v81 = -(v80 >> 1);
              uint64_t v82 = v80 >> 1;
              std::string v83 = &v73[-8 * v82];
              int64_t v84 = v74 - v73;
              if (v74 != v73)
              {
                memmove(&v73[-8 * v82], v73, v74 - v73);
                char v73 = *v6;
              }
              v74 = &v83[v84];
              *((void *)this + 35) = &v73[8 * v81];
              *((void *)this + 36) = &v83[v84];
            }
          }
          *(void *)v74 = v75;
          *((void *)this + 36) += 8;
        }
        else
        {
          *(void *)int v7 = v35;
          *((void *)this + 36) += 8;
          uint64_t v2 = v123;
        }
        int v3 = v122;
      }
    }
    else
    {
      *((void *)this + 38) = v13 - 1024;
      uint64_t v17 = *(void *)v8;
      uint64_t v15 = v8 + 8;
      uint64_t v16 = v17;
      *((void *)this + 35) = v15;
      if (*((char **)this + 37) == v7)
      {
        unint64_t v18 = *((void *)this + 34);
        uint64_t v19 = (uint64_t)&v15[-v18];
        if ((unint64_t)v15 <= v18)
        {
          uint64_t v50 = (uint64_t)&v7[-v18];
          BOOL v49 = v50 == 0;
          uint64_t v51 = v50 >> 2;
          if (v49) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = v51;
          }
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v52);
          int v55 = &v53[8 * (v52 >> 2)];
          std::string::size_type v56 = (uint64_t *)*((void *)this + 35);
          int v7 = v55;
          uint64_t v57 = *((void *)this + 36) - (void)v56;
          if (v57)
          {
            int v7 = &v55[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            int v59 = &v53[8 * (v52 >> 2)];
            do
            {
              uint64_t v60 = *v56++;
              *(void *)int v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          std::string::size_type v61 = (void *)*((void *)this + 34);
          *((void *)this + 34) = v53;
          *((void *)this + 35) = v55;
          *((void *)this + 36) = v7;
          *((void *)this + 37) = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            int v7 = (char *)*((void *)this + 36);
          }
        }
        else
        {
          int v20 = v3;
          uint64_t v21 = v19 >> 3;
          BOOL v22 = v19 >> 3 < -1;
          uint64_t v23 = (v19 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = -(v24 >> 1);
          uint64_t v26 = v24 >> 1;
          uint64_t v27 = &v15[-8 * v26];
          size_t v28 = v7 - v15;
          if (v7 == v15)
          {
            unsigned int v30 = v7;
          }
          else
          {
            unsigned int v29 = &v15[-8 * v26];
            memmove(v29, v15, v28);
            uint64_t v27 = v29;
            unsigned int v30 = *v6;
          }
          int v7 = &v27[v28];
          *((void *)this + 35) = &v30[8 * v25];
          *((void *)this + 36) = &v27[v28];
          int v3 = v20;
        }
      }
      *(void *)int v7 = v16;
      *((void *)this + 36) += 8;
    }
    unint64_t v8 = (char *)*((void *)this + 35);
    uint64_t v12 = *((void *)this + 39);
    unint64_t v14 = *((void *)this + 38) + v12;
    BOOL v11 = v124;
  }
  *(_DWORD *)(*(void *)&v8[(v14 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v14 & 0x3FF)) = v11;
  *((void *)this + 39) = v12 + 1;
  if (v5 == 91) {
    int v121 = 8;
  }
  else {
    int v121 = 9;
  }
  LODWORD(v132) = 0;
  DWORD1(v132) = v121;
  *((void *)&v132 + 1) = v2;
  int v133 = v3;
  *(_OWORD *)std::string __p = 0u;
  memset(v135, 0, sizeof(v135));
  int v136 = 0;
  std::deque<YAML::Token>::push_back((void *)this + 12, &v132);
  v137 = (void **)v135 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v137);
  if (SBYTE7(v135[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C60C7F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, char a16)
{
  operator delete(v16);
  if ((void)a15) {
    operator delete((void *)a15);
  }
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanFlowEnd(YAML::Scanner *this)
{
  uint64_t v2 = *((void *)this + 39);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    int v17 = *((_DWORD *)this + 4);
    uint64_t v25 = (void **)*((void *)this + 1);
    int v26 = v17;
    std::string::basic_string[abi:ne180100]<0>(&v19, "illegal flow end");
    YAML::Exception::Exception((uint64_t)exception, &v25, &v19);
    void *exception = &unk_1F2127238;
  }
  int v3 = *(_DWORD *)(*(void *)(*((void *)this + 35)
                             + (((unint64_t)(v2 + *((void *)this + 38) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v2 + *((void *)this + 38) - 1) & 0x3FF));
  if (!v3)
  {
    if (YAML::Scanner::VerifySimpleKey(this))
    {
      uint64_t v4 = *((void *)this + 1);
      int v5 = *((_DWORD *)this + 4);
      *(void *)&long long v19 = 0xF00000000;
      *((void *)&v19 + 1) = v4;
      int v20 = v5;
      *(_OWORD *)std::string __p = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      int v24 = 0;
      std::deque<YAML::Token>::push_back((void *)this + 12, &v19);
      uint64_t v25 = (void **)&v22 + 1;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
      if (SBYTE7(v22) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_9;
    }
    unint64_t v6 = *((void *)this + 39) + *((void *)this + 38) - 1;
    int v3 = *(_DWORD *)(*(void *)(*((void *)this + 35) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF));
  }
  if (v3 == 1) {
    YAML::Scanner::InvalidateSimpleKey(this);
  }
LABEL_9:
  *((_WORD *)this + 73) = 256;
  int v7 = *((_DWORD *)this + 4);
  uint64_t v25 = (void **)*((void *)this + 1);
  int v26 = v7;
  int v8 = YAML::Stream::get(this);
  uint64_t v9 = *((void *)this + 39) - 1;
  unint64_t v10 = v9 + *((void *)this + 38);
  uint64_t v11 = *((void *)this + 35);
  if (*(_DWORD *)(*(void *)(v11 + ((v10 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v10 & 0x3FF)) != (v8 == 93))
  {
    unint64_t v18 = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, "illegal flow end");
    YAML::Exception::Exception((uint64_t)v18, &v25, &v19);
    void *v18 = &unk_1F2127238;
  }
  int v12 = v8;
  uint64_t v13 = *((void *)this + 36);
  *((void *)this + 39) = v9;
  if (v13 == v11) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = ((v13 - v11) << 7) - 1;
  }
  if (v14 - v10 >= 0x800)
  {
    operator delete(*(void **)(v13 - 8));
    *((void *)this + 36) -= 8;
  }
  if (v12 == 93) {
    int v15 = 10;
  }
  else {
    int v15 = 11;
  }
  LODWORD(v19) = 0;
  DWORD1(v19) = v15;
  *((void *)&v19 + 1) = v25;
  int v20 = v26;
  *(_OWORD *)std::string __p = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  int v24 = 0;
  std::deque<YAML::Token>::push_back((void *)this + 12, &v19);
  uint64_t v27 = (void **)&v22 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (SBYTE7(v22) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C60C8270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void YAML::Scanner::ScanFlowEntry(YAML::Scanner *this)
{
  uint64_t v2 = *((void *)this + 39);
  if (!v2) {
    goto LABEL_9;
  }
  int v3 = *(_DWORD *)(*(void *)(*((void *)this + 35)
                             + (((unint64_t)(v2 + *((void *)this + 38) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v2 + *((void *)this + 38) - 1) & 0x3FF));
  if (!v3)
  {
    if (YAML::Scanner::VerifySimpleKey(this))
    {
      uint64_t v4 = *((void *)this + 1);
      int v5 = *((_DWORD *)this + 4);
      *(void *)&long long v9 = 0xF00000000;
      *((void *)&v9 + 1) = v4;
      int v10 = v5;
      *(_OWORD *)std::string __p = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      int v14 = 0;
      std::deque<YAML::Token>::push_back((void *)this + 12, &v9);
      int v15 = (void **)&v12 + 1;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
      if (SBYTE7(v12) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_9;
    }
    unint64_t v6 = *((void *)this + 39) + *((void *)this + 38) - 1;
    int v3 = *(_DWORD *)(*(void *)(*((void *)this + 35) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF));
  }
  if (v3 == 1) {
    YAML::Scanner::InvalidateSimpleKey(this);
  }
LABEL_9:
  *((_WORD *)this + 73) = 1;
  uint64_t v7 = *((void *)this + 1);
  int v8 = *((_DWORD *)this + 4);
  YAML::Stream::get(this);
  *(void *)&long long v9 = 0xD00000000;
  *((void *)&v9 + 1) = v7;
  int v10 = v8;
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  int v14 = 0;
  std::deque<YAML::Token>::push_back((void *)this + 12, &v9);
  int v15 = (void **)&v12 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SBYTE7(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C60C8430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanBlockEntry(YAML::Scanner *this)
{
  if (*((void *)this + 39))
  {
    exception = __cxa_allocate_exception(0x38uLL);
    int v5 = *((_DWORD *)this + 4);
    long long v13 = (void **)*((void *)this + 1);
    int v14 = v5;
    std::string::basic_string[abi:ne180100]<0>(&v8, "illegal block entry");
    YAML::Exception::Exception((uint64_t)exception, &v13, &v8);
    void *exception = &unk_1F2127238;
  }
  if (!*((unsigned char *)this + 146))
  {
    unint64_t v6 = __cxa_allocate_exception(0x38uLL);
    int v7 = *((_DWORD *)this + 4);
    long long v13 = (void **)*((void *)this + 1);
    int v14 = v7;
    std::string::basic_string[abi:ne180100]<0>(&v8, "illegal block entry");
    YAML::Exception::Exception((uint64_t)v6, &v13, &v8);
    void *v6 = &unk_1F2127238;
  }
  YAML::Scanner::PushIndentTo((uint64_t)this);
  *((_WORD *)this + 73) = 1;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  YAML::Stream::get(this);
  *(void *)&long long v8 = 0x700000000;
  *((void *)&v8 + 1) = v2;
  int v9 = v3;
  *(_OWORD *)std::string __p = 0u;
  memset(v11, 0, sizeof(v11));
  int v12 = 0;
  std::deque<YAML::Token>::push_back((void *)this + 12, &v8);
  long long v13 = (void **)v11 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v13);
  if (SBYTE7(v11[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C60C8610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void YAML::Scanner::ScanKey(YAML::Scanner *this)
{
  uint64_t v2 = *((void *)this + 39);
  if (!v2)
  {
    if (!*((unsigned char *)this + 146))
    {
      exception = __cxa_allocate_exception(0x38uLL);
      unint64_t v6 = this;
      int v7 = exception;
      long long v8 = (void **)*((void *)v6 + 1);
      LODWORD(v6) = *((_DWORD *)v6 + 4);
      int v14 = v8;
      int v15 = (int)v6;
      std::string::basic_string[abi:ne180100]<0>(&v9, "illegal map key");
      YAML::Exception::Exception((uint64_t)v7, &v14, &v9);
      *int v7 = &unk_1F2127238;
    }
    YAML::Scanner::PushIndentTo((uint64_t)this);
    uint64_t v2 = *((void *)this + 39);
  }
  *((unsigned char *)this + 146) = v2 == 0;
  uint64_t v3 = *((void *)this + 1);
  int v4 = *((_DWORD *)this + 4);
  YAML::Stream::get(this);
  *(void *)&long long v9 = 0xE00000000;
  *((void *)&v9 + 1) = v3;
  int v10 = v4;
  *(_OWORD *)std::string __p = 0u;
  memset(v12, 0, sizeof(v12));
  int v13 = 0;
  std::deque<YAML::Token>::push_back((void *)this + 12, &v9);
  int v14 = (void **)v12 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v14);
  if (SBYTE7(v12[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C60C87B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void YAML::Scanner::ScanValue(YAML::Scanner *this)
{
  int v2 = YAML::Scanner::VerifySimpleKey(this);
  *((unsigned char *)this + 147) = 0;
  if (v2)
  {
    *((unsigned char *)this + 146) = 0;
  }
  else
  {
    uint64_t v3 = *((void *)this + 39);
    if (!v3)
    {
      if (!*((unsigned char *)this + 146))
      {
        exception = __cxa_allocate_exception(0x38uLL);
        int v7 = this;
        long long v8 = exception;
        long long v9 = (void **)*((void *)v7 + 1);
        LODWORD(v7) = *((_DWORD *)v7 + 4);
        int v15 = v9;
        int v16 = (int)v7;
        std::string::basic_string[abi:ne180100]<0>(&v10, "illegal map value");
        YAML::Exception::Exception((uint64_t)v8, &v15, &v10);
        *long long v8 = &unk_1F2127238;
      }
      YAML::Scanner::PushIndentTo((uint64_t)this);
      uint64_t v3 = *((void *)this + 39);
    }
    *((unsigned char *)this + 146) = v3 == 0;
  }
  uint64_t v4 = *((void *)this + 1);
  int v5 = *((_DWORD *)this + 4);
  YAML::Stream::get(this);
  *(void *)&long long v10 = 0xF00000000;
  *((void *)&v10 + 1) = v4;
  int v11 = v5;
  *(_OWORD *)std::string __p = 0u;
  memset(v13, 0, sizeof(v13));
  int v14 = 0;
  std::deque<YAML::Token>::push_back((void *)this + 12, &v10);
  int v15 = (void **)v13 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SBYTE7(v13[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C60C895C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void YAML::Scanner::ScanAnchorOrAlias(void **this)
{
  memset(&__str, 0, sizeof(__str));
  YAML::Scanner::InsertPotentialSimpleKey((YAML::Scanner *)this);
  *((_WORD *)this + 73) = 0;
  int v2 = this[1];
  int v3 = *((_DWORD *)this + 4);
  int v4 = YAML::Stream::get((YAML::Stream *)this);
  while (YAML::Stream::operator BOOL(this))
  {
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "[]{},");
      unint64_t v6 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v24, (char *)__p, 3);
      YAML::Exp::BlankOrBreak(v6);
      YAML::operator|((int *)&v24, YAML::Exp::BlankOrBreak(void)::e, (uint64_t)&v16);
      YAML::operator!((int *)&v16, (uint64_t)&YAML::Exp::Anchor(void)::e);
      v27[0] = (void **)&v16 + 1;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v27);
      v27[0] = (void **)&v25;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v27);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Anchor(void)::e, &dword_1C5C1E000);
    }
    *(void *)&long long v16 = 0;
    *((void *)&v16 + 1) = this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::Anchor(void)::e, (unint64_t *)&v16) & 0x80000000) != 0) {
      break;
    }
    std::string::value_type v5 = YAML::Stream::get((YAML::Stream *)this);
    std::string::push_back(&__str, v5);
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    int v10 = *((_DWORD *)this + 4);
    int v24 = this[1];
    int v25 = v10;
    if (v4 == 42) {
      int v11 = "alias not found after *";
    }
    else {
      int v11 = "anchor not found after &";
    }
    std::string::basic_string[abi:ne180100]<0>(&v16, v11);
    YAML::Exception::Exception((uint64_t)exception, &v24, &v16);
    void *exception = &unk_1F2127238;
  }
  if (YAML::Stream::operator BOOL(this))
  {
    {
      int v12 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v16, (char *)&v24, 3);
      YAML::Exp::BlankOrBreak(v12);
      YAML::operator|((int *)&v16, YAML::Exp::BlankOrBreak(void)::e, (uint64_t)&YAML::Exp::AnchorEnd(void)::e);
      __p[0] = (char *)&v16 + 8;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (v26 < 0) {
        operator delete(v24);
      }
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::AnchorEnd(void)::e, &dword_1C5C1E000);
    }
    *(void *)&long long v16 = 0;
    *((void *)&v16 + 1) = this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::AnchorEnd(void)::e, (unint64_t *)&v16) & 0x80000000) != 0)
    {
      int v13 = __cxa_allocate_exception(0x38uLL);
      int v14 = *((_DWORD *)this + 4);
      int v24 = this[1];
      int v25 = v14;
      if (v4 == 42) {
        int v15 = "illegal character found while scanning alias";
      }
      else {
        int v15 = "illegal character found while scanning anchor";
      }
      std::string::basic_string[abi:ne180100]<0>(&v16, v15);
      YAML::Exception::Exception((uint64_t)v13, &v24, &v16);
      *int v13 = &unk_1F2127238;
    }
  }
  if (v4 == 42) {
    int v8 = 17;
  }
  else {
    int v8 = 16;
  }
  LODWORD(vgoogle::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  DWORD1(vgoogle::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v8;
  *((void *)&v16 + 1) = v2;
  int v17 = v3;
  *(_OWORD *)unint64_t v18 = 0u;
  memset(v19, 0, sizeof(v19));
  int v20 = 0;
  std::string::operator=((std::string *)v18, &__str);
  std::deque<YAML::Token>::push_back(this + 12, &v16);
  int v24 = (char *)v19 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (SBYTE7(v19[0]) < 0) {
    operator delete(v18[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C60C8DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanTag(YAML::Scanner *this)
{
  YAML::Scanner::InsertPotentialSimpleKey(this);
  *((_WORD *)this + 73) = 0;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  *(void *)&long long v12 = 0x1200000000;
  *((void *)&v12 + 1) = v2;
  int v13 = v3;
  *(_OWORD *)std::string __p = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  int v17 = 0;
  YAML::Stream::get(this);
  if (YAML::Stream::operator BOOL(this)
    && *((void *)this + 8)
    && *(unsigned char *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                + (*((void *)this + 7) & 0xFFFLL)) == 60)
  {
    YAML::ScanVerbatimTag(this, &__str);
    std::string::operator=((std::string *)__p, &__str);
    int v17 = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    goto LABEL_31;
  }
  char v10 = 0;
  YAML::ScanTagHandle(this, (YAML::Stream *)&v10, &__str);
  std::string::operator=((std::string *)__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  int v4 = (void *)BYTE7(v15);
  if (!v10)
  {
    if (SBYTE7(v15) < 0) {
      int v4 = __p[1];
    }
    if (v4) {
      int v8 = 1;
    }
    else {
      int v8 = 4;
    }
    goto LABEL_30;
  }
  if (SBYTE7(v15) < 0) {
    int v4 = __p[1];
  }
  if (v4) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  int v17 = v5;
  if (*((void *)this + 8)
    && *(unsigned char *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                + (*((void *)this + 7) & 0xFFFLL)) == 33)
  {
    YAML::Stream::get(this);
    YAML::ScanTagSuffix(this, (uint64_t)&__str);
    unint64_t v6 = (_OWORD *)v16;
    if ((unint64_t)v16 >= *((void *)&v16 + 1))
    {
      uint64_t v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v15 + 1, (long long *)&__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v16, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v7 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(void *)(v16 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *((void *)&__str.__r_.__value_.__l + 2);
        _OWORD *v6 = v7;
      }
      uint64_t v9 = (uint64_t)v6 + 24;
    }
    *(void *)&long long v16 = v9;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    int v8 = 3;
LABEL_30:
    int v17 = v8;
  }
LABEL_31:
  std::deque<YAML::Token>::push_back((void *)this + 12, &v12);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SBYTE7(v15) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C60C90E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  YAML::Token::~Token(&a16);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanPlainScalar(YAML::Scanner *this)
{
  memset(&__str, 0, sizeof(__str));
  char v20 = 0;
  __int16 v19 = 0;
  char v25 = 0;
  if (*((void *)this + 39))
  {
    {
      uint64_t v2 = &YAML::Exp::ScanScalarEndInFlow(void)::e;
      goto LABEL_6;
    }
    YAML::Exp::EndScalarInFlow(v7);
    YAML::Exp::BlankOrBreak(v8);
    YAML::Exp::Comment((YAML::Exp *)&v27);
    YAML::operator+(YAML::Exp::BlankOrBreak(void)::e, (int *)&v27, (uint64_t)&v12);
    YAML::operator|(YAML::Exp::EndScalarInFlow(void)::e, (int *)&v12, (uint64_t)&YAML::Exp::ScanScalarEndInFlow(void)::e);
    p_std::string::size_type size = &v12.__r_.__value_.__l.__size_;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
    p_std::string::size_type size = (std::string::size_type *)v28;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
    uint64_t v2 = &YAML::Exp::ScanScalarEndInFlow(void)::e;
  }
  else
  {
    {
      uint64_t v2 = &YAML::Exp::ScanScalarEnd(void)::e;
      goto LABEL_6;
    }
    YAML::Exp::EndScalar(v10);
    YAML::Exp::BlankOrBreak(v11);
    YAML::Exp::Comment((YAML::Exp *)&v27);
    YAML::operator+(YAML::Exp::BlankOrBreak(void)::e, (int *)&v27, (uint64_t)&v12);
    YAML::operator|(YAML::Exp::EndScalar(void)::e, (int *)&v12, (uint64_t)&YAML::Exp::ScanScalarEnd(void)::e);
    p_std::string::size_type size = &v12.__r_.__value_.__l.__size_;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
    p_std::string::size_type size = (std::string::size_type *)v28;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
    uint64_t v2 = &YAML::Exp::ScanScalarEnd(void)::e;
  }
  __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, v2, &dword_1C5C1E000);
  __cxa_guard_release(v9);
LABEL_6:
  int v3 = 0;
  long long v16 = v2;
  char v17 = 0;
  if (!*((void *)this + 39))
  {
    uint64_t v4 = *((void *)this + 30);
    if (v4) {
      int v3 = **(_DWORD **)(*(void *)(*((void *)this + 26)
    }
                                   + (((unint64_t)(v4 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v4 + *((void *)this + 29) - 1) & 0x1FF))
         + 1;
    else {
      int v3 = 1;
    }
  }
  int v18 = v3;
  int v21 = 2;
  HIBYTE(v19) = 1;
  char v22 = 1;
  uint64_t v23 = 0x1FFFFFFFFLL;
  int v24 = 2;
  YAML::Scanner::InsertPotentialSimpleKey(this);
  std::string::size_type v5 = *((void *)this + 1);
  int v6 = *((_DWORD *)this + 4);
  YAML::ScanScalar((uint64_t)this, (uint64_t)&v16, &v12);
  std::string __str = v12;
  *((unsigned char *)this + 146) = v25;
  *((unsigned char *)this + 147) = 0;
  v12.__r_.__value_.__r.__words[0] = 0x1300000000;
  v12.__r_.__value_.__l.__size_ = v5;
  LODWORD(v12.__r_.__value_.__r.__words[2]) = v6;
  *(_OWORD *)std::string __p = 0u;
  memset(v14, 0, sizeof(v14));
  int v15 = 0;
  std::string::operator=((std::string *)__p, &__str);
  std::deque<YAML::Token>::push_back((void *)this + 12, (long long *)&v12);
  uint64_t v27 = (void **)v14 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (SBYTE7(v14[0]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C60C941C(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  *(void *)(v2 - 40) = v2 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

void *YAML::Exp::Comment(YAML::Exp *this)
{
  {
    long long v7 = this;
    this = v7;
    if (v6)
    {
      YAML::Exp::Comment(void)::e = 1;
      word_1EA3D788C = 35;
      qword_1EA3D7898 = 0;
      unk_1EA3D78A0 = 0;
      qword_1EA3D7890 = 0;
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_1C5C1E000);
      this = v7;
    }
  }
  *(_DWORD *)this = YAML::Exp::Comment(void)::e;
  *((_WORD *)this + 2) = word_1EA3D788C;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v2 = (int *)qword_1EA3D7890;
  int v3 = (int *)qword_1EA3D7898;
  unint64_t v4 = (qword_1EA3D7898 - qword_1EA3D7890) >> 5;
  return std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(v1, v2, v3, v4);
}

void YAML::Scanner::ScanQuotedScalar(YAML::Scanner *this)
{
  memset(&__str, 0, sizeof(__str));
  if (*((void *)this + 8)) {
    int v2 = *(unsigned __int8 *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
  }
                            + (*((void *)this + 7) & 0xFFFLL));
  else {
    int v2 = 4;
  }
  long long v16 = 0;
  char v17 = 0;
  char v20 = 0;
  int v19 = 0;
  memset(v18, 0, 7);
  v21[0] = 0;
  *(void *)((char *)v21 + 5) = 0;
  if (v2 == 39)
  {
    LODWORD(v6.__r_.__value_.__l.__data_) = 1;
    WORD2(v6.__r_.__value_.__r.__words[0]) = 39;
    __p[0] = 0;
    *(_OWORD *)&v6.__r_.__value_.__r.__words[1] = 0uLL;
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "''");
      YAML::RegEx::RegEx((uint64_t)YAML::Exp::EscSingleQuote(void)::e, (char *)v23, 6);
      if (v24 < 0) {
        operator delete(v23[0]);
      }
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::EscSingleQuote(void)::e, &dword_1C5C1E000);
    }
    YAML::operator!(YAML::Exp::EscSingleQuote(void)::e, (uint64_t)&p_size);
    YAML::operator&((int *)&v6, (int *)&p_size, (uint64_t)&v12);
    v23[0] = (void **)&v11;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v23);
    p_std::string::size_type size = &v6.__r_.__value_.__l.__size_;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
    char v3 = 39;
  }
  else
  {
    int v12 = 1;
    char v13 = v2;
    char v14 = 0;
    char v3 = 92;
    memset(v15, 0, sizeof(v15));
  }
  long long v16 = &v12;
  char v17 = 1;
  BYTE2(v18[1]) = v3;
  v18[0] = 0;
  int v19 = 2;
  BYTE1(v18[1]) = 1;
  char v20 = 0;
  v21[0] = 0x200000000;
  YAML::Scanner::InsertPotentialSimpleKey(this);
  std::string::size_type v4 = *((void *)this + 1);
  int v5 = *((_DWORD *)this + 4);
  YAML::Stream::get(this);
  YAML::ScanScalar((uint64_t)this, (uint64_t)&v16, &v6);
  std::string __str = v6;
  *((_WORD *)this + 73) = 256;
  v6.__r_.__value_.__r.__words[0] = 0x1400000000;
  v6.__r_.__value_.__l.__size_ = v4;
  LODWORD(v6.__r_.__value_.__r.__words[2]) = v5;
  *(_OWORD *)std::string __p = 0u;
  memset(v8, 0, sizeof(v8));
  int v9 = 0;
  std::string::operator=((std::string *)__p, &__str);
  std::deque<YAML::Token>::push_back((void *)this + 12, (long long *)&v6);
  p_std::string::size_type size = (std::string::size_type *)v8 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
  if (SBYTE7(v8[0]) < 0) {
    operator delete(__p[0]);
  }
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C60C9874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  if (*(char *)(v11 - 49) < 0) {
    operator delete(*(void **)(v11 - 72));
  }
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanBlockScalar(YAML::Scanner *this)
{
  memset(&__str, 0, sizeof(__str));
  uint64_t v29 = 0;
  char v30 = 0;
  char v35 = 0;
  char v33 = 0;
  uint64_t v37 = 0;
  char v38 = 0;
  int v31 = 1;
  __int16 v32 = 1;
  std::string::size_type v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  BOOL v34 = YAML::Stream::get(this) == 62;
  int v36 = 0;
  {
    if (v17)
    {
      YAML::Exp::ChompIndicator(v17);
      YAML::Exp::Digit(v18);
      int v19 = (YAML::Exp *)YAML::operator+(YAML::Exp::ChompIndicator(void)::e, &YAML::Exp::Digit(void)::e, (uint64_t)&v42);
      YAML::Exp::Digit(v19);
      YAML::Exp::ChompIndicator(v20);
      YAML::operator+(&YAML::Exp::Digit(void)::e, YAML::Exp::ChompIndicator(void)::e, (uint64_t)&v40);
      int v21 = (YAML::Exp *)YAML::operator|(&v42, (int *)&v40, (uint64_t)&p_size);
      YAML::Exp::ChompIndicator(v21);
      char v22 = (YAML::Exp *)YAML::operator|((int *)&p_size, YAML::Exp::ChompIndicator(void)::e, (uint64_t)&__p);
      YAML::Exp::Digit(v22);
      YAML::operator|((int *)&__p, &YAML::Exp::Digit(void)::e, (uint64_t)&YAML::Exp::Chomp(void)::e);
      v46[0] = (void **)&__p.__r_.__value_.__l.__size_;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v46);
      v46[0] = (void **)&v45;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v46);
      v46[0] = (void **)&v41;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v46);
      uint64_t v40 = (void **)&v43;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v40);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Chomp(void)::e, &dword_1C5C1E000);
    }
  }
  __p.__r_.__value_.__r.__words[0] = 0;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
  int v4 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::Chomp(void)::e, (unint64_t *)&__p);
  if (v4 >= 1)
  {
    while (1)
    {
      int v5 = YAML::Stream::get(this);
      int v6 = v5;
      if (v5 == 45)
      {
        int v36 = -1;
      }
      else if (v5 == 43)
      {
        int v36 = 1;
      }
      else
      {
        {
          YAML::Exp::Digit(void)::e = 2;
          word_1EA3D7514 = 14640;
          qword_1EA3D7520 = 0;
          unk_1EA3D7528 = 0;
          qword_1EA3D7518 = 0;
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Digit(void)::e, &dword_1C5C1E000);
        }
        memset(&__p, 0, sizeof(__p));
        std::string::push_back(&__p, v6);
        int v7 = YAML::RegEx::Match((uint64_t)&YAML::Exp::Digit(void)::e, (char *)&__p);
        int v8 = v7;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v8 & 0x80000000) == 0)
          {
LABEL_12:
            if (v6 == 48)
            {
              exception = __cxa_allocate_exception(0x38uLL);
              int v16 = *((_DWORD *)this + 4);
              p_std::string::size_type size = (std::string::size_type *)*((void *)this + 1);
              LODWORD(v45) = v16;
              std::string::basic_string[abi:ne180100]<0>(&__p, "cannot set zero indentation for a block scalar");
              YAML::Exception::Exception((uint64_t)exception, &p_size, (long long *)&__p);
              void *exception = &unk_1F2127238;
            }
            int v31 = v6 - 48;
            LOBYTE(v32) = 0;
          }
        }
        else if ((v7 & 0x80000000) == 0)
        {
          goto LABEL_12;
        }
      }
      if (!--v4) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
LABEL_21:
    {
      if (v9)
      {
        YAML::Exp::Space(v9);
        YAML::Exp::Tab(v10);
        YAML::operator|(&YAML::Exp::Space(void)::e, &YAML::Exp::Tab(void)::e, (uint64_t)YAML::Exp::Blank(void)::e);
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::Blank(void)::e, &dword_1C5C1E000);
      }
    }
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Blank(void)::e, (unint64_t *)&__p) & 0x80000000) != 0) {
      break;
    }
    YAML::Stream::get(this);
  }
  {
    YAML::Exp::Comment(void)::e = 1;
    word_1EA3D788C = 35;
    qword_1EA3D7898 = 0;
    unk_1EA3D78A0 = 0;
    qword_1EA3D7890 = 0;
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_1C5C1E000);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = YAML::Exp::Comment(void)::e;
  WORD2(__p.__r_.__value_.__r.__words[0]) = word_1EA3D788C;
  v26[0] = 0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(&__p.__r_.__value_.__l.__size_, (int *)qword_1EA3D7890, (int *)qword_1EA3D7898, (qword_1EA3D7898 - qword_1EA3D7890) >> 5);
  p_std::string::size_type size = 0;
  uint64_t v45 = this;
  int v11 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&__p, (unint64_t *)&p_size);
  p_std::string::size_type size = &__p.__r_.__value_.__l.__size_;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
  if ((v11 & 0x80000000) == 0)
  {
    while (1)
    {
      BOOL v12 = YAML::Stream::operator BOOL(this);
      if (!v12) {
        break;
      }
      YAML::Exp::Break((YAML::Exp *)v12);
      __p.__r_.__value_.__r.__words[0] = 0;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
      if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, (unint64_t *)&__p) & 0x80000000) == 0) {
        break;
      }
      YAML::Stream::get(this);
    }
  }
  BOOL v13 = YAML::Stream::operator BOOL(this);
  if (v13)
  {
    YAML::Exp::Break((YAML::Exp *)v13);
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, (unint64_t *)&__p) & 0x80000000) != 0)
    {
      uint64_t v23 = __cxa_allocate_exception(0x38uLL);
      int v24 = *((_DWORD *)this + 4);
      p_std::string::size_type size = (std::string::size_type *)*((void *)this + 1);
      LODWORD(v45) = v24;
      std::string::basic_string[abi:ne180100]<0>(&__p, "unexpected character in block scalar");
      YAML::Exception::Exception((uint64_t)v23, &p_size, (long long *)&__p);
      void *v23 = &unk_1F2127238;
    }
  }
  uint64_t v14 = *((void *)this + 30);
  if (!v14
    || (LODWORD(v14) = **(_DWORD **)(*(void *)(*((void *)this + 26)
                                               + (((unint64_t)(v14 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v14 + *((void *)this + 29) - 1) & 0x1FF)),
        (v14 & 0x80000000) == 0))
  {
    v31 += v14;
  }
  HIBYTE(v32) = 0;
  char v35 = 0;
  HIDWORD(v37) = 2;
  YAML::ScanScalar((uint64_t)this, (uint64_t)&v29, &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = __p;
  *((_WORD *)this + 73) = 1;
  __p.__r_.__value_.__r.__words[0] = 0x1400000000;
  __p.__r_.__value_.__l.__size_ = v2;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = v3;
  *(_OWORD *)char v26 = 0u;
  memset(v27, 0, sizeof(v27));
  int v28 = 0;
  std::string::operator=((std::string *)v26, &__str);
  std::deque<YAML::Token>::push_back((void *)this + 12, (long long *)&__p);
  p_std::string::size_type size = (std::string::size_type *)v27 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
  if (SBYTE7(v27[0]) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C60C9FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  *(void *)(v37 - 96) = v36 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 96));
  *(void *)(v37 - 96) = v37 - 120;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 96));
  *(void *)(v37 - 96) = &a36;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 96));
  a35 = v37 - 152;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void YAML::Exp::ChompIndicator(YAML::Exp *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "+-");
    YAML::RegEx::RegEx((uint64_t)&YAML::Exp::ChompIndicator(void)::e, (char *)__p, 3);
    if (v2 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::ChompIndicator(void)::e, &dword_1C5C1E000);
  }
}

void sub_1C60CA1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableJSONPrinter::Visit(siri::dialogengine::VariableJSONPrinter *this, const std::string::value_type **a2)
{
  (*((void (**)(std::string *__return_ptr, const std::string::value_type **))*a2 + 6))(&v8, a2);
  memset(&v7, 0, sizeof(v7));
  uint64_t v4 = v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v4 = v10;
  }
  if (v4) {
    goto LABEL_36;
  }
  std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v8.__r_.__value_.__l.__size_;
  }
  if (size)
  {
LABEL_36:
    if (siri::dialogengine::SpeakableString::SpeakEqualsPrint((siri::dialogengine::SpeakableString *)&v8))
    {
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v8;
      }
    }
    else
    {
      siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&v8, &__p);
    }
    std::string v7 = __p;
  }
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, a2[1], (std::string::size_type)a2[2]);
  }
  else {
    std::string __p = *(std::string *)(a2 + 1);
  }
  siri::dialogengine::VariableJSONPrinter::PrintValue((uint64_t)this, (uint64_t)&__p, (uint64_t)&v7, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if ((char)v11 < 0) {
    operator delete(v9);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_1C60CA398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
}

void *siri::dialogengine::VariableJSONPrinter::PrintValue(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  siri::dialogengine::VariableJSONPrinter::Indent((void *)a1, 1);
  char v23 = 34;
  std::string v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 32), (uint64_t)&v23, 1);
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(void *)a2;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  BOOL v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  char v24 = 34;
  char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v24, 1);
  char v25 = 58;
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v25, 1);
  char v26 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v26, 1);
  if (a4)
  {
    char v27 = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 32), (uint64_t)&v27, 1);
    int v15 = *(char *)(a3 + 23);
    if (v15 >= 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = *(void *)a3;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 32), v16, v17);
    char v28 = 34;
    int v18 = &v28;
    char v19 = (void *)(a1 + 32);
    uint64_t v20 = 1;
  }
  else
  {
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      int v18 = (char *)a3;
    }
    else {
      int v18 = *(char **)a3;
    }
    if (v21 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v20 = *(void *)(a3 + 8);
    }
    char v19 = (void *)(a1 + 32);
  }
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v18, v20);
  *(unsigned char *)(a1 + 296) = 1;
  return result;
}

void *siri::dialogengine::VariableJSONPrinter::Indent(void *this, int a2)
{
  uint64_t v2 = (uint64_t)this;
  if (*((unsigned char *)this + 296))
  {
    if (a2)
    {
      char v4 = 44;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(this + 4, (uint64_t)&v4, 1);
    }
    char v5 = 10;
    this = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(v2 + 32), (uint64_t)&v5, 1);
    *(unsigned char *)(v2 + 296) = 0;
  }
  if (*(_WORD *)(v2 + 8))
  {
    unsigned int v3 = 0;
    do
    {
      this = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(v2 + 32), (uint64_t)"    ", 4);
      ++v3;
    }
    while (v3 < *(unsigned __int16 *)(v2 + 8));
  }
  return this;
}

void *siri::dialogengine::VariableJSONPrinter::Visit(siri::dialogengine::VariableJSONPrinter *this, siri::dialogengine::VariableObject *a2)
{
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 8);
  }
  siri::dialogengine::VariableJSONPrinter::Open((uint64_t)this, (uint64_t)&__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::VariableObject::GetValues(a2, &__p);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  for (uint64_t i = (void *)__p.__r_.__value_.__r.__words[0]; i != (void *)size; i += 2)
    (*(void (**)(void, siri::dialogengine::VariableJSONPrinter *))(*(void *)*i + 16))(*i, this);
  p_p = &__p;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  return siri::dialogengine::VariableJSONPrinter::Close(this, 1);
}

void sub_1C60CA6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *siri::dialogengine::VariableJSONPrinter::Open(uint64_t a1, uint64_t a2, int a3)
{
  siri::dialogengine::VariableJSONPrinter::Indent((void *)a1, 1);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    char v17 = 34;
    std::string v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 32), (uint64_t)&v17, 1);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    char v18 = 34;
    BOOL v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v18, 1);
    char v19 = 58;
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v19, 1);
    char v20 = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v20, 1);
  }
  if (a3) {
    char v14 = 123;
  }
  else {
    char v14 = 91;
  }
  char v21 = v14;
  int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 32), (uint64_t)&v21, 1);
  char v22 = 10;
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v22, 1);
  ++*(_WORD *)(a1 + 8);
  return result;
}

void *siri::dialogengine::VariableJSONPrinter::Close(siri::dialogengine::VariableJSONPrinter *this, int a2)
{
  if (*((_WORD *)this + 4)) {
    --*((_WORD *)this + 4);
  }
  if (a2) {
    char v3 = 125;
  }
  else {
    char v3 = 93;
  }
  siri::dialogengine::VariableJSONPrinter::Indent(this, 0);
  char v5 = v3;
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 4, (uint64_t)&v5, 1);
  *((unsigned char *)this + 296) = 1;
  return result;
}

void siri::dialogengine::VariableJSONPrinter::Visit(siri::dialogengine::VariableJSONPrinter *this, siri::dialogengine::VariableNumber *a2)
{
  std::to_string(&v11, *((double *)a2 + 9));
  std::string::basic_string[abi:ne180100]<0>(&__p, ".");
  int v4 = siri::dialogengine::StringContains(&v11.__r_.__value_.__l.__data_, (char *)&__p);
  int v5 = v4;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v4) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v5) {
    goto LABEL_22;
  }
  while (1)
  {
LABEL_5:
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (HIBYTE(v11.__r_.__value_.__r.__words[2]) <= 1u)
      {
        if (!*((unsigned char *)&v11.__r_.__value_.__s + 23)) {
          goto LABEL_22;
        }
        int v6 = v11.__r_.__value_.__s.__data_[HIBYTE(v11.__r_.__value_.__r.__words[2]) - 1];
LABEL_15:
        if (v6 != 46) {
          goto LABEL_22;
        }
        uint64_t v7 = HIBYTE(v11.__r_.__value_.__r.__words[2]) - 1;
        --*((unsigned char *)&v11.__r_.__value_.__s + 23);
        int v8 = &v11;
        goto LABEL_21;
      }
      int v6 = *((unsigned __int8 *)&__p.__r_.__value_.__r.__words[2] + HIBYTE(v11.__r_.__value_.__r.__words[2]) + 7);
      if (v6 != 48) {
        goto LABEL_15;
      }
      uint64_t v7 = HIBYTE(v11.__r_.__value_.__r.__words[2]) - 1;
      --*((unsigned char *)&v11.__r_.__value_.__s + 23);
      int v8 = &v11;
      goto LABEL_12;
    }
    uint64_t v7 = v11.__r_.__value_.__l.__size_ - 1;
    if (v11.__r_.__value_.__l.__size_ <= 1) {
      break;
    }
    int v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
    int v9 = *(unsigned __int8 *)(v11.__r_.__value_.__r.__words[0] + v11.__r_.__value_.__l.__size_ - 1);
    if (v9 != 48) {
      goto LABEL_19;
    }
    --v11.__r_.__value_.__l.__size_;
LABEL_12:
    v8->__r_.__value_.__s.__data_[v7] = 0;
  }
  if (!v11.__r_.__value_.__l.__size_) {
    goto LABEL_22;
  }
  int v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  int v9 = *(unsigned __int8 *)(v11.__r_.__value_.__r.__words[0] + v11.__r_.__value_.__l.__size_ - 1);
LABEL_19:
  if (v9 != 46) {
    goto LABEL_22;
  }
  --v11.__r_.__value_.__l.__size_;
LABEL_21:
  v8->__r_.__value_.__s.__data_[v7] = 0;
LABEL_22:
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 8);
  }
  siri::dialogengine::VariableJSONPrinter::PrintValue((uint64_t)this, (uint64_t)&__p, (uint64_t)&v11, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1C60CA9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::VariableJSONPrinter::Visit(siri::dialogengine::VariableJSONPrinter *this, siri::dialogengine::VariableBoolean *a2)
{
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v7, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string v7 = *(std::string *)((char *)a2 + 8);
  }
  if (*((unsigned char *)a2 + 66)) {
    int v4 = "true";
  }
  else {
    int v4 = "false";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  siri::dialogengine::VariableJSONPrinter::PrintValue((uint64_t)this, (uint64_t)&v7, (uint64_t)__p, 0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_1C60CAAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void *siri::dialogengine::VariableJSONPrinter::Visit(siri::dialogengine::VariableJSONPrinter *this, siri::dialogengine::VariableArray *a2)
{
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 8);
  }
  siri::dialogengine::VariableJSONPrinter::Open((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  for (unint64_t i = 0; ; ++i)
  {
    uint64_t v5 = *((void *)a2 + 9);
    if (i >= (*((void *)a2 + 10) - v5) >> 4) {
      break;
    }
    __n128 v6 = *(__n128 *)(v5 + 16 * i);
    std::string v7 = *(std::__shared_weak_count **)(v5 + 16 * i + 8);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(unint64_t, siri::dialogengine::VariableJSONPrinter *, __n128))(*(void *)v6.n128_u64[0]
                                                                                                + 16))(v6.n128_u64[0], this, v6);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  return siri::dialogengine::VariableJSONPrinter::Close(this, 0);
}

void sub_1C60CABF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::VariableJSONPrinter::str(siri::dialogengine::VariableJSONPrinter *this)
{
  return std::stringbuf::str();
}

void siri::dialogengine::VariableJSONPrinter::clear(siri::dialogengine::VariableJSONPrinter *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)((char *)this + 104), &__str);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)this + 40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)this + 296) = 0;
}

void sub_1C60CAE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __assign_helper_atomic_property__49561(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *__copy_helper_atomic_property__49563(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *uint64_t result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1C60CAFD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C60CB15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C60CB2D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C60CB45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C60CB5D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C60CB75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C60CB898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  char v18 = *(std::__shared_weak_count **)(v16 - 24);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C60CB9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  char v18 = *(std::__shared_weak_count **)(v16 - 24);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C60CBA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C60CBB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C60CBC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void siri::dialogengine::VoiceServices::ApplySubstitutions(siri::dialogengine::VoiceServices *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  siri::dialogengine::Context::GetLocale(this, (const char *)a2, (uint64_t)v14);
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v8, (siri::dialogengine::VoiceServices *)((char *)this + 8));
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(&v11, v9, v10, 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 4));
  siri::dialogengine::RequestInfo::~RequestInfo(v8);
  memset(v7, 0, sizeof(v7));
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v7, v11, v12, 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 4));
  siri::dialogengine::SubstituteWords((uint64_t)a2, v7, (uint64_t *)v14, 1, a3);
  v8[0] = v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v8);
  v8[0] = &v11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v8);
  if (v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_1C60CBD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a13);
  a13 = (void **)(v13 - 80);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (*(char *)(v13 - 33) < 0) {
    operator delete(*(void **)(v13 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_1C60CBEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }

  _Unwind_Resume(a1);
}

void sub_1C60CC06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }

  _Unwind_Resume(a1);
}

void sub_1C60CC1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }

  _Unwind_Resume(a1);
}

void sub_1C60CC37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }

  _Unwind_Resume(a1);
}

void sub_1C60CC504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }

  _Unwind_Resume(a1);
}

void sub_1C60CC68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }

  _Unwind_Resume(a1);
}

void siri::dialogengine::NodeVisitor::Visit(siri::dialogengine::NodeVisitor *this, siri::dialogengine::Group *a2)
{
  uint64_t v5 = 0;
  __n128 v6 = 0;
  uint64_t v7 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(&v5, *((void **)a2 + 26), *((void **)a2 + 27), (uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 4);
  uint64_t v3 = v5;
  int v4 = v6;
  while (v3 != v4)
  {
    (*(void (**)(void, siri::dialogengine::NodeVisitor *))(*(void *)*v3 + 16))(*v3, this);
    v3 += 2;
  }
  int v8 = (void **)&v5;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void sub_1C60CC79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ConstNodeVisitor::Visit(siri::dialogengine::ConstNodeVisitor *this, const siri::dialogengine::Group *a2)
{
  uint64_t v5 = 0;
  __n128 v6 = 0;
  uint64_t v7 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(&v5, *((void **)a2 + 26), *((void **)a2 + 27), (uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 4);
  uint64_t v3 = v5;
  int v4 = v6;
  while (v3 != v4)
  {
    (*(void (**)(void, siri::dialogengine::ConstNodeVisitor *))(*(void *)*v3 + 24))(*v3, this);
    v3 += 2;
  }
  int v8 = (void **)&v5;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void sub_1C60CC860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1C60CC978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::HasCATExtension(std::string *a1, int a2)
{
  if ((a2 & 0xFFFFFFFD) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, ".cat.xml");
    BOOL v4 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
    BOOL v5 = v4;
    if (v10 < 0)
    {
      operator delete(__p[0]);
      if (v5) {
        return 1;
      }
    }
    else if (v4)
    {
      return 1;
    }
  }
  if ((a2 - 1) <= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, ".cat.bin");
    BOOL v6 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
    BOOL v7 = v6;
    if (v10 < 0)
    {
      operator delete(__p[0]);
      if (v7) {
        return 1;
      }
    }
    else if (v6)
    {
      return 1;
    }
  }
  return 0;
}

void sub_1C60CCA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::HasVisualCATExtension(std::string *a1, int a2)
{
  if ((a2 & 0xFFFFFFFD) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, ".vcatxml");
    if (siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)v9))
    {
      BOOL v4 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, ".visualcat.xml");
      BOOL v4 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v10 < 0)
    {
      operator delete(v9[0]);
      if (v4) {
        return 1;
      }
    }
    else if (v4)
    {
      return 1;
    }
  }
  if ((a2 - 1) <= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, ".vcatbin");
    if (siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)v9))
    {
      BOOL v5 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, ".visualcat.bin");
      BOOL v5 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v10 < 0)
    {
      operator delete(v9[0]);
      if (v5) {
        return 1;
      }
    }
    else if (v5)
    {
      return 1;
    }
  }
  return 0;
}

void sub_1C60CCBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::HasPatternExtension(std::string *a1, int a2)
{
  if ((a2 & 0xFFFFFFFD) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, ".patternxml");
    if (siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)v9))
    {
      BOOL v4 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, ".pattern.xml");
      BOOL v4 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v10 < 0)
    {
      operator delete(v9[0]);
      if (v4) {
        return 1;
      }
    }
    else if (v4)
    {
      return 1;
    }
  }
  if ((a2 - 1) <= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, ".patternbin");
    if (siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)v9))
    {
      BOOL v5 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, ".pattern.bin");
      BOOL v5 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v10 < 0)
    {
      operator delete(v9[0]);
      if (v5) {
        return 1;
      }
    }
    else if (v5)
    {
      return 1;
    }
  }
  return 0;
}

void sub_1C60CCD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::HasSchemaExtension(std::string *a1, int a2)
{
  if ((a2 & 0xFFFFFFFE) == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "catschema");
    BOOL v4 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
    BOOL v5 = v4;
    if (v10 < 0)
    {
      operator delete(__p[0]);
      if (v5) {
        return 1;
      }
    }
    else if (v4)
    {
      return 1;
    }
  }
  if (a2 == 4 || a2 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "catschema.bin");
    BOOL v6 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
    BOOL v7 = v6;
    if (v10 < 0)
    {
      operator delete(__p[0]);
      if (v7) {
        return 1;
      }
    }
    else if (v6)
    {
      return 1;
    }
  }
  return 0;
}

void sub_1C60CCE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::HasPatternSchemaExtension(std::string *a1, int a2)
{
  if (a2 != 2)
  {
    if (a2 == 6)
    {
LABEL_9:
      std::string::basic_string[abi:ne180100]<0>(__p, "patternschema.bin");
      BOOL v6 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
      BOOL v7 = v6;
      if (v10 < 0)
      {
        operator delete(__p[0]);
        if (v7) {
          return 1;
        }
      }
      else if (v6)
      {
        return 1;
      }
      return 0;
    }
    if (a2 != 5) {
      return 0;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "patternschema");
  BOOL v4 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
  BOOL v5 = v4;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
      return 1;
    }
  }
  else if (v4)
  {
    return 1;
  }
  if (a2 == 2) {
    goto LABEL_9;
  }
  return 0;
}

void sub_1C60CCF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ChangeCATExtension(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v11 = *(std::string *)a1;
  }
  std::string::basic_string[abi:ne180100]<0>(v8, ".cat.xml");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  std::string v11 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, ".cat.bin");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  std::string v11 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (a2 == 1) {
    BOOL v5 = ".cat.bin";
  }
  else {
    BOOL v5 = ".cat.xml";
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, v5);
  siri::dialogengine::AddExtension((uint64_t)&v11, (uint64_t)&v10, a3);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1C60CD13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ChangeVisualCATExtension(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v11 = *(std::string *)a1;
  }
  std::string::basic_string[abi:ne180100]<0>(v8, ".vcatxml");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  std::string v11 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, ".vcatbin");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  std::string v11 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, ".visualcat.xml");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  std::string v11 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, ".visualcat.bin");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  std::string v11 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (a2 == 1) {
    BOOL v5 = ".vcatbin";
  }
  else {
    BOOL v5 = ".vcatxml";
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, v5);
  siri::dialogengine::AddExtension((uint64_t)&v11, (uint64_t)&v10, a3);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1C60CD450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ChangePatternExtension(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v11 = *(std::string *)a1;
  }
  std::string::basic_string[abi:ne180100]<0>(v8, ".patternxml");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  std::string v11 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, ".patternbin");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  std::string v11 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, ".pattern.xml");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  std::string v11 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, ".pattern.bin");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  std::string v11 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (a2 == 1) {
    BOOL v5 = ".patternbin";
  }
  else {
    BOOL v5 = ".patternxml";
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, v5);
  siri::dialogengine::AddExtension((uint64_t)&v11, (uint64_t)&v10, a3);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1C60CD77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ChangeSchemaExtension(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v11 = *(std::string *)a1;
  }
  std::string::basic_string[abi:ne180100]<0>(v8, ".catschema.bin");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  std::string v11 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, ".catschema");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  std::string v11 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (a2 == 4) {
    BOOL v5 = "catschema.bin";
  }
  else {
    BOOL v5 = "catschema";
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, v5);
  siri::dialogengine::AddExtension((uint64_t)&v11, (uint64_t)&v10, a3);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1C60CD9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 25) < 0) {
    operator delete(*(void **)(v27 - 48));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ChangePatternSchemaExtension(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v11 = *(std::string *)a1;
  }
  std::string::basic_string[abi:ne180100]<0>(v8, ".patternschema.bin");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  std::string v11 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, ".patternschema");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  std::string v11 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (a2 == 6) {
    BOOL v5 = "patternschema.bin";
  }
  else {
    BOOL v5 = "patternschema";
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, v5);
  siri::dialogengine::AddExtension((uint64_t)&v11, (uint64_t)&v10, a3);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1C60CDBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 25) < 0) {
    operator delete(*(void **)(v27 - 48));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetCatLocales(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    siri::dialogengine::CatIdToPath(a2, __p);
    uint64_t v6 = *a1;
    if (a1[1] != *a1)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        siri::dialogengine::UpdatableDir::FindFile(v6 + v7, (uint64_t)__p, &v10);
        if (SHIBYTE(v10.__end_cap_.__value_) < 0)
        {
          std::vector<std::string>::pointer end = v10.__end_;
          operator delete(v10.__begin_);
          if (end)
          {
LABEL_13:
            siri::dialogengine::UpdatableDir::ListDir(v6 + v7, (uint64_t)__p, &v10);
            siri::dialogengine::GetCatLocales((unsigned __int8 **)&v10, a3);
            uint64_t v13 = &v10;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
            goto LABEL_14;
          }
        }
        else if (HIBYTE(v10.__end_cap_.__value_))
        {
          goto LABEL_13;
        }
        ++v8;
        uint64_t v6 = *a1;
        v7 += 96;
      }
      while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5));
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
LABEL_14:
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_1C60CDD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::FindParamsFile(long long **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  siri::dialogengine::GetCATExtensions(&v20, a1);
  uint64_t v6 = v20;
  uint64_t v7 = v21;
  if (v20 == v21)
  {
LABEL_22:
    v18[0] = &v20;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
    std::string::basic_string[abi:ne180100]<0>((void *)a3, "");
    return;
  }
  while (1)
  {
    siri::dialogengine::CatIdToPath(a2, v16);
    std::string::basic_string[abi:ne180100]<0>(&v13, "_params.cat");
    int v8 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
    if (v8 >= 0) {
      char v9 = (const std::string::value_type *)v6;
    }
    else {
      char v9 = (const std::string::value_type *)v6->__r_.__value_.__r.__words[0];
    }
    if (v8 >= 0) {
      std::string::size_type size = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v6->__r_.__value_.__l.__size_;
    }
    std::string v11 = std::string::append(&v13, v9, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::JoinPath((uint64_t)v16, (uint64_t)__p, (uint64_t)v18);
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    siri::dialogengine::FindFileInUpdatableDirs((uint64_t)v18, (uint64_t *)a1, a3);
    if (*(char *)(a3 + 23) < 0) {
      break;
    }
    if (*(unsigned char *)(a3 + 23)) {
      goto LABEL_23;
    }
LABEL_19:
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    if (++v6 == v7) {
      goto LABEL_22;
    }
  }
  if (!*(void *)(a3 + 8))
  {
    operator delete(*(void **)a3);
    goto LABEL_19;
  }
LABEL_23:
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  v18[0] = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
}

void sub_1C60CDF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)(v33 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetCATExtensions(std::string **a1, long long **a2)
{
  *(void *)&long long v11 = *MEMORY[0x1E4F143B8];
  siri::dialogengine::GetBaseDir(a2, &__p);
  BOOL v3 = siri::dialogengine::PreferXMLFiles((uint64_t)&__p);
  BOOL v4 = v3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v4)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(&__p, ".xml");
      std::string::basic_string[abi:ne180100]<0>(v10, ".bin");
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      BOOL v5 = (std::string *)operator new(0x30uLL);
      *a1 = v5;
      a1[1] = v5;
      a1[2] = v5 + 2;
      uint64_t v6 = 0;
      a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a1 + 2), (long long *)&__p, &v11, v5);
      do
      {
        if (SHIBYTE(v10[v6 + 2]) < 0) {
          operator delete(*(void **)((char *)&__p + v6 * 8 + 24));
        }
        v6 -= 3;
      }
      while (v6 != -6);
      return;
    }
  }
  else if (v3)
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, ".bin");
  std::string::basic_string[abi:ne180100]<0>(v10, ".xml");
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v7 = (std::string *)operator new(0x30uLL);
  *a1 = v7;
  a1[1] = v7;
  a1[2] = v7 + 2;
  uint64_t v8 = 0;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a1 + 2), (long long *)&__p, &v11, v7);
  do
  {
    if (SHIBYTE(v10[v8 + 2]) < 0) {
      operator delete(*(void **)((char *)&__p + v8 * 8 + 24));
    }
    v8 -= 3;
  }
  while (v8 != -6);
}

void sub_1C60CE12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v25 = v24;
  *(void *)(v23 + 8) = v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v27 = 0;
  while (1)
  {
    if (*(&a23 + v27) < 0) {
      operator delete(*(void **)((char *)&a18 + v27));
    }
    v27 -= 24;
    if (v27 == -48) {
      _Unwind_Resume(a1);
    }
  }
}

void siri::dialogengine::FindParamsFile(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  siri::dialogengine::ValidateTemplateDir(a1, &v14);
  siri::dialogengine::UpdatableDir::UpdatableDir((siri::dialogengine::UpdatableDir *)v17, (long long *)&v14, 0);
  memset(&v11, 0, sizeof(v11));
  std::string::size_type v15 = &v11;
  char v16 = 0;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  v11.__r_.__value_.__l.__size_ = v11.__r_.__value_.__r.__words[0];
  v11.__r_.__value_.__r.__words[2] = v11.__r_.__value_.__r.__words[0] + 96;
  v11.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir*>((uint64_t)&v11.__r_.__value_.__r.__words[2], (uint64_t)v17, (uint64_t)v23, (uint64_t)v11.__r_.__value_.__l.__data_);
  siri::dialogengine::GetCATExtensions(&v12, (long long **)&v11);
  std::string::size_type v15 = &v11;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  std::string::size_type v15 = (std::string *)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  std::string::size_type v15 = (std::string *)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  if (v20 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  BOOL v4 = v12;
  BOOL v5 = v13;
  if (v12 == v13)
  {
LABEL_20:
    v17[0] = &v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
    std::string::basic_string[abi:ne180100]<0>((void *)a2, "");
  }
  else
  {
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v11, "_params.cat");
      int v6 = SHIBYTE(v4->__r_.__value_.__r.__words[2]);
      if (v6 >= 0) {
        uint64_t v7 = (const std::string::value_type *)v4;
      }
      else {
        uint64_t v7 = (const std::string::value_type *)v4->__r_.__value_.__r.__words[0];
      }
      if (v6 >= 0) {
        std::string::size_type size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v4->__r_.__value_.__l.__size_;
      }
      char v9 = std::string::append(&v11, v7, size);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      std::string::size_type v18 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)char v17 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::JoinPath(a1, (uint64_t)v17, a2);
      if (SHIBYTE(v18) < 0) {
        operator delete(v17[0]);
      }
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      if (siri::dialogengine::PathExists((uint64_t *)a2)) {
        break;
      }
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      if (++v4 == v5) {
        goto LABEL_20;
      }
    }
    v17[0] = &v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1C60CE40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ValidateTemplateDir(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__s1, "dialog");
  siri::dialogengine::JoinPath(a1, (uint64_t)&__s1, (uint64_t)&__p);
  BOOL v4 = siri::dialogengine::DirExists((uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s1.__r_.__value_.__l.__data_);
    if (v4) {
      goto LABEL_12;
    }
  }
  else if (v4)
  {
LABEL_12:
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "cat");
  BOOL HasExtension = siri::dialogengine::HasExtension(a1, (uint64_t)&__p);
  BOOL v6 = HasExtension;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6) {
      goto LABEL_12;
    }
  }
  else if (!HasExtension)
  {
    goto LABEL_12;
  }
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  siri::dialogengine::DirName((std::string *)a1, (uint64_t)&__s1);
  size_t v7 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  BOOL v8 = (__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  size_t size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v10 = __s1.__r_.__value_.__l.__size_;
  }
  if (v10)
  {
    while (1)
    {
      if (v8) {
        size_t v11 = size;
      }
      else {
        size_t v11 = v7;
      }
      std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
      }
      if (v11 == v12)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v8)
        {
          if (!memcmp(__s1.__r_.__value_.__l.__data_, p_p, size)) {
            goto LABEL_47;
          }
        }
        else
        {
          if (!v7) {
            goto LABEL_47;
          }
          p_s1 = &__s1;
          size_t v17 = v7;
          while (p_s1->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
          {
            p_s1 = (std::string *)((char *)p_s1 + 1);
            p_p = (std::string *)((char *)p_p + 1);
            if (!--v17) {
              goto LABEL_47;
            }
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v18, "dialog");
      siri::dialogengine::JoinPath((uint64_t)&__s1, (uint64_t)v18, (uint64_t)&v20);
      BOOL v14 = siri::dialogengine::DirExists((uint64_t *)&v20);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      if (v14) {
        break;
      }
      std::string::operator=(&__p, &__s1);
      siri::dialogengine::DirName(&__s1, (uint64_t)&v20);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      std::string __s1 = v20;
      size_t v7 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
      BOOL v8 = (v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      size_t size = v20.__r_.__value_.__l.__size_;
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v15 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v15 = __s1.__r_.__value_.__l.__size_;
      }
      if (!v15) {
        goto LABEL_47;
      }
    }
    *a2 = __s1;
    goto LABEL_53;
  }
LABEL_47:
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_53;
    }
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    if ((v7 & 0x80) == 0) {
      goto LABEL_53;
    }
  }
  operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_53:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C60CE784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::FindLocaleFile(long long **a1@<X0>, long long **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  siri::dialogengine::IncludeEnglishIfNeeded(a2, &v25);
  std::string::size_type size = v25.__r_.__value_.__l.__size_;
  std::string::size_type v7 = v25.__r_.__value_.__r.__words[0];
  if (v25.__r_.__value_.__r.__words[0] != v25.__r_.__value_.__l.__size_)
  {
    while (2)
    {
      siri::dialogengine::GetCATExtensions((std::string **)v24, a1);
      char v9 = v24[0];
      BOOL v8 = v24[1];
      while (v9 != v8)
      {
        if (*(char *)(v7 + 23) >= 0) {
          size_t v10 = *(unsigned __int8 *)(v7 + 23);
        }
        else {
          size_t v10 = *(void *)(v7 + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v21, v10 + 4);
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v11 = &v21;
        }
        else {
          size_t v11 = (std::string *)v21.__r_.__value_.__r.__words[0];
        }
        if (v10)
        {
          if (*(char *)(v7 + 23) >= 0) {
            std::string::size_type v12 = (const void *)v7;
          }
          else {
            std::string::size_type v12 = *(const void **)v7;
          }
          memmove(v11, v12, v10);
        }
        strcpy((char *)v11 + v10, ".cat");
        int v13 = *((char *)v9 + 23);
        if (v13 >= 0) {
          BOOL v14 = (const std::string::value_type *)v9;
        }
        else {
          BOOL v14 = (const std::string::value_type *)*v9;
        }
        if (v13 >= 0) {
          std::string::size_type v15 = *((unsigned __int8 *)v9 + 23);
        }
        else {
          std::string::size_type v15 = (std::string::size_type)v9[1];
        }
        char v16 = std::string::append(&v21, v14, v15);
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        std::string::size_type v23 = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v22 = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v21.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::CatIdToPath(a3, __p);
        siri::dialogengine::JoinPath((uint64_t)__p, (uint64_t)v22, (uint64_t)&v21);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        siri::dialogengine::FindFileInUpdatableDirs((uint64_t)&v21, (uint64_t *)a1, a4);
        if (*(char *)(a4 + 23) < 0)
        {
          if (*(void *)(a4 + 8))
          {
LABEL_37:
            if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v21.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v23) < 0) {
              operator delete(v22[0]);
            }
            v22[0] = v24;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
            goto LABEL_42;
          }
          operator delete(*(void **)a4);
        }
        else if (*(unsigned char *)(a4 + 23))
        {
          goto LABEL_37;
        }
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v21.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v23) < 0) {
          operator delete(v22[0]);
        }
        v9 += 3;
      }
      v22[0] = v24;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
      v7 += 24;
      if (v7 != size) {
        continue;
      }
      break;
    }
  }
  std::string::basic_string[abi:ne180100]<0>((void *)a4, "");
LABEL_42:
  v24[0] = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v24);
}

void sub_1C60CEA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  a23 = (void *)(v30 - 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FindLocaleFile(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  siri::dialogengine::IncludeEnglishIfNeeded(a2, &v20);
  siri::dialogengine::ValidateTemplateDir(a1, &v19);
  std::string::size_type size = v20.__r_.__value_.__l.__size_;
  std::string::size_type v5 = v20.__r_.__value_.__r.__words[0];
  if (v20.__r_.__value_.__r.__words[0] != v20.__r_.__value_.__l.__size_)
  {
    while (2)
    {
      siri::dialogengine::UpdatableDir::UpdatableDir((siri::dialogengine::UpdatableDir *)v23, (long long *)&v19, 0);
      memset(&v17, 0, sizeof(v17));
      std::string v21 = &v17;
      char v22 = 0;
      v17.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
      v17.__r_.__value_.__l.__size_ = v17.__r_.__value_.__r.__words[0];
      v17.__r_.__value_.__r.__words[2] = v17.__r_.__value_.__r.__words[0] + 96;
      v17.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir*>((uint64_t)&v17.__r_.__value_.__r.__words[2], (uint64_t)v23, (uint64_t)&v29, (uint64_t)v17.__r_.__value_.__l.__data_);
      siri::dialogengine::GetCATExtensions(v18, (long long **)&v17);
      std::string v21 = &v17;
      std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      std::string v21 = (std::string *)&v28;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      std::string v21 = (std::string *)&v27;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      if (v26 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v24) < 0) {
        operator delete(v23[0]);
      }
      BOOL v8 = v18[0];
      std::string::size_type v7 = v18[1];
      while (v8 != v7)
      {
        if (*(char *)(v5 + 23) >= 0) {
          size_t v9 = *(unsigned __int8 *)(v5 + 23);
        }
        else {
          size_t v9 = *(void *)(v5 + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v17, v9 + 4);
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v10 = &v17;
        }
        else {
          size_t v10 = (std::string *)v17.__r_.__value_.__r.__words[0];
        }
        if (v9)
        {
          if (*(char *)(v5 + 23) >= 0) {
            size_t v11 = (const void *)v5;
          }
          else {
            size_t v11 = *(const void **)v5;
          }
          memmove(v10, v11, v9);
        }
        strcpy((char *)v10 + v9, ".cat");
        int v12 = SHIBYTE(v8->__r_.__value_.__r.__words[2]);
        if (v12 >= 0) {
          int v13 = (const std::string::value_type *)v8;
        }
        else {
          int v13 = (const std::string::value_type *)v8->__r_.__value_.__r.__words[0];
        }
        if (v12 >= 0) {
          std::string::size_type v14 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v14 = v8->__r_.__value_.__l.__size_;
        }
        std::string::size_type v15 = std::string::append(&v17, v13, v14);
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        std::string::size_type v24 = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string::size_type v23 = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::JoinPath(a1, (uint64_t)v23, a3);
        if (siri::dialogengine::PathExists((uint64_t *)a3))
        {
          if (SHIBYTE(v24) < 0) {
            operator delete(v23[0]);
          }
          v23[0] = v18;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
          goto LABEL_38;
        }
        if (*(char *)(a3 + 23) < 0) {
          operator delete(*(void **)a3);
        }
        if (SHIBYTE(v24) < 0) {
          operator delete(v23[0]);
        }
        ++v8;
      }
      v23[0] = v18;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
      v5 += 24;
      if (v5 != size) {
        continue;
      }
      break;
    }
  }
  std::string::basic_string[abi:ne180100]<0>((void *)a3, "");
LABEL_38:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  v23[0] = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1C60CEDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  a33 = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FindVisualFile(long long **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v32 = *MEMORY[0x1E4F143B8];
  memset(&v23, 0, sizeof(v23));
  siri::dialogengine::GetBaseDir(a1, (std::string *)&__p);
  BOOL v5 = siri::dialogengine::PreferXMLFiles((uint64_t)&__p);
  BOOL v6 = v5;
  if ((SHIBYTE(__p.__end_) & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_3;
    }
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(&__p, ".vcatbin");
    std::string::basic_string[abi:ne180100]<0>(&__p.__end_cap_.__value_, ".vcatxml");
    std::string::basic_string[abi:ne180100]<0>(v30, ".visualcat.bin");
    std::string::basic_string[abi:ne180100]<0>(v31, ".visualcat.xml");
    char v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    v24[0] = &v26;
    LOBYTE(v24[1]) = 0;
    char v26 = (std::string *)operator new(0x60uLL);
    uint64_t v27 = v26;
    uint64_t v28 = v26 + 4;
    uint64_t v8 = 0;
    uint64_t v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v28, (long long *)&__p, &v32, v26);
    do
    {
      if (SHIBYTE(v31[v8 + 2]) < 0) {
        operator delete((void *)v31[v8]);
      }
      v8 -= 3;
    }
    while (v8 != -12);
    goto LABEL_13;
  }
  operator delete(__p.__first_);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(&__p, ".vcatxml");
  std::string::basic_string[abi:ne180100]<0>(&__p.__end_cap_.__value_, ".vcatbin");
  std::string::basic_string[abi:ne180100]<0>(v30, ".visualcat.xml");
  std::string::basic_string[abi:ne180100]<0>(v31, ".visualcat.bin");
  char v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  v24[0] = &v26;
  LOBYTE(v24[1]) = 0;
  char v26 = (std::string *)operator new(0x60uLL);
  uint64_t v27 = v26;
  uint64_t v28 = v26 + 4;
  uint64_t v7 = 0;
  uint64_t v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v28, (long long *)&__p, &v32, v26);
  do
  {
    if (SHIBYTE(v31[v7 + 2]) < 0) {
      operator delete((void *)v31[v7]);
    }
    v7 -= 3;
  }
  while (v7 != -12);
LABEL_13:
  size_t v9 = v26;
  for (unint64_t i = v27; v9 != i; ++v9)
  {
    siri::dialogengine::VisualCatIdToPath(a2, (uint64_t)v9, v24);
    std::vector<std::string>::pointer end = v23.__end_;
    if (v23.__end_ >= v23.__end_cap_.__value_)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v23.__end_ - (char *)v23.__begin_) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v23.__end_cap_.__value_ - (char *)v23.__begin_) >> 3) > v14) {
        unint64_t v14 = 0x5555555555555556 * (((char *)v23.__end_cap_.__value_ - (char *)v23.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v23.__end_cap_.__value_ - (char *)v23.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v14;
      }
      __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v23.__end_cap_;
      if (v15) {
        long long v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v23.__end_cap_, v15);
      }
      else {
        long long v16 = 0;
      }
      std::string v17 = v16 + v13;
      __p.__first_ = v16;
      __p.__begin_ = v17;
      __p.__end_cap_.__value_ = &v16[v15];
      long long v18 = *(_OWORD *)v24;
      v17->__r_.__value_.__r.__words[2] = v25;
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      v24[1] = 0;
      std::string::size_type v25 = 0;
      v24[0] = 0;
      __p.__end_ = v17 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v23, &__p);
      std::string v19 = v23.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__p);
      v23.__end_ = v19;
      if (SHIBYTE(v25) < 0) {
        operator delete(v24[0]);
      }
    }
    else
    {
      long long v12 = *(_OWORD *)v24;
      v23.__end_->__r_.__value_.__r.__words[2] = v25;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
      v23.__end_ = end + 1;
    }
  }
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::string>::pointer begin = v23.__begin_;
  std::vector<std::string>::pointer v21 = v23.__end_;
  while (1)
  {
    if (begin == v21)
    {
      __p.__first_ = (std::__split_buffer<std::string>::pointer)&v23;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::string::basic_string[abi:ne180100]<0>((void *)a3, "");
      return;
    }
    siri::dialogengine::FindFileInUpdatableDirs((uint64_t)begin, (uint64_t *)a1, a3);
    if (*(char *)(a3 + 23) < 0) {
      break;
    }
    if (*(unsigned char *)(a3 + 23)) {
      goto LABEL_37;
    }
LABEL_35:
    ++begin;
  }
  if (!*(void *)(a3 + 8))
  {
    operator delete(*(void **)a3);
    goto LABEL_35;
  }
LABEL_37:
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1C60CF26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  uint64_t v40 = 0;
  while (1)
  {
    if (*(&a39 + v40) < 0) {
      operator delete(*(void **)((char *)&a34 + v40));
    }
    v40 -= 24;
    if (v40 == -96)
    {
      a13 = &a10;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
      _Unwind_Resume(a1);
    }
  }
}

void siri::dialogengine::FindSchemaFile(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v11, "schema");
  std::string::basic_string[abi:ne180100]<0>(&v9, "catschema.bin");
  siri::dialogengine::AddExtension(a2, (uint64_t)&v9, &__p);
  siri::dialogengine::JoinPath((uint64_t)v11, (uint64_t)&__p, (uint64_t)v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "schema");
  std::string::basic_string[abi:ne180100]<0>(&v8, "catschema");
  siri::dialogengine::AddExtension(a2, (uint64_t)&v8, &v9);
  siri::dialogengine::JoinPath((uint64_t)&__p, (uint64_t)&v9, (uint64_t)v11);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "schema");
  std::string::basic_string[abi:ne180100]<0>(v6, ".yaml");
  siri::dialogengine::AddExtension(a2, (uint64_t)v6, &v8);
  siri::dialogengine::JoinPath((uint64_t)&v9, (uint64_t)&v8, (uint64_t)&__p);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::FindFileInUpdatableDirs((uint64_t)v13, a1, a3);
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(void *)(a3 + 8)) {
      goto LABEL_32;
    }
  }
  else if (*(unsigned char *)(a3 + 23))
  {
    goto LABEL_32;
  }
  siri::dialogengine::FindFileInUpdatableDirs((uint64_t)v11, a1, (uint64_t)&v9);
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(std::string *)a3 = v9;
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(void *)(a3 + 8)) {
      goto LABEL_32;
    }
  }
  else if (*(unsigned char *)(a3 + 23))
  {
    goto LABEL_32;
  }
  siri::dialogengine::FindFileInUpdatableDirs((uint64_t)&__p, a1, (uint64_t)&v9);
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(std::string *)a3 = v9;
LABEL_32:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
}

void sub_1C60CF638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 + 23) < 0) {
    operator delete(*(void **)v32);
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (*(char *)(v33 - 33) < 0) {
    operator delete(*(void **)(v33 - 56));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::FindPatternFile(long long **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v21 = *MEMORY[0x1E4F143B8];
  siri::dialogengine::GetBaseDir(a1, &__p);
  BOOL v6 = siri::dialogengine::PreferXMLFiles((uint64_t)&__p);
  BOOL v7 = v6;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6) {
      goto LABEL_3;
    }
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(&__p, ".patternbin");
    std::string::basic_string[abi:ne180100]<0>(v18, ".patternxml");
    std::string::basic_string[abi:ne180100]<0>(v19, ".pattern.bin");
    std::string::basic_string[abi:ne180100]<0>(v20, ".pattern.xml");
    char v12 = 0;
    unint64_t v13 = 0;
    char v14 = 0;
    unint64_t v15 = &v12;
    char v16 = 0;
    char v12 = (std::string *)operator new(0x60uLL);
    unint64_t v13 = v12;
    char v14 = v12 + 4;
    uint64_t v9 = 0;
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, (long long *)&__p, &v21, v12);
    do
    {
      if (SHIBYTE(v20[v9 + 2]) < 0) {
        operator delete((void *)v20[v9]);
      }
      v9 -= 3;
    }
    while (v9 != -12);
    goto LABEL_13;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7) {
    goto LABEL_9;
  }
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(&__p, ".patternxml");
  std::string::basic_string[abi:ne180100]<0>(v18, ".patternbin");
  std::string::basic_string[abi:ne180100]<0>(v19, ".pattern.xml");
  std::string::basic_string[abi:ne180100]<0>(v20, ".pattern.bin");
  char v12 = 0;
  unint64_t v13 = 0;
  char v14 = 0;
  unint64_t v15 = &v12;
  char v16 = 0;
  char v12 = (std::string *)operator new(0x60uLL);
  unint64_t v13 = v12;
  char v14 = v12 + 4;
  uint64_t v8 = 0;
  unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, (long long *)&__p, &v21, v12);
  do
  {
    if (SHIBYTE(v20[v8 + 2]) < 0) {
      operator delete((void *)v20[v8]);
    }
    v8 -= 3;
  }
  while (v8 != -12);
LABEL_13:
  size_t v10 = v12;
  size_t v11 = v13;
  while (1)
  {
    if (v10 == v11)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::string::basic_string[abi:ne180100]<0>((void *)a3, "");
      return;
    }
    siri::dialogengine::PatternIdToPath(a2, (uint64_t)v10, &__p);
    siri::dialogengine::FindFileInUpdatableDirs((uint64_t)&__p, (uint64_t *)a1, a3);
    if (*(char *)(a3 + 23) < 0) {
      break;
    }
    if (*(unsigned char *)(a3 + 23)) {
      goto LABEL_24;
    }
LABEL_20:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    ++v10;
  }
  if (!*(void *)(a3 + 8))
  {
    operator delete(*(void **)a3);
    goto LABEL_20;
  }
LABEL_24:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1C60CFA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  uint64_t v32 = 0;
  while (1)
  {
    if (*(&a31 + v32) < 0) {
      operator delete(*(void **)((char *)&a26 + v32));
    }
    v32 -= 24;
    if (v32 == -96) {
      _Unwind_Resume(a1);
    }
  }
}

void siri::dialogengine::FindPatternSchemaFile(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "schema");
  std::string::basic_string[abi:ne180100]<0>(&v8, "patternschema.bin");
  siri::dialogengine::AddExtension(a2, (uint64_t)&v8, &__p);
  siri::dialogengine::JoinPath((uint64_t)v10, (uint64_t)&__p, (uint64_t)v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "schema");
  std::string::basic_string[abi:ne180100]<0>(v6, "patternschema");
  siri::dialogengine::AddExtension(a2, (uint64_t)v6, &v8);
  siri::dialogengine::JoinPath((uint64_t)&__p, (uint64_t)&v8, (uint64_t)v10);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::FindFileInUpdatableDirs((uint64_t)v12, a1, a3);
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(void *)(a3 + 8)) {
      goto LABEL_20;
    }
  }
  else if (*(unsigned char *)(a3 + 23))
  {
    goto LABEL_20;
  }
  siri::dialogengine::FindFileInUpdatableDirs((uint64_t)v10, a1, (uint64_t)&__p);
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(std::string *)a3 = __p;
LABEL_20:
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

void sub_1C60CFCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v34 - 33) < 0) {
    operator delete(*(void **)(v34 - 56));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetDialogMetadataFilename(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v23 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v18, "metadata");
  BOOL v6 = v19;
  if (*((char *)a1 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v7 = (size_t)a1[1];
  }
  std::string::basic_string[abi:ne180100]((uint64_t)v19, v7 + 5);
  if (v20 < 0) {
    BOOL v6 = (void *)v19[0];
  }
  if (v7)
  {
    if (*((char *)a1 + 23) >= 0) {
      std::string v8 = a1;
    }
    else {
      std::string v8 = *a1;
    }
    memmove(v6, v8, v7);
  }
  strcpy((char *)v6 + v7, ".dtag");
  uint64_t v9 = v21;
  if (*((char *)a2 + 23) >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  std::string::basic_string[abi:ne180100]((uint64_t)v21, v10 + 9);
  if (v22 < 0) {
    uint64_t v9 = (void *)v21[0];
  }
  if (v10)
  {
    if (*((char *)a2 + 23) >= 0) {
      char v11 = a2;
    }
    else {
      char v11 = *a2;
    }
    memmove(v9, v11, v10);
  }
  strcpy((char *)v9 + v10, ".dtag.bin");
  char v13 = 0;
  char v14 = 0;
  unint64_t v15 = 0;
  char v16 = &v13;
  char v17 = 0;
  char v13 = (std::string *)operator new(0x48uLL);
  char v14 = v13;
  unint64_t v15 = v13 + 3;
  char v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, &v18, &v23, v13);
  siri::dialogengine::JoinPath((uint64_t *)&v13, a3);
  char v16 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (*(&v22 + i * 8) < 0) {
      operator delete((void *)v21[i]);
    }
  }
}

void sub_1C60CFFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  uint64_t v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 71) < 0) {
      operator delete(*(void **)(&a15 + v16 + 48));
    }
    v16 -= 24;
    if (v16 == -72) {
      _Unwind_Resume(a1);
    }
  }
}

void siri::dialogengine::FindDialogMetadataFile(uint64_t *a1@<X0>, const void **a2@<X1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  siri::dialogengine::GetDialogMetadataFilename(a2, a3, (uint64_t)__p);
  siri::dialogengine::FindFileInUpdatableDirs((uint64_t)__p, a1, a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C60D0090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::DialogMetadataDirExists(uint64_t *a1, const void **a2)
{
  std::string::basic_string[abi:ne180100]<0>(v11, "metadata");
  if (*((char *)a2 + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  BOOL v5 = v9;
  std::string::basic_string[abi:ne180100]((uint64_t)v9, v4 + 5);
  if (v10 < 0) {
    BOOL v5 = (void **)v9[0];
  }
  if (v4)
  {
    if (*((char *)a2 + 23) >= 0) {
      BOOL v6 = a2;
    }
    else {
      BOOL v6 = *a2;
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".dtag");
  siri::dialogengine::JoinPath((uint64_t)v11, (uint64_t)v9, (uint64_t)__p);
  siri::dialogengine::FindFileInUpdatableDirs((uint64_t)__p, a1, (uint64_t)v15);
  if (v16 < 0)
  {
    BOOL v7 = v15[1] != 0;
    operator delete(v15[0]);
  }
  else
  {
    BOOL v7 = v16 != 0;
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  return v7;
}

void sub_1C60D01D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ExecuteCatutil(uint64_t *a1@<X0>, int a2@<W1>, int *a3@<X2>, std::string *a4@<X8>)
{
  if (a2) {
    BOOL v7 = " 2>&1 1>/dev/null";
  }
  else {
    BOOL v7 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(v27, v7);
  siri::dialogengine::GetCatutilPath(&v22);
  std::string v8 = std::string::append(&v22, " ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, " ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)__p, *a1, a1[1], (uint64_t)v18);
  if ((v21 & 0x80u) == 0) {
    char v10 = __p;
  }
  else {
    char v10 = (void **)__p[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v11 = v21;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  char v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((v28 & 0x80u) == 0) {
    char v14 = (const std::string::value_type *)v27;
  }
  else {
    char v14 = (const std::string::value_type *)v27[0];
  }
  if ((v28 & 0x80u) == 0) {
    std::string::size_type v15 = v28;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)v27[1];
  }
  char v16 = std::string::append(&v24, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  std::string::size_type v26 = v16->__r_.__value_.__r.__words[2];
  long long v25 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if ((char)v21 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::ExecuteShellCommand((const char *)&v25, a3, a4);
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  if ((char)v28 < 0) {
    operator delete(v27[0]);
  }
}

void sub_1C60D03C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  if (*(char *)(v40 - 33) < 0) {
    operator delete(*(void **)(v40 - 56));
  }
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::GetTemplateDirEnvVar@<X0>(std::string *a1@<X8>)
{
  {
    operator new();
  }
  BOOL v3 = (std::once_flag::_State_type *)siri::dialogengine::GetTemplateDirEnvVar(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetTemplateDirEnvVar(void)::flag, memory_order_acquire) != -1)
  {
    std::string v8 = &v6;
    BOOL v7 = &v8;
    std::__call_once(v3, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTemplateDirEnvVar(void)::$_0 &&>>);
  }
  size_t v4 = (long long **)siri::dialogengine::GetTemplateDirEnvVar(void)::sEnvVar;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *v4, v4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v4[1] - (char *)*v4) >> 3));
}

void sub_1C60D0550(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTemplateDirEnvVar(void)::$_0 &&>>()
{
  v0 = getenv("DIALOGENGINE_TEMPLATE_DIR");
  if (v0) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v1);
  operator new();
}

void sub_1C60D05F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v16 = v15;
  MEMORY[0x1C8796D70](v16, 0x20C40960023A9);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::GetUnentitledAppEnvVar(siri::dialogengine *this)
{
  uint64_t v1 = getenv("DIALOGENGINE_UNENTITLED_APP");
  if (!v1) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v1);
  siri::dialogengine::StringToLower((uint64_t)__p, (uint64_t)v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "true");
  BOOL v2 = siri::dialogengine::StringsEqual((uint64_t)v6, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  return v2;
}

void sub_1C60D06E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetDtdSearchPaths(siri::dialogengine *this@<X0>, std::string *a2@<X8>)
{
  PathsMutexRef = (std::mutex *)siri::dialogengine::GetPathsMutexRef(this);
  std::mutex::lock(PathsMutexRef);
  uint64_t DtdPathsRef = siri::dialogengine::GetDtdPathsRef(v3);
  char v5 = *(long long **)DtdPathsRef;
  char v6 = *(long long **)(DtdPathsRef + 8);
  if (*(long long **)DtdPathsRef == v6)
  {
    siri::dialogengine::GetFrameworkResourcePath(&__s);
    std::string::size_type size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __s.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      unint64_t v8 = *(void *)(DtdPathsRef + 8);
      if (v8 >= *(void *)(DtdPathsRef + 16))
      {
        uint64_t v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)DtdPathsRef, (long long *)&__s);
      }
      else
      {
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(DtdPathsRef + 8), __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v9 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
          *(void *)(v8 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *((void *)&__s.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v8 = v9;
        }
        uint64_t v10 = v8 + 24;
        *(void *)(DtdPathsRef + 8) = v8 + 24;
      }
      *(void *)(DtdPathsRef + 8) = v10;
    }
    siri::dialogengine::GetTemplateDirEnvVar(&v30);
    std::string::size_type v12 = v30.__r_.__value_.__l.__size_;
    for (uint64_t i = v30.__r_.__value_.__r.__words[0]; i != v12; i += 24)
    {
      std::string::basic_string[abi:ne180100]<0>(v26, "resources");
      siri::dialogengine::JoinPath(i, (uint64_t)v26, (uint64_t)__p);
      unint64_t v13 = *(void *)(DtdPathsRef + 8);
      unint64_t v14 = *(void *)(DtdPathsRef + 16);
      if (v13 >= v14)
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(void *)DtdPathsRef) >> 3);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *(void *)DtdPathsRef) >> 3);
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0x555555555555555) {
          unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v19 = v17;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(DtdPathsRef + 16);
        if (v19) {
          char v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(DtdPathsRef + 16, v19);
        }
        else {
          char v20 = 0;
        }
        unsigned __int8 v21 = v20 + v16;
        __v.__first_ = v20;
        __v.__begin_ = v21;
        __v.__end_cap_.__value_ = &v20[v19];
        long long v22 = *(_OWORD *)__p;
        v21->__r_.__value_.__r.__words[2] = v29;
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
        __p[1] = 0;
        std::string::size_type v29 = 0;
        __p[0] = 0;
        __v.__end_ = v21 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)DtdPathsRef, &__v);
        uint64_t v23 = *(void *)(DtdPathsRef + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v24 = SHIBYTE(v29);
        *(void *)(DtdPathsRef + 8) = v23;
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v15 = *(_OWORD *)__p;
        *(void *)(v13 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v29;
        *(_OWORD *)unint64_t v13 = v15;
        __p[1] = 0;
        std::string::size_type v29 = 0;
        __p[0] = 0;
        *(void *)(DtdPathsRef + 8) = v13 + 24;
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    __v.__first_ = &v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *(long long **)DtdPathsRef, *(long long **)(DtdPathsRef + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(DtdPathsRef + 8) - *(void *)DtdPathsRef) >> 3));
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, v5, v6, 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v5) >> 3));
  }
  std::mutex::unlock(PathsMutexRef);
}

void sub_1C60D09CC(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *a8, std::mutex *a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,std::__split_buffer<std::string> *a23,uint64_t a24,void *__pa,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  *(void *)(v30 + 8) = v31;
  if (a30 < 0) {
    operator delete(__pa);
  }
  std::mutex::unlock(a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetPathsMutexRef(siri::dialogengine *this)
{
  {
    operator new();
  }
  uint64_t v1 = (std::once_flag::_State_type *)siri::dialogengine::GetPathsMutexRef(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetPathsMutexRef(void)::flag, memory_order_acquire) != -1)
  {
    char v5 = &v3;
    size_t v4 = &v5;
    std::__call_once(v1, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetPathsMutexRef(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetPathsMutexRef(void)::pathsMutex;
}

void sub_1C60D0B20(_Unwind_Exception *a1)
{
}

uint64_t siri::dialogengine::GetDtdPathsRef(siri::dialogengine *this)
{
  {
    operator new();
  }
  uint64_t v1 = (std::once_flag::_State_type *)siri::dialogengine::GetDtdPathsRef(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetDtdPathsRef(void)::flag, memory_order_acquire) != -1)
  {
    char v5 = &v3;
    size_t v4 = &v5;
    std::__call_once(v1, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetDtdPathsRef(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetDtdPathsRef(void)::dtdPaths;
}

void sub_1C60D0BF0(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetDtdPathsRef(void)::$_0 &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetPathsMutexRef(void)::$_0 &&>>()
{
}

void siri::dialogengine::GetGradingAllowListSearchPaths(siri::dialogengine *this@<X0>, std::string *a2@<X8>)
{
  PathsMutexRef = (std::mutex *)siri::dialogengine::GetPathsMutexRef(this);
  std::mutex::lock(PathsMutexRef);
  {
    operator new();
  }
  char v3 = getenv("DIALOGENGINE_TEMPLATE_DIR");
  if (v3) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = "";
  }
  char v5 = (const void *)siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar;
  size_t v6 = strlen(v4);
  size_t v8 = v6;
  if (*(char *)(siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar + 23) < 0)
  {
    if (v6 != *(void *)(siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar + 8))
    {
      char v5 = *(const void **)siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar;
      goto LABEL_14;
    }
    if (v6 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    char v5 = *(const void **)siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar;
  }
  else if (v6 != *(unsigned __int8 *)(siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar + 23))
  {
    goto LABEL_14;
  }
  long long v9 = (siri::dialogengine *)memcmp(v5, v4, v6);
  if (!v9)
  {
    int v10 = 0;
    goto LABEL_15;
  }
LABEL_14:
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Environment variable DIALOGENGINE_TEMPLATE_DIR changed\nOld: %s\nNew: %s", v7, v8, v5, v4);
  int v10 = 1;
LABEL_15:
  uint64_t GradingAllowListPathsRef = siri::dialogengine::GetGradingAllowListPathsRef(v9);
  uint64_t v12 = GradingAllowListPathsRef;
  if (v10)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)GradingAllowListPathsRef);
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Reset GradingAllowListSearchPaths", v13);
    goto LABEL_19;
  }
  if (*(void *)GradingAllowListPathsRef == *(void *)(GradingAllowListPathsRef + 8))
  {
LABEL_19:
    siri::dialogengine::GetFrameworkResourcePath(v67);
    std::string::size_type size = HIBYTE(v67[0].__r_.__value_.__r.__words[2]);
    if ((v67[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v67[0].__r_.__value_.__l.__size_;
    }
    if (size)
    {
      siri::dialogengine::GetDomainTemplateDir((uint64_t)v67, (uint64_t)v63);
      std::string::basic_string[abi:ne180100]<0>(v61, "grading");
      siri::dialogengine::JoinPath((uint64_t)v63, (uint64_t)v61, (uint64_t)__p);
      unint64_t v16 = *(void *)(v12 + 16);
      unint64_t v17 = *(void *)(v12 + 8);
      if (v17 >= v16)
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(void *)v12) >> 3);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)v12) >> 3);
        if (2 * v22 > v21) {
          unint64_t v21 = 2 * v22;
        }
        if (v22 >= 0x555555555555555) {
          unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v23 = v21;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v12 + 16);
        if (v23) {
          int v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v12 + 16, v23);
        }
        else {
          int v24 = 0;
        }
        long long v25 = v24 + v20;
        __v.__first_ = v24;
        __v.__begin_ = v25;
        __v.__end_cap_.__value_ = &v24[v23];
        long long v26 = *(_OWORD *)__p;
        v25->__r_.__value_.__r.__words[2] = v66;
        *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
        __p[1] = 0;
        std::string::size_type v66 = 0;
        __p[0] = 0;
        __v.__end_ = v25 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v12, &__v);
        unint64_t v19 = *(void *)(v12 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        long long v18 = *(_OWORD *)__p;
        *(void *)(v17 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v66;
        *(_OWORD *)unint64_t v17 = v18;
        __p[1] = 0;
        std::string::size_type v66 = 0;
        __p[0] = 0;
        unint64_t v19 = v17 + 24;
        *(void *)(v12 + 8) = v17 + 24;
      }
      *(void *)(v12 + 8) = v19;
      if (SHIBYTE(v66) < 0) {
        operator delete(__p[0]);
      }
      if (v62 < 0) {
        operator delete(v61[0]);
      }
      if (SHIBYTE(v64) < 0) {
        operator delete(v63[0]);
      }
      uint64_t v27 = *(void *)(v12 + 8);
      unsigned __int8 v28 = (void *)(v27 - 24);
      if (*(char *)(v27 - 1) < 0) {
        unsigned __int8 v28 = (void *)*v28;
      }
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added to GradingAllowListSearchPaths: %s", v15, v28);
    }
    std::string::size_type v29 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&__v, v4);
    siri::dialogengine::StringSplit(v29, ":", __p);
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    uint64_t v31 = (char *)__p[0];
    for (uint64_t i = (char *)__p[1]; v31 != i; v31 += 24)
    {
      std::string::basic_string[abi:ne180100]<0>(v61, "grading");
      siri::dialogengine::JoinPath((uint64_t)v31, (uint64_t)v61, (uint64_t)v63);
      unint64_t v34 = *(void *)(v12 + 8);
      unint64_t v35 = *(void *)(v12 + 16);
      if (v34 >= v35)
      {
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *(void *)v12) >> 3);
        unint64_t v39 = v38 + 1;
        if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(void *)v12) >> 3);
        if (2 * v40 > v39) {
          unint64_t v39 = 2 * v40;
        }
        if (v40 >= 0x555555555555555) {
          unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v41 = v39;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v12 + 16);
        if (v41) {
          int v42 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v12 + 16, v41);
        }
        else {
          int v42 = 0;
        }
        uint64_t v43 = v42 + v38;
        __v.__first_ = v42;
        __v.__begin_ = v43;
        __v.__end_cap_.__value_ = &v42[v41];
        long long v44 = *(_OWORD *)v63;
        v43->__r_.__value_.__r.__words[2] = v64;
        *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v44;
        v63[1] = 0;
        std::string::size_type v64 = 0;
        v63[0] = 0;
        __v.__end_ = v43 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v12, &__v);
        unint64_t v37 = *(void *)(v12 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        long long v36 = *(_OWORD *)v63;
        *(void *)(v34 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v64;
        *(_OWORD *)unint64_t v34 = v36;
        v63[1] = 0;
        std::string::size_type v64 = 0;
        v63[0] = 0;
        unint64_t v37 = v34 + 24;
        *(void *)(v12 + 8) = v34 + 24;
      }
      *(void *)(v12 + 8) = v37;
      if (SHIBYTE(v64) < 0) {
        operator delete(v63[0]);
      }
      if (v62 < 0) {
        operator delete(v61[0]);
      }
      uint64_t v45 = *(void *)(v12 + 8);
      long long v46 = (void *)(v45 - 24);
      if (*(char *)(v45 - 1) < 0) {
        long long v46 = (void *)*v46;
      }
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added to GradingAllowListSearchPaths: %s", v33, v46);
    }
    unint64_t v48 = *(uint64_t **)v12;
    uint64_t v47 = *(void *)(v12 + 8);
    if (*(void *)v12 != v47)
    {
      unint64_t v49 = v47 - 24;
      if (v49 > (unint64_t)v48)
      {
        unint64_t v50 = (unint64_t)(v48 + 3);
        do
        {
          uint64_t v51 = *(void *)(v50 - 8);
          long long v52 = *(_OWORD *)(v50 - 24);
          uint64_t v53 = *(void *)(v49 + 16);
          *(_OWORD *)(v50 - 24) = *(_OWORD *)v49;
          *(void *)(v50 - 8) = v53;
          *(_OWORD *)unint64_t v49 = v52;
          *(void *)(v49 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v51;
          v49 -= 24;
          BOOL v54 = v50 >= v49;
          v50 += 24;
        }
        while (!v54);
      }
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"GradingAllowListSearchPaths...", v30);
    std::string::size_type v56 = *(uint64_t **)v12;
    uint64_t v57 = *(uint64_t **)(v12 + 8);
    if (*(uint64_t **)v12 != v57)
    {
      do
      {
        uint64_t v58 = v56;
        if (*((char *)v56 + 23) < 0) {
          uint64_t v58 = (uint64_t *)*v56;
        }
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"%s", v55, v58);
        v56 += 3;
      }
      while (v56 != v57);
    }
    uint64_t v59 = siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar;
    if (siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar)
    {
      if (*(char *)(siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar + 23) < 0) {
        operator delete(*(void **)siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar);
      }
      MEMORY[0x1C8796D70](v59, 0x1012C40EC159624);
    }
    operator new();
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *(long long **)GradingAllowListPathsRef, *(long long **)(GradingAllowListPathsRef + 8), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(GradingAllowListPathsRef + 8) - *(void *)GradingAllowListPathsRef) >> 3));
  std::mutex::unlock(PathsMutexRef);
}

void sub_1C60D12C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

uint64_t siri::dialogengine::GetGradingAllowListPathsRef(siri::dialogengine *this)
{
  {
    operator new();
  }
  uint64_t v1 = (std::once_flag::_State_type *)siri::dialogengine::GetGradingAllowListPathsRef(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetGradingAllowListPathsRef(void)::flag, memory_order_acquire) != -1)
  {
    char v5 = &v3;
    size_t v4 = &v5;
    std::__call_once(v1, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetGradingAllowListPathsRef(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetGradingAllowListPathsRef(void)::gradingAllowListPaths;
}

void sub_1C60D14C8(_Unwind_Exception *a1)
{
}

void siri::dialogengine::GetDomainTemplateDir(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "Templates");
  siri::dialogengine::JoinPath(a1, (uint64_t)__p, a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C60D153C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetGradingAllowListPathsRef(void)::$_0 &&>>()
{
}

void siri::dialogengine::GetSchemaSearchPaths(siri::dialogengine *this@<X0>, std::string *a2@<X8>)
{
  PathsMutexRef = (std::mutex *)siri::dialogengine::GetPathsMutexRef(this);
  std::mutex::lock(PathsMutexRef);
  uint64_t SchemaPathsRef = siri::dialogengine::GetSchemaPathsRef(v4);
  size_t v6 = *(long long **)SchemaPathsRef;
  char v7 = *(long long **)(SchemaPathsRef + 8);
  if (*(long long **)SchemaPathsRef == v7)
  {
    unint64_t v35 = a2;
    long long v36 = PathsMutexRef;
    siri::dialogengine::GetTemplateDirEnvVar(&v45);
    std::string::size_type size = v45.__r_.__value_.__l.__size_;
    for (uint64_t i = v45.__r_.__value_.__r.__words[0]; i != size; i += 24)
    {
      std::string::basic_string[abi:ne180100]<0>(v41, "schema");
      siri::dialogengine::JoinPath(i, (uint64_t)v41, (uint64_t)__p);
      unint64_t v10 = *(void *)(SchemaPathsRef + 8);
      unint64_t v11 = *(void *)(SchemaPathsRef + 16);
      if (v10 >= v11)
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(void *)SchemaPathsRef) >> 3);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(void *)SchemaPathsRef) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(SchemaPathsRef + 16);
        if (v16) {
          unint64_t v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(SchemaPathsRef + 16, v16);
        }
        else {
          unint64_t v17 = 0;
        }
        long long v18 = v17 + v13;
        __v.__first_ = v17;
        __v.__begin_ = v18;
        __v.__end_cap_.__value_ = &v17[v16];
        long long v19 = *(_OWORD *)__p;
        v18->__r_.__value_.__r.__words[2] = v44;
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        __p[1] = 0;
        std::string::size_type v44 = 0;
        __p[0] = 0;
        __v.__end_ = v18 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)SchemaPathsRef, &__v);
        uint64_t v20 = *(void *)(SchemaPathsRef + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v21 = SHIBYTE(v44);
        *(void *)(SchemaPathsRef + 8) = v20;
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v12 = *(_OWORD *)__p;
        *(void *)(v10 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v44;
        *(_OWORD *)unint64_t v10 = v12;
        __p[1] = 0;
        std::string::size_type v44 = 0;
        __p[0] = 0;
        *(void *)(SchemaPathsRef + 8) = v10 + 24;
      }
      if (v42 < 0) {
        operator delete(v41[0]);
      }
    }
    __v.__first_ = &v45;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    siri::dialogengine::GetSharedTemplateDir(0, (siri::dialogengine::UpdatableDir *)&__v);
    PathsMutexRef = v36;
    if (SHIBYTE(__v.__end_) < 0)
    {
      std::string::__init_copy_ctor_external(&v45, (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
    }
    else
    {
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
      v45.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
    }
    __p[0] = &v40;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = &v39;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v38 < 0) {
      operator delete(__v.__end_cap_.__value_);
    }
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    std::string::size_type v22 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v22 = v45.__r_.__value_.__l.__size_;
    }
    if (v22)
    {
      std::string::basic_string[abi:ne180100]<0>(v41, "schema");
      siri::dialogengine::JoinPath((uint64_t)&v45, (uint64_t)v41, (uint64_t)__p);
      unint64_t v23 = *(void *)(SchemaPathsRef + 16);
      unint64_t v24 = *(void *)(SchemaPathsRef + 8);
      if (v24 >= v23)
      {
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *(void *)SchemaPathsRef) >> 3);
        unint64_t v27 = v26 + 1;
        if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *(void *)SchemaPathsRef) >> 3);
        if (2 * v28 > v27) {
          unint64_t v27 = 2 * v28;
        }
        if (v28 >= 0x555555555555555) {
          unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v29 = v27;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(SchemaPathsRef + 16);
        if (v29) {
          uint64_t v30 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(SchemaPathsRef + 16, v29);
        }
        else {
          uint64_t v30 = 0;
        }
        uint64_t v31 = v30 + v26;
        __v.__first_ = v30;
        __v.__begin_ = v31;
        __v.__end_cap_.__value_ = &v30[v29];
        long long v32 = *(_OWORD *)__p;
        v31->__r_.__value_.__r.__words[2] = v44;
        *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
        __p[1] = 0;
        std::string::size_type v44 = 0;
        __p[0] = 0;
        __v.__end_ = v31 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)SchemaPathsRef, &__v);
        uint64_t v33 = *(void *)(SchemaPathsRef + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v34 = SHIBYTE(v44);
        *(void *)(SchemaPathsRef + 8) = v33;
        if (v34 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v25 = *(_OWORD *)__p;
        *(void *)(v24 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v44;
        *(_OWORD *)unint64_t v24 = v25;
        __p[1] = 0;
        std::string::size_type v44 = 0;
        __p[0] = 0;
        *(void *)(SchemaPathsRef + 8) = v24 + 24;
      }
      if (v42 < 0) {
        operator delete(v41[0]);
      }
    }
    v35->__r_.__value_.__r.__words[0] = 0;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, *(long long **)SchemaPathsRef, *(long long **)(SchemaPathsRef + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(SchemaPathsRef + 8) - *(void *)SchemaPathsRef) >> 3));
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
  }
  std::mutex::unlock(PathsMutexRef);
}

void sub_1C60D19A0(_Unwind_Exception *a1, std::mutex *a2, std::__split_buffer<std::string> *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::mutex *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__pa,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a11);
  if (a40 < 0) {
    operator delete(__pa);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetSchemaPathsRef(siri::dialogengine *this)
{
  {
    operator new();
  }
  uint64_t v1 = (std::once_flag::_State_type *)siri::dialogengine::GetSchemaPathsRef(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetSchemaPathsRef(void)::flag, memory_order_acquire) != -1)
  {
    char v5 = &v3;
    size_t v4 = &v5;
    std::__call_once(v1, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetSchemaPathsRef(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetSchemaPathsRef(void)::schemaPaths;
}

void sub_1C60D1B40(_Unwind_Exception *a1)
{
}

void siri::dialogengine::GetSharedTemplateDir(siri::dialogengine *this@<X0>, siri::dialogengine::UpdatableDir *a2@<X8>)
{
  int v2 = (int)this;
  siri::dialogengine::GetFrameworkResourcePath(&v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "Templates");
  siri::dialogengine::JoinPath((uint64_t)&v6, (uint64_t)__p, (uint64_t)&v7);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (siri::dialogengine::DirExists((uint64_t *)&v7))
  {
    siri::dialogengine::UpdatableDir::UpdatableDir(a2, &v7, v2);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v6, 3u);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
    *((_OWORD *)a2 + 4) = 0u;
    *((_OWORD *)a2 + 5) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *((_OWORD *)a2 + 3) = 0u;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  if (v8 < 0) {
    operator delete((void *)v7);
  }
}

void sub_1C60D1C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetSchemaPathsRef(void)::$_0 &&>>()
{
}

uint64_t siri::dialogengine::GetTemplateDirsCacheMutex(siri::dialogengine *this)
{
  {
    operator new();
  }
  uint64_t v1 = (std::once_flag::_State_type *)siri::dialogengine::GetTemplateDirsCacheMutex(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetTemplateDirsCacheMutex(void)::flag, memory_order_acquire) != -1)
  {
    char v5 = &v3;
    size_t v4 = &v5;
    std::__call_once(v1, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTemplateDirsCacheMutex(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetTemplateDirsCacheMutex(void)::sMutex;
}

void sub_1C60D1D94(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTemplateDirsCacheMutex(void)::$_0 &&>>()
{
}

uint64_t siri::dialogengine::GetTemplateDirsCache(siri::dialogengine *this)
{
  {
    operator new();
  }
  uint64_t v1 = (std::once_flag::_State_type *)siri::dialogengine::GetTemplateDirsCache(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetTemplateDirsCache(void)::flag, memory_order_acquire) != -1)
  {
    char v5 = &v3;
    size_t v4 = &v5;
    std::__call_once(v1, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTemplateDirsCache(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetTemplateDirsCache(void)::sCache;
}

void sub_1C60D1EB8(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTemplateDirsCache(void)::$_0 &&>>()
{
}

void siri::dialogengine::ClearTemplateDirsCache(siri::dialogengine *this)
{
  TemplateDirsCacheMutex = (std::mutex *)siri::dialogengine::GetTemplateDirsCacheMutex(this);
  std::mutex::lock(TemplateDirsCacheMutex);
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Clearing the TemplateDirs cache", v2);
  uint64_t TemplateDirsCache = siri::dialogengine::GetTemplateDirsCache(v3);
  std::__tree<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::__map_value_compare<std::pair<std::string,BOOL>,std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::less<std::pair<std::string,BOOL>>,true>,std::allocator<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>>>::destroy(*(void **)(TemplateDirsCache + 8));
  *(void *)uint64_t TemplateDirsCache = TemplateDirsCache + 8;
  *(void *)(TemplateDirsCache + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(TemplateDirsCache + 8) = 0;
  std::mutex::unlock(TemplateDirsCacheMutex);
}

void sub_1C60D1F84(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::__map_value_compare<std::pair<std::string,BOOL>,std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::less<std::pair<std::string,BOOL>>,true>,std::allocator<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::__map_value_compare<std::pair<std::string,BOOL>,std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::less<std::pair<std::string,BOOL>>,true>,std::allocator<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::__map_value_compare<std::pair<std::string,BOOL>,std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::less<std::pair<std::string,BOOL>>,true>,std::allocator<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,BOOL> const,std::vector<siri::dialogengine::UpdatableDir>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,BOOL> const,std::vector<siri::dialogengine::UpdatableDir>>,0>(uint64_t a1)
{
  char v3 = (void **)(a1 + 32);
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

void siri::dialogengine::GetTemplateDirs(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  v96[0] = a2;
  TemplateDirsCacheMutex = (std::mutex *)siri::dialogengine::GetTemplateDirsCacheMutex((siri::dialogengine *)a1);
  std::mutex::lock(TemplateDirsCacheMutex);
  uint64_t TemplateDirsCache = siri::dialogengine::GetTemplateDirsCache(v5);
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v107 = *(std::string *)a1;
  }
  char v108 = v96[0];
  uint64_t v93 = TemplateDirsCache;
  uint64_t v7 = *(void *)(TemplateDirsCache + 8);
  uint64_t v95 = (uint64_t **)(TemplateDirsCache + 8);
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v8 = TemplateDirsCache + 8;
  do
  {
    BOOL v9 = std::less<std::pair<std::string,BOOL>>::operator()[abi:ne180100]((const void **)(v7 + 32), (const void **)&v107.__r_.__value_.__l.__data_);
    unint64_t v10 = (uint64_t *)(v7 + 8);
    if (!v9)
    {
      unint64_t v10 = (uint64_t *)v7;
      uint64_t v8 = v7;
    }
    uint64_t v7 = *v10;
  }
  while (*v10);
  if ((uint64_t **)v8 == v95
    || std::less<std::pair<std::string,BOOL>>::operator()[abi:ne180100]((const void **)&v107.__r_.__value_.__l.__data_, (const void **)(v8 + 32)))
  {
LABEL_11:
    int v11 = SHIBYTE(v107.__r_.__value_.__r.__words[2]);
    std::string::size_type v12 = v107.__r_.__value_.__r.__words[0];
    if (v96[0]) {
      unint64_t v13 = "true";
    }
    else {
      unint64_t v13 = "false";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v13);
    unint64_t v15 = &v107;
    if (v11 < 0) {
      unint64_t v15 = (std::string *)v12;
    }
    if (SHIBYTE(v100) >= 0) {
      unint64_t v16 = __p;
    }
    else {
      unint64_t v16 = (void **)__p[0];
    }
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"TemplateDirs cache does not contain key ['%s', %s]", v14, v15, v16);
    if (SHIBYTE(v100) < 0) {
      operator delete(__p[0]);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
    uint64_t v17 = *(unsigned __int8 *)(a1 + 23);
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *(void *)(a1 + 8);
    }
    if (v17)
    {
      siri::dialogengine::UpdatableDir::UpdatableDir((siri::dialogengine::UpdatableDir *)__p, (long long *)a1, v96[0]);
      unint64_t v18 = *(void *)(a3 + 16);
      unint64_t v19 = *(void *)(a3 + 8);
      if (v19 >= v18)
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *(void *)a3) >> 5);
        unint64_t v24 = v23 + 1;
        if (v23 + 1 > 0x2AAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(void *)a3) >> 5);
        if (2 * v25 > v24) {
          unint64_t v24 = 2 * v25;
        }
        if (v25 >= 0x155555555555555) {
          unint64_t v26 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v26 = v24;
        }
        uint64_t v113 = a3 + 16;
        unint64_t v27 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>>(v26);
        unint64_t v28 = &v27[12 * v23];
        uint64_t v109 = v27;
        uint64_t v110 = v28;
        std::string v112 = &v27[12 * v29];
        long long v30 = *(_OWORD *)__p;
        std::string v28[2] = v100;
        *(_OWORD *)unint64_t v28 = v30;
        __p[1] = 0;
        uint64_t v100 = 0;
        __p[0] = 0;
        long long v31 = *(_OWORD *)v101;
        v28[5] = v102;
        *(_OWORD *)(v28 + 3) = v31;
        v101[1] = 0;
        uint64_t v102 = 0;
        v101[0] = 0;
        v28[6] = 0;
        v28[7] = 0;
        v28[8] = 0;
        *((_OWORD *)v28 + 3) = v103;
        v28[8] = v104;
        long long v103 = 0uLL;
        char v104 = 0;
        v28[9] = 0;
        v28[10] = 0;
        v28[11] = 0;
        *(_OWORD *)(v28 + 9) = v105;
        v28[11] = v106;
        long long v105 = 0uLL;
        uint64_t v106 = 0;
        unint64_t v111 = v28 + 12;
        std::vector<siri::dialogengine::UpdatableDir>::__swap_out_circular_buffer((uint64_t *)a3, &v109);
        unint64_t v22 = *(void *)(a3 + 8);
        std::__split_buffer<siri::dialogengine::UpdatableDir>::~__split_buffer((uint64_t)&v109);
      }
      else
      {
        long long v20 = *(_OWORD *)__p;
        *(void *)(v19 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v100;
        *(_OWORD *)unint64_t v19 = v20;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v21 = v102;
        *(_OWORD *)(v19 + 24) = *(_OWORD *)v101;
        *(void *)(v19 + 40) = v21;
        *(void *)(v19 + 48) = 0;
        uint64_t v100 = 0;
        v101[0] = 0;
        v101[1] = 0;
        uint64_t v102 = 0;
        *(void *)(v19 + 56) = 0;
        *(void *)(v19 + 64) = 0;
        *(_OWORD *)(v19 + 48) = v103;
        long long v103 = 0uLL;
        *(void *)(v19 + 64) = v104;
        *(void *)(v19 + 72) = 0;
        *(void *)(v19 + 80) = 0;
        *(void *)(v19 + 88) = 0;
        *(_OWORD *)(v19 + 72) = v105;
        *(void *)(v19 + 88) = v106;
        char v104 = 0;
        long long v105 = 0uLL;
        uint64_t v106 = 0;
        unint64_t v22 = v19 + 96;
      }
      *(void *)(a3 + 8) = v22;
      uint64_t v109 = (void **)&v105;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
      uint64_t v109 = (void **)&v103;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
      if (SHIBYTE(v102) < 0) {
        operator delete(v101[0]);
      }
      if (SHIBYTE(v100) < 0) {
        operator delete(__p[0]);
      }
      siri::dialogengine::DirName((std::string *)a1, (uint64_t)&v96[1]);
      uint64_t v32 = 0;
      do
      {
        std::string::basic_string[abi:ne180100]<0>(__p, off_1E651F9E8[v32]);
        siri::dialogengine::JoinPath((uint64_t)&v96[1], (uint64_t)__p, (uint64_t)&v109);
        BOOL v33 = siri::dialogengine::DirExists((uint64_t *)&v109);
        if (SHIBYTE(v111) < 0) {
          operator delete(v109);
        }
        if (SHIBYTE(v100) < 0) {
          operator delete(__p[0]);
        }
        char v34 = v32++ == 4 || v33;
      }
      while ((v34 & 1) == 0);
      if (v33)
      {
        siri::dialogengine::UpdatableDir::UpdatableDir((siri::dialogengine::UpdatableDir *)__p, (long long *)&v96[1], v96[0]);
        unint64_t v35 = *(void *)(a3 + 8);
        unint64_t v36 = *(void *)(a3 + 16);
        if (v35 >= v36)
        {
          unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(void *)a3) >> 5);
          unint64_t v47 = v46 + 1;
          if (v46 + 1 > 0x2AAAAAAAAAAAAAALL) {
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *(void *)a3) >> 5);
          if (2 * v48 > v47) {
            unint64_t v47 = 2 * v48;
          }
          if (v48 >= 0x155555555555555) {
            unint64_t v49 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v49 = v47;
          }
          uint64_t v113 = a3 + 16;
          unint64_t v50 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>>(v49);
          uint64_t v51 = &v50[12 * v46];
          uint64_t v109 = v50;
          uint64_t v110 = v51;
          std::string v112 = &v50[12 * v52];
          long long v53 = *(_OWORD *)__p;
          v51[2] = v100;
          *(_OWORD *)uint64_t v51 = v53;
          __p[1] = 0;
          uint64_t v100 = 0;
          __p[0] = 0;
          long long v54 = *(_OWORD *)v101;
          v51[5] = v102;
          *(_OWORD *)(v51 + 3) = v54;
          v101[1] = 0;
          uint64_t v102 = 0;
          v101[0] = 0;
          v51[6] = 0;
          v51[7] = 0;
          v51[8] = 0;
          *((_OWORD *)v51 + 3) = v103;
          v51[8] = v104;
          long long v103 = 0uLL;
          char v104 = 0;
          v51[9] = 0;
          v51[10] = 0;
          v51[11] = 0;
          *(_OWORD *)(v51 + 9) = v105;
          v51[11] = v106;
          long long v105 = 0uLL;
          uint64_t v106 = 0;
          unint64_t v111 = v51 + 12;
          std::vector<siri::dialogengine::UpdatableDir>::__swap_out_circular_buffer((uint64_t *)a3, &v109);
          unint64_t v39 = *(void *)(a3 + 8);
          std::__split_buffer<siri::dialogengine::UpdatableDir>::~__split_buffer((uint64_t)&v109);
        }
        else
        {
          long long v37 = *(_OWORD *)__p;
          *(void *)(v35 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v100;
          *(_OWORD *)unint64_t v35 = v37;
          __p[0] = 0;
          __p[1] = 0;
          char v38 = v102;
          *(_OWORD *)(v35 + 24) = *(_OWORD *)v101;
          *(void *)(v35 + 40) = v38;
          *(void *)(v35 + 48) = 0;
          uint64_t v100 = 0;
          v101[0] = 0;
          v101[1] = 0;
          uint64_t v102 = 0;
          *(void *)(v35 + 56) = 0;
          *(void *)(v35 + 64) = 0;
          *(_OWORD *)(v35 + 48) = v103;
          long long v103 = 0uLL;
          *(void *)(v35 + 64) = v104;
          *(void *)(v35 + 72) = 0;
          *(void *)(v35 + 80) = 0;
          *(void *)(v35 + 88) = 0;
          *(_OWORD *)(v35 + 72) = v105;
          *(void *)(v35 + 88) = v106;
          char v104 = 0;
          long long v105 = 0uLL;
          uint64_t v106 = 0;
          unint64_t v39 = v35 + 96;
        }
        *(void *)(a3 + 8) = v39;
        uint64_t v109 = (void **)&v105;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
        uint64_t v109 = (void **)&v103;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
        if (SHIBYTE(v102) < 0) {
          operator delete(v101[0]);
        }
        if (SHIBYTE(v100) < 0) {
          operator delete(__p[0]);
        }
      }
      if (v98 < 0) {
        operator delete(*(void **)&v96[1]);
      }
    }
    siri::dialogengine::GetTemplateDirEnvVar((std::string *)&v96[1]);
    std::string::size_type v56 = v97;
    for (uint64_t i = *(long long **)&v96[1]; i != v56; uint64_t i = (long long *)((char *)i + 24))
    {
      siri::dialogengine::UpdatableDir::UpdatableDir((siri::dialogengine::UpdatableDir *)__p, i, 0);
      unint64_t v57 = *(void *)(a3 + 8);
      unint64_t v58 = *(void *)(a3 + 16);
      if (v57 >= v58)
      {
        unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *(void *)a3) >> 5);
        unint64_t v63 = v62 + 1;
        if (v62 + 1 > 0x2AAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - *(void *)a3) >> 5);
        if (2 * v64 > v63) {
          unint64_t v63 = 2 * v64;
        }
        if (v64 >= 0x155555555555555) {
          unint64_t v65 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v65 = v63;
        }
        uint64_t v113 = a3 + 16;
        std::string::size_type v66 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>>(v65);
        char v67 = &v66[12 * v62];
        uint64_t v109 = v66;
        uint64_t v110 = v67;
        std::string v112 = &v66[12 * v68];
        long long v69 = *(_OWORD *)__p;
        std::string v67[2] = v100;
        *(_OWORD *)char v67 = v69;
        __p[1] = 0;
        uint64_t v100 = 0;
        __p[0] = 0;
        long long v70 = *(_OWORD *)v101;
        v67[5] = v102;
        *(_OWORD *)(v67 + 3) = v70;
        v101[1] = 0;
        uint64_t v102 = 0;
        v101[0] = 0;
        v67[6] = 0;
        v67[7] = 0;
        v67[8] = 0;
        *((_OWORD *)v67 + 3) = v103;
        v67[8] = v104;
        long long v103 = 0uLL;
        char v104 = 0;
        v67[9] = 0;
        v67[10] = 0;
        v67[11] = 0;
        *(_OWORD *)(v67 + 9) = v105;
        v67[11] = v106;
        long long v105 = 0uLL;
        uint64_t v106 = 0;
        unint64_t v111 = v67 + 12;
        std::vector<siri::dialogengine::UpdatableDir>::__swap_out_circular_buffer((uint64_t *)a3, &v109);
        unint64_t v61 = *(void *)(a3 + 8);
        std::__split_buffer<siri::dialogengine::UpdatableDir>::~__split_buffer((uint64_t)&v109);
      }
      else
      {
        long long v59 = *(_OWORD *)__p;
        *(void *)(v57 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v100;
        *(_OWORD *)unint64_t v57 = v59;
        __p[1] = 0;
        uint64_t v100 = 0;
        __p[0] = 0;
        uint64_t v60 = v102;
        *(_OWORD *)(v57 + 24) = *(_OWORD *)v101;
        *(void *)(v57 + 40) = v60;
        *(void *)(v57 + 48) = 0;
        v101[1] = 0;
        uint64_t v102 = 0;
        v101[0] = 0;
        *(void *)(v57 + 56) = 0;
        *(void *)(v57 + 64) = 0;
        *(_OWORD *)(v57 + 48) = v103;
        long long v103 = 0uLL;
        *(void *)(v57 + 64) = v104;
        *(void *)(v57 + 72) = 0;
        char v104 = 0;
        *(void *)(v57 + 80) = 0;
        *(void *)(v57 + 88) = 0;
        *(_OWORD *)(v57 + 72) = v105;
        *(void *)(v57 + 88) = v106;
        long long v105 = 0uLL;
        uint64_t v106 = 0;
        unint64_t v61 = v57 + 96;
      }
      *(void *)(a3 + 8) = v61;
      uint64_t v109 = (void **)&v105;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
      uint64_t v109 = (void **)&v103;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
      if (SHIBYTE(v102) < 0) {
        operator delete(v101[0]);
      }
      if (SHIBYTE(v100) < 0) {
        operator delete(__p[0]);
      }
    }
    __p[0] = &v96[1];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    siri::dialogengine::GetSharedTemplateDir((siri::dialogengine *)v96[0], (siri::dialogengine::UpdatableDir *)__p);
    unint64_t v71 = *(void *)(a3 + 16);
    unint64_t v72 = *(void *)(a3 + 8);
    if (v72 >= v71)
    {
      unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - *(void *)a3) >> 5);
      unint64_t v77 = v76 + 1;
      if (v76 + 1 > 0x2AAAAAAAAAAAAAALL) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - *(void *)a3) >> 5);
      if (2 * v78 > v77) {
        unint64_t v77 = 2 * v78;
      }
      if (v78 >= 0x155555555555555) {
        unint64_t v79 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v79 = v77;
      }
      uint64_t v113 = a3 + 16;
      uint64_t v80 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>>(v79);
      uint64_t v81 = &v80[12 * v76];
      uint64_t v109 = v80;
      uint64_t v110 = v81;
      std::string v112 = &v80[12 * v82];
      long long v83 = *(_OWORD *)__p;
      v81[2] = v100;
      *(_OWORD *)uint64_t v81 = v83;
      __p[1] = 0;
      uint64_t v100 = 0;
      __p[0] = 0;
      long long v84 = *(_OWORD *)v101;
      v81[5] = v102;
      *(_OWORD *)(v81 + 3) = v84;
      v101[1] = 0;
      uint64_t v102 = 0;
      v101[0] = 0;
      v81[6] = 0;
      v81[7] = 0;
      v81[8] = 0;
      *((_OWORD *)v81 + 3) = v103;
      v81[8] = v104;
      long long v103 = 0uLL;
      char v104 = 0;
      v81[9] = 0;
      v81[10] = 0;
      v81[11] = 0;
      *(_OWORD *)(v81 + 9) = v105;
      v81[11] = v106;
      long long v105 = 0uLL;
      uint64_t v106 = 0;
      unint64_t v111 = v81 + 12;
      std::vector<siri::dialogengine::UpdatableDir>::__swap_out_circular_buffer((uint64_t *)a3, &v109);
      unint64_t v75 = *(void *)(a3 + 8);
      std::__split_buffer<siri::dialogengine::UpdatableDir>::~__split_buffer((uint64_t)&v109);
    }
    else
    {
      long long v73 = *(_OWORD *)__p;
      *(void *)(v72 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v100;
      *(_OWORD *)unint64_t v72 = v73;
      __p[0] = 0;
      __p[1] = 0;
      v74 = v102;
      *(_OWORD *)(v72 + 24) = *(_OWORD *)v101;
      *(void *)(v72 + 40) = v74;
      *(void *)(v72 + 48) = 0;
      uint64_t v100 = 0;
      v101[0] = 0;
      v101[1] = 0;
      uint64_t v102 = 0;
      *(void *)(v72 + 56) = 0;
      *(void *)(v72 + 64) = 0;
      *(_OWORD *)(v72 + 48) = v103;
      long long v103 = 0uLL;
      *(void *)(v72 + 64) = v104;
      *(void *)(v72 + 72) = 0;
      *(void *)(v72 + 80) = 0;
      *(void *)(v72 + 88) = 0;
      *(_OWORD *)(v72 + 72) = v105;
      *(void *)(v72 + 88) = v106;
      char v104 = 0;
      long long v105 = 0uLL;
      uint64_t v106 = 0;
      unint64_t v75 = v72 + 96;
    }
    *(void *)(a3 + 8) = v75;
    uint64_t v109 = (void **)&v105;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
    uint64_t v109 = (void **)&v103;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
    if (SHIBYTE(v102) < 0) {
      operator delete(v101[0]);
    }
    if (SHIBYTE(v100) < 0) {
      operator delete(__p[0]);
    }
    std::string v85 = v95;
    uint64_t v86 = *v95;
    unint64_t v87 = v95;
    if (*v95)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v87 = (uint64_t **)v86;
          std::string v88 = (const void **)(v86 + 4);
          if (!std::less<std::pair<std::string,BOOL>>::operator()[abi:ne180100]((const void **)&v107.__r_.__value_.__l.__data_, (const void **)v86 + 4))break; {
          uint64_t v86 = *v87;
          }
          std::string v85 = v87;
          if (!*v87) {
            goto LABEL_107;
          }
        }
        if (!std::less<std::pair<std::string,BOOL>>::operator()[abi:ne180100](v88, (const void **)&v107.__r_.__value_.__l.__data_))break; {
        std::string v85 = v87 + 1;
        }
        uint64_t v86 = v87[1];
        if (!v86) {
          goto LABEL_107;
        }
      }
      uint64_t v89 = v87;
    }
    else
    {
LABEL_107:
      uint64_t v89 = operator new(0x58uLL);
      __p[0] = v89;
      __p[1] = v95;
      LOBYTE(v100) = 0;
      char v90 = (std::string *)(v89 + 4);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v90, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v90->__r_.__value_.__l.__data_ = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
        v89[6] = *((void *)&v107.__r_.__value_.__l + 2);
      }
      *((unsigned char *)v89 + 56) = v108;
      v89[9] = 0;
      v89[10] = 0;
      v89[8] = 0;
      LOBYTE(v100) = 1;
      *uint64_t v89 = 0;
      v89[1] = 0;
      v89[2] = v87;
      *std::string v85 = v89;
      uint64_t v91 = **(void **)v93;
      long long v92 = v89;
      if (v91)
      {
        *(void *)uint64_t v93 = v91;
        long long v92 = *v85;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v93 + 8), v92);
      ++*(void *)(v93 + 16);
      __p[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
    }
    if (v89 + 8 != (void *)a3) {
      std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)(v89 + 8), *(std::string **)a3, *(std::string **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5));
    }
  }
  else
  {
    int v40 = SHIBYTE(v107.__r_.__value_.__r.__words[2]);
    std::string::size_type v41 = v107.__r_.__value_.__r.__words[0];
    if (v96[0]) {
      char v42 = "true";
    }
    else {
      char v42 = "false";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v42);
    std::string::size_type v44 = &v107;
    if (v40 < 0) {
      std::string::size_type v44 = (std::string *)v41;
    }
    if (SHIBYTE(v100) >= 0) {
      std::string v45 = __p;
    }
    else {
      std::string v45 = (void **)__p[0];
    }
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Using TemplateDirs cache value for key ['%s', %s]", v43, v44, v45);
    if (SHIBYTE(v100) < 0) {
      operator delete(__p[0]);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
    std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((void *)a3, *(void *)(v8 + 64), *(void *)(v8 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 72) - *(void *)(v8 + 64)) >> 5));
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(TemplateDirsCacheMutex);
}

void sub_1C60D2BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,BOOL> const,std::vector<siri::dialogengine::UpdatableDir>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

BOOL std::less<std::pair<std::string,BOOL>>::operator()[abi:ne180100](const void **a1, const void **a2)
{
  int v4 = *((char *)a2 + 23);
  int v5 = *((char *)a1 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  if (v5 >= 0) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *a1;
  }
  if (v4 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    BOOL v9 = a2;
  }
  else {
    BOOL v9 = *a2;
  }
  if (v8 >= v6) {
    size_t v10 = v6;
  }
  else {
    size_t v10 = v8;
  }
  int v11 = memcmp(v7, v9, v10);
  BOOL v12 = v6 < v8;
  if (v11) {
    BOOL v12 = v11 < 0;
  }
  if (v12) {
    return 1;
  }
  int v14 = memcmp(v9, v7, v10);
  BOOL v15 = v8 < v6;
  if (v14) {
    BOOL v15 = v14 < 0;
  }
  return !v15 && *((unsigned __int8 *)a1 + 24) < *((unsigned __int8 *)a2 + 24);
}

uint64_t *std::vector<siri::dialogengine::UpdatableDir>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 96;
      long long v6 = *(_OWORD *)(v3 - 96);
      *(void *)(v4 - 80) = *(void *)(v3 - 80);
      *(_OWORD *)(v4 - 96) = v6;
      *(void *)(v3 - 88) = 0;
      *(void *)(v3 - 80) = 0;
      *(void *)(v3 - 96) = 0;
      long long v7 = *(_OWORD *)(v3 - 72);
      *(void *)(v4 - 56) = *(void *)(v3 - 56);
      *(_OWORD *)(v4 - 72) = v7;
      *(void *)(v3 - 64) = 0;
      *(void *)(v3 - 56) = 0;
      *(void *)(v3 - 72) = 0;
      *(void *)(v4 - 48) = 0;
      *(void *)(v4 - 40) = 0;
      *(void *)(v4 - 32) = 0;
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v3 - 48);
      *(void *)(v4 - 32) = *(void *)(v3 - 32);
      *(void *)(v3 - 48) = 0;
      *(void *)(v3 - 40) = 0;
      *(void *)(v3 - 32) = 0;
      *(void *)(v4 - 24) = 0;
      *(void *)(v4 - google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
      *(void *)(v3 - 8) = 0;
      v4 -= 96;
      v3 -= 96;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  *uint64_t result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<siri::dialogengine::UpdatableDir>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = i - 96;
    std::allocator<siri::dialogengine::UpdatableDir>::destroy[abi:ne180100](i - 96);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void siri::dialogengine::ClearSearchPathCaches(siri::dialogengine *this)
{
  PathsMutexRef = (std::mutex *)siri::dialogengine::GetPathsMutexRef(this);
  std::mutex::lock(PathsMutexRef);
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Clearing the SchemaPaths cache", v2);
  uint64_t SchemaPathsRef = (uint64_t *)siri::dialogengine::GetSchemaPathsRef(v3);
  std::vector<std::string>::__clear[abi:ne180100](SchemaPathsRef);
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Clearing the DtdPaths cache", v5);
  uint64_t DtdPathsRef = (uint64_t *)siri::dialogengine::GetDtdPathsRef(v6);
  std::vector<std::string>::__clear[abi:ne180100](DtdPathsRef);
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Clearing the GradingAllowListPaths cache", v8);
  uint64_t GradingAllowListPathsRef = (uint64_t *)siri::dialogengine::GetGradingAllowListPathsRef(v9);
  std::vector<std::string>::__clear[abi:ne180100](GradingAllowListPathsRef);
  std::mutex::unlock(PathsMutexRef);
}

void sub_1C60D2FA4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogState::usageCount(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D3038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::getCatCount(const void ***this, siri::dialogengine::Context *a2)
{
  siri::dialogengine::Context::GetUseCaseState(this, (const char *)a2, (uint64_t)&v4);
  uint64_t v2 = v4;
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy((void *)v6[4]);
  std::__tree<std::string>::destroy((uint64_t)v6, v6[1]);
  std::__tree<std::string>::destroy((uint64_t)v5, v5[1]);
  return v2 + 1;
}

void siri::dialogengine::DialogState::minsSinceLastUse(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D3154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::getTimeDiff(siri::dialogengine *this, siri::dialogengine::Context *a2, double a3)
{
  if (a2)
  {
    siri::dialogengine::Context::GetFamilyState(this, (const char *)a2);
    double v5 = v4;
  }
  else
  {
    siri::dialogengine::Context::GetUseCaseState((const void ***)this, (const char *)a2, (uint64_t)v6);
    double v5 = v7;
    std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy((void *)v9[4]);
    std::__tree<std::string>::destroy((uint64_t)v9, v9[1]);
    std::__tree<std::string>::destroy((uint64_t)v8, v8[1]);
  }
  if (v5 != 0.0) {
    siri::dialogengine::Context::GetCurrentTime(this);
  }
}

void siri::dialogengine::DialogState::hoursSinceLastUse(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D32B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogState::daysSinceLastUse(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D337C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogState::isFirstTime(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D343C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogState::isSecondTime(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D34FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogState::isFirstTimeToday(const void ***this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::Context::GetUseCaseState(this, (const char *)a2, (uint64_t)v22);
  uint64_t v5 = (uint64_t)v23;
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"(DialogState::isFirstTimeToday) Last usage secsSinceEpoch: %ld", v6, (uint64_t)v23);
  if (v5 <= 0) {
    goto LABEL_16;
  }
  siri::dialogengine::GetNowTimeStamp((siri::dialogengine *)this, a2, &v20);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v21;
  }
  else {
    uint64_t v8 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"(DialogState::isFirstTimeToday) Now secsSinceEpoch: %ld / timeZone: [%s]", v7, v20, v8);
  uint64_t v18 = v5;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
    uint64_t v5 = v18;
  }
  else
  {
    std::string __p = v21;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"(DialogState::isFirstTimeToday) Last usage secsSinceEpoch: %ld / timeZone: [%s]", v9, v5, p_p);
  uint64_t ICUDifferenceInDays = siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)&v18, (const siri::dialogengine::TimeStamp *)&v20, v11);
  int v13 = ICUDifferenceInDays;
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"(DialogState::isFirstTimeToday) Difference in days: %d", v14, ICUDifferenceInDays);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
    if (v13) {
      goto LABEL_16;
    }
  }
  else if (v13)
  {
LABEL_16:
    uint64_t v15 = "true";
    goto LABEL_19;
  }
  uint64_t v15 = "false";
LABEL_19:
  std::string::basic_string[abi:ne180100]<0>(&v20, v15);
  if (v21.__r_.__value_.__s.__data_[15] >= 0) {
    uint64_t v17 = &v20;
  }
  else {
    uint64_t v17 = v20;
  }
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"(DialogState::isFirstTimeToday) Result: %s", v16, v17);
  if (v21.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(v20);
  }
  operator new();
}

void sub_1C60D3740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, void *__p,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)&a29);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogState::isUnfamiliar(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D3868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogState::isFamiliar(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D3928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogState::isVeryFamiliar(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D39E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogState::familyUsageCount(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D3AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogState::familyMinsSinceLastUse(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D3B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogState::familyHoursSinceLastUse(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D3C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogState::familyDaysSinceLastUse(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D3CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogState::isUnfamiliarWithFamily(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D3DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogState::isFamiliarWithFamily(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D3E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogState::isVeryFamiliarWithFamily(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C60D3F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_Override_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::Override::Override((siri::dialogengine::PatternSchemaBinary::Override *)&siri::dialogengine::PatternSchemaBinary::_Override_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_Override_default_instance_, v4);
  qword_1EA3DB7A0 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
}

siri::dialogengine::PatternSchemaBinary::Override *siri::dialogengine::PatternSchemaBinary::Override::Override(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F21256D0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  if (atomic_load_explicit(scc_info_Override_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Override_PatternSchemaBinary_2eproto);
  }
  *((void *)this + 6) = 0;
  return this;
}

void sub_1C60D4068(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::Override::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::Override *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  double v4 = a2;
  if (*((unsigned char *)this + 16))
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      double v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    long long v6 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 6);
    char *v4 = 10;
    unsigned int v7 = *((_DWORD *)v6 + 5);
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unsigned int v9 = v7 >> 7;
      if (v7 >> 14)
      {
        uint64_t v10 = v4 + 2;
        do
        {
          int v11 = v10;
          *v10++ = v9 | 0x80;
          unsigned int v12 = v9 >> 7;
          unsigned int v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
        uint64_t v8 = v11 + 2;
        *uint64_t v10 = v12;
      }
      else
      {
        v4[2] = v9;
        uint64_t v8 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v7;
      uint64_t v8 = v4 + 2;
    }
    double v4 = (char *)siri::dialogengine::PatternSchemaBinary::Usage::InternalSerializeWithCachedSizesToArray(v6, v8, a3);
  }
  int v14 = *((_DWORD *)this + 8);
  if (v14 >= 1)
  {
    for (int i = 0; v14 != i; ++i)
    {
      uint64_t v16 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v16 + 23) < 0)
      {
        int64_t v17 = *(void *)(v16 + 8);
        if (v17 > 127) {
          goto LABEL_24;
        }
      }
      else
      {
        int64_t v17 = *(unsigned __int8 *)(v16 + 23);
      }
      if (*(void *)a3 - (void)v4 + 14 >= v17)
      {
        char *v4 = 18;
        v4[1] = v17;
        if (*(char *)(v16 + 23) >= 0) {
          uint64_t v18 = (const void *)v16;
        }
        else {
          uint64_t v18 = *(const void **)v16;
        }
        memcpy(v4 + 2, v18, v17);
        v4 += v17 + 2;
        continue;
      }
LABEL_24:
      double v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 2, v16, v4);
    }
  }
  uint64_t v19 = *((void *)this + 1);
  if ((v19 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v21 + 23) < 0)
  {
    double v23 = *(void **)v21;
    uint64_t v22 = *(void *)(v21 + 8);
  }
  else
  {
    LODWORD(v22) = *(unsigned __int8 *)(v21 + 23);
    double v23 = (void *)v21;
  }
  if (*(void *)a3 - (void)v4 >= (int)v22)
  {
    uint64_t v24 = (int)v22;
    memcpy(v4, v23, (int)v22);
    v4 += v24;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v23, v22, (unsigned __int8 *)v4);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::Usage::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::Usage *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  double v4 = a2;
  int v6 = *((_DWORD *)this + 8);
  if (v6 == 2)
  {
    uint64_t v10 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 3), a2);
  }
  else
  {
    if (v6 != 1) {
      goto LABEL_15;
    }
    if (*(void *)a3 <= (unint64_t)a2) {
      double v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    unsigned int v7 = (siri::dialogengine::PatternSchemaBinary::UsageMap *)*((void *)this + 3);
    char *v4 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 5);
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unsigned int v11 = v8 >> 7;
      if (v8 >> 14)
      {
        unsigned int v12 = v4 + 2;
        do
        {
          unsigned int v13 = v12;
          *v12++ = v11 | 0x80;
          unsigned int v14 = v11 >> 7;
          unsigned int v15 = v11 >> 14;
          v11 >>= 7;
        }
        while (v15);
        unsigned int v9 = v13 + 2;
        *unsigned int v12 = v14;
      }
      else
      {
        v4[2] = v11;
        unsigned int v9 = (unsigned __int8 *)(v4 + 3);
      }
    }
    else
    {
      v4[1] = v8;
      unsigned int v9 = (unsigned __int8 *)(v4 + 2);
    }
    uint64_t v10 = siri::dialogengine::PatternSchemaBinary::UsageMap::InternalSerializeWithCachedSizesToArray(v7, v9, a3);
  }
  double v4 = (char *)v10;
LABEL_15:
  uint64_t v16 = *((void *)this + 1);
  if ((v16 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 23) < 0)
  {
    long long v20 = *(void **)v18;
    uint64_t v19 = *(void *)(v18 + 8);
  }
  else
  {
    LODWORD(v19) = *(unsigned __int8 *)(v18 + 23);
    long long v20 = (void *)v18;
  }
  if (*(void *)a3 - (void)v4 >= (int)v19)
  {
    uint64_t v21 = (int)v19;
    memcpy(v4, v20, (int)v19);
    v4 += v21;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v20, v19, (unsigned __int8 *)v4);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::UsageMap::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::UsageMap *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6 = (void *)*((void *)this + 5);
  if (*v6)
  {
    if (*v6 != 1 && *((unsigned char *)a3 + 58) != 0) {
      operator new[]();
    }
    *((void *)&v17 + 1) = *((void *)this + 5);
    google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&v17, v6[3]);
    long long v15 = v17;
    uint64_t v16 = v18;
    for (uint64_t i = v17; (void)v15; uint64_t i = v15)
    {
      a2 = google::protobuf::internal::MapEntryFuncs<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9>::InternalSerialize(*(void *)(i + 24), *(void *)(i + 24) + 24, (char *)a2, a3);
      google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++((unsigned __int8 **)&v15);
    }
  }
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 23) < 0)
    {
      unsigned int v13 = *(char **)v11;
      uint64_t v12 = *(void *)(v11 + 8);
    }
    else
    {
      LODWORD(v12) = *(unsigned __int8 *)(v11 + 23);
      unsigned int v13 = (char *)v11;
    }
    if (*(void *)a3 - (void)a2 < (int)v12)
    {
      return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, v13, v12, a2);
    }
    else
    {
      uint64_t v14 = (int)v12;
      memcpy(a2, v13, (int)v12);
      a2 += v14;
    }
  }
  return a2;
}

void sub_1C60D45F8(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D50](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  unsigned int v8 = (char *)result;
  while (2)
  {
    uint64_t v95 = a2 - 8;
    uint64_t v91 = a2 - 24;
    long long v92 = a2 - 16;
    uint64_t v9 = v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v10 = (unint64_t)v9;
          uint64_t v11 = a2 - v9;
          uint64_t v12 = (a2 - v9) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                std::string::size_type v41 = *(void **)v95;
                char v42 = *(void **)v9;
                uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(void **)v95, *(void **)v9);
                if (result)
                {
                  *(void *)uint64_t v9 = v41;
                  *(void *)uint64_t v95 = v42;
                }
                break;
              case 3:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v95);
                break;
              case 4:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v9 + 2, (void **)v95);
                break;
              case 5:
                uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v9 + 2, (void **)v9 + 3, (void **)v95);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v43 = v9 + 8;
            BOOL v45 = v9 == a2 || v43 == a2;
            if (a4)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                unint64_t v47 = v9;
                do
                {
                  unint64_t v49 = *(void **)v47;
                  unint64_t v48 = (void *)*((void *)v47 + 1);
                  unint64_t v47 = v43;
                  uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v48, v49);
                  if (result)
                  {
                    uint64_t v50 = v46;
                    while (1)
                    {
                      *(void *)&v9[v50 + 8] = v49;
                      if (!v50) {
                        break;
                      }
                      unint64_t v49 = *(void **)&v9[v50 - 8];
                      uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v48, v49);
                      v50 -= 8;
                      if ((result & 1) == 0)
                      {
                        uint64_t v51 = &v9[v50 + 8];
                        goto LABEL_80;
                      }
                    }
                    uint64_t v51 = v9;
LABEL_80:
                    *(void *)uint64_t v51 = v48;
                  }
                  uint64_t v43 = v47 + 8;
                  v46 += 8;
                }
                while (v47 + 8 != a2);
              }
            }
            else if (!v45)
            {
              do
              {
                unint64_t v87 = *(void **)v10;
                uint64_t v86 = *(void **)(v10 + 8);
                unint64_t v10 = (unint64_t)v43;
                uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v86, v87);
                if (result)
                {
                  std::string v88 = (void *)v10;
                  do
                  {
                    *std::string v88 = v87;
                    unint64_t v87 = (void *)*(v88 - 2);
                    uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v86, v87);
                    --v88;
                  }
                  while ((result & 1) != 0);
                  *std::string v88 = v86;
                }
                uint64_t v43 = (char *)(v10 + 8);
              }
              while ((char *)(v10 + 8) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v9 != a2)
            {
              char v98 = v9;
              int64_t v52 = (unint64_t)(v12 - 2) >> 1;
              int64_t v53 = v52;
              uint64_t v89 = a2;
              uint64_t v90 = a2 - v9;
              do
              {
                int64_t v54 = v53;
                if (v11 >= 16 && v52 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  std::string::size_type v56 = &v98[8 * v55];
                  uint64_t v57 = 2 * v53 + 2;
                  int64_t v96 = v53;
                  if (v57 < v12)
                  {
                    unint64_t v58 = *(void **)v56;
                    uint64_t v60 = (void *)*((void *)v56 + 1);
                    BOOL v59 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(void **)v56, v60);
                    if (v59) {
                      v56 += 8;
                    }
                    else {
                      uint64_t v60 = v58;
                    }
                    if (v59) {
                      uint64_t v55 = v57;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void **)v56;
                  }
                  unint64_t v61 = &v98[8 * v54];
                  unint64_t v62 = *(void **)v61;
                  uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v60, *(void **)v61);
                  uint64_t v11 = v90;
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      unint64_t v63 = v56;
                      *(void *)unint64_t v61 = v60;
                      if (v52 < v55) {
                        break;
                      }
                      uint64_t v64 = (2 * v55) | 1;
                      std::string::size_type v56 = &v98[8 * v64];
                      uint64_t v65 = 2 * v55 + 2;
                      if (v65 < v12)
                      {
                        uint64_t v60 = *(void **)v56;
                        std::string::size_type v66 = (void *)*((void *)v56 + 1);
                        if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(void **)v56, v66))
                        {
                          uint64_t v60 = v66;
                          v56 += 8;
                          uint64_t v55 = v65;
                        }
                        else
                        {
                          uint64_t v55 = v64;
                        }
                      }
                      else
                      {
                        uint64_t v60 = *(void **)v56;
                        uint64_t v55 = (2 * v55) | 1;
                      }
                      uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v60, v62);
                      unint64_t v61 = v63;
                    }
                    while (!result);
                    *(void *)unint64_t v63 = v62;
                    a2 = v89;
                    uint64_t v11 = v90;
                    int64_t v54 = v96;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v67 = (unint64_t)v11 >> 3;
              uint64_t v68 = v98;
              do
              {
                long long v69 = a2;
                uint64_t v70 = 0;
                uint64_t v71 = v67 - 2;
                uint64_t v94 = *(void **)v68;
                if (v67 < 2) {
                  uint64_t v71 = v67 - 1;
                }
                uint64_t v72 = v71 >> 1;
                do
                {
                  long long v73 = &v68[8 * v70 + 8];
                  uint64_t v74 = (2 * v70) | 1;
                  uint64_t v75 = 2 * v70 + 2;
                  if (v75 >= v67)
                  {
                    unint64_t v78 = *(void **)v73;
                    uint64_t v70 = (2 * v70) | 1;
                  }
                  else
                  {
                    unint64_t v76 = *(void **)v73;
                    unint64_t v77 = *(void **)&v68[8 * v70 + 16];
                    uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(void **)v73, v77);
                    if (result) {
                      unint64_t v78 = v77;
                    }
                    else {
                      unint64_t v78 = v76;
                    }
                    if (result)
                    {
                      v73 += 8;
                      uint64_t v70 = v75;
                    }
                    else
                    {
                      uint64_t v70 = v74;
                    }
                  }
                  *(void *)uint64_t v68 = v78;
                  uint64_t v68 = v73;
                }
                while (v70 <= v72);
                a2 = v69 - 8;
                if (v73 == v69 - 8)
                {
                  *(void *)long long v73 = v94;
                }
                else
                {
                  *(void *)long long v73 = *(void *)a2;
                  *(void *)a2 = v94;
                  uint64_t v79 = v73 - v98 + 8;
                  if (v79 >= 9)
                  {
                    unint64_t v80 = (unint64_t)((v79 >> 3) - 2) >> 1;
                    uint64_t v81 = &v98[8 * v80];
                    uint64_t v82 = *(void **)v81;
                    long long v83 = *(void **)v73;
                    uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(void **)v81, *(void **)v73);
                    if (result)
                    {
                      do
                      {
                        long long v84 = v81;
                        *(void *)long long v73 = v82;
                        if (!v80) {
                          break;
                        }
                        unint64_t v80 = (v80 - 1) >> 1;
                        uint64_t v81 = &v98[8 * v80];
                        uint64_t v82 = *(void **)v81;
                        uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(void **)v81, v83);
                        long long v73 = v84;
                      }
                      while ((result & 1) != 0);
                      *(void *)long long v84 = v83;
                    }
                  }
                }
                BOOL v85 = v67-- <= 2;
                uint64_t v68 = v98;
              }
              while (!v85);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v9[8 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v14, (void **)v9, (void **)v95);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v14, (void **)v95);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9 + 1, (void **)v14 - 1, (void **)v92);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9 + 2, (void **)&v9[8 * v13 + 8], (void **)v91);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v14 - 1, (void **)v14, (void **)&v9[8 * v13 + 8]);
            long long v15 = *(void **)v9;
            *(void *)uint64_t v9 = *(void *)v14;
            *(void *)uint64_t v14 = v15;
          }
          --a3;
          uint64_t v16 = *(void **)v9;
          long long v17 = v9;
          if (a4) {
            break;
          }
          long long v17 = v9;
          if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*((void **)v9 - 1), *(void **)v9))
          {
            break;
          }
          uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v16, *(void **)v95);
          if (result)
          {
            do
            {
              long long v31 = (void *)*((void *)v9 + 1);
              v9 += 8;
              uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v16, v31);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v32 = v9 + 8;
            do
            {
              uint64_t v9 = v32;
              if (v32 >= a2) {
                break;
              }
              v32 += 8;
              uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v16, *(void **)v9);
            }
            while (!result);
          }
          BOOL v33 = a2;
          if (v9 < a2)
          {
            BOOL v33 = a2;
            do
            {
              char v34 = (void *)*((void *)v33 - 1);
              v33 -= 8;
              uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v16, v34);
            }
            while ((result & 1) != 0);
          }
          unint64_t v35 = a2;
          if (v9 < v33)
          {
            unint64_t v36 = *(void **)v9;
            long long v37 = *(void **)v33;
            do
            {
              *(void *)uint64_t v9 = v37;
              *(void *)BOOL v33 = v36;
              do
              {
                char v38 = (void *)*((void *)v9 + 1);
                v9 += 8;
                unint64_t v36 = v38;
              }
              while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v16, v38));
              do
              {
                unint64_t v39 = (void *)*((void *)v33 - 1);
                v33 -= 8;
                long long v37 = v39;
                uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v16, v39);
              }
              while ((result & 1) != 0);
            }
            while (v9 < v33);
          }
          int v40 = v9 - 8;
          BOOL v4 = (unint64_t)(v9 - 8) >= v10;
          BOOL v5 = v9 - 8 == (char *)v10;
          a2 = v35;
          if (v9 - 8 != (char *)v10) {
            *(void *)unint64_t v10 = *(void *)v40;
          }
          a4 = 0;
          *(void *)int v40 = v16;
        }
        do
        {
          uint64_t v18 = v17;
          long long v20 = (void *)*((void *)v17 + 1);
          v17 += 8;
          uint64_t v19 = v20;
        }
        while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v20, v16));
        uint64_t v97 = a3;
        uint64_t v21 = a2;
        if (v18 == (char *)v10)
        {
          uint64_t v21 = a2;
          do
          {
            if (v17 >= v21) {
              break;
            }
            double v23 = (void *)*((void *)v21 - 1);
            v21 -= 8;
          }
          while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v23, v16));
        }
        else
        {
          do
          {
            uint64_t v22 = (void *)*((void *)v21 - 1);
            v21 -= 8;
          }
          while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v22, v16));
        }
        unsigned int v8 = (char *)v10;
        uint64_t v24 = a2;
        if (v17 < v21)
        {
          unint64_t v25 = *(void **)v21;
          unint64_t v26 = v17;
          unint64_t v27 = v21;
          do
          {
            *(void *)unint64_t v26 = v25;
            *(void *)unint64_t v27 = v19;
            do
            {
              uint64_t v18 = v26;
              unint64_t v28 = (void *)*((void *)v26 + 1);
              v26 += 8;
              uint64_t v19 = v28;
            }
            while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v28, v16));
            do
            {
              uint64_t v29 = (void *)*((void *)v27 - 1);
              v27 -= 8;
              unint64_t v25 = v29;
            }
            while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v29, v16));
          }
          while (v26 < v27);
        }
        if (v18 != v8) {
          *(void *)unsigned int v8 = *(void *)v18;
        }
        *(void *)uint64_t v18 = v16;
        BOOL v4 = v17 >= v21;
        a2 = v24;
        a3 = v97;
        if (v4) {
          break;
        }
LABEL_31:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**,false>(v8, v18, v97, a4 & 1);
        a4 = 0;
        uint64_t v9 = v18 + 8;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v8, (void **)v18);
      uint64_t v9 = v18 + 8;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v18 + 1, (void **)v24);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_31;
      }
    }
    a2 = v18;
    if (!v30) {
      continue;
    }
    return result;
  }
}

unsigned __int8 *google::protobuf::internal::MapEntryFuncs<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9>::InternalSerialize(uint64_t a1, uint64_t a2, char *a3, google::protobuf::io::EpsCopyOutputStream *this)
{
  if (*(void *)this <= (unint64_t)a3) {
    a3 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a3);
  }
  *a3 = 10;
  int v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) != 0) {
    int v7 = *(_DWORD *)(a1 + 8);
  }
  unsigned int v8 = 9 * (__clz(v7 | 1) ^ 0x1F) + 73;
  int v9 = *(unsigned __int8 *)(a2 + 23);
  if ((v9 & 0x80u) != 0) {
    int v9 = *(_DWORD *)(a2 + 8);
  }
  unsigned int v10 = v7 + v9 + (v8 >> 6) + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v10 > 0x7F)
  {
    a3[1] = v10 | 0x80;
    unsigned int v12 = v10 >> 7;
    if (v10 >> 14)
    {
      unint64_t v13 = (unsigned __int8 *)(a3 + 2);
      do
      {
        uint64_t v14 = v13;
        *v13++ = v12 | 0x80;
        unsigned int v15 = v12 >> 7;
        unsigned int v16 = v12 >> 14;
        v12 >>= 7;
      }
      while (v16);
      uint64_t v11 = (char *)(v14 + 2);
      *unint64_t v13 = v15;
    }
    else
    {
      a3[2] = v12;
      uint64_t v11 = a3 + 3;
    }
  }
  else
  {
    a3[1] = v10;
    uint64_t v11 = a3 + 2;
  }
  if (*(void *)this <= (unint64_t)v11) {
    uint64_t v11 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, v11);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int64_t v17 = *(void *)(a1 + 8);
    if (v17 > 127)
    {
LABEL_34:
      long long v20 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(this, 1, a1, v11);
      goto LABEL_24;
    }
  }
  else
  {
    int64_t v17 = *(unsigned __int8 *)(a1 + 23);
  }
  if (*(void *)this - (void)v11 + 14 < v17) {
    goto LABEL_34;
  }
  *uint64_t v11 = 10;
  uint64_t v18 = v11 + 2;
  v11[1] = v17;
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v19 = (const void *)a1;
  }
  else {
    uint64_t v19 = *(const void **)a1;
  }
  memcpy(v11 + 2, v19, v17);
  long long v20 = &v18[v17];
LABEL_24:
  if (*(void *)this <= (unint64_t)v20) {
    long long v20 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, v20);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    int64_t v21 = *(void *)(a2 + 8);
    if (v21 > 127) {
      goto LABEL_35;
    }
  }
  else
  {
    int64_t v21 = *(unsigned __int8 *)(a2 + 23);
  }
  if (*(void *)this - (void)v20 + 14 >= v21)
  {
    *long long v20 = 18;
    uint64_t v22 = v20 + 2;
    v20[1] = v21;
    if (*(char *)(a2 + 23) >= 0) {
      double v23 = (const void *)a2;
    }
    else {
      double v23 = *(const void **)a2;
    }
    memcpy(v20 + 2, v23, v21);
    return (unsigned __int8 *)&v22[v21];
  }
LABEL_35:
  return google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(this, 2, a2, v20);
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(void **a1, void **a2, void **a3)
{
  int v6 = *a2;
  int v7 = *a1;
  BOOL v8 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a2, *a1);
  int v9 = *a3;
  BOOL result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a3, v6);
  if (v8)
  {
    if (result)
    {
      *a1 = v9;
    }
    else
    {
      *a1 = v6;
      *a2 = v7;
      unint64_t v13 = *a3;
      BOOL result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a3, v7);
      if (!result) {
        return result;
      }
      *a2 = v13;
    }
    *a3 = v7;
  }
  else if (result)
  {
    *a2 = v9;
    *a3 = v6;
    uint64_t v11 = *a2;
    unsigned int v12 = *a1;
    BOOL result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a2, *a1);
    if (result)
    {
      *a1 = v11;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(void **a1, void **a2, void **a3, void **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a2, a3);
  BOOL v8 = *a4;
  int v9 = *a3;
  BOOL result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a4, *a3);
  if (result)
  {
    *a3 = v8;
    *a4 = v9;
    uint64_t v11 = *a3;
    unsigned int v12 = *a2;
    BOOL result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a3, *a2);
    if (result)
    {
      *a2 = v11;
      *a3 = v12;
      unint64_t v13 = *a2;
      uint64_t v14 = *a1;
      BOOL result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a2, *a1);
      if (result)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(void **a1, void **a2, void **a3, void **a4, void **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a2, a3, a4);
  unsigned int v10 = *a5;
  uint64_t v11 = *a4;
  BOOL result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a5, *a4);
  if (result)
  {
    *a4 = v10;
    *a5 = v11;
    unint64_t v13 = *a4;
    uint64_t v14 = *a3;
    BOOL result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a4, *a3);
    if (result)
    {
      *a3 = v13;
      *a4 = v14;
      unsigned int v15 = *a3;
      unsigned int v16 = *a2;
      BOOL result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a3, *a2);
      if (result)
      {
        *a2 = v15;
        *a3 = v16;
        int64_t v17 = *a2;
        uint64_t v18 = *a1;
        BOOL result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a2, *a1);
        if (result)
        {
          *a1 = v17;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(void **a1, void **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(a2 - 1);
      int v7 = *a1;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      BOOL v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unsigned int v12 = *v9;
    unint64_t v13 = *v8;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*v9, v13))
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(void **)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        unint64_t v13 = *(void **)((char *)a1 + v14 - 16);
        BOOL v16 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v12, v13);
        uint64_t v14 = v15;
        if (!v16)
        {
          int64_t v17 = (void **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      int64_t v17 = a1;
LABEL_12:
      *int64_t v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    BOOL v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::Override::_InternalParse(siri::dialogengine::PatternSchemaBinary::Override *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  double v23 = a2;
  BOOL v5 = (unsigned int *)((char *)this + 24);
  int v6 = (unint64_t *)((char *)this + 8);
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v23 + 1);
    LODWORD(v8) = *(unsigned __int8 *)v23;
    if ((*(char *)v23 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    BOOL v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
      double v23 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, v8);
    double v23 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v8 >> 3 == 2)
    {
      if (v8 != 18) {
        goto LABEL_12;
      }
      unsigned int v12 = (char *)TagFallback - 1;
LABEL_19:
      unint64_t v13 = v12 + 1;
      double v23 = (google::protobuf::internal *)(v12 + 1);
      uint64_t v14 = (int *)*((void *)this + 5);
      if (v14)
      {
        uint64_t v15 = *((int *)this + 8);
        int v16 = *v14;
        if ((int)v15 < *v14)
        {
          *((_DWORD *)this + 8) = v15 + 1;
          AlignedAndAddCleanup = *(std::string **)&v14[2 * v15 + 2];
          goto LABEL_30;
        }
        if (v16 == *((_DWORD *)this + 9))
        {
LABEL_24:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v16 + 1);
          uint64_t v14 = (int *)*((void *)this + 5);
          int v16 = *v14;
        }
        *uint64_t v14 = v16 + 1;
        uint64_t v18 = *(atomic_ullong **)v5;
        if (!*(void *)v5) {
          operator new();
        }
        if (v18[14]) {
        AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v18, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
        }
        AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
        AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
        AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
        uint64_t v19 = *((void *)this + 5);
        uint64_t v20 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v20 + 1;
        *(void *)(v19 + 8 * v20 + 8) = AlignedAndAddCleanup;
        unint64_t v13 = (std::string::value_type *)v23;
LABEL_30:
        unsigned int v12 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v13, (uint64_t)a3);
        double v23 = (google::protobuf::internal *)v12;
        if (!v12) {
          return 0;
        }
        if (*(void *)a3 <= (unint64_t)v12 || *v12 != 18) {
          continue;
        }
        goto LABEL_19;
      }
      int v16 = *((_DWORD *)this + 9);
      goto LABEL_24;
    }
    if (v8 >> 3 == 1 && v8 == 10)
    {
      *((_DWORD *)this + 4) |= 1u;
      int64_t v21 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 6);
      if (!v21)
      {
        int64_t v21 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
        *((void *)this + 6) = v21;
        TagFallbacuint64_t k = v23;
      }
      uint64_t v11 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Usage>(a3, v21, TagFallback);
      goto LABEL_37;
    }
LABEL_12:
    if (v8) {
      BOOL v10 = (v8 & 7) == 4;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      *((_DWORD *)a3 + 20) = v8 - 1;
      return TagFallback;
    }
    uint64_t v11 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v6, TagFallback, a3);
LABEL_37:
    double v23 = v11;
    if (!v11) {
      return 0;
    }
  }
  return v23;
}

siri::dialogengine::PatternSchemaBinary::Usage *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::Usage *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Usage>);
  }
  siri::dialogengine::PatternSchemaBinary::Usage::Usage(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60D5724(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40C05B56FCLL);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Usage>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::PatternSchemaBinary::Usage *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  int v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    BOOL result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    BOOL v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    BOOL v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  BOOL result = (char *)siri::dialogengine::PatternSchemaBinary::Usage::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::Usage::_InternalParse(siri::dialogengine::PatternSchemaBinary::Usage *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v24 = a2;
  BOOL v5 = (std::string **)((char *)this + 24);
  int v6 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v24, *((_DWORD *)a3 + 23))) {
        return v24;
      }
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v24 + 1);
      LODWORD(v8) = *(unsigned __int8 *)v24;
      if ((*(char *)v24 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      BOOL v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v24 + 2);
LABEL_6:
        uint64_t v24 = TagFallback;
        goto LABEL_7;
      }
      TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v24, v8);
      uint64_t v24 = TagFallback;
      if (!TagFallback) {
        return TagFallback;
      }
LABEL_7:
      if (v8 >> 3 == 2) {
        break;
      }
      if (v8 >> 3 != 1 || v8 != 10) {
        goto LABEL_12;
      }
      if (*((_DWORD *)this + 8) == 1)
      {
        int v12 = *v5;
      }
      else
      {
        siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
        *((_DWORD *)this + 8) = 1;
        int v12 = (std::string *)google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap>(0);
        *((void *)this + 3) = v12;
        TagFallbacuint64_t k = v24;
      }
      unsigned int v13 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallbacuint64_t k = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback) {
          return 0;
        }
        int v14 = SizeFallback;
        unsigned int v13 = v16;
      }
      else
      {
        int v14 = (char *)TagFallback + 1;
      }
      int v17 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v14, v13);
      int v18 = *((_DWORD *)a3 + 22);
      BOOL v19 = __OFSUB__(v18--, 1);
      *((_DWORD *)a3 + 22) = v18;
      if (v18 < 0 != v19) {
        return 0;
      }
      int v20 = v17;
      int64_t v21 = siri::dialogengine::PatternSchemaBinary::UsageMap::_InternalParse((siri::dialogengine::PatternSchemaBinary::UsageMap *)v12, (google::protobuf::internal *)v14, a3);
      if (!v21) {
        return 0;
      }
      ++*((_DWORD *)a3 + 22);
      if (*((_DWORD *)a3 + 20)) {
        return 0;
      }
      int v22 = *((_DWORD *)a3 + 7) + v20;
      *((_DWORD *)a3 + 7) = v22;
      *(void *)a3 = *((void *)a3 + 1) + (v22 & (v22 >> 31));
      uint64_t v24 = v21;
    }
    if (v8 == 18)
    {
      if (*((_DWORD *)this + 8) != 2)
      {
        siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
        *((_DWORD *)this + 8) = 2;
        *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_24:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      }
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_24;
      }
      int v11 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3);
      goto LABEL_26;
    }
LABEL_12:
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    int v11 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v6, TagFallback, a3);
LABEL_26:
    uint64_t v24 = v11;
    if (!v11) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 32);
  if (v2 == 2)
  {
    uint64_t v3 = *(void *)(this + 24);
    if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0) {
        operator delete(*(void **)v3);
      }
      this = MEMORY[0x1C8796D70](v3, 0x1012C40EC159624);
    }
  }
  else if (v2 == 1)
  {
    this = *(void *)(this + 24);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 32) = 0;
  return this;
}

siri::dialogengine::PatternSchemaBinary::UsageMap *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::UsageMap *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::UsageMap>);
  }
  siri::dialogengine::PatternSchemaBinary::UsageMap::UsageMap(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60D5B9C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C401A3DEA33);
  _Unwind_Resume(a1);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::UsageMap::_InternalParse(siri::dialogengine::PatternSchemaBinary::UsageMap *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v46 = a2;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  BOOL v5 = (uint64_t *)((char *)this + 24);
  do
  {
LABEL_2:
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v46, *((_DWORD *)a3 + 23))) {
      return v46;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v46 + 1);
    LODWORD(v7) = *(unsigned __int8 *)v46;
    if ((*(char *)v46 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    int v7 = (const char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v46 + 2);
LABEL_6:
      uint64_t v46 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v46, v7);
    uint64_t v46 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v7 == 10)
    {
      int v9 = (char *)TagFallback - 1;
      while (1)
      {
        uint64_t v46 = (google::protobuf::internal *)(v9 + 1);
        unsigned int v10 = v9[1];
        if (v9[1] < 0)
        {
          SizeFallbacuint64_t k = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)(v9 + 1), (const char *)v9[1]);
          if (!SizeFallback) {
            return 0;
          }
          int v11 = SizeFallback;
          unsigned int v10 = v13;
        }
        else
        {
          int v11 = v9 + 2;
        }
        int v14 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v11, v10);
        int v15 = *((_DWORD *)a3 + 22);
        BOOL v16 = __OFSUB__(v15--, 1);
        *((_DWORD *)a3 + 22) = v15;
        if (v15 < 0 != v16) {
          return 0;
        }
        int v17 = v14;
        unint64_t v47 = (google::protobuf::internal::ArenaImpl **)v5;
        unint64_t v48 = v5;
        memset(&v49, 0, sizeof(v49));
        *(void *)uint64_t v51 = 0;
        String = v11;
        if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&String, *((_DWORD *)a3 + 23)))break; {
        if (*String != 10)
        }
          goto LABEL_42;
        int v18 = String[1];
        if (String[1] < 0)
        {
          BOOL v19 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)(String + 1), (const char *)String[1]);
          if (!v19) {
            goto LABEL_66;
          }
          int v18 = v20;
        }
        else
        {
          BOOL v19 = String + 2;
        }
        String = (char *)google::protobuf::internal::EpsCopyInputStream::ReadString((uint64_t)a3, v19, v18, &v49);
        if (!String) {
          goto LABEL_66;
        }
        if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&String, *((_DWORD *)a3 + 23)))
        {
          if (!String) {
            goto LABEL_66;
          }
LABEL_44:
          BOOL v30 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse>(*v47);
          *(void *)uint64_t v51 = v30;
LABEL_51:
          unint64_t v36 = v30 + 1;
          uint64_t v37 = v30[1];
          *((_DWORD *)v30 + 8) |= 1u;
          if ((uint64_t *)v37 == &google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)v30 + 1, (google::protobuf::Arena *)v30[3], (long long *)&google::protobuf::internal::fixed_address_empty_string);
            uint64_t v37 = *v36;
          }
          if (*(char *)(v37 + 23) < 0) {
            operator delete(*(void **)v37);
          }
          long long v38 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
          *(void *)(v37 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *((void *)&v49.__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v37 = v38;
          *((unsigned char *)&v49.__r_.__value_.__s + 23) = 0;
          v49.__r_.__value_.__s.__data_[0] = 0;
          uint64_t v29 = *(void **)v51;
LABEL_56:
          String = (char *)google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::_InternalParse((uint64_t)v29, (google::protobuf::internal *)String, a3);
          if (!String) {
            goto LABEL_66;
          }
          unint64_t v39 = (const std::string *)(*(uint64_t (**)(void))(**(void **)v51 + 128))(*(void *)v51);
          std::string::operator=(&v49, v39);
          int v40 = google::protobuf::Map<std::string,std::string>::operator[](v48, (uint64_t)&v49);
          uint64_t v50 = v40;
          uint64_t v41 = *(void *)v51;
          *(_DWORD *)(*(void *)v51 + 32) |= 2u;
          char v42 = (uint64_t **)(v41 + 16);
          uint64_t v43 = *(uint64_t **)(v41 + 16);
          if (v43 == &google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v41 + 16), *(google::protobuf::Arena **)(v41 + 24), (long long *)&google::protobuf::internal::fixed_address_empty_string);
            uint64_t v43 = *v42;
            int v40 = v50;
          }
          if (SHIBYTE(v40->__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40->__r_.__value_.__l.__data_);
          }
          long long v44 = *(_OWORD *)v43;
          v40->__r_.__value_.__r.__words[2] = v43[2];
          *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v44;
          *((unsigned char *)v43 + 23) = 0;
          *(unsigned char *)uint64_t v43 = 0;
          int v9 = String;
          goto LABEL_36;
        }
        if (*String != 18) {
          goto LABEL_44;
        }
        uint64_t v21 = *(void *)v48[2];
        int v22 = google::protobuf::Map<std::string,std::string>::operator[](v48, (uint64_t)&v49);
        uint64_t v50 = v22;
        if (v21 == *(void *)v48[2]) {
          goto LABEL_44;
        }
        int v23 = String[1];
        if (String[1] < 0)
        {
          uint64_t v24 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)(String + 1), (const char *)String[1]);
          if (!v24)
          {
            String = 0;
LABEL_65:
            google::protobuf::Map<std::string,std::string>::erase(v48, (unsigned __int8 *)&v49);
LABEL_66:
            google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::~Parser((uint64_t)&v47);
            return 0;
          }
          int v23 = v25;
        }
        else
        {
          uint64_t v24 = String + 2;
        }
        String = (char *)google::protobuf::internal::EpsCopyInputStream::ReadString((uint64_t)a3, v24, v23, v22);
        if (!String) {
          goto LABEL_65;
        }
        char v26 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&String, *((_DWORD *)a3 + 23));
        int v9 = String;
        if ((v26 & 1) == 0)
        {
          if (!String) {
            goto LABEL_66;
          }
          long long v31 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse>(*v47);
          *(void *)uint64_t v51 = v31;
          uint64_t v32 = v50;
          *((_DWORD *)v31 + 8) |= 2u;
          BOOL v33 = v31 + 2;
          uint64_t v34 = v31[2];
          if ((uint64_t *)v34 == &google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)v31 + 2, (google::protobuf::Arena *)v31[3], (long long *)&google::protobuf::internal::fixed_address_empty_string);
            uint64_t v34 = *v33;
          }
          if (*(char *)(v34 + 23) < 0) {
            operator delete(*(void **)v34);
          }
          long long v35 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
          *(void *)(v34 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *((void *)&v32->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v34 = v35;
          *((unsigned char *)&v32->__r_.__value_.__s + 23) = 0;
          v32->__r_.__value_.__s.__data_[0] = 0;
          google::protobuf::Map<std::string,std::string>::erase(v48, (unsigned __int8 *)&v49);
          BOOL v30 = *(void **)v51;
          goto LABEL_51;
        }
LABEL_36:
        google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::~Parser((uint64_t)&v47);
        if (!v9) {
          return 0;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          return 0;
        }
        int v27 = *((_DWORD *)a3 + 7) + v17;
        *((_DWORD *)a3 + 7) = v27;
        unint64_t v28 = *((void *)a3 + 1) + (v27 & (v27 >> 31));
        *(void *)a3 = v28;
        uint64_t v46 = (google::protobuf::internal *)v9;
        if (v28 <= (unint64_t)v9 || *v9 != 10) {
          goto LABEL_2;
        }
      }
      if (!String) {
        goto LABEL_66;
      }
LABEL_42:
      uint64_t v29 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse>(*v47);
      *(void *)uint64_t v51 = v29;
      goto LABEL_56;
    }
    if (v7) {
      BOOL v8 = (v7 & 7) == 4;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      *((_DWORD *)a3 + 20) = v7 - 1;
      return TagFallback;
    }
    uint64_t v46 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v7, v4, TagFallback, a3);
  }
  while (v46);
  return 0;
}

void sub_1C60D6090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::~Parser((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::~Parser(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    if (!(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2))
    {
      uint64_t v3 = *(void *)(a1 + 48);
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
    }
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

double google::protobuf::Map<std::string,std::string>::erase(void *a1, unsigned __int8 *a2)
{
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  double result = *(double *)&v6;
  if ((void)v6)
  {
    long long v4 = v6;
    uint64_t v5 = v7;
    *(void *)&double result = google::protobuf::Map<std::string,std::string>::erase((uint64_t)&v6, a1, (uint64_t *)&v4).n128_u64[0];
  }
  return result;
}

void *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  double result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse>);
  }
  result[3] = 0;
  result[1] = &google::protobuf::internal::fixed_address_empty_string;
  result[2] = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)result + 8) = 0;
  *double result = &unk_1F2125480;
  return result;
}

google::protobuf::internal *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v17 = a2;
  uint64_t v5 = (std::string **)(a1 + 16);
  long long v6 = (std::string **)(a1 + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v17, *((_DWORD *)this + 23)))return v17; {
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v17 + 1);
    }
    LODWORD(v8) = *(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    int v9 = *(char *)TagFallback;
    BOOL v8 = (const char *)(v8 + (v9 << 7) - 128);
    if ((v9 & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      int v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v8);
    int v17 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v8 == 10)
    {
      *(_DWORD *)(a1 + 32) |= 1u;
      int v12 = *(std::string **)(a1 + 8);
      if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_19;
      }
      google::protobuf::internal::ArenaStringPtr::CreateInstance(v6, *(google::protobuf::Arena **)(a1 + 24), (long long *)&google::protobuf::internal::fixed_address_empty_string);
      int v12 = *(std::string **)(a1 + 8);
      goto LABEL_18;
    }
    if (v8 == 18)
    {
      *(_DWORD *)(a1 + 32) |= 2u;
      int v12 = *(std::string **)(a1 + 16);
      if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_19;
      }
      google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena **)(a1 + 24), (long long *)&google::protobuf::internal::fixed_address_empty_string);
      int v12 = *(std::string **)(a1 + 16);
LABEL_18:
      TagFallbacuint64_t k = v17;
LABEL_19:
      int v13 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback) {
          goto LABEL_24;
        }
        int v14 = (std::string::value_type *)SizeFallback;
        int v13 = v15;
      }
      else
      {
        int v14 = (char *)TagFallback + 1;
      }
      SizeFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::ReadString((uint64_t)this, v14, v13, v12);
      goto LABEL_24;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    SizeFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, 0, TagFallback, this);
LABEL_24:
    int v17 = SizeFallback;
    if (!SizeFallback) {
      return 0;
    }
  }
  *((_DWORD *)this + 20) = v8 - 1;
  return TagFallback;
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::value(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::key(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

unsigned __int8 *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  if (*(char *)(v6 + 23) < 0)
  {
    int64_t v7 = *(void *)(v6 + 8);
    if (v7 > 127)
    {
LABEL_21:
      int v9 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v6, a2);
      goto LABEL_11;
    }
  }
  else
  {
    int64_t v7 = *(unsigned __int8 *)(v6 + 23);
  }
  if (*(void *)a3 - (void)a2 + 14 < v7) {
    goto LABEL_21;
  }
  *a2 = 10;
  a2[1] = v7;
  if (*(char *)(v6 + 23) >= 0) {
    BOOL v8 = (const void *)v6;
  }
  else {
    BOOL v8 = *(const void **)v6;
  }
  memcpy(a2 + 2, v8, v7);
  int v9 = &a2[v7 + 2];
LABEL_11:
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (*(void *)a3 <= (unint64_t)v9) {
    int v9 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v9);
  }
  if (*(char *)(v10 + 23) < 0)
  {
    int64_t v11 = *(void *)(v10 + 8);
    if (v11 > 127) {
      goto LABEL_22;
    }
  }
  else
  {
    int64_t v11 = *(unsigned __int8 *)(v10 + 23);
  }
  if (*(void *)a3 - (void)v9 + 14 >= v11)
  {
    char *v9 = 18;
    v9[1] = v11;
    if (*(char *)(v10 + 23) >= 0) {
      int v12 = (const void *)v10;
    }
    else {
      int v12 = *(const void **)v10;
    }
    memcpy(v9 + 2, v12, v11);
    return (unsigned __int8 *)&v9[v11 + 2];
  }
LABEL_22:
  return google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 2, v10, v9);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetCachedSize(_DWORD *a1)
{
  int v2 = a1[8];
  if (v2)
  {
    uint64_t v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 128))(a1);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0) {
      int v8 = *(_DWORD *)(v7 + 8);
    }
    unsigned int v3 = v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[8] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    unsigned int v6 = 0;
    return v6 + v3;
  }
  unsigned int v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0) {
    int v5 = *(_DWORD *)(v4 + 8);
  }
  unsigned int v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(_DWORD *a1)
{
  int v2 = a1[8];
  if (v2)
  {
    uint64_t v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 128))(a1);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0) {
      int v8 = *(_DWORD *)(v7 + 8);
    }
    uint64_t v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[8] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v6 = 0;
    return v6 + v3;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0) {
    int v5 = *(_DWORD *)(v4 + 8);
  }
  uint64_t v6 = (int)(v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6)) + 1;
  return v6 + v3;
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *lpsrc)
{
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFromInternal(a1, lpsrc);
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[8];
  if (v2)
  {
    if (v2)
    {
      int v5 = (std::string **)(a1 + 8);
      if (*(uint64_t **)(a1 + 8) == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 8), *(google::protobuf::Arena **)(a1 + 24), (long long *)&google::protobuf::internal::fixed_address_empty_string);
      }
      uint64_t v6 = (long long *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 128))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 8), *(google::protobuf::Arena **)(a1 + 24), v6);
      }
      else {
        std::string::operator=(*v5, (const std::string *)v6);
      }
      *(_DWORD *)(a1 + 32) |= 1u;
      int v2 = a2[8];
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v7 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(google::protobuf::Arena **)(a1 + 24), (long long *)&google::protobuf::internal::fixed_address_empty_string);
      }
      int v8 = (long long *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 136))(a2);
      if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(google::protobuf::Arena **)(a1 + 24), v8);
      }
      else {
        std::string::operator=(*v7, (const std::string *)v8);
      }
      *(_DWORD *)(a1 + 32) |= 2u;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::IsInitialized()
{
  return 1;
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Clear(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  uint64_t v2 = *(void *)(result + 16);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  *(_DWORD *)(result + 32) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetArena(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::New(int a1, google::protobuf::internal::ArenaImpl *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse>(this);
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::New()
{
}

void *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse::~UsageMap_ValueEntry_DoNotUse(siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse *this)
{
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(this);
  JUMPOUT(0x1C8796D70);
}

void *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(void *a1)
{
  *a1 = &unk_1F2125A00;
  if (!a1[3])
  {
    google::protobuf::internal::ArenaStringPtr::DestroyNoArena(a1[1]);
    google::protobuf::internal::ArenaStringPtr::DestroyNoArena(a1[2]);
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(void *a1)
{
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

__n128 google::protobuf::Map<std::string,std::string>::erase(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  if (!*a2)
  {
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7)
    {
      if (*(char *)(v7 + 47) < 0) {
        operator delete(*(void **)(v7 + 24));
      }
      if (*(char *)(v7 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      MEMORY[0x1C8796D70](v7, 0x1012C403467C318);
      uint64_t v6 = *a3;
    }
  }
  __n128 v32 = *(__n128 *)a3;
  unint64_t v33 = a3[2];
  uint64_t v8 = *(void *)(v6 + 32);
  if (v8) {
    goto LABEL_9;
  }
  long long v35 = 0;
  BOOL v9 = google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::revalidate_if_necessary((uint64_t)a3, (uint64_t *)&v35);
  uint64_t v10 = a3[2];
  if (v9)
  {
    unint64_t v11 = v10 + 1;
  }
  else
  {
    if (v10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 456);
      int v12 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: (bucket_index_ & 1) == (0u): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v34, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
      uint64_t v10 = a3[2];
    }
    uint64_t v13 = *(void *)(*(void *)(a3[1] + 32) + 8 * v10);
    uint64_t v14 = (uint64_t)v35;
    int v15 = (void *)v35[1];
    if (v15)
    {
      do
      {
        BOOL v16 = v15;
        int v15 = (void *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        BOOL v16 = *(void **)(v14 + 16);
        BOOL v17 = *v16 == v14;
        uint64_t v14 = (uint64_t)v16;
      }
      while (!v17);
    }
    long long v35 = v16;
    if (v16 != (void *)(v13 + 8))
    {
      uint64_t v8 = v16[4];
LABEL_9:
      *a3 = v8;
      goto LABEL_23;
    }
    unint64_t v11 = v10 + 2;
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(a3, v11);
LABEL_23:
  int v18 = (void *)a2[2];
  if ((void *)v32.n128_u64[1] != v18)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 606);
    BOOL v19 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: (it.m_) == (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v35, (const char **)&v19->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
  }
  long long v35 = 0;
  BOOL v20 = google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v32, (uint64_t *)&v35);
  unint64_t v21 = v33;
  int v22 = (void **)v32.n128_u64[0];
  uint64_t v23 = v18[4];
  uint64_t v24 = *(void *)(v23 + 8 * v33);
  if (v20)
  {
    if (!v24 || v24 == *(void *)(v23 + 8 * (v33 ^ 1)))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 612);
      int v25 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: TableEntryIsNonEmptyList(b): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v34, (const char **)&v25->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
      uint64_t v24 = *(void *)(v18[4] + 8 * v21);
    }
    uint64_t v26 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList((uint64_t)v22, v24);
    goto LABEL_37;
  }
  if (!v24 || v24 != *(void *)(v23 + 8 * (v33 ^ 1)))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 617);
    int v27 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: TableEntryIsTree(b): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v34, (const char **)&v27->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
    uint64_t v24 = *(void *)(v18[4] + 8 * v21);
  }
  unint64_t v28 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v24, (void *)v35[4]);
  if ((uint64_t *)(v24 + 8) != v28) {
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v24, v28);
  }
  if (!*(void *)(v24 + 24))
  {
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::DestroyTree(v18[5], (void **)v24);
    uint64_t v26 = 0;
    *(void *)(v18[4] + ((8 * v21) | 8)) = 0;
    v21 &= ~1uLL;
LABEL_37:
    *(void *)(v18[4] + 8 * v21) = v26;
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v18, v22);
  --*v18;
  if (v21 == v18[3])
  {
    unint64_t v30 = v18[1];
    if (v21 < v30)
    {
      uint64_t v31 = v18[4];
      do
      {
        if (*(void *)(v31 + 8 * v21)) {
          break;
        }
        void v18[3] = ++v21;
      }
      while (v30 != v21);
    }
  }
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = a3[2];
  return result;
}

void sub_1C60D6F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::revalidate_if_necessary(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned __int8 **)a1;
  if (!*(void *)a1 || (uint64_t v5 = *(void *)(a1 + 8)) == 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 481);
    uint64_t v6 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: node_ != NULL && m_ != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    uint64_t v4 = *(unsigned __int8 **)a1;
    uint64_t v5 = *(void *)(a1 + 8);
  }
  uint64_t v7 = *(void *)(a1 + 16) & (*(void *)(v5 + 8) - 1);
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v7;
  uint64_t v8 = *(void *)(v5 + 32);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if ((unsigned __int8 *)v9 == v4) {
    return 1;
  }
  if (v9 && v9 != *(void *)(v8 + 8 * (v7 ^ 1)))
  {
    while (1)
    {
      uint64_t v9 = *(void *)(v9 + 32);
      if (!v9) {
        break;
      }
      if ((unsigned __int8 *)v9 == v4) {
        return 1;
      }
    }
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v15, v5, v4, a2);
  std::string::size_type v10 = v15[0].__r_.__value_.__r.__words[2];
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *((void *)&v15[0].__r_.__value_.__l + 2);
  uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v12 = *(void *)(v11 + 8 * v10);
  return !v12 || v12 != *(void *)(v11 + 8 * (v10 ^ 1));
}

void sub_1C60D7044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(a2 + 32);
  if (v2 == a1) {
    return v3;
  }
  *(void *)(v2 + 32) = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList();
  return v2;
}

void google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(uint64_t a1, void **__p)
{
  if (*((char *)__p + 23) < 0) {
    operator delete(*__p);
  }
  if (!*(void *)(a1 + 40))
  {
    operator delete(__p);
  }
}

void std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)a2[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v5 = (uint64_t *)v6[2];
      BOOL v7 = *v5 == (void)v6;
      uint64_t v6 = v5;
    }
    while (!v7);
  }
  if (*(uint64_t **)a1 == a2) {
    *(void *)a1 = v5;
  }
  --*(void *)(a1 + 24);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), a2);
  if (!*(void *)(a1 + 16))
  {
    operator delete(a2);
  }
}

siri::dialogengine::PatternSchemaBinary::UsageMap *siri::dialogengine::PatternSchemaBinary::UsageMap::UsageMap(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1F2125520;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  google::protobuf::Map<std::string,std::string>::Init((uint64_t *)this + 3);
  *((_DWORD *)this + 8) = 0;
  if (atomic_load_explicit(scc_info_UsageMap_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_UsageMap_PatternSchemaBinary_2eproto);
  }
  return this;
}

void sub_1C60D7228(_Unwind_Exception *a1)
{
  google::protobuf::Map<std::string,std::string>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::UsageMap>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *google::protobuf::Map<std::string,std::string>::Init(uint64_t *a1)
{
  uint64_t v2 = (atomic_ullong *)*a1;
  if (!*a1) {
    operator new();
  }
  if (v2[14]) {
  AlignedAndAddCleanup = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v2, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::Map<std::string,std::string>::InnerMap>);
  }
  void *AlignedAndAddCleanup = 0;
  AlignedAndAddCleanup[2] = AlignedAndAddCleanup;
  AlignedAndAddCleanup[4] = 0;
  AlignedAndAddCleanup[5] = v2;
  __n128 result = google::protobuf::Map<std::string,std::string>::InnerMap::CreateEmptyTable((uint64_t)AlignedAndAddCleanup, 8uLL);
  AlignedAndAddCleanup[4] = result;
  AlignedAndAddCleanup[3] = 8;
  AlignedAndAddCleanup[1] = 8;
  a1[2] = (uint64_t)AlignedAndAddCleanup;
  return result;
}

void sub_1C60D7348(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

void *google::protobuf::Map<std::string,std::string>::~Map(void *a1)
{
  google::protobuf::Map<std::string,std::string>::clear(a1);
  if (!*a1)
  {
    uint64_t v2 = a1[2];
    if (v2)
    {
      uint64_t v3 = google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x1C8796D70](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

__n128 google::protobuf::Map<std::string,std::string>::clear(void *a1)
{
  v8.n128_u64[0] = a1[2];
  google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&v7, *(void *)(v8.n128_u64[0] + 24));
  uint64_t v2 = v7;
  result.n128_u64[0] = v8.n128_u64[0];
  for (__n128 i = v8; v7; __n128 i = v8)
  {
    uint64_t v5 = v2;
    __n128 v6 = i;
    google::protobuf::Map<std::string,std::string>::erase((uint64_t)&v7, a1, &v5);
    uint64_t v2 = v7;
    __n128 result = v8;
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    unint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      do
      {
        uint64_t v4 = *(void *)(a1 + 32);
        uint64_t v5 = *(void *)(v4 + 8 * v3);
        if (v5)
        {
          if (v5 == *(void *)(v4 + 8 * (v3 ^ 1)))
          {
            uint64_t v7 = v3 + 1;
            if ((v3 & 1) != 0 || v5 != *(void *)(v4 + 8 * v7))
            {
              google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 531);
              __n128 v8 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: table_[b] == table_[b + 1] && (b & 1) == 0: ");
              google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v8->__r_.__value_.__l.__data_);
              google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
              uint64_t v4 = *(void *)(a1 + 32);
            }
            *(void *)(v4 + 8 * v7) = 0;
            *(void *)(*(void *)(a1 + 32) + 8 * v3) = 0;
            uint64_t v9 = *(uint64_t **)v5;
            do
            {
              std::string::size_type v10 = (void **)v9[4];
              uint64_t v11 = (uint64_t *)v9[1];
              uint64_t v12 = v9;
              if (v11)
              {
                do
                {
                  uint64_t v13 = v11;
                  uint64_t v11 = (uint64_t *)*v11;
                }
                while (v11);
              }
              else
              {
                do
                {
                  uint64_t v13 = (uint64_t *)v12[2];
                  BOOL v14 = *v13 == (void)v12;
                  uint64_t v12 = v13;
                }
                while (!v14);
              }
              std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v5, v9);
              google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, v10);
              uint64_t v9 = v13;
            }
            while (v13 != (uint64_t *)(v5 + 8));
            google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::DestroyTree(*(void *)(a1 + 40), (void **)v5);
            goto LABEL_20;
          }
          *(void *)(v4 + 8 * v3) = 0;
          do
          {
            uint64_t v6 = *(void *)(v5 + 32);
            google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, (void **)v5);
            uint64_t v5 = v6;
          }
          while (v6);
        }
        uint64_t v7 = v3;
LABEL_20:
        uint64_t v3 = v7 + 1;
        unint64_t v2 = *(void *)(a1 + 8);
      }
      while (v7 + 1 < v2);
    }
    *(void *)a1 = 0;
    *(void *)(a1 + 24) = v2;
    if (!*(void *)(a1 + 40)) {
      operator delete(*(void **)(a1 + 32));
    }
  }
  return a1;
}

void sub_1C60D75E0(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

void InitDefaultsscc_info_UsageMap_ValueEntry_DoNotUse_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  qword_1EA3DB6A8 = 0;
  qword_1EA3DB698 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EA3DB6A0 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1EA3DB6B0 = 0;
  siri::dialogengine::PatternSchemaBinary::_UsageMap_ValueEntry_DoNotUse_default_instance_ = (uint64_t)&unk_1F2125480;
}

void InitDefaultsscc_info_UsageMap_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::UsageMap::UsageMap((siri::dialogengine::PatternSchemaBinary::UsageMap *)&siri::dialogengine::PatternSchemaBinary::_UsageMap_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_UsageMap_default_instance_, v4);
}

uint64_t siri::dialogengine::PatternSchemaBinary::UsageMap::GetCachedSize(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::PatternSchemaBinary::UsageMap::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  unint64_t v2 = (unsigned int *)*((void *)this + 5);
  uint64_t v3 = *v2;
  *((void *)&v17 + 1) = v2;
  google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&v17, *((void *)v2 + 3));
  long long v15 = v17;
  uint64_t v16 = v18;
  for (uint64_t i = v17; (void)v15; uint64_t i = v15)
  {
    uint64_t v5 = *(void *)(i + 24);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    if ((v6 & 0x80u) != 0) {
      int v6 = *(_DWORD *)(v5 + 8);
    }
    unsigned int v7 = 9 * (__clz(v6 | 1) ^ 0x1F) + 73;
    int v8 = *(unsigned __int8 *)(v5 + 47);
    int v9 = *(_DWORD *)(v5 + 32);
    if ((v8 & 0x80u) == 0) {
      int v9 = v8;
    }
    signed int v10 = v6 + v9 + (v7 >> 6) + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 2;
    v3 += ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + (uint64_t)v10;
    google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++((unsigned __int8 **)&v15);
  }
  uint64_t v11 = *((void *)this + 1);
  if (v11)
  {
    unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 23) < 0) {
      uint64_t v14 = *(void *)(v13 + 8);
    }
    else {
      uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
    }
    v3 += v14;
  }
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void siri::dialogengine::PatternSchemaBinary::UsageMap::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::UsageMap *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::UsageMap::MergeFrom(this, lpsrc);
}

void siri::dialogengine::PatternSchemaBinary::UsageMap::MergeFrom(siri::dialogengine::PatternSchemaBinary::UsageMap *this, const siri::dialogengine::PatternSchemaBinary::UsageMap *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 3681);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom((uint64_t *)this + 3, *((void *)a2 + 5));
}

void sub_1C60D7930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom(uint64_t *a1, uint64_t a2)
{
  *((void *)&v9 + 1) = a2;
  google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&v9, *(void *)(a2 + 24));
  long long v7 = v9;
  uint64_t v8 = v10;
  for (uint64_t i = v9; (void)v7; uint64_t i = v7)
  {
    uint64_t v4 = *(void *)(i + 24);
    uint64_t v5 = (const std::string *)(v4 + 24);
    char v6 = google::protobuf::Map<std::string,std::string>::operator[](a1, v4);
    std::string::operator=(v6, v5);
    google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++((unsigned __int8 **)&v7);
  }
}

uint64_t siri::dialogengine::PatternSchemaBinary::UsageMap::IsInitialized(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::UsageMap::Clear(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  google::protobuf::Map<std::string,std::string>::clear((void *)this + 3);
  char v3 = *((unsigned char *)this + 8);
  unint64_t v2 = (siri::dialogengine::PatternSchemaBinary::UsageMap *)((char *)this + 8);
  *((_DWORD *)v2 + 2) = 0;
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v2);
  }
}

siri::dialogengine::PatternSchemaBinary::UsageMap *siri::dialogengine::PatternSchemaBinary::UsageMap::New(siri::dialogengine::PatternSchemaBinary::UsageMap *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap>(a2);
}

siri::dialogengine::PatternSchemaBinary::UsageMap *siri::dialogengine::PatternSchemaBinary::UsageMap::New(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap>(0);
}

void *siri::dialogengine::PatternSchemaBinary::UsageMap::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.UsageMap");
}

void siri::dialogengine::PatternSchemaBinary::UsageMap::~UsageMap(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  *(void *)this = &unk_1F2125520;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::Map<std::string,std::string>::~Map((void *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F2125520;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::Map<std::string,std::string>::~Map((void *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F2125520;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::Map<std::string,std::string>::~Map((void *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

siri::dialogengine::PatternSchemaBinary::Usage *siri::dialogengine::PatternSchemaBinary::Usage::Usage(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  *(void *)this = &unk_1F21255B0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (atomic_load_explicit(scc_info_Usage_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Usage_PatternSchemaBinary_2eproto);
  }
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_1C60D7B74(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Usage>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Usage::GetCachedSize(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Usage::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  int v2 = *((_DWORD *)this + 8);
  if (v2 == 2)
  {
    uint64_t v5 = *((void *)this + 3);
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
    uint64_t v7 = *(void *)(v5 + 8);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = v6;
    }
    uint64_t v4 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
    goto LABEL_7;
  }
  if (v2 == 1)
  {
    uint64_t v3 = siri::dialogengine::PatternSchemaBinary::UsageMap::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::UsageMap **)this
                                                                         + 3));
    uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6);
LABEL_7:
    uint64_t result = v4 + 1;
    goto LABEL_9;
  }
  uint64_t result = 0;
LABEL_9:
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 23) < 0) {
      uint64_t v11 = *(void *)(v10 + 8);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
    }
    result += v11;
  }
  *((_DWORD *)this + 5) = result;
  return result;
}

void siri::dialogengine::PatternSchemaBinary::Usage::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::Usage *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::Usage::MergeFrom(this, lpsrc);
}

void siri::dialogengine::PatternSchemaBinary::Usage::MergeFrom(siri::dialogengine::PatternSchemaBinary::Usage *this, const siri::dialogengine::PatternSchemaBinary::Usage *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 3935);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v6 = *((_DWORD *)a2 + 8);
  if (v6 != 1)
  {
    if (v6 != 2) {
      return;
    }
    uint64_t v7 = (const std::string *)*((void *)a2 + 3);
    if (*((_DWORD *)this + 8) == 2)
    {
      uint64_t v8 = (std::string *)*((void *)this + 3);
      if (v8 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        std::string::operator=(v8, v7);
        return;
      }
    }
    else
    {
      siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
      *((_DWORD *)this + 8) = 2;
      *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, (uint64_t)v7);
  }
  if (*((_DWORD *)this + 8) == 1)
  {
    uint64_t v9 = (siri::dialogengine::PatternSchemaBinary::UsageMap *)*((void *)this + 3);
  }
  else
  {
    siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
    *((_DWORD *)this + 8) = 1;
    uint64_t v9 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap>(0);
    *((void *)this + 3) = v9;
    if (*((_DWORD *)a2 + 8) != 1)
    {
      unint64_t v10 = (const siri::dialogengine::PatternSchemaBinary::UsageMap *)&siri::dialogengine::PatternSchemaBinary::_UsageMap_default_instance_;
      goto LABEL_17;
    }
  }
  unint64_t v10 = (const siri::dialogengine::PatternSchemaBinary::UsageMap *)*((void *)a2 + 3);
LABEL_17:
  siri::dialogengine::PatternSchemaBinary::UsageMap::MergeFrom(v9, v10);
}

void sub_1C60D7E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Usage::IsInitialized(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::Usage::Clear(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
  char v3 = *((unsigned char *)this + 8);
  int v2 = (siri::dialogengine::PatternSchemaBinary::Usage *)((char *)this + 8);
  *((_DWORD *)v2 + 2) = 0;
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v2);
  }
}

siri::dialogengine::PatternSchemaBinary::Usage *siri::dialogengine::PatternSchemaBinary::Usage::New(siri::dialogengine::PatternSchemaBinary::Usage *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(a2);
}

siri::dialogengine::PatternSchemaBinary::Usage *siri::dialogengine::PatternSchemaBinary::Usage::New(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
}

void *siri::dialogengine::PatternSchemaBinary::Usage::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.Usage");
}

void siri::dialogengine::PatternSchemaBinary::Usage::~Usage(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  siri::dialogengine::PatternSchemaBinary::Usage::~Usage(this);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F21255B0;
  if (*((_DWORD *)this + 8)) {
    siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Override::GetCachedSize(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Override::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  int v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    uint64_t v4 = *((unsigned int *)this + 8);
  }
  else
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 8);
    do
    {
      uint64_t v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0) {
        uint64_t v6 = *(void *)(v5 + 8);
      }
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  if (*((unsigned char *)this + 16))
  {
    uint64_t v7 = siri::dialogengine::PatternSchemaBinary::Usage::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::Usage **)this
                                                                      + 6));
    v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  uint64_t v8 = *((void *)this + 1);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 23) < 0) {
      uint64_t v11 = *(void *)(v10 + 8);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
    }
    v4 += v11;
  }
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void siri::dialogengine::PatternSchemaBinary::Override::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::Override *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::Override::MergeFrom(this, lpsrc);
}

void siri::dialogengine::PatternSchemaBinary::Override::MergeFrom(siri::dialogengine::PatternSchemaBinary::Override *this, const siri::dialogengine::PatternSchemaBinary::Override *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 4433);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  if (*((_DWORD *)a2 + 4))
  {
    uint64_t v6 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)a2 + 6);
    if (!v6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 6121);
      uint64_t v7 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: !value || usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
      uint64_t v6 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)a2 + 6);
    }
    *((_DWORD *)this + 4) |= 1u;
    uint64_t v8 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 6);
    if (!v8)
    {
      uint64_t v8 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
      *((void *)this + 6) = v8;
      uint64_t v6 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)a2 + 6);
    }
    if (v6) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = (const siri::dialogengine::PatternSchemaBinary::Usage *)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
    }
    siri::dialogengine::PatternSchemaBinary::Usage::MergeFrom(v8, v9);
  }
}

void sub_1C60D824C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Override::IsInitialized(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::Override::Clear(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  if (*((unsigned char *)this + 16))
  {
    int v2 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 6);
    if (!v2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 4309);
      int v3 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v3->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
      int v2 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 6);
    }
    siri::dialogengine::PatternSchemaBinary::Usage::Clear(v2);
  }
  char v5 = *((unsigned char *)this + 8);
  uint64_t v4 = (siri::dialogengine::PatternSchemaBinary::Override *)((char *)this + 8);
  *((_DWORD *)v4 + 2) = 0;
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v4);
  }
}

void sub_1C60D830C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::Override *siri::dialogengine::PatternSchemaBinary::Override::New(siri::dialogengine::PatternSchemaBinary::Override *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Override>(a2);
}

siri::dialogengine::PatternSchemaBinary::Override *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Override>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::Override *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Override>);
  }
  siri::dialogengine::PatternSchemaBinary::Override::Override(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60D83BC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40D196C376);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Override>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

siri::dialogengine::PatternSchemaBinary::Override *siri::dialogengine::PatternSchemaBinary::Override::New(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Override>(0);
}

void *siri::dialogengine::PatternSchemaBinary::Override::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.Override");
}

void siri::dialogengine::PatternSchemaBinary::Override::~Override(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  siri::dialogengine::PatternSchemaBinary::Override::~Override(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F21256D0;
  if (this != (siri::dialogengine::PatternSchemaBinary::Override *)&siri::dialogengine::PatternSchemaBinary::_Override_default_instance_)
  {
    int v2 = *((void *)this + 6);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_ModeConfiguration_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ModeConfiguration((siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_, v4);
  qword_1EA3DB768 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
}

siri::dialogengine::PatternSchemaBinary::ModeConfiguration *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ModeConfiguration(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  *(void *)this = &unk_1F2125640;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (atomic_load_explicit(scc_info_ModeConfiguration_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ModeConfiguration_PatternSchemaBinary_2eproto);
  }
  *((void *)this + 9) = 0;
  return this;
}

void sub_1C60D85D4(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 48);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  if (*((unsigned char *)this + 16))
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    char v6 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 9);
    char *v4 = 10;
    unsigned int v7 = *((_DWORD *)v6 + 5);
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unsigned int v9 = v7 >> 7;
      if (v7 >> 14)
      {
        char v10 = v4 + 2;
        do
        {
          uint64_t v11 = v10;
          *v10++ = v9 | 0x80;
          unsigned int v12 = v9 >> 7;
          unsigned int v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
        uint64_t v8 = v11 + 2;
        *char v10 = v12;
      }
      else
      {
        v4[2] = v9;
        uint64_t v8 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v7;
      uint64_t v8 = v4 + 2;
    }
    uint64_t v4 = (char *)siri::dialogengine::PatternSchemaBinary::Usage::InternalSerializeWithCachedSizesToArray(v6, v8, a3);
  }
  int v14 = *((_DWORD *)this + 8);
  if (v14)
  {
    int v15 = 0;
    while ((unint64_t)v4 < *(void *)a3)
    {
      if (v15 < 0) {
        goto LABEL_16;
      }
LABEL_17:
      if (*((_DWORD *)this + 8) <= v15)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v38, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        long long v17 = google::protobuf::internal::LogMessage::operator<<(v38, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v37, (const char **)&v17->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v38[0].__r_.__value_.__l.__data_);
      }
      uint64_t v18 = *(siri::dialogengine::PatternSchemaBinary::Override **)(*((void *)this + 5) + 8 * v15 + 8);
      char *v4 = 18;
      unsigned int v19 = *((_DWORD *)v18 + 5);
      if (v19 > 0x7F)
      {
        v4[1] = v19 | 0x80;
        unsigned int v21 = v19 >> 7;
        if (v19 >> 14)
        {
          int v22 = v4 + 2;
          do
          {
            uint64_t v23 = v22;
            *v22++ = v21 | 0x80;
            unsigned int v24 = v21 >> 7;
            unsigned int v25 = v21 >> 14;
            v21 >>= 7;
          }
          while (v25);
          BOOL v20 = v23 + 2;
          *int v22 = v24;
        }
        else
        {
          v4[2] = v21;
          BOOL v20 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v19;
        BOOL v20 = v4 + 2;
      }
      uint64_t v4 = (char *)siri::dialogengine::PatternSchemaBinary::Override::InternalSerializeWithCachedSizesToArray(v18, v20, a3);
      if (++v15 == v14) {
        goto LABEL_30;
      }
    }
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_16:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v38, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    uint64_t v16 = google::protobuf::internal::LogMessage::operator<<(v38, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v37, (const char **)&v16->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v38[0].__r_.__value_.__l.__data_);
    goto LABEL_17;
  }
LABEL_30:
  int v26 = *((_DWORD *)this + 14);
  if (v26 >= 1)
  {
    for (int i = 0; v26 != i; ++i)
    {
      uint64_t v28 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, i);
      if (*(char *)(v28 + 23) < 0)
      {
        int64_t v29 = *(void *)(v28 + 8);
        if (v29 > 127) {
          goto LABEL_42;
        }
      }
      else
      {
        int64_t v29 = *(unsigned __int8 *)(v28 + 23);
      }
      if (*(void *)a3 - (void)v4 + 14 >= v29)
      {
        char *v4 = 26;
        v4[1] = v29;
        if (*(char *)(v28 + 23) >= 0) {
          unint64_t v30 = (const void *)v28;
        }
        else {
          unint64_t v30 = *(const void **)v28;
        }
        memcpy(v4 + 2, v30, v29);
        v4 += v29 + 2;
        continue;
      }
LABEL_42:
      uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 3, v28, v4);
    }
  }
  uint64_t v31 = *((void *)this + 1);
  if ((v31 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v33 = v31 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v33 + 23) < 0)
  {
    long long v35 = *(void **)v33;
    uint64_t v34 = *(void *)(v33 + 8);
  }
  else
  {
    LODWORD(v34) = *(unsigned __int8 *)(v33 + 23);
    long long v35 = (void *)v33;
  }
  if (*(void *)a3 - (void)v4 >= (int)v34)
  {
    uint64_t v36 = (int)v34;
    memcpy(v4, v35, (int)v34);
    v4 += v36;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v35, v34, (unsigned __int8 *)v4);
}

void sub_1C60D8970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::_InternalParse(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v43 = a2;
  char v5 = (unsigned int *)((char *)this + 48);
  char v6 = (unsigned int *)((char *)this + 24);
  unsigned int v7 = (unint64_t *)((char *)this + 8);
  do
  {
LABEL_2:
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v43, *((_DWORD *)a3 + 23))) {
      return v43;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v43 + 1);
    LODWORD(v9) = *(unsigned __int8 *)v43;
    if ((*(char *)v43 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v9 = (const char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v43 + 2);
LABEL_6:
      uint64_t v43 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v43, v9);
    uint64_t v43 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    unsigned int v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 != 26) {
        goto LABEL_13;
      }
      int v14 = (char *)TagFallback - 1;
      while (1)
      {
        int v15 = v14 + 1;
        uint64_t v43 = (google::protobuf::internal *)(v14 + 1);
        uint64_t v16 = (int *)*((void *)this + 8);
        if (!v16) {
          break;
        }
        uint64_t v17 = *((int *)this + 14);
        int v18 = *v16;
        if ((int)v17 >= *v16)
        {
          if (v18 == *((_DWORD *)this + 15))
          {
LABEL_25:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v18 + 1);
            uint64_t v16 = (int *)*((void *)this + 8);
            int v18 = *v16;
          }
          *uint64_t v16 = v18 + 1;
          BOOL v20 = *(atomic_ullong **)v5;
          if (!*(void *)v5) {
            operator new();
          }
          if (v20[14]) {
          AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v20, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
          }
          AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
          AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
          AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
          uint64_t v21 = *((void *)this + 8);
          uint64_t v22 = *((int *)this + 14);
          *((_DWORD *)this + 14) = v22 + 1;
          *(void *)(v21 + 8 * v22 + 8) = AlignedAndAddCleanup;
          int v15 = (std::string::value_type *)v43;
          goto LABEL_31;
        }
        *((_DWORD *)this + 14) = v17 + 1;
        AlignedAndAddCleanup = *(std::string **)&v16[2 * v17 + 2];
LABEL_31:
        int v14 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v15, (uint64_t)a3);
        uint64_t v43 = (google::protobuf::internal *)v14;
        if (!v14) {
          return 0;
        }
        if (*(void *)a3 <= (unint64_t)v14 || *v14 != 26) {
          goto LABEL_2;
        }
      }
      int v18 = *((_DWORD *)this + 15);
      goto LABEL_25;
    }
    if (v10 == 2)
    {
      if (v9 != 18) {
        goto LABEL_13;
      }
      uint64_t v23 = (google::protobuf::internal *)((char *)TagFallback - 1);
      while (1)
      {
        unsigned int v24 = (google::protobuf::internal *)((char *)v23 + 1);
        uint64_t v43 = v24;
        unsigned int v25 = (int *)*((void *)this + 5);
        if (!v25) {
          break;
        }
        uint64_t v26 = *((int *)this + 8);
        int v27 = *v25;
        if ((int)v26 < *v25)
        {
          *((_DWORD *)this + 8) = v26 + 1;
          uint64_t v28 = *(siri::dialogengine::PatternSchemaBinary::Override **)&v25[2 * v26 + 2];
          goto LABEL_44;
        }
        if (v27 == *((_DWORD *)this + 9)) {
          goto LABEL_42;
        }
LABEL_43:
        *unsigned int v25 = v27 + 1;
        uint64_t v28 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Override>(*((google::protobuf::internal::ArenaImpl **)this + 3));
        uint64_t v29 = *((void *)this + 5);
        uint64_t v30 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v30 + 1;
        *(void *)(v29 + 8 * v30 + 8) = v28;
        unsigned int v24 = v43;
LABEL_44:
        unsigned int v31 = *(unsigned __int8 *)v24;
        if (*(char *)v24 < 0)
        {
          SizeFallbacuint64_t k = google::protobuf::internal::ReadSizeFallback(v24, (const char *)*(unsigned __int8 *)v24);
          if (!SizeFallback) {
            return 0;
          }
          __n128 v32 = SizeFallback;
          unsigned int v31 = v34;
        }
        else
        {
          __n128 v32 = (char *)v24 + 1;
        }
        int v35 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v32, v31);
        int v36 = *((_DWORD *)a3 + 22);
        BOOL v37 = __OFSUB__(v36--, 1);
        *((_DWORD *)a3 + 22) = v36;
        if (v36 < 0 != v37) {
          return 0;
        }
        int v38 = v35;
        uint64_t v23 = siri::dialogengine::PatternSchemaBinary::Override::_InternalParse(v28, (google::protobuf::internal *)v32, a3);
        if (!v23) {
          return 0;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          return 0;
        }
        int v39 = *((_DWORD *)a3 + 7) + v38;
        *((_DWORD *)a3 + 7) = v39;
        unint64_t v40 = *((void *)a3 + 1) + (v39 & (v39 >> 31));
        *(void *)a3 = v40;
        uint64_t v43 = v23;
        if (v40 <= (unint64_t)v23 || *(unsigned char *)v23 != 18) {
          goto LABEL_2;
        }
      }
      int v27 = *((_DWORD *)this + 9);
LABEL_42:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v27 + 1);
      unsigned int v25 = (int *)*((void *)this + 5);
      int v27 = *v25;
      goto LABEL_43;
    }
    if (v10 == 1 && v9 == 10)
    {
      *((_DWORD *)this + 4) |= 1u;
      uint64_t v41 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 9);
      if (!v41)
      {
        uint64_t v41 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
        *((void *)this + 9) = v41;
        TagFallbacuint64_t k = v43;
      }
      unsigned int v13 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Usage>(a3, v41, TagFallback);
      goto LABEL_57;
    }
LABEL_13:
    if (v9) {
      BOOL v12 = (v9 & 7) == 4;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      *((_DWORD *)a3 + 20) = v9 - 1;
      return TagFallback;
    }
    unsigned int v13 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v7, TagFallback, a3);
LABEL_57:
    uint64_t v43 = v13;
  }
  while (v13);
  return 0;
}

uint64_t siri::dialogengine::PatternSchemaBinary::ModeConfiguration::GetCachedSize(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  uint64_t v2 = *((int *)this + 8);
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = (siri::dialogengine::PatternSchemaBinary::Override **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      char v6 = *v4++;
      uint64_t v7 = siri::dialogengine::PatternSchemaBinary::Override::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *((unsigned int *)this + 14);
  uint64_t v9 = v2 + v8;
  if ((int)v8 >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, v10);
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(v11 + 8);
      }
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while (v8 != v10);
  }
  if (*((unsigned char *)this + 16))
  {
    uint64_t v13 = siri::dialogengine::PatternSchemaBinary::Usage::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::Usage **)this
                                                                       + 9));
    v9 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  uint64_t v14 = *((void *)this + 1);
  if (v14)
  {
    unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 23) < 0) {
      uint64_t v17 = *(void *)(v16 + 8);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
    }
    v9 += v17;
  }
  *((_DWORD *)this + 5) = v9;
  return v9;
}

void siri::dialogengine::PatternSchemaBinary::ModeConfiguration::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration::MergeFrom(this, lpsrc);
}

void siri::dialogengine::PatternSchemaBinary::ModeConfiguration::MergeFrom(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 4202);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Override>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((signed int **)this + 6, (uint64_t)a2 + 48);
  if (*((_DWORD *)a2 + 4))
  {
    char v6 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)a2 + 9);
    if (!v6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 5944);
      uint64_t v7 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: !value || usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
      char v6 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)a2 + 9);
    }
    *((_DWORD *)this + 4) |= 1u;
    uint64_t v8 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 9);
    if (!v8)
    {
      uint64_t v8 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
      *((void *)this + 9) = v8;
      char v6 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)a2 + 9);
    }
    if (v6) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = (const siri::dialogengine::PatternSchemaBinary::Usage *)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
    }
    siri::dialogengine::PatternSchemaBinary::Usage::MergeFrom(v8, v9);
  }
}

void sub_1C60D906C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Override>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    uint64_t v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      uint64_t v13 = (siri::dialogengine::PatternSchemaBinary::Override **)(v6 + 8);
      uint64_t v14 = (siri::dialogengine::PatternSchemaBinary::Override **)v7;
      do
      {
        unint64_t v16 = *v13++;
        int v15 = v16;
        uint64_t v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Override>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      int v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      uint64_t v21 = (siri::dialogengine::PatternSchemaBinary::Override **)((char *)v8 + v20);
      uint64_t v22 = (siri::dialogengine::PatternSchemaBinary::Override **)(v20 + v6 + 8);
      do
      {
        uint64_t v23 = *v22++;
        unsigned int v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Override>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Override>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    uint64_t v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_1C60D91E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Override>::Merge(siri::dialogengine::PatternSchemaBinary::Override *a1, siri::dialogengine::PatternSchemaBinary::Override *this)
{
}

uint64_t siri::dialogengine::PatternSchemaBinary::ModeConfiguration::IsInitialized(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::ModeConfiguration::Clear(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  uint64_t v2 = *((unsigned int *)this + 8);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  else if (v2)
  {
    uint64_t v3 = (siri::dialogengine::PatternSchemaBinary::Override **)(*((void *)this + 5) + 8);
    do
    {
      uint64_t v4 = *v3++;
      siri::dialogengine::PatternSchemaBinary::Override::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 8) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48);
  if (*((unsigned char *)this + 16))
  {
    uint64_t v6 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 9);
    if (!v6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 4051);
      uint64_t v7 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
      uint64_t v6 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 9);
    }
    siri::dialogengine::PatternSchemaBinary::Usage::Clear(v6);
  }
  char v9 = *((unsigned char *)this + 8);
  uint64_t v8 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)((char *)this + 8);
  *((_DWORD *)v8 + 2) = 0;
  if (v9) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v8);
  }
}

void sub_1C60D931C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::ModeConfiguration *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::New(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(a2);
}

siri::dialogengine::PatternSchemaBinary::ModeConfiguration *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>);
  }
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ModeConfiguration(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60D93D4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4030D5F432);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

siri::dialogengine::PatternSchemaBinary::ModeConfiguration *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::New(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(0);
}

void *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.ModeConfiguration");
}

void siri::dialogengine::PatternSchemaBinary::ModeConfiguration::~ModeConfiguration(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration::~ModeConfiguration(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F2125640;
  if (this != (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_)
  {
    uint64_t v2 = *((void *)this + 9);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 48);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_PatternComponent_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::PatternComponent::PatternComponent((siri::dialogengine::PatternSchemaBinary::PatternComponent *)&siri::dialogengine::PatternSchemaBinary::_PatternComponent_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_PatternComponent_default_instance_, v4);
  qword_1EA3DB580 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
  unk_1EA3DB588 = &siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
  qword_1EA3DB590 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
}

siri::dialogengine::PatternSchemaBinary::PatternComponent *siri::dialogengine::PatternSchemaBinary::PatternComponent::PatternComponent(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F2125110;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  if (atomic_load_explicit(scc_info_PatternComponent_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_PatternComponent_PatternSchemaBinary_2eproto);
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = 0;
  return this;
}

void sub_1C60D9610(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::PatternComponent::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 6), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 7), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 8), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((const void ***)this + 9), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_32;
    }
    goto LABEL_22;
  }
LABEL_12:
  if ((unint64_t)v4 >= *(void *)a3) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v7 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((void *)this + 10);
  char *v4 = 42;
  unsigned int v8 = *((_DWORD *)v7 + 5);
  if (v8 > 0x7F)
  {
    v4[1] = v8 | 0x80;
    unsigned int v10 = v8 >> 7;
    if (v8 >> 14)
    {
      int v11 = v4 + 2;
      do
      {
        uint64_t v12 = v11;
        *v11++ = v10 | 0x80;
        unsigned int v13 = v10 >> 7;
        unsigned int v14 = v10 >> 14;
        v10 >>= 7;
      }
      while (v14);
      char v9 = v12 + 2;
      *int v11 = v13;
    }
    else
    {
      v4[2] = v10;
      char v9 = v4 + 3;
    }
  }
  else
  {
    v4[1] = v8;
    char v9 = v4 + 2;
  }
  uint64_t v4 = (char *)siri::dialogengine::PatternSchemaBinary::ModeConfiguration::InternalSerializeWithCachedSizesToArray(v7, v9, a3);
  if ((v6 & 0x20) != 0)
  {
LABEL_22:
    if ((unint64_t)v4 >= *(void *)a3) {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    }
    int v15 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((void *)this + 11);
    char *v4 = 50;
    unsigned int v16 = *((_DWORD *)v15 + 5);
    if (v16 > 0x7F)
    {
      v4[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        int v19 = v4 + 2;
        do
        {
          uint64_t v20 = v19;
          *v19++ = v18 | 0x80;
          unsigned int v21 = v18 >> 7;
          unsigned int v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        uint64_t v17 = v20 + 2;
        *int v19 = v21;
      }
      else
      {
        v4[2] = v18;
        uint64_t v17 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v16;
      uint64_t v17 = v4 + 2;
    }
    uint64_t v4 = (char *)siri::dialogengine::PatternSchemaBinary::ModeConfiguration::InternalSerializeWithCachedSizesToArray(v15, v17, a3);
  }
LABEL_32:
  int v23 = *((_DWORD *)this + 8);
  if (v23 >= 1)
  {
    for (int i = 0; v23 != i; ++i)
    {
      uint64_t v25 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v25 + 23) < 0)
      {
        int64_t v26 = *(void *)(v25 + 8);
        if (v26 > 127) {
          goto LABEL_44;
        }
      }
      else
      {
        int64_t v26 = *(unsigned __int8 *)(v25 + 23);
      }
      if (*(void *)a3 - (void)v4 + 14 >= v26)
      {
        char *v4 = 58;
        v4[1] = v26;
        if (*(char *)(v25 + 23) >= 0) {
          char v27 = (const void *)v25;
        }
        else {
          char v27 = *(const void **)v25;
        }
        memcpy(v4 + 2, v27, v26);
        v4 += v26 + 2;
        continue;
      }
LABEL_44:
      uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 7, v25, v4);
    }
  }
  if ((v6 & 0x40) != 0)
  {
    if ((unint64_t)v4 >= *(void *)a3) {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    }
    uint64_t v28 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 12);
    char *v4 = 66;
    unsigned int v29 = *((_DWORD *)v28 + 5);
    if (v29 > 0x7F)
    {
      v4[1] = v29 | 0x80;
      unsigned int v31 = v29 >> 7;
      if (v29 >> 14)
      {
        __n128 v32 = v4 + 2;
        do
        {
          unint64_t v33 = v32;
          *v32++ = v31 | 0x80;
          unsigned int v34 = v31 >> 7;
          unsigned int v35 = v31 >> 14;
          v31 >>= 7;
        }
        while (v35);
        uint64_t v30 = v33 + 2;
        unsigned char *v32 = v34;
      }
      else
      {
        v4[2] = v31;
        uint64_t v30 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v29;
      uint64_t v30 = v4 + 2;
    }
    uint64_t v4 = (char *)siri::dialogengine::PatternSchemaBinary::Usage::InternalSerializeWithCachedSizesToArray(v28, v30, a3);
  }
  uint64_t v36 = *((void *)this + 1);
  if ((v36 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v38 = v36 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v38 + 23) < 0)
  {
    unint64_t v40 = *(void **)v38;
    uint64_t v39 = *(void *)(v38 + 8);
  }
  else
  {
    LODWORD(v39) = *(unsigned __int8 *)(v38 + 23);
    unint64_t v40 = (void *)v38;
  }
  if (*(void *)a3 - (void)v4 >= (int)v39)
  {
    uint64_t v41 = (int)v39;
    memcpy(v4, v40, (int)v39);
    v4 += v41;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v40, v39, (unsigned __int8 *)v4);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::PatternComponent::_InternalParse(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v28 = a2;
  int v5 = (unsigned int *)((char *)this + 24);
  int v6 = (char *)this + 72;
  uint64_t v7 = (char *)this + 64;
  unsigned int v8 = (char *)this + 56;
  char v9 = (char *)this + 48;
  unsigned int v10 = (unint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v28, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v28 + 1);
      LODWORD(v12) = *(unsigned __int8 *)v28;
      if (*(char *)v28 < 0)
      {
        uint64_t v12 = (const char *)(v12 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v28, v12);
          uint64_t v28 = TagFallback;
          if (!TagFallback) {
            return TagFallback;
          }
LABEL_7:
          switch(v12 >> 3)
          {
            case 1u:
              if (v12 != 10) {
                goto LABEL_52;
              }
              *((_DWORD *)this + 4) |= 1u;
              unsigned int v13 = (std::string *)*((void *)this + 6);
              if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
              goto LABEL_22;
            case 2u:
              if (v12 != 18) {
                goto LABEL_52;
              }
              *((_DWORD *)this + 4) |= 2u;
              unsigned int v13 = (std::string *)*((void *)this + 7);
              if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
              goto LABEL_22;
            case 3u:
              if (v12 != 26) {
                goto LABEL_52;
              }
              *((_DWORD *)this + 4) |= 4u;
              unsigned int v13 = (std::string *)*((void *)this + 8);
              if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
              goto LABEL_22;
            case 4u:
              if (v12 != 34) {
                goto LABEL_52;
              }
              *((_DWORD *)this + 4) |= 8u;
              unsigned int v13 = (std::string *)*((void *)this + 9);
              if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
LABEL_22:
              unsigned int v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v13, (std::string::value_type *)TagFallback, (uint64_t)a3);
              goto LABEL_57;
            case 5u:
              if (v12 != 42) {
                goto LABEL_52;
              }
              *((_DWORD *)this + 4) |= 0x10u;
              int v15 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((void *)this + 10);
              if (v15) {
                goto LABEL_30;
              }
              int v15 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(0);
              *((void *)this + 10) = v15;
              goto LABEL_29;
            case 6u:
              if (v12 != 50) {
                goto LABEL_52;
              }
              *((_DWORD *)this + 4) |= 0x20u;
              int v15 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((void *)this + 11);
              if (v15) {
                goto LABEL_30;
              }
              int v15 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(0);
              *((void *)this + 11) = v15;
LABEL_29:
              TagFallbacuint64_t k = v28;
LABEL_30:
              unsigned int v14 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(a3, v15, TagFallback);
              goto LABEL_57;
            case 7u:
              if (v12 != 58) {
                goto LABEL_52;
              }
              unsigned int v16 = (char *)TagFallback - 1;
              break;
            case 8u:
              if (v12 != 66) {
                goto LABEL_52;
              }
              *((_DWORD *)this + 4) |= 0x40u;
              uint64_t v25 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 12);
              if (!v25)
              {
                uint64_t v25 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
                *((void *)this + 12) = v25;
                TagFallbacuint64_t k = v28;
              }
              unsigned int v14 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Usage>(a3, v25, TagFallback);
              goto LABEL_57;
            default:
LABEL_52:
              if (v12) {
                BOOL v26 = (v12 & 7) == 4;
              }
              else {
                BOOL v26 = 1;
              }
              if (v26)
              {
                *((_DWORD *)a3 + 20) = v12 - 1;
                return TagFallback;
              }
              unsigned int v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v12, v10, TagFallback, a3);
LABEL_57:
              uint64_t v28 = v14;
              if (v14) {
                continue;
              }
              return 0;
          }
          while (1)
          {
            uint64_t v17 = v16 + 1;
            uint64_t v28 = (google::protobuf::internal *)(v16 + 1);
            unsigned int v18 = (int *)*((void *)this + 5);
            if (!v18) {
              break;
            }
            uint64_t v19 = *((int *)this + 8);
            int v20 = *v18;
            if ((int)v19 >= *v18)
            {
              if (v20 == *((_DWORD *)this + 9))
              {
LABEL_38:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v20 + 1);
                unsigned int v18 = (int *)*((void *)this + 5);
                int v20 = *v18;
              }
              int *v18 = v20 + 1;
              unsigned int v22 = *(atomic_ullong **)v5;
              if (!*(void *)v5) {
                operator new();
              }
              if (v22[14]) {
              AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v22, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
              }
              AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
              AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
              AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
              uint64_t v23 = *((void *)this + 5);
              uint64_t v24 = *((int *)this + 8);
              *((_DWORD *)this + 8) = v24 + 1;
              *(void *)(v23 + 8 * v24 + 8) = AlignedAndAddCleanup;
              uint64_t v17 = (std::string::value_type *)v28;
              goto LABEL_44;
            }
            *((_DWORD *)this + 8) = v19 + 1;
            AlignedAndAddCleanup = *(std::string **)&v18[2 * v19 + 2];
LABEL_44:
            unsigned int v16 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v17, (uint64_t)a3);
            uint64_t v28 = (google::protobuf::internal *)v16;
            if (!v16) {
              return 0;
            }
            if (*(void *)a3 <= (unint64_t)v16 || *v16 != 58) {
              goto LABEL_2;
            }
          }
          int v20 = *((_DWORD *)this + 9);
          goto LABEL_38;
        }
        TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v28 + 2);
      }
      uint64_t v28 = TagFallback;
      goto LABEL_7;
    }
    return v28;
  }
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::PatternSchemaBinary::ModeConfiguration *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  uint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    uint64_t result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (char *)siri::dialogengine::PatternSchemaBinary::ModeConfiguration::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternComponent::GetCachedSize(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternComponent::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  int v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    uint64_t v4 = *((unsigned int *)this + 8);
  }
  else
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 8);
    do
    {
      uint64_t v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0) {
        uint64_t v6 = *(void *)(v5 + 8);
      }
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  int v7 = *((_DWORD *)this + 4);
  if ((v7 & 0x7F) == 0) {
    goto LABEL_17;
  }
  if (v7)
  {
    uint64_t v11 = *((void *)this + 6);
    uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
    uint64_t v13 = *(void *)(v11 + 8);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = v12;
    }
    v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v7 & 2) == 0)
    {
LABEL_11:
      if ((v7 & 4) == 0) {
        goto LABEL_12;
      }
      goto LABEL_25;
    }
  }
  else if ((v7 & 2) == 0)
  {
    goto LABEL_11;
  }
  uint64_t v14 = *((void *)this + 7);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  uint64_t v16 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v15;
  }
  v4 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 4) == 0)
  {
LABEL_12:
    if ((v7 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_25:
  uint64_t v17 = *((void *)this + 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
  uint64_t v19 = *(void *)(v17 + 8);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = v18;
  }
  v4 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 8) == 0)
  {
LABEL_13:
    if ((v7 & 0x10) == 0) {
      goto LABEL_14;
    }
LABEL_31:
    uint64_t v23 = siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::ModeConfiguration **)this
                                                                                   + 10));
    v4 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v7 & 0x20) == 0)
    {
LABEL_15:
      if ((v7 & 0x40) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_28:
  uint64_t v20 = *((void *)this + 9);
  uint64_t v21 = *(unsigned __int8 *)(v20 + 23);
  uint64_t v22 = *(void *)(v20 + 8);
  if ((v21 & 0x80u) == 0) {
    uint64_t v22 = v21;
  }
  v4 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 0x10) != 0) {
    goto LABEL_31;
  }
LABEL_14:
  if ((v7 & 0x20) == 0) {
    goto LABEL_15;
  }
LABEL_32:
  uint64_t v24 = siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::ModeConfiguration **)this
                                                                                 + 11));
  v4 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 0x40) != 0)
  {
LABEL_16:
    uint64_t v8 = siri::dialogengine::PatternSchemaBinary::Usage::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::Usage **)this
                                                                      + 12));
    v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_17:
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    unint64_t v25 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v25 + 23) < 0) {
      uint64_t v26 = *(void *)(v25 + 8);
    }
    else {
      uint64_t v26 = *(unsigned __int8 *)(v25 + 23);
    }
    v4 += v26;
  }
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void siri::dialogengine::PatternSchemaBinary::PatternComponent::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::PatternComponent::MergeFrom(this, lpsrc);
}

void siri::dialogengine::PatternSchemaBinary::PatternComponent::MergeFrom(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, const siri::dialogengine::PatternSchemaBinary::PatternComponent *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 2494);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  int v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x7F) != 0)
  {
    if (v6)
    {
      int v7 = (std::string *)*((void *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      uint64_t v8 = (const std::string *)*((void *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, (uint64_t)v8);
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
    {
      uint64_t v9 = (std::string *)*((void *)this + 7);
      *((_DWORD *)this + 4) |= 2u;
      int v10 = (const std::string *)*((void *)a2 + 7);
      if (v9 != v10)
      {
        if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 56, (uint64_t)v10);
        }
        std::string::operator=(v9, v10);
      }
    }
    if ((v6 & 4) != 0)
    {
      uint64_t v11 = (std::string *)*((void *)this + 8);
      *((_DWORD *)this + 4) |= 4u;
      uint64_t v12 = (const std::string *)*((void *)a2 + 8);
      if (v11 != v12)
      {
        if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 64, (uint64_t)v12);
        }
        std::string::operator=(v11, v12);
      }
    }
    if ((v6 & 8) != 0)
    {
      uint64_t v13 = (std::string *)*((void *)this + 9);
      *((_DWORD *)this + 4) |= 8u;
      uint64_t v14 = (const std::string *)*((void *)a2 + 9);
      if (v13 != v14)
      {
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 72, (uint64_t)v14);
        }
        std::string::operator=(v13, v14);
      }
    }
    if ((v6 & 0x10) != 0)
    {
      *((_DWORD *)this + 4) |= 0x10u;
      uint64_t v15 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((void *)this + 10);
      if (!v15)
      {
        uint64_t v15 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(0);
        *((void *)this + 10) = v15;
      }
      if (*((void *)a2 + 10)) {
        uint64_t v16 = (const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((void *)a2 + 10);
      }
      else {
        uint64_t v16 = (const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
      }
      siri::dialogengine::PatternSchemaBinary::ModeConfiguration::MergeFrom(v15, v16);
      if ((v6 & 0x20) == 0)
      {
LABEL_28:
        if ((v6 & 0x40) == 0) {
          return;
        }
        goto LABEL_42;
      }
    }
    else if ((v6 & 0x20) == 0)
    {
      goto LABEL_28;
    }
    *((_DWORD *)this + 4) |= 0x20u;
    uint64_t v17 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((void *)this + 11);
    if (!v17)
    {
      uint64_t v17 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(0);
      *((void *)this + 11) = v17;
    }
    if (*((void *)a2 + 11)) {
      uint64_t v18 = (const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((void *)a2 + 11);
    }
    else {
      uint64_t v18 = (const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
    }
    siri::dialogengine::PatternSchemaBinary::ModeConfiguration::MergeFrom(v17, v18);
    if ((v6 & 0x40) != 0)
    {
LABEL_42:
      *((_DWORD *)this + 4) |= 0x40u;
      uint64_t v19 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 12);
      if (!v19)
      {
        uint64_t v19 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
        *((void *)this + 12) = v19;
      }
      if (*((void *)a2 + 12)) {
        uint64_t v20 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)a2 + 12);
      }
      else {
        uint64_t v20 = (const siri::dialogengine::PatternSchemaBinary::Usage *)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
      }
      siri::dialogengine::PatternSchemaBinary::Usage::MergeFrom(v19, v20);
    }
  }
}

void sub_1C60DA48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternComponent::IsInitialized(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::PatternComponent::Clear(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  int v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x7F) == 0) {
    goto LABEL_35;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_14:
    uint64_t v4 = *((void *)this + 7);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v2 & 4) != 0) {
        goto LABEL_18;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v2 & 4) != 0) {
        goto LABEL_18;
      }
    }
LABEL_5:
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
LABEL_22:
    uint64_t v6 = *((void *)this + 9);
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      if ((v2 & 0x10) != 0) {
        goto LABEL_26;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
      if ((v2 & 0x10) != 0) {
        goto LABEL_26;
      }
    }
LABEL_7:
    if ((v2 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
  uint64_t v3 = *((void *)this + 6);
  if (*(char *)(v3 + 23) < 0)
  {
    **(unsigned char **)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_14;
    }
  }
  else
  {
    *(unsigned char *)uint64_t v3 = 0;
    *(unsigned char *)(v3 + 23) = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_14;
    }
  }
LABEL_4:
  if ((v2 & 4) == 0) {
    goto LABEL_5;
  }
LABEL_18:
  uint64_t v5 = *((void *)this + 8);
  if (*(char *)(v5 + 23) < 0)
  {
    **(unsigned char **)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if ((v2 & 8) != 0) {
      goto LABEL_22;
    }
  }
  else
  {
    *(unsigned char *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    if ((v2 & 8) != 0) {
      goto LABEL_22;
    }
  }
LABEL_6:
  if ((v2 & 0x10) == 0) {
    goto LABEL_7;
  }
LABEL_26:
  int v7 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((void *)this + 10);
  if (!v7)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 2235);
    uint64_t v8 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: full_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    int v7 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((void *)this + 10);
  }
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration::Clear(v7);
  if ((v2 & 0x20) == 0)
  {
LABEL_8:
    if ((v2 & 0x40) == 0) {
      goto LABEL_35;
    }
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v9 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((void *)this + 11);
  if (!v9)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 2239);
    int v10 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: supporting_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    uint64_t v9 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((void *)this + 11);
  }
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration::Clear(v9);
  if ((v2 & 0x40) != 0)
  {
LABEL_32:
    uint64_t v11 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 12);
    if (!v11)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 2243);
      uint64_t v12 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
      uint64_t v11 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 12);
    }
    siri::dialogengine::PatternSchemaBinary::Usage::Clear(v11);
  }
LABEL_35:
  char v14 = *((unsigned char *)this + 8);
  uint64_t v13 = (siri::dialogengine::PatternSchemaBinary::PatternComponent *)((char *)this + 8);
  *((_DWORD *)v13 + 2) = 0;
  if (v14) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v13);
  }
}

void sub_1C60DA6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::PatternComponent *siri::dialogengine::PatternSchemaBinary::PatternComponent::New(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(a2);
}

siri::dialogengine::PatternSchemaBinary::PatternComponent *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::PatternComponent *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x68uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::PatternComponent>);
  }
  siri::dialogengine::PatternSchemaBinary::PatternComponent::PatternComponent(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60DA778(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C403CCC3067);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::PatternComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

siri::dialogengine::PatternSchemaBinary::PatternComponent *siri::dialogengine::PatternSchemaBinary::PatternComponent::New(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(0);
}

void *siri::dialogengine::PatternSchemaBinary::PatternComponent::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.PatternComponent");
}

void siri::dialogengine::PatternSchemaBinary::PatternComponent::~PatternComponent(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  siri::dialogengine::PatternSchemaBinary::PatternComponent::~PatternComponent(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(void *)this = &unk_1F2125110;
  int v2 = *((void *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  uint64_t v6 = *((void *)this + 8);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    MEMORY[0x1C8796D70](v6, 0x1012C40EC159624);
  }
  uint64_t v8 = *((void *)this + 9);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    MEMORY[0x1C8796D70](v8, 0x1012C40EC159624);
  }
  if (this != (siri::dialogengine::PatternSchemaBinary::PatternComponent *)&siri::dialogengine::PatternSchemaBinary::_PatternComponent_default_instance_)
  {
    int v10 = *((void *)this + 10);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = *((void *)this + 11);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v12 = *((void *)this + 12);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_ListValue_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  qword_1EA3DB5A0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EA3DB5A8 = 0;
  qword_1EA3DB5B0 = 0;
  dword_1EA3DB5B8 = 0;
  siri::dialogengine::PatternSchemaBinary::_MapValue_ValueEntry_DoNotUse_default_instance_ = (uint64_t)&unk_1F21251A0;
  siri::dialogengine::PatternSchemaBinary::MapValue::MapValue((siri::dialogengine::PatternSchemaBinary::MapValue *)&siri::dialogengine::PatternSchemaBinary::_MapValue_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_MapValue_default_instance_, v4);
  siri::dialogengine::PatternSchemaBinary::ListValue::ListValue((siri::dialogengine::PatternSchemaBinary::ListValue *)&siri::dialogengine::PatternSchemaBinary::_ListValue_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_ListValue_default_instance_, v5);
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::VisualComponentsCombinationList((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombinationList_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombinationList_default_instance_, v6);
  qword_1EA3DB5A8 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombinationList_default_instance_;
}

siri::dialogengine::PatternSchemaBinary::MapValue *siri::dialogengine::PatternSchemaBinary::MapValue::MapValue(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1F2125240;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::Init((uint64_t *)this + 3);
  *((_DWORD *)this + 8) = 0;
  if (atomic_load_explicit(scc_info_ListValue_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ListValue_PatternSchemaBinary_2eproto);
  }
  return this;
}

void sub_1C60DAB54(_Unwind_Exception *a1)
{
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::ListValue *siri::dialogengine::PatternSchemaBinary::ListValue::ListValue(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  *(void *)this = &unk_1F21252D0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (atomic_load_explicit(scc_info_ListValue_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ListValue_PatternSchemaBinary_2eproto);
  }
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_1C60DABE8(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::VisualComponentsCombinationList(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F2125360;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  if (atomic_load_explicit(scc_info_ListValue_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ListValue_PatternSchemaBinary_2eproto);
  }
  return this;
}

void sub_1C60DAC78(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6 = *((_DWORD *)this + 8);
  if (v6)
  {
    int v7 = 0;
    while ((unint64_t)a2 < *(void *)a3)
    {
      if (v7 < 0) {
        goto LABEL_5;
      }
LABEL_6:
      if (*((_DWORD *)this + 8) <= v7)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v25, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        uint64_t v9 = google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v24, (const char **)&v9->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v25[0].__r_.__value_.__l.__data_);
      }
      int v10 = *(siri::dialogengine::PatternSchemaBinary::ListValue **)(*((void *)this + 5) + 8 * v7 + 8);
      *a2 = 10;
      unsigned int v11 = *((_DWORD *)v10 + 5);
      if (v11 > 0x7F)
      {
        a2[1] = v11 | 0x80;
        unsigned int v13 = v11 >> 7;
        if (v11 >> 14)
        {
          char v14 = (unsigned __int8 *)(a2 + 2);
          do
          {
            char v15 = v14;
            *v14++ = v13 | 0x80;
            unsigned int v16 = v13 >> 7;
            unsigned int v17 = v13 >> 14;
            v13 >>= 7;
          }
          while (v17);
          uint64_t v12 = v15 + 2;
          *char v14 = v16;
        }
        else
        {
          a2[2] = v13;
          uint64_t v12 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v11;
        uint64_t v12 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)siri::dialogengine::PatternSchemaBinary::ListValue::InternalSerializeWithCachedSizesToArray(v10, (char *)v12, a3);
      if (++v7 == v6) {
        goto LABEL_19;
      }
    }
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v25, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    uint64_t v8 = google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v24, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v25[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  uint64_t v18 = *((void *)this + 1);
  if ((v18 & 1) == 0) {
    return (unsigned __int8 *)a2;
  }
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 23) < 0)
  {
    uint64_t v22 = *(void **)v20;
    uint64_t v21 = *(void *)(v20 + 8);
  }
  else
  {
    LODWORD(v21) = *(unsigned __int8 *)(v20 + 23);
    uint64_t v22 = (void *)v20;
  }
  if (*(void *)a3 - (void)a2 >= (int)v21)
  {
    uint64_t v23 = (int)v21;
    memcpy(a2, v22, (int)v21);
    a2 += v23;
    return (unsigned __int8 *)a2;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v22, v21, (unsigned __int8 *)a2);
}

void sub_1C60DAEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::ListValue::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::ListValue *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 8);
  if (v6 == 2)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    uint64_t v8 = (siri::dialogengine::PatternSchemaBinary::MapValue *)*((void *)this + 3);
    char *v4 = 18;
    unsigned int v9 = *((_DWORD *)v8 + 5);
    if (v9 > 0x7F)
    {
      v4[1] = v9 | 0x80;
      unsigned int v11 = v9 >> 7;
      if (v9 >> 14)
      {
        uint64_t v12 = v4 + 2;
        do
        {
          unsigned int v13 = v12;
          *v12++ = v11 | 0x80;
          unsigned int v14 = v11 >> 7;
          unsigned int v15 = v11 >> 14;
          v11 >>= 7;
        }
        while (v15);
        int v10 = v13 + 2;
        *uint64_t v12 = v14;
      }
      else
      {
        v4[2] = v11;
        int v10 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v9;
      int v10 = v4 + 2;
    }
    int v7 = siri::dialogengine::PatternSchemaBinary::MapValue::InternalSerializeWithCachedSizesToArray(v8, v10, a3);
  }
  else
  {
    if (v6 != 1) {
      goto LABEL_15;
    }
    int v7 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 3), a2);
  }
  uint64_t v4 = (char *)v7;
LABEL_15:
  uint64_t v16 = *((void *)this + 1);
  if ((v16 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 23) < 0)
  {
    unint64_t v20 = *(void **)v18;
    uint64_t v19 = *(void *)(v18 + 8);
  }
  else
  {
    LODWORD(v19) = *(unsigned __int8 *)(v18 + 23);
    unint64_t v20 = (void *)v18;
  }
  if (*(void *)a3 - (void)v4 >= (int)v19)
  {
    uint64_t v21 = (int)v19;
    memcpy(v4, v20, (int)v19);
    v4 += v21;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v20, v19, (unsigned __int8 *)v4);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::MapValue::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::MapValue *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6 = (void *)*((void *)this + 5);
  if (*v6)
  {
    if (*v6 != 1 && *((unsigned char *)a3 + 58) != 0) {
      operator new[]();
    }
    *((void *)&v17 + 1) = *((void *)this + 5);
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(&v17, v6[3]);
    long long v15 = v17;
    uint64_t v16 = v18;
    for (uint64_t i = v17; (void)v15; uint64_t i = v15)
    {
      a2 = (char *)google::protobuf::internal::MapEntryFuncs<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11>::InternalSerialize(*(void *)(i + 24), (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(*(void *)(i + 24)+ 24), a2, a3);
      google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair const>::operator++((unsigned __int8 **)&v15);
    }
  }
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 23) < 0)
    {
      unsigned int v13 = *(char **)v11;
      uint64_t v12 = *(void *)(v11 + 8);
    }
    else
    {
      LODWORD(v12) = *(unsigned __int8 *)(v11 + 23);
      unsigned int v13 = (char *)v11;
    }
    if (*(void *)a3 - (void)a2 < (int)v12)
    {
      return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, v13, v12, (unsigned __int8 *)a2);
    }
    else
    {
      uint64_t v14 = (int)v12;
      memcpy(a2, v13, (int)v12);
      a2 += v14;
    }
  }
  return (unsigned __int8 *)a2;
}

void sub_1C60DB238(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D50](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const*> &,google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (char *)result;
  while (2)
  {
    uint64_t v95 = a2 - 8;
    uint64_t v91 = a2 - 24;
    long long v92 = a2 - 16;
    uint64_t v9 = v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v10 = (unint64_t)v9;
          uint64_t v11 = a2 - v9;
          uint64_t v12 = (a2 - v9) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v41 = *(void **)v95;
                char v42 = *(void **)v9;
                uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(void **)v95, *(void **)v9);
                if (result)
                {
                  *(void *)uint64_t v9 = v41;
                  *(void *)uint64_t v95 = v42;
                }
                break;
              case 3:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v95);
                break;
              case 4:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v9 + 2, (void **)v95);
                break;
              case 5:
                uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v9 + 2, (void **)v9 + 3, (void **)v95);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v43 = v9 + 8;
            BOOL v45 = v9 == a2 || v43 == a2;
            if (a4)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                unint64_t v47 = v9;
                do
                {
                  std::string v49 = *(void **)v47;
                  unint64_t v48 = (void *)*((void *)v47 + 1);
                  unint64_t v47 = v43;
                  uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v48, v49);
                  if (result)
                  {
                    uint64_t v50 = v46;
                    while (1)
                    {
                      *(void *)&v9[v50 + 8] = v49;
                      if (!v50) {
                        break;
                      }
                      std::string v49 = *(void **)&v9[v50 - 8];
                      uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v48, v49);
                      v50 -= 8;
                      if ((result & 1) == 0)
                      {
                        uint64_t v51 = &v9[v50 + 8];
                        goto LABEL_80;
                      }
                    }
                    uint64_t v51 = v9;
LABEL_80:
                    *(void *)uint64_t v51 = v48;
                  }
                  uint64_t v43 = v47 + 8;
                  v46 += 8;
                }
                while (v47 + 8 != a2);
              }
            }
            else if (!v45)
            {
              do
              {
                unint64_t v87 = *(void **)v10;
                uint64_t v86 = *(void **)(v10 + 8);
                unint64_t v10 = (unint64_t)v43;
                uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v86, v87);
                if (result)
                {
                  std::string v88 = (void *)v10;
                  do
                  {
                    *std::string v88 = v87;
                    unint64_t v87 = (void *)*(v88 - 2);
                    uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v86, v87);
                    --v88;
                  }
                  while ((result & 1) != 0);
                  *std::string v88 = v86;
                }
                uint64_t v43 = (char *)(v10 + 8);
              }
              while ((char *)(v10 + 8) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v9 != a2)
            {
              char v98 = v9;
              int64_t v52 = (unint64_t)(v12 - 2) >> 1;
              int64_t v53 = v52;
              uint64_t v89 = a2;
              uint64_t v90 = a2 - v9;
              do
              {
                int64_t v54 = v53;
                if (v11 >= 16 && v52 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  std::string::size_type v56 = &v98[8 * v55];
                  uint64_t v57 = 2 * v53 + 2;
                  int64_t v96 = v53;
                  if (v57 < v12)
                  {
                    unint64_t v58 = *(void **)v56;
                    uint64_t v60 = (void *)*((void *)v56 + 1);
                    BOOL v59 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(void **)v56, v60);
                    if (v59) {
                      v56 += 8;
                    }
                    else {
                      uint64_t v60 = v58;
                    }
                    if (v59) {
                      uint64_t v55 = v57;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void **)v56;
                  }
                  unint64_t v61 = &v98[8 * v54];
                  unint64_t v62 = *(void **)v61;
                  uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v60, *(void **)v61);
                  uint64_t v11 = v90;
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      unint64_t v63 = v56;
                      *(void *)unint64_t v61 = v60;
                      if (v52 < v55) {
                        break;
                      }
                      uint64_t v64 = (2 * v55) | 1;
                      std::string::size_type v56 = &v98[8 * v64];
                      uint64_t v65 = 2 * v55 + 2;
                      if (v65 < v12)
                      {
                        uint64_t v60 = *(void **)v56;
                        std::string::size_type v66 = (void *)*((void *)v56 + 1);
                        if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(void **)v56, v66))
                        {
                          uint64_t v60 = v66;
                          v56 += 8;
                          uint64_t v55 = v65;
                        }
                        else
                        {
                          uint64_t v55 = v64;
                        }
                      }
                      else
                      {
                        uint64_t v60 = *(void **)v56;
                        uint64_t v55 = (2 * v55) | 1;
                      }
                      uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v60, v62);
                      unint64_t v61 = v63;
                    }
                    while (!result);
                    *(void *)unint64_t v63 = v62;
                    a2 = v89;
                    uint64_t v11 = v90;
                    int64_t v54 = v96;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v67 = (unint64_t)v11 >> 3;
              uint64_t v68 = v98;
              do
              {
                long long v69 = a2;
                uint64_t v70 = 0;
                uint64_t v71 = v67 - 2;
                uint64_t v94 = *(void **)v68;
                if (v67 < 2) {
                  uint64_t v71 = v67 - 1;
                }
                uint64_t v72 = v71 >> 1;
                do
                {
                  long long v73 = &v68[8 * v70 + 8];
                  uint64_t v74 = (2 * v70) | 1;
                  uint64_t v75 = 2 * v70 + 2;
                  if (v75 >= v67)
                  {
                    unint64_t v78 = *(void **)v73;
                    uint64_t v70 = (2 * v70) | 1;
                  }
                  else
                  {
                    unint64_t v76 = *(void **)v73;
                    unint64_t v77 = *(void **)&v68[8 * v70 + 16];
                    uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(void **)v73, v77);
                    if (result) {
                      unint64_t v78 = v77;
                    }
                    else {
                      unint64_t v78 = v76;
                    }
                    if (result)
                    {
                      v73 += 8;
                      uint64_t v70 = v75;
                    }
                    else
                    {
                      uint64_t v70 = v74;
                    }
                  }
                  *(void *)uint64_t v68 = v78;
                  uint64_t v68 = v73;
                }
                while (v70 <= v72);
                a2 = v69 - 8;
                if (v73 == v69 - 8)
                {
                  *(void *)long long v73 = v94;
                }
                else
                {
                  *(void *)long long v73 = *(void *)a2;
                  *(void *)a2 = v94;
                  uint64_t v79 = v73 - v98 + 8;
                  if (v79 >= 9)
                  {
                    unint64_t v80 = (unint64_t)((v79 >> 3) - 2) >> 1;
                    uint64_t v81 = &v98[8 * v80];
                    uint64_t v82 = *(void **)v81;
                    long long v83 = *(void **)v73;
                    uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(void **)v81, *(void **)v73);
                    if (result)
                    {
                      do
                      {
                        long long v84 = v81;
                        *(void *)long long v73 = v82;
                        if (!v80) {
                          break;
                        }
                        unint64_t v80 = (v80 - 1) >> 1;
                        uint64_t v81 = &v98[8 * v80];
                        uint64_t v82 = *(void **)v81;
                        uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(void **)v81, v83);
                        long long v73 = v84;
                      }
                      while ((result & 1) != 0);
                      *(void *)long long v84 = v83;
                    }
                  }
                }
                BOOL v85 = v67-- <= 2;
                uint64_t v68 = v98;
              }
              while (!v85);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v9[8 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v14, (void **)v9, (void **)v95);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v14, (void **)v95);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9 + 1, (void **)v14 - 1, (void **)v92);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9 + 2, (void **)&v9[8 * v13 + 8], (void **)v91);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v14 - 1, (void **)v14, (void **)&v9[8 * v13 + 8]);
            long long v15 = *(void **)v9;
            *(void *)uint64_t v9 = *(void *)v14;
            *(void *)uint64_t v14 = v15;
          }
          --a3;
          uint64_t v16 = *(void **)v9;
          long long v17 = v9;
          if (a4) {
            break;
          }
          long long v17 = v9;
          if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*((void **)v9 - 1), *(void **)v9))
          {
            break;
          }
          uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v16, *(void **)v95);
          if (result)
          {
            do
            {
              unsigned int v31 = (void *)*((void *)v9 + 1);
              v9 += 8;
              uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v16, v31);
            }
            while ((result & 1) == 0);
          }
          else
          {
            __n128 v32 = v9 + 8;
            do
            {
              uint64_t v9 = v32;
              if (v32 >= a2) {
                break;
              }
              v32 += 8;
              uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v16, *(void **)v9);
            }
            while (!result);
          }
          unint64_t v33 = a2;
          if (v9 < a2)
          {
            unint64_t v33 = a2;
            do
            {
              unsigned int v34 = (void *)*((void *)v33 - 1);
              v33 -= 8;
              uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v16, v34);
            }
            while ((result & 1) != 0);
          }
          unsigned int v35 = a2;
          if (v9 < v33)
          {
            uint64_t v36 = *(void **)v9;
            BOOL v37 = *(void **)v33;
            do
            {
              *(void *)uint64_t v9 = v37;
              *(void *)unint64_t v33 = v36;
              do
              {
                unint64_t v38 = (void *)*((void *)v9 + 1);
                v9 += 8;
                uint64_t v36 = v38;
              }
              while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v16, v38));
              do
              {
                uint64_t v39 = (void *)*((void *)v33 - 1);
                v33 -= 8;
                BOOL v37 = v39;
                uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v16, v39);
              }
              while ((result & 1) != 0);
            }
            while (v9 < v33);
          }
          unint64_t v40 = v9 - 8;
          BOOL v4 = (unint64_t)(v9 - 8) >= v10;
          BOOL v5 = v9 - 8 == (char *)v10;
          a2 = v35;
          if (v9 - 8 != (char *)v10) {
            *(void *)unint64_t v10 = *(void *)v40;
          }
          a4 = 0;
          *(void *)unint64_t v40 = v16;
        }
        do
        {
          uint64_t v18 = v17;
          unint64_t v20 = (void *)*((void *)v17 + 1);
          v17 += 8;
          uint64_t v19 = v20;
        }
        while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v20, v16));
        uint64_t v97 = a3;
        uint64_t v21 = a2;
        if (v18 == (char *)v10)
        {
          uint64_t v21 = a2;
          do
          {
            if (v17 >= v21) {
              break;
            }
            uint64_t v23 = (void *)*((void *)v21 - 1);
            v21 -= 8;
          }
          while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v23, v16));
        }
        else
        {
          do
          {
            uint64_t v22 = (void *)*((void *)v21 - 1);
            v21 -= 8;
          }
          while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v22, v16));
        }
        uint64_t v8 = (char *)v10;
        char v24 = a2;
        if (v17 < v21)
        {
          unint64_t v25 = *(void **)v21;
          uint64_t v26 = v17;
          char v27 = v21;
          do
          {
            *(void *)uint64_t v26 = v25;
            *(void *)char v27 = v19;
            do
            {
              uint64_t v18 = v26;
              uint64_t v28 = (void *)*((void *)v26 + 1);
              v26 += 8;
              uint64_t v19 = v28;
            }
            while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v28, v16));
            do
            {
              unsigned int v29 = (void *)*((void *)v27 - 1);
              v27 -= 8;
              unint64_t v25 = v29;
            }
            while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v29, v16));
          }
          while (v26 < v27);
        }
        if (v18 != v8) {
          *(void *)uint64_t v8 = *(void *)v18;
        }
        *(void *)uint64_t v18 = v16;
        BOOL v4 = v17 >= v21;
        a2 = v24;
        a3 = v97;
        if (v4) {
          break;
        }
LABEL_31:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const*> &,google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const**,false>(v8, v18, v97, a4 & 1);
        a4 = 0;
        uint64_t v9 = v18 + 8;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const*> &,google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const**>((void **)v8, (void **)v18);
      uint64_t v9 = v18 + 8;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const*> &,google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const**>((void **)v18 + 1, (void **)v24);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_31;
      }
    }
    a2 = v18;
    if (!v30) {
      continue;
    }
    return result;
  }
}

unsigned __int8 **google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair const>::operator++(unsigned __int8 **a1)
{
  int v2 = *a1;
  uint64_t v3 = (unsigned __int8 *)*((void *)*a1 + 4);
  if (v3) {
    goto LABEL_2;
  }
  uint64_t v18 = 0;
  uint64_t v4 = (uint64_t)a1[1];
  if (!v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 481);
    BOOL v5 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: node_ != NULL && m_ != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    int v2 = *a1;
    uint64_t v4 = (uint64_t)a1[1];
  }
  uint64_t v6 = (unint64_t)a1[2] & (*(void *)(v4 + 8) - 1);
  a1[2] = (unsigned __int8 *)v6;
  uint64_t v7 = *(void *)(v4 + 32);
  uint64_t v8 = *(void *)(v7 + 8 * v6);
  if ((unsigned __int8 *)v8 == v2) {
    goto LABEL_13;
  }
  if (v8 && v8 != *(void *)(v7 + 8 * (v6 ^ 1)))
  {
    while (1)
    {
      uint64_t v8 = *(void *)(v8 + 32);
      if (!v8) {
        break;
      }
      if ((unsigned __int8 *)v8 == v2) {
        goto LABEL_13;
      }
    }
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v20, v4, v2, (uint64_t *)&v18);
  uint64_t v6 = v20[0].__r_.__value_.__r.__words[2];
  a1[2] = (unsigned __int8 *)v20[0].__r_.__value_.__r.__words[2];
  uint64_t v9 = *((void *)a1[1] + 4);
  uint64_t v10 = *(void *)(v9 + 8 * v6);
  if (!v10 || v10 != *(void *)(v9 + 8 * (v6 ^ 1)))
  {
LABEL_13:
    unint64_t v11 = v6 + 1;
LABEL_14:
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair const>::SearchFrom(a1, v11);
    return a1;
  }
  if (v6)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 456);
    unint64_t v13 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (bucket_index_ & 1) == (0u): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v13->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    uint64_t v6 = (uint64_t)a1[2];
    uint64_t v10 = *(void *)(*((void *)a1[1] + 4) + 8 * v6);
  }
  uint64_t v14 = (uint64_t)v18;
  long long v15 = (void *)v18[1];
  if (v15)
  {
    do
    {
      uint64_t v16 = v15;
      long long v15 = (void *)*v15;
    }
    while (v15);
  }
  else
  {
    do
    {
      uint64_t v16 = *(void **)(v14 + 16);
      BOOL v17 = *v16 == v14;
      uint64_t v14 = (uint64_t)v16;
    }
    while (!v17);
  }
  uint64_t v18 = v16;
  if (v16 == (void *)(v10 + 8))
  {
    unint64_t v11 = v6 + 2;
    goto LABEL_14;
  }
  uint64_t v3 = (unsigned __int8 *)v16[4];
LABEL_2:
  *a1 = v3;
  return a1;
}

void sub_1C60DBBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryFuncs<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11>::InternalSerialize(uint64_t a1, siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a2, char *a3, google::protobuf::io::EpsCopyOutputStream *this)
{
  if (*(void *)this <= (unint64_t)a3) {
    a3 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a3);
  }
  *a3 = 10;
  int v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) != 0) {
    int v7 = *(_DWORD *)(a1 + 8);
  }
  unsigned int v8 = *((_DWORD *)a2 + 5)
     + v7
     + ((9 * (__clz(*((_DWORD *)a2 + 5) | 1) ^ 0x1F) + 73) >> 6)
     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)
     + 2;
  if (v8 > 0x7F)
  {
    a3[1] = v8 | 0x80;
    unsigned int v10 = v8 >> 7;
    if (v8 >> 14)
    {
      unint64_t v11 = (unsigned __int8 *)(a3 + 2);
      do
      {
        uint64_t v12 = v11;
        *v11++ = v10 | 0x80;
        unsigned int v13 = v10 >> 7;
        unsigned int v14 = v10 >> 14;
        v10 >>= 7;
      }
      while (v14);
      uint64_t v9 = (char *)(v12 + 2);
      *unint64_t v11 = v13;
    }
    else
    {
      a3[2] = v10;
      uint64_t v9 = a3 + 3;
    }
  }
  else
  {
    a3[1] = v8;
    uint64_t v9 = a3 + 2;
  }
  if (*(void *)this <= (unint64_t)v9) {
    uint64_t v9 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, v9);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int64_t v15 = *(void *)(a1 + 8);
    if (v15 > 127)
    {
LABEL_34:
      uint64_t v18 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(this, 1, a1, v9);
      goto LABEL_22;
    }
  }
  else
  {
    int64_t v15 = *(unsigned __int8 *)(a1 + 23);
  }
  if (*(void *)this - (void)v9 + 14 < v15) {
    goto LABEL_34;
  }
  char *v9 = 10;
  uint64_t v16 = v9 + 2;
  v9[1] = v15;
  if (*(char *)(a1 + 23) >= 0) {
    BOOL v17 = (const void *)a1;
  }
  else {
    BOOL v17 = *(const void **)a1;
  }
  memcpy(v9 + 2, v17, v15);
  uint64_t v18 = &v16[v15];
LABEL_22:
  if ((unint64_t)v18 >= *(void *)this) {
    uint64_t v18 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, v18);
  }
  char *v18 = 18;
  unsigned int v19 = *((_DWORD *)a2 + 5);
  if (v19 > 0x7F)
  {
    v18[1] = v19 | 0x80;
    unsigned int v21 = v19 >> 7;
    if (v19 >> 14)
    {
      uint64_t v22 = v18 + 2;
      do
      {
        uint64_t v23 = v22;
        *v22++ = v21 | 0x80;
        unsigned int v24 = v21 >> 7;
        unsigned int v25 = v21 >> 14;
        v21 >>= 7;
      }
      while (v25);
      unint64_t v20 = v23 + 2;
      *uint64_t v22 = v24;
    }
    else
    {
      _DWORD v18[2] = v21;
      unint64_t v20 = (unsigned __int8 *)(v18 + 3);
    }
  }
  else
  {
    v18[1] = v19;
    unint64_t v20 = (unsigned __int8 *)(v18 + 2);
  }
  return siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::InternalSerializeWithCachedSizesToArray(a2, v20, this);
}

void google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair const>::SearchFrom(void *a1, unint64_t a2)
{
  uint64_t v4 = (void *)a1[1];
  uint64_t v5 = v4[3];
  unint64_t v6 = v4[1];
  if (v5 != v6 && !*(void *)(v4[4] + 8 * v5))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 423);
    int v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: m_->index_of_first_non_null_ == m_->num_buckets_ || m_->table_[m_->index_of_first_non_null_] != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    uint64_t v4 = (void *)a1[1];
    unint64_t v6 = v4[1];
  }
  *a1 = 0;
  if (v6 <= a2)
  {
LABEL_9:
    a1[2] = a2;
  }
  else
  {
    uint64_t v8 = v4[4];
    while (1)
    {
      uint64_t v9 = *(void **)(v8 + 8 * a2);
      if (v9) {
        break;
      }
      if (v6 == ++a2)
      {
        a2 = v6;
        goto LABEL_9;
      }
    }
    unsigned int v10 = *(void **)(v8 + 8 * (a2 ^ 1));
    a1[2] = a2;
    if (v9 == v10)
    {
      if (!v9[3])
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 432);
        unint64_t v11 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !tree->empty(): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      }
      *a1 = *(void *)(*v9 + 32);
    }
    else
    {
      *a1 = v9;
    }
  }
}

void sub_1C60DBF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const*> &,google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const**>(void **a1, void **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      int v7 = *a1;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    char v12 = *v9;
    unsigned int v13 = *v8;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*v9, v13))
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(void **)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        unsigned int v13 = *(void **)((char *)a1 + v14 - 16);
        BOOL v16 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v12, v13);
        uint64_t v14 = v15;
        if (!v16)
        {
          BOOL v17 = (void **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      BOOL v17 = a1;
LABEL_12:
      *BOOL v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::_InternalParse(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v29 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v6 = (unsigned int *)((char *)this + 24);
  do
  {
LABEL_2:
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v29, *((_DWORD *)a3 + 23))) {
      return v29;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v29 + 1);
    LODWORD(v8) = *(unsigned __int8 *)v29;
    if ((*(char *)v29 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v29 + 2);
LABEL_6:
      unsigned int v29 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v29, v8);
    unsigned int v29 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v8 == 10)
    {
      int v10 = (google::protobuf::internal *)((char *)TagFallback - 1);
      while (1)
      {
        uint64_t v11 = (google::protobuf::internal *)((char *)v10 + 1);
        unsigned int v29 = v11;
        char v12 = (int *)*((void *)this + 5);
        if (!v12) {
          break;
        }
        uint64_t v13 = *((int *)this + 8);
        int v14 = *v12;
        if ((int)v13 < *v12)
        {
          *((_DWORD *)this + 8) = v13 + 1;
          uint64_t v15 = *(siri::dialogengine::PatternSchemaBinary::ListValue **)&v12[2 * v13 + 2];
          goto LABEL_22;
        }
        if (v14 == *((_DWORD *)this + 9)) {
          goto LABEL_20;
        }
LABEL_21:
        *char v12 = v14 + 1;
        uint64_t v15 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ListValue>(*((google::protobuf::internal::ArenaImpl **)this + 3));
        uint64_t v16 = *((void *)this + 5);
        uint64_t v17 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v17 + 1;
        *(void *)(v16 + 8 * v17 + 8) = v15;
        uint64_t v11 = v29;
LABEL_22:
        unsigned int v18 = *(unsigned __int8 *)v11;
        if (*(char *)v11 < 0)
        {
          SizeFallbacuint64_t k = google::protobuf::internal::ReadSizeFallback(v11, (const char *)*(unsigned __int8 *)v11);
          if (!SizeFallback) {
            return 0;
          }
          unsigned int v19 = SizeFallback;
          unsigned int v18 = v21;
        }
        else
        {
          unsigned int v19 = (char *)v11 + 1;
        }
        int v22 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v19, v18);
        int v23 = *((_DWORD *)a3 + 22);
        BOOL v24 = __OFSUB__(v23--, 1);
        *((_DWORD *)a3 + 22) = v23;
        if (v23 < 0 != v24) {
          return 0;
        }
        int v25 = v22;
        int v10 = siri::dialogengine::PatternSchemaBinary::ListValue::_InternalParse(v15, (google::protobuf::internal *)v19, a3);
        if (!v10) {
          return 0;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          return 0;
        }
        int v26 = *((_DWORD *)a3 + 7) + v25;
        *((_DWORD *)a3 + 7) = v26;
        unint64_t v27 = *((void *)a3 + 1) + (v26 & (v26 >> 31));
        *(void *)a3 = v27;
        unsigned int v29 = v10;
        if (v27 <= (unint64_t)v10 || *(unsigned char *)v10 != 10) {
          goto LABEL_2;
        }
      }
      int v14 = *((_DWORD *)this + 9);
LABEL_20:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v14 + 1);
      char v12 = (int *)*((void *)this + 5);
      int v14 = *v12;
      goto LABEL_21;
    }
    if (v8) {
      BOOL v9 = (v8 & 7) == 4;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      *((_DWORD *)a3 + 20) = v8 - 1;
      return TagFallback;
    }
    unsigned int v29 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v5, TagFallback, a3);
  }
  while (v29);
  return 0;
}

siri::dialogengine::PatternSchemaBinary::ListValue *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ListValue>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::ListValue *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::ListValue>);
  }
  siri::dialogengine::PatternSchemaBinary::ListValue::ListValue(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60DC400(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40C05B56FCLL);
  _Unwind_Resume(a1);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::ListValue::_InternalParse(siri::dialogengine::PatternSchemaBinary::ListValue *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  BOOL v24 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  unint64_t v6 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v24, *((_DWORD *)a3 + 23))) {
        return v24;
      }
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v24 + 1);
      LODWORD(v8) = *(unsigned __int8 *)v24;
      if ((*(char *)v24 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      uint64_t v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v24 + 2);
LABEL_6:
        BOOL v24 = TagFallback;
        goto LABEL_7;
      }
      TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v24, v8);
      BOOL v24 = TagFallback;
      if (!TagFallback) {
        return TagFallback;
      }
LABEL_7:
      if (v8 >> 3 != 2) {
        break;
      }
      if (v8 != 18) {
        goto LABEL_12;
      }
      if (*((_DWORD *)this + 8) == 2)
      {
        char v12 = *v5;
      }
      else
      {
        siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
        *((_DWORD *)this + 8) = 2;
        char v12 = (std::string *)google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue>(0);
        *((void *)this + 3) = v12;
        TagFallbacuint64_t k = v24;
      }
      unsigned int v13 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallbacuint64_t k = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback) {
          return 0;
        }
        int v14 = SizeFallback;
        unsigned int v13 = v16;
      }
      else
      {
        int v14 = (char *)TagFallback + 1;
      }
      int v17 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v14, v13);
      int v18 = *((_DWORD *)a3 + 22);
      BOOL v19 = __OFSUB__(v18--, 1);
      *((_DWORD *)a3 + 22) = v18;
      if (v18 < 0 != v19) {
        return 0;
      }
      int v20 = v17;
      unsigned int v21 = siri::dialogengine::PatternSchemaBinary::MapValue::_InternalParse((siri::dialogengine::PatternSchemaBinary::MapValue *)v12, (google::protobuf::internal *)v14, a3);
      if (!v21) {
        return 0;
      }
      ++*((_DWORD *)a3 + 22);
      if (*((_DWORD *)a3 + 20)) {
        return 0;
      }
      int v22 = *((_DWORD *)a3 + 7) + v20;
      *((_DWORD *)a3 + 7) = v22;
      *(void *)a3 = *((void *)a3 + 1) + (v22 & (v22 >> 31));
      BOOL v24 = v21;
    }
    if (v8 >> 3 == 1 && v8 == 10)
    {
      if (*((_DWORD *)this + 8) != 1)
      {
        siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
        *((_DWORD *)this + 8) = 1;
        *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_27:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      }
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_27;
      }
      uint64_t v11 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3);
      goto LABEL_29;
    }
LABEL_12:
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    uint64_t v11 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v6, TagFallback, a3);
LABEL_29:
    BOOL v24 = v11;
    if (!v11) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

uint64_t siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 32);
  if (v2 == 2)
  {
    this = *(void *)(this + 24);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  else if (v2 == 1)
  {
    uint64_t v3 = *(void *)(this + 24);
    if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0) {
        operator delete(*(void **)v3);
      }
      this = MEMORY[0x1C8796D70](v3, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 32) = 0;
  return this;
}

siri::dialogengine::PatternSchemaBinary::MapValue *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::MapValue *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::MapValue>);
  }
  siri::dialogengine::PatternSchemaBinary::MapValue::MapValue(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60DC7B0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C401A3DEA33);
  _Unwind_Resume(a1);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::MapValue::_InternalParse(siri::dialogengine::PatternSchemaBinary::MapValue *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v39 = a2;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = (uint64_t *)((char *)this + 24);
LABEL_2:
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v39, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v39 + 1);
    LODWORD(v7) = *(unsigned __int8 *)v39;
    if ((*(char *)v39 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    int v7 = (const char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v39 + 2);
LABEL_6:
      uint64_t v39 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v39, v7);
    uint64_t v39 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v7 == 10)
    {
      BOOL v9 = (char *)TagFallback - 1;
      while (1)
      {
        uint64_t v39 = (google::protobuf::internal *)(v9 + 1);
        unsigned int v10 = v9[1];
        if (v9[1] < 0)
        {
          SizeFallbacuint64_t k = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)(v9 + 1), (const char *)v9[1]);
          if (!SizeFallback) {
            return 0;
          }
          uint64_t v11 = SizeFallback;
          unsigned int v10 = v13;
        }
        else
        {
          uint64_t v11 = v9 + 2;
        }
        int v14 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v11, v10);
        int v15 = *((_DWORD *)a3 + 22);
        BOOL v16 = __OFSUB__(v15--, 1);
        *((_DWORD *)a3 + 22) = v15;
        if (v15 < 0 != v16) {
          return 0;
        }
        int v17 = v14;
        unint64_t v40 = (google::protobuf::internal::ArenaImpl **)v5;
        uint64_t v41 = v5;
        memset(&v42, 0, sizeof(v42));
        *(void *)long long v44 = 0;
        BOOL v45 = v11;
        if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v45, *((_DWORD *)a3 + 23)))break; {
        if (*v45 != 10)
        }
          goto LABEL_38;
        int v18 = v45[1];
        if (v45[1] < 0)
        {
          BOOL v19 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)(v45 + 1), (const char *)v45[1]);
          if (!v19) {
            goto LABEL_63;
          }
          int v18 = v20;
        }
        else
        {
          BOOL v19 = v45 + 2;
        }
        BOOL v45 = (char *)google::protobuf::internal::EpsCopyInputStream::ReadString((uint64_t)a3, v19, v18, &v42);
        if (!v45) {
          goto LABEL_63;
        }
        if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v45, *((_DWORD *)a3 + 23)))
        {
          if (!v45) {
            goto LABEL_63;
          }
LABEL_40:
          unint64_t v27 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse>(*v40);
          *(void *)long long v44 = v27;
LABEL_47:
          unsigned int v31 = v27 + 1;
          uint64_t v32 = v27[1];
          *((_DWORD *)v27 + 8) |= 1u;
          if ((uint64_t *)v32 == &google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)v27 + 1, (google::protobuf::Arena *)v27[3], (long long *)&google::protobuf::internal::fixed_address_empty_string);
            uint64_t v32 = *v31;
          }
          if (*(char *)(v32 + 23) < 0) {
            operator delete(*(void **)v32);
          }
          long long v33 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
          *(void *)(v32 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *((void *)&v42.__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v32 = v33;
          *((unsigned char *)&v42.__r_.__value_.__s + 23) = 0;
          v42.__r_.__value_.__s.__data_[0] = 0;
          int v26 = *(void **)v44;
LABEL_52:
          BOOL v45 = (char *)google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::_InternalParse((uint64_t)v26, (google::protobuf::internal *)v45, a3);
          if (!v45) {
            goto LABEL_63;
          }
          unsigned int v34 = (const std::string *)(*(uint64_t (**)(void))(**(void **)v44 + 128))(*(void *)v44);
          std::string::operator=(&v42, v34);
          unsigned int v35 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator[](v41, (uint64_t)&v42);
          uint64_t v43 = v35;
          uint64_t v36 = *(void *)v44;
          *(_DWORD *)(*(void *)v44 + 32) |= 2u;
          BOOL v37 = *(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList **)(v36 + 16);
          if (!v37)
          {
            BOOL v37 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(*(google::protobuf::internal::ArenaImpl **)(v36 + 24));
            *(void *)(v36 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v37;
            unsigned int v35 = v43;
          }
          if (v37 != v35) {
            siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::InternalSwap(v35, v37);
          }
          BOOL v9 = v45;
          goto LABEL_32;
        }
        if (*v45 != 18) {
          goto LABEL_40;
        }
        uint64_t v21 = *(void *)v41[2];
        int v22 = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator[](v41, (uint64_t)&v42);
        uint64_t v43 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v22;
        if (v21 == *(void *)v41[2]) {
          goto LABEL_40;
        }
        BOOL v45 = (char *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(a3, (int)v22, (google::protobuf::internal *)(v45 + 1));
        if (!v45)
        {
          google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::erase(v41, (unsigned __int8 *)&v42);
LABEL_63:
          google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>>::~Parser((uint64_t)&v40);
          return 0;
        }
        char v23 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v45, *((_DWORD *)a3 + 23));
        BOOL v9 = v45;
        if ((v23 & 1) == 0)
        {
          if (!v45) {
            goto LABEL_63;
          }
          uint64_t v28 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse>(*v40);
          *(void *)long long v44 = v28;
          unsigned int v29 = v43;
          *((_DWORD *)v28 + 8) |= 2u;
          BOOL v30 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v28[2];
          if (!v30)
          {
            BOOL v30 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>((google::protobuf::internal::ArenaImpl *)v28[3]);
            std::string v28[2] = v30;
          }
          if (v29 != v30) {
            siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::InternalSwap(v30, v29);
          }
          google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::erase(v41, (unsigned __int8 *)&v42);
          unint64_t v27 = *(void **)v44;
          goto LABEL_47;
        }
LABEL_32:
        google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>>::~Parser((uint64_t)&v40);
        if (!v9) {
          return 0;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          return 0;
        }
        int v24 = *((_DWORD *)a3 + 7) + v17;
        *((_DWORD *)a3 + 7) = v24;
        unint64_t v25 = *((void *)a3 + 1) + (v24 & (v24 >> 31));
        *(void *)a3 = v25;
        uint64_t v39 = (google::protobuf::internal *)v9;
        if (v25 <= (unint64_t)v9 || *v9 != 10) {
          goto LABEL_2;
        }
      }
      if (!v45) {
        goto LABEL_63;
      }
LABEL_38:
      int v26 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse>(*v40);
      *(void *)long long v44 = v26;
      goto LABEL_52;
    }
    if (v7) {
      BOOL v8 = (v7 & 7) == 4;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      *((_DWORD *)a3 + 20) = v7 - 1;
      return TagFallback;
    }
    uint64_t v39 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v7, v4, TagFallback, a3);
    if (!v39) {
      return 0;
    }
  }
  return v39;
}

void sub_1C60DCC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>>::~Parser((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>>::~Parser(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    if (!(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2))
    {
      uint64_t v3 = *(void *)(a1 + 48);
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
    }
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  int v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    BOOL result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    BOOL v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    BOOL v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  BOOL result = (char *)siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

double google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::erase(void *a1, unsigned __int8 *a2)
{
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  double result = *(double *)&v6;
  if ((void)v6)
  {
    long long v4 = v6;
    uint64_t v5 = v7;
    *(void *)&double result = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::erase((uint64_t)&v6, a1, (uint64_t *)&v4).n128_u64[0];
  }
  return result;
}

void *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  double result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse>);
  }
  result[1] = &google::protobuf::internal::fixed_address_empty_string;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  *double result = &unk_1F21251A0;
  return result;
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>);
  }
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::VisualComponentsCombinationList(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60DCF2C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4050885234);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::InternalSwap(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v13;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_5:
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v9;
      goto LABEL_8;
    }
LABEL_12:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)((char *)this + 24), (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)((char *)a2 + 24));
}

google::protobuf::internal *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v17 = a2;
  uint64_t v5 = (std::string **)(a1 + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v17, *((_DWORD *)this + 23)))return v17; {
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v17 + 1);
    }
    LODWORD(v7) = *(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unint64_t v7 = (const char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      int v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v7);
    int v17 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v7 == 10)
    {
      *(_DWORD *)(a1 + 32) |= 1u;
      long long v10 = *(std::string **)(a1 + 8);
      if (v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena **)(a1 + 24), (long long *)&google::protobuf::internal::fixed_address_empty_string);
        long long v10 = *(std::string **)(a1 + 8);
        TagFallbacuint64_t k = v17;
      }
      int v11 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback) {
          goto LABEL_26;
        }
        int v12 = (std::string::value_type *)SizeFallback;
        int v11 = v15;
      }
      else
      {
        int v12 = (char *)TagFallback + 1;
      }
      SizeFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::ReadString((uint64_t)this, v12, v11, v10);
      goto LABEL_26;
    }
    if (v7 == 18)
    {
      *(_DWORD *)(a1 + 32) |= 2u;
      uint64_t v13 = *(void *)(a1 + 16);
      if (!v13)
      {
        int v14 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
        LODWORD(v13) = v14;
        *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v14;
        TagFallbacuint64_t k = v17;
      }
      SizeFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(this, v13, TagFallback);
      goto LABEL_26;
    }
    if (!v7 || (v7 & 7) == 4) {
      break;
    }
    SizeFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v7, 0, TagFallback, this);
LABEL_26:
    int v17 = SizeFallback;
    if (!SizeFallback) {
      return 0;
    }
  }
  *((_DWORD *)this + 20) = v7 - 1;
  return TagFallback;
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

__n128 google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::erase(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  if (!*a2)
  {
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7)
    {
      *(void *)(v7 + 24) = &unk_1F2125360;
      google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v7 + 48));
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)(v7 + 32));
      if (*(char *)(v7 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      MEMORY[0x1C8796D70](v7, 0x10B2C40D629C202);
      uint64_t v6 = *a3;
    }
  }
  __n128 v32 = *(__n128 *)a3;
  unint64_t v33 = a3[2];
  uint64_t v8 = *(void *)(v6 + 32);
  if (v8) {
    goto LABEL_7;
  }
  unsigned int v35 = 0;
  BOOL v9 = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::revalidate_if_necessary((uint64_t)a3, (uint64_t *)&v35);
  uint64_t v10 = a3[2];
  if (v9)
  {
    unint64_t v11 = v10 + 1;
  }
  else
  {
    if (v10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 456);
      int v12 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: (bucket_index_ & 1) == (0u): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v34, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
      uint64_t v10 = a3[2];
    }
    uint64_t v13 = *(void *)(*(void *)(a3[1] + 32) + 8 * v10);
    uint64_t v14 = (uint64_t)v35;
    int v15 = (void *)v35[1];
    if (v15)
    {
      do
      {
        BOOL v16 = v15;
        int v15 = (void *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        BOOL v16 = *(void **)(v14 + 16);
        BOOL v17 = *v16 == v14;
        uint64_t v14 = (uint64_t)v16;
      }
      while (!v17);
    }
    unsigned int v35 = v16;
    if (v16 != (void *)(v13 + 8))
    {
      uint64_t v8 = v16[4];
LABEL_7:
      *a3 = v8;
      goto LABEL_21;
    }
    unint64_t v11 = v10 + 2;
  }
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(a3, v11);
LABEL_21:
  int v18 = (void *)a2[2];
  if ((void *)v32.n128_u64[1] != v18)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 606);
    BOOL v19 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: (it.m_) == (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v35, (const char **)&v19->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
  }
  unsigned int v35 = 0;
  BOOL v20 = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v32, (uint64_t *)&v35);
  unint64_t v21 = v33;
  int v22 = (void **)v32.n128_u64[0];
  uint64_t v23 = v18[4];
  uint64_t v24 = *(void *)(v23 + 8 * v33);
  if (v20)
  {
    if (!v24 || v24 == *(void *)(v23 + 8 * (v33 ^ 1)))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 612);
      unint64_t v25 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: TableEntryIsNonEmptyList(b): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v34, (const char **)&v25->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
      uint64_t v24 = *(void *)(v18[4] + 8 * v21);
    }
    uint64_t v26 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList((uint64_t)v22, v24);
    goto LABEL_35;
  }
  if (!v24 || v24 != *(void *)(v23 + 8 * (v33 ^ 1)))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 617);
    unint64_t v27 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: TableEntryIsTree(b): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v34, (const char **)&v27->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
    uint64_t v24 = *(void *)(v18[4] + 8 * v21);
  }
  uint64_t v28 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v24, (void *)v35[4]);
  if ((uint64_t *)(v24 + 8) != v28) {
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v24, v28);
  }
  if (!*(void *)(v24 + 24))
  {
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::DestroyTree(v18[5], (void **)v24);
    uint64_t v26 = 0;
    *(void *)(v18[4] + ((8 * v21) | 8)) = 0;
    v21 &= ~1uLL;
LABEL_35:
    *(void *)(v18[4] + 8 * v21) = v26;
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v18, v22);
  --*v18;
  if (v21 == v18[3])
  {
    unint64_t v30 = v18[1];
    if (v21 < v30)
    {
      uint64_t v31 = v18[4];
      do
      {
        if (*(void *)(v31 + 8 * v21)) {
          break;
        }
        void v18[3] = ++v21;
      }
      while (v30 != v21);
    }
  }
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = a3[2];
  return result;
}

void sub_1C60DD568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::revalidate_if_necessary(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(unsigned __int8 **)a1;
  if (!*(void *)a1 || (uint64_t v5 = *(void *)(a1 + 8)) == 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 481);
    uint64_t v6 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: node_ != NULL && m_ != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    unint64_t v4 = *(unsigned __int8 **)a1;
    uint64_t v5 = *(void *)(a1 + 8);
  }
  uint64_t v7 = *(void *)(a1 + 16) & (*(void *)(v5 + 8) - 1);
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v7;
  uint64_t v8 = *(void *)(v5 + 32);
  uint64_t v9 = *(void *)(v8 + 8 * v7);
  if ((unsigned __int8 *)v9 == v4) {
    return 1;
  }
  if (v9 && v9 != *(void *)(v8 + 8 * (v7 ^ 1)))
  {
    while (1)
    {
      uint64_t v9 = *(void *)(v9 + 32);
      if (!v9) {
        break;
      }
      if ((unsigned __int8 *)v9 == v4) {
        return 1;
      }
    }
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v15, v5, v4, a2);
  std::string::size_type v10 = v15[0].__r_.__value_.__r.__words[2];
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *((void *)&v15[0].__r_.__value_.__l + 2);
  uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v12 = *(void *)(v11 + 8 * v10);
  return !v12 || v12 != *(void *)(v11 + 8 * (v10 ^ 1));
}

void sub_1C60DD69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::MapValue>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::ListValue>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::GetCachedSize(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  uint64_t v2 = *((int *)this + 8);
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    unint64_t v4 = (siri::dialogengine::PatternSchemaBinary::ListValue **)(v3 + 8);
  }
  else {
    unint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = siri::dialogengine::PatternSchemaBinary::ListValue::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *((void *)this + 1);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 23) < 0) {
      uint64_t v11 = *(void *)(v10 + 8);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
    }
    v2 += v11;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t siri::dialogengine::PatternSchemaBinary::ListValue::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  int v2 = *((_DWORD *)this + 8);
  if (v2 == 2)
  {
    uint64_t v7 = siri::dialogengine::PatternSchemaBinary::MapValue::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::MapValue **)this
                                                                         + 3));
    uint64_t v6 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
LABEL_7:
    uint64_t result = v6 + 1;
    goto LABEL_9;
  }
  if (v2 == 1)
  {
    uint64_t v3 = *((void *)this + 3);
    uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
    uint64_t v5 = *(void *)(v3 + 8);
    if ((v4 & 0x80u) == 0) {
      uint64_t v5 = v4;
    }
    uint64_t v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
    goto LABEL_7;
  }
  uint64_t result = 0;
LABEL_9:
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 23) < 0) {
      uint64_t v11 = *(void *)(v10 + 8);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
    }
    result += v11;
  }
  *((_DWORD *)this + 5) = result;
  return result;
}

uint64_t siri::dialogengine::PatternSchemaBinary::MapValue::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  int v2 = (unsigned int *)*((void *)this + 5);
  uint64_t v3 = *v2;
  *((void *)&v18 + 1) = v2;
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(&v18, *((void *)v2 + 3));
  long long v16 = v18;
  uint64_t v17 = v19;
  for (uint64_t i = v18; (void)v16; uint64_t i = v16)
  {
    uint64_t v5 = *(void *)(i + 24);
    uint64_t v6 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(v5 + 24);
    int v7 = *(unsigned __int8 *)(v5 + 23);
    int v8 = *(_DWORD *)(v5 + 8);
    if ((v7 & 0x80u) == 0) {
      int v8 = v7;
    }
    signed int v9 = v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
    uint64_t v10 = siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::ByteSizeLong(v6);
    uint64_t v11 = v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + v9;
    v3 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair const>::operator++((unsigned __int8 **)&v16);
  }
  uint64_t v12 = *((void *)this + 1);
  if (v12)
  {
    unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v14 + 23) < 0) {
      uint64_t v15 = *(void *)(v14 + 8);
    }
    else {
      uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
    }
    v3 += v15;
  }
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(this, lpsrc);
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 3196);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::ListValue>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
}

void sub_1C60DDAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::ListValue>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    int v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    int v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      uint64_t v13 = (const siri::dialogengine::PatternSchemaBinary::ListValue **)(v6 + 8);
      unint64_t v14 = (siri::dialogengine::PatternSchemaBinary::ListValue **)v7;
      do
      {
        long long v16 = *v13++;
        uint64_t v15 = v16;
        uint64_t v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::ListValue>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      long long v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      unint64_t v21 = (siri::dialogengine::PatternSchemaBinary::ListValue **)((char *)v8 + v20);
      int v22 = (const siri::dialogengine::PatternSchemaBinary::ListValue **)(v20 + v6 + 8);
      do
      {
        uint64_t v23 = *v22++;
        uint64_t v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ListValue>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::ListValue>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    uint64_t v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_1C60DDC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::ListValue>::Merge(const siri::dialogengine::PatternSchemaBinary::ListValue *a1, siri::dialogengine::PatternSchemaBinary::ListValue *a2)
{
}

void siri::dialogengine::PatternSchemaBinary::ListValue::MergeFrom(siri::dialogengine::PatternSchemaBinary::ListValue *this, const siri::dialogengine::PatternSchemaBinary::ListValue *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 3005);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v6 = *((_DWORD *)a2 + 8);
  if (v6 == 1)
  {
    int v8 = (const std::string *)*((void *)a2 + 3);
    if (*((_DWORD *)this + 8) == 1)
    {
      uint64_t v9 = (std::string *)*((void *)this + 3);
      if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        std::string::operator=(v9, v8);
        return;
      }
    }
    else
    {
      siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
      *((_DWORD *)this + 8) = 1;
      *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, (uint64_t)v8);
  }
  if (v6 != 2) {
    return;
  }
  if (*((_DWORD *)this + 8) == 2)
  {
    int v7 = (siri::dialogengine::PatternSchemaBinary::MapValue *)*((void *)this + 3);
  }
  else
  {
    siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
    *((_DWORD *)this + 8) = 2;
    int v7 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue>(0);
    *((void *)this + 3) = v7;
    if (*((_DWORD *)a2 + 8) != 2)
    {
      uint64_t v10 = (const siri::dialogengine::PatternSchemaBinary::MapValue *)&siri::dialogengine::PatternSchemaBinary::_MapValue_default_instance_;
      goto LABEL_17;
    }
  }
  uint64_t v10 = (const siri::dialogengine::PatternSchemaBinary::MapValue *)*((void *)a2 + 3);
LABEL_17:
  siri::dialogengine::PatternSchemaBinary::MapValue::MergeFrom(v7, v10);
}

void sub_1C60DDDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::MapValue::MergeFrom(siri::dialogengine::PatternSchemaBinary::MapValue *this, const siri::dialogengine::PatternSchemaBinary::MapValue *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 2751);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t *)this + 3, (uint64_t)a2 + 24);
}

void sub_1C60DDE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom(uint64_t *a1, uint64_t a2)
{
  *((void *)&v10 + 1) = *(void *)(a2 + 16);
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(&v10, *(void *)(*((void *)&v10 + 1) + 24));
  long long v8 = v10;
  uint64_t v9 = v11;
  for (uint64_t i = v10; (void)v8; uint64_t i = v8)
  {
    uint64_t v4 = *(void *)(i + 24);
    uint64_t v5 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(v4 + 24);
    char v6 = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator[](a1, v4);
    if (v5 != (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v6)
    {
      int v7 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v6;
      siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::Clear((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v6);
      siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(v7, v5);
    }
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair const>::operator++((unsigned __int8 **)&v8);
  }
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::Clear(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  uint64_t v2 = *((unsigned int *)this + 8);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  else if (v2)
  {
    uint64_t v3 = (siri::dialogengine::PatternSchemaBinary::ListValue **)(*((void *)this + 5) + 8);
    do
    {
      uint64_t v4 = *v3++;
      siri::dialogengine::PatternSchemaBinary::ListValue::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 8) = 0;
  }
  char v7 = *((unsigned char *)this + 8);
  char v6 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)((char *)this + 8);
  *((_DWORD *)v6 + 2) = 0;
  if (v7)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v6);
  }
}

void sub_1C60DDFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::ListValue::Clear(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (siri::dialogengine::PatternSchemaBinary::ListValue *)((char *)this + 8);
  *((_DWORD *)v2 + 2) = 0;
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v2);
  }
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::IsInitialized(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  return 1;
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::New(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(a2);
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::New(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(0);
}

void *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.VisualComponentsCombinationList");
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::~VisualComponentsCombinationList(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  *(void *)this = &unk_1F2125360;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F2125360;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F2125360;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::ListValue::GetCachedSize(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  return *((unsigned int *)this + 5);
}

void siri::dialogengine::PatternSchemaBinary::ListValue::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::ListValue *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::ListValue::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::PatternSchemaBinary::ListValue::IsInitialized(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  return 1;
}

siri::dialogengine::PatternSchemaBinary::ListValue *siri::dialogengine::PatternSchemaBinary::ListValue::New(siri::dialogengine::PatternSchemaBinary::ListValue *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ListValue>(a2);
}

siri::dialogengine::PatternSchemaBinary::ListValue *siri::dialogengine::PatternSchemaBinary::ListValue::New(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ListValue>(0);
}

void *siri::dialogengine::PatternSchemaBinary::ListValue::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.ListValue");
}

void siri::dialogengine::PatternSchemaBinary::ListValue::~ListValue(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  siri::dialogengine::PatternSchemaBinary::ListValue::~ListValue(this);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F21252D0;
  if (*((_DWORD *)this + 8)) {
    siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void *google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::Init(uint64_t *a1)
{
  uint64_t v2 = (atomic_ullong *)*a1;
  if (!*a1) {
    operator new();
  }
  if (v2[14]) {
  AlignedAndAddCleanup = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v2, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap>);
  }
  void *AlignedAndAddCleanup = 0;
  AlignedAndAddCleanup[2] = AlignedAndAddCleanup;
  AlignedAndAddCleanup[4] = 0;
  AlignedAndAddCleanup[5] = v2;
  uint64_t result = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::CreateEmptyTable((uint64_t)AlignedAndAddCleanup, 8uLL);
  AlignedAndAddCleanup[4] = result;
  AlignedAndAddCleanup[3] = 8;
  AlignedAndAddCleanup[1] = 8;
  a1[2] = (uint64_t)AlignedAndAddCleanup;
  return result;
}

void sub_1C60DE364(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

void *google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::~Map(void *a1)
{
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::clear(a1);
  if (!*a1)
  {
    uint64_t v2 = a1[2];
    if (v2)
    {
      uint64_t v3 = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::~InnerMap(v2);
      MEMORY[0x1C8796D70](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

__n128 google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::clear(void *a1)
{
  v8.n128_u64[0] = a1[2];
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(&v7, *(void *)(v8.n128_u64[0] + 24));
  uint64_t v2 = v7;
  result.n128_u64[0] = v8.n128_u64[0];
  for (__n128 i = v8; v7; __n128 i = v8)
  {
    uint64_t v5 = v2;
    __n128 v6 = i;
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::erase((uint64_t)&v7, a1, &v5);
    uint64_t v2 = v7;
    __n128 result = v8;
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::~InnerMap(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    unint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      do
      {
        uint64_t v4 = *(void *)(a1 + 32);
        uint64_t v5 = *(void *)(v4 + 8 * v3);
        if (v5)
        {
          if (v5 == *(void *)(v4 + 8 * (v3 ^ 1)))
          {
            uint64_t v7 = v3 + 1;
            if ((v3 & 1) != 0 || v5 != *(void *)(v4 + 8 * v7))
            {
              google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 531);
              __n128 v8 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: table_[b] == table_[b + 1] && (b & 1) == 0: ");
              google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v8->__r_.__value_.__l.__data_);
              google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
              uint64_t v4 = *(void *)(a1 + 32);
            }
            *(void *)(v4 + 8 * v7) = 0;
            *(void *)(*(void *)(a1 + 32) + 8 * v3) = 0;
            uint64_t v9 = *(uint64_t **)v5;
            do
            {
              long long v10 = (void **)v9[4];
              uint64_t v11 = (uint64_t *)v9[1];
              uint64_t v12 = v9;
              if (v11)
              {
                do
                {
                  uint64_t v13 = v11;
                  uint64_t v11 = (uint64_t *)*v11;
                }
                while (v11);
              }
              else
              {
                do
                {
                  uint64_t v13 = (uint64_t *)v12[2];
                  BOOL v14 = *v13 == (void)v12;
                  uint64_t v12 = v13;
                }
                while (!v14);
              }
              std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v5, v9);
              google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, v10);
              uint64_t v9 = v13;
            }
            while (v13 != (uint64_t *)(v5 + 8));
            google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::DestroyTree(*(void *)(a1 + 40), (void **)v5);
            goto LABEL_20;
          }
          *(void *)(v4 + 8 * v3) = 0;
          do
          {
            uint64_t v6 = *(void *)(v5 + 32);
            google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, (void **)v5);
            uint64_t v5 = v6;
          }
          while (v6);
        }
        uint64_t v7 = v3;
LABEL_20:
        uint64_t v3 = v7 + 1;
        unint64_t v2 = *(void *)(a1 + 8);
      }
      while (v7 + 1 < v2);
    }
    *(void *)a1 = 0;
    *(void *)(a1 + 24) = v2;
    if (!*(void *)(a1 + 40)) {
      operator delete(*(void **)(a1 + 32));
    }
  }
  return a1;
}

void sub_1C60DE5FC(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::MapValue::GetCachedSize(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  return *((unsigned int *)this + 5);
}

void siri::dialogengine::PatternSchemaBinary::MapValue::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::MapValue *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::MapValue::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::PatternSchemaBinary::MapValue::IsInitialized(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::MapValue::Clear(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::clear((void *)this + 3);
  char v3 = *((unsigned char *)this + 8);
  unint64_t v2 = (siri::dialogengine::PatternSchemaBinary::MapValue *)((char *)this + 8);
  *((_DWORD *)v2 + 2) = 0;
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v2);
  }
}

siri::dialogengine::PatternSchemaBinary::MapValue *siri::dialogengine::PatternSchemaBinary::MapValue::New(siri::dialogengine::PatternSchemaBinary::MapValue *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue>(a2);
}

siri::dialogengine::PatternSchemaBinary::MapValue *siri::dialogengine::PatternSchemaBinary::MapValue::New(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue>(0);
}

void *siri::dialogengine::PatternSchemaBinary::MapValue::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.MapValue");
}

void siri::dialogengine::PatternSchemaBinary::MapValue::~MapValue(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  *(void *)this = &unk_1F2125240;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::~Map((void *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F2125240;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::~Map((void *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F2125240;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::~Map((void *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    return *(void *)(a1 + 16);
  }
  else {
    return qword_1EA3DB5A8;
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

unsigned __int8 *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  if (*(char *)(v6 + 23) < 0)
  {
    int64_t v7 = *(void *)(v6 + 8);
    if (v7 > 127)
    {
LABEL_23:
      uint64_t v9 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v6, a2);
      goto LABEL_11;
    }
  }
  else
  {
    int64_t v7 = *(unsigned __int8 *)(v6 + 23);
  }
  if (*(void *)a3 - (void)a2 + 14 < v7) {
    goto LABEL_23;
  }
  *a2 = 10;
  a2[1] = v7;
  if (*(char *)(v6 + 23) >= 0) {
    __n128 v8 = (const void *)v6;
  }
  else {
    __n128 v8 = *(const void **)v6;
  }
  memcpy(a2 + 2, v8, v7);
  uint64_t v9 = &a2[v7 + 2];
LABEL_11:
  long long v10 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (*(void *)a3 <= (unint64_t)v9) {
    uint64_t v9 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v9);
  }
  char *v9 = 18;
  unsigned int v11 = *((_DWORD *)v10 + 5);
  if (v11 > 0x7F)
  {
    v9[1] = v11 | 0x80;
    unsigned int v13 = v11 >> 7;
    if (v11 >> 14)
    {
      BOOL v14 = v9 + 2;
      do
      {
        uint64_t v15 = v14;
        *v14++ = v13 | 0x80;
        unsigned int v16 = v13 >> 7;
        unsigned int v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
      uint64_t v12 = v15 + 2;
      *BOOL v14 = v16;
    }
    else
    {
      std::string v9[2] = v13;
      uint64_t v12 = v9 + 3;
    }
  }
  else
  {
    v9[1] = v11;
    uint64_t v12 = v9 + 2;
  }
  return siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::InternalSerializeWithCachedSizesToArray(v10, v12, a3);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2 = a1[8];
  if (v2)
  {
    uint64_t v6 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 128))(a1);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0) {
      int v7 = *(_DWORD *)(v6 + 8);
    }
    unsigned int v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[8] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    unsigned int v5 = 0;
    return v5 + v3;
  }
  unsigned int v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
  unsigned int v5 = *(_DWORD *)(v4 + 20) + ((9 * (__clz(*(_DWORD *)(v4 + 20) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2 = a1[8];
  if (v2)
  {
    uint64_t v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 128))(a1);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0) {
      int v8 = *(_DWORD *)(v7 + 8);
    }
    uint64_t v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[8] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v6 = 0;
    return v6 + v3;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
  uint64_t v5 = siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::ByteSizeLong(v4);
  uint64_t v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *lpsrc)
{
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFromInternal(a1, lpsrc);
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[8];
  if (v2)
  {
    if (v2)
    {
      uint64_t v5 = (std::string **)(a1 + 8);
      if (*(uint64_t **)(a1 + 8) == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 8), *(google::protobuf::Arena **)(a1 + 24), (long long *)&google::protobuf::internal::fixed_address_empty_string);
      }
      uint64_t v6 = (long long *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 128))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 8), *(google::protobuf::Arena **)(a1 + 24), v6);
      }
      else {
        std::string::operator=(*v5, (const std::string *)v6);
      }
      *(_DWORD *)(a1 + 32) |= 1u;
      int v2 = a2[8];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(void *)(a1 + 16)) {
        *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
      }
      uint64_t v7 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 136))(a2);
      siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(*(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList **)(a1 + 16), v7);
      *(_DWORD *)(a1 + 32) |= 2u;
    }
  }
}

BOOL google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList **)(a1 + 16);
  if (v3) {
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::Clear(v3);
  }
  *(_DWORD *)(a1 + 32) &= 0xFFFFFFFC;
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(int a1, google::protobuf::internal::ArenaImpl *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse>(this);
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New()
{
}

void *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse::~MapValue_ValueEntry_DoNotUse(siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse *this)
{
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(this);
  JUMPOUT(0x1C8796D70);
}

void *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(void *a1)
{
  *a1 = &unk_1F2125928;
  if (!a1[3])
  {
    google::protobuf::internal::ArenaStringPtr::DestroyNoArena(a1[1]);
    uint64_t v2 = a1[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(void *a1)
{
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1C8796D70);
}

void InitDefaultsscc_info_VisualComponentsCombination_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::VisualComponentsCombination((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombination_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombination_default_instance_, v4);
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::VisualComponentsCombination(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  *(void *)this = &unk_1F21253F0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (atomic_load_explicit(scc_info_VisualComponentsCombination_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_VisualComponentsCombination_PatternSchemaBinary_2eproto);
  }
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_1C60DF050(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 8);
  if (v6 == 2)
  {
    long long v10 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 3), a2);
  }
  else
  {
    if (v6 != 1) {
      goto LABEL_15;
    }
    if (*(void *)a3 <= (unint64_t)a2) {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    uint64_t v7 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)*((void *)this + 3);
    char *v4 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 5);
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unsigned int v11 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v12 = v4 + 2;
        do
        {
          unsigned int v13 = v12;
          *v12++ = v11 | 0x80;
          unsigned int v14 = v11 >> 7;
          unsigned int v15 = v11 >> 14;
          v11 >>= 7;
        }
        while (v15);
        uint64_t v9 = v13 + 2;
        *uint64_t v12 = v14;
      }
      else
      {
        v4[2] = v11;
        uint64_t v9 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v8;
      uint64_t v9 = v4 + 2;
    }
    long long v10 = siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::InternalSerializeWithCachedSizesToArray(v7, v9, a3);
  }
  uint64_t v4 = (char *)v10;
LABEL_15:
  uint64_t v16 = *((void *)this + 1);
  if ((v16 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 23) < 0)
  {
    uint64_t v20 = *(void **)v18;
    uint64_t v19 = *(void *)(v18 + 8);
  }
  else
  {
    LODWORD(v19) = *(unsigned __int8 *)(v18 + 23);
    uint64_t v20 = (void *)v18;
  }
  if (*(void *)a3 - (void)v4 >= (int)v19)
  {
    uint64_t v21 = (int)v19;
    memcpy(v4, v20, (int)v19);
    v4 += v21;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v20, v19, (unsigned __int8 *)v4);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::_InternalParse(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v14 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  int v6 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v14, *((_DWORD *)a3 + 23))) {
      return v14;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v14 + 1);
    LODWORD(v8) = *(unsigned __int8 *)v14;
    if ((*(char *)v14 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v14 + 2);
LABEL_6:
      unsigned int v14 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v14, v8);
    unsigned int v14 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v8 >> 3 == 2)
    {
      if (v8 == 18)
      {
        if (*((_DWORD *)this + 8) != 2)
        {
          siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
          *((_DWORD *)this + 8) = 2;
          *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_24:
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_24;
        }
        unsigned int v11 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_28;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 10)
    {
      if (*((_DWORD *)this + 8) == 1)
      {
        uint64_t v12 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)*v5;
      }
      else
      {
        siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
        *((_DWORD *)this + 8) = 1;
        uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(0);
        *((void *)this + 3) = v12;
        TagFallbacuint64_t k = v14;
      }
      unsigned int v11 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(a3, v12, TagFallback);
      goto LABEL_28;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    unsigned int v11 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v6, TagFallback, a3);
LABEL_28:
    unsigned int v14 = v11;
    if (!v11) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 32);
  if (v2 == 2)
  {
    uint64_t v3 = *(void *)(this + 24);
    if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0) {
        operator delete(*(void **)v3);
      }
      this = MEMORY[0x1C8796D70](v3, 0x1012C40EC159624);
    }
  }
  else if (v2 == 1)
  {
    this = *(void *)(this + 24);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 32) = 0;
  return this;
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::GetCachedSize(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  int v2 = *((_DWORD *)this + 8);
  if (v2 == 2)
  {
    uint64_t v5 = *((void *)this + 3);
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
    uint64_t v7 = *(void *)(v5 + 8);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = v6;
    }
    uint64_t v4 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
    goto LABEL_7;
  }
  if (v2 == 1)
  {
    uint64_t v3 = siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList **)this
                                                                                                + 3));
    uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6);
LABEL_7:
    uint64_t result = v4 + 1;
    goto LABEL_9;
  }
  uint64_t result = 0;
LABEL_9:
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 23) < 0) {
      uint64_t v11 = *(void *)(v10 + 8);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
    }
    result += v11;
  }
  *((_DWORD *)this + 5) = result;
  return result;
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::MergeFrom(this, lpsrc);
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::MergeFrom(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 3450);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v6 = *((_DWORD *)a2 + 8);
  if (v6 != 1)
  {
    if (v6 != 2) {
      return;
    }
    uint64_t v7 = (const std::string *)*((void *)a2 + 3);
    if (*((_DWORD *)this + 8) == 2)
    {
      unsigned int v8 = (std::string *)*((void *)this + 3);
      if (v8 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        std::string::operator=(v8, v7);
        return;
      }
    }
    else
    {
      siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
      *((_DWORD *)this + 8) = 2;
      *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, (uint64_t)v7);
  }
  if (*((_DWORD *)this + 8) == 1)
  {
    uint64_t v9 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)*((void *)this + 3);
  }
  else
  {
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
    *((_DWORD *)this + 8) = 1;
    uint64_t v9 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(0);
    *((void *)this + 3) = v9;
    if (*((_DWORD *)a2 + 8) != 1)
    {
      unint64_t v10 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombinationList_default_instance_;
      goto LABEL_17;
    }
  }
  unint64_t v10 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)*((void *)a2 + 3);
LABEL_17:
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(v9, v10);
}

void sub_1C60DF6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::IsInitialized(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::Clear(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
  char v3 = *((unsigned char *)this + 8);
  int v2 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)((char *)this + 8);
  *((_DWORD *)v2 + 2) = 0;
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v2);
  }
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::New(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination>(a2);
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination>);
  }
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::VisualComponentsCombination(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60DF7F4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40C05B56FCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::New(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination>(0);
}

void *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.VisualComponentsCombination");
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::~VisualComponentsCombination(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::~VisualComponentsCombination(this);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F21253F0;
  if (*((_DWORD *)this + 8)) {
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Usage_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::Usage::Usage((siri::dialogengine::PatternSchemaBinary::Usage *)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_, v4);
}

void InitDefaultsscc_info_Group_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::Group::Group((siri::dialogengine::PatternSchemaBinary::Group *)&siri::dialogengine::PatternSchemaBinary::_Group_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_Group_default_instance_, v4);
  qword_1EA3DB520 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
  unk_1EA3DB528 = &siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombination_default_instance_;
}

siri::dialogengine::PatternSchemaBinary::Group *siri::dialogengine::PatternSchemaBinary::Group::Group(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  *(void *)this = &unk_1F2125080;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
  if (atomic_load_explicit(scc_info_Group_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Group_PatternSchemaBinary_2eproto);
  }
  *((void *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C60DFA6C(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 72));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 48));
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::Group::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::Group *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 12), a2);
    if ((v6 & 0x20) == 0)
    {
LABEL_3:
      if ((v6 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v6 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  if ((unint64_t)v4 >= *(void *)a3) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v7 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 17);
  char *v4 = 18;
  unsigned int v8 = *((_DWORD *)v7 + 5);
  if (v8 > 0x7F)
  {
    v4[1] = v8 | 0x80;
    unsigned int v10 = v8 >> 7;
    if (v8 >> 14)
    {
      char v11 = v4 + 2;
      do
      {
        uint64_t v12 = v11;
        *v11++ = v10 | 0x80;
        unsigned int v13 = v10 >> 7;
        unsigned int v14 = v10 >> 14;
        v10 >>= 7;
      }
      while (v14);
      uint64_t v9 = v12 + 2;
      *char v11 = v13;
    }
    else
    {
      v4[2] = v10;
      uint64_t v9 = v4 + 3;
    }
  }
  else
  {
    v4[1] = v8;
    uint64_t v9 = v4 + 2;
  }
  uint64_t v4 = (char *)siri::dialogengine::PatternSchemaBinary::Usage::InternalSerializeWithCachedSizesToArray(v7, v9, a3);
  if ((v6 & 2) == 0)
  {
LABEL_4:
    if ((v6 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 13), v4);
  if ((v6 & 4) == 0)
  {
LABEL_5:
    if ((v6 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((const void ***)this + 14), v4);
  if ((v6 & 8) == 0)
  {
LABEL_6:
    if ((v6 & 0x40) == 0) {
      goto LABEL_32;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((const void ***)this + 15), v4);
  if ((v6 & 0x40) == 0) {
    goto LABEL_32;
  }
LABEL_22:
  if ((unint64_t)v4 >= *(void *)a3) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  unsigned int v15 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)*((void *)this + 18);
  char *v4 = 50;
  unsigned int v16 = *((_DWORD *)v15 + 5);
  if (v16 > 0x7F)
  {
    v4[1] = v16 | 0x80;
    unsigned int v18 = v16 >> 7;
    if (v16 >> 14)
    {
      uint64_t v19 = v4 + 2;
      do
      {
        uint64_t v20 = v19;
        *v19++ = v18 | 0x80;
        unsigned int v21 = v18 >> 7;
        unsigned int v22 = v18 >> 14;
        v18 >>= 7;
      }
      while (v22);
      unsigned int v17 = v20 + 2;
      *uint64_t v19 = v21;
    }
    else
    {
      v4[2] = v18;
      unsigned int v17 = v4 + 3;
    }
  }
  else
  {
    v4[1] = v16;
    unsigned int v17 = v4 + 2;
  }
  uint64_t v4 = (char *)siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::InternalSerializeWithCachedSizesToArray(v15, v17, a3);
LABEL_32:
  int v23 = *((_DWORD *)this + 8);
  if (v23 >= 1)
  {
    for (int i = 0; v23 != i; ++i)
    {
      uint64_t v25 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v25 + 23) < 0)
      {
        int64_t v26 = *(void *)(v25 + 8);
        if (v26 > 127) {
          goto LABEL_44;
        }
      }
      else
      {
        int64_t v26 = *(unsigned __int8 *)(v25 + 23);
      }
      if (*(void *)a3 - (void)v4 + 14 >= v26)
      {
        char *v4 = 58;
        v4[1] = v26;
        if (*(char *)(v25 + 23) >= 0) {
          char v27 = (const void *)v25;
        }
        else {
          char v27 = *(const void **)v25;
        }
        memcpy(v4 + 2, v27, v26);
        v4 += v26 + 2;
        continue;
      }
LABEL_44:
      uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 7, v25, v4);
    }
  }
  int v28 = *((_DWORD *)this + 14);
  if (v28)
  {
    for (int j = 0; j != v28; ++j)
    {
      if ((unint64_t)v4 >= *(void *)a3) {
        uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      }
      unint64_t v30 = (siri::dialogengine::PatternSchemaBinary::PatternComponent *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((uint64_t)this + 48, j);
      char *v4 = 66;
      unsigned int v31 = *((_DWORD *)v30 + 5);
      if (v31 > 0x7F)
      {
        v4[1] = v31 | 0x80;
        unsigned int v33 = v31 >> 7;
        if (v31 >> 14)
        {
          char v34 = v4 + 2;
          do
          {
            unsigned int v35 = v34;
            *v34++ = v33 | 0x80;
            unsigned int v36 = v33 >> 7;
            unsigned int v37 = v33 >> 14;
            v33 >>= 7;
          }
          while (v37);
          __n128 v32 = v35 + 2;
          *char v34 = v36;
        }
        else
        {
          v4[2] = v33;
          __n128 v32 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v31;
        __n128 v32 = v4 + 2;
      }
      uint64_t v4 = (char *)siri::dialogengine::PatternSchemaBinary::PatternComponent::InternalSerializeWithCachedSizesToArray(v30, v32, a3);
    }
  }
  int v38 = *((_DWORD *)this + 20);
  if (v38)
  {
    for (int k = 0; k != v38; ++k)
    {
      if ((unint64_t)v4 >= *(void *)a3) {
        uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      }
      unint64_t v40 = (siri::dialogengine::PatternSchemaBinary::PatternComponent *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((uint64_t)this + 72, k);
      char *v4 = 74;
      unsigned int v41 = *((_DWORD *)v40 + 5);
      if (v41 > 0x7F)
      {
        v4[1] = v41 | 0x80;
        unsigned int v43 = v41 >> 7;
        if (v41 >> 14)
        {
          long long v44 = v4 + 2;
          do
          {
            BOOL v45 = v44;
            *v44++ = v43 | 0x80;
            unsigned int v46 = v43 >> 7;
            unsigned int v47 = v43 >> 14;
            v43 >>= 7;
          }
          while (v47);
          std::string v42 = v45 + 2;
          *long long v44 = v46;
        }
        else
        {
          v4[2] = v43;
          std::string v42 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v41;
        std::string v42 = v4 + 2;
      }
      uint64_t v4 = (char *)siri::dialogengine::PatternSchemaBinary::PatternComponent::InternalSerializeWithCachedSizesToArray(v40, v42, a3);
    }
  }
  if ((v6 & 0x10) != 0) {
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 10, *((const void ***)this + 16), v4);
  }
  uint64_t v48 = *((void *)this + 1);
  if ((v48 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v50 = v48 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v50 + 23) < 0)
  {
    int64_t v52 = *(void **)v50;
    uint64_t v51 = *(void *)(v50 + 8);
  }
  else
  {
    LODWORD(v51) = *(unsigned __int8 *)(v50 + 23);
    int64_t v52 = (void *)v50;
  }
  if (*(void *)a3 - (void)v4 >= (int)v51)
  {
    uint64_t v53 = (int)v51;
    memcpy(v4, v52, (int)v51);
    v4 += v53;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v52, v51, (unsigned __int8 *)v4);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1C60E0038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::Group::_InternalParse(siri::dialogengine::PatternSchemaBinary::Group *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v57 = (char *)this + 128;
  unint64_t v58 = a2;
  uint64_t v5 = (unsigned int *)((char *)this + 72);
  int v6 = (unsigned int *)((char *)this + 48);
  char v7 = (unsigned int *)((char *)this + 24);
  uint64_t v55 = (char *)this + 112;
  std::string::size_type v56 = (char *)this + 120;
  uint64_t v53 = (char *)this + 96;
  int64_t v54 = (char *)this + 104;
  unsigned int v8 = (unint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v58, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v58 + 1);
      LODWORD(v10) = *(unsigned __int8 *)v58;
      if (*(char *)v58 < 0)
      {
        unsigned int v10 = (const char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v58, v10);
          unint64_t v58 = TagFallback;
          if (!TagFallback) {
            return TagFallback;
          }
LABEL_7:
          switch(v10 >> 3)
          {
            case 1u:
              if (v10 != 10) {
                goto LABEL_81;
              }
              *((_DWORD *)this + 4) |= 1u;
              char v11 = (std::string *)*((void *)this + 12);
              if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                goto LABEL_78;
              }
              uint64_t v12 = (uint64_t)v53;
              goto LABEL_77;
            case 2u:
              if (v10 != 18) {
                goto LABEL_81;
              }
              *((_DWORD *)this + 4) |= 0x20u;
              unsigned int v13 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 17);
              if (!v13)
              {
                unsigned int v13 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
                *((void *)this + 17) = v13;
                TagFallbacint k = v58;
              }
              unsigned int v14 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Usage>(a3, v13, TagFallback);
              goto LABEL_79;
            case 3u:
              if (v10 != 26) {
                goto LABEL_81;
              }
              *((_DWORD *)this + 4) |= 2u;
              char v11 = (std::string *)*((void *)this + 13);
              if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                goto LABEL_78;
              }
              uint64_t v12 = (uint64_t)v54;
              goto LABEL_77;
            case 4u:
              if (v10 != 34) {
                goto LABEL_81;
              }
              *((_DWORD *)this + 4) |= 4u;
              char v11 = (std::string *)*((void *)this + 14);
              if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                goto LABEL_78;
              }
              uint64_t v12 = (uint64_t)v55;
              goto LABEL_77;
            case 5u:
              if (v10 != 42) {
                goto LABEL_81;
              }
              *((_DWORD *)this + 4) |= 8u;
              char v11 = (std::string *)*((void *)this + 15);
              if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                goto LABEL_78;
              }
              uint64_t v12 = (uint64_t)v56;
              goto LABEL_77;
            case 6u:
              if (v10 != 50) {
                goto LABEL_81;
              }
              *((_DWORD *)this + 4) |= 0x40u;
              unsigned int v15 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)*((void *)this + 18);
              if (!v15)
              {
                unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination>(0);
                *((void *)this + 18) = v15;
                TagFallbacint k = v58;
              }
              unsigned int v16 = *(unsigned __int8 *)TagFallback;
              if (*(char *)TagFallback < 0)
              {
                SizeFallbacint k = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
                if (!SizeFallback) {
                  return 0;
                }
                unsigned int v17 = SizeFallback;
                unsigned int v16 = v45;
              }
              else
              {
                unsigned int v17 = (char *)TagFallback + 1;
              }
              int v46 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v17, v16);
              int v47 = *((_DWORD *)a3 + 22);
              BOOL v48 = __OFSUB__(v47--, 1);
              *((_DWORD *)a3 + 22) = v47;
              if (v47 < 0 != v48) {
                return 0;
              }
              int v49 = v46;
              unint64_t v50 = siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::_InternalParse(v15, (google::protobuf::internal *)v17, a3);
              if (!v50) {
                return 0;
              }
              ++*((_DWORD *)a3 + 22);
              if (*((_DWORD *)a3 + 20)) {
                return 0;
              }
              int v51 = *((_DWORD *)a3 + 7) + v49;
              *((_DWORD *)a3 + 7) = v51;
              *(void *)a3 = *((void *)a3 + 1) + (v51 & (v51 >> 31));
              unint64_t v58 = v50;
              continue;
            case 7u:
              if (v10 != 58) {
                goto LABEL_81;
              }
              unsigned int v18 = (char *)TagFallback - 1;
              while (1)
              {
                uint64_t v19 = v18 + 1;
                unint64_t v58 = (google::protobuf::internal *)(v18 + 1);
                uint64_t v20 = (int *)*((void *)this + 5);
                if (!v20) {
                  break;
                }
                uint64_t v21 = *((int *)this + 8);
                int v22 = *v20;
                if ((int)v21 >= *v20)
                {
                  if (v22 == *((_DWORD *)this + 9))
                  {
LABEL_38:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v22 + 1);
                    uint64_t v20 = (int *)*((void *)this + 5);
                    int v22 = *v20;
                  }
                  *uint64_t v20 = v22 + 1;
                  uint64_t v24 = *(atomic_ullong **)v7;
                  if (!*(void *)v7) {
                    operator new();
                  }
                  if (v24[14]) {
                  AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v24, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
                  }
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
                  AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
                  uint64_t v25 = *((void *)this + 5);
                  uint64_t v26 = *((int *)this + 8);
                  *((_DWORD *)this + 8) = v26 + 1;
                  *(void *)(v25 + 8 * v26 + 8) = AlignedAndAddCleanup;
                  uint64_t v19 = (std::string::value_type *)v58;
                  goto LABEL_44;
                }
                *((_DWORD *)this + 8) = v21 + 1;
                AlignedAndAddCleanup = *(std::string **)&v20[2 * v21 + 2];
LABEL_44:
                unsigned int v18 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v19, (uint64_t)a3);
                unint64_t v58 = (google::protobuf::internal *)v18;
                if (!v18) {
                  return 0;
                }
                if (*(void *)a3 <= (unint64_t)v18 || *v18 != 58) {
                  goto LABEL_2;
                }
              }
              int v22 = *((_DWORD *)this + 9);
              goto LABEL_38;
            case 8u:
              if (v10 != 66) {
                goto LABEL_81;
              }
              char v27 = (char *)TagFallback - 1;
              while (1)
              {
                int v28 = (google::protobuf::internal *)(v27 + 1);
                unint64_t v58 = (google::protobuf::internal *)(v27 + 1);
                unsigned int v29 = (int *)*((void *)this + 8);
                if (!v29) {
                  break;
                }
                uint64_t v30 = *((int *)this + 14);
                int v31 = *v29;
                if ((int)v30 >= *v29)
                {
                  if (v31 == *((_DWORD *)this + 15))
                  {
LABEL_55:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v31 + 1);
                    unsigned int v29 = (int *)*((void *)this + 8);
                    int v31 = *v29;
                  }
                  int *v29 = v31 + 1;
                  __n128 v32 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(*((google::protobuf::internal::ArenaImpl **)this + 6));
                  uint64_t v33 = *((void *)this + 8);
                  uint64_t v34 = *((int *)this + 14);
                  *((_DWORD *)this + 14) = v34 + 1;
                  *(void *)(v33 + 8 * v34 + 8) = v32;
                  int v28 = v58;
                  goto LABEL_57;
                }
                *((_DWORD *)this + 14) = v30 + 1;
                __n128 v32 = *(siri::dialogengine::PatternSchemaBinary::PatternComponent **)&v29[2 * v30 + 2];
LABEL_57:
                char v27 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(a3, v32, v28);
                unint64_t v58 = (google::protobuf::internal *)v27;
                if (!v27) {
                  return 0;
                }
                if (*(void *)a3 <= (unint64_t)v27 || *v27 != 66) {
                  goto LABEL_2;
                }
              }
              int v31 = *((_DWORD *)this + 15);
              goto LABEL_55;
            case 9u:
              if (v10 != 74) {
                goto LABEL_81;
              }
              unsigned int v35 = (char *)TagFallback - 1;
              break;
            case 0xAu:
              if (v10 != 82) {
                goto LABEL_81;
              }
              *((_DWORD *)this + 4) |= 0x10u;
              char v11 = (std::string *)*((void *)this + 16);
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                uint64_t v12 = (uint64_t)v57;
LABEL_77:
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v12, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
LABEL_78:
              unsigned int v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v11, (std::string::value_type *)TagFallback, (uint64_t)a3);
              goto LABEL_79;
            default:
LABEL_81:
              if (v10) {
                BOOL v43 = (v10 & 7) == 4;
              }
              else {
                BOOL v43 = 1;
              }
              if (v43)
              {
                *((_DWORD *)a3 + 20) = v10 - 1;
                return TagFallback;
              }
              unsigned int v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v10, v8, TagFallback, a3);
LABEL_79:
              unint64_t v58 = v14;
              if (v14) {
                continue;
              }
              return 0;
          }
          while (1)
          {
            unsigned int v36 = (google::protobuf::internal *)(v35 + 1);
            unint64_t v58 = (google::protobuf::internal *)(v35 + 1);
            unsigned int v37 = (int *)*((void *)this + 11);
            if (!v37) {
              break;
            }
            uint64_t v38 = *((int *)this + 20);
            int v39 = *v37;
            if ((int)v38 >= *v37)
            {
              if (v39 == *((_DWORD *)this + 21))
              {
LABEL_68:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v39 + 1);
                unsigned int v37 = (int *)*((void *)this + 11);
                int v39 = *v37;
              }
              *unsigned int v37 = v39 + 1;
              unint64_t v40 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(*((google::protobuf::internal::ArenaImpl **)this + 9));
              uint64_t v41 = *((void *)this + 11);
              uint64_t v42 = *((int *)this + 20);
              *((_DWORD *)this + 20) = v42 + 1;
              *(void *)(v41 + 8 * v42 + 8) = v40;
              unsigned int v36 = v58;
              goto LABEL_70;
            }
            *((_DWORD *)this + 20) = v38 + 1;
            unint64_t v40 = *(siri::dialogengine::PatternSchemaBinary::PatternComponent **)&v37[2 * v38 + 2];
LABEL_70:
            unsigned int v35 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(a3, v40, v36);
            unint64_t v58 = (google::protobuf::internal *)v35;
            if (!v35) {
              return 0;
            }
            if (*(void *)a3 <= (unint64_t)v35 || *v35 != 74) {
              goto LABEL_2;
            }
          }
          int v39 = *((_DWORD *)this + 21);
          goto LABEL_68;
        }
        TagFallbacint k = (google::protobuf::internal *)((char *)v58 + 2);
      }
      unint64_t v58 = TagFallback;
      goto LABEL_7;
    }
    return v58;
  }
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::PatternSchemaBinary::PatternComponent *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  char v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    uint64_t result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (char *)siri::dialogengine::PatternSchemaBinary::PatternComponent::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Group::GetCachedSize(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Group::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  int v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    uint64_t v4 = *((unsigned int *)this + 8);
  }
  else
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 8);
    do
    {
      uint64_t v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0) {
        uint64_t v6 = *(void *)(v5 + 8);
      }
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  uint64_t v7 = *((int *)this + 14);
  uint64_t v8 = v4 + v7;
  uint64_t v9 = *((void *)this + 8);
  if (v9) {
    int v10 = (siri::dialogengine::PatternSchemaBinary::PatternComponent **)(v9 + 8);
  }
  else {
    int v10 = 0;
  }
  if (v7)
  {
    uint64_t v11 = 8 * v7;
    do
    {
      int v12 = *v10++;
      uint64_t v13 = siri::dialogengine::PatternSchemaBinary::PatternComponent::ByteSizeLong(v12);
      v8 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6);
      v11 -= 8;
    }
    while (v11);
  }
  uint64_t v14 = *((int *)this + 20);
  uint64_t v15 = v8 + v14;
  uint64_t v16 = *((void *)this + 11);
  if (v16) {
    unsigned int v17 = (siri::dialogengine::PatternSchemaBinary::PatternComponent **)(v16 + 8);
  }
  else {
    unsigned int v17 = 0;
  }
  if (v14)
  {
    uint64_t v18 = 8 * v14;
    do
    {
      uint64_t v19 = *v17++;
      uint64_t v20 = siri::dialogengine::PatternSchemaBinary::PatternComponent::ByteSizeLong(v19);
      v15 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6);
      v18 -= 8;
    }
    while (v18);
  }
  int v21 = *((_DWORD *)this + 4);
  if ((v21 & 0x7F) == 0) {
    goto LABEL_29;
  }
  if (v21)
  {
    uint64_t v25 = *((void *)this + 12);
    uint64_t v26 = *(unsigned __int8 *)(v25 + 23);
    uint64_t v27 = *(void *)(v25 + 8);
    if ((v26 & 0x80u) == 0) {
      uint64_t v27 = v26;
    }
    v15 += v27 + ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v21 & 2) == 0)
    {
LABEL_23:
      if ((v21 & 4) == 0) {
        goto LABEL_24;
      }
      goto LABEL_37;
    }
  }
  else if ((v21 & 2) == 0)
  {
    goto LABEL_23;
  }
  uint64_t v28 = *((void *)this + 13);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 23);
  uint64_t v30 = *(void *)(v28 + 8);
  if ((v29 & 0x80u) == 0) {
    uint64_t v30 = v29;
  }
  v15 += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v21 & 4) == 0)
  {
LABEL_24:
    if ((v21 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_40;
  }
LABEL_37:
  uint64_t v31 = *((void *)this + 14);
  uint64_t v32 = *(unsigned __int8 *)(v31 + 23);
  uint64_t v33 = *(void *)(v31 + 8);
  if ((v32 & 0x80u) == 0) {
    uint64_t v33 = v32;
  }
  v15 += v33 + ((9 * (__clz(v33 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v21 & 8) == 0)
  {
LABEL_25:
    if ((v21 & 0x10) == 0) {
      goto LABEL_26;
    }
LABEL_43:
    uint64_t v37 = *((void *)this + 16);
    uint64_t v38 = *(unsigned __int8 *)(v37 + 23);
    uint64_t v39 = *(void *)(v37 + 8);
    if ((v38 & 0x80u) == 0) {
      uint64_t v39 = v38;
    }
    v15 += v39 + ((9 * (__clz(v39 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v21 & 0x20) == 0)
    {
LABEL_27:
      if ((v21 & 0x40) == 0) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    goto LABEL_46;
  }
LABEL_40:
  uint64_t v34 = *((void *)this + 15);
  uint64_t v35 = *(unsigned __int8 *)(v34 + 23);
  uint64_t v36 = *(void *)(v34 + 8);
  if ((v35 & 0x80u) == 0) {
    uint64_t v36 = v35;
  }
  v15 += v36 + ((9 * (__clz(v36 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v21 & 0x10) != 0) {
    goto LABEL_43;
  }
LABEL_26:
  if ((v21 & 0x20) == 0) {
    goto LABEL_27;
  }
LABEL_46:
  uint64_t v40 = siri::dialogengine::PatternSchemaBinary::Usage::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::Usage **)this
                                                                     + 17));
  v15 += v40 + ((9 * (__clz(v40 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v21 & 0x40) != 0)
  {
LABEL_28:
    uint64_t v22 = siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination **)this
                                                                                             + 18));
    v15 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_29:
  uint64_t v23 = *((void *)this + 1);
  if (v23)
  {
    unint64_t v41 = v23 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v41 + 23) < 0) {
      uint64_t v42 = *(void *)(v41 + 8);
    }
    else {
      uint64_t v42 = *(unsigned __int8 *)(v41 + 23);
    }
    v15 += v42;
  }
  *((_DWORD *)this + 5) = v15;
  return v15;
}

void siri::dialogengine::PatternSchemaBinary::Group::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::Group *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::Group::MergeFrom(this, lpsrc);
}

void siri::dialogengine::PatternSchemaBinary::Group::MergeFrom(siri::dialogengine::PatternSchemaBinary::Group *this, const siri::dialogengine::PatternSchemaBinary::Group *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 2006);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  int v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x7F) != 0)
  {
    if (v6)
    {
      uint64_t v7 = (std::string *)*((void *)this + 12);
      *((_DWORD *)this + 4) |= 1u;
      uint64_t v8 = (const std::string *)*((void *)a2 + 12);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 96, (uint64_t)v8);
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
    {
      uint64_t v9 = (std::string *)*((void *)this + 13);
      *((_DWORD *)this + 4) |= 2u;
      int v10 = (const std::string *)*((void *)a2 + 13);
      if (v9 != v10)
      {
        if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 104, (uint64_t)v10);
        }
        std::string::operator=(v9, v10);
      }
    }
    if ((v6 & 4) != 0)
    {
      uint64_t v11 = (std::string *)*((void *)this + 14);
      *((_DWORD *)this + 4) |= 4u;
      int v12 = (const std::string *)*((void *)a2 + 14);
      if (v11 != v12)
      {
        if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 112, (uint64_t)v12);
        }
        std::string::operator=(v11, v12);
      }
    }
    if ((v6 & 8) != 0)
    {
      uint64_t v13 = (std::string *)*((void *)this + 15);
      *((_DWORD *)this + 4) |= 8u;
      uint64_t v14 = (const std::string *)*((void *)a2 + 15);
      if (v13 != v14)
      {
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 120, (uint64_t)v14);
        }
        std::string::operator=(v13, v14);
      }
    }
    if ((v6 & 0x10) != 0)
    {
      uint64_t v15 = (std::string *)*((void *)this + 16);
      *((_DWORD *)this + 4) |= 0x10u;
      uint64_t v16 = (const std::string *)*((void *)a2 + 16);
      if (v15 != v16)
      {
        if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 128, (uint64_t)v16);
        }
        std::string::operator=(v15, v16);
      }
    }
    if ((v6 & 0x20) != 0)
    {
      *((_DWORD *)this + 4) |= 0x20u;
      unsigned int v17 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 17);
      if (!v17)
      {
        unsigned int v17 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
        *((void *)this + 17) = v17;
      }
      if (*((void *)a2 + 17)) {
        uint64_t v18 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)a2 + 17);
      }
      else {
        uint64_t v18 = (const siri::dialogengine::PatternSchemaBinary::Usage *)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
      }
      siri::dialogengine::PatternSchemaBinary::Usage::MergeFrom(v17, v18);
    }
    if ((v6 & 0x40) != 0)
    {
      *((_DWORD *)this + 4) |= 0x40u;
      uint64_t v19 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)*((void *)this + 18);
      if (!v19)
      {
        uint64_t v19 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination>(0);
        *((void *)this + 18) = v19;
      }
      if (*((void *)a2 + 18)) {
        uint64_t v20 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)*((void *)a2 + 18);
      }
      else {
        uint64_t v20 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombination_default_instance_;
      }
      siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::MergeFrom(v19, v20);
    }
  }
}

void sub_1C60E0DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    uint64_t v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      uint64_t v13 = (siri::dialogengine::PatternSchemaBinary::PatternComponent **)(v6 + 8);
      uint64_t v14 = (siri::dialogengine::PatternSchemaBinary::PatternComponent **)v7;
      do
      {
        uint64_t v16 = *v13++;
        uint64_t v15 = v16;
        unsigned int v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::PatternComponent>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      uint64_t v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      char v21 = (siri::dialogengine::PatternSchemaBinary::PatternComponent **)((char *)v8 + v20);
      uint64_t v22 = (siri::dialogengine::PatternSchemaBinary::PatternComponent **)(v20 + v6 + 8);
      do
      {
        uint64_t v23 = *v22++;
        uint64_t v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::PatternComponent>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    uint64_t v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_1C60E0F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::PatternComponent>::Merge(siri::dialogengine::PatternSchemaBinary::PatternComponent *a1, siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
}

uint64_t siri::dialogengine::PatternSchemaBinary::Group::IsInitialized(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::Group::Clear(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((uint64_t)this + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((uint64_t)this + 72);
  int v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x7F) == 0) {
    goto LABEL_36;
  }
  if (v2)
  {
    uint64_t v3 = *((void *)this + 12);
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_14;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_14;
      }
    }
LABEL_4:
    if ((v2 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_18:
    uint64_t v5 = *((void *)this + 14);
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      if ((v2 & 8) != 0) {
        goto LABEL_22;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
      if ((v2 & 8) != 0) {
        goto LABEL_22;
      }
    }
LABEL_6:
    if ((v2 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_26:
    uint64_t v7 = *((void *)this + 16);
    if (*(char *)(v7 + 23) < 0)
    {
      **(unsigned char **)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      if ((v2 & 0x20) != 0) {
        goto LABEL_30;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v7 = 0;
      *(unsigned char *)(v7 + 23) = 0;
      if ((v2 & 0x20) != 0) {
        goto LABEL_30;
      }
    }
LABEL_8:
    if ((v2 & 0x40) == 0) {
      goto LABEL_36;
    }
    goto LABEL_33;
  }
  if ((v2 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_14:
  uint64_t v4 = *((void *)this + 13);
  if (*(char *)(v4 + 23) < 0)
  {
    **(unsigned char **)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_18;
    }
  }
  else
  {
    *(unsigned char *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 23) = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_18;
    }
  }
LABEL_5:
  if ((v2 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_22:
  uint64_t v6 = *((void *)this + 15);
  if (*(char *)(v6 + 23) < 0)
  {
    **(unsigned char **)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_26;
    }
  }
  else
  {
    *(unsigned char *)uint64_t v6 = 0;
    *(unsigned char *)(v6 + 23) = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_26;
    }
  }
LABEL_7:
  if ((v2 & 0x20) == 0) {
    goto LABEL_8;
  }
LABEL_30:
  uint64_t v8 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 17);
  if (!v8)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 1699);
    uint64_t v9 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: usage_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    uint64_t v8 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((void *)this + 17);
  }
  siri::dialogengine::PatternSchemaBinary::Usage::Clear(v8);
  if ((v2 & 0x40) != 0)
  {
LABEL_33:
    uint64_t v10 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)*((void *)this + 18);
    if (!v10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 1703);
      int v11 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: visual_components_combination_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
      uint64_t v10 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)*((void *)this + 18);
    }
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::Clear(v10);
  }
LABEL_36:
  char v13 = *((unsigned char *)this + 8);
  uint64_t v12 = (siri::dialogengine::PatternSchemaBinary::Group *)((char *)this + 8);
  *((_DWORD *)v12 + 2) = 0;
  if (v13) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v12);
  }
}

void sub_1C60E1164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    uint64_t v3 = (siri::dialogengine::PatternSchemaBinary::PatternComponent **)(*(void *)(a1 + 16) + 8);
    do
    {
      uint64_t v4 = *v3++;
      siri::dialogengine::PatternSchemaBinary::PatternComponent::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1C60E121C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::Group *siri::dialogengine::PatternSchemaBinary::Group::New(siri::dialogengine::PatternSchemaBinary::Group *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Group>(a2);
}

siri::dialogengine::PatternSchemaBinary::Group *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Group>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::Group *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x98uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Group>);
  }
  siri::dialogengine::PatternSchemaBinary::Group::Group(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60E12CC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40D17434CCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Group>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

siri::dialogengine::PatternSchemaBinary::Group *siri::dialogengine::PatternSchemaBinary::Group::New(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Group>(0);
}

void *siri::dialogengine::PatternSchemaBinary::Group::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.Group");
}

void siri::dialogengine::PatternSchemaBinary::Group::~Group(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  siri::dialogengine::PatternSchemaBinary::Group::~Group(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(void *)this = &unk_1F2125080;
  int v2 = *((void *)this + 12);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 13);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  char v6 = *((void *)this + 14);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    MEMORY[0x1C8796D70](v6, 0x1012C40EC159624);
  }
  uint64_t v8 = *((void *)this + 15);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    MEMORY[0x1C8796D70](v8, 0x1012C40EC159624);
  }
  uint64_t v10 = *((void *)this + 16);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    MEMORY[0x1C8796D70](v10, 0x1012C40EC159624);
  }
  if (this != (siri::dialogengine::PatternSchemaBinary::Group *)&siri::dialogengine::PatternSchemaBinary::_Group_default_instance_)
  {
    int v11 = *((void *)this + 17);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v12 = *((void *)this + 18);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::Group *)((char *)this + 72));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::Group *)((char *)this + 48));
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Parameter_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::Parameter::Parameter((siri::dialogengine::PatternSchemaBinary::Parameter *)&siri::dialogengine::PatternSchemaBinary::_Parameter_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_Parameter_default_instance_, v4);
}

siri::dialogengine::PatternSchemaBinary::Parameter *siri::dialogengine::PatternSchemaBinary::Parameter::Parameter(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  *(void *)this = &unk_1F2124FF0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (atomic_load_explicit(scc_info_Parameter_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Parameter_PatternSchemaBinary_2eproto);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C60E1644(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::Parameter::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::Parameter *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = (unsigned __int8 *)a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 4), (char *)v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 5), (char *)v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_12:
  uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((const void ***)this + 6), (char *)v4);
  if ((v6 & 0x10) != 0) {
LABEL_6:
  }
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((const void ***)this + 7), (char *)v4);
LABEL_7:
  uint64_t v7 = *((void *)this + 1);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 23) < 0)
  {
    int v11 = *(void **)v9;
    uint64_t v10 = *(void *)(v9 + 8);
  }
  else
  {
    LODWORD(v10) = *(unsigned __int8 *)(v9 + 23);
    int v11 = (void *)v9;
  }
  if (*(void *)a3 - (void)v4 >= (int)v10)
  {
    uint64_t v12 = (int)v10;
    memcpy(v4, v11, (int)v10);
    v4 += v12;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v11, v10, v4);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::Parameter::_InternalParse(siri::dialogengine::PatternSchemaBinary::Parameter *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v17 = a2;
  uint64_t v5 = (char *)this + 56;
  int v6 = (char *)this + 48;
  uint64_t v7 = (char *)this + 40;
  uint64_t v8 = (char *)this + 32;
  unint64_t v9 = (char *)this + 24;
  uint64_t v10 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23))) {
      return v17;
    }
    TagFallbacint k = (google::protobuf::internal *)((char *)v17 + 1);
    LODWORD(v12) = *(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v12 = (const char *)(v12 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      unsigned int v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v12);
    unsigned int v17 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10) {
          goto LABEL_26;
        }
        *((_DWORD *)this + 4) |= 1u;
        char v13 = (std::string *)*((void *)this + 3);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_23;
      case 2u:
        if (v12 != 18) {
          goto LABEL_26;
        }
        *((_DWORD *)this + 4) |= 2u;
        char v13 = (std::string *)*((void *)this + 4);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_23;
      case 3u:
        if (v12 != 26) {
          goto LABEL_26;
        }
        *((_DWORD *)this + 4) |= 4u;
        char v13 = (std::string *)*((void *)this + 5);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_23;
      case 4u:
        if (v12 != 34) {
          goto LABEL_26;
        }
        *((_DWORD *)this + 4) |= 8u;
        char v13 = (std::string *)*((void *)this + 6);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_23;
      case 5u:
        if (v12 != 42) {
          goto LABEL_26;
        }
        *((_DWORD *)this + 4) |= 0x10u;
        char v13 = (std::string *)*((void *)this + 7);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
LABEL_23:
        char v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v13, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_24;
      default:
LABEL_26:
        if (v12) {
          BOOL v15 = (v12 & 7) == 4;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15)
        {
          *((_DWORD *)a3 + 20) = v12 - 1;
          return TagFallback;
        }
        char v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v12, v10, TagFallback, a3);
LABEL_24:
        unsigned int v17 = v14;
        if (v14) {
          continue;
        }
        TagFallbacint k = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t siri::dialogengine::PatternSchemaBinary::Parameter::GetCachedSize(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Parameter::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  int v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x1F) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_18;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    uint64_t v6 = *((void *)this + 4);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
  {
    uint64_t v14 = *((void *)this + 5);
    uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v16 = *(void *)(v14 + 8);
    if ((v15 & 0x80u) == 0) {
      uint64_t v16 = v15;
    }
    v2 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 8) == 0)
    {
LABEL_14:
      if ((v1 & 0x10) == 0) {
        goto LABEL_18;
      }
      goto LABEL_15;
    }
  }
  else if ((v1 & 8) == 0)
  {
    goto LABEL_14;
  }
  uint64_t v17 = *((void *)this + 6);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
  uint64_t v19 = *(void *)(v17 + 8);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = v18;
  }
  v2 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 0x10) != 0)
  {
LABEL_15:
    uint64_t v9 = *((void *)this + 7);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
    uint64_t v11 = *(void *)(v9 + 8);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = v10;
    }
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_18:
  uint64_t v12 = *((void *)this + 1);
  if (v12)
  {
    unint64_t v20 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v20 + 23) < 0) {
      uint64_t v21 = *(void *)(v20 + 8);
    }
    else {
      uint64_t v21 = *(unsigned __int8 *)(v20 + 23);
    }
    v2 += v21;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void siri::dialogengine::PatternSchemaBinary::Parameter::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::Parameter *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::Parameter::MergeFrom(this, lpsrc);
}

void siri::dialogengine::PatternSchemaBinary::Parameter::MergeFrom(siri::dialogengine::PatternSchemaBinary::Parameter *this, const siri::dialogengine::PatternSchemaBinary::Parameter *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 1484);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x1F) != 0)
  {
    if (v6)
    {
      uint64_t v7 = (std::string *)*((void *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      uint64_t v8 = (const std::string *)*((void *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, (uint64_t)v8);
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
    {
      uint64_t v9 = (std::string *)*((void *)this + 4);
      *((_DWORD *)this + 4) |= 2u;
      uint64_t v10 = (const std::string *)*((void *)a2 + 4);
      if (v9 != v10)
      {
        if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 32, (uint64_t)v10);
        }
        std::string::operator=(v9, v10);
      }
    }
    if ((v6 & 4) != 0)
    {
      uint64_t v11 = (std::string *)*((void *)this + 5);
      *((_DWORD *)this + 4) |= 4u;
      uint64_t v12 = (const std::string *)*((void *)a2 + 5);
      if (v11 != v12)
      {
        if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, (uint64_t)v12);
        }
        std::string::operator=(v11, v12);
      }
    }
    if ((v6 & 8) != 0)
    {
      char v13 = (std::string *)*((void *)this + 6);
      *((_DWORD *)this + 4) |= 8u;
      uint64_t v14 = (const std::string *)*((void *)a2 + 6);
      if (v13 != v14)
      {
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, (uint64_t)v14);
        }
        std::string::operator=(v13, v14);
      }
    }
    if ((v6 & 0x10) != 0)
    {
      uint64_t v17 = (std::string *)*((void *)this + 7);
      uint64_t v16 = (char *)this + 56;
      uint64_t v15 = v17;
      *((_DWORD *)v16 - 10) |= 0x10u;
      uint64_t v18 = (const std::string *)*((void *)a2 + 7);
      if (v17 != v18)
      {
        if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v16, (uint64_t)v18);
        }
        std::string::operator=(v15, v18);
      }
    }
  }
}

void sub_1C60E1E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Parameter::IsInitialized(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::Parameter::Clear(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  int v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x1F) == 0) {
    goto LABEL_27;
  }
  if (v1)
  {
    uint64_t v2 = *((void *)this + 3);
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_12;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_12;
      }
    }
LABEL_4:
    if ((v1 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_16:
    uint64_t v4 = *((void *)this + 5);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v1 & 8) != 0) {
        goto LABEL_20;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v1 & 8) != 0) {
        goto LABEL_20;
      }
    }
LABEL_6:
    if ((v1 & 0x10) == 0) {
      goto LABEL_27;
    }
LABEL_24:
    uint64_t v6 = *((void *)this + 7);
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
    goto LABEL_27;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_12:
  uint64_t v3 = *((void *)this + 4);
  if (*(char *)(v3 + 23) < 0)
  {
    **(unsigned char **)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_16;
    }
  }
  else
  {
    *(unsigned char *)uint64_t v3 = 0;
    *(unsigned char *)(v3 + 23) = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_16;
    }
  }
LABEL_5:
  if ((v1 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_20:
  uint64_t v5 = *((void *)this + 6);
  if (*(char *)(v5 + 23) < 0)
  {
    **(unsigned char **)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if ((v1 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  *(unsigned char *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 23) = 0;
  if ((v1 & 0x10) != 0) {
    goto LABEL_24;
  }
LABEL_27:
  char v8 = *((unsigned char *)this + 8);
  uint64_t v7 = (siri::dialogengine::PatternSchemaBinary::Parameter *)((char *)this + 8);
  *((_DWORD *)v7 + 2) = 0;
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v7);
  }
}

siri::dialogengine::PatternSchemaBinary::Parameter *siri::dialogengine::PatternSchemaBinary::Parameter::New(siri::dialogengine::PatternSchemaBinary::Parameter *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(a2);
}

siri::dialogengine::PatternSchemaBinary::Parameter *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::Parameter *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Parameter>);
  }
  siri::dialogengine::PatternSchemaBinary::Parameter::Parameter(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60E2020(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4030AC051BLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Parameter>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

siri::dialogengine::PatternSchemaBinary::Parameter *siri::dialogengine::PatternSchemaBinary::Parameter::New(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(0);
}

void *siri::dialogengine::PatternSchemaBinary::Parameter::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.Parameter");
}

void siri::dialogengine::PatternSchemaBinary::Parameter::~Parameter(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  siri::dialogengine::PatternSchemaBinary::Parameter::~Parameter(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;

  *(void *)this = &unk_1F2124FF0;
  uint64_t v2 = *((void *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  uint64_t v6 = *((void *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    MEMORY[0x1C8796D70](v6, 0x1012C40EC159624);
  }
  char v8 = *((void *)this + 6);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    MEMORY[0x1C8796D70](v8, 0x1012C40EC159624);
  }
  uint64_t v10 = *((void *)this + 7);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    MEMORY[0x1C8796D70](v10, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Setting_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::Setting::Setting((siri::dialogengine::PatternSchemaBinary::Setting *)&siri::dialogengine::PatternSchemaBinary::_Setting_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_Setting_default_instance_, v4);
}

siri::dialogengine::PatternSchemaBinary::Setting *siri::dialogengine::PatternSchemaBinary::Setting::Setting(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  *(void *)this = &unk_1F2124F60;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (atomic_load_explicit(scc_info_Setting_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Setting_PatternSchemaBinary_2eproto);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C60E231C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::Setting::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::Setting *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = (unsigned __int8 *)a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 4), (char *)v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 5), (char *)v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((const void ***)this + 6), (char *)v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((const void ***)this + 7), (char *)v4);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_16:
  uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((const void ***)this + 8), (char *)v4);
  if ((v6 & 0x40) != 0) {
LABEL_8:
  }
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((const void ***)this + 9), (char *)v4);
LABEL_9:
  uint64_t v7 = *((void *)this + 1);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 23) < 0)
  {
    uint64_t v11 = *(void **)v9;
    uint64_t v10 = *(void *)(v9 + 8);
  }
  else
  {
    LODWORD(v10) = *(unsigned __int8 *)(v9 + 23);
    uint64_t v11 = (void *)v9;
  }
  if (*(void *)a3 - (void)v4 >= (int)v10)
  {
    uint64_t v12 = (int)v10;
    memcpy(v4, v11, (int)v10);
    v4 += v12;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v11, v10, v4);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::Setting::_InternalParse(siri::dialogengine::PatternSchemaBinary::Setting *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  char v19 = (char *)this + 72;
  unint64_t v20 = a2;
  uint64_t v18 = (char *)this + 64;
  uint64_t v5 = (char *)this + 56;
  int v6 = (char *)this + 48;
  uint64_t v7 = (char *)this + 40;
  char v8 = (char *)this + 32;
  unint64_t v9 = (char *)this + 24;
  uint64_t v10 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v20, *((_DWORD *)a3 + 23))) {
      return v20;
    }
    TagFallbacint k = (google::protobuf::internal *)((char *)v20 + 1);
    LODWORD(v12) = *(unsigned __int8 *)v20;
    if ((*(char *)v20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v12 = (const char *)(v12 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v20 + 2);
LABEL_6:
      unint64_t v20 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v20, v12);
    unint64_t v20 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 4) |= 1u;
        char v13 = (std::string *)*((void *)this + 3);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_32;
      case 2u:
        if (v12 != 18) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 4) |= 2u;
        char v13 = (std::string *)*((void *)this + 4);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_32;
      case 3u:
        if (v12 != 26) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 4) |= 4u;
        char v13 = (std::string *)*((void *)this + 5);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_32;
      case 4u:
        if (v12 != 34) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 4) |= 8u;
        char v13 = (std::string *)*((void *)this + 6);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_32;
      case 5u:
        if (v12 != 42) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 4) |= 0x10u;
        char v13 = (std::string *)*((void *)this + 7);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_32;
      case 6u:
        if (v12 != 50) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 4) |= 0x20u;
        char v13 = (std::string *)*((void *)this + 8);
        if (v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_32;
        }
        uint64_t v14 = (uint64_t)v18;
        goto LABEL_31;
      case 7u:
        if (v12 != 58) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 4) |= 0x40u;
        char v13 = (std::string *)*((void *)this + 9);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          uint64_t v14 = (uint64_t)v19;
LABEL_31:
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v14, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
LABEL_32:
        uint64_t v15 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v13, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_33;
      default:
LABEL_35:
        if (v12) {
          BOOL v16 = (v12 & 7) == 4;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16)
        {
          *((_DWORD *)a3 + 20) = v12 - 1;
          return TagFallback;
        }
        uint64_t v15 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v12, v10, TagFallback, a3);
LABEL_33:
        unint64_t v20 = v15;
        if (v15) {
          continue;
        }
        TagFallbacint k = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t siri::dialogengine::PatternSchemaBinary::Setting::GetCachedSize(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Setting::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  int v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x7F) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_20;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    uint64_t v6 = *((void *)this + 4);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
  {
    uint64_t v14 = *((void *)this + 5);
    uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v16 = *(void *)(v14 + 8);
    if ((v15 & 0x80u) == 0) {
      uint64_t v16 = v15;
    }
    v2 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 8) == 0)
    {
LABEL_14:
      if ((v1 & 0x10) == 0) {
        goto LABEL_15;
      }
      goto LABEL_28;
    }
  }
  else if ((v1 & 8) == 0)
  {
    goto LABEL_14;
  }
  uint64_t v17 = *((void *)this + 6);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
  uint64_t v19 = *(void *)(v17 + 8);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = v18;
  }
  v2 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 0x10) == 0)
  {
LABEL_15:
    if ((v1 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }
LABEL_28:
  uint64_t v20 = *((void *)this + 7);
  uint64_t v21 = *(unsigned __int8 *)(v20 + 23);
  uint64_t v22 = *(void *)(v20 + 8);
  if ((v21 & 0x80u) == 0) {
    uint64_t v22 = v21;
  }
  v2 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 0x20) == 0)
  {
LABEL_16:
    if ((v1 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
LABEL_31:
  uint64_t v23 = *((void *)this + 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 23);
  uint64_t v25 = *(void *)(v23 + 8);
  if ((v24 & 0x80u) == 0) {
    uint64_t v25 = v24;
  }
  v2 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 0x40) != 0)
  {
LABEL_17:
    uint64_t v9 = *((void *)this + 9);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
    uint64_t v11 = *(void *)(v9 + 8);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = v10;
    }
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_20:
  uint64_t v12 = *((void *)this + 1);
  if (v12)
  {
    unint64_t v26 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v26 + 23) < 0) {
      uint64_t v27 = *(void *)(v26 + 8);
    }
    else {
      uint64_t v27 = *(unsigned __int8 *)(v26 + 23);
    }
    v2 += v27;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void siri::dialogengine::PatternSchemaBinary::Setting::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::Setting *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::Setting::MergeFrom(this, lpsrc);
}

void siri::dialogengine::PatternSchemaBinary::Setting::MergeFrom(siri::dialogengine::PatternSchemaBinary::Setting *this, const siri::dialogengine::PatternSchemaBinary::Setting *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 1123);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x7F) != 0)
  {
    if (v6)
    {
      uint64_t v7 = (std::string *)*((void *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      uint64_t v8 = (const std::string *)*((void *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, (uint64_t)v8);
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
    {
      uint64_t v9 = (std::string *)*((void *)this + 4);
      *((_DWORD *)this + 4) |= 2u;
      uint64_t v10 = (const std::string *)*((void *)a2 + 4);
      if (v9 != v10)
      {
        if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 32, (uint64_t)v10);
        }
        std::string::operator=(v9, v10);
      }
    }
    if ((v6 & 4) != 0)
    {
      uint64_t v11 = (std::string *)*((void *)this + 5);
      *((_DWORD *)this + 4) |= 4u;
      uint64_t v12 = (const std::string *)*((void *)a2 + 5);
      if (v11 != v12)
      {
        if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, (uint64_t)v12);
        }
        std::string::operator=(v11, v12);
      }
    }
    if ((v6 & 8) != 0)
    {
      char v13 = (std::string *)*((void *)this + 6);
      *((_DWORD *)this + 4) |= 8u;
      uint64_t v14 = (const std::string *)*((void *)a2 + 6);
      if (v13 != v14)
      {
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, (uint64_t)v14);
        }
        std::string::operator=(v13, v14);
      }
    }
    if ((v6 & 0x10) != 0)
    {
      uint64_t v15 = (std::string *)*((void *)this + 7);
      *((_DWORD *)this + 4) |= 0x10u;
      uint64_t v16 = (const std::string *)*((void *)a2 + 7);
      if (v15 != v16)
      {
        if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 56, (uint64_t)v16);
        }
        std::string::operator=(v15, v16);
      }
    }
    if ((v6 & 0x20) != 0)
    {
      uint64_t v17 = (std::string *)*((void *)this + 8);
      *((_DWORD *)this + 4) |= 0x20u;
      uint64_t v18 = (const std::string *)*((void *)a2 + 8);
      if (v17 != v18)
      {
        if (v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 64, (uint64_t)v18);
        }
        std::string::operator=(v17, v18);
      }
    }
    if ((v6 & 0x40) != 0)
    {
      uint64_t v21 = (std::string *)*((void *)this + 9);
      uint64_t v20 = (char *)this + 72;
      uint64_t v19 = v21;
      *((_DWORD *)v20 - 14) |= 0x40u;
      uint64_t v22 = (const std::string *)*((void *)a2 + 9);
      if (v21 != v22)
      {
        if (v19 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v20, (uint64_t)v22);
        }
        std::string::operator=(v19, v22);
      }
    }
  }
}

void sub_1C60E2D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Setting::IsInitialized(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::Setting::Clear(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  int v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x7F) == 0) {
    goto LABEL_37;
  }
  if (v1)
  {
    uint64_t v2 = *((void *)this + 3);
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_14;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_14;
      }
    }
LABEL_4:
    if ((v1 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_18:
    uint64_t v4 = *((void *)this + 5);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v1 & 8) != 0) {
        goto LABEL_22;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v1 & 8) != 0) {
        goto LABEL_22;
      }
    }
LABEL_6:
    if ((v1 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_26:
    uint64_t v6 = *((void *)this + 7);
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      if ((v1 & 0x20) != 0) {
        goto LABEL_30;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
      if ((v1 & 0x20) != 0) {
        goto LABEL_30;
      }
    }
LABEL_8:
    if ((v1 & 0x40) == 0) {
      goto LABEL_37;
    }
LABEL_34:
    uint64_t v8 = *((void *)this + 9);
    if (*(char *)(v8 + 23) < 0)
    {
      **(unsigned char **)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v8 = 0;
      *(unsigned char *)(v8 + 23) = 0;
    }
    goto LABEL_37;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_14:
  uint64_t v3 = *((void *)this + 4);
  if (*(char *)(v3 + 23) < 0)
  {
    **(unsigned char **)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_18;
    }
  }
  else
  {
    *(unsigned char *)uint64_t v3 = 0;
    *(unsigned char *)(v3 + 23) = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_18;
    }
  }
LABEL_5:
  if ((v1 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_22:
  uint64_t v5 = *((void *)this + 6);
  if (*(char *)(v5 + 23) < 0)
  {
    **(unsigned char **)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_26;
    }
  }
  else
  {
    *(unsigned char *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_26;
    }
  }
LABEL_7:
  if ((v1 & 0x20) == 0) {
    goto LABEL_8;
  }
LABEL_30:
  uint64_t v7 = *((void *)this + 8);
  if (*(char *)(v7 + 23) < 0)
  {
    **(unsigned char **)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    if ((v1 & 0x40) == 0) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  *(unsigned char *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 23) = 0;
  if ((v1 & 0x40) != 0) {
    goto LABEL_34;
  }
LABEL_37:
  char v10 = *((unsigned char *)this + 8);
  uint64_t v9 = (siri::dialogengine::PatternSchemaBinary::Setting *)((char *)this + 8);
  *((_DWORD *)v9 + 2) = 0;
  if (v10) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v9);
  }
}

siri::dialogengine::PatternSchemaBinary::Setting *siri::dialogengine::PatternSchemaBinary::Setting::New(siri::dialogengine::PatternSchemaBinary::Setting *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Setting>(a2);
}

siri::dialogengine::PatternSchemaBinary::Setting *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Setting>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::Setting *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Setting>);
  }
  siri::dialogengine::PatternSchemaBinary::Setting::Setting(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60E2F28(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C408DC193B1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Setting>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

siri::dialogengine::PatternSchemaBinary::Setting *siri::dialogengine::PatternSchemaBinary::Setting::New(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Setting>(0);
}

void *siri::dialogengine::PatternSchemaBinary::Setting::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.Setting");
}

void siri::dialogengine::PatternSchemaBinary::Setting::~Setting(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  siri::dialogengine::PatternSchemaBinary::Setting::~Setting(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(void *)this = &unk_1F2124F60;
  uint64_t v2 = *((void *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  uint64_t v6 = *((void *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    MEMORY[0x1C8796D70](v6, 0x1012C40EC159624);
  }
  uint64_t v8 = *((void *)this + 6);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    MEMORY[0x1C8796D70](v8, 0x1012C40EC159624);
  }
  char v10 = *((void *)this + 7);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    MEMORY[0x1C8796D70](v10, 0x1012C40EC159624);
  }
  uint64_t v11 = *((void *)this + 8);
  if ((uint64_t *)v11 != &google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    MEMORY[0x1C8796D70](v11, 0x1012C40EC159624);
  }
  uint64_t v12 = *((void *)this + 9);
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v12)
  {
    if (*(char *)(v12 + 23) < 0) {
      operator delete(*(void **)v12);
    }
    MEMORY[0x1C8796D70](v12, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_PatternSchema_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::PatternSchema::PatternSchema((siri::dialogengine::PatternSchemaBinary::PatternSchema *)&siri::dialogengine::PatternSchemaBinary::_PatternSchema_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_PatternSchema_default_instance_, v4);
}

siri::dialogengine::PatternSchemaBinary::PatternSchema *siri::dialogengine::PatternSchemaBinary::PatternSchema::PatternSchema(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  *(void *)this = &unk_1F2124ED0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  if (atomic_load_explicit(scc_info_PatternSchema_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_PatternSchema_PatternSchemaBinary_2eproto);
  }
  *((void *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C60E32B8(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 96));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 72));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 48));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::PatternSchema::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 15), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_71;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 16), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 17), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_72:
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((const void ***)this + 18), v4);
  if ((v6 & 0x10) != 0) {
LABEL_6:
  }
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((const void ***)this + 19), v4);
LABEL_7:
  int v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    int v8 = 0;
    while ((unint64_t)v4 < *(void *)a3)
    {
      if (v8 < 0) {
        goto LABEL_11;
      }
LABEL_12:
      if (*((_DWORD *)this + 8) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v58, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        char v10 = google::protobuf::internal::LogMessage::operator<<(v58, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v57, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v58[0].__r_.__value_.__l.__data_);
      }
      uint64_t v11 = *(siri::dialogengine::PatternSchemaBinary::Setting **)(*((void *)this + 5) + 8 * v8 + 8);
      char *v4 = 50;
      unsigned int v12 = *((_DWORD *)v11 + 5);
      if (v12 > 0x7F)
      {
        v4[1] = v12 | 0x80;
        unsigned int v14 = v12 >> 7;
        if (v12 >> 14)
        {
          uint64_t v15 = v4 + 2;
          do
          {
            uint64_t v16 = v15;
            *v15++ = v14 | 0x80;
            unsigned int v17 = v14 >> 7;
            unsigned int v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          char v13 = v16 + 2;
          *uint64_t v15 = v17;
        }
        else
        {
          v4[2] = v14;
          char v13 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v12;
        char v13 = v4 + 2;
      }
      uint64_t v4 = (char *)siri::dialogengine::PatternSchemaBinary::Setting::InternalSerializeWithCachedSizesToArray(v11, v13, a3);
      if (++v8 == v7) {
        goto LABEL_25;
      }
    }
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_11:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v58, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    uint64_t v9 = google::protobuf::internal::LogMessage::operator<<(v58, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v57, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v58[0].__r_.__value_.__l.__data_);
    goto LABEL_12;
  }
LABEL_25:
  int v19 = *((_DWORD *)this + 14);
  if (v19)
  {
    for (int i = 0; i != v19; ++i)
    {
      if ((unint64_t)v4 >= *(void *)a3) {
        uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      }
      uint64_t v21 = (siri::dialogengine::PatternSchemaBinary::Parameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((uint64_t)this + 48, i);
      char *v4 = 58;
      unsigned int v22 = *((_DWORD *)v21 + 5);
      if (v22 > 0x7F)
      {
        v4[1] = v22 | 0x80;
        unsigned int v24 = v22 >> 7;
        if (v22 >> 14)
        {
          uint64_t v25 = v4 + 2;
          do
          {
            unint64_t v26 = v25;
            *v25++ = v24 | 0x80;
            unsigned int v27 = v24 >> 7;
            unsigned int v28 = v24 >> 14;
            v24 >>= 7;
          }
          while (v28);
          char v23 = v26 + 2;
          *uint64_t v25 = v27;
        }
        else
        {
          v4[2] = v24;
          char v23 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v22;
        char v23 = v4 + 2;
      }
      uint64_t v4 = (char *)siri::dialogengine::PatternSchemaBinary::Parameter::InternalSerializeWithCachedSizesToArray(v21, v23, a3);
    }
  }
  int v29 = *((_DWORD *)this + 20);
  if (v29)
  {
    for (int j = 0; j != v29; ++j)
    {
      if ((unint64_t)v4 >= *(void *)a3) {
        uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      }
      uint64_t v31 = (siri::dialogengine::PatternSchemaBinary::Parameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((uint64_t)this + 72, j);
      char *v4 = 66;
      unsigned int v32 = *((_DWORD *)v31 + 5);
      if (v32 > 0x7F)
      {
        v4[1] = v32 | 0x80;
        unsigned int v34 = v32 >> 7;
        if (v32 >> 14)
        {
          uint64_t v35 = v4 + 2;
          do
          {
            uint64_t v36 = v35;
            *v35++ = v34 | 0x80;
            unsigned int v37 = v34 >> 7;
            unsigned int v38 = v34 >> 14;
            v34 >>= 7;
          }
          while (v38);
          uint64_t v33 = v36 + 2;
          unsigned char *v35 = v37;
        }
        else
        {
          v4[2] = v34;
          uint64_t v33 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v32;
        uint64_t v33 = v4 + 2;
      }
      uint64_t v4 = (char *)siri::dialogengine::PatternSchemaBinary::Parameter::InternalSerializeWithCachedSizesToArray(v31, v33, a3);
    }
  }
  int v39 = *((_DWORD *)this + 26);
  if (v39)
  {
    int v40 = 0;
    while ((unint64_t)v4 < *(void *)a3)
    {
      if (v40 < 0) {
        goto LABEL_53;
      }
LABEL_54:
      if (*((_DWORD *)this + 26) <= v40)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v58, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        uint64_t v42 = google::protobuf::internal::LogMessage::operator<<(v58, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v57, (const char **)&v42->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v58[0].__r_.__value_.__l.__data_);
      }
      BOOL v43 = *(siri::dialogengine::PatternSchemaBinary::Group **)(*((void *)this + 14) + 8 * v40 + 8);
      char *v4 = 74;
      unsigned int v44 = *((_DWORD *)v43 + 5);
      if (v44 > 0x7F)
      {
        v4[1] = v44 | 0x80;
        unsigned int v46 = v44 >> 7;
        if (v44 >> 14)
        {
          int v47 = v4 + 2;
          do
          {
            BOOL v48 = v47;
            *v47++ = v46 | 0x80;
            unsigned int v49 = v46 >> 7;
            unsigned int v50 = v46 >> 14;
            v46 >>= 7;
          }
          while (v50);
          unsigned int v45 = v48 + 2;
          unsigned char *v47 = v49;
        }
        else
        {
          v4[2] = v46;
          unsigned int v45 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v44;
        unsigned int v45 = v4 + 2;
      }
      uint64_t v4 = (char *)siri::dialogengine::PatternSchemaBinary::Group::InternalSerializeWithCachedSizesToArray(v43, v45, a3);
      if (++v40 == v39) {
        goto LABEL_67;
      }
    }
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    if ((v40 & 0x80000000) == 0) {
      goto LABEL_54;
    }
LABEL_53:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v58, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    unint64_t v41 = google::protobuf::internal::LogMessage::operator<<(v58, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v57, (const char **)&v41->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v58[0].__r_.__value_.__l.__data_);
    goto LABEL_54;
  }
LABEL_67:
  uint64_t v51 = *((void *)this + 1);
  if ((v51 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v53 = v51 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v53 + 23) < 0)
  {
    uint64_t v55 = *(void **)v53;
    uint64_t v54 = *(void *)(v53 + 8);
  }
  else
  {
    LODWORD(v54) = *(unsigned __int8 *)(v53 + 23);
    uint64_t v55 = (void *)v53;
  }
  if (*(void *)a3 - (void)v4 >= (int)v54)
  {
    uint64_t v56 = (int)v54;
    memcpy(v4, v55, (int)v54);
    v4 += v56;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v55, v54, (unsigned __int8 *)v4);
}

void sub_1C60E3894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1C60E3984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::PatternSchema::_InternalParse(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 96);
  int v6 = (unsigned int *)((char *)this + 72);
  char v7 = (unsigned int *)((char *)this + 48);
  int v8 = (unsigned int *)((char *)this + 24);
  uint64_t v70 = (char *)this + 144;
  uint64_t v71 = (char *)this + 152;
  uint64_t v68 = (char *)this + 128;
  long long v69 = (char *)this + 136;
  uint64_t v67 = (char *)this + 120;
  uint64_t v72 = (unint64_t *)((char *)this + 8);
  long long v73 = a2;
LABEL_2:
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v73, *((_DWORD *)a3 + 23))) {
      return v73;
    }
    TagFallbacint k = (google::protobuf::internal *)((char *)v73 + 1);
    LODWORD(v10) = *(unsigned __int8 *)v73;
    if ((*(char *)v73 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    char v10 = (const char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v73 + 2);
LABEL_6:
      long long v73 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v73, v10);
    long long v73 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_93;
        }
        *((_DWORD *)this + 4) |= 1u;
        uint64_t v11 = (std::string *)*((void *)this + 15);
        if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_26;
        }
        uint64_t v12 = (uint64_t)v67;
        goto LABEL_25;
      case 2u:
        if (v10 != 18) {
          goto LABEL_93;
        }
        *((_DWORD *)this + 4) |= 2u;
        uint64_t v11 = (std::string *)*((void *)this + 16);
        if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_26;
        }
        uint64_t v12 = (uint64_t)v68;
        goto LABEL_25;
      case 3u:
        if (v10 != 26) {
          goto LABEL_93;
        }
        *((_DWORD *)this + 4) |= 4u;
        uint64_t v11 = (std::string *)*((void *)this + 17);
        if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_26;
        }
        uint64_t v12 = (uint64_t)v69;
        goto LABEL_25;
      case 4u:
        if (v10 != 34) {
          goto LABEL_93;
        }
        *((_DWORD *)this + 4) |= 8u;
        uint64_t v11 = (std::string *)*((void *)this + 18);
        if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_26;
        }
        uint64_t v12 = (uint64_t)v70;
        goto LABEL_25;
      case 5u:
        if (v10 != 42) {
          goto LABEL_93;
        }
        *((_DWORD *)this + 4) |= 0x10u;
        uint64_t v11 = (std::string *)*((void *)this + 19);
        if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          uint64_t v12 = (uint64_t)v71;
LABEL_25:
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v12, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
LABEL_26:
        char v13 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v11, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_27;
      case 6u:
        if (v10 != 50) {
          goto LABEL_93;
        }
        unsigned int v14 = (google::protobuf::internal *)((char *)TagFallback - 1);
LABEL_31:
        uint64_t v15 = (google::protobuf::internal *)((char *)v14 + 1);
        long long v73 = v15;
        uint64_t v16 = (int *)*((void *)this + 5);
        if (!v16)
        {
          int v18 = *((_DWORD *)this + 9);
LABEL_36:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v18 + 1);
          uint64_t v16 = (int *)*((void *)this + 5);
          int v18 = *v16;
          goto LABEL_37;
        }
        uint64_t v17 = *((int *)this + 8);
        int v18 = *v16;
        if ((int)v17 < *v16)
        {
          *((_DWORD *)this + 8) = v17 + 1;
          int v19 = *(siri::dialogengine::PatternSchemaBinary::Setting **)&v16[2 * v17 + 2];
          goto LABEL_38;
        }
        if (v18 == *((_DWORD *)this + 9)) {
          goto LABEL_36;
        }
LABEL_37:
        *uint64_t v16 = v18 + 1;
        int v19 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Setting>(*((google::protobuf::internal::ArenaImpl **)this + 3));
        uint64_t v20 = *((void *)this + 5);
        uint64_t v21 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v21 + 1;
        *(void *)(v20 + 8 * v21 + 8) = v19;
        uint64_t v15 = v73;
LABEL_38:
        unsigned int v22 = *(unsigned __int8 *)v15;
        if (*(char *)v15 < 0)
        {
          SizeFallbacint k = google::protobuf::internal::ReadSizeFallback(v15, (const char *)*(unsigned __int8 *)v15);
          if (!SizeFallback) {
            goto LABEL_98;
          }
          char v23 = SizeFallback;
          unsigned int v22 = v25;
        }
        else
        {
          char v23 = (char *)v15 + 1;
        }
        int v26 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v23, v22);
        int v27 = *((_DWORD *)a3 + 22);
        BOOL v28 = __OFSUB__(v27--, 1);
        *((_DWORD *)a3 + 22) = v27;
        if (v27 < 0 == v28)
        {
          int v29 = v26;
          unsigned int v14 = siri::dialogengine::PatternSchemaBinary::Setting::_InternalParse(v19, (google::protobuf::internal *)v23, a3);
          if (v14)
          {
            ++*((_DWORD *)a3 + 22);
            if (!*((_DWORD *)a3 + 20))
            {
              int v30 = *((_DWORD *)a3 + 7) + v29;
              *((_DWORD *)a3 + 7) = v30;
              unint64_t v31 = *((void *)a3 + 1) + (v30 & (v30 >> 31));
              *(void *)a3 = v31;
              long long v73 = v14;
              if (v31 <= (unint64_t)v14 || *(unsigned char *)v14 != 50) {
                continue;
              }
              goto LABEL_31;
            }
          }
        }
        goto LABEL_98;
      case 7u:
        if (v10 != 58) {
          goto LABEL_93;
        }
        unsigned int v32 = (char *)TagFallback - 1;
        while (1)
        {
          uint64_t v33 = (google::protobuf::internal *)(v32 + 1);
          long long v73 = (google::protobuf::internal *)(v32 + 1);
          unsigned int v34 = (int *)*((void *)this + 8);
          if (!v34) {
            break;
          }
          uint64_t v35 = *((int *)this + 14);
          int v36 = *v34;
          if ((int)v35 >= *v34)
          {
            if (v36 == *((_DWORD *)this + 15))
            {
LABEL_55:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v36 + 1);
              unsigned int v34 = (int *)*((void *)this + 8);
              int v36 = *v34;
            }
            *unsigned int v34 = v36 + 1;
            unsigned int v37 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(*((google::protobuf::internal::ArenaImpl **)this + 6));
            uint64_t v38 = *((void *)this + 8);
            uint64_t v39 = *((int *)this + 14);
            *((_DWORD *)this + 14) = v39 + 1;
            *(void *)(v38 + 8 * v39 + 8) = v37;
            uint64_t v33 = v73;
            goto LABEL_57;
          }
          *((_DWORD *)this + 14) = v35 + 1;
          unsigned int v37 = *(siri::dialogengine::PatternSchemaBinary::Parameter **)&v34[2 * v35 + 2];
LABEL_57:
          unsigned int v32 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(a3, v37, v33);
          long long v73 = (google::protobuf::internal *)v32;
          if (!v32) {
            goto LABEL_98;
          }
          if (*(void *)a3 <= (unint64_t)v32 || *v32 != 58) {
            goto LABEL_2;
          }
        }
        int v36 = *((_DWORD *)this + 15);
        goto LABEL_55;
      case 8u:
        if (v10 != 66) {
          goto LABEL_93;
        }
        int v40 = (char *)TagFallback - 1;
        while (1)
        {
          unint64_t v41 = (google::protobuf::internal *)(v40 + 1);
          long long v73 = (google::protobuf::internal *)(v40 + 1);
          uint64_t v42 = (int *)*((void *)this + 11);
          if (!v42) {
            break;
          }
          uint64_t v43 = *((int *)this + 20);
          int v44 = *v42;
          if ((int)v43 >= *v42)
          {
            if (v44 == *((_DWORD *)this + 21))
            {
LABEL_68:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v44 + 1);
              uint64_t v42 = (int *)*((void *)this + 11);
              int v44 = *v42;
            }
            *uint64_t v42 = v44 + 1;
            unsigned int v45 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(*((google::protobuf::internal::ArenaImpl **)this + 9));
            uint64_t v46 = *((void *)this + 11);
            uint64_t v47 = *((int *)this + 20);
            *((_DWORD *)this + 20) = v47 + 1;
            *(void *)(v46 + 8 * v47 + 8) = v45;
            unint64_t v41 = v73;
            goto LABEL_70;
          }
          *((_DWORD *)this + 20) = v43 + 1;
          unsigned int v45 = *(siri::dialogengine::PatternSchemaBinary::Parameter **)&v42[2 * v43 + 2];
LABEL_70:
          int v40 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(a3, v45, v41);
          long long v73 = (google::protobuf::internal *)v40;
          if (!v40) {
            goto LABEL_98;
          }
          if (*(void *)a3 <= (unint64_t)v40 || *v40 != 66) {
            goto LABEL_2;
          }
        }
        int v44 = *((_DWORD *)this + 21);
        goto LABEL_68;
      case 9u:
        if (v10 != 74) {
          goto LABEL_93;
        }
        BOOL v48 = (google::protobuf::internal *)((char *)TagFallback - 1);
LABEL_76:
        unsigned int v49 = (google::protobuf::internal *)((char *)v48 + 1);
        long long v73 = v49;
        unsigned int v50 = (int *)*((void *)this + 14);
        if (!v50)
        {
          int v52 = *((_DWORD *)this + 27);
LABEL_81:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v52 + 1);
          unsigned int v50 = (int *)*((void *)this + 14);
          int v52 = *v50;
          goto LABEL_82;
        }
        uint64_t v51 = *((int *)this + 26);
        int v52 = *v50;
        if ((int)v51 < *v50)
        {
          *((_DWORD *)this + 26) = v51 + 1;
          unint64_t v53 = *(siri::dialogengine::PatternSchemaBinary::Group **)&v50[2 * v51 + 2];
          goto LABEL_83;
        }
        if (v52 == *((_DWORD *)this + 27)) {
          goto LABEL_81;
        }
LABEL_82:
        *unsigned int v50 = v52 + 1;
        unint64_t v53 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Group>(*((google::protobuf::internal::ArenaImpl **)this + 12));
        uint64_t v54 = *((void *)this + 14);
        uint64_t v55 = *((int *)this + 26);
        *((_DWORD *)this + 26) = v55 + 1;
        *(void *)(v54 + 8 * v55 + 8) = v53;
        unsigned int v49 = v73;
LABEL_83:
        unsigned int v56 = *(unsigned __int8 *)v49;
        if (*(char *)v49 < 0)
        {
          unint64_t v58 = google::protobuf::internal::ReadSizeFallback(v49, (const char *)*(unsigned __int8 *)v49);
          if (!v58) {
            goto LABEL_98;
          }
          char v57 = v58;
          unsigned int v56 = v59;
        }
        else
        {
          char v57 = (char *)v49 + 1;
        }
        int v60 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v57, v56);
        int v61 = *((_DWORD *)a3 + 22);
        BOOL v28 = __OFSUB__(v61--, 1);
        *((_DWORD *)a3 + 22) = v61;
        if (v61 < 0 == v28)
        {
          int v62 = v60;
          BOOL v48 = siri::dialogengine::PatternSchemaBinary::Group::_InternalParse(v53, (google::protobuf::internal *)v57, a3);
          if (v48)
          {
            ++*((_DWORD *)a3 + 22);
            if (!*((_DWORD *)a3 + 20))
            {
              int v63 = *((_DWORD *)a3 + 7) + v62;
              *((_DWORD *)a3 + 7) = v63;
              unint64_t v64 = *((void *)a3 + 1) + (v63 & (v63 >> 31));
              *(void *)a3 = v64;
              long long v73 = v48;
              if (v64 <= (unint64_t)v48 || *(unsigned char *)v48 != 74) {
                continue;
              }
              goto LABEL_76;
            }
          }
        }
LABEL_98:
        TagFallbacint k = 0;
        break;
      default:
LABEL_93:
        if (v10) {
          BOOL v65 = (v10 & 7) == 4;
        }
        else {
          BOOL v65 = 1;
        }
        if (v65)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        char v13 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v10, v72, TagFallback, a3);
LABEL_27:
        long long v73 = v13;
        if (!v13) {
          goto LABEL_98;
        }
        continue;
    }
    return TagFallback;
  }
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::PatternSchemaBinary::Parameter *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  char v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    uint64_t result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    int v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (char *)siri::dialogengine::PatternSchemaBinary::Parameter::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternSchema::GetCachedSize(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternSchema::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  uint64_t v2 = *((int *)this + 8);
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = (siri::dialogengine::PatternSchemaBinary::Setting **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      int v6 = *v4++;
      uint64_t v7 = siri::dialogengine::PatternSchemaBinary::Setting::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *((int *)this + 14);
  uint64_t v9 = v2 + v8;
  uint64_t v10 = *((void *)this + 8);
  if (v10) {
    int v11 = (siri::dialogengine::PatternSchemaBinary::Parameter **)(v10 + 8);
  }
  else {
    int v11 = 0;
  }
  if (v8)
  {
    uint64_t v12 = 8 * v8;
    do
    {
      BOOL v13 = *v11++;
      uint64_t v14 = siri::dialogengine::PatternSchemaBinary::Parameter::ByteSizeLong(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  uint64_t v15 = *((int *)this + 20);
  uint64_t v16 = v9 + v15;
  uint64_t v17 = *((void *)this + 11);
  if (v17) {
    int v18 = (siri::dialogengine::PatternSchemaBinary::Parameter **)(v17 + 8);
  }
  else {
    int v18 = 0;
  }
  if (v15)
  {
    uint64_t v19 = 8 * v15;
    do
    {
      uint64_t v20 = *v18++;
      uint64_t v21 = siri::dialogengine::PatternSchemaBinary::Parameter::ByteSizeLong(v20);
      v16 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
      v19 -= 8;
    }
    while (v19);
  }
  uint64_t v22 = *((int *)this + 26);
  uint64_t v23 = v16 + v22;
  uint64_t v24 = *((void *)this + 14);
  if (v24) {
    unsigned int v25 = (siri::dialogengine::PatternSchemaBinary::Group **)(v24 + 8);
  }
  else {
    unsigned int v25 = 0;
  }
  if (v22)
  {
    uint64_t v26 = 8 * v22;
    do
    {
      int v27 = *v25++;
      uint64_t v28 = siri::dialogengine::PatternSchemaBinary::Group::ByteSizeLong(v27);
      v23 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6);
      v26 -= 8;
    }
    while (v26);
  }
  int v29 = *((_DWORD *)this + 4);
  if ((v29 & 0x1F) == 0) {
    goto LABEL_36;
  }
  if (v29)
  {
    uint64_t v35 = *((void *)this + 15);
    uint64_t v36 = *(unsigned __int8 *)(v35 + 23);
    uint64_t v37 = *(void *)(v35 + 8);
    if ((v36 & 0x80u) == 0) {
      uint64_t v37 = v36;
    }
    v23 += v37 + ((9 * (__clz(v37 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v29 & 2) == 0)
    {
LABEL_30:
      if ((v29 & 4) == 0) {
        goto LABEL_31;
      }
LABEL_44:
      uint64_t v41 = *((void *)this + 17);
      uint64_t v42 = *(unsigned __int8 *)(v41 + 23);
      uint64_t v43 = *(void *)(v41 + 8);
      if ((v42 & 0x80u) == 0) {
        uint64_t v43 = v42;
      }
      v23 += v43 + ((9 * (__clz(v43 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v29 & 8) == 0)
      {
LABEL_32:
        if ((v29 & 0x10) == 0) {
          goto LABEL_36;
        }
        goto LABEL_33;
      }
      goto LABEL_47;
    }
  }
  else if ((v29 & 2) == 0)
  {
    goto LABEL_30;
  }
  uint64_t v38 = *((void *)this + 16);
  uint64_t v39 = *(unsigned __int8 *)(v38 + 23);
  uint64_t v40 = *(void *)(v38 + 8);
  if ((v39 & 0x80u) == 0) {
    uint64_t v40 = v39;
  }
  v23 += v40 + ((9 * (__clz(v40 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v29 & 4) != 0) {
    goto LABEL_44;
  }
LABEL_31:
  if ((v29 & 8) == 0) {
    goto LABEL_32;
  }
LABEL_47:
  uint64_t v44 = *((void *)this + 18);
  uint64_t v45 = *(unsigned __int8 *)(v44 + 23);
  uint64_t v46 = *(void *)(v44 + 8);
  if ((v45 & 0x80u) == 0) {
    uint64_t v46 = v45;
  }
  v23 += v46 + ((9 * (__clz(v46 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v29 & 0x10) != 0)
  {
LABEL_33:
    uint64_t v30 = *((void *)this + 19);
    uint64_t v31 = *(unsigned __int8 *)(v30 + 23);
    uint64_t v32 = *(void *)(v30 + 8);
    if ((v31 & 0x80u) == 0) {
      uint64_t v32 = v31;
    }
    v23 += v32 + ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_36:
  uint64_t v33 = *((void *)this + 1);
  if (v33)
  {
    unint64_t v47 = v33 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v47 + 23) < 0) {
      uint64_t v48 = *(void *)(v47 + 8);
    }
    else {
      uint64_t v48 = *(unsigned __int8 *)(v47 + 23);
    }
    v23 += v48;
  }
  *((_DWORD *)this + 5) = v23;
  return v23;
}

void siri::dialogengine::PatternSchemaBinary::PatternSchema::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::PatternSchema::MergeFrom(this, lpsrc);
}

void siri::dialogengine::PatternSchemaBinary::PatternSchema::MergeFrom(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, const siri::dialogengine::PatternSchemaBinary::PatternSchema *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 702);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Setting>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Group>::TypeHandler>((int **)this + 12, (uint64_t)a2 + 96);
  int v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x1F) != 0)
  {
    if (v6)
    {
      uint64_t v7 = (std::string *)*((void *)this + 15);
      *((_DWORD *)this + 4) |= 1u;
      uint64_t v8 = (const std::string *)*((void *)a2 + 15);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 120, (uint64_t)v8);
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
    {
      uint64_t v9 = (std::string *)*((void *)this + 16);
      *((_DWORD *)this + 4) |= 2u;
      uint64_t v10 = (const std::string *)*((void *)a2 + 16);
      if (v9 != v10)
      {
        if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 128, (uint64_t)v10);
        }
        std::string::operator=(v9, v10);
      }
    }
    if ((v6 & 4) != 0)
    {
      int v11 = (std::string *)*((void *)this + 17);
      *((_DWORD *)this + 4) |= 4u;
      uint64_t v12 = (const std::string *)*((void *)a2 + 17);
      if (v11 != v12)
      {
        if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 136, (uint64_t)v12);
        }
        std::string::operator=(v11, v12);
      }
    }
    if ((v6 & 8) != 0)
    {
      BOOL v13 = (std::string *)*((void *)this + 18);
      *((_DWORD *)this + 4) |= 8u;
      uint64_t v14 = (const std::string *)*((void *)a2 + 18);
      if (v13 != v14)
      {
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 144, (uint64_t)v14);
        }
        std::string::operator=(v13, v14);
      }
    }
    if ((v6 & 0x10) != 0)
    {
      uint64_t v17 = (std::string *)*((void *)this + 19);
      uint64_t v16 = (char *)this + 152;
      uint64_t v15 = v17;
      *((_DWORD *)v16 - 34) |= 0x10u;
      int v18 = (const std::string *)*((void *)a2 + 19);
      if (v17 != v18)
      {
        if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v16, (uint64_t)v18);
        }
        std::string::operator=(v15, v18);
      }
    }
  }
}

void sub_1C60E46CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Setting>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    uint64_t v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      BOOL v13 = (siri::dialogengine::PatternSchemaBinary::Setting **)(v6 + 8);
      uint64_t v14 = (siri::dialogengine::PatternSchemaBinary::Setting **)v7;
      do
      {
        uint64_t v16 = *v13++;
        uint64_t v15 = v16;
        uint64_t v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Setting>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      int v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      uint64_t v21 = (siri::dialogengine::PatternSchemaBinary::Setting **)((char *)v8 + v20);
      uint64_t v22 = (siri::dialogengine::PatternSchemaBinary::Setting **)(v20 + v6 + 8);
      do
      {
        uint64_t v23 = *v22++;
        uint64_t v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Setting>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Setting>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    uint64_t v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_1C60E483C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    uint64_t v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      BOOL v13 = (siri::dialogengine::PatternSchemaBinary::Parameter **)(v6 + 8);
      uint64_t v14 = (siri::dialogengine::PatternSchemaBinary::Parameter **)v7;
      do
      {
        uint64_t v16 = *v13++;
        uint64_t v15 = v16;
        uint64_t v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Parameter>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      int v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      uint64_t v21 = (siri::dialogengine::PatternSchemaBinary::Parameter **)((char *)v8 + v20);
      uint64_t v22 = (siri::dialogengine::PatternSchemaBinary::Parameter **)(v20 + v6 + 8);
      do
      {
        uint64_t v23 = *v22++;
        uint64_t v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Parameter>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    uint64_t v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_1C60E49AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Group>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    uint64_t v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      BOOL v13 = (siri::dialogengine::PatternSchemaBinary::Group **)(v6 + 8);
      uint64_t v14 = (siri::dialogengine::PatternSchemaBinary::Group **)v7;
      do
      {
        uint64_t v16 = *v13++;
        uint64_t v15 = v16;
        uint64_t v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Group>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      int v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      uint64_t v21 = (siri::dialogengine::PatternSchemaBinary::Group **)((char *)v8 + v20);
      uint64_t v22 = (siri::dialogengine::PatternSchemaBinary::Group **)(v20 + v6 + 8);
      do
      {
        uint64_t v23 = *v22++;
        uint64_t v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Group>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Group>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    uint64_t v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_1C60E4B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Group>::Merge(siri::dialogengine::PatternSchemaBinary::Group *a1, siri::dialogengine::PatternSchemaBinary::Group *this)
{
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Parameter>::Merge(siri::dialogengine::PatternSchemaBinary::Parameter *a1, siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Setting>::Merge(siri::dialogengine::PatternSchemaBinary::Setting *a1, siri::dialogengine::PatternSchemaBinary::Setting *this)
{
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternSchema::IsInitialized(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::PatternSchema::Clear(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  uint64_t v2 = *((unsigned int *)this + 8);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  else if (v2)
  {
    uint64_t v3 = (siri::dialogengine::PatternSchemaBinary::Setting **)(*((void *)this + 5) + 8);
    do
    {
      uint64_t v4 = *v3++;
      siri::dialogengine::PatternSchemaBinary::Setting::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 8) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((uint64_t)this + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((uint64_t)this + 72);
  uint64_t v6 = *((unsigned int *)this + 26);
  if ((v6 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    uint64_t v9 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  else if (v6)
  {
    uint64_t v7 = (siri::dialogengine::PatternSchemaBinary::Group **)(*((void *)this + 14) + 8);
    do
    {
      uint64_t v8 = *v7++;
      siri::dialogengine::PatternSchemaBinary::Group::Clear(v8);
      --v6;
    }
    while (v6);
    *((_DWORD *)this + 26) = 0;
  }
  int v10 = *((_DWORD *)this + 4);
  if ((v10 & 0x1F) != 0)
  {
    if ((v10 & 1) == 0)
    {
      if ((v10 & 2) == 0) {
        goto LABEL_16;
      }
LABEL_24:
      uint64_t v12 = *((void *)this + 16);
      if (*(char *)(v12 + 23) < 0)
      {
        **(unsigned char **)uint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        if ((v10 & 4) != 0) {
          goto LABEL_28;
        }
      }
      else
      {
        *(unsigned char *)uint64_t v12 = 0;
        *(unsigned char *)(v12 + 23) = 0;
        if ((v10 & 4) != 0) {
          goto LABEL_28;
        }
      }
LABEL_17:
      if ((v10 & 8) == 0) {
        goto LABEL_18;
      }
LABEL_32:
      uint64_t v14 = *((void *)this + 18);
      if (*(char *)(v14 + 23) < 0)
      {
        **(unsigned char **)uint64_t v14 = 0;
        *(void *)(v14 + 8) = 0;
        if ((v10 & 0x10) == 0) {
          goto LABEL_39;
        }
      }
      else
      {
        *(unsigned char *)uint64_t v14 = 0;
        *(unsigned char *)(v14 + 23) = 0;
        if ((v10 & 0x10) == 0) {
          goto LABEL_39;
        }
      }
      goto LABEL_36;
    }
    uint64_t v11 = *((void *)this + 15);
    if (*(char *)(v11 + 23) < 0)
    {
      **(unsigned char **)uint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      if ((v10 & 2) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v11 = 0;
      *(unsigned char *)(v11 + 23) = 0;
      if ((v10 & 2) != 0) {
        goto LABEL_24;
      }
    }
LABEL_16:
    if ((v10 & 4) == 0) {
      goto LABEL_17;
    }
LABEL_28:
    uint64_t v13 = *((void *)this + 17);
    if (*(char *)(v13 + 23) < 0)
    {
      **(unsigned char **)uint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      if ((v10 & 8) != 0) {
        goto LABEL_32;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v13 = 0;
      *(unsigned char *)(v13 + 23) = 0;
      if ((v10 & 8) != 0) {
        goto LABEL_32;
      }
    }
LABEL_18:
    if ((v10 & 0x10) == 0) {
      goto LABEL_39;
    }
LABEL_36:
    uint64_t v15 = *((void *)this + 19);
    if (*(char *)(v15 + 23) < 0)
    {
      **(unsigned char **)uint64_t v15 = 0;
      *(void *)(v15 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v15 = 0;
      *(unsigned char *)(v15 + 23) = 0;
    }
  }
LABEL_39:
  char v17 = *((unsigned char *)this + 8);
  uint64_t v16 = (siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 8);
  *((_DWORD *)v16 + 2) = 0;
  if (v17)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v16);
  }
}

void sub_1C60E4DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    uint64_t v3 = (siri::dialogengine::PatternSchemaBinary::Parameter **)(*(void *)(a1 + 16) + 8);
    do
    {
      uint64_t v4 = *v3++;
      siri::dialogengine::PatternSchemaBinary::Parameter::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1C60E4E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::PatternSchema *siri::dialogengine::PatternSchemaBinary::PatternSchema::New(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternSchema>(a2);
}

siri::dialogengine::PatternSchemaBinary::PatternSchema *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternSchema>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::PatternSchema *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0xA0uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::PatternSchema>);
  }
  siri::dialogengine::PatternSchemaBinary::PatternSchema::PatternSchema(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60E4F10(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C400DA44CAFLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::PatternSchema>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

siri::dialogengine::PatternSchemaBinary::PatternSchema *siri::dialogengine::PatternSchemaBinary::PatternSchema::New(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternSchema>(0);
}

void *siri::dialogengine::PatternSchemaBinary::PatternSchema::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.PatternSchema");
}

void siri::dialogengine::PatternSchemaBinary::PatternSchema::~PatternSchema(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  siri::dialogengine::PatternSchemaBinary::PatternSchema::~PatternSchema(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;

  *(void *)this = &unk_1F2124ED0;
  uint64_t v2 = *((void *)this + 15);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 16);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  char v6 = *((void *)this + 17);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    MEMORY[0x1C8796D70](v6, 0x1012C40EC159624);
  }
  uint64_t v8 = *((void *)this + 18);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    MEMORY[0x1C8796D70](v8, 0x1012C40EC159624);
  }
  int v10 = *((void *)this + 19);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    MEMORY[0x1C8796D70](v10, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 96));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 72));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 48));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

siri::dialogengine::PatternSchemaBinary::PatternSchema *siri::dialogengine::PatternSchemaBinary::PatternSchema::PatternSchema(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, const siri::dialogengine::PatternSchemaBinary::PatternSchema *a2)
{
  *(void *)this = &unk_1F2124ED0;
  *((void *)this + 1) = 0;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(void *)((char *)this + 28) = 0;
  *(void *)((char *)this + 36) = 0;
  *(void *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Setting>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Group>::TypeHandler>((int **)this + 12, (uint64_t)a2 + 96);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((void *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  int v6 = *((_DWORD *)a2 + 4);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)*((void *)a2 + 15);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 120, (uint64_t)v7);
    }
  }
  *((void *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    uint64_t v8 = (uint64_t *)*((void *)a2 + 16);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 128, (uint64_t)v8);
    }
  }
  *((void *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    uint64_t v9 = (uint64_t *)*((void *)a2 + 17);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 136, (uint64_t)v9);
    }
  }
  *((void *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    int v10 = (uint64_t *)*((void *)a2 + 18);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 144, (uint64_t)v10);
    }
  }
  *((void *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x10) != 0)
  {
    uint64_t v11 = (uint64_t *)*((void *)a2 + 19);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 152, (uint64_t)v11);
    }
  }
  return this;
}

void sub_1C60E52D4(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v5);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v4);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternSchema::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::PatternSchema::default_instance(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  if (atomic_load_explicit(scc_info_PatternSchema_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_PatternSchema_PatternSchemaBinary_2eproto);
  }
  return &siri::dialogengine::PatternSchemaBinary::_PatternSchema_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::PatternSchema::CopyFrom(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, const siri::dialogengine::PatternSchemaBinary::PatternSchema *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::PatternSchema::Clear(this);
    siri::dialogengine::PatternSchemaBinary::PatternSchema::MergeFrom(this, a2);
  }
}

__n128 siri::dialogengine::PatternSchemaBinary::PatternSchema::InternalSwap(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, siri::dialogengine::PatternSchemaBinary::PatternSchema *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v41;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_40;
    }
LABEL_5:
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v9;
      goto LABEL_8;
    }
LABEL_40:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 24), (siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 48), (siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)a2 + 48));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 72), (siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)a2 + 72));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 96), (siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)a2 + 96));
  uint64_t v14 = (uint64_t *)*((void *)this + 15);
  uint64_t v15 = (uint64_t **)((char *)a2 + 120);
  if (v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v15 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_14;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 15, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v14 = (uint64_t *)*((void *)this + 15);
  }
  uint64_t v16 = *v15;
  if (*v15 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 15, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v16 = *v15;
  }
  uint64_t v17 = v14[2];
  __n128 result = *(__n128 *)v14;
  uint64_t v18 = v16[2];
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v16;
  _OWORD v14[2] = v18;
  *(__n128 *)uint64_t v16 = result;
  std::string v16[2] = v17;
LABEL_14:
  int v19 = (uint64_t *)*((void *)this + 16);
  uint64_t v20 = (uint64_t **)((char *)a2 + 128);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_20;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 16, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v19 = (uint64_t *)*((void *)this + 16);
  }
  uint64_t v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 16, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v21 = *v20;
  }
  uint64_t v22 = v19[2];
  __n128 result = *(__n128 *)v19;
  uint64_t v23 = v21[2];
  *(_OWORD *)int v19 = *(_OWORD *)v21;
  std::string v19[2] = v23;
  *(__n128 *)uint64_t v21 = result;
  void v21[2] = v22;
LABEL_20:
  uint64_t v24 = (uint64_t *)*((void *)this + 17);
  int v25 = (uint64_t **)((char *)a2 + 136);
  if (v24 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v25 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_26;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 17, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v24 = (uint64_t *)*((void *)this + 17);
  }
  uint64_t v26 = *v25;
  if (*v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 17, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v26 = *v25;
  }
  uint64_t v27 = v24[2];
  __n128 result = *(__n128 *)v24;
  uint64_t v28 = v26[2];
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v26;
  std::string v24[2] = v28;
  *(__n128 *)uint64_t v26 = result;
  v26[2] = v27;
LABEL_26:
  int v29 = (uint64_t *)*((void *)this + 18);
  uint64_t v30 = (uint64_t **)((char *)a2 + 144);
  if (v29 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v30 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_32;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 18, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v29 = (uint64_t *)*((void *)this + 18);
  }
  uint64_t v31 = *v30;
  if (*v30 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 18, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v31 = *v30;
  }
  uint64_t v32 = v29[2];
  __n128 result = *(__n128 *)v29;
  uint64_t v33 = v31[2];
  *(_OWORD *)int v29 = *(_OWORD *)v31;
  std::string v29[2] = v33;
  *(__n128 *)uint64_t v31 = result;
  v31[2] = v32;
LABEL_32:
  uint64_t v36 = (uint64_t *)*((void *)this + 19);
  unsigned int v34 = (std::string **)((char *)this + 152);
  uint64_t v35 = (std::string *)v36;
  uint64_t v37 = (std::string **)((char *)a2 + 152);
  if (v36 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v37 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      return result;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v34, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v35 = *v34;
  }
  uint64_t v38 = *v37;
  if (*v37 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v37, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v38 = *v37;
  }
  std::string::size_type v39 = v35->__r_.__value_.__r.__words[2];
  __n128 result = *(__n128 *)&v35->__r_.__value_.__l.__data_;
  std::string::size_type v40 = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35->__r_.__value_.__l.__data_ = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v35->__r_.__value_.__r.__words[2] = v40;
  *(__n128 *)&v38->__r_.__value_.__l.__data_ = result;
  v38->__r_.__value_.__r.__words[2] = v39;
  return result;
}

siri::dialogengine::PatternSchemaBinary::Setting *siri::dialogengine::PatternSchemaBinary::Setting::Setting(siri::dialogengine::PatternSchemaBinary::Setting *this, const siri::dialogengine::PatternSchemaBinary::Setting *a2)
{
  *(void *)this = &unk_1F2124F60;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)*((void *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, (uint64_t)v6);
    }
  }
  *((void *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    unint64_t v7 = (uint64_t *)*((void *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 32, (uint64_t)v7);
    }
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 4) != 0)
  {
    unint64_t v8 = (uint64_t *)*((void *)a2 + 5);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, (uint64_t)v8);
    }
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 8) != 0)
  {
    uint64_t v9 = (uint64_t *)*((void *)a2 + 6);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, (uint64_t)v9);
    }
  }
  *((void *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x10) != 0)
  {
    long long v10 = (uint64_t *)*((void *)a2 + 7);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 56, (uint64_t)v10);
    }
  }
  *((void *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x20) != 0)
  {
    uint64_t v11 = (uint64_t *)*((void *)a2 + 8);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 64, (uint64_t)v11);
    }
  }
  *((void *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x40) != 0)
  {
    int v12 = (uint64_t *)*((void *)a2 + 9);
    if (v12 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 72, (uint64_t)v12);
    }
  }
  return this;
}

void sub_1C60E5898(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Setting::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::Setting::default_instance(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  if (atomic_load_explicit(scc_info_Setting_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Setting_PatternSchemaBinary_2eproto);
  }
  return &siri::dialogengine::PatternSchemaBinary::_Setting_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::Setting::CopyFrom(siri::dialogengine::PatternSchemaBinary::Setting *this, const siri::dialogengine::PatternSchemaBinary::Setting *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::Setting::Clear(this);
    siri::dialogengine::PatternSchemaBinary::Setting::MergeFrom(this, a2);
  }
}

__n128 siri::dialogengine::PatternSchemaBinary::Setting::InternalSwap(siri::dialogengine::PatternSchemaBinary::Setting *this, siri::dialogengine::PatternSchemaBinary::Setting *a2)
{
  int v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v50;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_52;
    }
LABEL_5:
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = (__n128 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      unint64_t v9 = v8[1].n128_u64[0];
      __n128 result = *v8;
      unint64_t v11 = *(void *)(v7 + 16);
      *unint64_t v8 = *(__n128 *)v7;
      v8[1].n128_u64[0] = v11;
      *(__n128 *)unint64_t v7 = result;
      *(void *)(v7 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v9;
      goto LABEL_8;
    }
LABEL_52:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  int v12 = (uint64_t *)*((void *)this + 3);
  int v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  uint64_t v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_14;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v12 = (uint64_t *)*((void *)this + 3);
  }
  uint64_t v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v15 = *v14;
  }
  uint64_t v16 = v12[2];
  __n128 result = *(__n128 *)v12;
  uint64_t v17 = v15[2];
  *(_OWORD *)int v12 = *(_OWORD *)v15;
  std::string v12[2] = v17;
  *(__n128 *)uint64_t v15 = result;
  std::string v15[2] = v16;
LABEL_14:
  uint64_t v18 = (uint64_t *)*((void *)this + 4);
  int v19 = (uint64_t **)((char *)a2 + 32);
  if (v18 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v19 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_20;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v18 = (uint64_t *)*((void *)this + 4);
  }
  uint64_t v20 = *v19;
  if (*v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v20 = *v19;
  }
  uint64_t v21 = v18[2];
  __n128 result = *(__n128 *)v18;
  uint64_t v22 = v20[2];
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v20;
  _DWORD v18[2] = v22;
  *(__n128 *)uint64_t v20 = result;
  std::string v20[2] = v21;
LABEL_20:
  uint64_t v23 = (uint64_t *)*((void *)this + 5);
  uint64_t v24 = (uint64_t **)((char *)a2 + 40);
  if (v23 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v24 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_26;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v23 = (uint64_t *)*((void *)this + 5);
  }
  int v25 = *v24;
  if (*v24 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v25 = *v24;
  }
  uint64_t v26 = v23[2];
  __n128 result = *(__n128 *)v23;
  uint64_t v27 = v25[2];
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v25;
  void v23[2] = v27;
  *(__n128 *)int v25 = result;
  std::string v25[2] = v26;
LABEL_26:
  uint64_t v28 = (uint64_t *)*((void *)this + 6);
  int v29 = (uint64_t **)((char *)a2 + 48);
  if (v28 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v29 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_32;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v28 = (uint64_t *)*((void *)this + 6);
  }
  uint64_t v30 = *v29;
  if (*v29 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v30 = *v29;
  }
  uint64_t v31 = v28[2];
  __n128 result = *(__n128 *)v28;
  uint64_t v32 = v30[2];
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v30;
  std::string v28[2] = v32;
  *(__n128 *)uint64_t v30 = result;
  std::string v30[2] = v31;
LABEL_32:
  uint64_t v33 = (uint64_t *)*((void *)this + 7);
  unsigned int v34 = (uint64_t **)((char *)a2 + 56);
  if (v33 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v34 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_38;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v33 = (uint64_t *)*((void *)this + 7);
  }
  uint64_t v35 = *v34;
  if (*v34 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v35 = *v34;
  }
  uint64_t v36 = v33[2];
  __n128 result = *(__n128 *)v33;
  uint64_t v37 = v35[2];
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v35;
  v33[2] = v37;
  *(__n128 *)uint64_t v35 = result;
  v35[2] = v36;
LABEL_38:
  uint64_t v38 = (uint64_t *)*((void *)this + 8);
  std::string::size_type v39 = (uint64_t **)((char *)a2 + 64);
  if (v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v39 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_44;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v38 = (uint64_t *)*((void *)this + 8);
  }
  std::string::size_type v40 = *v39;
  if (*v39 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    std::string::size_type v40 = *v39;
  }
  uint64_t v41 = v38[2];
  __n128 result = *(__n128 *)v38;
  uint64_t v42 = v40[2];
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v40;
  std::string v38[2] = v42;
  *(__n128 *)std::string::size_type v40 = result;
  v40[2] = v41;
LABEL_44:
  uint64_t v45 = (uint64_t *)*((void *)this + 9);
  uint64_t v43 = (std::string **)((char *)this + 72);
  uint64_t v44 = (std::string *)v45;
  uint64_t v46 = (std::string **)((char *)a2 + 72);
  if (v45 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v46 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      return result;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v43, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v44 = *v43;
  }
  unint64_t v47 = *v46;
  if (*v46 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v46, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    unint64_t v47 = *v46;
  }
  std::string::size_type v48 = v44->__r_.__value_.__r.__words[2];
  __n128 result = *(__n128 *)&v44->__r_.__value_.__l.__data_;
  std::string::size_type v49 = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v44->__r_.__value_.__r.__words[2] = v49;
  *(__n128 *)&v47->__r_.__value_.__l.__data_ = result;
  v47->__r_.__value_.__r.__words[2] = v48;
  return result;
}

siri::dialogengine::PatternSchemaBinary::Parameter *siri::dialogengine::PatternSchemaBinary::Parameter::Parameter(siri::dialogengine::PatternSchemaBinary::Parameter *this, const siri::dialogengine::PatternSchemaBinary::Parameter *a2)
{
  *(void *)this = &unk_1F2124FF0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)*((void *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, (uint64_t)v6);
    }
  }
  *((void *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    unint64_t v7 = (uint64_t *)*((void *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 32, (uint64_t)v7);
    }
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 4) != 0)
  {
    unint64_t v8 = (uint64_t *)*((void *)a2 + 5);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, (uint64_t)v8);
    }
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 8) != 0)
  {
    unint64_t v9 = (uint64_t *)*((void *)a2 + 6);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, (uint64_t)v9);
    }
  }
  *((void *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x10) != 0)
  {
    long long v10 = (uint64_t *)*((void *)a2 + 7);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 56, (uint64_t)v10);
    }
  }
  return this;
}

void sub_1C60E5E84(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Parameter::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::Parameter::default_instance(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  if (atomic_load_explicit(scc_info_Parameter_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Parameter_PatternSchemaBinary_2eproto);
  }
  return &siri::dialogengine::PatternSchemaBinary::_Parameter_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::Parameter::CopyFrom(siri::dialogengine::PatternSchemaBinary::Parameter *this, const siri::dialogengine::PatternSchemaBinary::Parameter *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::Parameter::Clear(this);
    siri::dialogengine::PatternSchemaBinary::Parameter::MergeFrom(this, a2);
  }
}

__n128 siri::dialogengine::PatternSchemaBinary::Parameter::InternalSwap(siri::dialogengine::PatternSchemaBinary::Parameter *this, siri::dialogengine::PatternSchemaBinary::Parameter *a2)
{
  int v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v40;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_40;
    }
LABEL_5:
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = (__n128 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      unint64_t v9 = v8[1].n128_u64[0];
      __n128 result = *v8;
      unint64_t v11 = *(void *)(v7 + 16);
      *unint64_t v8 = *(__n128 *)v7;
      v8[1].n128_u64[0] = v11;
      *(__n128 *)unint64_t v7 = result;
      *(void *)(v7 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v9;
      goto LABEL_8;
    }
LABEL_40:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  int v12 = (uint64_t *)*((void *)this + 3);
  int v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  uint64_t v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_14;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v12 = (uint64_t *)*((void *)this + 3);
  }
  uint64_t v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v15 = *v14;
  }
  uint64_t v16 = v12[2];
  __n128 result = *(__n128 *)v12;
  uint64_t v17 = v15[2];
  *(_OWORD *)int v12 = *(_OWORD *)v15;
  std::string v12[2] = v17;
  *(__n128 *)uint64_t v15 = result;
  std::string v15[2] = v16;
LABEL_14:
  uint64_t v18 = (uint64_t *)*((void *)this + 4);
  int v19 = (uint64_t **)((char *)a2 + 32);
  if (v18 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v19 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_20;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v18 = (uint64_t *)*((void *)this + 4);
  }
  uint64_t v20 = *v19;
  if (*v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v20 = *v19;
  }
  uint64_t v21 = v18[2];
  __n128 result = *(__n128 *)v18;
  uint64_t v22 = v20[2];
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v20;
  _DWORD v18[2] = v22;
  *(__n128 *)uint64_t v20 = result;
  std::string v20[2] = v21;
LABEL_20:
  uint64_t v23 = (uint64_t *)*((void *)this + 5);
  uint64_t v24 = (uint64_t **)((char *)a2 + 40);
  if (v23 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v24 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_26;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v23 = (uint64_t *)*((void *)this + 5);
  }
  int v25 = *v24;
  if (*v24 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v25 = *v24;
  }
  uint64_t v26 = v23[2];
  __n128 result = *(__n128 *)v23;
  uint64_t v27 = v25[2];
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v25;
  void v23[2] = v27;
  *(__n128 *)int v25 = result;
  std::string v25[2] = v26;
LABEL_26:
  uint64_t v28 = (uint64_t *)*((void *)this + 6);
  int v29 = (uint64_t **)((char *)a2 + 48);
  if (v28 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v29 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_32;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v28 = (uint64_t *)*((void *)this + 6);
  }
  uint64_t v30 = *v29;
  if (*v29 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v30 = *v29;
  }
  uint64_t v31 = v28[2];
  __n128 result = *(__n128 *)v28;
  uint64_t v32 = v30[2];
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v30;
  std::string v28[2] = v32;
  *(__n128 *)uint64_t v30 = result;
  std::string v30[2] = v31;
LABEL_32:
  uint64_t v35 = (uint64_t *)*((void *)this + 7);
  uint64_t v33 = (std::string **)((char *)this + 56);
  unsigned int v34 = (std::string *)v35;
  uint64_t v36 = (std::string **)((char *)a2 + 56);
  if (v35 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v36 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      return result;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v33, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    unsigned int v34 = *v33;
  }
  uint64_t v37 = *v36;
  if (*v36 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v36, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v37 = *v36;
  }
  std::string::size_type v38 = v34->__r_.__value_.__r.__words[2];
  __n128 result = *(__n128 *)&v34->__r_.__value_.__l.__data_;
  std::string::size_type v39 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34->__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v34->__r_.__value_.__r.__words[2] = v39;
  *(__n128 *)&v37->__r_.__value_.__l.__data_ = result;
  v37->__r_.__value_.__r.__words[2] = v38;
  return result;
}

void siri::dialogengine::PatternSchemaBinary::Group::InitAsDefaultInstance(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  qword_1EA3DB520 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
  unk_1EA3DB528 = &siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombination_default_instance_;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Group::_Internal::usage(siri::dialogengine::PatternSchemaBinary::Group::_Internal *this, const siri::dialogengine::PatternSchemaBinary::Group *a2)
{
  return *((void *)this + 17);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Group::_Internal::visual_components_combination(siri::dialogengine::PatternSchemaBinary::Group::_Internal *this, const siri::dialogengine::PatternSchemaBinary::Group *a2)
{
  return *((void *)this + 18);
}

siri::dialogengine::PatternSchemaBinary::Group *siri::dialogengine::PatternSchemaBinary::Group::Group(siri::dialogengine::PatternSchemaBinary::Group *this, const siri::dialogengine::PatternSchemaBinary::Group *a2)
{
  *(void *)this = &unk_1F2125080;
  *((void *)this + 1) = 0;
  unint64_t v4 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(void *)((char *)this + 28) = 0;
  *(void *)((char *)this + 36) = 0;
  *(void *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((void *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  int v6 = *((_DWORD *)a2 + 4);
  if (v6)
  {
    unint64_t v7 = (uint64_t *)*((void *)a2 + 12);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 96, (uint64_t)v7);
    }
  }
  *((void *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    unint64_t v8 = (uint64_t *)*((void *)a2 + 13);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 104, (uint64_t)v8);
    }
  }
  *((void *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    unint64_t v9 = (uint64_t *)*((void *)a2 + 14);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 112, (uint64_t)v9);
    }
  }
  *((void *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    long long v10 = (uint64_t *)*((void *)a2 + 15);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 120, (uint64_t)v10);
    }
  }
  *((void *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x10) != 0)
  {
    unint64_t v11 = (uint64_t *)*((void *)a2 + 16);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 128, (uint64_t)v11);
    }
  }
  if ((v6 & 0x20) != 0)
  {
    if (!*((void *)a2 + 17))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 4237);
      int v12 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: !value || usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
    operator new();
  }
  *((void *)this + 17) = 0;
  if ((v6 & 0x40) != 0)
  {
    if (!*((void *)a2 + 18))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 4510);
      int v13 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: !value || visual_components_combination_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
    operator new();
  }
  *((void *)this + 18) = 0;
  return this;
}

void sub_1C60E6504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v6);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::Usage *siri::dialogengine::PatternSchemaBinary::Usage::Usage(siri::dialogengine::PatternSchemaBinary::Usage *this, const siri::dialogengine::PatternSchemaBinary::Usage *a2)
{
  *(void *)this = &unk_1F21255B0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((_DWORD *)this + 8) = 0;
  int v5 = *((_DWORD *)a2 + 8);
  if (v5 == 1)
  {
    siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
    *((_DWORD *)this + 8) = 1;
    unint64_t v7 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap>(0);
    *((void *)this + 3) = v7;
    if (*((_DWORD *)a2 + 8) == 1) {
      unint64_t v8 = (const siri::dialogengine::PatternSchemaBinary::UsageMap *)*((void *)a2 + 3);
    }
    else {
      unint64_t v8 = (const siri::dialogengine::PatternSchemaBinary::UsageMap *)&siri::dialogengine::PatternSchemaBinary::_UsageMap_default_instance_;
    }
    siri::dialogengine::PatternSchemaBinary::UsageMap::MergeFrom(v7, v8);
  }
  else if (v5 == 2)
  {
    uint64_t v6 = *((void *)a2 + 3);
    siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
    *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
    *((_DWORD *)this + 8) = 2;
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v6);
  }
  return this;
}

void sub_1C60E6690(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::VisualComponentsCombination(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *a2)
{
  *(void *)this = &unk_1F21253F0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((_DWORD *)this + 8) = 0;
  int v5 = *((_DWORD *)a2 + 8);
  if (v5 == 1)
  {
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
    *((_DWORD *)this + 8) = 1;
    unint64_t v7 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(0);
    *((void *)this + 3) = v7;
    if (*((_DWORD *)a2 + 8) == 1) {
      unint64_t v8 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)*((void *)a2 + 3);
    }
    else {
      unint64_t v8 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombinationList_default_instance_;
    }
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(v7, v8);
  }
  else if (v5 == 2)
  {
    uint64_t v6 = *((void *)a2 + 3);
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
    *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
    *((_DWORD *)this + 8) = 2;
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v6);
  }
  return this;
}

void sub_1C60E6794(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Group::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::Group::default_instance(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  if (atomic_load_explicit(scc_info_Group_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Group_PatternSchemaBinary_2eproto);
  }
  return &siri::dialogengine::PatternSchemaBinary::_Group_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::Group::CopyFrom(siri::dialogengine::PatternSchemaBinary::Group *this, const siri::dialogengine::PatternSchemaBinary::Group *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::Group::Clear(this);
    siri::dialogengine::PatternSchemaBinary::Group::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::Group::InternalSwap(siri::dialogengine::PatternSchemaBinary::Group *this, siri::dialogengine::PatternSchemaBinary::Group *a2)
{
  int v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v45;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_40;
    }
LABEL_5:
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v9;
      goto LABEL_8;
    }
LABEL_40:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::Group *)((char *)this + 24), (siri::dialogengine::PatternSchemaBinary::Group *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::Group *)((char *)this + 48), (siri::dialogengine::PatternSchemaBinary::Group *)((char *)a2 + 48));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::Group *)((char *)this + 72), (siri::dialogengine::PatternSchemaBinary::Group *)((char *)a2 + 72));
  int v13 = (uint64_t *)*((void *)this + 12);
  uint64_t v14 = (uint64_t **)((char *)a2 + 96);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_14;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 12, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v13 = (uint64_t *)*((void *)this + 12);
  }
  char v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 12, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    char v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)int v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)char v15 = v17;
  std::string v15[2] = v16;
LABEL_14:
  int v19 = (uint64_t *)*((void *)this + 13);
  uint64_t v20 = (uint64_t **)((char *)a2 + 104);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_20;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 13, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v19 = (uint64_t *)*((void *)this + 13);
  }
  uint64_t v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 13, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v21 = *v20;
  }
  uint64_t v22 = v19[2];
  long long v23 = *(_OWORD *)v19;
  uint64_t v24 = v21[2];
  *(_OWORD *)int v19 = *(_OWORD *)v21;
  std::string v19[2] = v24;
  *(_OWORD *)uint64_t v21 = v23;
  void v21[2] = v22;
LABEL_20:
  int v25 = (uint64_t *)*((void *)this + 14);
  uint64_t v26 = (uint64_t **)((char *)a2 + 112);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_26;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 14, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v25 = (uint64_t *)*((void *)this + 14);
  }
  uint64_t v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 14, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v27 = *v26;
  }
  uint64_t v28 = v25[2];
  long long v29 = *(_OWORD *)v25;
  uint64_t v30 = v27[2];
  *(_OWORD *)int v25 = *(_OWORD *)v27;
  std::string v25[2] = v30;
  *(_OWORD *)uint64_t v27 = v29;
  _OWORD v27[2] = v28;
LABEL_26:
  uint64_t v31 = (uint64_t *)*((void *)this + 15);
  uint64_t v32 = (uint64_t **)((char *)a2 + 120);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_32;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 15, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v31 = (uint64_t *)*((void *)this + 15);
  }
  uint64_t v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 15, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v33 = *v32;
  }
  uint64_t v34 = v31[2];
  long long v35 = *(_OWORD *)v31;
  uint64_t v36 = v33[2];
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)uint64_t v33 = v35;
  v33[2] = v34;
LABEL_32:
  uint64_t v37 = (uint64_t *)*((void *)this + 16);
  std::string::size_type v38 = (uint64_t **)((char *)a2 + 128);
  if (v37 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v38 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_38;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 16, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v37 = (uint64_t *)*((void *)this + 16);
  }
  std::string::size_type v39 = *v38;
  if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 16, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    std::string::size_type v39 = *v38;
  }
  uint64_t v40 = v37[2];
  long long v41 = *(_OWORD *)v37;
  uint64_t v42 = v39[2];
  *(_OWORD *)uint64_t v37 = *(_OWORD *)v39;
  v37[2] = v42;
  *(_OWORD *)std::string::size_type v39 = v41;
  v39[2] = v40;
LABEL_38:
  uint64_t v43 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v43;
  uint64_t v44 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v44;
}

void siri::dialogengine::PatternSchemaBinary::PatternComponent::InitAsDefaultInstance(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  qword_1EA3DB580 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
  unk_1EA3DB588 = &siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
  qword_1EA3DB590 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternComponent::_Internal::full(siri::dialogengine::PatternSchemaBinary::PatternComponent::_Internal *this, const siri::dialogengine::PatternSchemaBinary::PatternComponent *a2)
{
  return *((void *)this + 10);
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternComponent::_Internal::supporting(siri::dialogengine::PatternSchemaBinary::PatternComponent::_Internal *this, const siri::dialogengine::PatternSchemaBinary::PatternComponent *a2)
{
  return *((void *)this + 11);
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternComponent::_Internal::usage(siri::dialogengine::PatternSchemaBinary::PatternComponent::_Internal *this, const siri::dialogengine::PatternSchemaBinary::PatternComponent *a2)
{
  return *((void *)this + 12);
}

siri::dialogengine::PatternSchemaBinary::PatternComponent *siri::dialogengine::PatternSchemaBinary::PatternComponent::PatternComponent(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, const siri::dialogengine::PatternSchemaBinary::PatternComponent *a2)
{
  *(void *)this = &unk_1F2125110;
  *((void *)this + 1) = 0;
  unint64_t v4 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(void *)((char *)this + 28) = 0;
  *(void *)((char *)this + 36) = 0;
  *(void *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  int v6 = *((_DWORD *)a2 + 4);
  if (v6)
  {
    unint64_t v7 = (uint64_t *)*((void *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, (uint64_t)v7);
    }
  }
  *((void *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    unint64_t v8 = (uint64_t *)*((void *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 56, (uint64_t)v8);
    }
  }
  *((void *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    uint64_t v9 = (uint64_t *)*((void *)a2 + 8);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 64, (uint64_t)v9);
    }
  }
  *((void *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    long long v10 = (uint64_t *)*((void *)a2 + 9);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 72, (uint64_t)v10);
    }
  }
  if ((v6 & 0x10) != 0)
  {
    if (!*((void *)a2 + 10))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 5081);
      uint64_t v11 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: !value || full_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
    operator new();
  }
  *((void *)this + 10) = 0;
  if ((v6 & 0x20) != 0)
  {
    if (!*((void *)a2 + 11))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 5141);
      int v12 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: !value || supporting_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
    operator new();
  }
  *((void *)this + 11) = 0;
  if ((v6 & 0x40) != 0)
  {
    if (!*((void *)a2 + 12))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 5275);
      int v13 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: !value || usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
    operator new();
  }
  *((void *)this + 12) = 0;
  return this;
}

void sub_1C60E6E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::ModeConfiguration *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ModeConfiguration(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *a2)
{
  *(void *)this = &unk_1F2125640;
  *((void *)this + 1) = 0;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(void *)((char *)this + 28) = 0;
  *(void *)((char *)this + 36) = 0;
  *(void *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Override>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((signed int **)this + 6, (uint64_t)a2 + 48);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (*((_DWORD *)a2 + 4))
  {
    if (!*((void *)a2 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 5944);
      int v6 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: !value || usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v6->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
    }
    operator new();
  }
  *((void *)this + 9) = 0;
  return this;
}

void sub_1C60E7050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternComponent::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::PatternComponent::default_instance(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  if (atomic_load_explicit(scc_info_PatternComponent_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_PatternComponent_PatternSchemaBinary_2eproto);
  }
  return &siri::dialogengine::PatternSchemaBinary::_PatternComponent_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::PatternComponent::CopyFrom(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, const siri::dialogengine::PatternSchemaBinary::PatternComponent *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::PatternComponent::Clear(this);
    siri::dialogengine::PatternSchemaBinary::PatternComponent::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::PatternComponent::InternalSwap(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, siri::dialogengine::PatternSchemaBinary::PatternComponent *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v40;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_34;
    }
LABEL_5:
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v9;
      goto LABEL_8;
    }
LABEL_34:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::PatternComponent *)((char *)this + 24), (siri::dialogengine::PatternSchemaBinary::PatternComponent *)((char *)a2 + 24));
  int v13 = (uint64_t *)*((void *)this + 6);
  uint64_t v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_14;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v13 = (uint64_t *)*((void *)this + 6);
  }
  char v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    char v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)int v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)char v15 = v17;
  std::string v15[2] = v16;
LABEL_14:
  int v19 = (uint64_t *)*((void *)this + 7);
  uint64_t v20 = (uint64_t **)((char *)a2 + 56);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_20;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v19 = (uint64_t *)*((void *)this + 7);
  }
  uint64_t v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v21 = *v20;
  }
  uint64_t v22 = v19[2];
  long long v23 = *(_OWORD *)v19;
  uint64_t v24 = v21[2];
  *(_OWORD *)int v19 = *(_OWORD *)v21;
  std::string v19[2] = v24;
  *(_OWORD *)uint64_t v21 = v23;
  void v21[2] = v22;
LABEL_20:
  int v25 = (uint64_t *)*((void *)this + 8);
  uint64_t v26 = (uint64_t **)((char *)a2 + 64);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_26;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v25 = (uint64_t *)*((void *)this + 8);
  }
  uint64_t v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v27 = *v26;
  }
  uint64_t v28 = v25[2];
  long long v29 = *(_OWORD *)v25;
  uint64_t v30 = v27[2];
  *(_OWORD *)int v25 = *(_OWORD *)v27;
  std::string v25[2] = v30;
  *(_OWORD *)uint64_t v27 = v29;
  _OWORD v27[2] = v28;
LABEL_26:
  uint64_t v31 = (uint64_t *)*((void *)this + 9);
  uint64_t v32 = (uint64_t **)((char *)a2 + 72);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_32;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v31 = (uint64_t *)*((void *)this + 9);
  }
  uint64_t v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v33 = *v32;
  }
  uint64_t v34 = v31[2];
  long long v35 = *(_OWORD *)v31;
  uint64_t v36 = v33[2];
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)uint64_t v33 = v35;
  v33[2] = v34;
LABEL_32:
  uint64_t v37 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v37;
  uint64_t v38 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v38;
  uint64_t v39 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v39;
}

uint64_t siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse::MapValue_ValueEntry_DoNotUse(uint64_t this)
{
  *(void *)(this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)this = &unk_1F21251A0;
  return this;
}

{
  *(void *)(this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)this = &unk_1F21251A0;
  return this;
}

siri::dialogengine::PatternSchemaBinary::MapValue *siri::dialogengine::PatternSchemaBinary::MapValue::MapValue(siri::dialogengine::PatternSchemaBinary::MapValue *this, const siri::dialogengine::PatternSchemaBinary::MapValue *a2)
{
  *((void *)this + 1) = 0;
  unint64_t v4 = (unint64_t *)((char *)this + 8);
  *(void *)this = &unk_1F2125240;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  uint64_t v5 = (uint64_t *)((char *)this + 24);
  *(void *)((char *)this + 20) = 0;
  *(void *)((char *)this + 28) = 0;
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::Init((uint64_t *)this + 3);
  *((_DWORD *)this + 8) = 0;
  uint64_t v6 = *((void *)a2 + 1);
  if (v6) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom(v5, (uint64_t)a2 + 24);
  return this;
}

void sub_1C60E7550(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::MapValue::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::MapValue::default_instance(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  if (atomic_load_explicit(scc_info_ListValue_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ListValue_PatternSchemaBinary_2eproto);
  }
  return &siri::dialogengine::PatternSchemaBinary::_MapValue_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::MapValue::CopyFrom(siri::dialogengine::PatternSchemaBinary::MapValue *this, const siri::dialogengine::PatternSchemaBinary::MapValue *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::MapValue::Clear(this);
    siri::dialogengine::PatternSchemaBinary::MapValue::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::MapValue::InternalSwap(siri::dialogengine::PatternSchemaBinary::MapValue *this, siri::dialogengine::PatternSchemaBinary::MapValue *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v17;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
LABEL_5:
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v9;
      goto LABEL_8;
    }
LABEL_13:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  uint64_t v12 = *((void *)this + 3);
  int v13 = *((_DWORD *)this + 4);
  uint64_t v14 = *((void *)a2 + 3);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  if (v12 == v14)
  {
    int v15 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v15;
    uint64_t v16 = *((void *)this + 5);
    *((void *)this + 5) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v16;
  }
  else
  {
    uint64_t v18 = 0;
    int v19 = *((_DWORD *)this + 8);
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::Init((uint64_t *)&v18);
    *((void *)&v22 + 1) = *((void *)this + 5);
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(&v22, *(void *)(*((void *)&v22 + 1) + 24));
    long long v20 = v22;
    uint64_t v21 = v23;
    uint64_t v23 = 0;
    long long v22 = 0uLL;
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::insert<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::const_iterator>(&v18, &v20, &v22);
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator=((unsigned __int8 **)this + 3, (unsigned __int8 **)a2 + 3);
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator=((unsigned __int8 **)a2 + 3, &v18);
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::~Map(&v18);
  }
}

void sub_1C60E77B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::~Map((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 **google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator=(unsigned __int8 **a1, unsigned __int8 **a2)
{
  if (a1 != a2)
  {
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::clear(a1);
    *((void *)&v8 + 1) = a2[2];
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(&v8, *(void *)(*((void *)&v8 + 1) + 24));
    long long v6 = v8;
    uint64_t v7 = v9;
    memset(v5, 0, sizeof(v5));
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::insert<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::const_iterator>(a1, &v6, v5);
  }
  return a1;
}

unsigned __int8 **google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::insert<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::const_iterator>(unsigned __int8 **result, long long *a2, void *a3)
{
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  uint64_t v3 = v10;
  if ((void)v10 != *a3)
  {
    uint64_t v5 = (uint64_t *)result;
    do
    {
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v12, v5[2], *(unsigned __int8 **)(v3 + 24), 0);
      if (!v12[0])
      {
        uint64_t v6 = *(void *)(v10 + 24);
        uint64_t v7 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(v6 + 24);
        long long v8 = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator[](v5, v6);
        if (v7 != (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v8)
        {
          uint64_t v9 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v8;
          siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::Clear((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v8);
          siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(v9, v7);
        }
      }
      __n128 result = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair const>::operator++((unsigned __int8 **)&v10);
      uint64_t v3 = v10;
    }
    while ((void)v10 != *a3);
  }
  return result;
}

uint64_t siri::dialogengine::PatternSchemaBinary::ListValue::_Internal::map_value(siri::dialogengine::PatternSchemaBinary::ListValue::_Internal *this, const siri::dialogengine::PatternSchemaBinary::ListValue *a2)
{
  return *((void *)this + 3);
}

uint64_t siri::dialogengine::PatternSchemaBinary::ListValue::set_allocated_map_value(siri::dialogengine::PatternSchemaBinary::ListValue *this, siri::dialogengine::PatternSchemaBinary::MapValue *a2)
{
  uint64_t result = siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 8) = 2;
    *((void *)this + 3) = a2;
  }
  return result;
}

siri::dialogengine::PatternSchemaBinary::ListValue *siri::dialogengine::PatternSchemaBinary::ListValue::ListValue(siri::dialogengine::PatternSchemaBinary::ListValue *this, const siri::dialogengine::PatternSchemaBinary::ListValue *a2)
{
  *(void *)this = &unk_1F21252D0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((_DWORD *)this + 8) = 0;
  int v5 = *((_DWORD *)a2 + 8);
  if (v5 == 1)
  {
    uint64_t v8 = *((void *)a2 + 3);
    siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
    *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
    *((_DWORD *)this + 8) = 1;
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (v5 == 2)
  {
    siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
    *((_DWORD *)this + 8) = 2;
    uint64_t v6 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue>(0);
    *((void *)this + 3) = v6;
    if (*((_DWORD *)a2 + 8) == 2) {
      uint64_t v7 = (const siri::dialogengine::PatternSchemaBinary::MapValue *)*((void *)a2 + 3);
    }
    else {
      uint64_t v7 = (const siri::dialogengine::PatternSchemaBinary::MapValue *)&siri::dialogengine::PatternSchemaBinary::_MapValue_default_instance_;
    }
    siri::dialogengine::PatternSchemaBinary::MapValue::MergeFrom(v6, v7);
  }
  return this;
}

void sub_1C60E7A34(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::ListValue::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::ListValue::default_instance(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  if (atomic_load_explicit(scc_info_ListValue_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ListValue_PatternSchemaBinary_2eproto);
  }
  return &siri::dialogengine::PatternSchemaBinary::_ListValue_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::ListValue::CopyFrom(siri::dialogengine::PatternSchemaBinary::ListValue *this, const siri::dialogengine::PatternSchemaBinary::ListValue *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::ListValue::Clear(this);
    siri::dialogengine::PatternSchemaBinary::ListValue::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::ListValue::InternalSwap(siri::dialogengine::PatternSchemaBinary::ListValue *this, siri::dialogengine::PatternSchemaBinary::ListValue *a2)
{
  int v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v14;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  uint64_t v9 = *(void *)(v8 + 16);
  long long v10 = *(_OWORD *)v8;
  uint64_t v11 = *(void *)(v7 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
  *(void *)(v8 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v11;
  *(_OWORD *)unint64_t v7 = v10;
  *(void *)(v7 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v9;
LABEL_8:
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  LODWORD(v13) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v13;
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::VisualComponentsCombinationList(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a2)
{
  *(void *)this = &unk_1F2125360;
  *((void *)this + 1) = 0;
  unint64_t v4 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(void *)((char *)this + 28) = 0;
  *(void *)((char *)this + 36) = 0;
  *(void *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::ListValue>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

void sub_1C60E7C40(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::default_instance(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  if (atomic_load_explicit(scc_info_ListValue_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ListValue_PatternSchemaBinary_2eproto);
  }
  return &siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombinationList_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::CopyFrom(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::Clear(this);
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(this, a2);
  }
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::_Internal::list(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::_Internal *this, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *a2)
{
  return *((void *)this + 3);
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::set_allocated_list(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a2)
{
  uint64_t result = siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 8) = 1;
    *((void *)this + 3) = a2;
  }
  return result;
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::default_instance(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  if (atomic_load_explicit(scc_info_VisualComponentsCombination_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_VisualComponentsCombination_PatternSchemaBinary_2eproto);
  }
  return &siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombination_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::CopyFrom(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::Clear(this);
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::InternalSwap(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v14;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  uint64_t v9 = *(void *)(v8 + 16);
  long long v10 = *(_OWORD *)v8;
  uint64_t v11 = *(void *)(v7 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
  *(void *)(v8 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v11;
  *(_OWORD *)unint64_t v7 = v10;
  *(void *)(v7 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v9;
LABEL_8:
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  LODWORD(v13) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v13;
}

uint64_t siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse::UsageMap_ValueEntry_DoNotUse(uint64_t this)
{
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(this + 32) = 0;
  *(void *)this = &unk_1F2125480;
  return this;
}

{
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(this + 32) = 0;
  *(void *)this = &unk_1F2125480;
  return this;
}

siri::dialogengine::PatternSchemaBinary::UsageMap *siri::dialogengine::PatternSchemaBinary::UsageMap::UsageMap(siri::dialogengine::PatternSchemaBinary::UsageMap *this, const siri::dialogengine::PatternSchemaBinary::UsageMap *a2)
{
  *((void *)this + 1) = 0;
  unint64_t v4 = (unint64_t *)((char *)this + 8);
  *(void *)this = &unk_1F2125520;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  uint64_t v5 = (uint64_t *)((char *)this + 24);
  *(void *)((char *)this + 20) = 0;
  *(void *)((char *)this + 28) = 0;
  google::protobuf::Map<std::string,std::string>::Init((uint64_t *)this + 3);
  *((_DWORD *)this + 8) = 0;
  uint64_t v6 = *((void *)a2 + 1);
  if (v6) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom(v5, *((void *)a2 + 5));
  return this;
}

void sub_1C60E8000(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::UsageMap::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::UsageMap::default_instance(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  if (atomic_load_explicit(scc_info_UsageMap_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_UsageMap_PatternSchemaBinary_2eproto);
  }
  return &siri::dialogengine::PatternSchemaBinary::_UsageMap_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::UsageMap::CopyFrom(siri::dialogengine::PatternSchemaBinary::UsageMap *this, const siri::dialogengine::PatternSchemaBinary::UsageMap *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::UsageMap::Clear(this);
    siri::dialogengine::PatternSchemaBinary::UsageMap::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::UsageMap::InternalSwap(siri::dialogengine::PatternSchemaBinary::UsageMap *this, siri::dialogengine::PatternSchemaBinary::UsageMap *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v17;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
LABEL_5:
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v9;
      goto LABEL_8;
    }
LABEL_13:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  uint64_t v12 = *((void *)this + 3);
  int v13 = *((_DWORD *)this + 4);
  uint64_t v14 = *((void *)a2 + 3);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  if (v12 == v14)
  {
    int v15 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v15;
    uint64_t v16 = *((void *)this + 5);
    *((void *)this + 5) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v16;
  }
  else
  {
    uint64_t v18 = 0;
    int v19 = *((_DWORD *)this + 8);
    google::protobuf::Map<std::string,std::string>::Init((uint64_t *)&v18);
    *((void *)&v22 + 1) = *((void *)this + 5);
    google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&v22, *(void *)(*((void *)&v22 + 1) + 24));
    long long v20 = v22;
    uint64_t v21 = v23;
    uint64_t v23 = 0;
    long long v22 = 0uLL;
    google::protobuf::Map<std::string,std::string>::insert<google::protobuf::Map<std::string,std::string>::const_iterator>(&v18, &v20, &v22);
    google::protobuf::Map<std::string,std::string>::operator=((unsigned __int8 **)this + 3, (unsigned __int8 **)a2 + 3);
    google::protobuf::Map<std::string,std::string>::operator=((unsigned __int8 **)a2 + 3, &v18);
    google::protobuf::Map<std::string,std::string>::~Map(&v18);
  }
}

void sub_1C60E8264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::protobuf::Map<std::string,std::string>::~Map((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 **google::protobuf::Map<std::string,std::string>::operator=(unsigned __int8 **a1, unsigned __int8 **a2)
{
  if (a1 != a2)
  {
    google::protobuf::Map<std::string,std::string>::clear(a1);
    *((void *)&v8 + 1) = a2[2];
    google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&v8, *(void *)(*((void *)&v8 + 1) + 24));
    long long v6 = v8;
    uint64_t v7 = v9;
    memset(v5, 0, sizeof(v5));
    google::protobuf::Map<std::string,std::string>::insert<google::protobuf::Map<std::string,std::string>::const_iterator>(a1, &v6, v5);
  }
  return a1;
}

unsigned __int8 **google::protobuf::Map<std::string,std::string>::insert<google::protobuf::Map<std::string,std::string>::const_iterator>(unsigned __int8 **result, long long *a2, void *a3)
{
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  uint64_t v3 = v9;
  if ((void)v9 != *a3)
  {
    uint64_t v5 = (uint64_t *)result;
    do
    {
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v11, v5[2], *(unsigned __int8 **)(v3 + 24), 0);
      if (!v11[0])
      {
        uint64_t v6 = *(void *)(v9 + 24);
        uint64_t v7 = (const std::string *)(v6 + 24);
        long long v8 = google::protobuf::Map<std::string,std::string>::operator[](v5, v6);
        std::string::operator=(v8, v7);
      }
      uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++((unsigned __int8 **)&v9);
      uint64_t v3 = v9;
    }
    while ((void)v9 != *a3);
  }
  return result;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Usage::_Internal::usage_map(siri::dialogengine::PatternSchemaBinary::Usage::_Internal *this, const siri::dialogengine::PatternSchemaBinary::Usage *a2)
{
  return *((void *)this + 3);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Usage::set_allocated_usage_map(siri::dialogengine::PatternSchemaBinary::Usage *this, siri::dialogengine::PatternSchemaBinary::UsageMap *a2)
{
  uint64_t result = siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 8) = 1;
    *((void *)this + 3) = a2;
  }
  return result;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Usage::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::Usage::default_instance(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  if (atomic_load_explicit(scc_info_Usage_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Usage_PatternSchemaBinary_2eproto);
  }
  return &siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::Usage::CopyFrom(siri::dialogengine::PatternSchemaBinary::Usage *this, const siri::dialogengine::PatternSchemaBinary::Usage *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::Usage::Clear(this);
    siri::dialogengine::PatternSchemaBinary::Usage::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::Usage::InternalSwap(siri::dialogengine::PatternSchemaBinary::Usage *this, siri::dialogengine::PatternSchemaBinary::Usage *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v14;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  uint64_t v9 = *(void *)(v8 + 16);
  long long v10 = *(_OWORD *)v8;
  uint64_t v11 = *(void *)(v7 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
  *(void *)(v8 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v11;
  *(_OWORD *)unint64_t v7 = v10;
  *(void *)(v7 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v9;
LABEL_8:
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  LODWORD(v13) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v13;
}

void siri::dialogengine::PatternSchemaBinary::ModeConfiguration::InitAsDefaultInstance(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  qword_1EA3DB768 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
}

uint64_t siri::dialogengine::PatternSchemaBinary::ModeConfiguration::_Internal::usage(siri::dialogengine::PatternSchemaBinary::ModeConfiguration::_Internal *this, const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *a2)
{
  return *((void *)this + 9);
}

uint64_t siri::dialogengine::PatternSchemaBinary::ModeConfiguration::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::default_instance(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  if (atomic_load_explicit(scc_info_ModeConfiguration_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ModeConfiguration_PatternSchemaBinary_2eproto);
  }
  return &siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::ModeConfiguration::CopyFrom(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::ModeConfiguration::Clear(this);
    siri::dialogengine::PatternSchemaBinary::ModeConfiguration::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::ModeConfiguration::InternalSwap(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, siri::dialogengine::PatternSchemaBinary::ModeConfiguration *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v14;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  uint64_t v9 = *(void *)(v8 + 16);
  long long v10 = *(_OWORD *)v8;
  uint64_t v11 = *(void *)(v7 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
  *(void *)(v8 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v11;
  *(_OWORD *)unint64_t v7 = v10;
  *(void *)(v7 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v9;
LABEL_8:
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)((char *)this + 24), (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)((char *)this + 48), (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)((char *)a2 + 48));
  uint64_t v13 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v13;
}

void siri::dialogengine::PatternSchemaBinary::Override::InitAsDefaultInstance(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  qword_1EA3DB7A0 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Override::_Internal::usage(siri::dialogengine::PatternSchemaBinary::Override::_Internal *this, const siri::dialogengine::PatternSchemaBinary::Override *a2)
{
  return *((void *)this + 6);
}

siri::dialogengine::PatternSchemaBinary::Override *siri::dialogengine::PatternSchemaBinary::Override::Override(siri::dialogengine::PatternSchemaBinary::Override *this, const siri::dialogengine::PatternSchemaBinary::Override *a2)
{
  *(void *)this = &unk_1F21256D0;
  *((void *)this + 1) = 0;
  unint64_t v4 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(void *)((char *)this + 28) = 0;
  *(void *)((char *)this + 36) = 0;
  *(void *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (*((_DWORD *)a2 + 4))
  {
    if (!*((void *)a2 + 6))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 6121);
      uint64_t v6 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: !value || usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v6->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
    }
    operator new();
  }
  *((void *)this + 6) = 0;
  return this;
}

void sub_1C60E87FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Override::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::Override::default_instance(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  if (atomic_load_explicit(scc_info_Override_PatternSchemaBinary_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Override_PatternSchemaBinary_2eproto);
  }
  return &siri::dialogengine::PatternSchemaBinary::_Override_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::Override::CopyFrom(siri::dialogengine::PatternSchemaBinary::Override *this, const siri::dialogengine::PatternSchemaBinary::Override *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::Override::Clear(this);
    siri::dialogengine::PatternSchemaBinary::Override::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::Override::InternalSwap(siri::dialogengine::PatternSchemaBinary::Override *this, siri::dialogengine::PatternSchemaBinary::Override *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v14;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  uint64_t v9 = *(void *)(v8 + 16);
  long long v10 = *(_OWORD *)v8;
  uint64_t v11 = *(void *)(v7 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
  *(void *)(v8 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v11;
  *(_OWORD *)unint64_t v7 = v10;
  *(void *)(v7 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v9;
LABEL_8:
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::Override *)((char *)this + 24), (siri::dialogengine::PatternSchemaBinary::Override *)((char *)a2 + 24));
  uint64_t v13 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v13;
}

void siri::dialogengine::LineNumberBase::~LineNumberBase(void **this)
{
  siri::dialogengine::LineNumberBase::~LineNumberBase(this);
  JUMPOUT(0x1C8796D70);
}

{
  *this = &unk_1F21271B8;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

uint64_t siri::dialogengine::LineNumberBase::LineNumberBase(uint64_t a1, uint64_t a2, const std::string *a3)
{
  *(void *)a1 = &unk_1F21271B8;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  siri::dialogengine::LineNumberBase::SetFullPath(a1, a3);
  return a1;
}

void sub_1C60E8AB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*(void **)(v1 + 40));
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double siri::dialogengine::LineNumberBase::SetFullPath(uint64_t a1, const std::string *a2)
{
  uint64_t v3 = a1 + 16;
  std::string::operator=((std::string *)(a1 + 16), a2);
  siri::dialogengine::BaseName(v3, &v6);
  unint64_t v4 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*v4);
  }
  double result = *(double *)&v6.__r_.__value_.__l.__data_;
  *(_OWORD *)unint64_t v4 = *(_OWORD *)&v6.__r_.__value_.__l.__data_;
  *(void *)(a1 + 56) = *((void *)&v6.__r_.__value_.__l + 2);
  return result;
}

siri::dialogengine::LineNumberBase *siri::dialogengine::LineNumberBase::LineNumberBase(siri::dialogengine::LineNumberBase *this, uint64_t a2, char *__s)
{
  *(void *)this = &unk_1F21271B8;
  *((void *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  if (__s)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    siri::dialogengine::LineNumberBase::SetFullPath((uint64_t)this, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return this;
}

void sub_1C60E8BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 63) < 0) {
    operator delete(*(void **)(v15 + 40));
  }
  if (*(char *)(v15 + 39) < 0) {
    operator delete(*v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::LineNumberBase::GetLineNumber(siri::dialogengine::LineNumberBase *this)
{
  return *((void *)this + 1);
}

BOOL siri::dialogengine::LineNumberBase::HasLineNumber(siri::dialogengine::LineNumberBase *this)
{
  return *((void *)this + 1) != 0;
}

uint64_t siri::dialogengine::LineNumberBase::SetLineNumber(uint64_t this, uint64_t a2)
{
  *(void *)(this + 8) = a2;
  return this;
}

void siri::dialogengine::LineNumberBase::GetFullPath(siri::dialogengine::LineNumberBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 39) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 2), *((void *)this + 3));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 1);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 4);
  }
}

void siri::dialogengine::LineNumberBase::GetFilename(siri::dialogengine::LineNumberBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((void *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 7);
  }
}

void siri::dialogengine::CreateJSONObjectFromOutputNode(unsigned int **a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)**a1);
}

void sub_1C60E8E40(_Unwind_Exception *a1)
{
  for (uint64_t i = 160; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void sub_1C60E8EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  JUMPOUT(0x1C60E8EE8);
}

void sub_1C60E8F04()
{
}

void siri::dialogengine::CreateJSONObjectFromOutputNodeMap(uint64_t *a1)
{
  memset(&v3[5], 0, 24);
  uint64_t v1 = *a1;
  if (*a1 != a1[1])
  {
    uint64_t v2 = *(void *)(v1 + 8);
    v3[0] = *(unsigned int **)v1;
    v3[1] = (unsigned int *)v2;
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
    }
    siri::dialogengine::CreateJSONObjectFromOutputNode(v3);
  }
  operator new();
}

void sub_1C60E90C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, char a17)
{
  MEMORY[0x1C8796D70](v17, 0x10A1C4037ACD87BLL);
  a14 = (void **)&a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CreateJSONObjectFromAdjacencyList(uint64_t *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v1 = *a1;
  if (a1[1] != *a1)
  {
    std::string __p = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v1, *(void *)(v1 + 8), (uint64_t)(*(void *)(v1 + 8) - *(void *)v1) >> 2);
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    if (__p != v7) {
      siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)*(unsigned int *)__p);
    }
    std::to_string(&v2, 0);
    siri::dialogengine::CreateJSONArrayVal();
  }
  operator new();
}

void sub_1C60E94A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30)
{
  MEMORY[0x1C8796D70](v30, 0x10A1C4037ACD87BLL);
  *(void *)(v31 - 144) = &a30;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 144));
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::uppercase(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  if (lpsrc) {
  else
  }
    uint64_t v4 = 0;
  if (v4[95] < 0) {
    std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)v4 + 9), *((void *)v4 + 10));
  }
  else {
    std::string v5 = *(std::string *)(v4 + 3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v13, &v5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "uppercase");
  siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)&v13, this, (uint64_t)&__p, &v5);
  std::string::operator=(&v13, &v5);
  std::string::operator=(&v14, &v6);
  std::string::operator=(&v15, &v7);
  std::string::operator=(&v16, &v8);
  std::string::operator=(&v17, &v9);
  std::string::operator=(&v18, &v10);
  std::string::operator=(&v19, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_1C60E9888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v40, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a40);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::lowercase(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  if (lpsrc) {
  else
  }
    uint64_t v4 = 0;
  if (v4[95] < 0) {
    std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)v4 + 9), *((void *)v4 + 10));
  }
  else {
    std::string v5 = *(std::string *)(v4 + 3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v13, &v5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "lowercase");
  siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)&v13, this, (uint64_t)&__p, &v5);
  std::string::operator=(&v13, &v5);
  std::string::operator=(&v14, &v6);
  std::string::operator=(&v15, &v7);
  std::string::operator=(&v16, &v8);
  std::string::operator=(&v17, &v9);
  std::string::operator=(&v18, &v10);
  std::string::operator=(&v19, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_1C60E9C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v40, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a40);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::capitalize(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  if (lpsrc) {
  else
  }
    uint64_t v4 = 0;
  if (v4[95] < 0) {
    std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)v4 + 9), *((void *)v4 + 10));
  }
  else {
    std::string v5 = *(std::string *)(v4 + 3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v13, &v5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "capitalize");
  siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)&v13, this, (uint64_t)&__p, &v5);
  std::string::operator=(&v13, &v5);
  std::string::operator=(&v14, &v6);
  std::string::operator=(&v15, &v7);
  std::string::operator=(&v16, &v8);
  std::string::operator=(&v17, &v9);
  std::string::operator=(&v18, &v10);
  std::string::operator=(&v19, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_1C60EA008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v40, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a40);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::upperFirst(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  if (lpsrc) {
  else
  }
    uint64_t v4 = 0;
  if (v4[95] < 0) {
    std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)v4 + 9), *((void *)v4 + 10));
  }
  else {
    std::string v5 = *(std::string *)(v4 + 3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v13, &v5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "upperfirst");
  siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)&v13, this, (uint64_t)&__p, &v5);
  std::string::operator=(&v13, &v5);
  std::string::operator=(&v14, &v6);
  std::string::operator=(&v15, &v7);
  std::string::operator=(&v16, &v8);
  std::string::operator=(&v17, &v9);
  std::string::operator=(&v18, &v10);
  std::string::operator=(&v19, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_1C60EA3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v40, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a40);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::lowerFirst(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  if (lpsrc) {
  else
  }
    uint64_t v4 = 0;
  if (v4[95] < 0) {
    std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)v4 + 9), *((void *)v4 + 10));
  }
  else {
    std::string v5 = *(std::string *)(v4 + 3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v13, &v5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "lowerfirst");
  siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)&v13, this, (uint64_t)&__p, &v5);
  std::string::operator=(&v13, &v5);
  std::string::operator=(&v14, &v6);
  std::string::operator=(&v15, &v7);
  std::string::operator=(&v16, &v8);
  std::string::operator=(&v17, &v9);
  std::string::operator=(&v18, &v10);
  std::string::operator=(&v19, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_1C60EA788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v40, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a40);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::startsWithCapital(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  if (lpsrc) {
  else
  }
    uint64_t v4 = 0;
  if (v4[95] < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v4 + 9), *((void *)v4 + 10));
  }
  else {
    std::string __p = *(std::string *)(v4 + 3);
  }
  siri::dialogengine::StartsWithCapital(this, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_1C60EA960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v14, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::length(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  if (lpsrc) {
  operator new();
  }
}

void sub_1C60EAAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v20, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::byteLength(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  if (lpsrc) {
  operator new();
  }
}

void sub_1C60EAC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v20, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::print(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  if (lpsrc) {
  operator new();
  }
}

void sub_1C60EAD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v20, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::speak(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  if (lpsrc) {
  operator new();
  }
}

void sub_1C60EAEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v20, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::count(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
}

void sub_1C60EB008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  MEMORY[0x1C8796D70](v27, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetGrammarFeature(void *a1, siri::dialogengine *a2, void *lpsrc, uint64_t a4)
{
  if (lpsrc
  {
    (*(void (**)(void **__return_ptr))(*(void *)v7 + 48))(v8);
  }
  else
  {
    uint64_t v18 = 0;
    long long v16 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)uint64_t v14 = 0u;
    *(_OWORD *)std::string v15 = 0u;
    *(_OWORD *)uint64_t v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    *(_OWORD *)std::string v11 = 0u;
    *(_OWORD *)std::string v8 = 0u;
    *(_OWORD *)std::string v9 = 0u;
  }
  siri::dialogengine::GetFeatureValue(a2, (uint64_t)v8, a4, a1);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[1]);
  }
  if (SHIBYTE(v15[0]) < 0) {
    operator delete(v14[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[1]);
  }
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(v11[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v9[0]) < 0) {
    operator delete(v8[0]);
  }
}

void sub_1C60EB1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void siri::dialogengine::DialogString::gender(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
}

void sub_1C60EB2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  MEMORY[0x1C8796D70](v27, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::animacy(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
}

void sub_1C60EB3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  MEMORY[0x1C8796D70](v27, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::case_(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
}

void sub_1C60EB50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  MEMORY[0x1C8796D70](v27, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::definiteness(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
}

void sub_1C60EB640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  MEMORY[0x1C8796D70](v27, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::pos(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
}

void sub_1C60EB774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  MEMORY[0x1C8796D70](v27, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::defArticle(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
}

void sub_1C60EB908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v17 - 33) < 0) {
    operator delete(*(void **)(v17 - 56));
  }
  MEMORY[0x1C8796D70](v16, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetInflection(std::string *a1, siri::dialogengine *a2, void *lpsrc, long long *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (lpsrc
  {
    (*(void (**)(void **__return_ptr))(*(void *)v7 + 48))(v17);
  }
  else
  {
    uint64_t v27 = 0;
    long long v25 = 0u;
    *(_OWORD *)uint64_t v26 = 0u;
    *(_OWORD *)uint64_t v23 = 0u;
    *(_OWORD *)uint64_t v24 = 0u;
    *(_OWORD *)uint64_t v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    *(_OWORD *)uint64_t v20 = 0u;
    *(_OWORD *)uint64_t v17 = 0u;
    *(_OWORD *)uint64_t v18 = 0u;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::SemanticFeatureConstraint::SemanticFeatureConstraint(&v30, a4, (long long *)__p);
  uint64_t v14 = 0;
  std::string v15 = 0;
  uint64_t v16 = 0;
  uint64_t v28 = &v14;
  char v29 = 0;
  std::string v8 = (std::string *)operator new(0x38uLL);
  std::string v9 = v8;
  uint64_t v14 = v8;
  std::string v15 = v8;
  long long v10 = (std::string *)((char *)v8 + 56);
  uint64_t v16 = &v8[2].__r_.__value_.__s.__data_[8];
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(v8, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    *std::string v8 = v30;
  }
  std::string v11 = v9 + 1;
  if (SHIBYTE(v32) < 0)
  {
    std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v31, *((std::string::size_type *)&v31 + 1));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v31;
    v9[1].__r_.__value_.__r.__words[2] = v32;
  }
  v9[2].__r_.__value_.__s.__data_[0] = v33;
  std::string v15 = v10;
  siri::dialogengine::InflectString((siri::dialogengine *)v17, a2, 1, a1);
  uint64_t v28 = &v14;
  std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[1]);
  }
  if (SHIBYTE(v24[0]) < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[1]);
  }
  if (SHIBYTE(v21[0]) < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[1]);
  }
  if (SHIBYTE(v18[0]) < 0) {
    operator delete(v17[0]);
  }
}

void sub_1C60EBBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (*(char *)(v18 + 23) < 0) {
    operator delete(*(void **)v18);
  }
  std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 128));
  std::pair<std::string const,std::string>::~pair(v19 - 112);
  if (a14 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(&a18);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::indefArticle(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
}

void sub_1C60EBD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v17 - 33) < 0) {
    operator delete(*(void **)(v17 - 56));
  }
  MEMORY[0x1C8796D70](v16, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void YAML::detail::memory_holder::merge(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)a1;
  if (v3 != *(uint64_t **)a2)
  {
    std::set<std::shared_ptr<YAML::detail::node>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<YAML::detail::node>,std::__tree_node<std::shared_ptr<YAML::detail::node>,void *> *,long>>(v3, **(void ***)a2, (void *)(*(void *)a2 + 8));
    std::string v6 = *(uint64_t **)a1;
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    std::string v7 = *(std::__shared_weak_count **)(a2 + 8);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v5;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

uint64_t *std::set<std::shared_ptr<YAML::detail::node>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<YAML::detail::node>,std::__tree_node<std::shared_ptr<YAML::detail::node>,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    std::string v6 = result + 1;
    do
    {
      std::string v7 = (uint64_t *)v5[1];
      std::string v8 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_9;
      }
      std::string v9 = (uint64_t *)v5[1];
      long long v10 = v6;
      if (v7)
      {
        do
        {
          std::string v8 = v9;
          std::string v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          std::string v8 = (uint64_t *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          long long v10 = v8;
        }
        while (v11);
      }
      unint64_t v12 = v4[4];
      if (v8[4] < v12)
      {
LABEL_9:
        if (v7) {
          char v13 = (uint64_t **)v8;
        }
        else {
          char v13 = (uint64_t **)v6;
        }
        if (v7) {
          uint64_t v14 = (uint64_t **)(v8 + 1);
        }
        else {
          uint64_t v14 = (uint64_t **)v6;
        }
      }
      else
      {
        char v13 = (uint64_t **)v6;
        uint64_t v14 = (uint64_t **)v6;
        if (v7)
        {
          uint64_t v14 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              char v13 = (uint64_t **)v7;
              unint64_t v19 = v7[4];
              if (v12 >= v19) {
                break;
              }
              std::string v7 = *v13;
              uint64_t v14 = v13;
              if (!*v13) {
                goto LABEL_16;
              }
            }
            if (v19 >= v12) {
              break;
            }
            uint64_t v14 = v13 + 1;
            std::string v7 = v13[1];
            if (!v7) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v14)
      {
LABEL_16:
        std::string v15 = (uint64_t *)operator new(0x30uLL);
        uint64_t v16 = v4[5];
        v15[4] = v4[4];
        v15[5] = v16;
        if (v16) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
        }
        double result = std::__tree<std::string>::__insert_node_at((uint64_t **)v5, (uint64_t)v13, v14, v15);
      }
      uint64_t v17 = (void *)v4[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v4[2];
          BOOL v11 = *v18 == (void)v4;
          uint64_t v4 = v18;
        }
        while (!v11);
      }
      uint64_t v4 = v18;
    }
    while (v18 != a3);
  }
  return result;
}

uint64_t *YAML::detail::memory::merge(uint64_t *a1, uint64_t a2)
{
  return std::set<std::shared_ptr<YAML::detail::node>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<YAML::detail::node>,std::__tree_node<std::shared_ptr<YAML::detail::node>,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
}

void YAML::detail::memory::create_node(YAML::detail::memory *this)
{
}

void sub_1C60EC1F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::default_delete<YAML::detail::node>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*(void **)(result + 24));
    std::string v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node *,std::shared_ptr<YAML::detail::node>::__shared_ptr_default_delete<YAML::detail::node,YAML::detail::node>,std::allocator<YAML::detail::node>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node *,std::shared_ptr<YAML::detail::node>::__shared_ptr_default_delete<YAML::detail::node,YAML::detail::node>,std::allocator<YAML::detail::node>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<YAML::detail::node>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<YAML::detail::node *,std::shared_ptr<YAML::detail::node>::__shared_ptr_default_delete<YAML::detail::node,YAML::detail::node>,std::allocator<YAML::detail::node>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node_ref *,std::shared_ptr<YAML::detail::node_ref>::__shared_ptr_default_delete<YAML::detail::node_ref,YAML::detail::node_ref>,std::allocator<YAML::detail::node_ref>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node_ref *,std::shared_ptr<YAML::detail::node_ref>::__shared_ptr_default_delete<YAML::detail::node_ref,YAML::detail::node_ref>,std::allocator<YAML::detail::node_ref>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<YAML::detail::memory_holder>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<YAML::detail::node_ref *,std::shared_ptr<YAML::detail::node_ref>::__shared_ptr_default_delete<YAML::detail::node_ref,YAML::detail::node_ref>,std::allocator<YAML::detail::node_ref>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t std::default_delete<YAML::detail::node_data>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear((void *)(result + 136));
    std::string v2 = *(void **)(v1 + 112);
    if (v2)
    {
      *(void *)(v1 + 120) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(v1 + 80);
    if (v3)
    {
      *(void *)(v1 + 88) = v3;
      operator delete(v3);
    }
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node_data *,std::shared_ptr<YAML::detail::node_data>::__shared_ptr_default_delete<YAML::detail::node_data,YAML::detail::node_data>,std::allocator<YAML::detail::node_data>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node_data *,std::shared_ptr<YAML::detail::node_data>::__shared_ptr_default_delete<YAML::detail::node_data,YAML::detail::node_data>,std::allocator<YAML::detail::node_data>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<YAML::detail::node_data>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<YAML::detail::node_data *,std::shared_ptr<YAML::detail::node_data>::__shared_ptr_default_delete<YAML::detail::node_data,YAML::detail::node_data>,std::allocator<YAML::detail::node_data>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::ParseCATSchemaBinary(void *a1@<X8>)
{
  siri::dialogengine::ParseGzippedFile();
  unint64_t v2 = v11;
  unsigned __int8 v3 = v11;
  if ((v11 & 0x80u) != 0) {
    unint64_t v2 = (unint64_t)v10[1];
  }
  if (!v2)
  {
    *a1 = 0;
    a1[1] = 0;
    if ((v3 & 0x80) == 0) {
      return;
    }
    goto LABEL_17;
  }
  siri::dialogengine::SchemaBinary::Schema::Schema((siri::dialogengine::SchemaBinary::Schema *)v8);
  if (google::protobuf::MessageLite::ParseFromString(v8, v10))
  {
    uint64_t v4 = (void *)v9;
    int v5 = *(char *)(v9 + 23);
    if (v5 < 0)
    {
      if (*(void *)(v9 + 8) != 8) {
        goto LABEL_14;
      }
      uint64_t v4 = *(void **)v9;
    }
    else if (v5 != 8)
    {
      goto LABEL_14;
    }
    if (*v4 == 0x4250414D45484353) {
      operator new();
    }
  }
LABEL_14:
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  *a1 = 0;
  a1[1] = 0;
  siri::dialogengine::SchemaBinary::Schema::~Schema((siri::dialogengine::SchemaBinary::Schema *)v8);
  if ((v11 & 0x80) != 0) {
LABEL_17:
  }
    operator delete(v10[0]);
}

void sub_1C60ED3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (*(void *)(a16 + 8)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(a16 + 8));
  }
  siri::dialogengine::SchemaBinary::Schema::~Schema((siri::dialogengine::SchemaBinary::Schema *)&STACK[0x310]);
  if (*(char *)(v16 - 97) < 0) {
    operator delete(*(void **)(v16 - 120));
  }
  _Unwind_Resume(a1);
}

siri::dialogengine::ObjectSchema *std::unique_ptr<siri::dialogengine::ObjectSchema>::reset[abi:ne180100](siri::dialogengine::ObjectSchema **a1)
{
  double result = *a1;
  *a1 = 0;
  if (result)
  {
    siri::dialogengine::ObjectSchema::~ObjectSchema(result);
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

void siri::dialogengine::ObjectSchema::~ObjectSchema(siri::dialogengine::ObjectSchema *this)
{
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectEnumerant>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ObjectSchema *,std::shared_ptr<siri::dialogengine::ObjectSchema>::__shared_ptr_default_delete<siri::dialogengine::ObjectSchema,siri::dialogengine::ObjectSchema>,std::allocator<siri::dialogengine::ObjectSchema>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

siri::dialogengine::ObjectSchema *std::__shared_ptr_pointer<siri::dialogengine::ObjectSchema *,std::shared_ptr<siri::dialogengine::ObjectSchema>::__shared_ptr_default_delete<siri::dialogengine::ObjectSchema,siri::dialogengine::ObjectSchema>,std::allocator<siri::dialogengine::ObjectSchema>>::__on_zero_shared(uint64_t a1)
{
  double result = *(siri::dialogengine::ObjectSchema **)(a1 + 24);
  if (result)
  {
    siri::dialogengine::ObjectSchema::~ObjectSchema(result);
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::ObjectSchema *,std::shared_ptr<siri::dialogengine::ObjectSchema>::__shared_ptr_default_delete<siri::dialogengine::ObjectSchema,siri::dialogengine::ObjectSchema>,std::allocator<siri::dialogengine::ObjectSchema>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::ParseCATSchemaYAML(int a1, const std::string *a2, std::string *__str)
{
  uint64_t v10 = 0;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)std::string v8 = 0u;
  *(_OWORD *)std::string __s = 0u;
  *(_OWORD *)std::string v6 = 0u;
  *(_OWORD *)__sz = 0u;
  memset(v4, 0, sizeof(v4));
  uint64_t v11 = 0x100000001;
  v13[0] = 0;
  unint64_t v12 = v13;
  v14[1] = 0;
  v14[0] = 0;
  v13[1] = 0;
  std::string v13[2] = v14;
  v15[1] = 0;
  v15[0] = 0;
  _OWORD v14[2] = v15;
  std::string::operator=((std::string *)v4, __str);
  std::string::operator=((std::string *)&v4[24], a2);
  YAML::LoadFile();
}

void sub_1C60F1AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v68 + 119) < 0) {
    operator delete(*a65);
  }
  if (*(char *)(v68 + 95) < 0) {
    operator delete(*a66);
  }
  if (*(char *)(v68 + 71) < 0) {
    operator delete(*a67);
  }
  if (*(char *)(v68 + 47) < 0) {
    operator delete(*a68);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v68);
  operator delete(v70);
  std::__tree<std::string>::destroy((char *)STACK[0x790]);
  std::__tree<std::string>::destroy((char *)STACK[0x7A8]);
  if (STACK[0x7E0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x7E0]);
  }
  if (SLOBYTE(STACK[0x7D7]) < 0) {
    operator delete((void *)STACK[0x7C0]);
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>>>::destroy((void *)STACK[0x8A8]);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy((void *)STACK[0x890]);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy((void *)STACK[0x878]);
  if (SLOBYTE(STACK[0x867]) < 0) {
    operator delete((void *)STACK[0x850]);
  }
  if (SLOBYTE(STACK[0x84F]) < 0) {
    operator delete((void *)STACK[0x838]);
  }
  if (SLOBYTE(STACK[0x837]) < 0) {
    operator delete((void *)STACK[0x820]);
  }
  if (SLOBYTE(STACK[0x81F]) < 0) {
    operator delete((void *)STACK[0x808]);
  }
  if (SLOBYTE(STACK[0x807]) < 0) {
    operator delete((void *)STACK[0x7F0]);
  }
  _Unwind_Resume(a1);
}

void sub_1C60F1F90()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1C60F2910);
}

void sub_1C60F1FA8()
{
  if (SLOBYTE(STACK[0x317]) < 0) {
    JUMPOUT(0x1C60F1FE4);
  }
  JUMPOUT(0x1C60F1FE8);
}

void sub_1C60F1FC0()
{
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x317]) < 0) {
    JUMPOUT(0x1C60F1FE4);
  }
  JUMPOUT(0x1C60F1FE8);
}

void sub_1C60F1FF8()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1C60F29F8);
}

void sub_1C60F2010()
{
}

void sub_1C60F201C()
{
  if (SLOBYTE(STACK[0x217]) < 0)
  {
    operator delete((void *)STACK[0x200]);
    if ((v1 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v1)
  {
LABEL_6:
    JUMPOUT(0x1C60F2C10);
  }
  __cxa_free_exception(v0);
  goto LABEL_6;
}

void sub_1C60F2050()
{
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  if (*(char *)(v0 - 121) < 0) {
    operator delete(*(void **)(v0 - 144));
  }
  if (SLOBYTE(STACK[0x40F]) < 0) {
    operator delete((void *)STACK[0x3F8]);
  }
  JUMPOUT(0x1C60F264CLL);
}

void sub_1C60F20CC()
{
}

void sub_1C60F20D8()
{
}

void sub_1C60F20F0()
{
  if (SLOBYTE(STACK[0x567]) < 0) {
    operator delete((void *)STACK[0x550]);
  }
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  if (*(char *)(v0 - 121) < 0) {
    operator delete(*(void **)(v0 - 144));
  }
  JUMPOUT(0x1C60F2910);
}

void sub_1C60F217C()
{
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  if (SLOBYTE(STACK[0x637]) < 0) {
    operator delete((void *)STACK[0x620]);
  }
  if (SLOBYTE(STACK[0x567]) < 0) {
    operator delete((void *)STACK[0x550]);
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  if ((SLOBYTE(STACK[0x547]) & 0x80000000) == 0)
  {
    if (SLOBYTE(STACK[0x4D7]) < 0) {
      operator delete((void *)STACK[0x4C0]);
    }
    siri::dialogengine::ObjectEnumerant::~ObjectEnumerant((void **)&STACK[0x410]);
    if (STACK[0x298]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
    }
    if (SLOBYTE(STACK[0x28F]) < 0) {
      operator delete((void *)STACK[0x278]);
    }
    if (STACK[0x260]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x260]);
    }
    if (SLOBYTE(STACK[0x257]) < 0) {
      operator delete((void *)STACK[0x240]);
    }
    if (STACK[0x228]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x228]);
    }
    if (SLOBYTE(STACK[0x21F]) < 0) {
      operator delete((void *)STACK[0x208]);
    }
    if (v0) {
      JUMPOUT(0x1C60F2BD4);
    }
    JUMPOUT(0x1C60F2BD8);
  }
  JUMPOUT(0x1C60F2364);
}

void sub_1C60F2208()
{
  if (SLOBYTE(STACK[0x317]) < 0)
  {
    operator delete((void *)STACK[0x300]);
    if ((v1 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v1)
  {
LABEL_6:
    JUMPOUT(0x1C60F2910);
  }
  __cxa_free_exception(v0);
  goto LABEL_6;
}

void sub_1C60F2248()
{
  if (SLOBYTE(STACK[0x317]) < 0)
  {
    operator delete((void *)STACK[0x300]);
    if ((v1 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v1)
  {
LABEL_6:
    JUMPOUT(0x1C60F29F8);
  }
  __cxa_free_exception(v0);
  goto LABEL_6;
}

void sub_1C60F2280()
{
}

void sub_1C60F228C()
{
  if (SLOBYTE(STACK[0x637]) < 0) {
    operator delete((void *)STACK[0x620]);
  }
  if (SLOBYTE(STACK[0x567]) < 0) {
    operator delete((void *)STACK[0x550]);
  }
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  if ((*(char *)(v1 - 121) & 0x80000000) == 0)
  {
    siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&STACK[0x300]);
    if (STACK[0x4A8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x4A8]);
    }
    if (SLOBYTE(STACK[0x49F]) < 0) {
      operator delete((void *)STACK[0x488]);
    }
    if (STACK[0x470]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x470]);
    }
    if (SLOBYTE(STACK[0x467]) < 0) {
      operator delete((void *)STACK[0x450]);
    }
    if (STACK[0x438]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x438]);
    }
    if (SLOBYTE(STACK[0x42F]) < 0) {
      operator delete((void *)STACK[0x418]);
    }
    if (v0) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v0);
    }
    if (STACK[0x678]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x678]);
    }
    if (STACK[0x5A8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x5A8]);
    }
    if (SLOBYTE(STACK[0x59F]) < 0) {
      JUMPOUT(0x1C60F2BFCLL);
    }
    JUMPOUT(0x1C60F2C00);
  }
  JUMPOUT(0x1C60F23D8);
}

void sub_1C60F2314()
{
  if (SLOBYTE(STACK[0x427]) < 0) {
    JUMPOUT(0x1C60F2330);
  }
  JUMPOUT(0x1C60F2910);
}

void sub_1C60F2338(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,std::__shared_weak_count *a23)
{
  siri::dialogengine::PropertyBase::~PropertyBase((void **)&STACK[0x580]);
  if (STACK[0x298]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
  }
  if (SLOBYTE(STACK[0x28F]) < 0) {
    operator delete((void *)STACK[0x278]);
  }
  if (STACK[0x260]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (STACK[0x228]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x228]);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (STACK[0x648]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x648]);
  }
  if (STACK[0x678]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x678]);
  }
  if (SLOBYTE(STACK[0x66F]) < 0) {
    operator delete((void *)STACK[0x658]);
  }
  if (SLOBYTE(STACK[0x6A7]) < 0) {
    operator delete((void *)STACK[0x690]);
  }
  if (STACK[0x740]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x740]);
  }
  if (SLOBYTE(STACK[0x737]) < 0) {
    operator delete((void *)STACK[0x720]);
  }
  if (STACK[0x708]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x708]);
  }
  if (SLOBYTE(STACK[0x6FF]) < 0) {
    operator delete((void *)STACK[0x6E8]);
  }
  if (STACK[0x6D0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x6D0]);
  }
  if (SLOBYTE(STACK[0x6C7]) < 0) {
    operator delete((void *)STACK[0x6B0]);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (STACK[0x778]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x778]);
  }
  if (a2 == 1)
  {
    long long v25 = __cxa_begin_catch(a1);
    std::operator+<char>();
    uint64_t v26 = std::string::append((std::string *)&STACK[0x690], " \"");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    STACK[0x4D0] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x4C0] = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::string v30 = (const std::string::value_type *)v25[4];
    char v29 = (char *)(v25 + 4);
    uint64_t v28 = v30;
    int v31 = v29[23];
    if (v31 >= 0) {
      std::string::size_type v32 = v29;
    }
    else {
      std::string::size_type v32 = v28;
    }
    if (v31 >= 0) {
      std::string::size_type v33 = v29[23];
    }
    else {
      std::string::size_type v33 = *((void *)v29 + 1);
    }
    uint64_t v34 = std::string::append((std::string *)&STACK[0x4C0], v32, v33);
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    STACK[0x630] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x620] = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    uint64_t v36 = std::string::append((std::string *)&STACK[0x620], "\"");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    STACK[0x760] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x750] = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&STACK[0x750], 3u);
    if (SLOBYTE(STACK[0x767]) < 0) {
      operator delete((void *)STACK[0x750]);
    }
    if (SLOBYTE(STACK[0x637]) < 0) {
      operator delete((void *)STACK[0x620]);
    }
    if (SLOBYTE(STACK[0x4D7]) < 0) {
      operator delete((void *)STACK[0x4C0]);
    }
    if (SLOBYTE(STACK[0x6A7]) < 0) {
      operator delete((void *)STACK[0x690]);
    }
  }
  else
  {
    if (a2 != 2) {
      JUMPOUT(0x1C60F1EECLL);
    }
    uint64_t v38 = __cxa_begin_catch(a1);
    std::operator+<char>();
    uint64_t v39 = std::string::append((std::string *)&STACK[0x690], " \"");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    STACK[0x4D0] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x4C0] = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    long long v41 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v38 + 16))(v38);
    uint64_t v42 = std::string::append((std::string *)&STACK[0x4C0], v41);
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    STACK[0x630] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x620] = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    uint64_t v44 = std::string::append((std::string *)&STACK[0x620], "\"");
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    STACK[0x760] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x750] = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&STACK[0x750], 3u);
    if (SLOBYTE(STACK[0x767]) < 0) {
      operator delete((void *)STACK[0x750]);
    }
    if (SLOBYTE(STACK[0x637]) < 0) {
      operator delete((void *)STACK[0x620]);
    }
    if (SLOBYTE(STACK[0x4D7]) < 0) {
      operator delete((void *)STACK[0x4C0]);
    }
    if (SLOBYTE(STACK[0x6A7]) < 0) {
      operator delete((void *)STACK[0x690]);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1C60F0E30);
}

void sub_1C60F29A0()
{
}

void sub_1C60F29BC()
{
}

void sub_1C60F2A60()
{
  if (!v0) {
    JUMPOUT(0x1C60F29D8);
  }
  JUMPOUT(0x1C60F29D0);
}

void sub_1C60F2A70()
{
  if (SLOBYTE(STACK[0x567]) < 0)
  {
    operator delete((void *)STACK[0x550]);
    if ((v1 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v1)
  {
LABEL_6:
    if (SLOBYTE(STACK[0x4D7]) < 0) {
      operator delete((void *)STACK[0x4C0]);
    }
    JUMPOUT(0x1C60F2B00);
  }
  __cxa_free_exception(v0);
  goto LABEL_6;
}

void sub_1C60F2AA0()
{
  if (SLOBYTE(STACK[0x567]) < 0)
  {
    operator delete((void *)STACK[0x550]);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v2)
  {
LABEL_6:
    if (STACK[0x298]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
    }
    if (SLOBYTE(STACK[0x28F]) < 0) {
      operator delete((void *)STACK[0x278]);
    }
    if (STACK[0x260]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x260]);
    }
    if (SLOBYTE(STACK[0x257]) < 0) {
      operator delete((void *)STACK[0x240]);
    }
    if (STACK[0x228]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x228]);
    }
    if (SLOBYTE(STACK[0x21F]) < 0) {
      operator delete((void *)STACK[0x208]);
    }
    if (v1) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    }
    if (STACK[0x648]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x648]);
    }
    JUMPOUT(0x1C60F2B70);
  }
  __cxa_free_exception(v0);
  goto LABEL_6;
}

void sub_1C60F2AD0()
{
}

void sub_1C60F2ADC()
{
}

void sub_1C60F2AF8()
{
}

void sub_1C60F2EA0()
{
  if (SLOBYTE(STACK[0x767]) < 0) {
    operator delete((void *)STACK[0x750]);
  }
  if (SLOBYTE(STACK[0x637]) < 0) {
    operator delete((void *)STACK[0x620]);
  }
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  if (SLOBYTE(STACK[0x6A7]) < 0) {
    operator delete((void *)STACK[0x690]);
  }
  __cxa_end_catch();
  JUMPOUT(0x1C60F1EECLL);
}

void YAML::Node::operator[]<char [5]>(uint64_t a1, YAML::Node *this, char *a3)
{
  if (!*(unsigned char *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0) {
      std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else {
      std::string v15 = *(std::string *)((char *)this + 8);
    }
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v15);
  }
  YAML::Node::EnsureNodeExists((uint64_t)this);
  std::string v6 = (YAML::detail::node *)*((void *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  uint64_t v7 = *((void *)this + 4);
  std::string v8 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = YAML::detail::node::get<std::string>(v6, (uint64_t)__p, v7, v8);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *((void *)this + 4);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
    *(void *)(a1 + 24) = 0;
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v9;
}

void sub_1C60F31B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void YAML::Node::operator[]<char [7]>(uint64_t a1, YAML::Node *this, char *a3)
{
  if (!*(unsigned char *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0) {
      std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else {
      std::string v15 = *(std::string *)((char *)this + 8);
    }
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v15);
  }
  YAML::Node::EnsureNodeExists((uint64_t)this);
  std::string v6 = (YAML::detail::node *)*((void *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  uint64_t v7 = *((void *)this + 4);
  std::string v8 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = YAML::detail::node::get<std::string>(v6, (uint64_t)__p, v7, v8);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *((void *)this + 4);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
    *(void *)(a1 + 24) = 0;
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v9;
}

void sub_1C60F3364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  int v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  std::string v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    std::string v6 = operator new(0x40uLL);
    std::string v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    std::string::size_type v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *std::string v8 = 0;
    v8[1] = 0;
    std::string::size_type v8[2] = 0;
    *((unsigned char *)v6 + 56) = 0;
    std::__tree<std::string>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

void YAML::Node::operator[]<char [11]>(uint64_t a1, YAML::Node *this, char *a3)
{
  if (!*(unsigned char *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0) {
      std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else {
      std::string v15 = *(std::string *)((char *)this + 8);
    }
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v15);
  }
  YAML::Node::EnsureNodeExists((uint64_t)this);
  std::string v6 = (YAML::detail::node *)*((void *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  uint64_t v7 = *((void *)this + 4);
  std::string v8 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = YAML::detail::node::get<std::string>(v6, (uint64_t)__p, v7, v8);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *((void *)this + 4);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
    *(void *)(a1 + 24) = 0;
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v9;
}

void sub_1C60F35A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::ObjectSchema>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<siri::dialogengine::ObjectSchema>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2125F50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::ObjectSchema>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2125F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void siri::dialogengine::CATExecutor::Execute(uint64_t a1, uint64_t a2, void *a3, const void ***a4)
{
  {
    siri::dialogengine::CATExecutor::Execute(std::string const&,std::string const&,std::map<std::string,siri::dialogengine::CATAny> const&,std::map<std::string,siri::dialogengine::CATAny> const&,siri::dialogengine::CATOption)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "CATExecutor");
  }
  os_signpost_id_t spid = os_signpost_id_generate((os_log_t)siri::dialogengine::CATExecutor::Execute(std::string const&,std::string const&,std::map<std::string,siri::dialogengine::CATAny> const&,std::map<std::string,siri::dialogengine::CATAny> const&,siri::dialogengine::CATOption)::sSignpostLog);
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v7 = siri::dialogengine::CATExecutor::Execute(std::string const&,std::string const&,std::map<std::string,siri::dialogengine::CATAny> const&,std::map<std::string,siri::dialogengine::CATAny> const&,siri::dialogengine::CATOption)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::CATExecutor::Execute(std::string const&,std::string const&,std::map<std::string,siri::dialogengine::CATAny> const&,std::map<std::string,siri::dialogengine::CATAny> const&,siri::dialogengine::CATOption)::sSignpostLog))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v7, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Execute", "", buf, 2u);
    }
  }
  uint64_t v54 = 0;
  v55[0] = 0;
  unint64_t v53 = &v54;
  uint64_t v10 = *a4;
  std::string v8 = a4 + 1;
  uint64_t v9 = v10;
  if (v10 != (const void **)v8)
  {
    while (1)
    {
      uint64_t v11 = v54;
      if (v53 == &v54) {
        break;
      }
      unint64_t v12 = &v54;
      if (v54)
      {
        do
        {
          char v13 = (uint64_t **)v11;
          uint64_t v11 = (uint64_t *)v11[1];
        }
        while (v11);
      }
      else
      {
        do
        {
          char v13 = (uint64_t **)v12[2];
          BOOL v14 = *v13 == (uint64_t *)v12;
          unint64_t v12 = v13;
        }
        while (v14);
      }
      if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)v55, (const void **)v13 + 4, v9 + 4))
      {
        if (!v54) {
          goto LABEL_13;
        }
LABEL_15:
        uint64_t v42 = v13;
        std::string v15 = v13 + 1;
        goto LABEL_17;
      }
      std::string v15 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)&v53, &v42, v9 + 4);
LABEL_17:
      if (!*v15) {
        goto LABEL_18;
      }
LABEL_21:
      uint64_t v18 = (const void **)v9[1];
      if (v18)
      {
        do
        {
          unint64_t v19 = (const void ***)v18;
          uint64_t v18 = (const void **)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unint64_t v19 = (const void ***)v9[2];
          BOOL v14 = *v19 == v9;
          uint64_t v9 = (const void **)v19;
        }
        while (!v14);
      }
      uint64_t v9 = (const void **)v19;
      if (v19 == v8) {
        goto LABEL_27;
      }
    }
    char v13 = &v54;
    if (!v54)
    {
LABEL_13:
      uint64_t v42 = &v54;
      std::string v15 = &v54;
LABEL_18:
      uint64_t v16 = (char *)operator new(0x40uLL);
      *(void *)buf = v16;
      long long v35 = &v54;
      char v36 = 0;
      std::pair<std::string const,siri::dialogengine::CATAny>::pair[abi:ne180100]((std::string *)(v16 + 32), (long long *)v9 + 2);
      char v36 = 1;
      uint64_t v17 = v42;
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = v17;
      *std::string v15 = (uint64_t *)v16;
      if (*v53)
      {
        unint64_t v53 = (uint64_t **)*v53;
        uint64_t v16 = (char *)*v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v54, (uint64_t *)v16);
      ++v55[0];
      *(void *)buf = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::CATAny>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::CATAny>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
      goto LABEL_21;
    }
    goto LABEL_15;
  }
LABEL_27:
  memset(v50, 0, sizeof(v50));
  uint64_t v51 = 0;
  uint64_t v52 = 256;
  long long v43 = 0u;
  long long v44 = 0u;
  uint64_t v42 = (uint64_t **)v50;
  uint64_t v45 = 0;
  uint64_t v46 = 512;
  int v47 = 324;
  __int16 v48 = 0x2000;
  uint64_t v49 = 4;
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(&v42);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v42, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v42, (uint64_t)"templateDir", 0xBu);
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v20 = (const char *)a1;
  }
  else {
    uint64_t v20 = *(const char **)a1;
  }
  unsigned int v21 = strlen(v20);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v42, (uint64_t)v20, v21);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v42, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v42, (uint64_t)"catId", 5u);
  if (*(char *)(a2 + 23) >= 0) {
    long long v22 = (const char *)a2;
  }
  else {
    long long v22 = *(const char **)a2;
  }
  unsigned int v23 = strlen(v22);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v42, (uint64_t)v22, v23);
  std::string::basic_string[abi:ne180100]<0>(buf, "locale");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  uint64_t v24 = (uint64_t *)std::__tree<std::__value_type<std::string,siri::dialogengine::CATAny>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::CATAny>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::CATAny>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v53, (const void **)buf, &__str);
  uint64_t v25 = siri::dialogengine::CATAny::to_ptr<std::string>(v24 + 7);
  uint64_t v26 = v25;
  if (v37 < 0)
  {
    operator delete(*(void **)buf);
    if (!v26) {
      goto LABEL_40;
    }
  }
  else if (!v25)
  {
    goto LABEL_40;
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v42, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v42, (uint64_t)"locale", 6u);
  if (*(char *)(v26 + 23) < 0) {
    uint64_t v26 = *(void *)v26;
  }
  unsigned int v27 = strlen((const char *)v26);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v42, v26, v27);
LABEL_40:
  std::string::basic_string[abi:ne180100]<0>(buf, "dialogMetadata");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  uint64_t v28 = (uint64_t *)std::__tree<std::__value_type<std::string,siri::dialogengine::CATAny>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::CATAny>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::CATAny>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v53, (const void **)buf, &__str);
  uint64_t v29 = siri::dialogengine::CATAny::to_ptr<std::map<std::string,siri::dialogengine::CATAny>>(v28 + 7);
  std::string v30 = (void *)v29;
  if (v37 < 0)
  {
    operator delete(*(void **)buf);
    if (!v30) {
      goto LABEL_45;
    }
  }
  else if (!v29)
  {
LABEL_45:
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v42, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v42, (uint64_t)"parameters", 0xAu);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(&v42);
    siri::dialogengine::AddCATDictionaryToJSON(a3, (uint64_t *)&v42);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(&v42);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(&v42);
    String = (char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString(v50);
    std::string::basic_string[abi:ne180100]<0>(buf, String);
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    std::string::basic_string[abi:ne180100]<0>(&v39, "");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    siri::dialogengine::ParseRequestFromJson(&v41);
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v42, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v42, (uint64_t)"dialogMetadata", 0xEu);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(&v42);
  siri::dialogengine::AddCATDictionaryToJSON(v30, (uint64_t *)&v42);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(&v42);
  goto LABEL_45;
}

void sub_1C60F3EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  va_copy((va_list)v10, va1);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v14 = (uint64_t)&STACK[0x250];
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  siri::dialogengine::RequestInfo::~RequestInfo((void **)va2);
  if (STACK[0x2A0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2A0]);
  }
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(v7);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(v8 - 176);
  std::__tree<std::__value_type<std::string,siri::dialogengine::CATAny>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::CATAny>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::CATAny>>>::destroy(*(void **)(v8 - 112));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,siri::dialogengine::CATAny>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::CATAny>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::CATAny>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  int v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  std::string v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    std::string v6 = operator new(0x40uLL);
    v11[1] = a1 + 1;
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    std::string::size_type v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *uint64_t v8 = 0;
    v8[1] = 0;
    std::string::size_type v8[2] = 0;
    *((void *)v6 + 7) = 0;
    char v12 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::CATAny>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::CATAny>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

uint64_t siri::dialogengine::CATAny::to_ptr<std::string>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
    uint64_t v3 = MEMORY[0x1E4FBA3D8];
  }
    return *a1 + 8;
  else {
    return 0;
  }
}

uint64_t siri::dialogengine::CATAny::to_ptr<std::map<std::string,siri::dialogengine::CATAny>>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
    uint64_t v3 = MEMORY[0x1E4FBA3D8];
  }
  {
    return *a1 + 8;
  }
  else
  {
    return 0;
  }
}

void siri::dialogengine::AddCATDictionaryToJSON(void *a1, uint64_t *a2)
{
  uint64_t v2 = (long long *)(a1 + 1);
  uint64_t v3 = (long long *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    do
    {
      std::pair<std::string const,siri::dialogengine::CATAny>::pair[abi:ne180100](&__p, v3 + 2);
      siri::dialogengine::AddCATAnyToJSON((uint64_t)&__p, &v9, a2);
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v5 = (long long *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          std::string v6 = v5;
          int v5 = *(long long **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          std::string v6 = (long long *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != v2);
  }
}

void sub_1C60F4304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::CATAny>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::CATAny>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::CATAny>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::dialogengine::CATAny>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::CATAny>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::CATAny>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::dialogengine::CATAny>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::CATAny>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::CATAny>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::CATAny>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::CATAny>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

std::string *std::pair<std::string const,siri::dialogengine::CATAny>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = *((void *)a2 + 3);
  if (v5) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  this[1].__r_.__value_.__r.__words[0] = v5;
  return this;
}

void sub_1C60F4460(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::AddCATAnyToJSON(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*a2) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 16))(*a2);
  }
  else {
    uint64_t v6 = MEMORY[0x1E4FBA3D8];
  }
  if (std::type_info::operator==[abi:ne180100](v6, MEMORY[0x1E4FBA3A8]))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      if (!*(void *)(a1 + 8))
      {
LABEL_13:
        if (*a2) {
          uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 16))(*a2);
        }
        else {
          uint64_t v9 = MEMORY[0x1E4FBA3D8];
        }
        std::type_info::operator==[abi:ne180100](v9, MEMORY[0x1E4FBA3A8]);
        uint64_t v11 = (rapidjson::internal *)*(unsigned int *)(*a2 + 8);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int((void **)a3, v11);
        return;
      }
      a1 = *(void *)a1;
    }
    else if (!*(unsigned char *)(a1 + 23))
    {
      goto LABEL_13;
    }
    unsigned int v8 = strlen((const char *)a1);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a3, a1, v8);
    goto LABEL_13;
  }
  if (*a2) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 16))(*a2);
  }
  else {
    uint64_t v7 = MEMORY[0x1E4FBA3D8];
  }
  if (std::type_info::operator==[abi:ne180100](v7, MEMORY[0x1E4FBA378]))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      if (!*(void *)(a1 + 8))
      {
LABEL_29:
        if (*a2) {
          uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 16))(*a2);
        }
        else {
          uint64_t v13 = MEMORY[0x1E4FBA3D8];
        }
        std::type_info::operator==[abi:ne180100](v13, MEMORY[0x1E4FBA378]);
        int v15 = *(unsigned __int8 *)(*a2 + 8);
        if (v15) {
          int v16 = 2;
        }
        else {
          int v16 = 1;
        }
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)a3, v16);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool(a3, v15);
        return;
      }
      a1 = *(void *)a1;
    }
    else if (!*(unsigned char *)(a1 + 23))
    {
      goto LABEL_29;
    }
    unsigned int v12 = strlen((const char *)a1);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a3, a1, v12);
    goto LABEL_29;
  }
  if (*a2) {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 16))(*a2);
  }
  else {
    uint64_t v10 = MEMORY[0x1E4FBA3D8];
  }
  if (std::type_info::operator==[abi:ne180100](v10, MEMORY[0x1E4FBA310])
    || (!*a2 ? (uint64_t v14 = MEMORY[0x1E4FBA3D8]) : (uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 16))(*a2)),
        std::type_info::operator==[abi:ne180100](v14, MEMORY[0x1E4FBA308])))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      if (!*(void *)(a1 + 8))
      {
LABEL_50:
        if (*a2) {
          uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 16))(*a2);
        }
        else {
          uint64_t v18 = MEMORY[0x1E4FBA3D8];
        }
        std::type_info::operator==[abi:ne180100](v18, MEMORY[0x1E4FBA310]);
        unint64_t v19 = *(const char **)(*a2 + 8);
LABEL_54:
        unsigned int v20 = strlen(v19);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a3, (uint64_t)v19, v20);
        return;
      }
      a1 = *(void *)a1;
    }
    else if (!*(unsigned char *)(a1 + 23))
    {
      goto LABEL_50;
    }
    unsigned int v17 = strlen((const char *)a1);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a3, a1, v17);
    goto LABEL_50;
  }
  if (*a2) {
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 16))(*a2);
  }
  else {
    uint64_t v21 = MEMORY[0x1E4FBA3D8];
  }
  {
    if (*(char *)(a1 + 23) < 0)
    {
      if (!*(void *)(a1 + 8)) {
        goto LABEL_69;
      }
      a1 = *(void *)a1;
    }
    else if (!*(unsigned char *)(a1 + 23))
    {
LABEL_69:
      uint64_t v24 = siri::dialogengine::CATAny::to_ptr<std::string>(a2);
      unint64_t v19 = (const char *)v24;
      if (*(char *)(v24 + 23) < 0) {
        unint64_t v19 = *(const char **)v24;
      }
      goto LABEL_54;
    }
    unsigned int v23 = strlen((const char *)a1);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a3, a1, v23);
    goto LABEL_69;
  }
  if (*a2) {
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 16))(*a2);
  }
  else {
    uint64_t v22 = MEMORY[0x1E4FBA3D8];
  }
  {
    if (*(char *)(a1 + 23) < 0)
    {
      if (!*(void *)(a1 + 8))
      {
LABEL_81:
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((void **)a3);
        uint64_t v27 = siri::dialogengine::CATAny::to_ptr<std::vector<siri::dialogengine::CATAny>>(a2);
        uint64_t v28 = *(void **)v27;
        uint64_t v29 = *(void **)(v27 + 8);
        if (*(void **)v27 != v29)
        {
          do
          {
            if (*v28) {
              uint64_t v30 = (*(uint64_t (**)(void))(*(void *)*v28 + 24))(*v28);
            }
            else {
              uint64_t v30 = 0;
            }
            uint64_t v36 = v30;
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            siri::dialogengine::AddCATAnyToJSON(__p, &v36, a3);
            if (v35 < 0) {
              operator delete(__p[0]);
            }
            if (v30) {
              (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
            }
            ++v28;
          }
          while (v28 != v29);
        }
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((void **)a3);
        return;
      }
      a1 = *(void *)a1;
    }
    else if (!*(unsigned char *)(a1 + 23))
    {
      goto LABEL_81;
    }
    unsigned int v26 = strlen((const char *)a1);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a3, a1, v26);
    goto LABEL_81;
  }
  if (*a2) {
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 16))(*a2);
  }
  else {
    uint64_t v25 = MEMORY[0x1E4FBA3D8];
  }
  {
    if (*(char *)(a1 + 23) < 0)
    {
      if (!*(void *)(a1 + 8))
      {
LABEL_102:
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((void **)a3);
        uint64_t v33 = siri::dialogengine::CATAny::to_ptr<std::map<std::string,siri::dialogengine::CATAny>>(a2);
        siri::dialogengine::AddCATDictionaryToJSON(v33, a3);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((void **)a3);
        return;
      }
      a1 = *(void *)a1;
    }
    else if (!*(unsigned char *)(a1 + 23))
    {
      goto LABEL_102;
    }
    unsigned int v32 = strlen((const char *)a1);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a3, a1, v32);
    goto LABEL_102;
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unsupported value type found in CATDictionary.", v31);
}

void sub_1C60F4AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,siri::dialogengine::CATAny>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t siri::dialogengine::CATAny::to_ptr<std::vector<siri::dialogengine::CATAny>>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  else {
    uint64_t v3 = MEMORY[0x1E4FBA3D8];
  }
    return *a1 + 8;
  else {
    return 0;
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::CATAny>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::CATAny>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::CATAny>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void siri::dialogengine::CATExecutor::ExecuteWithJson(char *a1)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  CATExecuteWithStrings(a1, 0, 0);
}

double siri::dialogengine::SemanticFeatureConstraint::SemanticFeatureConstraint(siri::dialogengine::SemanticFeatureConstraint *this)
{
  *((unsigned char *)this + 48) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((unsigned char *)this + 48) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

std::string *siri::dialogengine::SemanticFeatureConstraint::SemanticFeatureConstraint(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  this[2].__r_.__value_.__s.__data_[0] = 0;
  return this;
}

void sub_1C60F4D6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::SemanticFeatureConstraint::SemanticFeatureConstraint(std::string *this, long long *a2, long long *a3, std::string::value_type a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  unsigned int v8 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  this[2].__r_.__value_.__s.__data_[0] = a4;
  return this;
}

void sub_1C60F4E18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::SemanticFeatureConstraint::GetName(siri::dialogengine::SemanticFeatureConstraint *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void siri::dialogengine::SemanticFeatureConstraint::GetValue(siri::dialogengine::SemanticFeatureConstraint *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
}

uint64_t siri::dialogengine::SemanticFeatureConstraint::GetValue16(siri::dialogengine::SemanticFeatureConstraint *this)
{
  return morphun::util::StringUtils::to_u16string();
}

std::string *siri::dialogengine::SemanticFeatureConstraint::SetValue(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

uint64_t siri::dialogengine::SemanticFeatureConstraint::GetGrammarFeature(std::string *a1, uint64_t a2)
{
  Features = (int **)siri::dialogengine::GrammarFeature::GetFeatures(a2);
  long long v5 = *Features;
  uint64_t v6 = Features[1];
  if (*Features != v6)
  {
    while (1)
    {
      int v39 = *v5;
      if (*((char *)v5 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)v5 + 1), *((void *)v5 + 2));
      }
      else
      {
        long long v7 = *(_OWORD *)(v5 + 2);
        v40.__r_.__value_.__r.__words[2] = *((void *)v5 + 3);
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v7;
      }
      std::set<std::string>::set[abi:ne180100]((uint64_t *)v41, (const void ***)v5 + 4);
      char v42 = *((unsigned char *)v5 + 56);
      if (v39 == 1) {
        break;
      }
      if (v39 == 2)
      {
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v38, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
        }
        else {
          std::string v38 = v40;
        }
        uint64_t v8 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
        if ((v8 & 0x80u) == 0) {
          std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = a1->__r_.__value_.__l.__size_;
        }
        std::string::size_type v10 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        int v11 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v10 = v38.__r_.__value_.__l.__size_;
        }
        if (size == v10)
        {
          if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v12 = &v38;
          }
          else {
            unsigned int v12 = (std::string *)v38.__r_.__value_.__r.__words[0];
          }
          if ((v8 & 0x80) != 0)
          {
            BOOL v21 = memcmp(a1->__r_.__value_.__l.__data_, v12, a1->__r_.__value_.__l.__size_) == 0;
LABEL_60:
            if (v11 < 0) {
              goto LABEL_64;
            }
          }
          else
          {
            if (*((unsigned char *)&a1->__r_.__value_.__s + 23))
            {
              uint64_t v13 = v8 - 1;
              uint64_t v14 = a1;
              do
              {
                int v16 = v14->__r_.__value_.__s.__data_[0];
                uint64_t v14 = (std::string *)((char *)v14 + 1);
                int v15 = v16;
                int v18 = v12->__r_.__value_.__s.__data_[0];
                unsigned int v12 = (std::string *)((char *)v12 + 1);
                int v17 = v18;
                BOOL v19 = v13-- != 0;
                char v20 = v19;
                BOOL v21 = v15 == v17;
              }
              while (v15 == v17 && (v20 & 1) != 0);
              goto LABEL_60;
            }
            BOOL v21 = 1;
            if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_64:
              operator delete(v38.__r_.__value_.__l.__data_);
              if (v21)
              {
LABEL_65:
                char v35 = 0;
                uint64_t v2 = 2;
                goto LABEL_81;
              }
              goto LABEL_80;
            }
          }
        }
        else
        {
          BOOL v21 = 0;
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_64;
          }
        }
        if (v21) {
          goto LABEL_65;
        }
      }
LABEL_80:
      char v35 = 1;
LABEL_81:
      std::__tree<std::string>::destroy((uint64_t)v41, (char *)v41[1]);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if ((v35 & 1) == 0) {
        return v2;
      }
      v5 += 16;
      if (v5 == v6) {
        return 0;
      }
    }
    std::set<std::string>::set[abi:ne180100]((uint64_t *)&v38, v41);
    if (SHIBYTE(a1[1].__r_.__value_.__r.__words[2]) < 0)
    {
      if (a1[1].__r_.__value_.__l.__size_)
      {
LABEL_11:
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v40;
        }
        uint64_t v22 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
        if ((v22 & 0x80u) == 0) {
          std::string::size_type v23 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v23 = a1->__r_.__value_.__l.__size_;
        }
        std::string::size_type v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        int v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v24 = __p.__r_.__value_.__l.__size_;
        }
        if (v23 != v24)
        {
          BOOL v34 = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_68;
          }
          goto LABEL_75;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((v22 & 0x80) != 0)
        {
          BOOL v34 = memcmp(a1->__r_.__value_.__l.__data_, p_p, a1->__r_.__value_.__l.__size_) == 0;
        }
        else
        {
          if (!*((unsigned char *)&a1->__r_.__value_.__s + 23))
          {
            BOOL v34 = 1;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_68:
              if (!v34) {
                goto LABEL_79;
              }
              goto LABEL_76;
            }
LABEL_75:
            operator delete(__p.__r_.__value_.__l.__data_);
            if (!v34)
            {
LABEL_79:
              std::__tree<std::string>::destroy((uint64_t)&v38, (char *)v38.__r_.__value_.__l.__size_);
              goto LABEL_80;
            }
LABEL_76:
            if (a1[2].__r_.__value_.__s.__data_[0]
              || &v38.__r_.__value_.__r.__words[1] != (std::string::size_type *)std::__tree<std::string>::find<std::string>((uint64_t)&v38, (const void **)&a1[1].__r_.__value_.__l.__data_))
            {
              goto LABEL_78;
            }
            goto LABEL_79;
          }
          uint64_t v27 = v22 - 1;
          uint64_t v28 = a1;
          do
          {
            int v30 = v28->__r_.__value_.__s.__data_[0];
            uint64_t v28 = (std::string *)((char *)v28 + 1);
            int v29 = v30;
            int v32 = p_p->__r_.__value_.__s.__data_[0];
            p_p = (std::string *)((char *)p_p + 1);
            int v31 = v32;
            BOOL v19 = v27-- != 0;
            char v33 = v19;
            BOOL v34 = v29 == v31;
          }
          while (v29 == v31 && (v33 & 1) != 0);
        }
        if ((v25 & 0x80000000) == 0) {
          goto LABEL_68;
        }
        goto LABEL_75;
      }
    }
    else if (*((unsigned char *)&a1[1].__r_.__value_.__s + 23))
    {
      goto LABEL_11;
    }
    if (&v38.__r_.__value_.__r.__words[1] != (std::string::size_type *)std::__tree<std::string>::find<std::string>((uint64_t)&v38, (const void **)&a1->__r_.__value_.__l.__data_))
    {
      std::string::operator=(a1 + 1, a1);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v40;
      }
      if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(a1->__r_.__value_.__l.__data_);
      }
      *a1 = __p;
LABEL_78:
      std::__tree<std::string>::destroy((uint64_t)&v38, (char *)v38.__r_.__value_.__l.__size_);
      char v35 = 0;
      uint64_t v2 = 1;
      goto LABEL_81;
    }
    goto LABEL_79;
  }
  return 0;
}

void sub_1C60F5238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

void siri::dialogengine::SemanticFeatureConstraint::ValidateString(siri::dialogengine::Context *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  uint64_t v4 = a2[23];
  signed __int8 v5 = v4;
  uint64_t v6 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v7 = a2[23];
  }
  else {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (v7)
  {
    std::string::size_type v10 = *(unsigned __int8 **)a2;
    if ((v4 & 0x80u) == 0) {
      int v11 = a2;
    }
    else {
      int v11 = *(unsigned __int8 **)a2;
    }
    unsigned int v12 = &v11[v7];
    while (1)
    {
      unsigned int v13 = *v11;
      if (v13 - 97 >= 0x1A
        && (vmaxv_u16((uint16x4_t)vceq_s16(vdup_n_s16(v13), (int16x4_t)0x2D005D005B0009)) & 1) == 0
        && v13 != 95
        && (v13 & 0xFD) != 0x2C
        && (v13 & 0xFE) != 0x28
        && v13 != 39
        && (v13 & 0xFD) != 0x20
        && (v13 - 48) >= 0xAu
        && (v13 - 65) > 0x19u)
      {
        break;
      }
      ++v11;
      if (!--v7) {
        goto LABEL_36;
      }
    }
    if (v12 != v11)
    {
      std::operator+<char>();
      uint64_t v14 = std::string::append((std::string *)&__s1, "'");
      std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
      *(void *)&long long v98 = v14->__r_.__value_.__l.__size_;
      *(void *)((char *)&v98 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      unint64_t v17 = *(void *)(a3 + 16);
      unint64_t v18 = *(void *)(a3 + 8);
      if (v18 >= v17)
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(void *)a3) >> 3);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(void *)a3) >> 3);
        if (2 * v22 > v21) {
          unint64_t v21 = 2 * v22;
        }
        if (v22 >= 0x555555555555555) {
          unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v23 = v21;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v23) {
          std::string::size_type v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v23);
        }
        else {
          std::string::size_type v24 = 0;
        }
        int v25 = v24 + v20;
        __v.__first_ = v24;
        __v.__begin_ = v25;
        __v.__end_cap_.__value_ = &v24[v23];
        v25->__r_.__value_.__r.__words[0] = v15;
        v25->__r_.__value_.__l.__size_ = v98;
        *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v98 + 7);
        *((unsigned char *)&v25->__r_.__value_.__s + 23) = v16;
        __v.__end_ = v25 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        unint64_t v19 = *(void *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        *(void *)unint64_t v18 = v15;
        *(void *)(v18 + 8) = v98;
        *(void *)(v18 + 15) = *(void *)((char *)&v98 + 7);
        *(unsigned char *)(v18 + 23) = v16;
        unint64_t v19 = v18 + 24;
        *(void *)(a3 + 8) = v18 + 24;
      }
      *(void *)(a3 + 8) = v19;
      if (SHIBYTE(__s1.__end_) < 0) {
        operator delete(__s1.__first_);
      }
      uint64_t v4 = a2[23];
      std::string::size_type v10 = *(unsigned __int8 **)a2;
      uint64_t v6 = *((void *)a2 + 1);
      signed __int8 v5 = a2[23];
    }
LABEL_36:
    if (v5 >= 0) {
      unsigned int v26 = a2;
    }
    else {
      unsigned int v26 = v10;
    }
    if (v5 >= 0) {
      uint64_t v27 = v4;
    }
    else {
      uint64_t v27 = v6;
    }
    if (v27)
    {
      uint64_t v28 = 0;
      uint64_t v29 = v27;
      int v30 = v26;
      do
      {
        int v31 = *v30++;
        if (v31 == 40) {
          ++v28;
        }
        --v29;
      }
      while (v29);
      uint64_t v32 = 0;
      do
      {
        int v33 = *v26++;
        if (v33 == 41) {
          ++v32;
        }
        --v27;
      }
      while (v27);
      if (v28 != v32)
      {
        std::operator+<char>();
        BOOL v34 = std::string::append((std::string *)&__s1, "'");
        std::string::size_type v35 = v34->__r_.__value_.__r.__words[0];
        *(void *)&long long v98 = v34->__r_.__value_.__l.__size_;
        *(void *)((char *)&v98 + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
        char v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        unint64_t v37 = *(void *)(a3 + 16);
        unint64_t v38 = *(void *)(a3 + 8);
        if (v38 >= v37)
        {
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *(void *)a3) >> 3);
          unint64_t v41 = v40 + 1;
          if (v40 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *(void *)a3) >> 3);
          if (2 * v42 > v41) {
            unint64_t v41 = 2 * v42;
          }
          if (v42 >= 0x555555555555555) {
            unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v43 = v41;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
          if (v43) {
            long long v44 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v43);
          }
          else {
            long long v44 = 0;
          }
          uint64_t v45 = v44 + v40;
          __v.__first_ = v44;
          __v.__begin_ = v45;
          __v.__end_cap_.__value_ = &v44[v43];
          v45->__r_.__value_.__r.__words[0] = v35;
          v45->__r_.__value_.__l.__size_ = v98;
          *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v98 + 7);
          *((unsigned char *)&v45->__r_.__value_.__s + 23) = v36;
          __v.__end_ = v45 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
          unint64_t v39 = *(void *)(a3 + 8);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          *(void *)unint64_t v38 = v35;
          *(void *)(v38 + 8) = v98;
          *(void *)(v38 + 15) = *(void *)((char *)&v98 + 7);
          *(unsigned char *)(v38 + 23) = v36;
          unint64_t v39 = v38 + 24;
          *(void *)(a3 + 8) = v38 + 24;
        }
        *(void *)(a3 + 8) = v39;
        if (SHIBYTE(__s1.__end_) < 0) {
          operator delete(__s1.__first_);
        }
        uint64_t v4 = a2[23];
        std::string::size_type v10 = *(unsigned __int8 **)a2;
        uint64_t v6 = *((void *)a2 + 1);
        signed __int8 v5 = a2[23];
      }
    }
    if (v5 < 0) {
      uint64_t v4 = v6;
    }
    else {
      std::string::size_type v10 = a2;
    }
    if (v4)
    {
      char v46 = 0;
      uint64_t v47 = v4;
      __int16 v48 = v10;
      do
      {
        int v49 = *v48++;
        if (v49 == 34) {
          ++v46;
        }
        --v47;
      }
      while (v47);
      if (v46) {
        goto LABEL_81;
      }
      char v50 = 0;
      do
      {
        int v51 = *v10++;
        if (v51 == 39) {
          ++v50;
        }
        --v4;
      }
      while (v4);
      if (v50)
      {
LABEL_81:
        std::operator+<char>();
        uint64_t v52 = std::string::append((std::string *)&__s1, "'");
        std::string::size_type v53 = v52->__r_.__value_.__r.__words[0];
        *(void *)&long long v98 = v52->__r_.__value_.__l.__size_;
        *(void *)((char *)&v98 + 7) = *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1] + 7);
        char v54 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        unint64_t v55 = *(void *)(a3 + 16);
        unint64_t v56 = *(void *)(a3 + 8);
        if (v56 >= v55)
        {
          unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - *(void *)a3) >> 3);
          unint64_t v59 = v58 + 1;
          if (v58 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - *(void *)a3) >> 3);
          if (2 * v60 > v59) {
            unint64_t v59 = 2 * v60;
          }
          if (v60 >= 0x555555555555555) {
            unint64_t v61 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v61 = v59;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
          if (v61) {
            int v62 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v61);
          }
          else {
            int v62 = 0;
          }
          int v63 = v62 + v58;
          __v.__first_ = v62;
          __v.__begin_ = v63;
          __v.__end_cap_.__value_ = &v62[v61];
          v63->__r_.__value_.__r.__words[0] = v53;
          v63->__r_.__value_.__l.__size_ = v98;
          *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v98 + 7);
          *((unsigned char *)&v63->__r_.__value_.__s + 23) = v54;
          __v.__end_ = v63 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
          unint64_t v57 = *(void *)(a3 + 8);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          *(void *)unint64_t v56 = v53;
          *(void *)(v56 + 8) = v98;
          *(void *)(v56 + 15) = *(void *)((char *)&v98 + 7);
          *(unsigned char *)(v56 + 23) = v54;
          unint64_t v57 = v56 + 24;
          *(void *)(a3 + 8) = v56 + 24;
        }
        *(void *)(a3 + 8) = v57;
        if (SHIBYTE(__s1.__end_) < 0) {
          operator delete(__s1.__first_);
        }
      }
    }
    siri::dialogengine::SemanticFeatureConstraint::ParseString(a2, (uint64_t)&v98);
    unint64_t v64 = (long long *)*((void *)&v98 + 1);
    BOOL v65 = (long long *)v98;
    if ((void)v98 != *((void *)&v98 + 1))
    {
      while (1)
      {
        if (*((char *)v65 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__v, *(const std::string::value_type **)v65, *((void *)v65 + 1));
        }
        else
        {
          long long v66 = *v65;
          __v.__end_ = (std::__split_buffer<std::string>::pointer)*((void *)v65 + 2);
          *(_OWORD *)&__v.__first_ = v66;
        }
        if (*((char *)v65 + 47) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__v.__end_cap_, *((const std::string::value_type **)v65 + 3), *((void *)v65 + 4));
        }
        else
        {
          std::__compressed_pair<std::string *> v67 = *(std::__compressed_pair<std::string *> *)((char *)v65 + 24);
          uint64_t v94 = *((void *)v65 + 5);
          __v.__end_cap_ = v67;
        }
        if (!*((unsigned char *)v65 + 48)) {
          goto LABEL_126;
        }
        siri::dialogengine::ResolveType(0, (uint64_t)a1, (uint64_t)&__v.__end_cap_, 1, (uint64_t)&__s1);
        uint64_t v68 = (std::string *)strlen(siri::dialogengine::TYPE_UNKNOWN);
        if ((SHIBYTE(__s1.__end_) & 0x80000000) == 0) {
          break;
        }
        if (v68 == __s1.__begin_)
        {
          if (v68 == (std::string *)-1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          std::__split_buffer<std::string>::pointer first = __s1.__first_;
          int v70 = memcmp(__s1.__first_, siri::dialogengine::TYPE_UNKNOWN, (size_t)v68);
          operator delete(first);
          if (v70) {
            goto LABEL_126;
          }
LABEL_110:
          std::operator+<char>();
          uint64_t v71 = std::string::append(&v92, "'");
          std::string::size_type v72 = v71->__r_.__value_.__r.__words[0];
          v97[0] = v71->__r_.__value_.__l.__size_;
          *(void *)((char *)v97 + 7) = *(std::string::size_type *)((char *)&v71->__r_.__value_.__r.__words[1] + 7);
          char v73 = HIBYTE(v71->__r_.__value_.__r.__words[2]);
          v71->__r_.__value_.__l.__size_ = 0;
          v71->__r_.__value_.__r.__words[2] = 0;
          v71->__r_.__value_.__r.__words[0] = 0;
          unint64_t v74 = *(void *)(a3 + 8);
          unint64_t v75 = *(void *)(a3 + 16);
          if (v74 >= v75)
          {
            unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - *(void *)a3) >> 3);
            unint64_t v80 = v79 + 1;
            if (v79 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - *(void *)a3) >> 3);
            if (2 * v81 > v80) {
              unint64_t v80 = 2 * v81;
            }
            if (v81 >= 0x555555555555555) {
              unint64_t v82 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v82 = v80;
            }
            __s1.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
            if (v82) {
              long long v83 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v82);
            }
            else {
              long long v83 = 0;
            }
            long long v84 = v83 + v79;
            __s1.__first_ = v83;
            __s1.__begin_ = v84;
            __s1.__end_cap_.__value_ = &v83[v82];
            std::string::size_type v85 = v97[0];
            v84->__r_.__value_.__r.__words[0] = v72;
            v84->__r_.__value_.__l.__size_ = v85;
            *(std::string::size_type *)((char *)&v84->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v97 + 7);
            *((unsigned char *)&v84->__r_.__value_.__s + 23) = v73;
            __s1.__end_ = v84 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__s1);
            unint64_t v77 = *(void *)(a3 + 8);
            std::__split_buffer<std::string>::~__split_buffer(&__s1);
          }
          else
          {
            uint64_t v76 = v97[0];
            *(void *)unint64_t v74 = v72;
            *(void *)(v74 + 8) = v76;
            *(void *)(v74 + 15) = *(void *)((char *)v97 + 7);
            *(unsigned char *)(v74 + 23) = v73;
            unint64_t v77 = v74 + 24;
            *(void *)(a3 + 8) = v74 + 24;
          }
          *(void *)(a3 + 8) = v77;
          if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_126;
          }
          std::__split_buffer<std::string>::pointer v78 = (std::__split_buffer<std::string>::pointer)v92.__r_.__value_.__r.__words[0];
          goto LABEL_125;
        }
        std::__split_buffer<std::string>::pointer v78 = __s1.__first_;
LABEL_125:
        operator delete(v78);
LABEL_126:
        if (SHIBYTE(v94) < 0) {
          operator delete(__v.__end_cap_.__value_);
        }
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        BOOL v65 = (long long *)((char *)v65 + 56);
        if (v65 == v64)
        {
          if ((void)v98 != *((void *)&v98 + 1))
          {
            siri::dialogengine::ValidateInflection(a1, (const char *)&v98, (uint64_t)&__v);
            std::__split_buffer<std::string>::pointer v86 = __v.__first_;
            std::__split_buffer<std::string>::pointer begin = __v.__begin_;
            while (v86 != begin)
            {
              if (SHIBYTE(v86->__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&__s1, v86->__r_.__value_.__l.__data_, v86->__r_.__value_.__l.__size_);
              }
              else
              {
                long long v88 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
                __s1.__end_ = (std::__split_buffer<std::string>::pointer)v86->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__s1.__first_ = v88;
              }
              unint64_t v89 = *(void *)(a3 + 8);
              if (v89 >= *(void *)(a3 + 16))
              {
                uint64_t v91 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, (long long *)&__s1);
              }
              else
              {
                if (SHIBYTE(__s1.__end_) < 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), (const std::string::value_type *)__s1.__first_, (std::string::size_type)__s1.__begin_);
                }
                else
                {
                  long long v90 = *(_OWORD *)&__s1.__first_;
                  *(void *)(v89 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = __s1.__end_;
                  *(_OWORD *)unint64_t v89 = v90;
                }
                uint64_t v91 = v89 + 24;
                *(void *)(a3 + 8) = v89 + 24;
              }
              *(void *)(a3 + 8) = v91;
              if (SHIBYTE(__s1.__end_) < 0) {
                operator delete(__s1.__first_);
              }
              ++v86;
            }
            __s1.__first_ = (std::__split_buffer<std::string>::pointer)&__v;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
          }
          goto LABEL_147;
        }
      }
      if (v68 != (std::string *)HIBYTE(__s1.__end_) || memcmp(&__s1, siri::dialogengine::TYPE_UNKNOWN, (size_t)v68)) {
        goto LABEL_126;
      }
      goto LABEL_110;
    }
LABEL_147:
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v98;
    std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
}

void sub_1C60F5BE4(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, std::__split_buffer<std::string> *a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__pa,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a13);
  if (a29 < 0) {
    operator delete(__pa);
  }
  *(void *)(v30 - 128) = v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 128));
  _Unwind_Resume(a1);
}

void siri::dialogengine::SemanticFeatureConstraint::ParseString(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  siri::dialogengine::StringSplit(a1, ",", &v21);
  uint64_t v3 = v21;
  uint64_t v4 = v22;
  if (v21 != v22)
  {
    while (1)
    {
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v5 = *v3;
        __str.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v5;
      }
      siri::dialogengine::StringTrim(" \t\n\r", &__str, &v17);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string __str = v17;
      int64_t v6 = (v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(v17.__r_.__value_.__r.__words[2])
         : __str.__r_.__value_.__l.__size_;
      uint64_t v7 = (v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__str
         : (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v6 >= 1) {
        break;
      }
LABEL_29:
      std::string::basic_string[abi:ne180100]<0>(&v16, "");
      siri::dialogengine::SemanticFeatureConstraint::SemanticFeatureConstraint(&v17, (long long *)&__str, (long long *)&v16);
      std::vector<siri::dialogengine::SemanticFeatureConstraint>::push_back[abi:ne180100]((void **)a2, (long long *)&v17);
      if (v19 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      {
        unsigned int v13 = (void *)v17.__r_.__value_.__r.__words[0];
LABEL_33:
        operator delete(v13);
      }
LABEL_34:
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      uint64_t v3 = (long long *)((char *)v3 + 24);
      if (v3 == v4) {
        goto LABEL_58;
      }
    }
    uint64_t v8 = (char *)v7 + v6;
    long long v9 = v7;
    while (1)
    {
      std::string::size_type v10 = memchr(v9, 40, v6);
      if (!v10) {
        goto LABEL_29;
      }
      if (*v10 == 40) {
        break;
      }
      long long v9 = (std::string *)(v10 + 1);
      int64_t v6 = v8 - (unsigned char *)v9;
      if (v8 - (unsigned char *)v9 < 1) {
        goto LABEL_29;
      }
    }
    if (v10 == v8) {
      goto LABEL_29;
    }
    std::string::size_type v11 = v10 - (unsigned char *)v7;
    if (v11 == -1) {
      goto LABEL_29;
    }
    std::string::basic_string(&v17, &__str, 0, v11, (std::allocator<char> *)&v15);
    siri::dialogengine::StringTrim(" \t\n\r", &v17, &v16);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    std::string::basic_string(&v14, &__str, v11, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v23);
    siri::dialogengine::StringTrim("()", &v14, &v17);
    siri::dialogengine::StringTrim(" \t\n\r", &v17, &v15);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v17, "\"");
    if (siri::dialogengine::StringStartsWith(&v15, (unsigned __int8 *)&v17))
    {
      BOOL v12 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v14, "'");
      BOOL v12 = siri::dialogengine::StringStartsWith(&v15, (unsigned __int8 *)&v14);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v17.__r_.__value_.__l.__data_);
      if (!v12) {
        goto LABEL_50;
      }
    }
    else if (!v12)
    {
      goto LABEL_50;
    }
    siri::dialogengine::StringTrim("\"", &v15, &v14);
    siri::dialogengine::StringTrim("'", &v14, &v17);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    std::string v15 = v17;
    *((unsigned char *)&v17.__r_.__value_.__s + 23) = 0;
    v17.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
LABEL_50:
    siri::dialogengine::GrammarFeature::GetCanonicalGrammarName((uint64_t)&v16, &v17);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    std::string v16 = v17;
    siri::dialogengine::SemanticFeatureConstraint::SemanticFeatureConstraint(&v17, (long long *)&v16, (long long *)&v15, !v12);
    std::vector<siri::dialogengine::SemanticFeatureConstraint>::push_back[abi:ne180100]((void **)a2, (long long *)&v17);
    if (v19 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    {
      unsigned int v13 = (void *)v15.__r_.__value_.__r.__words[0];
      goto LABEL_33;
    }
    goto LABEL_34;
  }
LABEL_58:
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
}

void sub_1C60F60E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
}

void std::vector<siri::dialogengine::SemanticFeatureConstraint>::push_back[abi:ne180100](void **a1, long long *a2)
{
  uint64_t v4 = (char *)a1[1];
  long long v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a1) >> 3);
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) > 0x492492492492492) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x249249249249249) {
      unint64_t v12 = 0x492492492492492;
    }
    else {
      unint64_t v12 = v10;
    }
    unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SemanticFeatureConstraint>>(v12);
    std::string v14 = &v13[56 * v9];
    std::string v16 = &v13[56 * v15];
    long long v17 = *a2;
    *((void *)v14 + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string v14 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v14 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v14 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    v14[48] = *((unsigned char *)a2 + 48);
    uint64_t v8 = v14 + 56;
    char v19 = (char *)*a1;
    unint64_t v20 = (char *)a1[1];
    if (v20 == *a1)
    {
      *a1 = v14;
      a1[1] = v8;
      a1[2] = v16;
    }
    else
    {
      do
      {
        long long v21 = *(_OWORD *)(v20 - 56);
        *((void *)v14 - 5) = *((void *)v20 - 5);
        *(_OWORD *)(v14 - 56) = v21;
        *((void *)v20 - 6) = 0;
        *((void *)v20 - 5) = 0;
        *((void *)v20 - 7) = 0;
        long long v22 = *((_OWORD *)v20 - 2);
        *((void *)v14 - 2) = *((void *)v20 - 2);
        *((_OWORD *)v14 - 2) = v22;
        *((void *)v20 - 3) = 0;
        *((void *)v20 - 2) = 0;
        *((void *)v20 - 4) = 0;
        *(v14 - 8) = *(v20 - 8);
        v14 -= 56;
        v20 -= 56;
      }
      while (v20 != v19);
      unint64_t v20 = (char *)*a1;
      uint64_t v23 = (uint64_t)a1[1];
      *a1 = v14;
      a1[1] = v8;
      a1[2] = v16;
      while ((char *)v23 != v20)
      {
        v23 -= 56;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v23);
      }
    }
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    long long v6 = *a2;
    *((void *)v4 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v7 = *(long long *)((char *)a2 + 24);
    *((void *)v4 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    v4[48] = *((unsigned char *)a2 + 48);
    uint64_t v8 = v4 + 56;
  }
  a1[1] = v8;
}

void siri::dialogengine::SemanticFeatureConstraint::FromString(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  siri::dialogengine::SemanticFeatureConstraint::ParseString(a2, (uint64_t)a3);
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    uint64_t v6 = *a3 + 24;
    do
    {
      if (*(unsigned char *)(v6 + 24))
      {
        std::string::basic_string[abi:ne180100]<0>(&v25, "");
        std::string::basic_string[abi:ne180100]<0>(v23, "");
        siri::dialogengine::ResolveValue(&v26, a1, v6, 1, &v25, v23);
        if (v24 < 0) {
          operator delete(v23[0]);
        }
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
        uint64_t v7 = v26;
        if (v26)
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v26 + 48))(&v10, v26);
          if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v25, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
          }
          else {
            std::string v25 = v10;
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v25, "");
        }
        if (*(char *)(v6 + 23) < 0) {
          operator delete(*(void **)v6);
        }
        long long v8 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
        *(void *)(v6 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *((void *)&v25.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v6 = v8;
        *((unsigned char *)&v25.__r_.__value_.__s + 23) = 0;
        v25.__r_.__value_.__s.__data_[0] = 0;
        if (v7)
        {
          if (v22 < 0) {
            operator delete(__p);
          }
          if (v20 < 0) {
            operator delete(v19);
          }
          if (v18 < 0) {
            operator delete(v17);
          }
          if (v16 < 0) {
            operator delete(v15);
          }
          if (v14 < 0) {
            operator delete(v13);
          }
          if (v12 < 0) {
            operator delete(v11);
          }
          if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v10.__r_.__value_.__l.__data_);
          }
        }
        *(unsigned char *)(v6 + 24) = 0;
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
      }
      uint64_t v9 = v6 + 32;
      v6 += 56;
    }
    while (v9 != v5);
  }
}

void sub_1C60F65C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a9);
  char v12 = *(std::__shared_weak_count **)(v10 - 72);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *(void *)(v10 - 112) = v9;
  std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 112));
  _Unwind_Resume(a1);
}

void siri::dialogengine::SemanticFeatureConstraint::ToString(long long **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = 0;
  char v22 = 0;
  unint64_t v23 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v5 = *v3;
        v18.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v5;
      }
      if (*((char *)v3 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)v3 + 3), *((void *)v3 + 4));
      }
      else
      {
        long long v6 = *(long long *)((char *)v3 + 24);
        v19.__r_.__value_.__r.__words[2] = *((void *)v3 + 5);
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v6;
      }
      char v20 = *((unsigned char *)v3 + 48);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v17, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v17 = v18;
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v16, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
      }
      else {
        std::string v16 = v19;
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = v16.__r_.__value_.__l.__size_;
        operator delete(v16.__r_.__value_.__l.__data_);
        if (size)
        {
LABEL_18:
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
          }
          else {
            std::string __p = v19;
          }
          long long v8 = std::string::insert(&__p, 0, "=");
          long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
          v16.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v9;
          v8->__r_.__value_.__l.__size_ = 0;
          v8->__r_.__value_.__r.__words[2] = 0;
          v8->__r_.__value_.__r.__words[0] = 0;
          if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v10 = &v16;
          }
          else {
            uint64_t v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
          }
          if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v11 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v11 = v16.__r_.__value_.__l.__size_;
          }
          std::string::append(&v17, (const std::string::value_type *)v10, v11);
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      else if (*((unsigned char *)&v16.__r_.__value_.__s + 23))
      {
        goto LABEL_18;
      }
      char v12 = v22;
      if ((unint64_t)v22 >= v23)
      {
        char v14 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v21, (long long *)&v17);
      }
      else
      {
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v22, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v13 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
          v22->__r_.__value_.__r.__words[2] = v17.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        char v14 = v12 + 1;
      }
      char v22 = v14;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      uint64_t v3 = (long long *)((char *)v3 + 56);
    }
    while (v3 != v4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, ", ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>(a2, v21, (uint64_t)v22, (uint64_t)&v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
}

void sub_1C60F68C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)(v35 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'siri::dialogengine::GroupSwitch::Validate(siri::dialogengine::GroupSwitch *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::GroupSwitch::Validate((siri::dialogengine::GroupSwitch *)((char *)this - 64), a2);
}

uint64_t siri::dialogengine::GroupSwitch::Validate(siri::dialogengine::GroupSwitch *this, siri::dialogengine::Context *a2)
{
  char v4 = siri::dialogengine::Group::Validate((uint64_t **)this, a2);
  long long v5 = (_OWORD *)((char *)this + 256);
  siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)this + 256, 1, (uint64_t)&v61);
  if (*((char *)this + 279) < 0)
  {
    std::string::__init_copy_ctor_external(&v48, *((const std::string::value_type **)this + 32), *((void *)this + 33));
  }
  else
  {
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *v5;
    v48.__r_.__value_.__r.__words[2] = *((void *)this + 34);
  }
  if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&v48.__r_.__value_.__s + 23)) {
      goto LABEL_6;
    }
LABEL_10:
    std::string::basic_string[abi:ne180100]<0>(&v48, "Switch elements cannot have an empty 'value' attribute");
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v48, (uint64_t)this);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v10 = (void *)v48.__r_.__value_.__r.__words[0];
LABEL_117:
      operator delete(v10);
    }
LABEL_118:
    char v4 = 0;
    goto LABEL_119;
  }
  std::string::size_type size = v48.__r_.__value_.__l.__size_;
  operator delete(v48.__r_.__value_.__l.__data_);
  if (!size) {
    goto LABEL_10;
  }
LABEL_6:
  size_t v6 = strlen(siri::dialogengine::TYPE_UNKNOWN);
  size_t v7 = v6;
  if ((char)v63 < 0)
  {
    if ((void *)v6 == v62)
    {
      if (v6 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      long long v8 = v61;
LABEL_15:
      if (memcmp(v8, siri::dialogengine::TYPE_UNKNOWN, v7)) {
        goto LABEL_16;
      }
      if (*((char *)this + 279) < 0)
      {
        std::string::__init_copy_ctor_external(&v60, *((const std::string::value_type **)this + 32), *((void *)this + 33));
      }
      else
      {
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *v5;
        v60.__r_.__value_.__r.__words[2] = *((void *)this + 34);
      }
      unint64_t v42 = std::string::insert(&v60, 0, "Switch element has a 'value' with unknown type: ");
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v48, (uint64_t)this);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v10 = (void *)v60.__r_.__value_.__r.__words[0];
        goto LABEL_117;
      }
      goto LABEL_118;
    }
  }
  else if (v6 == v63)
  {
    long long v8 = (void **)&v61;
    goto LABEL_15;
  }
LABEL_16:
  *(_OWORD *)&v60.__r_.__value_.__r.__words[1] = 0uLL;
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60.__r_.__value_.__l.__size_;
  memset(&v48, 0, sizeof(v48));
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(&v48, *((void **)this + 26), *((void **)this + 27), (uint64_t)(*((void *)this + 27) - *((void *)this + 26)) >> 4);
  std::string::size_type v45 = v48.__r_.__value_.__l.__size_;
  std::string::size_type v11 = v48.__r_.__value_.__r.__words[0];
  if (v48.__r_.__value_.__r.__words[0] == v48.__r_.__value_.__l.__size_) {
    goto LABEL_84;
  }
  int v12 = 0;
  do
  {
    long long v13 = *(siri::dialogengine::Node **)v11;
    char v14 = *(std::__shared_weak_count **)(v11 + 8);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v15 = v12;
    uint64_t v47 = v14;
    siri::dialogengine::GetCases((siri::dialogengine *)&v58, v13);
    std::string v16 = (long long *)*((void *)&v58 + 1);
    std::string v17 = (long long *)v58;
    BOOL v18 = (void)v58 == *((void *)&v58 + 1);
    if ((v18 & v15) == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Switch elements can only have a single default (no case value)");
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, (uint64_t)this);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      char v4 = 0;
      int v46 = 1;
      std::string v16 = (long long *)*((void *)&v58 + 1);
      std::string v17 = (long long *)v58;
    }
    else
    {
      int v46 = v18 | v15;
    }
    while (v17 != v16)
    {
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v17, *((void *)v17 + 1));
      }
      else
      {
        long long v19 = *v17;
        __p.__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
      }
      siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)&__p, 1, (uint64_t)__s1);
      char v20 = (void *)strlen(siri::dialogengine::TYPE_UNKNOWN);
      size_t v21 = (size_t)v20;
      unint64_t v22 = v56;
      if ((char)v56 < 0)
      {
        if (v20 == __s1[1])
        {
          if (v20 == (void *)-1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          unint64_t v23 = (void **)__s1[0];
LABEL_34:
          if (!memcmp(v23, siri::dialogengine::TYPE_UNKNOWN, v21)) {
            goto LABEL_65;
          }
        }
      }
      else if (v20 == (void *)v56)
      {
        unint64_t v23 = __s1;
        goto LABEL_34;
      }
      if ((v22 & 0x80u) == 0) {
        char v24 = (void *)v22;
      }
      else {
        char v24 = __s1[1];
      }
      unint64_t v25 = v63;
      if ((v63 & 0x80u) != 0) {
        unint64_t v25 = (unint64_t)v62;
      }
      if (v24 != (void *)v25) {
        goto LABEL_52;
      }
      if ((v63 & 0x80u) == 0) {
        uint64_t v26 = (void **)&v61;
      }
      else {
        uint64_t v26 = v61;
      }
      if ((v22 & 0x80) != 0)
      {
        if (memcmp(__s1[0], v26, (size_t)__s1[1])) {
          goto LABEL_52;
        }
      }
      else if (v22)
      {
        uint64_t v27 = __s1;
        while (*(unsigned __int8 *)v27 == *(unsigned __int8 *)v26)
        {
          uint64_t v27 = (void **)((char *)v27 + 1);
          uint64_t v26 = (void **)((char *)v26 + 1);
          if (!--v22) {
            goto LABEL_64;
          }
        }
LABEL_52:
        std::operator+<char>();
        uint64_t v28 = std::string::append(&v51, ") from switch value: ");
        long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v31 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v32 = std::string::append(&v52, (const std::string::value_type *)p_p, v31);
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        std::string::size_type v54 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string::size_type v53 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)v53, (uint64_t)this);
        if (SHIBYTE(v54) < 0) {
          operator delete(v53[0]);
        }
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_68;
        }
        BOOL v34 = (void *)v51.__r_.__value_.__r.__words[0];
LABEL_67:
        operator delete(v34);
        goto LABEL_68;
      }
LABEL_64:
      if (siri::dialogengine::IsPrimitiveType((const void **)__s1)) {
        goto LABEL_69;
      }
LABEL_65:
      std::operator+<char>();
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)v53, (uint64_t)this);
      if (SHIBYTE(v54) < 0)
      {
        BOOL v34 = v53[0];
        goto LABEL_67;
      }
LABEL_68:
      char v4 = 0;
LABEL_69:
      siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)v53);
      if (&v60.__r_.__value_.__r.__words[1] != (std::string::size_type *)std::__tree<std::string>::find<std::string>((uint64_t)&v60, (const void **)v53))
      {
        std::operator+<char>();
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v52, (uint64_t)this);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        char v4 = 0;
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v60, (const void **)v53, (uint64_t)v53);
      if (SHIBYTE(v54) < 0) {
        operator delete(v53[0]);
      }
      if ((char)v56 < 0) {
        operator delete(__s1[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string v17 = (long long *)((char *)v17 + 24);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
    v11 += 16;
    int v12 = v46;
  }
  while (v11 != v45);
LABEL_84:
  *(void *)&long long v58 = &v48;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  siri::dialogengine::ValidateVariableVersion((uint64_t)a2, (uint64_t)this + 256, &v58);
  uint64_t v35 = v59;
  if ((v59 & 0x80u) != 0) {
    uint64_t v35 = *((void *)&v58 + 1);
  }
  if (v35)
  {
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &v58, (uint64_t)this);
    char v4 = 0;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&__p, (const void ***)this + 9);
  std::string::size_type v36 = __p.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[1])
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v48, (long long *)(v36 + 32));
      std::string::basic_string[abi:ne180100]<0>(v53, "switch");
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)v53, (uint64_t)&v48, __s1);
      if (SHIBYTE(v54) < 0) {
        operator delete(v53[0]);
      }
      unint64_t v37 = v56;
      unsigned __int8 v38 = v56;
      if ((v56 & 0x80u) != 0) {
        unint64_t v37 = (unint64_t)__s1[1];
      }
      if (v37)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)__s1, 0);
        char v4 = 0;
        unsigned __int8 v38 = v56;
      }
      if ((v38 & 0x80) != 0) {
        operator delete(__s1[0]);
      }
      if (v50 < 0) {
        operator delete(v49);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      unint64_t v39 = *(std::string **)(v36 + 8);
      if (v39)
      {
        do
        {
          unint64_t v40 = v39;
          unint64_t v39 = (std::string *)v39->__r_.__value_.__r.__words[0];
        }
        while (v39);
      }
      else
      {
        do
        {
          unint64_t v40 = *(std::string **)(v36 + 16);
          BOOL v41 = v40->__r_.__value_.__r.__words[0] == v36;
          std::string::size_type v36 = (std::string::size_type)v40;
        }
        while (!v41);
      }
      std::string::size_type v36 = (std::string::size_type)v40;
    }
    while (v40 != (std::string *)&__p.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)__p.__r_.__value_.__l.__size_);
  if ((char)v59 < 0) {
    operator delete((void *)v58);
  }
  std::__tree<std::string>::destroy((uint64_t)&v60, (char *)v60.__r_.__value_.__l.__size_);
LABEL_119:
  if ((char)v63 < 0) {
    operator delete(v61);
  }
  return v4 & 1;
}

void sub_1C60F7094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (*(char *)(v53 - 89) < 0) {
    operator delete(*(void **)(v53 - 112));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetCases(siri::dialogengine *this, siri::dialogengine::Node *a2)
{
  if (*((char *)a2 + 167) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)a2 + 6);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    siri::dialogengine::ParseStringList((uint64_t *)&__p, 0, (uint64_t *)this);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      return;
    }
    goto LABEL_8;
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (v4 < 0) {
LABEL_8:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1C60F732C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'siri::dialogengine::GroupSwitch::~GroupSwitch(siri::dialogengine::GroupSwitch *this)
{
  uint64_t v1 = (siri::dialogengine::GroupSwitch *)((char *)this - 64);
  *((void *)this - 8) = &unk_1F2125FF0;
  *(void *)this = &unk_1F2126048;
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  siri::dialogengine::Group::~Group(v1);
  JUMPOUT(0x1C8796D70);
}

{
  siri::dialogengine::Group *v1;
  uint64_t vars8;

  uint64_t v1 = (siri::dialogengine::GroupSwitch *)((char *)this - 64);
  *((void *)this - 8) = &unk_1F2125FF0;
  *(void *)this = &unk_1F2126048;
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  siri::dialogengine::Group::~Group(v1);
}

void siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::GroupSwitch *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t *a3@<X8>)
{
  siri::dialogengine::Node::GetIdForDebug(this, a2, 0, &v40);
  size_t v6 = std::string::insert(&v40, 0, "Executing 'Switch' group");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v61[0] = (void *)v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
  if (SHIBYTE(v61[0]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (((*(uint64_t (**)(siri::dialogengine::GroupSwitch *, siri::dialogengine::Context *))(*(void *)this + 48))(this, a2) & 1) == 0)
  {
    siri::dialogengine::Node::GetIdForDebug(this, a2, 0, &v40);
    long long v9 = std::string::insert(&v40, 0, "Condition for <switch> group failed - skipping: ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v61[0] = (void *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
    if (SHIBYTE(v61[0]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, (siri::dialogengine::Context *)((char *)a2 + 8));
  __int16 v8 = v71;
  siri::dialogengine::RequestInfo::~RequestInfo(__p);
  if ((v8 & 0x400) != 0)
  {
    {
      siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "GroupSwitch");
    }
    os_signpost_id_t v11 = os_signpost_id_generate((os_log_t)siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog);
    if (v11 - 1 > 0xFFFFFFFFFFFFFFFDLL)
    {
      if (!siri::dialogengine::GroupSwitch::IsPhrase(this))
      {
        siri::dialogengine::GroupSwitch::ExecuteFallthrough(this, a2, a3);
        return;
      }
    }
    else
    {
      os_signpost_id_t v12 = v11;
      long long v13 = siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog;
      if (os_signpost_enabled((os_log_t)siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog))
      {
        LOWORD(__p[0]) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v12, "SwitchFallthrough", "", (uint8_t *)__p, 2u);
      }
      if (!siri::dialogengine::GroupSwitch::IsPhrase(this))
      {
        siri::dialogengine::GroupSwitch::ExecuteFallthrough(this, a2, a3);
        long long v33 = siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog;
        if (os_signpost_enabled((os_log_t)siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog))
        {
          LOWORD(__p[0]) = 0;
          _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v33, OS_SIGNPOST_INTERVAL_END, v12, "SwitchFallthrough", "", (uint8_t *)__p, 2u);
        }
        return;
      }
      char v14 = siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog;
      if (os_signpost_enabled((os_log_t)siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog))
      {
        LOWORD(__p[0]) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v14, OS_SIGNPOST_INTERVAL_END, v12, "SwitchFallthrough", "", (uint8_t *)__p, 2u);
      }
    }
  }
  if (*((char *)this + 279) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)this + 32), *((void *)this + 33));
  }
  else
  {
    *(_OWORD *)std::string __p = *((_OWORD *)this + 16);
    v61[0] = *((void **)this + 34);
  }
  std::string::basic_string[abi:ne180100]<0>(&v40, "");
  std::string::basic_string[abi:ne180100]<0>(&v57, "");
  siri::dialogengine::ResolveValue((uint64_t **)a2, (const void **)__p, 1, (uint64_t)&v40, (uint64_t)&v57, &v58);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61[0]) < 0) {
    operator delete(__p[0]);
  }
  if (v58)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v58 + 48))(__p);
  }
  else
  {
    uint64_t v70 = 0;
    long long v68 = 0u;
    *(_OWORD *)long long v69 = 0u;
    *(_OWORD *)long long v66 = 0u;
    *(_OWORD *)std::__compressed_pair<std::string *> v67 = 0u;
    *(_OWORD *)unint64_t v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    *(_OWORD *)unsigned __int8 v63 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)unint64_t v61 = 0u;
  }
  uint64_t v17 = *((void *)this + 26);
  uint64_t v16 = *((void *)this + 27);
  if (v17 == v16)
  {
    long long v29 = 0;
    uint64_t v28 = 0;
LABEL_108:
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"  No match found for <switch> group", v15);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_123;
  }
  BOOL v34 = a3;
  uint64_t v35 = 0;
  unint64_t v37 = 0;
  unsigned __int8 v38 = 0;
  std::string::size_type v36 = 0;
  do
  {
    long long v19 = *(siri::dialogengine::Node **)v17;
    BOOL v18 = *(std::__shared_weak_count **)(v17 + 8);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v19)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"  Programming error: NULL node in <switch> group", v15);
LABEL_78:
      int v24 = 3;
      if (!v18) {
        goto LABEL_80;
      }
LABEL_79:
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      goto LABEL_80;
    }
    if (!(*(unsigned int (**)(siri::dialogengine::Node *, siri::dialogengine::Context *))(*(void *)v19 + 48))(v19, a2))goto LABEL_78; {
    siri::dialogengine::GetCases((siri::dialogengine *)&v57, v19);
    }
    std::string::size_type size = v57.__r_.__value_.__l.__size_;
    std::string::size_type v21 = v57.__r_.__value_.__r.__words[0];
    if (v57.__r_.__value_.__r.__words[0] == v57.__r_.__value_.__l.__size_)
    {
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
      int v24 = 3;
      unsigned __int8 v38 = v18;
      uint64_t v35 = v19;
    }
    else
    {
      while (1)
      {
        if (*(char *)(v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v21, *(void *)(v21 + 8));
        }
        else
        {
          long long v22 = *(_OWORD *)v21;
          v56.__r_.__value_.__r.__words[2] = *(void *)(v21 + 16);
          *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v22;
        }
        std::string::basic_string[abi:ne180100]<0>(&v40, "");
        std::string::basic_string[abi:ne180100]<0>(&v53, "");
        siri::dialogengine::ResolveValue((uint64_t **)a2, (const void **)&v56.__r_.__value_.__l.__data_, 1, (uint64_t)&v40, (uint64_t)&v53, &v54);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
        if (v54)
        {
          (*(void (**)(std::string *__return_ptr))(*(void *)v54 + 48))(&v40);
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v53, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
          }
          else {
            std::string v53 = v40;
          }
          if (SHIBYTE(v61[0]) < 0)
          {
            std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
            v39.__r_.__value_.__r.__words[2] = (std::string::size_type)v61[0];
          }
          BOOL v23 = siri::dialogengine::StringsEqual((uint64_t)&v53, (uint64_t)&v39);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v39.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v53.__r_.__value_.__l.__data_);
          }
          if (v52 < 0) {
            operator delete(v51);
          }
          if (v50 < 0) {
            operator delete(v49);
          }
          if (v48 < 0) {
            operator delete(v47);
          }
          if (v46 < 0) {
            operator delete(v45);
          }
          if (v44 < 0) {
            operator delete(v43);
          }
          if (v42 < 0) {
            operator delete(v41);
          }
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
          if (v23) {
            break;
          }
        }
        if (v55) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v55);
        }
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
        v21 += 24;
        if (v21 == size)
        {
          long long v19 = v37;
          goto LABEL_102;
        }
      }
      siri::dialogengine::Node::GetIdForDebug(v19, a2, 0, &v53);
      unint64_t v25 = std::string::insert(&v53, 0, "  Match found for <switch> group - returning: ");
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::Debug((siri::dialogengine *)&v40);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      std::string::size_type v36 = v18;
      unint64_t v37 = v19;
LABEL_102:
      int v24 = 2 * (v19 != 0);
    }
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    if (v18) {
      goto LABEL_79;
    }
LABEL_80:
    if (v24 != 3 && v24) {
      break;
    }
    v17 += 16;
  }
  while (v17 != v16);
  uint64_t v27 = v37;
  if (v37)
  {
    a3 = v34;
    uint64_t v28 = v38;
    long long v29 = v36;
    goto LABEL_121;
  }
  a3 = v34;
  uint64_t v27 = v35;
  long long v29 = v36;
  if (!v35)
  {
    uint64_t v28 = v38;
    goto LABEL_108;
  }
  uint64_t v28 = v38;
  siri::dialogengine::Node::GetIdForDebug(v35, a2, 0, &v57);
  uint64_t v30 = std::string::insert(&v57, 0, "  No matching case found for <switch> group - returning default: ");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)&v40);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  long long v29 = v38;
LABEL_121:
  (*(void (**)(siri::dialogengine::Node *, siri::dialogengine::Context *))(*(void *)v27 + 40))(v27, a2);
  if (*a3 == a3[1]) {
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"  Match for <switch> group returned an empty result", v32);
  }
LABEL_123:
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete(v69[0]);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v67[1]);
  }
  if (SHIBYTE(v67[0]) < 0) {
    operator delete(v66[0]);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(v64[1]);
  }
  if (SHIBYTE(v64[0]) < 0) {
    operator delete(v63[0]);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete(v61[1]);
  }
  if (SHIBYTE(v61[0]) < 0) {
    operator delete(__p[0]);
  }
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
}

void sub_1C60F7D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,std::__shared_weak_count *a60,void *a61)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(&a61);
  if (a60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a60);
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::GroupSwitch::IsPhrase(siri::dialogengine::GroupSwitch *this)
{
  uint64_t v1 = (void *)*((void *)this + 25);
  if (!v1) {
    return 0;
  }
  while (1)
  {
    BOOL result = v2 != 0;
    if (v2) {
      break;
    }
    uint64_t v1 = (void *)v1[25];
    if (!v1) {
      return 0;
    }
  }
  return result;
}

void siri::dialogengine::GroupSwitch::ExecuteFallthrough(siri::dialogengine::GroupSwitch *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *((void *)this + 26);
  for (uint64_t i = *((void *)this + 27); v3 != i; v3 += 16)
  {
    __int16 v8 = *(siri::dialogengine::Node **)v3;
    long long v7 = *(std::__shared_weak_count **)(v3 + 8);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8)
    {
      if ((*(unsigned int (**)(siri::dialogengine::Node *, siri::dialogengine::Context *))(*(void *)v8 + 48))(v8, a2))
      {
        (*(void (**)(uint64_t **__return_ptr, siri::dialogengine::Node *, siri::dialogengine::Context *))(*(void *)v8 + 40))(&v14, v8, a2);
        if (v14 == (uint64_t *)v15)
        {
          siri::dialogengine::Node::GetIdForDebug(v8, a2, 0, &v11);
          long long v9 = std::string::insert(&v11, 0, "  Child of <switch> returned an empty result - skipping: ");
          long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
          std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v10;
          v9->__r_.__value_.__l.__size_ = 0;
          v9->__r_.__value_.__r.__words[2] = 0;
          v9->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
          if (SHIBYTE(v13) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v11.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::vector<std::shared_ptr<siri::dialogengine::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::Node>*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::Node>*>>(a3, a3[1], v14, v15, (v15 - (char *)v14) >> 4);
        }
        __p[0] = &v14;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (!v7) {
          continue;
        }
LABEL_10:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        continue;
      }
    }
    else
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"  Programming error: NULL node in <switch> group", (const char *)a2);
    }
    if (v7) {
      goto LABEL_10;
    }
  }
}

void sub_1C60F819C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::string __p = &a22;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GroupSwitch::~GroupSwitch(siri::dialogengine::GroupSwitch *this)
{
  *(void *)this = &unk_1F2125FF0;
  *((void *)this + 8) = &unk_1F2126048;
  if (*((char *)this + 279) < 0) {
    operator delete(*((void **)this + 32));
  }
  siri::dialogengine::Group::~Group(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F2125FF0;
  *((void *)this + 8) = &unk_1F2126048;
  if (*((char *)this + 279) < 0) {
    operator delete(*((void **)this + 32));
  }
  siri::dialogengine::Group::~Group(this);
}

double siri::dialogengine::GroupSwitch::GroupSwitch(siri::dialogengine::GroupSwitch *this)
{
  *((void *)this + 7) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *(void *)this = &unk_1F2125FF0;
  *((void *)this + 8) = &unk_1F2126048;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  return result;
}

{
  double result;

  *((void *)this + 7) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *(void *)this = &unk_1F2125FF0;
  *((void *)this + 8) = &unk_1F2126048;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  return result;
}

std::string *siri::dialogengine::GroupSwitch::SetValue(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 256), a2);
}

void siri::dialogengine::GroupSwitch::GetValue(siri::dialogengine::GroupSwitch *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 279) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 32), *((void *)this + 33));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 16);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 34);
  }
}

void non-virtual thunk to'siri::dialogengine::GroupFallback::~GroupFallback(siri::dialogengine::GroupFallback *this)
{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupFallback *)((char *)this - 64));
  JUMPOUT(0x1C8796D70);
}

{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupFallback *)((char *)this - 64));
}

uint64_t siri::dialogengine::GroupFallback::ShouldDoValidationCheckForFewerThanTwoChildren(siri::dialogengine::GroupFallback *this)
{
  return 0;
}

void siri::dialogengine::GroupFallback::~GroupFallback(siri::dialogengine::GroupFallback *this)
{
  siri::dialogengine::Group::~Group(this);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::DialogArray::gender(siri::dialogengine::DialogArray *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  if (!lpsrc
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Received a variable that's not an array", (const char *)lpsrc, a3);
    operator new();
  }
  long long v5 = v4;
  BOOL v23 = this;
  unint64_t v6 = 0;
  memset(&v26, 0, sizeof(v26));
  while (1)
  {
    uint64_t v7 = v5[9];
    if (v6 >= (v5[10] - v7) >> 4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v24, "gender");
      siri::dialogengine::GetFeatureValue(v23, (siri::dialogengine::Context *)&v26, (uint64_t)&v24, (uint64_t)&v25);
      if (SHIBYTE(v24.__end_) < 0) {
        operator delete(v24.__first_);
      }
      operator new();
    }
    long long v8 = *(_OWORD *)(v7 + 16 * v6);
    long long v9 = *(std::__shared_weak_count **)(v7 + 16 * v6 + 8);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = v8;
    if ((void)v8
    {
      if (v11[95] < 0) {
        std::string::__init_copy_ctor_external(&v25, *((const std::string::value_type **)v11 + 9), *((void *)v11 + 10));
      }
      else {
        std::string v25 = *(std::string *)(v11 + 3);
      }
      std::vector<std::string>::pointer end = v26.__end_;
      if (v26.__end_ < v26.__end_cap_.__value_)
      {
        long long v15 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
        v26.__end_->__r_.__value_.__r.__words[2] = v25.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
        v26.__end_ = end + 1;
        goto LABEL_34;
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v26.__end_ - (char *)v26.__begin_) >> 3);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v26.__end_cap_.__value_ - (char *)v26.__begin_) >> 3) > v17) {
        unint64_t v17 = 0x5555555555555556 * (((char *)v26.__end_cap_.__value_ - (char *)v26.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v26.__end_cap_.__value_ - (char *)v26.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      v24.__end_cap_.__value_ = (std::allocator<std::string> *)&v26.__end_cap_;
      if (v18) {
        long long v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v26.__end_cap_, v18);
      }
      else {
        long long v19 = 0;
      }
      char v20 = v19 + v16;
      v24.__first_ = v19;
      v24.__begin_ = v20;
      v24.__end_cap_.__value_ = &v19[v18];
      long long v21 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
      v20->__r_.__value_.__r.__words[2] = v25.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
      memset(&v25, 0, sizeof(v25));
      v24.__end_ = v20 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v26, &v24);
      long long v22 = v26.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&v24);
      v26.__end_ = v22;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      {
        std::__split_buffer<std::string>::pointer v13 = (std::__split_buffer<std::string>::pointer)v25.__r_.__value_.__r.__words[0];
        goto LABEL_33;
      }
    }
    else
    {
      if (*(char *)(v10 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v24, *(const std::string::value_type **)(v10 + 32), *(void *)(v10 + 40));
      }
      else
      {
        *(_OWORD *)&v24.__first_ = *(_OWORD *)(v10 + 32);
        v24.__end_ = *(std::__split_buffer<std::string>::pointer *)(v10 + 48);
      }
      if (SHIBYTE(v24.__end_) >= 0) {
        std::__split_buffer<std::string>::pointer first = &v24;
      }
      else {
        std::__split_buffer<std::string>::pointer first = v24.__first_;
      }
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Received an array item that is not a VariableString (type: %s)", (const char *)lpsrc, first, v23);
      if (SHIBYTE(v24.__end_) < 0)
      {
        std::__split_buffer<std::string>::pointer v13 = v24.__first_;
LABEL_33:
        operator delete(v13);
      }
    }
LABEL_34:
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    ++v6;
  }
}

void sub_1C60F8920(_Unwind_Exception *a1, uint64_t a2, std::__split_buffer<std::string> *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a11);
  if (*(char *)(v12 - 145) < 0) {
    operator delete(*(void **)(v12 - 168));
  }
  MEMORY[0x1C8796D70](v11, 0x10B3C40D3060B95);
  if (*(char *)(v12 - 121) < 0) {
    operator delete(*(void **)(v12 - 144));
  }
  *(void *)(v12 - 144) = v12 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 144));
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogArray::length(siri::dialogengine::DialogArray *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  if (!lpsrc
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"DialogArray::length received a variable that's not an array", (const char *)lpsrc, a3);
  }
  operator new();
}

void sub_1C60F8B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_Player_Player_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Player.pb.cc", a4);
  SnippetUI::Player::Player((SnippetUI::Player *)&SnippetUI::_Player_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Player_default_instance_, v4);
  qword_1EB68F348 = (uint64_t)&SnippetUI::_PlayerButton_default_instance_;
  unk_1EB68F350 = &SnippetUI::_CustomCanvas_default_instance_;
  qword_1EB68F358 = (uint64_t)&SnippetUI::_StandardPlayerButton_default_instance_;
}

SnippetUI::Player *SnippetUI::Player::Player(SnippetUI::Player *this)
{
  *(void *)this = &unk_1F2126140;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (atomic_load_explicit(scc_info_Player_Player_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Player_Player_2eproto);
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 15) = 0;
  return this;
}

void sub_1C60F8C5C(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<int>::~RepeatedField(v1 + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Player::GetMetadata(SnippetUI::Player *this)
{
  return file_level_metadata_Player_2eproto;
}

uint64_t SnippetUI::Player::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

void SnippetUI::Player::MergeFrom(SnippetUI::Player *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Player.pb.cc", 482);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Player::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C60F8D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Player::MergeFrom(SnippetUI::Player *this, const SnippetUI::Player *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Player.pb.cc", 497);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Player *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 4, (int *)a2 + 4);
  uint64_t v6 = *((void *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 5);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, v6);
    }
    std::string::operator=(*((std::string **)this + 5), (const std::string *)v6);
  }
LABEL_13:
  int v8 = *((_DWORD *)a2 + 15);
  if (v8 == 5)
  {
    if (*((_DWORD *)this + 15) == 5)
    {
      uint64_t v10 = (SnippetUI::StandardPlayerButton *)*((void *)this + 6);
    }
    else
    {
      SnippetUI::Player::clear_control((uint64_t)this);
      *((_DWORD *)this + 15) = 5;
      uint64_t v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StandardPlayerButton>(0);
      *((void *)this + 6) = v10;
      if (*((_DWORD *)a2 + 15) != 5)
      {
        std::__split_buffer<std::string>::pointer v13 = (const SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_;
        goto LABEL_31;
      }
    }
    std::__split_buffer<std::string>::pointer v13 = (const SnippetUI::StandardPlayerButton *)*((void *)a2 + 6);
LABEL_31:
    SnippetUI::StandardPlayerButton::MergeFrom(v10, v13);
    return;
  }
  if (v8 != 2)
  {
    if (v8 != 1) {
      return;
    }
    if (*((_DWORD *)this + 15) == 1)
    {
      long long v9 = (SnippetUI::PlayerButton *)*((void *)this + 6);
    }
    else
    {
      SnippetUI::Player::clear_control((uint64_t)this);
      *((_DWORD *)this + 15) = 1;
      long long v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(0);
      *((void *)this + 6) = v9;
      if (*((_DWORD *)a2 + 15) != 1)
      {
        uint64_t v12 = (const SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_;
        goto LABEL_29;
      }
    }
    uint64_t v12 = (const SnippetUI::PlayerButton *)*((void *)a2 + 6);
LABEL_29:
    SnippetUI::PlayerButton::MergeFrom(v9, v12);
    return;
  }
  if (*((_DWORD *)this + 15) == 2)
  {
    uint64_t v11 = (SnippetUI::CustomCanvas *)*((void *)this + 6);
  }
  else
  {
    SnippetUI::Player::clear_control((uint64_t)this);
    *((_DWORD *)this + 15) = 2;
    uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
    *((void *)this + 6) = v11;
    if (*((_DWORD *)a2 + 15) != 2)
    {
      char v14 = (const SnippetUI::CustomCanvas *)&SnippetUI::_CustomCanvas_default_instance_;
      goto LABEL_33;
    }
  }
  char v14 = (const SnippetUI::CustomCanvas *)*((void *)a2 + 6);
LABEL_33:
  SnippetUI::CustomCanvas::MergeFrom(v11, v14);
}

void sub_1C60F8F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Player::clear_control(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 60);
  if (v2 == 5 || v2 == 2 || v2 == 1)
  {
    this = *(void *)(this + 48);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 60) = 0;
  return this;
}

void SnippetUI::Player::CopyFrom(SnippetUI::Player *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Player::Clear(this);
    SnippetUI::Player::MergeFrom(this, a2);
  }
}

void SnippetUI::Player::Clear(SnippetUI::Player *this)
{
  *((_DWORD *)this + 4) = 0;
  uint64_t v2 = *((void *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  SnippetUI::Player::clear_control((uint64_t)this);
  char v4 = *((unsigned char *)this + 8);
  uint64_t v3 = (SnippetUI::Player *)((char *)this + 8);
  if (v4)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Player::InternalSerializeWithCachedSizesToArray(SnippetUI::Player *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  int v7 = *((_DWORD *)this + 15);
  if (v7 == 1)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    int v8 = (SnippetUI::PlayerButton *)*((void *)this + 6);
    *uint64_t v5 = 10;
    unsigned int v9 = *((_DWORD *)v8 + 8);
    if (v9 > 0x7F)
    {
      v5[1] = v9 | 0x80;
      unsigned int v11 = v9 >> 7;
      if (v9 >> 14)
      {
        uint64_t v12 = v5 + 2;
        do
        {
          std::__split_buffer<std::string>::pointer v13 = v12;
          *v12++ = v11 | 0x80;
          unsigned int v14 = v11 >> 7;
          unsigned int v15 = v11 >> 14;
          v11 >>= 7;
        }
        while (v15);
        uint64_t v10 = v13 + 2;
        *uint64_t v12 = v14;
      }
      else
      {
        v5[2] = v11;
        uint64_t v10 = v5 + 3;
      }
    }
    else
    {
      v5[1] = v9;
      uint64_t v10 = v5 + 2;
    }
    uint64_t v5 = (char *)SnippetUI::PlayerButton::InternalSerializeWithCachedSizesToArray(v8, v10, a3, a4);
    int v7 = *((_DWORD *)this + 15);
  }
  if (v7 == 2)
  {
    if ((unint64_t)v5 >= *(void *)a3) {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    }
    unint64_t v16 = (SnippetUI::CustomCanvas *)*((void *)this + 6);
    *uint64_t v5 = 18;
    unsigned int v17 = *((_DWORD *)v16 + 13);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      unsigned int v19 = v17 >> 7;
      if (v17 >> 14)
      {
        char v20 = v5 + 2;
        do
        {
          long long v21 = v20;
          *v20++ = v19 | 0x80;
          unsigned int v22 = v19 >> 7;
          unsigned int v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        unint64_t v18 = v21 + 2;
        *char v20 = v22;
      }
      else
      {
        v5[2] = v19;
        unint64_t v18 = v5 + 3;
      }
    }
    else
    {
      v5[1] = v17;
      unint64_t v18 = v5 + 2;
    }
    uint64_t v5 = (char *)SnippetUI::CustomCanvas::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
  unsigned int v24 = *((_DWORD *)this + 8);
  if ((int)v24 >= 1)
  {
    unint64_t v25 = *(void *)a3;
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unint64_t v25 = *(void *)a3;
    }
    if (v25 <= (unint64_t)v5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v51, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      std::vector<std::string> v26 = google::protobuf::internal::LogMessage::operator<<(v51, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v50, (const char **)&v26->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v51[0].__r_.__value_.__l.__data_);
    }
    *uint64_t v5 = 26;
    uint64_t v27 = v5 + 1;
    if (v24 >= 0x80)
    {
      do
      {
        *v27++ = v24 | 0x80;
        unsigned int v49 = v24 >> 14;
        v24 >>= 7;
      }
      while (v49);
      uint64_t v5 = v27 - 1;
    }
    v5 += 2;
    *uint64_t v27 = v24;
    uint64_t v28 = (int *)*((void *)this + 3);
    long long v29 = &v28[*((int *)this + 4)];
    do
    {
      if ((unint64_t)v5 >= *(void *)a3) {
        uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      }
      unint64_t v31 = *v28++;
      unint64_t v30 = v31;
      if (v31 > 0x7F)
      {
        *uint64_t v5 = v30 | 0x80;
        unint64_t v32 = v30 >> 7;
        if (v30 >> 14)
        {
          long long v33 = v5 + 1;
          do
          {
            BOOL v34 = v33;
            *v33++ = v32 | 0x80;
            unint64_t v35 = v32 >> 7;
            unint64_t v36 = v32 >> 14;
            v32 >>= 7;
          }
          while (v36);
          uint64_t v5 = v34 + 2;
          unsigned char *v33 = v35;
        }
        else
        {
          v5[1] = v32;
          v5 += 2;
        }
      }
      else
      {
        *v5++ = v30;
      }
    }
    while (v28 < v29);
  }
  unint64_t v37 = (google::protobuf::internal *)*((void *)this + 5);
  if (*((char *)v37 + 23) < 0)
  {
    unsigned __int8 v38 = (const char *)*((void *)v37 + 1);
    if (!v38) {
      goto LABEL_46;
    }
    unint64_t v37 = *(google::protobuf::internal **)v37;
    goto LABEL_45;
  }
  unsigned __int8 v38 = (const char *)*((unsigned __int8 *)v37 + 23);
  if (*((unsigned char *)v37 + 23))
  {
LABEL_45:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v37, v38, 1, (google::protobuf::internal *)"SnippetUI.Player.identifier");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((const void ***)this + 5), v5);
  }
LABEL_46:
  if (*((_DWORD *)this + 15) == 5)
  {
    if ((unint64_t)v5 >= *(void *)a3) {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    }
    std::string v39 = (SnippetUI::StandardPlayerButton *)*((void *)this + 6);
    *uint64_t v5 = 42;
    unsigned int v40 = *((_DWORD *)v39 + 12);
    if (v40 > 0x7F)
    {
      v5[1] = v40 | 0x80;
      unsigned int v42 = v40 >> 7;
      if (v40 >> 14)
      {
        long long v43 = v5 + 2;
        do
        {
          char v44 = v43;
          *v43++ = v42 | 0x80;
          unsigned int v45 = v42 >> 7;
          unsigned int v46 = v42 >> 14;
          v42 >>= 7;
        }
        while (v46);
        BOOL v41 = (google::protobuf::UnknownFieldSet *)(v44 + 2);
        unsigned char *v43 = v45;
      }
      else
      {
        v5[2] = v42;
        BOOL v41 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v40;
      BOOL v41 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::StandardPlayerButton::InternalSerializeWithCachedSizesToArray(v39, v41, a3, a4);
  }
  uint64_t v47 = *((void *)this + 1);
  if (v47) {
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v47 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  }
  return (const google::protobuf::UnknownFieldSet *)v5;
}

void sub_1C60F94C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::Player::_InternalParse(SnippetUI::Player *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  long long v29 = a2;
  uint64_t v5 = (std::string **)((char *)this + 40);
  uint64_t v6 = (SnippetUI::Player *)((char *)this + 16);
  int v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v29, *((_DWORD *)a3 + 23))) {
      return v29;
    }
    TagFallbacint k = (google::protobuf::internal *)((char *)v29 + 1);
    unsigned int v11 = (char *)*(unsigned __int8 *)v29;
    if ((*(char *)v29 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v29 + 2);
LABEL_6:
      long long v29 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v29, v11);
    long long v29 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 10) {
          goto LABEL_41;
        }
        if (*((_DWORD *)this + 15) == 1)
        {
          uint64_t v12 = (SnippetUI::PlayerButton *)*((void *)this + 6);
        }
        else
        {
          SnippetUI::Player::clear_control((uint64_t)this);
          *((_DWORD *)this + 15) = 1;
          uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(0);
          *((void *)this + 6) = v12;
          TagFallbacint k = v29;
        }
        unsigned int v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::PlayerButton>(a3, v12, TagFallback);
        goto LABEL_46;
      case 2u:
        if (v11 != 18) {
          goto LABEL_41;
        }
        if (*((_DWORD *)this + 15) == 2)
        {
          std::__split_buffer<std::string>::pointer v13 = (SnippetUI::CustomCanvas *)*((void *)this + 6);
        }
        else
        {
          SnippetUI::Player::clear_control((uint64_t)this);
          *((_DWORD *)this + 15) = 2;
          std::__split_buffer<std::string>::pointer v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
          *((void *)this + 6) = v13;
          TagFallbacint k = v29;
        }
        unsigned int v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::CustomCanvas>(a3, v13, TagFallback);
        goto LABEL_46;
      case 3u:
        if (v11 == 26)
        {
          unsigned int v14 = google::protobuf::internal::PackedInt32Parser(v6, TagFallback, a3, v8);
          goto LABEL_46;
        }
        if (v11 == 24)
        {
          int v26 = google::protobuf::internal::ReadVarint(&v29, (const char **)v11);
          if (!v29) {
            return 0;
          }
          SnippetUI::ColorElement::_internal_add_idioms((uint64_t)this, v26);
          continue;
        }
LABEL_41:
        if (v11) {
          BOOL v27 = (v11 & 7) == 4;
        }
        else {
          BOOL v27 = 1;
        }
        if (v27)
        {
          *((_DWORD *)a3 + 20) = v11 - 1;
          return TagFallback;
        }
        unsigned int v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v7, TagFallback, a3, v9);
LABEL_46:
        long long v29 = (google::protobuf::internal *)v14;
        if (v14) {
          continue;
        }
        return 0;
      case 4u:
        if (v11 != 34) {
          goto LABEL_41;
        }
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v14 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Player.identifier");
        goto LABEL_46;
      case 5u:
        if (v11 != 42) {
          goto LABEL_41;
        }
        if (*((_DWORD *)this + 15) == 5)
        {
          unsigned int v15 = (SnippetUI::StandardPlayerButton *)*((void *)this + 6);
        }
        else
        {
          SnippetUI::Player::clear_control((uint64_t)this);
          *((_DWORD *)this + 15) = 5;
          unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StandardPlayerButton>(0);
          *((void *)this + 6) = v15;
          TagFallbacint k = v29;
        }
        unsigned int v16 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallbacint k = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback) {
            return 0;
          }
          unsigned int v17 = SizeFallback;
          unsigned int v16 = v19;
        }
        else
        {
          unsigned int v17 = (char *)TagFallback + 1;
        }
        int v20 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v17, v16);
        int v21 = *((_DWORD *)a3 + 22);
        BOOL v22 = __OFSUB__(v21--, 1);
        *((_DWORD *)a3 + 22) = v21;
        if (v21 < 0 != v22) {
          return 0;
        }
        int v23 = v20;
        unsigned int v24 = SnippetUI::StandardPlayerButton::_InternalParse(v15, (google::protobuf::internal *)v17, a3);
        if (!v24) {
          return 0;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          return 0;
        }
        int v25 = *((_DWORD *)a3 + 7) + v23;
        *((_DWORD *)a3 + 7) = v25;
        *(void *)a3 = *((void *)a3 + 1) + (v25 & (v25 >> 31));
        long long v29 = v24;
        continue;
      default:
        goto LABEL_41;
    }
  }
}

uint64_t SnippetUI::Player::GetCachedSize(SnippetUI::Player *this)
{
  return *((unsigned int *)this + 14);
}

char *SnippetUI::Player::ByteSizeLong(SnippetUI::Player *this)
{
  uint64_t v2 = (_DWORD *)((char *)this + 16);
  int v3 = *((_DWORD *)this + 4);
  if (!v3)
  {
    uint64_t v5 = 0;
LABEL_12:
    int v10 = 0;
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  int v4 = 0;
  uint64_t v5 = 0;
  do
  {
    int v6 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v2, v4);
    if (v6 < 0) {
      uint64_t v7 = 10;
    }
    else {
      uint64_t v7 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
    }
    v5 += v7;
    ++v4;
  }
  while (v3 != v4);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v8 = 11;
  uint64_t v9 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v5 >= 0) {
    uint64_t v8 = v9;
  }
  int v10 = v5;
LABEL_13:
  *((_DWORD *)this + 8) = v10;
  uint64_t v11 = *((void *)this + 5);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0) {
    uint64_t v13 = *(void *)(v11 + 8);
  }
  else {
    uint64_t v13 = *(unsigned __int8 *)(v11 + 23);
  }
  unsigned int v14 = (const google::protobuf::UnknownFieldSet *)(v8 + v5);
  if (v13)
  {
    uint64_t v15 = *(void *)(v11 + 8);
    if ((v12 & 0x80u) == 0) {
      uint64_t v16 = v12;
    }
    else {
      uint64_t v16 = v15;
    }
    unsigned int v14 = (const google::protobuf::UnknownFieldSet *)((char *)v14 + v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1);
  }
  int v17 = *((_DWORD *)this + 15);
  switch(v17)
  {
    case 5:
      unint64_t v18 = SnippetUI::StandardPlayerButton::ByteSizeLong(*((SnippetUI::StandardPlayerButton **)this + 6));
      break;
    case 2:
      unint64_t v18 = SnippetUI::CustomCanvas::ByteSizeLong(*((SnippetUI::CustomCanvas **)this + 6));
      break;
    case 1:
      unint64_t v18 = SnippetUI::PlayerButton::ByteSizeLong(*((SnippetUI::PlayerButton **)this + 6));
      break;
    default:
      goto LABEL_28;
  }
  unsigned int v14 = (const google::protobuf::UnknownFieldSet *)&v18[(void)v14
                                                      + 1
                                                      + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
LABEL_28:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Player *)((char *)this + 8), v14, (_DWORD *)this + 14);
  }
  else
  {
    *((_DWORD *)this + 14) = v14;
    return (char *)v14;
  }
}

uint64_t SnippetUI::Player::IsInitialized(SnippetUI::Player *this)
{
  return 1;
}

SnippetUI::Player *SnippetUI::Player::New(SnippetUI::Player *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Player>(a2);
}

SnippetUI::Player *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Player>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Player *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Player>);
  }
  SnippetUI::Player::Player(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60F9A9C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C409813F0CCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Player>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Player *SnippetUI::Player::New(SnippetUI::Player *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Player>(0);
}

void SnippetUI::Player::~Player(SnippetUI::Player *this)
{
  SnippetUI::Player::~Player(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F2126140;
  uint64_t v2 = *((void *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (*((_DWORD *)this + 15)) {
    SnippetUI::Player::clear_control((uint64_t)this);
  }
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::Player::InitAsDefaultInstance(SnippetUI::Player *this)
{
  qword_1EB68F348 = (uint64_t)&SnippetUI::_PlayerButton_default_instance_;
  unk_1EB68F350 = &SnippetUI::_CustomCanvas_default_instance_;
  qword_1EB68F358 = (uint64_t)&SnippetUI::_StandardPlayerButton_default_instance_;
}

uint64_t SnippetUI::Player::_Internal::player_button(SnippetUI::Player::_Internal *this, const SnippetUI::Player *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::Player::_Internal::custom_canvas(SnippetUI::Player::_Internal *this, const SnippetUI::Player *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::Player::_Internal::standard_player_button(SnippetUI::Player::_Internal *this, const SnippetUI::Player *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::Player::set_allocated_player_button(SnippetUI::Player *this, SnippetUI::PlayerButton *a2)
{
  uint64_t result = SnippetUI::Player::clear_control((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 15) = 1;
    *((void *)this + 6) = a2;
  }
  return result;
}

uint64_t SnippetUI::Player::clear_player_button(uint64_t this)
{
  if (*(_DWORD *)(this + 60) == 1)
  {
    uint64_t v1 = this;
    this = *(void *)(this + 48);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
    *(_DWORD *)(v1 + 60) = 0;
  }
  return this;
}

uint64_t SnippetUI::Player::set_allocated_custom_canvas(SnippetUI::Player *this, SnippetUI::CustomCanvas *a2)
{
  uint64_t result = SnippetUI::Player::clear_control((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 15) = 2;
    *((void *)this + 6) = a2;
  }
  return result;
}

uint64_t SnippetUI::Player::clear_custom_canvas(uint64_t this)
{
  if (*(_DWORD *)(this + 60) == 2)
  {
    uint64_t v1 = this;
    this = *(void *)(this + 48);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
    *(_DWORD *)(v1 + 60) = 0;
  }
  return this;
}

uint64_t SnippetUI::Player::set_allocated_standard_player_button(SnippetUI::Player *this, SnippetUI::StandardPlayerButton *a2)
{
  uint64_t result = SnippetUI::Player::clear_control((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 15) = 5;
    *((void *)this + 6) = a2;
  }
  return result;
}

uint64_t SnippetUI::Player::clear_standard_player_button(uint64_t this)
{
  if (*(_DWORD *)(this + 60) == 5)
  {
    uint64_t v1 = this;
    this = *(void *)(this + 48);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
    *(_DWORD *)(v1 + 60) = 0;
  }
  return this;
}

SnippetUI::Player *SnippetUI::Player::Player(SnippetUI::Player *this, const SnippetUI::Player *a2)
{
  *(void *)this = &unk_1F2126140;
  *((void *)this + 1) = 0;
  int v4 = (SnippetUI::Player *)((char *)this + 8);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 16, (int *)a2 + 4);
  *((_DWORD *)this + 14) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v6 = *((void *)a2 + 5);
  if (*(char *)(v6 + 23) < 0) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  }
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, v6);
  }
  *((_DWORD *)this + 15) = 0;
  int v9 = *((_DWORD *)a2 + 15);
  switch(v9)
  {
    case 5:
      SnippetUI::Player::clear_control((uint64_t)this);
      *((_DWORD *)this + 15) = 5;
      uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StandardPlayerButton>(0);
      *((void *)this + 6) = v12;
      if (*((_DWORD *)a2 + 15) == 5) {
        uint64_t v13 = (const SnippetUI::StandardPlayerButton *)*((void *)a2 + 6);
      }
      else {
        uint64_t v13 = (const SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_;
      }
      SnippetUI::StandardPlayerButton::MergeFrom(v12, v13);
      break;
    case 2:
      SnippetUI::Player::clear_control((uint64_t)this);
      *((_DWORD *)this + 15) = 2;
      unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
      *((void *)this + 6) = v14;
      if (*((_DWORD *)a2 + 15) == 2) {
        uint64_t v15 = (const SnippetUI::CustomCanvas *)*((void *)a2 + 6);
      }
      else {
        uint64_t v15 = (const SnippetUI::CustomCanvas *)&SnippetUI::_CustomCanvas_default_instance_;
      }
      SnippetUI::CustomCanvas::MergeFrom(v14, v15);
      break;
    case 1:
      SnippetUI::Player::clear_control((uint64_t)this);
      *((_DWORD *)this + 15) = 1;
      int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(0);
      *((void *)this + 6) = v10;
      if (*((_DWORD *)a2 + 15) == 1) {
        uint64_t v11 = (const SnippetUI::PlayerButton *)*((void *)a2 + 6);
      }
      else {
        uint64_t v11 = (const SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_;
      }
      SnippetUI::PlayerButton::MergeFrom(v10, v11);
      break;
  }
  return this;
}

void sub_1C60F9F54(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Player::default_instance(SnippetUI::Player *this)
{
  if (atomic_load_explicit(scc_info_Player_Player_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Player_Player_2eproto);
  }
  return &SnippetUI::_Player_default_instance_;
}

void SnippetUI::Player::CopyFrom(SnippetUI::Player *this, const SnippetUI::Player *a2)
{
  if (a2 != this)
  {
    SnippetUI::Player::Clear(this);
    SnippetUI::Player::MergeFrom(this, a2);
  }
}

void SnippetUI::Player::InternalSwap(SnippetUI::Player *this, SnippetUI::Player *a2)
{
  int v4 = (SnippetUI::Player *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v14;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 16, (uint64_t)a2 + 16);
  uint64_t v7 = (uint64_t *)*((void *)this + 5);
  uint64_t v8 = (uint64_t **)((char *)a2 + 40);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 5);
  }
  int v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)int v9 = v11;
  std::string::size_type v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v13;
  LODWORD(v13) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v13;
}

void InitDefaultsscc_info_HorizontalList_Standard_Item_HorizontalList_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HorizontalList.pb.cc", a4);
  SnippetUI::HorizontalList_Standard_Item::HorizontalList_Standard_Item((SnippetUI::HorizontalList_Standard_Item *)&SnippetUI::_HorizontalList_Standard_Item_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_HorizontalList_Standard_Item_default_instance_, v4);
  qword_1EA3DB7F8 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EA3DB800 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EA3DB808 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EA3DB810 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::HorizontalList_Standard_Item *SnippetUI::HorizontalList_Standard_Item::HorizontalList_Standard_Item(SnippetUI::HorizontalList_Standard_Item *this)
{
  *(void *)this = &unk_1F2126218;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 15) = 0;
  if (atomic_load_explicit(scc_info_HorizontalList_Standard_Item_HorizontalList_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_HorizontalList_Standard_Item_HorizontalList_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return this;
}

void sub_1C60FA230(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::HorizontalList_Standard_Item::GetMetadata(SnippetUI::HorizontalList_Standard_Item *this)
{
  return file_level_metadata_HorizontalList_2eproto;
}

uint64_t SnippetUI::HorizontalList_Standard_Item::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

void SnippetUI::HorizontalList_Standard_Item::MergeFrom(SnippetUI::HorizontalList_Standard_Item *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HorizontalList.pb.cc", 508);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::HorizontalList_Standard_Item::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C60FA34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::HorizontalList_Standard_Item::MergeFrom(SnippetUI::HorizontalList_Standard_Item *this, const SnippetUI::HorizontalList_Standard_Item *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HorizontalList.pb.cc", 523);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::HorizontalList_Standard_Item *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::HorizontalList_Standard_Item *)&SnippetUI::_HorizontalList_Standard_Item_default_instance_)
  {
    uint64_t v8 = (int **)*((void *)a2 + 3);
    if (v8)
    {
      int v9 = (int **)*((void *)this + 3);
      if (!v9)
      {
        int v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 3) = v9;
        uint64_t v8 = (int **)*((void *)a2 + 3);
      }
      if (v8) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v9, v10);
    }
    long long v11 = (int **)*((void *)a2 + 4);
    if (v11)
    {
      uint64_t v12 = (int **)*((void *)this + 4);
      if (!v12)
      {
        uint64_t v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v12;
        long long v11 = (int **)*((void *)a2 + 4);
      }
      if (v11) {
        uint64_t v13 = v11;
      }
      else {
        uint64_t v13 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v12, v13);
    }
    unsigned int v14 = (int **)*((void *)a2 + 5);
    if (v14)
    {
      uint64_t v15 = (int **)*((void *)this + 5);
      if (!v15)
      {
        uint64_t v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v15;
        unsigned int v14 = (int **)*((void *)a2 + 5);
      }
      if (v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v15, v16);
    }
    int v17 = (int **)*((void *)a2 + 6);
    if (v17)
    {
      unint64_t v18 = (int **)*((void *)this + 6);
      if (!v18)
      {
        unint64_t v18 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 6) = v18;
        int v17 = (int **)*((void *)a2 + 6);
      }
      if (v17) {
        unsigned int v19 = v17;
      }
      else {
        unsigned int v19 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v18, v19);
    }
  }
  int v20 = *((_DWORD *)a2 + 14);
  if (v20) {
    *((_DWORD *)this + 14) = v20;
  }
}

void sub_1C60FA514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::HorizontalList_Standard_Item::CopyFrom(SnippetUI::HorizontalList_Standard_Item *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::HorizontalList_Standard_Item::Clear(this);
    SnippetUI::HorizontalList_Standard_Item::MergeFrom(this, a2);
  }
}

void SnippetUI::HorizontalList_Standard_Item::Clear(SnippetUI::HorizontalList_Standard_Item *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  char v8 = *((unsigned char *)this + 8);
  char v7 = (char *)this + 8;
  *((void *)v7 + 5) = 0;
  *((_DWORD *)v7 + 12) = 0;
  if (v8)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v7);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::HorizontalList_Standard_Item::InternalSerializeWithCachedSizesToArray(SnippetUI::HorizontalList_Standard_Item *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  unsigned int v7 = *((_DWORD *)this + 14);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      unsigned int v7 = *((_DWORD *)this + 14);
    }
    *uint64_t v5 = 8;
    if (v7 > 0x7F)
    {
      v5[1] = v7 | 0x80;
      unint64_t v8 = (unint64_t)(int)v7 >> 7;
      if (v7 >> 14)
      {
        int v9 = v5 + 2;
        do
        {
          uint64_t v10 = v9;
          *v9++ = v8 | 0x80;
          unint64_t v11 = v8 >> 7;
          unint64_t v12 = v8 >> 14;
          v8 >>= 7;
        }
        while (v12);
        uint64_t v5 = v10 + 2;
        unsigned char *v9 = v11;
      }
      else
      {
        v5[2] = v8;
        v5 += 3;
      }
    }
    else
    {
      v5[1] = v7;
      v5 += 2;
    }
  }
  if (this != (SnippetUI::HorizontalList_Standard_Item *)&SnippetUI::_HorizontalList_Standard_Item_default_instance_)
  {
    uint64_t v13 = (SnippetUI::VisualProperty *)*((void *)this + 3);
    if (!v13) {
      goto LABEL_24;
    }
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      uint64_t v13 = (SnippetUI::VisualProperty *)*((void *)this + 3);
    }
    *uint64_t v5 = 18;
    unsigned int v14 = *((_DWORD *)v13 + 15);
    if (v14 > 0x7F)
    {
      v5[1] = v14 | 0x80;
      unsigned int v16 = v14 >> 7;
      if (v14 >> 14)
      {
        unint64_t v18 = v5 + 2;
        do
        {
          unsigned int v19 = v18;
          *v18++ = v16 | 0x80;
          unsigned int v20 = v16 >> 7;
          unsigned int v21 = v16 >> 14;
          v16 >>= 7;
        }
        while (v21);
        int v17 = (google::protobuf::UnknownFieldSet *)(v19 + 2);
        unsigned char *v18 = v20;
        goto LABEL_23;
      }
      v5[2] = v16;
      uint64_t v15 = 3;
    }
    else
    {
      v5[1] = v14;
      uint64_t v15 = 2;
    }
    int v17 = (google::protobuf::UnknownFieldSet *)&v5[v15];
LABEL_23:
    uint64_t v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v13, v17, a3, a4);
LABEL_24:
    BOOL v22 = (SnippetUI::TextProperty *)*((void *)this + 4);
    if (!v22) {
      goto LABEL_36;
    }
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      BOOL v22 = (SnippetUI::TextProperty *)*((void *)this + 4);
    }
    *uint64_t v5 = 26;
    unsigned int v23 = *((_DWORD *)v22 + 15);
    if (v23 > 0x7F)
    {
      v5[1] = v23 | 0x80;
      unsigned int v25 = v23 >> 7;
      if (v23 >> 14)
      {
        BOOL v27 = v5 + 2;
        do
        {
          uint64_t v28 = v27;
          *v27++ = v25 | 0x80;
          unsigned int v29 = v25 >> 7;
          unsigned int v30 = v25 >> 14;
          v25 >>= 7;
        }
        while (v30);
        int v26 = (google::protobuf::UnknownFieldSet *)(v28 + 2);
        *BOOL v27 = v29;
        goto LABEL_35;
      }
      v5[2] = v25;
      uint64_t v24 = 3;
    }
    else
    {
      v5[1] = v23;
      uint64_t v24 = 2;
    }
    int v26 = (google::protobuf::UnknownFieldSet *)&v5[v24];
LABEL_35:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v22, v26, a3, a4);
LABEL_36:
    unint64_t v31 = (SnippetUI::TextProperty *)*((void *)this + 5);
    if (!v31) {
      goto LABEL_48;
    }
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unint64_t v31 = (SnippetUI::TextProperty *)*((void *)this + 5);
    }
    *uint64_t v5 = 34;
    unsigned int v32 = *((_DWORD *)v31 + 15);
    if (v32 > 0x7F)
    {
      v5[1] = v32 | 0x80;
      unsigned int v34 = v32 >> 7;
      if (v32 >> 14)
      {
        unint64_t v36 = v5 + 2;
        do
        {
          unint64_t v37 = v36;
          *v36++ = v34 | 0x80;
          unsigned int v38 = v34 >> 7;
          unsigned int v39 = v34 >> 14;
          v34 >>= 7;
        }
        while (v39);
        unint64_t v35 = (google::protobuf::UnknownFieldSet *)(v37 + 2);
        unsigned char *v36 = v38;
        goto LABEL_47;
      }
      v5[2] = v34;
      uint64_t v33 = 3;
    }
    else
    {
      v5[1] = v32;
      uint64_t v33 = 2;
    }
    unint64_t v35 = (google::protobuf::UnknownFieldSet *)&v5[v33];
LABEL_47:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v31, v35, a3, a4);
LABEL_48:
    unsigned int v40 = (SnippetUI::ActionProperty *)*((void *)this + 6);
    if (v40)
    {
      if ((unint64_t)v5 >= *(void *)a3)
      {
        uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        unsigned int v40 = (SnippetUI::ActionProperty *)*((void *)this + 6);
      }
      *uint64_t v5 = 42;
      unsigned int v41 = *((_DWORD *)v40 + 12);
      if (v41 > 0x7F)
      {
        v5[1] = v41 | 0x80;
        unsigned int v43 = v41 >> 7;
        if (v41 >> 14)
        {
          char v44 = v5 + 2;
          do
          {
            unsigned int v45 = v44;
            *v44++ = v43 | 0x80;
            unsigned int v46 = v43 >> 7;
            unsigned int v47 = v43 >> 14;
            v43 >>= 7;
          }
          while (v47);
          unsigned int v42 = (google::protobuf::UnknownFieldSet *)(v45 + 2);
          *char v44 = v46;
        }
        else
        {
          v5[2] = v43;
          unsigned int v42 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v41;
        unsigned int v42 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v40, v42, a3, a4);
    }
  }
  char v48 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v48 + 23) < 0)
  {
    unsigned int v49 = (const char *)*((void *)v48 + 1);
    if (!v49) {
      goto LABEL_65;
    }
    char v48 = *(google::protobuf::internal **)v48;
    goto LABEL_64;
  }
  unsigned int v49 = (const char *)*((unsigned __int8 *)v48 + 23);
  if (*((unsigned char *)v48 + 23))
  {
LABEL_64:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v48, v49, 1, (google::protobuf::internal *)"SnippetUI.HorizontalList_Standard.Item.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((const void ***)this + 2), v5);
  }
LABEL_65:
  uint64_t v50 = *((void *)this + 1);
  if ((v50 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v50 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::HorizontalList_Standard_Item::_InternalParse(SnippetUI::HorizontalList_Standard_Item *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v19 = a2;
  uint64_t v5 = (std::string **)((char *)this + 16);
  uint64_t v6 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v19, *((_DWORD *)a3 + 23))) {
      return v19;
    }
    TagFallbacint k = (google::protobuf::internal *)((char *)v19 + 1);
    int v9 = (char *)*(unsigned __int8 *)v19;
    if ((*(char *)v19 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    int v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v19 + 2);
LABEL_6:
      unsigned int v19 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v19, v9);
    unsigned int v19 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8) {
          goto LABEL_34;
        }
        uint64_t v10 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v11) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_12;
        }
        int v12 = *(char *)v10;
        unint64_t v11 = v11 + (v12 << 7) - 128;
        if ((v12 & 0x80000000) == 0)
        {
          uint64_t v10 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_12:
          unsigned int v19 = v10;
LABEL_13:
          *((_DWORD *)this + 14) = v11;
          continue;
        }
        unsigned int v19 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v11);
        if (v19) {
          goto LABEL_13;
        }
LABEL_44:
        TagFallbacint k = 0;
        break;
      case 2u:
        if (v9 != 18) {
          goto LABEL_34;
        }
        uint64_t v13 = (SnippetUI::VisualProperty *)*((void *)this + 3);
        if (!v13)
        {
          uint64_t v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((void *)this + 3) = v13;
          TagFallbacint k = v19;
        }
        unsigned int v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v13, TagFallback);
        goto LABEL_39;
      case 3u:
        if (v9 != 26) {
          goto LABEL_34;
        }
        uint64_t v15 = (SnippetUI::TextProperty *)*((void *)this + 4);
        if (v15) {
          goto LABEL_25;
        }
        uint64_t v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v15;
        goto LABEL_24;
      case 4u:
        if (v9 != 34) {
          goto LABEL_34;
        }
        uint64_t v15 = (SnippetUI::TextProperty *)*((void *)this + 5);
        if (v15) {
          goto LABEL_25;
        }
        uint64_t v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v15;
LABEL_24:
        TagFallbacint k = v19;
LABEL_25:
        unsigned int v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v15, TagFallback);
        goto LABEL_39;
      case 5u:
        if (v9 != 42) {
          goto LABEL_34;
        }
        unsigned int v16 = (SnippetUI::ActionProperty *)*((void *)this + 6);
        if (!v16)
        {
          unsigned int v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 6) = v16;
          TagFallbacint k = v19;
        }
        unsigned int v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v16, TagFallback);
        goto LABEL_39;
      case 6u:
        if (v9 != 50) {
          goto LABEL_34;
        }
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v14 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.HorizontalList_Standard.Item.component_name");
        goto LABEL_39;
      default:
LABEL_34:
        if (v9) {
          BOOL v17 = (v9 & 7) == 4;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17)
        {
          *((_DWORD *)a3 + 20) = v9 - 1;
          return TagFallback;
        }
        unsigned int v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_39:
        unsigned int v19 = (google::protobuf::internal *)v14;
        if (!v14) {
          goto LABEL_44;
        }
        continue;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::HorizontalList_Standard_Item::GetCachedSize(SnippetUI::HorizontalList_Standard_Item *this)
{
  return *((unsigned int *)this + 15);
}

char *SnippetUI::HorizontalList_Standard_Item::ByteSizeLong(SnippetUI::HorizontalList_Standard_Item *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::HorizontalList_Standard_Item *)&SnippetUI::_HorizontalList_Standard_Item_default_instance_)
  {
    uint64_t v6 = (SnippetUI::VisualProperty *)*((void *)this + 3);
    if (v6)
    {
      unsigned int v7 = SnippetUI::VisualProperty::ByteSizeLong(v6);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v7[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unint64_t v8 = (SnippetUI::TextProperty *)*((void *)this + 4);
    if (v8)
    {
      int v9 = SnippetUI::TextProperty::ByteSizeLong(v8);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v9[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v10 = (SnippetUI::TextProperty *)*((void *)this + 5);
    if (v10)
    {
      unint64_t v11 = SnippetUI::TextProperty::ByteSizeLong(v10);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v11[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
    int v12 = (SnippetUI::ActionProperty *)*((void *)this + 6);
    if (v12)
    {
      uint64_t v13 = SnippetUI::ActionProperty::ByteSizeLong(v12);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v13[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  int v14 = *((_DWORD *)this + 14);
  if (v14)
  {
    if (v14 < 0) {
      uint64_t v15 = 11;
    }
    else {
      uint64_t v15 = ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v15);
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::HorizontalList_Standard_Item *)((char *)this + 8), v5, (_DWORD *)this + 15);
  }
  else
  {
    *((_DWORD *)this + 15) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::HorizontalList_Standard_Item::IsInitialized(SnippetUI::HorizontalList_Standard_Item *this)
{
  return 1;
}

SnippetUI::HorizontalList_Standard_Item *SnippetUI::HorizontalList_Standard_Item::New(SnippetUI::HorizontalList_Standard_Item *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard_Item>(a2);
}

SnippetUI::HorizontalList_Standard_Item *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard_Item>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::HorizontalList_Standard_Item *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::HorizontalList_Standard_Item>);
  }
  SnippetUI::HorizontalList_Standard_Item::HorizontalList_Standard_Item(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60FAF90(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40AE67B8E4);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::HorizontalList_Standard_Item>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::HorizontalList_Standard_Item *SnippetUI::HorizontalList_Standard_Item::New(SnippetUI::HorizontalList_Standard_Item *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard_Item>(0);
}

void SnippetUI::HorizontalList_Standard_Item::~HorizontalList_Standard_Item(SnippetUI::HorizontalList_Standard_Item *this)
{
  SnippetUI::HorizontalList_Standard_Item::~HorizontalList_Standard_Item(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(void *)this = &unk_1F2126218;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::HorizontalList_Standard_Item *)&SnippetUI::_HorizontalList_Standard_Item_default_instance_)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *((void *)this + 5);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    unsigned int v7 = *((void *)this + 6);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_HorizontalList_Standard_HorizontalList_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HorizontalList.pb.cc", a4);
  SnippetUI::HorizontalList_Standard::HorizontalList_Standard((SnippetUI::HorizontalList_Standard *)&SnippetUI::_HorizontalList_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_HorizontalList_Standard_default_instance_, v4);
  qword_1EA3DB850 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::HorizontalList_Standard *SnippetUI::HorizontalList_Standard::HorizontalList_Standard(SnippetUI::HorizontalList_Standard *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F21262D8;
  *((_DWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load_explicit(scc_info_HorizontalList_Standard_HorizontalList_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_HorizontalList_Standard_HorizontalList_2eproto);
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 6) = 0;
  return this;
}

void sub_1C60FB258(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::HorizontalList_Standard::GetMetadata(SnippetUI::HorizontalList_Standard *this)
{
  return qword_1EA3DA510;
}

uint64_t SnippetUI::HorizontalList_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

void SnippetUI::HorizontalList_Standard::MergeFrom(SnippetUI::HorizontalList_Standard *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HorizontalList.pb.cc", 800);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::HorizontalList_Standard::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C60FB37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::HorizontalList_Standard::MergeFrom(SnippetUI::HorizontalList_Standard *this, const SnippetUI::HorizontalList_Standard *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HorizontalList.pb.cc", 815);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::HorizontalList_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::HorizontalList_Standard_Item>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  uint64_t v6 = *((void *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 5);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, v6);
    }
    std::string::operator=(*((std::string **)this + 5), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::HorizontalList_Standard *)&SnippetUI::_HorizontalList_Standard_default_instance_)
  {
    unint64_t v8 = (int **)*((void *)a2 + 6);
    if (v8)
    {
      int v9 = (int **)*((void *)this + 6);
      if (!v9)
      {
        int v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 6) = v9;
        unint64_t v8 = (int **)*((void *)a2 + 6);
      }
      if (v8) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
  }
}

void sub_1C60FB4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::HorizontalList_Standard_Item>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    unint64_t v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      uint64_t v13 = (SnippetUI::HorizontalList_Standard_Item **)(v6 + 8);
      int v14 = (SnippetUI::HorizontalList_Standard_Item **)v7;
      do
      {
        unsigned int v16 = *v13++;
        uint64_t v15 = v16;
        BOOL v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::HorizontalList_Standard_Item>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      unint64_t v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      unsigned int v21 = (SnippetUI::HorizontalList_Standard_Item **)((char *)v8 + v20);
      BOOL v22 = (SnippetUI::HorizontalList_Standard_Item **)(v20 + v6 + 8);
      do
      {
        unsigned int v23 = *v22++;
        uint64_t v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard_Item>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::HorizontalList_Standard_Item>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    int v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_1C60FB624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::HorizontalList_Standard_Item>::Merge(SnippetUI::HorizontalList_Standard_Item *a1, SnippetUI::HorizontalList_Standard_Item *this)
{
}

void SnippetUI::HorizontalList_Standard::CopyFrom(SnippetUI::HorizontalList_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::HorizontalList_Standard::Clear(this);
    SnippetUI::HorizontalList_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::HorizontalList_Standard::Clear(SnippetUI::HorizontalList_Standard *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  else if (v2)
  {
    uint64_t v3 = (SnippetUI::HorizontalList_Standard_Item **)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v4 = *v3++;
      SnippetUI::HorizontalList_Standard_Item::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  uint64_t v6 = *((void *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
  uint64_t v7 = *((void *)this + 6);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  char v9 = *((unsigned char *)this + 8);
  unint64_t v8 = (SnippetUI::HorizontalList_Standard *)((char *)this + 8);
  *((void *)v8 + 5) = 0;
  if (v9)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v8);
  }
}

void sub_1C60FB7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *SnippetUI::HorizontalList_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::HorizontalList_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    int v8 = 0;
    while ((unint64_t)a2 < *(void *)a3)
    {
      if (v8 < 0) {
        goto LABEL_5;
      }
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        char v10 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
      }
      int v11 = *(SnippetUI::HorizontalList_Standard_Item **)(*((void *)this + 4) + 8 * v8 + 8);
      *(unsigned char *)a2 = 10;
      unsigned int v12 = *((_DWORD *)v11 + 15);
      if (v12 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v12 | 0x80;
        unsigned int v14 = v12 >> 7;
        if (v12 >> 14)
        {
          uint64_t v15 = (char *)a2 + 2;
          do
          {
            unsigned int v16 = v15;
            *v15++ = v14 | 0x80;
            unsigned int v17 = v14 >> 7;
            unsigned int v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          uint64_t v13 = (google::protobuf::UnknownFieldSet *)(v16 + 2);
          *uint64_t v15 = v17;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v14;
          uint64_t v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v12;
        uint64_t v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::HorizontalList_Standard_Item::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7) {
        goto LABEL_19;
      }
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    char v9 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  if (this != (SnippetUI::HorizontalList_Standard *)&SnippetUI::_HorizontalList_Standard_default_instance_)
  {
    int v19 = (SnippetUI::TextProperty *)*((void *)this + 6);
    if (v19)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        int v19 = (SnippetUI::TextProperty *)*((void *)this + 6);
      }
      *(unsigned char *)a2 = 18;
      unsigned int v20 = *((_DWORD *)v19 + 15);
      if (v20 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v20 | 0x80;
        unsigned int v22 = v20 >> 7;
        if (v20 >> 14)
        {
          unsigned int v23 = (char *)a2 + 2;
          do
          {
            uint64_t v24 = v23;
            *v23++ = v22 | 0x80;
            unsigned int v25 = v22 >> 7;
            unsigned int v26 = v22 >> 14;
            v22 >>= 7;
          }
          while (v26);
          unsigned int v21 = (google::protobuf::UnknownFieldSet *)(v24 + 2);
          unsigned char *v23 = v25;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v22;
          unsigned int v21 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v20;
        unsigned int v21 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v19, v21, a3, a4);
    }
  }
  char v27 = (google::protobuf::internal *)*((void *)this + 5);
  if (*((char *)v27 + 23) < 0)
  {
    uint64_t v28 = (const char *)*((void *)v27 + 1);
    if (!v28) {
      goto LABEL_37;
    }
    char v27 = *(google::protobuf::internal **)v27;
    goto LABEL_36;
  }
  uint64_t v28 = (const char *)*((unsigned __int8 *)v27 + 23);
  if (*((unsigned char *)v27 + 23))
  {
LABEL_36:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v27, v28, 1, (google::protobuf::internal *)"SnippetUI.HorizontalList_Standard.component_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 5), (char *)a2);
  }
LABEL_37:
  uint64_t v29 = *((void *)this + 1);
  if ((v29 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v29 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

void sub_1C60FBAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::HorizontalList_Standard::_InternalParse(SnippetUI::HorizontalList_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unint64_t v35 = a2;
  int v5 = (std::string **)((char *)this + 40);
  uint64_t v6 = (unsigned int *)((char *)this + 16);
  int v7 = (unint64_t *)((char *)this + 8);
  do
  {
LABEL_2:
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v35, *((_DWORD *)a3 + 23))) {
      return v35;
    }
    TagFallbacint k = (google::protobuf::internal *)((char *)v35 + 1);
    char v10 = (char *)*(unsigned __int8 *)v35;
    if ((*(char *)v35 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    char v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v35 + 2);
LABEL_6:
      unint64_t v35 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v35, v10);
    unint64_t v35 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    unsigned int v11 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
      if (v10 == 26)
      {
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v14 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.HorizontalList_Standard.component_name");
        goto LABEL_26;
      }
      goto LABEL_13;
    }
    if (v11 == 2)
    {
      if (v10 == 18)
      {
        uint64_t v15 = (SnippetUI::TextProperty *)*((void *)this + 6);
        if (!v15)
        {
          uint64_t v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((void *)this + 6) = v15;
          TagFallbacint k = v35;
        }
        unsigned int v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v15, TagFallback);
        goto LABEL_26;
      }
      goto LABEL_13;
    }
    if (v11 == 1 && v10 == 10)
    {
      unsigned int v16 = (google::protobuf::internal *)((char *)TagFallback - 1);
      while (1)
      {
        unsigned int v17 = (google::protobuf::internal *)((char *)v16 + 1);
        unint64_t v35 = v17;
        unsigned int v18 = (int *)*((void *)this + 4);
        if (!v18) {
          break;
        }
        uint64_t v19 = *((int *)this + 6);
        int v20 = *v18;
        if ((int)v19 < *v18)
        {
          *((_DWORD *)this + 6) = v19 + 1;
          unsigned int v21 = *(SnippetUI::HorizontalList_Standard_Item **)&v18[2 * v19 + 2];
          goto LABEL_36;
        }
        if (v20 == *((_DWORD *)this + 7)) {
          goto LABEL_34;
        }
LABEL_35:
        int *v18 = v20 + 1;
        unsigned int v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard_Item>(*((google::protobuf::internal::ArenaImpl **)this + 2));
        uint64_t v22 = *((void *)this + 4);
        uint64_t v23 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v23 + 1;
        *(void *)(v22 + 8 * v23 + 8) = v21;
        unsigned int v17 = v35;
LABEL_36:
        unsigned int v24 = *(unsigned __int8 *)v17;
        if (*(char *)v17 < 0)
        {
          SizeFallbacint k = google::protobuf::internal::ReadSizeFallback(v17, (const char *)*(unsigned __int8 *)v17);
          if (!SizeFallback) {
            return 0;
          }
          unsigned int v25 = SizeFallback;
          unsigned int v24 = v27;
        }
        else
        {
          unsigned int v25 = (char *)v17 + 1;
        }
        int v28 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v25, v24);
        int v29 = *((_DWORD *)a3 + 22);
        BOOL v30 = __OFSUB__(v29--, 1);
        *((_DWORD *)a3 + 22) = v29;
        if (v29 < 0 != v30) {
          return 0;
        }
        int v31 = v28;
        unsigned int v16 = SnippetUI::HorizontalList_Standard_Item::_InternalParse(v21, (google::protobuf::internal *)v25, a3);
        if (!v16) {
          return 0;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          return 0;
        }
        int v32 = *((_DWORD *)a3 + 7) + v31;
        *((_DWORD *)a3 + 7) = v32;
        unint64_t v33 = *((void *)a3 + 1) + (v32 & (v32 >> 31));
        *(void *)a3 = v33;
        unint64_t v35 = v16;
        if (v33 <= (unint64_t)v16 || *(unsigned char *)v16 != 10) {
          goto LABEL_2;
        }
      }
      int v20 = *((_DWORD *)this + 7);
LABEL_34:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v20 + 1);
      unsigned int v18 = (int *)*((void *)this + 4);
      int v20 = *v18;
      goto LABEL_35;
    }
LABEL_13:
    if (v10) {
      BOOL v13 = (v10 & 7) == 4;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      *((_DWORD *)a3 + 20) = v10 - 1;
      return TagFallback;
    }
    unsigned int v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_26:
    unint64_t v35 = (google::protobuf::internal *)v14;
  }
  while (v14);
  return 0;
}

uint64_t SnippetUI::HorizontalList_Standard::GetCachedSize(SnippetUI::HorizontalList_Standard *this)
{
  return *((unsigned int *)this + 14);
}

char *SnippetUI::HorizontalList_Standard::ByteSizeLong(SnippetUI::HorizontalList_Standard *this)
{
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    uint64_t v4 = (SnippetUI::HorizontalList_Standard_Item **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * (void)v2;
    do
    {
      uint64_t v6 = *v4++;
      int v7 = SnippetUI::HorizontalList_Standard_Item::ByteSizeLong(v6);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (void)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *((void *)this + 5);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_14;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v9;
  }
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  if (this != (SnippetUI::HorizontalList_Standard *)&SnippetUI::_HorizontalList_Standard_default_instance_)
  {
    unsigned int v11 = (SnippetUI::TextProperty *)*((void *)this + 6);
    if (v11)
    {
      unsigned int v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v2
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::HorizontalList_Standard *)((char *)this + 8), v2, (_DWORD *)this + 14);
  }
  else
  {
    *((_DWORD *)this + 14) = v2;
    return (char *)v2;
  }
}

uint64_t SnippetUI::HorizontalList_Standard::IsInitialized(SnippetUI::HorizontalList_Standard *this)
{
  return 1;
}

SnippetUI::HorizontalList_Standard *SnippetUI::HorizontalList_Standard::New(SnippetUI::HorizontalList_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard>(a2);
}

SnippetUI::HorizontalList_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::HorizontalList_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::HorizontalList_Standard>);
  }
  SnippetUI::HorizontalList_Standard::HorizontalList_Standard(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60FBFB8(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C404C48FE96);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::HorizontalList_Standard>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::HorizontalList_Standard *SnippetUI::HorizontalList_Standard::New(SnippetUI::HorizontalList_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard>(0);
}

void SnippetUI::HorizontalList_Standard::~HorizontalList_Standard(SnippetUI::HorizontalList_Standard *this)
{
  SnippetUI::HorizontalList_Standard::~HorizontalList_Standard(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;

  *(void *)this = &unk_1F21262D8;
  uint64_t v2 = *((void *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::HorizontalList_Standard *)&SnippetUI::_HorizontalList_Standard_default_instance_)
  {
    uint64_t v4 = *((void *)this + 6);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::HorizontalList_Standard *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::HorizontalList_Standard_Item_Style_descriptor(SnippetUI *this)
{
  return file_level_enum_descriptors_HorizontalList_2eproto;
}

BOOL SnippetUI::HorizontalList_Standard_Item_Style_IsValid(SnippetUI *this)
{
  return this < 3;
}

void SnippetUI::HorizontalList_Standard_Item::InitAsDefaultInstance(SnippetUI::HorizontalList_Standard_Item *this)
{
  qword_1EA3DB7F8 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EA3DB800 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EA3DB808 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EA3DB810 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::HorizontalList_Standard_Item::_Internal::thumbnail(SnippetUI::HorizontalList_Standard_Item::_Internal *this, const SnippetUI::HorizontalList_Standard_Item *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::HorizontalList_Standard_Item::_Internal::text_1(SnippetUI::HorizontalList_Standard_Item::_Internal *this, const SnippetUI::HorizontalList_Standard_Item *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::HorizontalList_Standard_Item::_Internal::text_2(SnippetUI::HorizontalList_Standard_Item::_Internal *this, const SnippetUI::HorizontalList_Standard_Item *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::HorizontalList_Standard_Item::_Internal::action(SnippetUI::HorizontalList_Standard_Item::_Internal *this, const SnippetUI::HorizontalList_Standard_Item *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::HorizontalList_Standard_Item::clear_thumbnail(SnippetUI::HorizontalList_Standard_Item *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::HorizontalList_Standard_Item::clear_text_1(SnippetUI::HorizontalList_Standard_Item *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::HorizontalList_Standard_Item::clear_text_2(SnippetUI::HorizontalList_Standard_Item *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::HorizontalList_Standard_Item::clear_action(SnippetUI::HorizontalList_Standard_Item *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

SnippetUI::HorizontalList_Standard_Item *SnippetUI::HorizontalList_Standard_Item::HorizontalList_Standard_Item(SnippetUI::HorizontalList_Standard_Item *this, const SnippetUI::HorizontalList_Standard_Item *a2)
{
  *(void *)this = &unk_1F2126218;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 15) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::HorizontalList_Standard_Item *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  if (a2 == (const SnippetUI::HorizontalList_Standard_Item *)&SnippetUI::_HorizontalList_Standard_Item_default_instance_)
  {
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
    *((void *)this + 5) = 0;
  }
  else
  {
    if (*((void *)a2 + 3)) {
      operator new();
    }
    *((void *)this + 3) = 0;
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
  }
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  return this;
}

void sub_1C60FC480(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::HorizontalList_Standard_Item::default_instance(SnippetUI::HorizontalList_Standard_Item *this)
{
  if (atomic_load_explicit(scc_info_HorizontalList_Standard_Item_HorizontalList_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_HorizontalList_Standard_Item_HorizontalList_2eproto);
  }
  return &SnippetUI::_HorizontalList_Standard_Item_default_instance_;
}

void SnippetUI::HorizontalList_Standard_Item::CopyFrom(SnippetUI::HorizontalList_Standard_Item *this, const SnippetUI::HorizontalList_Standard_Item *a2)
{
  if (a2 != this)
  {
    SnippetUI::HorizontalList_Standard_Item::Clear(this);
    SnippetUI::HorizontalList_Standard_Item::MergeFrom(this, a2);
  }
}

void SnippetUI::HorizontalList_Standard_Item::InternalSwap(SnippetUI::HorizontalList_Standard_Item *this, SnippetUI::HorizontalList_Standard_Item *a2)
{
  uint64_t v4 = (SnippetUI::HorizontalList_Standard_Item *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v17;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  int v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)int v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  std::string::size_type v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v15;
  uint64_t v16 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v16;
  LODWORD(vgoogle::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v16;
}

void SnippetUI::HorizontalList_Standard::InitAsDefaultInstance(SnippetUI::HorizontalList_Standard *this)
{
  qword_1EA3DB850 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::HorizontalList_Standard::_Internal::text_1(SnippetUI::HorizontalList_Standard::_Internal *this, const SnippetUI::HorizontalList_Standard *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::HorizontalList_Standard::clear_text_1(SnippetUI::HorizontalList_Standard *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

SnippetUI::HorizontalList_Standard *SnippetUI::HorizontalList_Standard::HorizontalList_Standard(SnippetUI::HorizontalList_Standard *this, const SnippetUI::HorizontalList_Standard *a2)
{
  *(void *)this = &unk_1F21262D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (SnippetUI::HorizontalList_Standard *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::HorizontalList_Standard_Item>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 14) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v6 = *((void *)a2 + 5);
  if (*(char *)(v6 + 23) < 0) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  }
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, v6);
  }
  if (a2 != (const SnippetUI::HorizontalList_Standard *)&SnippetUI::_HorizontalList_Standard_default_instance_
    && *((void *)a2 + 6))
  {
    operator new();
  }
  *((void *)this + 6) = 0;
  return this;
}

void sub_1C60FC81C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v3, 0x10A1C40BEC01B52);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::HorizontalList_Standard::default_instance(SnippetUI::HorizontalList_Standard *this)
{
  if (atomic_load_explicit(scc_info_HorizontalList_Standard_HorizontalList_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_HorizontalList_Standard_HorizontalList_2eproto);
  }
  return &SnippetUI::_HorizontalList_Standard_default_instance_;
}

void SnippetUI::HorizontalList_Standard::CopyFrom(SnippetUI::HorizontalList_Standard *this, const SnippetUI::HorizontalList_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::HorizontalList_Standard::Clear(this);
    SnippetUI::HorizontalList_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::HorizontalList_Standard::InternalSwap(SnippetUI::HorizontalList_Standard *this, SnippetUI::HorizontalList_Standard *a2)
{
  uint64_t v4 = (SnippetUI::HorizontalList_Standard *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v14;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::HorizontalList_Standard *)((char *)this + 16), (SnippetUI::HorizontalList_Standard *)((char *)a2 + 16));
  uint64_t v7 = (uint64_t *)*((void *)this + 5);
  uint64_t v8 = (uint64_t **)((char *)a2 + 40);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 5);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  std::string::size_type v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v13;
}

void InitDefaultsscc_info_CoreChart_CoreChart_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CoreChart.pb.cc", a4);
  SnippetUI::CoreChart::CoreChart((SnippetUI::CoreChart *)&SnippetUI::_CoreChart_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_CoreChart_default_instance_, v4);
}

SnippetUI::CoreChart *SnippetUI::CoreChart::CoreChart(SnippetUI::CoreChart *this)
{
  *(void *)this = &unk_1F21263C8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load_explicit(scc_info_CoreChart_CoreChart_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_CoreChart_CoreChart_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C60FCAEC(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::CoreChart::GetMetadata(SnippetUI::CoreChart *this)
{
  return file_level_metadata_CoreChart_2eproto;
}

uint64_t SnippetUI::CoreChart::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void SnippetUI::CoreChart::MergeFrom(SnippetUI::CoreChart *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CoreChart.pb.cc", 216);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::CoreChart::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C60FCC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::CoreChart::MergeFrom(SnippetUI::CoreChart *this, const SnippetUI::CoreChart *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CoreChart.pb.cc", 231);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::CoreChart *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      return;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    return;
  }
  uint64_t v9 = (std::string *)*((void *)this + 2);
  uint64_t v8 = (char *)this + 16;
  char v7 = v9;
  if (v9 != (std::string *)v6)
  {
    if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v8, v6);
    }
    std::string::operator=(v7, (const std::string *)v6);
  }
}

void sub_1C60FCCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::CoreChart::CopyFrom(SnippetUI::CoreChart *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::CoreChart::Clear(this);
    SnippetUI::CoreChart::MergeFrom(this, a2);
  }
}

void SnippetUI::CoreChart::Clear(SnippetUI::CoreChart *this)
{
  uint64_t v1 = *((void *)this + 2);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::CoreChart *)((char *)this + 8);
  if (v3) {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::CoreChart::InternalSerializeWithCachedSizesToArray(SnippetUI::CoreChart *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = (unsigned __int8 *)a2;
  uint64_t v6 = *((void *)this + 2);
  if ((*(char *)(v6 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v6 + 23)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*(void *)(v6 + 8)) {
LABEL_3:
  }
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, (const void **)v6, a2);
LABEL_4:
  uint64_t v7 = *((void *)this + 1);
  if ((v7 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v4;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v7 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v4, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
}

google::protobuf::internal *SnippetUI::CoreChart::_InternalParse(SnippetUI::CoreChart *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v12 = a2;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v12, *((_DWORD *)a3 + 23))) {
      return v12;
    }
    TagFallbacint k = (google::protobuf::internal *)((char *)v12 + 1);
    uint64_t v8 = (char *)*(unsigned __int8 *)v12;
    if ((*(char *)v12 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v12 + 2);
LABEL_6:
      uint64_t v12 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v12, v8);
    uint64_t v12 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v8 == 10)
    {
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      }
      char v10 = google::protobuf::internal::InlineGreedyStringParser(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3);
      goto LABEL_16;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    char v10 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v4, TagFallback, a3, v6);
LABEL_16:
    uint64_t v12 = (google::protobuf::internal *)v10;
    if (!v10) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

uint64_t SnippetUI::CoreChart::GetCachedSize(SnippetUI::CoreChart *this)
{
  return *((unsigned int *)this + 6);
}

char *SnippetUI::CoreChart::ByteSizeLong(SnippetUI::CoreChart *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(void *)(v1 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v1 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = v2;
  }
  uint64_t v4 = (const google::protobuf::UnknownFieldSet *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::CoreChart *)((char *)this + 8), v4, (_DWORD *)this + 6);
  }
  *((_DWORD *)this + 6) = v4;
  return (char *)v4;
}

uint64_t SnippetUI::CoreChart::IsInitialized(SnippetUI::CoreChart *this)
{
  return 1;
}

SnippetUI::CoreChart *SnippetUI::CoreChart::New(SnippetUI::CoreChart *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChart>(a2);
}

SnippetUI::CoreChart *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChart>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::CoreChart *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::CoreChart>);
  }
  SnippetUI::CoreChart::CoreChart(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C60FD068(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::CoreChart>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::CoreChart *SnippetUI::CoreChart::New(SnippetUI::CoreChart *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChart>(0);
}

void SnippetUI::CoreChart::~CoreChart(SnippetUI::CoreChart *this)
{
  SnippetUI::CoreChart::~CoreChart(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F21263C8;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::CoreChart *SnippetUI::CoreChart::CoreChart(SnippetUI::CoreChart *this, const SnippetUI::CoreChart *a2)
{
  *(void *)this = &unk_1F21263C8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::CoreChart *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  return this;
}

void sub_1C60FD228(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::CoreChart::default_instance(SnippetUI::CoreChart *this)
{
  if (atomic_load_explicit(scc_info_CoreChart_CoreChart_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_CoreChart_CoreChart_2eproto);
  }
  return &SnippetUI::_CoreChart_default_instance_;
}

void SnippetUI::CoreChart::CopyFrom(SnippetUI::CoreChart *this, const SnippetUI::CoreChart *a2)
{
  if (a2 != this)
  {
    SnippetUI::CoreChart::Clear(this);
    SnippetUI::CoreChart::MergeFrom(this, a2);
  }
}

__n128 SnippetUI::CoreChart::InternalSwap(SnippetUI::CoreChart *this, SnippetUI::CoreChart *a2)
{
  uint64_t v4 = (SnippetUI::CoreChart *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  char v10 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (std::string **)((char *)this + 16);
  uint64_t v9 = (std::string *)v10;
  long long v11 = (std::string **)((char *)a2 + 16);
  if (v10 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      return result;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v8, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v12 = *v11;
  if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v12 = *v11;
  }
  std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
  __n128 result = *(__n128 *)&v9->__r_.__value_.__l.__data_;
  std::string::size_type v14 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v9->__r_.__value_.__r.__words[2] = v14;
  *(__n128 *)&v12->__r_.__value_.__l.__data_ = result;
  v12->__r_.__value_.__r.__words[2] = v13;
  return result;
}

uint64_t non-virtual thunk to'siri::dialogengine::Condition::Validate(siri::dialogengine::Condition *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::Condition::Validate((siri::dialogengine::Condition *)((char *)this - 64), a2);
}

uint64_t siri::dialogengine::Condition::Validate(siri::dialogengine::Condition *this, siri::dialogengine::Context *a2)
{
  if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 119)) {
      goto LABEL_3;
    }
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(__p, "Condition has no name attribute");
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)__p, (uint64_t)this);
    if (SHIBYTE(v15) < 0)
    {
      uint64_t v8 = __p[0];
LABEL_16:
      operator delete(v8);
      return 0;
    }
    return 0;
  }
  if (!*((void *)this + 13)) {
    goto LABEL_9;
  }
LABEL_3:
  if (!siri::dialogengine::IsValidCompoundVariableName((uint64_t)this + 96))
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v13, "' (Name must match regex \"[a-zA-Z_][a-zA-Z0-9_\\-]*\")");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)__p, (uint64_t)this);
    goto LABEL_12;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v4 = (uint64_t *)*((void *)this + 18);
  unint64_t v5 = *((void *)this + 19) - (void)v4;
  if (!v5) {
    return 1;
  }
  if (v5 >= 0x11)
  {
    std::operator+<char>();
    uint64_t v6 = std::string::append(&v13, "'");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)__p, (uint64_t)this);
LABEL_12:
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v8 = (void *)v13.__r_.__value_.__r.__words[0];
    goto LABEL_16;
  }
  uint64_t v12 = *v4;
  return siri::dialogengine::Condition::ValidateConditionEntry((uint64_t)this, (uint64_t)a2, v12, (uint64_t)this + 96);
}

void sub_1C60FD55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Condition::ValidateConditionEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  if (!a3) {
    return v4;
  }
  int v8 = *(_DWORD *)(a3 + 32);
  unsigned int v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(&v21, *(void **)(a3 + 64), *(void **)(a3 + 72), (uint64_t)(*(void *)(a3 + 72) - *(void *)(a3 + 64)) >> 4);
  if (v8 == 2)
  {
    if (v22 - v21 != 16) {
      goto LABEL_14;
    }
  }
  else if (v8 == 1)
  {
    if ((unint64_t)(v22 - v21) <= 0x1F) {
      goto LABEL_14;
    }
  }
  else if (v8)
  {
    if ((v8 - 3) > 1 || v22 != v21) {
      goto LABEL_14;
    }
  }
  else if ((unint64_t)(v22 - v21) <= 0x1F)
  {
LABEL_14:
    std::operator+<char>();
    long long v10 = std::string::append(&v18, "'");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError(a2, (long long *)__p, a1);
    if (SHIBYTE(v20) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    int v9 = 0;
    goto LABEL_19;
  }
  int v9 = 1;
LABEL_19:
  uint64_t v4 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a2) & v9;
  uint64_t v12 = v21;
  for (uint64_t i = v22; v12 != i; v12 += 16)
  {
    uint64_t v14 = *(void *)v12;
    std::string::size_type v15 = (std::__shared_weak_count *)*((void *)v12 + 1);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v16 = siri::dialogengine::Condition::ValidateConditionEntry(a1, a2, v14, a4);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    uint64_t v4 = v16 & v4;
  }
  __p[0] = &v21;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v4;
}

void sub_1C60FD8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::string __p = &a22;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'siri::dialogengine::Condition::~Condition(siri::dialogengine::Condition *this)
{
  uint64_t v2 = (void **)((char *)this - 64);
  *((void *)this - 8) = &unk_1F21264A0;
  *(void *)this = &unk_1F21264C8;
  uint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  *(void *)this = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 2));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  JUMPOUT(0x1C8796D70);
}

{
  void **v2;
  void **v3;
  uint64_t vars8;

  uint64_t v2 = (void **)((char *)this - 64);
  *((void *)this - 8) = &unk_1F21264A0;
  *(void *)this = &unk_1F21264C8;
  uint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  *(void *)this = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 2));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
}

void siri::dialogengine::Condition::~Condition(siri::dialogengine::Condition *this)
{
  *(void *)this = &unk_1F21264A0;
  *((void *)this + 8) = &unk_1F21264C8;
  uint64_t v2 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  *((void *)this + 8) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  JUMPOUT(0x1C8796D70);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F21264A0;
  *((void *)this + 8) = &unk_1F21264C8;
  uint64_t v2 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  *((void *)this + 8) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

double siri::dialogengine::Condition::Condition(siri::dialogengine::Condition *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *(void *)this = &unk_1F21264A0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = &unk_1F21264C8;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 20) = 0;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *(void *)this = &unk_1F21264A0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = &unk_1F21264C8;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 20) = 0;
  return result;
}

uint64_t siri::dialogengine::Condition::Condition(uint64_t a1, long long *a2, void **a3)
{
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)a1 = &unk_1F21264A0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = &unk_1F21264C8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 112) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 96) = v5;
  }
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((void *)(a1 + 144), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_1C60FDE78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 64) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(v1 + 80));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Condition::GetName(siri::dialogengine::Condition *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 12), *((void *)this + 13));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 14);
  }
}

std::string *siri::dialogengine::Condition::SetName(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 4, a2);
}

uint64_t siri::dialogengine::Condition::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 143);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 143);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 128);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 143);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 128);
  }
  if (v3 != v4) {
    return 0;
  }
  int v8 = (const void **)(a1 + 120);
  if (v5 >= 0) {
    int v9 = (unsigned __int8 *)(a2 + 120);
  }
  else {
    int v9 = *(unsigned __int8 **)(a2 + 120);
  }
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*v8, v9, *(void *)(a1 + 128))) {
      goto LABEL_17;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 143))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      int v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(&v17, *(void **)(a2 + 144), *(void **)(a2 + 152), (uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 4);
  uint64_t v11 = *(void *)(a1 + 144);
  uint64_t v12 = *(void *)(a1 + 152);
  if (v12 - v11 == v18 - v17)
  {
    if (v12 == v11)
    {
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      do
      {
        int v15 = (*(uint64_t (**)(void, void))(**(void **)(v11 + v13) + 32))(*(void *)(v11 + v13), *(void *)(v17 + v13));
        if (v15) {
          break;
        }
        ++v14;
        uint64_t v11 = *(void *)(a1 + 144);
        v13 += 16;
      }
      while (v14 < (*(void *)(a1 + 152) - v11) >> 4);
      uint64_t v10 = v15 ^ 1u;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::string::size_type v20 = (void **)&v17;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v20);
  return v10;
}

void sub_1C60FE080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void *siri::dialogengine::Condition::GetEntries@<X0>(siri::dialogengine::Condition *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(a2, *((void **)this + 18), *((void **)this + 19), (uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 4);
}

uint64_t siri::dialogengine::Condition::operator!=(uint64_t a1, uint64_t a2)
{
  return siri::dialogengine::Condition::operator==(a1, a2) ^ 1;
}

void siri::dialogengine::Condition::SetEntries(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 144);
  if (v2 != (uint64_t *)a2) {
    std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(v2, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
}

void siri::dialogengine::Condition::AddEntry(uint64_t a1, long long *a2)
{
}

void siri::dialogengine::Condition::GetNote(siri::dialogengine::Condition *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 15), *((void *)this + 16));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 120);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 17);
  }
}

std::string *siri::dialogengine::Condition::SetNote(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 5, a2);
}

uint64_t siri::dialogengine::Condition::HasInfiniteLoop(siri::dialogengine::Condition *this, siri::dialogengine::Context *a2)
{
  if (!a2) {
    return 0;
  }
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v4 = v5;
  uint64_t HasInfiniteLoop = siri::dialogengine::ConditionHasInfiniteLoop((uint64_t)a2, (uint64_t)this, (uint64_t)&v4);
  std::__tree<std::string>::destroy((uint64_t)&v4, v5[0]);
  return HasInfiniteLoop;
}

void sub_1C60FE19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t siri::dialogengine::ConditionHasInfiniteLoop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(&v12, *(void **)(a2 + 144), *(void **)(a2 + 152), (uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 4);
  int v5 = v12;
  uint64_t v6 = v13;
  if (v12 == v13)
  {
    uint64_t HasInfiniteLoop = 0;
  }
  else
  {
    do
    {
      long long v7 = (std::__shared_weak_count *)v5[1];
      v11[0] = *v5;
      v11[1] = (uint64_t)v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t HasInfiniteLoop = siri::dialogengine::ConditionEntryHasInfiniteLoop(a1, v11, a3);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v5 += 2;
      if (v5 == v6) {
        char v9 = 1;
      }
      else {
        char v9 = HasInfiniteLoop;
      }
    }
    while ((v9 & 1) == 0);
  }
  int v15 = (void **)&v12;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v15);
  return HasInfiniteLoop;
}

void sub_1C60FE288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ConditionEntryHasInfiniteLoop(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (!*a2) {
    return 0;
  }
  if (*(_DWORD *)(v3 + 32) == 4)
  {
    if (v7)
    {
      if (v7[175] < 0) {
        std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)v7 + 19), *((void *)v7 + 20));
      }
      else {
        std::string v27 = *(std::string *)(v7 + 152);
      }
      char v9 = (uint64_t **)std::__tree<std::string>::find<std::string>(a3, (const void **)&v27.__r_.__value_.__l.__data_);
      if ((uint64_t **)(a3 + 8) != v9)
      {
        int v10 = 1;
LABEL_37:
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v27.__r_.__value_.__l.__data_);
          if (v10) {
            return 1;
          }
        }
        else if (v10)
        {
          return 1;
        }
        uint64_t v3 = *a2;
        goto LABEL_42;
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a3, (const void **)&v27.__r_.__value_.__l.__data_, (uint64_t)&v27);
      uint64_t v12 = *(std::__shared_weak_count **)(a1 + 504);
      uint64_t v11 = *(std::__shared_weak_count **)(a1 + 512);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v12)
      {
        uint64_t v13 = std::__tree<std::string>::find<std::string>((uint64_t)&v12[11].__shared_owners_, (const void **)&v27.__r_.__value_.__l.__data_);
        if (&v12[11].__shared_weak_owners_ == (uint64_t *)v13)
        {
          uint64_t v12 = 0;
        }
        else
        {
          uint64_t v14 = *(void *)(v13 + 56);
          uint64_t v12 = *(std::__shared_weak_count **)(v13 + 64);
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v14 && (siri::dialogengine::ConditionHasInfiniteLoop(a1, v14, a3) & 1) != 0)
          {
            int v10 = 1;
LABEL_33:
            if (v12) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
            if (v11) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v11);
            }
            goto LABEL_37;
          }
        }
      }
      int v15 = (uint64_t *)std::__tree<std::string>::find<std::string>(a3, (const void **)&v27.__r_.__value_.__l.__data_);
      int v16 = v15;
      if (v9 != (uint64_t **)v15)
      {
        uint64_t v17 = (uint64_t *)v15[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            uint64_t v17 = (uint64_t *)*v17;
          }
          while (v17);
        }
        else
        {
          uint64_t v19 = v15;
          do
          {
            uint64_t v18 = (uint64_t *)v19[2];
            BOOL v20 = *v18 == (void)v19;
            uint64_t v19 = v18;
          }
          while (!v20);
        }
        if (*(uint64_t **)a3 == v15) {
          *(void *)a3 = v18;
        }
        --*(void *)(a3 + 16);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*v9, v15);
        if (*((char *)v16 + 55) < 0) {
          operator delete((void *)v16[4]);
        }
        operator delete(v16);
      }
      int v10 = 0;
      goto LABEL_33;
    }
  }
LABEL_42:
  memset(&v27, 0, sizeof(v27));
  std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(&v27, *(void **)(v3 + 64), *(void **)(v3 + 72), (uint64_t)(*(void *)(v3 + 72) - *(void *)(v3 + 64)) >> 4);
  std::string::size_type size = v27.__r_.__value_.__l.__size_;
  unsigned int v21 = (void *)v27.__r_.__value_.__r.__words[0];
  if (v27.__r_.__value_.__r.__words[0] == v27.__r_.__value_.__l.__size_)
  {
    uint64_t HasInfiniteLoop = 0;
  }
  else
  {
    do
    {
      uint64_t v23 = (std::__shared_weak_count *)v21[1];
      v26[0] = *v21;
      v26[1] = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t HasInfiniteLoop = siri::dialogengine::ConditionEntryHasInfiniteLoop(a1, v26, a3);
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      v21 += 2;
      if (v21 == (void *)size) {
        char v24 = 1;
      }
      else {
        char v24 = HasInfiniteLoop;
      }
    }
    while ((v24 & 1) == 0);
  }
  int v28 = &v27;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  return HasInfiniteLoop;
}

void sub_1C60FE574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Condition::Evaluate(siri::dialogengine::Condition *this, siri::dialogengine::Context *a2, siri::dialogengine::ExecutionState *a3, siri::dialogengine::ExecutionState *a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = (siri::dialogengine::Context **)*((void *)this + 18);
  if (v4 == *((siri::dialogengine::Context ***)this + 19)) {
    return 0;
  }
  else {
    return siri::dialogengine::EvaluateConditionEntry(a2, *v4, a3, a4);
  }
}

uint64_t siri::dialogengine::EvaluateConditionEntry(siri::dialogengine *this, siri::dialogengine::Context *a2, siri::dialogengine::ConditionEntry *a3, siri::dialogengine::ExecutionState *a4)
{
  uint64_t v4 = (uint64_t)a2;
  if (a2)
  {
    int v7 = *((_DWORD *)a2 + 8);
    unsigned int v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(&v21, *((void **)a2 + 8), *((void **)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 4);
    switch(v7)
    {
      case 0:
        char v9 = v21;
        int v10 = v22;
        if (v21 == v22)
        {
          uint64_t v4 = 1;
        }
        else
        {
          do
          {
            uint64_t v11 = *v9;
            uint64_t v12 = (std::__shared_weak_count *)v9[1];
            if (v12) {
              atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v4 = siri::dialogengine::EvaluateConditionEntry(this, v11, a3, v8);
            if (v12) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
            v9 += 2;
            if (v9 == v10) {
              char v13 = 0;
            }
            else {
              char v13 = v4;
            }
          }
          while ((v13 & 1) != 0);
        }
        break;
      case 1:
        uint64_t v14 = v21;
        int v15 = v22;
        if (v21 == v22) {
          goto LABEL_29;
        }
        do
        {
          int v16 = *v14;
          uint64_t v17 = (std::__shared_weak_count *)v14[1];
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v4 = siri::dialogengine::EvaluateConditionEntry(this, v16, a3, v8);
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          v14 += 2;
          if (v14 == v15) {
            char v18 = 1;
          }
          else {
            char v18 = v4;
          }
        }
        while ((v18 & 1) == 0);
        break;
      case 2:
        if (v22 == v21) {
          goto LABEL_29;
        }
        uint64_t v4 = siri::dialogengine::EvaluateConditionEntry(this, *v21, a3, v8) ^ 1;
        break;
      case 3:
        if (!v19) {
          goto LABEL_29;
        }
        goto LABEL_28;
      case 4:
        if (!v19) {
          goto LABEL_29;
        }
LABEL_28:
        uint64_t v4 = (*(uint64_t (**)(void *, siri::dialogengine *, siri::dialogengine::ConditionEntry *))(*(void *)v19 + 40))(v19, this, a3);
        break;
      default:
LABEL_29:
        uint64_t v4 = 0;
        break;
    }
    char v24 = &v21;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  }
  return v4;
}

void sub_1C60FE870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::FormatXMLElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v23);
  char v27 = 60;
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&v27, 1);
  int v7 = *(char *)(a1 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = *(void *)a1;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a1 + 8);
  }
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  char v27 = 32;
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v27, 1);
  int v12 = *(char *)(a2 + 23);
  if (v12 >= 0) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = *(void *)a2;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v14 = *(void *)(a2 + 8);
  }
  int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
  int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"=\"", 2);
  int v17 = *(char *)(a3 + 23);
  if (v17 >= 0) {
    uint64_t v18 = a3;
  }
  else {
    uint64_t v18 = *(void *)a3;
  }
  if (v17 >= 0) {
    uint64_t v19 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v19 = *(void *)(a3 + 8);
  }
  BOOL v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\"/>", 3);
  std::stringbuf::str();
  v23[0] = *MEMORY[0x1E4FBA408];
  uint64_t v21 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v23 + *(void *)(v23[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v24[0] = v21;
  v24[1] = MEMORY[0x1E4FBA470] + 16;
  if (v25 < 0) {
    operator delete((void *)v24[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8796CC0](&v26);
}

void sub_1C60FEAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *siri::dialogengine::ChunkList::ChunkList(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

uint64_t *siri::dialogengine::ChunkList::ChunkList(uint64_t *a1, uint64_t **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a1 != (uint64_t *)a2) {
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
  return a1;
}

void sub_1C60FEB50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkList::SetChunks(uint64_t *a1, uint64_t **a2)
{
  if (a1 != (uint64_t *)a2) {
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
}

void *siri::dialogengine::ChunkList::GetChunks@<X0>(siri::dialogengine::ChunkList *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(a2, *(void **)this, *((void **)this + 1), (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
}

void *std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::ConditionEntry>>,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C60FEC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t *siri::dialogengine::ChunkList::AddChunk(uint64_t *result, long long *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result + 2;
  unint64_t v5 = result[2];
  uint64_t v6 = (void *)result[1];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = ((uint64_t)v6 - *result) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *result;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v12);
    uint64_t v14 = &v13[16 * v9];
    v17[0] = v13;
    v17[1] = v14;
    void v17[3] = &v13[16 * v15];
    long long v16 = *a2;
    *(_OWORD *)uint64_t v14 = *a2;
    if (*((void *)&v16 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::string v17[2] = v14 + 16;
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__swap_out_circular_buffer(v3, v17);
    uint64_t v8 = (void *)v3[1];
    double result = (uint64_t *)std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    void *v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
    v6[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = v6 + 2;
  }
  v3[1] = (uint64_t)v8;
  return result;
}

BOOL siri::dialogengine::ChunkList::IsEmpty(siri::dialogengine::ChunkList *this)
{
  return *(void *)this == *((void *)this + 1);
}

BOOL siri::dialogengine::ChunkList::HasChildren(siri::dialogengine::ChunkList *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (*(void *)this != v2)
  {
    while (1)
    {
      uint64_t v4 = *(const void **)v1;
      uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v4) {
        break;
      }
      {
LABEL_15:
        BOOL v5 = v7 == 0;
        if (!v3) {
          goto LABEL_9;
        }
LABEL_8:
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
        goto LABEL_9;
      }
      BOOL v5 = 0;
      if (v3) {
        goto LABEL_8;
      }
LABEL_9:
      v1 += 16;
      if (v1 == v2 || !v5) {
        return !v5;
      }
    }
    uint64_t v7 = 0;
    goto LABEL_15;
  }
  return 0;
}

uint64_t siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases(siri::dialogengine::ChunkList *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (*(void *)this != v2)
  {
    while (1)
    {
      uint64_t v4 = *(const void **)v1;
      uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4)
      {
        if (v5)
        {
          if (!v5[248]) {
            break;
          }
        }
        if (v6)
        {
          if (!v6[248]) {
            break;
          }
        }
      }
      uint64_t v7 = 0;
      if (v3) {
        goto LABEL_10;
      }
LABEL_11:
      v1 += 16;
      if (v1 == v2) {
        int v8 = 1;
      }
      else {
        int v8 = v7;
      }
      if (v8 == 1) {
        return v7;
      }
    }
    uint64_t v7 = 1;
    if (!v3) {
      goto LABEL_11;
    }
LABEL_10:
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    goto LABEL_11;
  }
  return 0;
}

void siri::dialogengine::ChunkList::GetOuterChunks(siri::dialogengine::ChunkList *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)this;
  unint64_t v5 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4;
  if (v5 > a2)
  {
    int v8 = *(const void **)(v4 + 16 * a2);
    if (v8)
    {
      if (v9)
      {
        unint64_t v10 = a2 + 1;
        if (a2 + 1 < v5)
        {
          uint64_t v11 = v9;
          int v12 = 0;
          BOOL v30 = (std::string *)(v9 + 200);
          while (1)
          {
            uint64_t v13 = *(const void **)(v4 + 16 * v10);
            if (!v13) {
              goto LABEL_44;
            }
            if (!v14) {
              goto LABEL_44;
            }
            uint64_t v15 = v14;
            if (v14[223] < 0) {
              std::string::__init_copy_ctor_external(&v32, *((const std::string::value_type **)v14 + 25), *((void *)v14 + 26));
            }
            else {
              std::string v32 = *(std::string *)(v14 + 200);
            }
            if (v11[223] < 0) {
              std::string::__init_copy_ctor_external(&v31, *((const std::string::value_type **)v11 + 25), *((void *)v11 + 26));
            }
            else {
              std::string v31 = *v30;
            }
            char v16 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
            if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v32.__r_.__value_.__l.__size_;
            }
            std::string::size_type v18 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
            int v19 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v18 = v31.__r_.__value_.__l.__size_;
            }
            if (size != v18)
            {
              BOOL v29 = 0;
              if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_36;
              }
              goto LABEL_41;
            }
            BOOL v20 = (v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v31
                : (std::string *)v31.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
              break;
            }
            if (*((unsigned char *)&v32.__r_.__value_.__s + 23))
            {
              uint64_t v21 = HIBYTE(v32.__r_.__value_.__r.__words[2]) - 1;
              uint64_t v22 = &v32;
              do
              {
                int v24 = v22->__r_.__value_.__s.__data_[0];
                uint64_t v22 = (std::string *)((char *)v22 + 1);
                int v23 = v24;
                int v26 = v20->__r_.__value_.__s.__data_[0];
                BOOL v20 = (std::string *)((char *)v20 + 1);
                int v25 = v26;
                BOOL v28 = v21-- != 0;
                BOOL v29 = v23 == v25;
              }
              while (v23 == v25 && v28);
LABEL_35:
              if ((v19 & 0x80000000) == 0) {
                goto LABEL_36;
              }
              goto LABEL_41;
            }
            BOOL v29 = 1;
            if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_36:
              if ((v16 & 0x80) == 0) {
                goto LABEL_37;
              }
              goto LABEL_42;
            }
LABEL_41:
            operator delete(v31.__r_.__value_.__l.__data_);
            if ((*((unsigned char *)&v32.__r_.__value_.__s + 23) & 0x80) == 0)
            {
LABEL_37:
              if (!v29) {
                goto LABEL_43;
              }
              goto LABEL_38;
            }
LABEL_42:
            operator delete(v32.__r_.__value_.__l.__data_);
            if (!v29)
            {
LABEL_43:
              uint64_t v4 = *(void *)this;
              goto LABEL_44;
            }
LABEL_38:
            uint64_t v4 = *(void *)this;
            int v12 = v12 + v15[224] - v15[225];
            if (v12 < 0)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText> const*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText> const*>>(a3, (void *)(v4 + 16 * a2), (void *)(v4 + 16 * v10 + 16), (uint64_t)(16 * v10 + 16 - 16 * a2) >> 4);
              return;
            }
LABEL_44:
            if (++v10 >= (*((void *)this + 1) - v4) >> 4) {
              goto LABEL_45;
            }
          }
          BOOL v29 = memcmp(v32.__r_.__value_.__l.__data_, v20, v32.__r_.__value_.__l.__size_) == 0;
          goto LABEL_35;
        }
      }
    }
  }
LABEL_45:
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_1C60FF238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText> const*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText> const*>>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::ConditionEntry>>,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C60FF2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void siri::dialogengine::ChunkList::GetInnerChunks(siri::dialogengine::ChunkList *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  siri::dialogengine::ChunkList::GetOuterChunks(this, a2, &v8);
  uint64_t v5 = v8;
  uint64_t v4 = v9;
  uint64_t v6 = v9 - v8;
  if ((unint64_t)(v9 - v8) < 0x11)
  {
    *(void *)a3 = v8;
    *(void *)(a3 + 8) = v4;
    *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v10;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = (v6 >> 4) - 1;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
    uint64_t v11 = (void **)a3;
    char v12 = 0;
    if (v6 >> 4 != 2)
    {
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100]((void *)a3, (16 * v7 - 16) >> 4);
      *(void *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::ConditionEntry>>,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(a3 + 16, (void *)(v5 + 16), (void *)(v5 + 16 * v7), *(void **)(a3 + 8));
    }
  }
  uint64_t v11 = (void **)&v8;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_1C60FF388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ChunkList::Validate(siri::dialogengine::ChunkList *this, siri::dialogengine::Context *a2, const siri::dialogengine::LineNumberBase *a3)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(&v16, *(void **)this, *((void **)this + 1), (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
  uint64_t v6 = v16;
  if (v17 == v16)
  {
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    LODWORD(v9) = 1;
    do
    {
      uint64_t v10 = (uint64_t *)(v6 + v7);
      uint64_t v12 = *v10;
      uint64_t v11 = (std::__shared_weak_count *)v10[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::dialogengine::ChunkList::GetInnerChunks(this, v8, (uint64_t)v15);
      int v13 = (*(uint64_t (**)(uint64_t, siri::dialogengine::Context *, const siri::dialogengine::LineNumberBase *, void ***))(*(void *)v12 + 16))(v12, a2, a3, v15);
      int v19 = v15;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      uint64_t v9 = v13 & v9;
      ++v8;
      uint64_t v6 = v16;
      v7 += 16;
    }
    while (v8 < (v17 - v16) >> 4);
  }
  v15[0] = (void **)&v16;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](v15);
  return v9;
}

void sub_1C60FF4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void ***a16)
{
  a16 = &a10;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  a10 = (void **)&a13;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkList::ToString(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
}

void siri::dialogengine::ExpandToText(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0u;
  if (a2 != a3)
  {
    uint64_t v3 = a2;
    uint64_t v12 = (std::string *)(a1 + 24);
    uint64_t v11 = (std::string *)(a1 + 48);
    uint64_t v10 = (std::string *)(a1 + 72);
    uint64_t v5 = (std::string *)(a1 + 96);
    uint64_t v6 = (std::string *)(a1 + 120);
    uint64_t v7 = (std::string *)(a1 + 144);
    while (1)
    {
      uint64_t v8 = *v3;
      uint64_t v9 = (std::__shared_weak_count *)v3[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::dialogengine::SpeakableString::SpeakableString(&v14, (const siri::dialogengine::SpeakableString *)(v8 + 8));
      siri::dialogengine::SpeakableString::Append((siri::dialogengine::SpeakableString *)a1, (const siri::dialogengine::SpeakableString *)&v14, &__str);
      std::string::operator=((std::string *)a1, &__str);
      std::string::operator=(v12, &v28);
      std::string::operator=(v11, &v29);
      std::string::operator=(v10, &v30);
      std::string::operator=(v5, &v31);
      std::string::operator=(v6, &v32);
      std::string::operator=(v7, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v26 < 0) {
        operator delete(v25);
      }
      if (v24 < 0) {
        operator delete(v23);
      }
      if (v22 < 0) {
        operator delete(v21);
      }
      if (v20 < 0) {
        operator delete(v19);
      }
      if (v18 < 0) {
        operator delete(v17);
      }
      if (v16 < 0) {
        operator delete(v15);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v9) {
        goto LABEL_33;
      }
LABEL_34:
      v3 += 2;
      if (v3 == a3) {
        return;
      }
    }
    operator delete(v14.__r_.__value_.__l.__data_);
    if (!v9) {
      goto LABEL_34;
    }
LABEL_33:
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    goto LABEL_34;
  }
}

void sub_1C60FF76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(v8);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkList::Expand(uint64_t *__return_ptr a1@<X8>, siri::dialogengine::ChunkList *this@<X0>, siri::dialogengine::Context *a3@<X1>)
{
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(&v9, *(void **)this, *((void **)this + 1), (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
  if ((void)v9 == *((void *)&v9 + 1))
  {
    siri::dialogengine::ChunkList::ChunkList(a1, (uint64_t **)&v9);
  }
  else
  {
    siri::dialogengine::ExpandVarsAndPhrasesRecursive(&v7, a3, (uint64_t)&v9, 0);
    if (v7)
    {
      long long v11 = 0uLL;
      uint64_t v12 = 0;
      std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(&v11, *v7, v7[1], ((char *)v7[1] - (char *)*v7) >> 4);
      std::vector<std::shared_ptr<siri::dialogengine::Node>>::__vdeallocate((uint64_t *)&v9);
      long long v9 = v11;
      uint64_t v10 = v12;
      uint64_t v12 = 0;
      long long v11 = 0uLL;
      __p[0] = &v11;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      memset(__p, 0, sizeof(__p));
      siri::dialogengine::ExpandTagsRecursive((uint64_t *)&v11, (uint64_t **)a3, (uint64_t)&v9, (void **)__p);
      std::vector<std::shared_ptr<siri::dialogengine::Node>>::__vdeallocate((uint64_t *)&v9);
      long long v9 = v11;
      uint64_t v10 = v12;
      uint64_t v12 = 0;
      long long v11 = 0uLL;
      *(void *)&long long v5 = &v11;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
      *(void *)&long long v5 = __p;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
      if ((void)v9 == *((void *)&v9 + 1)) {
        operator new();
      }
      siri::dialogengine::ChunkList::ChunkList(a1, (uint64_t **)&v9);
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  *(void *)&long long v11 = &v9;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
}

void sub_1C60FFA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, char a20)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  std::string __p = &a20;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ExpandVarsAndPhrasesRecursive(void *a1, siri::dialogengine::Context *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v78 = 0;
  unint64_t v79 = 0;
  unint64_t v80 = 0;
  uint64_t v4 = *(uint64_t **)a3;
  if (*(void *)(a3 + 8) == *(void *)a3) {
    goto LABEL_182;
  }
  unint64_t v7 = 0;
LABEL_3:
  uint64_t v8 = (const void *)v4[2 * v7];
  if (!v8) {
    goto LABEL_161;
  }
  if (!(v9 | (unint64_t)v10))
  {
    if (!v13) {
      goto LABEL_161;
    }
    uint64_t v14 = (uint64_t)v13;
    uint64_t v15 = v13 + 200;
    if (v13[223] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v69, *((const std::string::value_type **)v13 + 25), *((void *)v13 + 26));
    }
    else
    {
      *(_OWORD *)long long v69 = *(_OWORD *)v15;
      *(void *)&v69[16] = *((void *)v13 + 27);
    }
    if ((v69[23] & 0x80000000) != 0)
    {
      if (*(void *)&v69[8] != 3)
      {
        operator delete(*(void **)v69);
LABEL_56:
        if (*(char *)(v14 + 223) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v69, *(const std::string::value_type **)(v14 + 200), *(void *)(v14 + 208));
        }
        else
        {
          *(_OWORD *)long long v69 = *(_OWORD *)v15;
          *(void *)&v69[16] = *((void *)v15 + 2);
        }
        if ((v69[23] & 0x80000000) != 0)
        {
          p_str = *(long long **)v69;
          if (*(void *)&v69[8] != 6) {
            goto LABEL_160;
          }
          BOOL v25 = **(_DWORD **)v69 != 762929523 || *(_WORD *)(*(void *)v69 + 4) != 29537;
          operator delete(*(void **)v69);
          if (v25) {
            goto LABEL_161;
          }
        }
        else
        {
          if (v69[23] != 6) {
            goto LABEL_161;
          }
          if (*(_DWORD *)v69 != 762929523 || *(unsigned __int16 *)&v69[4] != 29537) {
            goto LABEL_161;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(v69, "interpret-as");
        siri::dialogengine::ChunkText::GetAttribute(v14, (uint64_t)v69, (std::string *)&__str);
        if ((v69[23] & 0x80000000) != 0) {
          operator delete(*(void **)v69);
        }
        if (SBYTE7(__str_16) < 0)
        {
          p_str = (long long *)__str;
          if (*((void *)&__str + 1) != 5) {
            goto LABEL_160;
          }
        }
        else
        {
          if (SBYTE7(__str_16) != 5) {
            goto LABEL_161;
          }
          p_str = &__str;
        }
        if (*(_DWORD *)p_str != 1852794992 || *((unsigned char *)p_str + 4) != 101)
        {
          if ((BYTE7(__str_16) & 0x80) != 0) {
            goto LABEL_159;
          }
          goto LABEL_161;
        }
        siri::dialogengine::ChunkList::ChunkList((uint64_t *)v69, (uint64_t **)a3);
        siri::dialogengine::ChunkList::GetInnerChunks((siri::dialogengine::ChunkList *)v69, v7, (uint64_t)v58);
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
        std::string v28 = (const void **)v58[0];
        std::string v29 = v58[1];
        if (v58[0] == v58[1]) {
          goto LABEL_158;
        }
        char v52 = 0;
        while (1)
        {
          if (*v28)
          {
            if (v30)
            {
              uint64_t v31 = (uint64_t)v30;
              std::string::basic_string[abi:ne180100]<0>(&v57, "list");
              siri::dialogengine::ChunkText::GetAttribute(v31, (uint64_t)&v57, (std::string *)v69);
              if (v69[23] >= 0) {
                uint64_t v32 = v69[23];
              }
              else {
                uint64_t v32 = *(void *)&v69[8];
              }
              if ((v69[23] & 0x80000000) != 0) {
                operator delete(*(void **)v69);
              }
              if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v57.__r_.__value_.__l.__data_);
                if (v32)
                {
LABEL_139:
                  std::string::basic_string[abi:ne180100]<0>(v69, "itemformat");
                  siri::dialogengine::ChunkText::GetAttribute(v31, (uint64_t)v69, &v57);
                  if ((v69[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v69);
                  }
                  std::string::basic_string[abi:ne180100]<0>(v69, "[say-as interpret-as=phone]");
                  BOOL v33 = siri::dialogengine::StringStartsWith(&v57, v69);
                  BOOL v34 = v33;
                  if ((v69[23] & 0x80000000) != 0)
                  {
                    operator delete(*(void **)v69);
                    if (v34) {
                      goto LABEL_152;
                    }
                  }
                  else if (v33)
                  {
LABEL_152:
                    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v57.__r_.__value_.__l.__data_);
                    }
                    goto LABEL_154;
                  }
                  unint64_t v35 = (const void ***)(v31 + 176);
                  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v55, v35);
                  std::string::basic_string[abi:ne180100]<0>(v69, "itemformat");
                  std::string::basic_string[abi:ne180100]<0>(&v69[24], "[say-as interpret-as=phone]{}[/say-as]");
                  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)&v55, (const void **)v69, (uint64_t)v69);
                  if (SHIBYTE(v70) < 0) {
                    operator delete(*(void **)&v69[24]);
                  }
                  if ((v69[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v69);
                  }
                  if (v35 != (const void ***)&v55) {
                    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)v35, v55, &v56);
                  }
                  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v56);
                  char v52 = 1;
                  goto LABEL_152;
                }
              }
              else if (v32)
              {
                goto LABEL_139;
              }
            }
          }
LABEL_154:
          v28 += 2;
          if (v28 == (const void **)v29)
          {
            if (v52)
            {
              siri::dialogengine::ExpandVarsAndPhrasesRecursive(&v57, a2, v58, a4);
              if (v57.__r_.__value_.__r.__words[0])
              {
                memset(v69, 0, 24);
                std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(v69, *(void **)v57.__r_.__value_.__l.__data_, *(void **)(v57.__r_.__value_.__r.__words[0] + 8), (uint64_t)(*(void *)(v57.__r_.__value_.__r.__words[0] + 8) - *(void *)v57.__r_.__value_.__l.__data_) >> 4);
                unint64_t v37 = *(char **)&v69[8];
                unint64_t v36 = *(uint64_t **)v69;
              }
              else
              {
                unint64_t v37 = 0;
                unint64_t v36 = 0;
                memset(v69, 0, 24);
              }
              std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>>(&v78, v79, v36, v37, (v37 - (char *)v36) >> 4);
              std::string v51 = v58[0];
              uint64_t v50 = v58[1];
              unint64_t v55 = (long long *)v69;
              std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
              if (v57.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v57.__r_.__value_.__l.__size_);
              }
              v7 += ((v50 - v51) >> 4) + 1;
              *(void *)long long v69 = v58;
              std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
              if (SBYTE7(__str_16) < 0) {
                operator delete((void *)__str);
              }
LABEL_175:
              ++v7;
              uint64_t v4 = *(uint64_t **)a3;
              if (v7 >= (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4) {
LABEL_182:
              }
                operator new();
              goto LABEL_3;
            }
LABEL_158:
            *(void *)long long v69 = v58;
            std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
            if ((BYTE7(__str_16) & 0x80) != 0)
            {
LABEL_159:
              p_str = (long long *)__str;
LABEL_160:
              operator delete(p_str);
            }
LABEL_161:
            unsigned int v38 = *(uint64_t **)a3;
            unsigned int v39 = v79;
            if ((unint64_t)v79 >= v80)
            {
              uint64_t v42 = ((uint64_t)v79 - v78) >> 4;
              unint64_t v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 60) {
                std::vector<BOOL>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v44 = v80 - v78;
              if ((uint64_t)(v80 - v78) >> 3 > v43) {
                unint64_t v43 = v44 >> 3;
              }
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v43;
              }
              *(void *)&long long v70 = &v80;
              unsigned int v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v45);
              unsigned int v47 = &v46[16 * v42];
              *(void *)long long v69 = v46;
              *(void *)&v69[8] = v47;
              *(void *)&v69[24] = &v46[16 * v48];
              long long v49 = *(_OWORD *)&v38[2 * v7];
              *(_OWORD *)unsigned int v47 = v49;
              if (*((void *)&v49 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v49 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              *(void *)&v69[16] = v47 + 16;
              std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__swap_out_circular_buffer(&v78, v69);
              unsigned int v41 = v79;
              std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)v69);
            }
            else
            {
              long long v40 = *(_OWORD *)&v38[2 * v7];
              *(_OWORD *)unint64_t v79 = v40;
              if (*((void *)&v40 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v40 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              unsigned int v41 = v39 + 2;
            }
            unint64_t v79 = v41;
            goto LABEL_175;
          }
        }
      }
      BOOL v20 = **(_WORD **)v69 != 28783 || *(unsigned char *)(*(void *)v69 + 2) != 116;
      operator delete(*(void **)v69);
      if (v20) {
        goto LABEL_56;
      }
    }
    else
    {
      if (v69[23] != 3) {
        goto LABEL_56;
      }
      if (*(unsigned __int16 *)v69 != 28783 || v69[2] != 116) {
        goto LABEL_56;
      }
    }
    siri::dialogengine::ChunkList::ChunkList((uint64_t *)&__str, (uint64_t **)a3);
    siri::dialogengine::ChunkList::GetInnerChunks((siri::dialogengine::ChunkList *)&__str, v7, (uint64_t)v69);
    v58[0] = (siri::dialogengine::SpeakableString *)&__str;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
    siri::dialogengine::ExpandVarsAndPhrasesRecursive(v58, a2, v69, 1);
    if (v58[0])
    {
      long long __str = 0uLL;
      *(void *)&long long __str_16 = 0;
      std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(&__str, *(void **)v58[0], *((void **)v58[0] + 1), (uint64_t)(*((void *)v58[0] + 1) - *(void *)v58[0]) >> 4);
      std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>>(&v78, v79, (uint64_t *)__str, *((void **)&__str + 1), (uint64_t)(*((void *)&__str + 1) - __str) >> 4);
      v7 += ((uint64_t)(*(void *)&v69[8] - *(void *)v69) >> 4) + 1;
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
      int v21 = 4;
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      int v21 = 1;
    }
    if (v58[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v58[1]);
    }
    *(void *)&long long __str = v69;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    goto LABEL_117;
  }
  long long v11 = v10;
  long long v76 = 0u;
  memset(&v77, 0, sizeof(v77));
  *(_OWORD *)unint64_t v74 = 0u;
  *(_OWORD *)unint64_t v75 = 0u;
  *(_OWORD *)std::string::size_type v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  *(_OWORD *)int v71 = 0u;
  memset(v69, 0, sizeof(v69));
  BOOL v12 = siri::dialogengine::AllowEmptyPhrases(v10);
  if (v9 || !v12)
  {
    (*(void (**)(long long *__return_ptr, const void *, siri::dialogengine::Context *))(*(void *)v8 + 24))(&__str, v8, a2);
    std::string::operator=((std::string *)v69, (const std::string *)&__str);
    std::string::operator=((std::string *)&v69[24], (const std::string *)((char *)&__str_16 + 8));
    std::string::operator=((std::string *)v71, (const std::string *)v62);
    std::string::operator=((std::string *)&v72[1], (const std::string *)((char *)&v63 + 8));
    std::string::operator=((std::string *)v74, (const std::string *)v65);
    std::string::operator=((std::string *)&v75[1], (const std::string *)((char *)&v66 + 8));
    std::string::operator=(&v77, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67) < 0) {
      operator delete(*((void **)&v66 + 1));
    }
    if (SBYTE7(v66) < 0) {
      operator delete(v65[0]);
    }
    if (SHIBYTE(v64) < 0) {
      operator delete(*((void **)&v63 + 1));
    }
    if (SBYTE7(v63) < 0) {
      operator delete(v62[0]);
    }
    if (SHIBYTE(v61) < 0) {
      operator delete(*((void **)&__str_16 + 1));
    }
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
    uint64_t v16 = HIBYTE(v70);
    if (v70 < 0) {
      uint64_t v16 = v70;
    }
    if (v16) {
      goto LABEL_98;
    }
    uint64_t v17 = v69[23];
    if (v69[23] < 0) {
      uint64_t v17 = *(void *)&v69[8];
    }
    if (v17) {
LABEL_98:
    }
      operator new();
  }
  else if (v11)
  {
    siri::dialogengine::ChunkPhrase::ExpandPtr(v11, a2, v58);
    if (v58[0])
    {
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)&__str, v58[0]);
    }
    else
    {
      long long v67 = 0u;
      memset(&__p, 0, sizeof(__p));
      *(_OWORD *)long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      *(_OWORD *)long long v62 = 0u;
      long long __str = 0u;
      long long __str_16 = 0u;
    }
    std::string::operator=((std::string *)v69, (const std::string *)&__str);
    std::string::operator=((std::string *)&v69[24], (const std::string *)((char *)&__str_16 + 8));
    std::string::operator=((std::string *)v71, (const std::string *)v62);
    std::string::operator=((std::string *)&v72[1], (const std::string *)((char *)&v63 + 8));
    std::string::operator=((std::string *)v74, (const std::string *)v65);
    std::string::operator=((std::string *)&v75[1], (const std::string *)((char *)&v66 + 8));
    std::string::operator=(&v77, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67) < 0) {
      operator delete(*((void **)&v66 + 1));
    }
    if (SBYTE7(v66) < 0) {
      operator delete(v65[0]);
    }
    if (SHIBYTE(v64) < 0) {
      operator delete(*((void **)&v63 + 1));
    }
    if (SBYTE7(v63) < 0) {
      operator delete(v62[0]);
    }
    if (SHIBYTE(v61) < 0) {
      operator delete(*((void **)&__str_16 + 1));
    }
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
    char v26 = v58[0];
    if (v58[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v58[1]);
    }
    if (v26) {
      goto LABEL_98;
    }
  }
  if (a4) {
    operator new();
  }
  *a1 = 0;
  a1[1] = 0;
  int v21 = 1;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v76) < 0) {
    operator delete(v75[1]);
  }
  if (SHIBYTE(v75[0]) < 0) {
    operator delete(v74[0]);
  }
  if (SHIBYTE(v73) < 0) {
    operator delete(v72[1]);
  }
  if (SHIBYTE(v72[0]) < 0) {
    operator delete(v71[0]);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete(*(void **)&v69[24]);
  }
  if ((v69[23] & 0x80000000) != 0) {
    operator delete(*(void **)v69);
  }
LABEL_117:
  if (v21 == 4) {
    goto LABEL_175;
  }
  *(void *)long long v69 = &v78;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
}

void sub_1C61006B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  a60 = &a31;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a60);
  if (a40 < 0) {
    operator delete(__p);
  }
  a31 = v60 - 112;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ExpandTagsRecursive(uint64_t *a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint64_t v218 = *MEMORY[0x1E4F143B8];
  std::__split_buffer<std::string>::pointer v198 = 0;
  uint64_t v197 = 0;
  unint64_t v199 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(&v197, *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = *(uint64_t **)a3;
  if (*(void *)(a3 + 8) != *(void *)a3)
  {
    unint64_t v7 = 0;
    std::string v112 = (siri::dialogengine::RequestInfo *)(a2 + 1);
    uint64_t v8 = "";
    while (1)
    {
      unint64_t v9 = (char *)v8;
      if (v7)
      {
        unint64_t v10 = v7 - 1;
        long long v11 = v198;
        if ((unint64_t)v198 >= v199)
        {
          uint64_t v14 = ((uint64_t)v198 - v197) >> 4;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 60) {
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v199 - v197;
          if ((uint64_t)(v199 - v197) >> 3 > v15) {
            unint64_t v15 = v16 >> 3;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          v116[0] = (std::string::size_type)&v199;
          char v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v17);
          int v19 = &v18[16 * v14];
          __p[0] = v18;
          __p[1] = v19;
          v115[1] = &v18[16 * v20];
          long long v21 = *(_OWORD *)&v6[2 * v10];
          *(_OWORD *)int v19 = v21;
          if (*((void *)&v21 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          v115[0] = v19 + 16;
          std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__swap_out_circular_buffer(&v197, __p);
          int v13 = v198;
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)__p);
        }
        else
        {
          long long v12 = *(_OWORD *)&v6[2 * v10];
          *std::__split_buffer<std::string>::pointer v198 = v12;
          if (*((void *)&v12 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          int v13 = v11 + 1;
        }
        std::__split_buffer<std::string>::pointer v198 = v13;
      }
      char v22 = *(uint64_t **)a3;
      int v23 = (const void **)(*(void *)a3 + 16 * v7);
      char v24 = *v23;
      if (!*v23
      {
        std::string v28 = (void *)a1[1];
        unint64_t v29 = a1[2];
        if ((unint64_t)v28 >= v29)
        {
          uint64_t v32 = ((uint64_t)v28 - *a1) >> 4;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 60) {
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v34 = v29 - *a1;
          if (v34 >> 3 > v33) {
            unint64_t v33 = v34 >> 3;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v33;
          }
          v116[0] = (std::string::size_type)(a1 + 2);
          unint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v35);
          unint64_t v37 = &v36[16 * v32];
          __p[0] = v36;
          __p[1] = v37;
          v115[1] = &v36[16 * v38];
          long long v39 = *(_OWORD *)v23;
          *(_OWORD *)unint64_t v37 = *(_OWORD *)v23;
          if (*((void *)&v39 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          v115[0] = v37 + 16;
          std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__swap_out_circular_buffer(a1, __p);
          uint64_t v31 = (void *)a1[1];
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)__p);
        }
        else
        {
          *std::string v28 = v24;
          uint64_t v30 = v22[2 * v7 + 1];
          v28[1] = v30;
          if (v30) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v31 = v28 + 2;
          a1[1] = (uint64_t)(v28 + 2);
        }
        uint64_t v8 = v9;
        a1[1] = (uint64_t)v31;
        uint64_t v40 = 1;
        goto LABEL_499;
      }
      uint64_t v26 = (uint64_t)v25;
      siri::dialogengine::ChunkList::ChunkList((uint64_t *)__p, (uint64_t **)a3);
      siri::dialogengine::ChunkList::GetInnerChunks((siri::dialogengine::ChunkList *)__p, v7, (uint64_t)&v195);
      __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      siri::dialogengine::ExpandTagsRecursive(&v193, a2, &v195, &v197);
      if (*(char *)(v26 + 223) < 0) {
        std::string::__init_copy_ctor_external(&v192, *(const std::string::value_type **)(v26 + 200), *(void *)(v26 + 208));
      }
      else {
        std::string v192 = *(std::string *)(v26 + 200);
      }
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (HIBYTE(v192.__r_.__value_.__r.__words[2]) == 4)
      {
        int data = (int)v192.__r_.__value_.__l.__data_;
        goto LABEL_97;
      }
      if (HIBYTE(v192.__r_.__value_.__r.__words[2]) == 8)
      {
        unsigned int v47 = &v192;
        goto LABEL_82;
      }
      if (HIBYTE(v192.__r_.__value_.__r.__words[2]) == 9
        && v192.__r_.__value_.__r.__words[0] == 0x726F66736E617274
        && v192.__r_.__value_.__s.__data_[8] == 109)
      {
        goto LABEL_55;
      }
LABEL_98:
      if (!siri::dialogengine::IsSSMLTag((siri::dialogengine *)v26, v27))
      {
        if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v192.__r_.__value_.__l.__size_ != 3) {
            goto LABEL_447;
          }
          char v52 = (std::string *)v192.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) != 3) {
            goto LABEL_447;
          }
          char v52 = &v192;
        }
        int data_low = LOWORD(v52->__r_.__value_.__l.__data_);
        int v54 = v52->__r_.__value_.__s.__data_[2];
        if (data_low != 29812 || v54 != 115)
        {
LABEL_447:
          {
            operator new();
          }
          uint64_t v106 = (std::once_flag::_State_type *)siri::dialogengine::ExpandTagsRecursive(siri::dialogengine::Context *,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::flag;
          if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::ExpandTagsRecursive(siri::dialogengine::Context *,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::flag, memory_order_acquire) != -1)
          {
            __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            *(void *)&long long v168 = __str;
            std::__call_once(v106, &v168, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ExpandTagsRecursive(siri::dialogengine::Context *,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::$_0 &&>>);
          }
          uint64_t v107 = *(void *)(siri::dialogengine::ExpandTagsRecursive(siri::dialogengine::Context *,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::sValidChildTags
                           + 8);
          if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(void *)siri::dialogengine::ExpandTagsRecursive(siri::dialogengine::Context *,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::sValidChildTags, v107, (unsigned __int8 **)&v192) != v107)goto LABEL_492; {
          std::operator+<char>();
          }
          siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 1u);
          if ((SHIBYTE(v115[0]) & 0x80000000) == 0) {
            goto LABEL_492;
          }
          char v108 = __p[0];
          goto LABEL_491;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "play");
        siri::dialogengine::ChunkText::GetAttribute(v26, (uint64_t)__p, __str);
        if (SHIBYTE(v115[0]) < 0) {
          operator delete(__p[0]);
        }
        std::string::size_type size = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
        if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __str[0].__r_.__value_.__l.__size_;
        }
        if (size)
        {
          int v57 = 1;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v178, "sirifamily");
          siri::dialogengine::ChunkText::GetAttribute(v26, (uint64_t)v178, (std::string *)__p);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[0].__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
          __str[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v115[0];
          HIBYTE(v115[0]) = 0;
          LOBYTE(__p[0]) = 0;
          if ((v178[23] & 0x80000000) != 0) {
            operator delete(*(void **)v178);
          }
          std::string::size_type v65 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v65 = __str[0].__r_.__value_.__l.__size_;
          }
          int v57 = 2 * (v65 != 0);
        }
        memset(v178, 0, 24);
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, v112);
        int v66 = v124;
        siri::dialogengine::RequestInfo::~RequestInfo(__p);
        if (v57 == 1)
        {
          if (v66)
          {
            if (v66 == 2) {
              goto LABEL_389;
            }
            goto LABEL_465;
          }
          std::string::basic_string[abi:ne180100]<0>(&v168, "audio");
          std::string::basic_string[abi:ne180100]<0>(v201, "src");
          siri::dialogengine::FormatXMLElement((uint64_t)&v168, (uint64_t)v201, (uint64_t)__str);
          if ((v178[23] & 0x80000000) != 0) {
            operator delete(*(void **)v178);
          }
          *(_OWORD *)v178 = *(_OWORD *)__p;
          *(std::string::value_type **)&v178[16] = v115[0];
          HIBYTE(v115[0]) = 0;
          LOBYTE(__p[0]) = 0;
        }
        else
        {
          if (v57 != 2) {
            goto LABEL_465;
          }
          if (v66)
          {
            if (v66 == 2)
            {
LABEL_389:
              std::operator+<char>();
              uint64_t v94 = std::string::insert((std::string *)&v168, 0, "\x1B\\"");
              long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
              v115[0] = (std::string::value_type *)v94->__r_.__value_.__r.__words[2];
              *(_OWORD *)std::string __p = v95;
              v94->__r_.__value_.__l.__size_ = 0;
              v94->__r_.__value_.__r.__words[2] = 0;
              v94->__r_.__value_.__r.__words[0] = 0;
              int64_t v96 = std::string::append((std::string *)__p, "\\"");
              std::string::size_type v97 = v96->__r_.__value_.__r.__words[0];
              *(void *)uint64_t v201 = v96->__r_.__value_.__l.__size_;
              *(void *)&v201[7] = *(std::string::size_type *)((char *)&v96->__r_.__value_.__r.__words[1] + 7);
              char v98 = HIBYTE(v96->__r_.__value_.__r.__words[2]);
              v96->__r_.__value_.__l.__size_ = 0;
              v96->__r_.__value_.__r.__words[2] = 0;
              v96->__r_.__value_.__r.__words[0] = 0;
              if ((v178[23] & 0x80000000) != 0) {
                operator delete(*(void **)v178);
              }
              *(void *)v178 = v97;
              *(void *)&v178[8] = *(void *)v201;
              *(void *)&v178[15] = *(void *)&v201[7];
              v178[23] = v98;
              if (SHIBYTE(v115[0]) < 0)
              {
                uint64_t v99 = __p[0];
                goto LABEL_462;
              }
              goto LABEL_463;
            }
            goto LABEL_465;
          }
          std::string::basic_string[abi:ne180100]<0>(&v168, "mark");
          std::string::basic_string[abi:ne180100]<0>(v201, "name");
          std::operator+<char>();
          siri::dialogengine::FormatXMLElement((uint64_t)&v168, (uint64_t)v201, (uint64_t)v159);
          if ((v178[23] & 0x80000000) != 0) {
            operator delete(*(void **)v178);
          }
          *(_OWORD *)v178 = *(_OWORD *)__p;
          *(std::string::value_type **)&v178[16] = v115[0];
          HIBYTE(v115[0]) = 0;
          LOBYTE(__p[0]) = 0;
          if ((v159[23] & 0x80000000) != 0) {
            operator delete(*(void **)v159);
          }
        }
        if ((v201[23] & 0x80000000) != 0)
        {
          uint64_t v99 = *(void **)v201;
LABEL_462:
          operator delete(v99);
        }
LABEL_463:
        if (SBYTE7(v169) < 0) {
          operator delete((void *)v168);
        }
LABEL_465:
        uint64_t v109 = v178[23];
        char v110 = v178[23];
        if (v178[23] < 0) {
          uint64_t v109 = *(void *)&v178[8];
        }
        if (v109)
        {
          unint64_t v111 = v193;
          std::string::basic_string[abi:ne180100]<0>(&v168, v9);
          siri::dialogengine::SpeakableString::SpeakableString((uint64_t)__p, (const std::string *)&v168, (const std::string *)v178);
          std::allocate_shared[abi:ne180100]<siri::dialogengine::ChunkText,std::allocator<siri::dialogengine::ChunkText>,siri::dialogengine::SpeakableString,void>((siri::dialogengine::ChunkText **)v201, (const std::string *)__p);
          std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::emplace<std::shared_ptr<siri::dialogengine::ChunkText>>((uint64_t *)&v193, (uint64_t)v111, (uint64_t *)v201);
          if (*(void *)&v201[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v201[8]);
          }
          if (SHIBYTE(v123[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v123[0].__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v122) < 0) {
            operator delete(v121[1]);
          }
          if (SHIBYTE(v121[0]) < 0) {
            operator delete(v120[0]);
          }
          if (SHIBYTE(v119) < 0) {
            operator delete(v118[1]);
          }
          if (SHIBYTE(v118[0]) < 0) {
            operator delete(v117[0]);
          }
          if (SHIBYTE(v116[1]) < 0) {
            operator delete(v115[1]);
          }
          if (SHIBYTE(v115[0]) < 0) {
            operator delete(__p[0]);
          }
          if (SBYTE7(v169) < 0) {
            operator delete((void *)v168);
          }
          char v110 = v178[23];
        }
        if (v110 < 0) {
          operator delete(*(void **)v178);
        }
        if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_492;
        }
        char v108 = (void *)__str[0].__r_.__value_.__r.__words[0];
LABEL_491:
        operator delete(v108);
        goto LABEL_492;
      }
      siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, v112);
      int v49 = v124;
      siri::dialogengine::RequestInfo::~RequestInfo(__p);
      if (v49 != 2)
      {
        if (v49 == 1) {
          goto LABEL_492;
        }
        if (!v49)
        {
          if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v50 = v9;
            if (v192.__r_.__value_.__l.__size_ != 4) {
              goto LABEL_157;
            }
            std::string v51 = (std::string *)v192.__r_.__value_.__r.__words[0];
          }
          else
          {
            uint64_t v50 = v9;
            if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) != 4) {
              goto LABEL_157;
            }
            std::string v51 = &v192;
          }
          if (LODWORD(v51->__r_.__value_.__l.__data_) != 1802658157)
          {
LABEL_157:
            std::string::basic_string[abi:ne180100]<0>(v178, v50);
            siri::dialogengine::SpeakableString::SpeakableString(__str, (const siri::dialogengine::SpeakableString *)(*(void *)(*(void *)a3 + 16 * v7) + 8));
            if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v168, __str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_);
            }
            else
            {
              long long v168 = *(_OWORD *)&__str[1].__r_.__value_.__l.__data_;
              *(void *)&long long v169 = *((void *)&__str[1].__r_.__value_.__l + 2);
            }
            siri::dialogengine::SpeakableString::SpeakableString((uint64_t)__p, (const std::string *)v178, (const std::string *)&v168);
            if (SBYTE7(v169) < 0) {
              operator delete((void *)v168);
            }
            if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v217.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v216) < 0) {
              operator delete(*((void **)&v215 + 1));
            }
            if (SBYTE7(v215) < 0) {
              operator delete(v214[0]);
            }
            if (SHIBYTE(v213) < 0) {
              operator delete(*((void **)&v212 + 1));
            }
            if (SBYTE7(v212) < 0) {
              operator delete(v211[0]);
            }
            if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str[1].__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str[0].__r_.__value_.__l.__data_);
            }
            if ((v178[23] & 0x80000000) != 0) {
              operator delete(*(void **)v178);
            }
            operator new();
          }
          siri::dialogengine::FormatMarkElementSSML(a2, (siri::dialogengine::Context *)v26, __str);
          char v100 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v101 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v101 = __str[0].__r_.__value_.__l.__size_;
          }
          if (v101)
          {
            uint64_t v102 = v193;
            long long v103 = v194;
            char v104 = v193;
            if (v194 != (char *)v193)
            {
              do
              {
                long long v105 = (std::__shared_weak_count *)*((void *)v103 - 1);
                if (v105) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v105);
                }
                v103 -= 16;
              }
              while (v103 != (char *)v102);
              char v104 = v193;
            }
            v194 = (char *)v102;
            std::string::basic_string[abi:ne180100]<0>(v178, v9);
            siri::dialogengine::SpeakableString::SpeakableString((uint64_t)__p, (const std::string *)v178, __str);
            std::allocate_shared[abi:ne180100]<siri::dialogengine::ChunkText,std::allocator<siri::dialogengine::ChunkText>,siri::dialogengine::SpeakableString,void>((siri::dialogengine::ChunkText **)&v168, (const std::string *)__p);
            std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::emplace<std::shared_ptr<siri::dialogengine::ChunkText>>((uint64_t *)&v193, (uint64_t)v104, (uint64_t *)&v168);
            if (*((void *)&v168 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v168 + 1));
            }
            if (SHIBYTE(v123[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v123[0].__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v122) < 0) {
              operator delete(v121[1]);
            }
            if (SHIBYTE(v121[0]) < 0) {
              operator delete(v120[0]);
            }
            if (SHIBYTE(v119) < 0) {
              operator delete(v118[1]);
            }
            if (SHIBYTE(v118[0]) < 0) {
              operator delete(v117[0]);
            }
            if (SHIBYTE(v116[1]) < 0) {
              operator delete(v115[1]);
            }
            if (SHIBYTE(v115[0]) < 0) {
              operator delete(__p[0]);
            }
            if ((v178[23] & 0x80000000) != 0) {
              operator delete(*(void **)v178);
            }
            char v100 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          }
          if (v100 < 0) {
            operator delete(__str[0].__r_.__value_.__l.__data_);
          }
          if (v101) {
            goto LABEL_492;
          }
        }
        goto LABEL_447;
      }
      if (!siri::dialogengine::ConvertSSMLToTTSCode((siri::dialogengine::Context *)a2, v26, (uint64_t *)&v193)) {
        goto LABEL_447;
      }
LABEL_492:
      std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>>(a1, (void *)a1[1], v193, v194, (v194 - (char *)v193) >> 4);
      if (*(unsigned char *)(v26 + 224) && *(unsigned char *)(v26 + 225)) {
        uint64_t v40 = (((char *)v196 - (char *)v195) >> 4) + 1;
      }
      else {
        uint64_t v40 = (((char *)v196 - (char *)v195) >> 4) + 2;
      }
      uint64_t v8 = v9;
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v192.__r_.__value_.__l.__data_);
      }
      __p[0] = &v193;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v195;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_499:
      v7 += v40;
      uint64_t v6 = *(uint64_t **)a3;
      if (v7 >= (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4) {
        goto LABEL_503;
      }
    }
    if (v192.__r_.__value_.__l.__size_ == 4)
    {
      int data = *(_DWORD *)v192.__r_.__value_.__l.__data_;
LABEL_97:
      if (data == 1851879539)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "inflect");
        siri::dialogengine::ChunkText::GetAttribute(v26, (uint64_t)__p, (std::string *)v178);
        if (SHIBYTE(v115[0]) < 0) {
          operator delete(__p[0]);
        }
        siri::dialogengine::SemanticFeatureConstraint::FromString((uint64_t)a2, v178, &v168);
        long long v58 = v168;
        if ((void)v168 != *((void *)&v168 + 1))
        {
          std::string::basic_string[abi:ne180100]<0>(__str, "transform");
          siri::dialogengine::ChunkText::GetAttribute(v26, (uint64_t)__str, (std::string *)__p);
          if (SHIBYTE(v115[0]) < 0)
          {
            int v60 = __p[1] == (void *)7
               && *(_DWORD *)__p[0] == 1852797552
               && *(_DWORD *)((char *)__p[0] + 3) == 1853189998;
            operator delete(__p[0]);
          }
          else
          {
            int v60 = SHIBYTE(v115[0]) == 7 && LODWORD(__p[0]) == 1852797552 && *(_DWORD *)((char *)__p + 3) == 1853189998;
          }
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[0].__r_.__value_.__l.__data_);
          }
          siri::dialogengine::ChunkList::ChunkList((uint64_t *)v201, &v193);
          siri::dialogengine::ChunkList::Expand((uint64_t *)__str, (siri::dialogengine::ChunkList *)v201, (siri::dialogengine::Context *)a2);
          siri::dialogengine::ExpandToText((uint64_t)__p, (uint64_t *)__str[0].__r_.__value_.__l.__data_, (uint64_t *)__str[0].__r_.__value_.__l.__size_);
          *(void *)v159 = __str;
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v159);
          *(void *)v159 = v201;
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v159);
          siri::dialogengine::InflectDialog((siri::dialogengine *)a2, (siri::dialogengine::Context *)&v168, (uint64_t)__p, v60, __str);
          std::string::operator=((std::string *)__p, __str);
          std::string::operator=((std::string *)&v115[1], &__str[1]);
          std::string::operator=((std::string *)v117, (const std::string *)v211);
          std::string::operator=((std::string *)&v118[1], (const std::string *)((char *)&v212 + 8));
          std::string::operator=((std::string *)v120, (const std::string *)v214);
          std::string::operator=((std::string *)&v121[1], (const std::string *)((char *)&v215 + 8));
          std::string::operator=(v123, &v217);
          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v217.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v216) < 0) {
            operator delete(*((void **)&v215 + 1));
          }
          if (SBYTE7(v215) < 0) {
            operator delete(v214[0]);
          }
          if (SHIBYTE(v213) < 0) {
            operator delete(*((void **)&v212 + 1));
          }
          if (SBYTE7(v212) < 0) {
            operator delete(v211[0]);
          }
          if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[1].__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[0].__r_.__value_.__l.__data_);
          }
          operator new();
        }
        __p[0] = &v168;
        std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if ((v178[23] & 0x80000000) != 0) {
          operator delete(*(void **)v178);
        }
        if ((void)v58 != *((void *)&v58 + 1)) {
          goto LABEL_492;
        }
        goto LABEL_447;
      }
      goto LABEL_98;
    }
    if (v192.__r_.__value_.__l.__size_ != 8)
    {
      if (v192.__r_.__value_.__l.__size_ == 9
        && *(void *)v192.__r_.__value_.__l.__data_ == 0x726F66736E617274
        && *(unsigned char *)(v192.__r_.__value_.__r.__words[0] + 8) == 109)
      {
LABEL_55:
        std::string::basic_string[abi:ne180100]<0>(__p, "mode");
        siri::dialogengine::ChunkText::GetAttribute(v26, (uint64_t)__p, (std::string *)v178);
        if (SHIBYTE(v115[0]) < 0) {
          operator delete(__p[0]);
        }
        long long v122 = 0u;
        memset(v123, 0, 24);
        *(_OWORD *)std::string v120 = 0u;
        *(_OWORD *)int v121 = 0u;
        *(_OWORD *)std::string v118 = 0u;
        long long v119 = 0u;
        *(_OWORD *)uint64_t v116 = 0u;
        *(_OWORD *)uint64_t v117 = 0u;
        *(_OWORD *)std::string __p = 0u;
        *(_OWORD *)std::string v115 = 0u;
        unint64_t v43 = v193;
        uint64_t v44 = v194;
        while (2)
        {
          if (v43 == (uint64_t *)v44)
          {
            siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)__p, (siri::dialogengine *)a2, (uint64_t)v178, __str);
            std::string::operator=((std::string *)__p, __str);
            std::string::operator=((std::string *)&v115[1], &__str[1]);
            std::string::operator=((std::string *)v117, (const std::string *)v211);
            std::string::operator=((std::string *)&v118[1], (const std::string *)((char *)&v212 + 8));
            std::string::operator=((std::string *)v120, (const std::string *)v214);
            std::string::operator=((std::string *)&v121[1], (const std::string *)((char *)&v215 + 8));
            std::string::operator=(v123, &v217);
            if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v217.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v216) < 0) {
              operator delete(*((void **)&v215 + 1));
            }
            if (SBYTE7(v215) < 0) {
              operator delete(v214[0]);
            }
            if (SHIBYTE(v213) < 0) {
              operator delete(*((void **)&v212 + 1));
            }
            if (SBYTE7(v212) < 0) {
              operator delete(v211[0]);
            }
            if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str[1].__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str[0].__r_.__value_.__l.__data_);
            }
            long long v61 = v193;
            for (uint64_t i = v194; i != (char *)v61; i -= 16)
            {
              long long v63 = (std::__shared_weak_count *)*((void *)i - 1);
              if (v63) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v63);
              }
            }
            v194 = (char *)v61;
            operator new();
          }
          uint64_t v45 = *v43;
          unsigned int v46 = (std::__shared_weak_count *)v43[1];
          if (v46) {
            atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::SpeakableString::SpeakableString(__str, (const siri::dialogengine::SpeakableString *)(v45 + 8));
          siri::dialogengine::SpeakableString::Append((siri::dialogengine::SpeakableString *)__p, (const siri::dialogengine::SpeakableString *)__str);
          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v217.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v216) < 0) {
            operator delete(*((void **)&v215 + 1));
          }
          if (SBYTE7(v215) < 0) {
            operator delete(v214[0]);
          }
          if (SHIBYTE(v213) < 0) {
            operator delete(*((void **)&v212 + 1));
          }
          if (SBYTE7(v212) < 0) {
            operator delete(v211[0]);
          }
          if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str[1].__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__str[0].__r_.__value_.__l.__data_);
            if (v46) {
LABEL_75:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v46);
          }
          else if (v46)
          {
            goto LABEL_75;
          }
          v43 += 2;
          continue;
        }
      }
      goto LABEL_98;
    }
    unsigned int v47 = (std::string *)v192.__r_.__value_.__r.__words[0];
LABEL_82:
    if (v47->__r_.__value_.__r.__words[0] != 0x797469746E617571) {
      goto LABEL_98;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "value");
    siri::dialogengine::ChunkText::GetAttribute(v26, (uint64_t)__p, &v191);
    if (SHIBYTE(v115[0]) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__str, "value");
    siri::dialogengine::ChunkText::GetAttribute(v26, (uint64_t)__str, (std::string *)__p);
    std::string::basic_string[abi:ne180100]<0>(v178, v9);
    std::string::basic_string[abi:ne180100]<0>(&v168, v9);
    siri::dialogengine::ResolveValue(a2, (const void **)__p, 1, (uint64_t)v178, (uint64_t)&v168, &v190);
    if (SBYTE7(v169) < 0) {
      operator delete((void *)v168);
    }
    if ((v178[23] & 0x80000000) != 0) {
      operator delete(*(void **)v178);
    }
    if (SHIBYTE(v115[0]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (v190)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v190 + 48))(__p);
      if (SHIBYTE(v115[0]) < 0)
      {
        std::string::__init_copy_ctor_external(__str, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        __str[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v115[0];
      }
      if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v191.__r_.__value_.__l.__data_);
      }
      std::string v191 = __str[0];
      *((unsigned char *)&__str[0].__r_.__value_.__s + 23) = 0;
      __str[0].__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v123[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v122) < 0) {
        operator delete(v121[1]);
      }
      if (SHIBYTE(v121[0]) < 0) {
        operator delete(v120[0]);
      }
      if (SHIBYTE(v119) < 0) {
        operator delete(v118[1]);
      }
      if (SHIBYTE(v118[0]) < 0) {
        operator delete(v117[0]);
      }
      if (SHIBYTE(v116[1]) < 0) {
        operator delete(v115[1]);
      }
      if (SHIBYTE(v115[0]) < 0) {
        operator delete(__p[0]);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__str, "includeValue");
    siri::dialogengine::ChunkText::GetAttribute(v26, (uint64_t)__str, (std::string *)__p);
    siri::dialogengine::StringToLower((uint64_t)__p, (uint64_t)v188);
    if (SHIBYTE(v115[0]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "format");
    siri::dialogengine::ChunkText::GetAttribute(v26, (uint64_t)__p, &v187);
    if (SHIBYTE(v115[0]) < 0) {
      operator delete(__p[0]);
    }
    long long v122 = 0u;
    memset(v123, 0, 24);
    *(_OWORD *)std::string v120 = 0u;
    *(_OWORD *)int v121 = 0u;
    *(_OWORD *)std::string v118 = 0u;
    long long v119 = 0u;
    *(_OWORD *)uint64_t v116 = 0u;
    *(_OWORD *)uint64_t v117 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)std::string v115 = 0u;
    memset(&v217, 0, sizeof(v217));
    long long v216 = 0u;
    long long v215 = 0u;
    *(_OWORD *)std::string::size_type v214 = 0u;
    long long v213 = 0u;
    long long v212 = 0u;
    *(_OWORD *)uint64_t v211 = 0u;
    memset(__str, 0, sizeof(__str));
    memset(&v186, 0, sizeof(v186));
    long long v185 = 0u;
    *(_OWORD *)v184 = 0u;
    *(_OWORD *)std::string::size_type v183 = 0u;
    long long v182 = 0u;
    *(_OWORD *)long long v181 = 0u;
    *(_OWORD *)v180 = 0u;
    *(_OWORD *)long long v179 = 0u;
    memset(v178, 0, sizeof(v178));
    memset(&v177, 0, sizeof(v177));
    long long v176 = 0u;
    *(_OWORD *)uint64_t v175 = 0u;
    *(_OWORD *)v174 = 0u;
    long long v173 = 0u;
    *(_OWORD *)long long v172 = 0u;
    *(_OWORD *)std::__split_buffer<std::string>::pointer v171 = 0u;
    *(_OWORD *)v170 = 0u;
    long long v169 = 0u;
    long long v168 = 0u;
    memset(&v209, 0, sizeof(v209));
    long long v208 = 0u;
    *(_OWORD *)v207 = 0u;
    *(_OWORD *)std::string::size_type v206 = 0u;
    long long v205 = 0u;
    *(_OWORD *)v204 = 0u;
    *(_OWORD *)v203 = 0u;
    *(_OWORD *)uint64_t v202 = 0u;
    memset(v201, 0, sizeof(v201));
    memset(&v167, 0, sizeof(v167));
    long long v166 = 0u;
    *(_OWORD *)v165 = 0u;
    *(_OWORD *)std::string::size_type v164 = 0u;
    long long v163 = 0u;
    *(_OWORD *)long long v162 = 0u;
    *(_OWORD *)v161 = 0u;
    *(_OWORD *)std::string::size_type v160 = 0u;
    memset(v159, 0, sizeof(v159));
    memset(&v158, 0, sizeof(v158));
    long long v157 = 0u;
    *(_OWORD *)long long v156 = 0u;
    *(_OWORD *)v155 = 0u;
    long long v154 = 0u;
    *(_OWORD *)v153 = 0u;
    *(_OWORD *)v152 = 0u;
    *(_OWORD *)uint64_t v151 = 0u;
    memset(v150, 0, sizeof(v150));
    memset(&v149, 0, sizeof(v149));
    memset(&v148, 0, sizeof(v148));
    long long v147 = 0u;
    *(_OWORD *)std::string::size_type v146 = 0u;
    *(_OWORD *)std::string::size_type v145 = 0u;
    long long v144 = 0u;
    *(_OWORD *)uint64_t v143 = 0u;
    *(_OWORD *)long long v142 = 0u;
    memset(v141, 0, sizeof(v141));
    long long v67 = v196;
    long long v68 = v195;
    if (v196 != v195)
    {
      uint64_t v69 = 0;
      unint64_t v70 = 0;
      while (1)
      {
        int v71 = (const void *)v68[v69];
        if (v71)
        {
          if (v72)
          {
            uint64_t v73 = (uint64_t)v72;
            if (v72[224]) {
              break;
            }
          }
        }
LABEL_346:
        ++v70;
        v69 += 2;
        if (v70 >= ((char *)v67 - (char *)v68) >> 4) {
          goto LABEL_347;
        }
      }
      if (v72[223] < 0) {
        std::string::__init_copy_ctor_external(&v200, *((const std::string::value_type **)v72 + 25), *((void *)v72 + 26));
      }
      else {
        std::string v200 = *(std::string *)(v72 + 200);
      }
      siri::dialogengine::ChunkList::ChunkList((uint64_t *)&v132, &v195);
      siri::dialogengine::ChunkList::GetInnerChunks((siri::dialogengine::ChunkList *)&v132, v70, (uint64_t)&v140);
      v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
      siri::dialogengine::ExpandTagsRecursive(&v139, a2, &v140, &v197);
      if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
      {
        if ((uint64_t)v200.__r_.__value_.__l.__size_ <= 4)
        {
          if (v200.__r_.__value_.__l.__size_ != 3)
          {
            if (v200.__r_.__value_.__l.__size_ != 4) {
              goto LABEL_343;
            }
            if (*(_DWORD *)v200.__r_.__value_.__l.__data_ == 1869768058) {
              goto LABEL_325;
            }
            if (*(_DWORD *)v200.__r_.__value_.__l.__data_ != 2037277037)
            {
              unint64_t v74 = (std::string *)v200.__r_.__value_.__r.__words[0];
LABEL_243:
              if (LODWORD(v74->__r_.__value_.__l.__data_) == 1851879539)
              {
                siri::dialogengine::ExpandToText((uint64_t)&v132, (uint64_t *)v139.__r_.__value_.__l.__data_, (uint64_t *)v139.__r_.__value_.__l.__size_);
                std::string::operator=(v141, &v132);
                std::string::operator=(&v141[1], &v133);
                std::string::operator=((std::string *)v142, &v134);
                std::string::operator=((std::string *)&v143[1], &v135);
                std::string::operator=((std::string *)v145, &v136);
                std::string::operator=((std::string *)&v146[1], &v137);
                std::string::operator=(&v148, &v138);
LABEL_328:
                if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v138.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v137.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v136.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v135.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v134.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v133.__r_.__value_.__l.__data_);
                }
                if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_343;
                }
                unint64_t v79 = (void *)v132.__r_.__value_.__r.__words[0];
                goto LABEL_342;
              }
LABEL_343:
              v132.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
              std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
              v132.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140;
              std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
              if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v200.__r_.__value_.__l.__data_);
              }
              long long v67 = v196;
              long long v68 = v195;
              goto LABEL_346;
            }
            goto LABEL_326;
          }
          if (*(_WORD *)v200.__r_.__value_.__l.__data_ != 28271
            || *(unsigned char *)(v200.__r_.__value_.__r.__words[0] + 2) != 101)
          {
            if (*(_WORD *)v200.__r_.__value_.__l.__data_ != 30580
              || *(unsigned char *)(v200.__r_.__value_.__r.__words[0] + 2) != 111)
            {
              if (*(_WORD *)v200.__r_.__value_.__l.__data_ != 25958
                || *(unsigned char *)(v200.__r_.__value_.__r.__words[0] + 2) != 119)
              {
                goto LABEL_343;
              }
LABEL_317:
              siri::dialogengine::ExpandToText((uint64_t)&v132, (uint64_t *)v139.__r_.__value_.__l.__data_, (uint64_t *)v139.__r_.__value_.__l.__size_);
              std::string::operator=((std::string *)&v168, &v132);
              std::string::operator=((std::string *)((char *)&v169 + 8), &v133);
              std::string::operator=((std::string *)v171, &v134);
              std::string::operator=((std::string *)&v172[1], &v135);
              std::string::operator=((std::string *)v174, &v136);
              std::string::operator=((std::string *)&v175[1], &v137);
              std::string::operator=(&v177, &v138);
              goto LABEL_328;
            }
LABEL_327:
            siri::dialogengine::ExpandToText((uint64_t)&v132, (uint64_t *)v139.__r_.__value_.__l.__data_, (uint64_t *)v139.__r_.__value_.__l.__size_);
            std::string::operator=((std::string *)v178, &v132);
            std::string::operator=((std::string *)&v178[24], &v133);
            std::string::operator=((std::string *)v180, &v134);
            std::string::operator=((std::string *)&v181[1], &v135);
            std::string::operator=((std::string *)v183, &v136);
            std::string::operator=((std::string *)&v184[1], &v137);
            std::string::operator=(&v186, &v138);
            goto LABEL_328;
          }
LABEL_324:
          siri::dialogengine::ExpandToText((uint64_t)&v132, (uint64_t *)v139.__r_.__value_.__l.__data_, (uint64_t *)v139.__r_.__value_.__l.__size_);
          std::string::operator=(__str, &v132);
          std::string::operator=(&__str[1], &v133);
          std::string::operator=((std::string *)v211, &v134);
          std::string::operator=((std::string *)((char *)&v212 + 8), &v135);
          std::string::operator=((std::string *)v214, &v136);
          std::string::operator=((std::string *)((char *)&v215 + 8), &v137);
          std::string::operator=(&v217, &v138);
          goto LABEL_328;
        }
        if (v200.__r_.__value_.__l.__size_ != 5)
        {
          if (v200.__r_.__value_.__l.__size_ != 17) {
            goto LABEL_343;
          }
          BOOL v77 = *(void *)v200.__r_.__value_.__l.__data_ == 0x6E6168747373656CLL
             && *(void *)(v200.__r_.__value_.__r.__words[0] + 8) == 0x746C61757165726FLL;
          if (!v77 || *(unsigned char *)(v200.__r_.__value_.__r.__words[0] + 16) != 111) {
            goto LABEL_343;
          }
LABEL_266:
          siri::dialogengine::ExpandToText((uint64_t)&v132, (uint64_t *)v139.__r_.__value_.__l.__data_, (uint64_t *)v139.__r_.__value_.__l.__size_);
          std::string::operator=((std::string *)v150, &v132);
          std::string::operator=((std::string *)&v150[24], &v133);
          std::string::operator=((std::string *)v152, &v134);
          std::string::operator=((std::string *)&v153[1], &v135);
          std::string::operator=((std::string *)v155, &v136);
          std::string::operator=((std::string *)&v156[1], &v137);
          std::string::operator=(&v158, &v138);
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v138.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v137.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v135.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v134.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v133.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v132.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(v130, "value");
          siri::dialogengine::ChunkText::GetAttribute(v73, (uint64_t)v130, &v132);
          if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v149.__r_.__value_.__l.__data_);
          }
          std::string v149 = v132;
          *((unsigned char *)&v132.__r_.__value_.__s + 23) = 0;
          v132.__r_.__value_.__s.__data_[0] = 0;
          if ((v131 & 0x80000000) == 0) {
            goto LABEL_343;
          }
          unint64_t v79 = v130[0];
LABEL_342:
          operator delete(v79);
          goto LABEL_343;
        }
        if (*(_DWORD *)v200.__r_.__value_.__l.__data_ != 1701344367
          || *(unsigned char *)(v200.__r_.__value_.__r.__words[0] + 4) != 114)
        {
          goto LABEL_343;
        }
      }
      else
      {
        if (HIBYTE(v200.__r_.__value_.__r.__words[2]) <= 4u)
        {
          if (HIBYTE(v200.__r_.__value_.__r.__words[2]) != 3)
          {
            if (HIBYTE(v200.__r_.__value_.__r.__words[2]) != 4) {
              goto LABEL_343;
            }
            if (LODWORD(v200.__r_.__value_.__l.__data_) != 2037277037)
            {
              if (LODWORD(v200.__r_.__value_.__l.__data_) != 1869768058)
              {
                unint64_t v74 = &v200;
                goto LABEL_243;
              }
LABEL_325:
              siri::dialogengine::ExpandToText((uint64_t)&v132, (uint64_t *)v139.__r_.__value_.__l.__data_, (uint64_t *)v139.__r_.__value_.__l.__size_);
              std::string::operator=((std::string *)__p, &v132);
              std::string::operator=((std::string *)&v115[1], &v133);
              std::string::operator=((std::string *)v117, &v134);
              std::string::operator=((std::string *)&v118[1], &v135);
              std::string::operator=((std::string *)v120, &v136);
              std::string::operator=((std::string *)&v121[1], &v137);
              std::string::operator=(v123, &v138);
              goto LABEL_328;
            }
LABEL_326:
            siri::dialogengine::ExpandToText((uint64_t)&v132, (uint64_t *)v139.__r_.__value_.__l.__data_, (uint64_t *)v139.__r_.__value_.__l.__size_);
            std::string::operator=((std::string *)v201, &v132);
            std::string::operator=((std::string *)&v201[24], &v133);
            std::string::operator=((std::string *)v203, &v134);
            std::string::operator=((std::string *)&v204[1], &v135);
            std::string::operator=((std::string *)v206, &v136);
            std::string::operator=((std::string *)&v207[1], &v137);
            std::string::operator=(&v209, &v138);
            goto LABEL_328;
          }
          if (LOWORD(v200.__r_.__value_.__l.__data_) != 28271 || v200.__r_.__value_.__s.__data_[2] != 101)
          {
            if (LOWORD(v200.__r_.__value_.__l.__data_) != 30580 || v200.__r_.__value_.__s.__data_[2] != 111)
            {
              if (LOWORD(v200.__r_.__value_.__l.__data_) != 25958 || v200.__r_.__value_.__s.__data_[2] != 119) {
                goto LABEL_343;
              }
              goto LABEL_317;
            }
            goto LABEL_327;
          }
          goto LABEL_324;
        }
        if (HIBYTE(v200.__r_.__value_.__r.__words[2]) != 5)
        {
          if (HIBYTE(v200.__r_.__value_.__r.__words[2]) != 17) {
            goto LABEL_343;
          }
          BOOL v75 = v200.__r_.__value_.__r.__words[0] == 0x6E6168747373656CLL
             && v200.__r_.__value_.__l.__size_ == 0x746C61757165726FLL;
          if (!v75 || v200.__r_.__value_.__s.__data_[16] != 111) {
            goto LABEL_343;
          }
          goto LABEL_266;
        }
        if (LODWORD(v200.__r_.__value_.__l.__data_) != 1701344367 || v200.__r_.__value_.__s.__data_[4] != 114) {
          goto LABEL_343;
        }
      }
      siri::dialogengine::ExpandToText((uint64_t)&v132, (uint64_t *)v139.__r_.__value_.__l.__data_, (uint64_t *)v139.__r_.__value_.__l.__size_);
      std::string::operator=((std::string *)v159, &v132);
      std::string::operator=((std::string *)&v159[24], &v133);
      std::string::operator=((std::string *)v161, &v134);
      std::string::operator=((std::string *)&v162[1], &v135);
      std::string::operator=((std::string *)v164, &v136);
      std::string::operator=((std::string *)&v165[1], &v137);
      std::string::operator=(&v167, &v138);
      goto LABEL_328;
    }
LABEL_347:
    memset(&v140, 0, sizeof(v140));
    std::string::basic_string[abi:ne180100]<0>(&v132, "inflect");
    siri::dialogengine::ChunkText::GetAttribute(v26, (uint64_t)&v132, &v139);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v132.__r_.__value_.__l.__data_);
    }
    std::string::size_type v88 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v88 = v139.__r_.__value_.__l.__size_;
    }
    if (v88)
    {
      siri::dialogengine::SemanticFeatureConstraint::FromString((uint64_t)a2, (unsigned __int8 *)&v139, &v132);
      std::vector<siri::dialogengine::SemanticFeatureConstraint>::__vdeallocate((void **)&v140.__r_.__value_.__l.__data_);
      std::string v140 = v132;
      memset(&v132, 0, sizeof(v132));
      v200.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132;
      std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
    }
    siri::dialogengine::StringToDouble(&v191, 0);
    if (SHIBYTE(v115[0]) < 0)
    {
      std::string::__init_copy_ctor_external(&v132, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v132.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v132.__r_.__value_.__r.__words[2] = (std::string::size_type)v115[0];
    }
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v200, __str[0].__r_.__value_.__l.__data_, __str[0].__r_.__value_.__l.__size_);
    }
    else {
      std::string v200 = __str[0];
    }
    if ((v178[23] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)v178, *(std::string::size_type *)&v178[8]);
    }
    else {
      std::string v129 = *(std::string *)v178;
    }
    if (SBYTE7(v169) < 0)
    {
      std::string::__init_copy_ctor_external(&v128, (const std::string::value_type *)v168, *((std::string::size_type *)&v168 + 1));
    }
    else
    {
      *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v168;
      v128.__r_.__value_.__r.__words[2] = v169;
    }
    if ((v201[23] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)v201, *(std::string::size_type *)&v201[8]);
    }
    else {
      std::string v127 = *(std::string *)v201;
    }
    if ((v159[23] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)v159, *(std::string::size_type *)&v159[8]);
    }
    else {
      std::string v126 = *(std::string *)v159;
    }
    if ((v150[23] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)v150, *(std::string::size_type *)&v150[8]);
    }
    else {
      std::string v125 = *(std::string *)v150;
    }
    siri::dialogengine::StringToDouble(&v149, 0);
    if (v189 < 0)
    {
      if (v188[1] == (void *)5)
      {
        unint64_t v89 = (void **)v188[0];
        goto LABEL_379;
      }
    }
    else if (v189 == 5)
    {
      unint64_t v89 = v188;
LABEL_379:
      int v90 = *(_DWORD *)v89;
      int v91 = *((unsigned __int8 *)v89 + 4);
      char v93 = v90 != 1936482662 || v91 != 101;
LABEL_386:
      siri::dialogengine::FormatQuantity((siri::dialogengine *)a2, (siri::dialogengine::Context *)&v132, (uint64_t)&v200, (int)&v129, (int)&v128, (int)&v127, (int)&v126, (int)&v125, v93, (siri::dialogengine::SpeakableString *)v141, (uint64_t)&v187, 1, (uint64_t)&v140);
    }
    char v93 = 1;
    goto LABEL_386;
  }
LABEL_503:
  __p[0] = &v197;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1C610371C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x9B7]) < 0) {
    operator delete((void *)STACK[0x9A0]);
  }
  STACK[0x210] = (unint64_t)&STACK[0x9B8];
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  STACK[0x210] = (unint64_t)&STACK[0x9D0];
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  STACK[0x890] = v1;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x890]);
  STACK[0x890] = (unint64_t)&STACK[0x9E8];
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x890]);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::emplace<std::shared_ptr<siri::dialogengine::ChunkText>>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = a2 - *a1;
  uint64_t v9 = v8 >> 4;
  long long v11 = a1 + 2;
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v16 = ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v16 >> 60) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v10 - v7;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    unint64_t v36 = v11;
    if (v18) {
      unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = (_OWORD *)(v18 + 16 * v9);
    unint64_t v33 = (char *)v18;
    *(void *)&long long v34 = v20;
    *((void *)&v34 + 1) = v20;
    unint64_t v35 = (char *)(v18 + 16 * v19);
    if (v9 == v19)
    {
      if (v8 < 1)
      {
        if (v7 == a2) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v8 >> 3;
        }
        uint64_t v40 = v11;
        int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v22);
        uint64_t v25 = v34;
        uint64_t v26 = *((void *)&v34 + 1) - v34;
        if (*((void *)&v34 + 1) == (void)v34)
        {
          int64x2_t v31 = vdupq_n_s64(v34);
          unint64_t v28 = (unint64_t)&v23[16 * (v22 >> 2)];
        }
        else
        {
          uint64_t v27 = v26 >> 4;
          unint64_t v28 = (unint64_t)&v23[16 * (v22 >> 2) + (v26 & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v29 = 16 * v27;
          uint64_t v30 = &v23[16 * (v22 >> 2)];
          do
          {
            *(_OWORD *)uint64_t v30 = *(_OWORD *)v25;
            v30 += 16;
            *(void *)uint64_t v25 = 0;
            *(void *)(v25 + 8) = 0;
            v25 += 16;
            v29 -= 16;
          }
          while (v29);
          int64x2_t v31 = (int64x2_t)v34;
        }
        uint64_t v32 = v35;
        unint64_t v37 = v33;
        unint64_t v33 = v23;
        *(void *)&long long v34 = &v23[16 * (v22 >> 2)];
        int64x2_t v38 = v31;
        *((void *)&v34 + 1) = v28;
        unint64_t v35 = &v23[16 * v24];
        long long v39 = v32;
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v37);
        uint64_t v20 = (_OWORD *)*((void *)&v34 + 1);
      }
      else
      {
        unint64_t v21 = v9 + 2;
        if (v9 >= -1) {
          unint64_t v21 = v9 + 1;
        }
        v20 -= v21 >> 1;
        *(void *)&long long v34 = v20;
        *((void *)&v34 + 1) = v20;
      }
    }
    *uint64_t v20 = *(_OWORD *)a3;
    *a3 = 0;
    a3[1] = 0;
    *((void *)&v34 + 1) += 16;
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__swap_out_circular_buffer(a1, &v33, (void *)a2);
    std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v33);
  }
  else
  {
    uint64_t v12 = *a3;
    if (a2 == v6)
    {
      *(void *)a2 = v12;
      *(void *)(v7 + 16 * v9 + 8) = a3[1];
      *a3 = 0;
      a3[1] = 0;
      a1[1] = a2 + 16;
    }
    else
    {
      uint64_t v13 = a3[1];
      *a3 = 0;
      a3[1] = 0;
      std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__move_range((uint64_t)a1, a2, a1[1], (char *)(a2 + 16));
      *(void *)a2 = v12;
      uint64_t v14 = v7 + 16 * v9;
      unint64_t v15 = *(std::__shared_weak_count **)(v14 + 8);
      *(void *)(v14 + 8) = v13;
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
  }
}

void sub_1C6104148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>>(uint64_t *result, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    unint64_t v6 = a3;
    uint64_t v8 = result;
    uint64_t v11 = result[2];
    uint64_t v9 = (uint64_t)(result + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v21 = v12 - (void)a2;
      uint64_t v22 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v22 >= a5)
      {
        int v23 = &a3[2 * a5];
      }
      else
      {
        int v23 = &a3[2 * v22];
        double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::ConditionEntry>>,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(v9, v23, a4, *(void **)(v9 - 8));
        v8[1] = (uint64_t)result;
        if (v21 < 1) {
          return result;
        }
      }
      std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__move_range((uint64_t)v8, (uint64_t)a2, v12, (char *)&a2[2 * a5]);
      return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *>(v6, v23, a2);
    }
    else
    {
      uint64_t v13 = *v8;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *v8) >> 4);
      if (v14 >> 60) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      BOOL v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0;
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
      if (!v17) {
        unint64_t v18 = v14;
      }
      v27[4] = v9;
      if (v18)
      {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v18);
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
      }
      uint64_t v24 = (uint64_t *)&v19[16 * v15];
      v27[0] = v19;
      v27[1] = v24;
      uint64_t v27[3] = &v19[16 * v20];
      uint64_t v25 = &v24[2 * a5];
      do
      {
        uint64_t *v24 = *v6;
        uint64_t v26 = v6[1];
        v24[1] = v26;
        if (v26) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
        }
        v24 += 2;
        v6 += 2;
      }
      while (v24 != v25);
      _OWORD v27[2] = v25;
      std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__swap_out_circular_buffer(v8, v27, a2);
      return (uint64_t *)std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)v27);
    }
  }
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ExpandTagsRecursive(siri::dialogengine::Context *,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C610449C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  *(void *)(v12 + 8) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v15 = 0;
  while (1)
  {
    if (*(&a12 + v15 + 191) < 0) {
      operator delete(*(void **)(&a12 + v15 + 168));
    }
    v15 -= 24;
    if (v15 == -192)
    {
      MEMORY[0x1C8796D70](v12, 0x20C40960023A9);
      _Unwind_Resume(a1);
    }
  }
}

void std::shared_ptr<siri::dialogengine::ChunkList>::shared_ptr[abi:ne180100]<siri::dialogengine::ChunkList,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v2 = a2;
  operator new();
}

void sub_1C61045AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<siri::dialogengine::ChunkList>::reset[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<siri::dialogengine::ChunkList>::reset[abi:ne180100](void ***result)
{
  unint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    uint64_t v2 = v1;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ChunkList *,std::shared_ptr<siri::dialogengine::ChunkList>::__shared_ptr_default_delete<siri::dialogengine::ChunkList,siri::dialogengine::ChunkList>,std::allocator<siri::dialogengine::ChunkList>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ChunkList *,std::shared_ptr<siri::dialogengine::ChunkList>::__shared_ptr_default_delete<siri::dialogengine::ChunkList,siri::dialogengine::ChunkList>,std::allocator<siri::dialogengine::ChunkList>>::__on_zero_shared(uint64_t result)
{
  if (*(void *)(result + 24))
  {
    unint64_t v1 = *(void ***)(result + 24);
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::ChunkList *,std::shared_ptr<siri::dialogengine::ChunkList>::__shared_ptr_default_delete<siri::dialogengine::ChunkList,siri::dialogengine::ChunkList>,std::allocator<siri::dialogengine::ChunkList>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void InitDefaultsscc_info_VisualElement_VisualElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/VisualElement.pb.cc", a4);
  SnippetUI::VisualElement::VisualElement((SnippetUI::VisualElement *)&SnippetUI::_VisualElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_VisualElement_default_instance_, v4);
  qword_1EB6908D0 = (uint64_t)&SnippetUI::_ImageElement_default_instance_;
  unk_1EB6908D8 = &SnippetUI::_ColorElement_default_instance_;
  qword_1EB6908E0 = (uint64_t)&SnippetUI::_CustomElement_default_instance_;
  unk_1EB6908E8 = &SnippetUI::_CoreChartElement_default_instance_;
}

SnippetUI::VisualElement *SnippetUI::VisualElement::VisualElement(SnippetUI::VisualElement *this)
{
  *(void *)this = &unk_1F21266A0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load_explicit(scc_info_VisualElement_VisualElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_VisualElement_VisualElement_2eproto);
  }
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_1C6104814(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::VisualElement::GetMetadata(SnippetUI::VisualElement *this)
{
  return file_level_metadata_VisualElement_2eproto;
}

uint64_t SnippetUI::VisualElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void SnippetUI::VisualElement::MergeFrom(SnippetUI::VisualElement *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/VisualElement.pb.cc", 472);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::VisualElement::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C6104930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::VisualElement::MergeFrom(SnippetUI::VisualElement *this, const SnippetUI::VisualElement *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/VisualElement.pb.cc", 487);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::VisualElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*((_DWORD *)this + 7) == 1)
      {
        unint64_t v6 = (SnippetUI::ImageElement *)*((void *)this + 2);
      }
      else
      {
        SnippetUI::VisualElement::clear_element((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        unint64_t v6 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement>(0);
        *((void *)this + 2) = v6;
        if (*((_DWORD *)a2 + 7) != 1)
        {
          uint64_t v10 = (const SnippetUI::ImageElement *)&SnippetUI::_ImageElement_default_instance_;
          goto LABEL_23;
        }
      }
      uint64_t v10 = (const SnippetUI::ImageElement *)*((void *)a2 + 2);
LABEL_23:
      SnippetUI::ImageElement::MergeFrom(v6, v10);
      return;
    case 2:
      if (*((_DWORD *)this + 7) == 2)
      {
        char v7 = (SnippetUI::ColorElement *)*((void *)this + 2);
LABEL_17:
        uint64_t v11 = (const SnippetUI::ColorElement *)*((void *)a2 + 2);
        goto LABEL_25;
      }
      SnippetUI::VisualElement::clear_element((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      char v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ColorElement>(0);
      *((void *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 2) {
        goto LABEL_17;
      }
      uint64_t v11 = (const SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_;
LABEL_25:
      SnippetUI::ColorElement::MergeFrom(v7, v11);
      return;
    case 3:
      if (*((_DWORD *)this + 7) == 3)
      {
        uint64_t v8 = (SnippetUI::CustomElement *)*((void *)this + 2);
LABEL_19:
        uint64_t v12 = (const SnippetUI::CustomElement *)*((void *)a2 + 2);
        goto LABEL_27;
      }
      SnippetUI::VisualElement::clear_element((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      uint64_t v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomElement>(0);
      *((void *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) == 3) {
        goto LABEL_19;
      }
      uint64_t v12 = (const SnippetUI::CustomElement *)&SnippetUI::_CustomElement_default_instance_;
LABEL_27:
      SnippetUI::CustomElement::MergeFrom(v8, v12);
      return;
    case 4:
      if (*((_DWORD *)this + 7) == 4)
      {
        uint64_t v9 = (SnippetUI::CoreChartElement *)*((void *)this + 2);
LABEL_21:
        uint64_t v13 = (const SnippetUI::CoreChartElement *)*((void *)a2 + 2);
        goto LABEL_29;
      }
      SnippetUI::VisualElement::clear_element((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      uint64_t v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChartElement>(0);
      *((void *)this + 2) = v9;
      if (*((_DWORD *)a2 + 7) == 4) {
        goto LABEL_21;
      }
      uint64_t v13 = (const SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_;
LABEL_29:
      SnippetUI::CoreChartElement::MergeFrom(v9, v13);
      return;
    default:
      return;
  }
}

void sub_1C6104B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::VisualElement::clear_element(uint64_t this)
{
  uint64_t v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      this = *(void *)(this + 16);
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

void SnippetUI::VisualElement::CopyFrom(SnippetUI::VisualElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::VisualElement::Clear(this);
    SnippetUI::VisualElement::MergeFrom(this, a2);
  }
}

void SnippetUI::VisualElement::Clear(SnippetUI::VisualElement *this)
{
  SnippetUI::VisualElement::clear_element((uint64_t)this);
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::VisualElement *)((char *)this + 8);
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::VisualElement::InternalSerializeWithCachedSizesToArray(SnippetUI::VisualElement *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6 = *((_DWORD *)this + 7);
  if (v6 == 1)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    char v7 = (SnippetUI::ImageElement *)*((void *)this + 2);
    *a2 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v12 = v11;
          *v11++ = v10 | 0x80;
          unsigned int v13 = v10 >> 7;
          unsigned int v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        uint64_t v9 = v12 + 2;
        *uint64_t v11 = v13;
      }
      else
      {
        a2[2] = v10;
        uint64_t v9 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v8;
      uint64_t v9 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement::InternalSerializeWithCachedSizesToArray(v7, (google::protobuf::UnknownFieldSet *)v9, a3, a4);
    int v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    uint64_t v15 = (SnippetUI::ColorElement *)*((void *)this + 2);
    *a2 = 18;
    unsigned int v16 = *((_DWORD *)v15 + 12);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        uint64_t v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v20 = v19;
          *v19++ = v18 | 0x80;
          unsigned int v21 = v18 >> 7;
          unsigned int v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        BOOL v17 = v20 + 2;
        *uint64_t v19 = v21;
      }
      else
      {
        a2[2] = v18;
        BOOL v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      BOOL v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ColorElement::InternalSerializeWithCachedSizesToArray(v15, (google::protobuf::UnknownFieldSet *)v17, a3, a4);
    int v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 3)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    int v23 = (SnippetUI::CustomElement *)*((void *)this + 2);
    *a2 = 26;
    unsigned int v24 = *((_DWORD *)v23 + 12);
    if (v24 > 0x7F)
    {
      a2[1] = v24 | 0x80;
      unsigned int v26 = v24 >> 7;
      if (v24 >> 14)
      {
        uint64_t v27 = (unsigned __int8 *)(a2 + 2);
        do
        {
          unint64_t v28 = v27;
          *v27++ = v26 | 0x80;
          unsigned int v29 = v26 >> 7;
          unsigned int v30 = v26 >> 14;
          v26 >>= 7;
        }
        while (v30);
        uint64_t v25 = v28 + 2;
        *uint64_t v27 = v29;
      }
      else
      {
        a2[2] = v26;
        uint64_t v25 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v24;
      uint64_t v25 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::CustomElement::InternalSerializeWithCachedSizesToArray(v23, (google::protobuf::UnknownFieldSet *)v25, a3, a4);
    int v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 4)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    int64x2_t v31 = (SnippetUI::CoreChartElement *)*((void *)this + 2);
    *a2 = 34;
    unsigned int v32 = *((_DWORD *)v31 + 12);
    if (v32 > 0x7F)
    {
      a2[1] = v32 | 0x80;
      unsigned int v34 = v32 >> 7;
      if (v32 >> 14)
      {
        unint64_t v35 = (unsigned __int8 *)(a2 + 2);
        do
        {
          unint64_t v36 = v35;
          *v35++ = v34 | 0x80;
          unsigned int v37 = v34 >> 7;
          unsigned int v38 = v34 >> 14;
          v34 >>= 7;
        }
        while (v38);
        unint64_t v33 = v36 + 2;
        unsigned __int8 *v35 = v37;
      }
      else
      {
        a2[2] = v34;
        unint64_t v33 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v32;
      unint64_t v33 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::CoreChartElement::InternalSerializeWithCachedSizesToArray(v31, (google::protobuf::UnknownFieldSet *)v33, a3, a4);
  }
  uint64_t v39 = *((void *)this + 1);
  if ((v39 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v39 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::VisualElement::_InternalParse(SnippetUI::VisualElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unint64_t v43 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v43, *((_DWORD *)a3 + 23))) {
      return v43;
    }
    TagFallbacint k = (google::protobuf::internal *)((char *)v43 + 1);
    unsigned int v8 = (char *)*(unsigned __int8 *)v43;
    if ((*(char *)v43 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v43 + 2);
LABEL_6:
      unint64_t v43 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v43, v8);
    unint64_t v43 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_20;
        }
        if (*((_DWORD *)this + 7) == 1)
        {
          uint64_t v9 = (SnippetUI::ImageElement *)*((void *)this + 2);
        }
        else
        {
          SnippetUI::VisualElement::clear_element((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          uint64_t v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement>(0);
          *((void *)this + 2) = v9;
          TagFallbacint k = v43;
        }
        unsigned int v14 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallbacint k = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback) {
            return 0;
          }
          uint64_t v15 = SizeFallback;
          unsigned int v14 = v23;
        }
        else
        {
          uint64_t v15 = (char *)TagFallback + 1;
        }
        int v24 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v15, v14);
        int v25 = *((_DWORD *)a3 + 22);
        BOOL v26 = __OFSUB__(v25--, 1);
        *((_DWORD *)a3 + 22) = v25;
        if (v25 < 0 == v26)
        {
          int v27 = v24;
          unint64_t v28 = SnippetUI::ImageElement::_InternalParse(v9, (google::protobuf::internal *)v15, a3);
          if (v28) {
            goto LABEL_59;
          }
        }
        return 0;
      case 2u:
        if (v8 != 18) {
          goto LABEL_20;
        }
        if (*((_DWORD *)this + 7) == 2)
        {
          unsigned int v10 = (SnippetUI::ColorElement *)*((void *)this + 2);
        }
        else
        {
          SnippetUI::VisualElement::clear_element((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          unsigned int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ColorElement>(0);
          *((void *)this + 2) = v10;
          TagFallbacint k = v43;
        }
        unsigned int v16 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          unsigned int v29 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v29) {
            return 0;
          }
          BOOL v17 = v29;
          unsigned int v16 = v30;
        }
        else
        {
          BOOL v17 = (char *)TagFallback + 1;
        }
        int v31 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v17, v16);
        int v32 = *((_DWORD *)a3 + 22);
        BOOL v26 = __OFSUB__(v32--, 1);
        *((_DWORD *)a3 + 22) = v32;
        if (v32 < 0 != v26) {
          return 0;
        }
        int v27 = v31;
        unint64_t v28 = SnippetUI::ColorElement::_InternalParse(v10, (google::protobuf::internal *)v17, a3);
        if (!v28) {
          return 0;
        }
        goto LABEL_59;
      case 3u:
        if (v8 != 26) {
          goto LABEL_20;
        }
        if (*((_DWORD *)this + 7) == 3)
        {
          uint64_t v11 = (SnippetUI::CustomElement *)*((void *)this + 2);
        }
        else
        {
          SnippetUI::VisualElement::clear_element((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomElement>(0);
          *((void *)this + 2) = v11;
          TagFallbacint k = v43;
        }
        unsigned int v18 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          unint64_t v33 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v33) {
            return 0;
          }
          uint64_t v19 = v33;
          unsigned int v18 = v34;
        }
        else
        {
          uint64_t v19 = (char *)TagFallback + 1;
        }
        int v35 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v19, v18);
        int v36 = *((_DWORD *)a3 + 22);
        BOOL v26 = __OFSUB__(v36--, 1);
        *((_DWORD *)a3 + 22) = v36;
        if (v36 < 0 != v26) {
          return 0;
        }
        int v27 = v35;
        unint64_t v28 = SnippetUI::CustomElement::_InternalParse(v11, (google::protobuf::internal *)v19, a3);
        if (!v28) {
          return 0;
        }
        goto LABEL_59;
      case 4u:
        if (v8 != 34) {
          goto LABEL_20;
        }
        if (*((_DWORD *)this + 7) == 4)
        {
          uint64_t v12 = (SnippetUI::CoreChartElement *)*((void *)this + 2);
        }
        else
        {
          SnippetUI::VisualElement::clear_element((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChartElement>(0);
          *((void *)this + 2) = v12;
          TagFallbacint k = v43;
        }
        unsigned int v20 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          unsigned int v37 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v37) {
            return 0;
          }
          unsigned int v21 = v37;
          unsigned int v20 = v38;
        }
        else
        {
          unsigned int v21 = (char *)TagFallback + 1;
        }
        int v39 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v21, v20);
        int v40 = *((_DWORD *)a3 + 22);
        BOOL v26 = __OFSUB__(v40--, 1);
        *((_DWORD *)a3 + 22) = v40;
        if (v40 < 0 != v26) {
          return 0;
        }
        int v27 = v39;
        unint64_t v28 = SnippetUI::CoreChartElement::_InternalParse(v12, (google::protobuf::internal *)v21, a3);
        if (!v28) {
          return 0;
        }
LABEL_59:
        ++*((_DWORD *)a3 + 22);
        if (!*((_DWORD *)a3 + 20))
        {
          int v41 = *((_DWORD *)a3 + 7) + v27;
          *((_DWORD *)a3 + 7) = v41;
          *(void *)a3 = *((void *)a3 + 1) + (v41 & (v41 >> 31));
          unint64_t v43 = v28;
          continue;
        }
        return 0;
      default:
LABEL_20:
        if (v8) {
          BOOL v13 = (v8 & 7) == 4;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          *((_DWORD *)a3 + 20) = v8 - 1;
          return TagFallback;
        }
        unint64_t v43 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
        if (!v43) {
          return 0;
        }
        continue;
    }
  }
}

uint64_t SnippetUI::VisualElement::GetCachedSize(SnippetUI::VisualElement *this)
{
  return *((unsigned int *)this + 6);
}

char *SnippetUI::VisualElement::ByteSizeLong(SnippetUI::ImageElement **this)
{
  switch(*((_DWORD *)this + 7))
  {
    case 1:
      uint64_t v2 = SnippetUI::ImageElement::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 2:
      uint64_t v2 = SnippetUI::ColorElement::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 3:
      uint64_t v2 = SnippetUI::CustomElement::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 4:
      uint64_t v2 = SnippetUI::CoreChartElement::ByteSizeLong(this[2]);
LABEL_7:
      char v3 = (const google::protobuf::UnknownFieldSet *)&v2[((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1];
      break;
    default:
      char v3 = 0;
      break;
  }
  if ((_BYTE)this[1])
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(this + 1), v3, (_DWORD *)this + 6);
  }
  else
  {
    *((_DWORD *)this + 6) = v3;
    return (char *)v3;
  }
}

uint64_t SnippetUI::VisualElement::IsInitialized(SnippetUI::VisualElement *this)
{
  return 1;
}

SnippetUI::VisualElement *SnippetUI::VisualElement::New(SnippetUI::VisualElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(a2);
}

SnippetUI::VisualElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::VisualElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::VisualElement>);
  }
  SnippetUI::VisualElement::VisualElement(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C6105518(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::VisualElement>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::VisualElement *SnippetUI::VisualElement::New(SnippetUI::VisualElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(0);
}

void SnippetUI::VisualElement::~VisualElement(SnippetUI::VisualElement *this)
{
  SnippetUI::VisualElement::~VisualElement(this);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F21266A0;
  if (*((_DWORD *)this + 7)) {
    SnippetUI::VisualElement::clear_element((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::VisualElement::InitAsDefaultInstance(SnippetUI::VisualElement *this)
{
  qword_1EB6908D0 = (uint64_t)&SnippetUI::_ImageElement_default_instance_;
  unk_1EB6908D8 = &SnippetUI::_ColorElement_default_instance_;
  qword_1EB6908E0 = (uint64_t)&SnippetUI::_CustomElement_default_instance_;
  unk_1EB6908E8 = &SnippetUI::_CoreChartElement_default_instance_;
}

uint64_t SnippetUI::VisualElement::_Internal::image_element(SnippetUI::VisualElement::_Internal *this, const SnippetUI::VisualElement *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::VisualElement::_Internal::color_element(SnippetUI::VisualElement::_Internal *this, const SnippetUI::VisualElement *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::VisualElement::_Internal::custom_element(SnippetUI::VisualElement::_Internal *this, const SnippetUI::VisualElement *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::VisualElement::_Internal::chart_element(SnippetUI::VisualElement::_Internal *this, const SnippetUI::VisualElement *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::VisualElement::set_allocated_image_element(SnippetUI::VisualElement *this, SnippetUI::ImageElement *a2)
{
  uint64_t result = SnippetUI::VisualElement::clear_element((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 1;
    *((void *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::VisualElement::clear_image_element(uint64_t this)
{
  if (*(_DWORD *)(this + 28) == 1)
  {
    uint64_t v1 = this;
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
    *(_DWORD *)(v1 + 28) = 0;
  }
  return this;
}

uint64_t SnippetUI::VisualElement::set_allocated_color_element(SnippetUI::VisualElement *this, SnippetUI::ColorElement *a2)
{
  uint64_t result = SnippetUI::VisualElement::clear_element((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 2;
    *((void *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::VisualElement::clear_color_element(uint64_t this)
{
  if (*(_DWORD *)(this + 28) == 2)
  {
    uint64_t v1 = this;
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
    *(_DWORD *)(v1 + 28) = 0;
  }
  return this;
}

uint64_t SnippetUI::VisualElement::set_allocated_custom_element(SnippetUI::VisualElement *this, SnippetUI::CustomElement *a2)
{
  uint64_t result = SnippetUI::VisualElement::clear_element((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 3;
    *((void *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::VisualElement::clear_custom_element(uint64_t this)
{
  if (*(_DWORD *)(this + 28) == 3)
  {
    uint64_t v1 = this;
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
    *(_DWORD *)(v1 + 28) = 0;
  }
  return this;
}

uint64_t SnippetUI::VisualElement::set_allocated_chart_element(SnippetUI::VisualElement *this, SnippetUI::CoreChartElement *a2)
{
  uint64_t result = SnippetUI::VisualElement::clear_element((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 4;
    *((void *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::VisualElement::clear_chart_element(uint64_t this)
{
  if (*(_DWORD *)(this + 28) == 4)
  {
    uint64_t v1 = this;
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
    *(_DWORD *)(v1 + 28) = 0;
  }
  return this;
}

SnippetUI::VisualElement *SnippetUI::VisualElement::VisualElement(SnippetUI::VisualElement *this, const SnippetUI::VisualElement *a2)
{
  *(void *)this = &unk_1F21266A0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::VisualElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((_DWORD *)this + 7) = 0;
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      SnippetUI::VisualElement::clear_element((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      uint64_t v5 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement>(0);
      *((void *)this + 2) = v5;
      if (*((_DWORD *)a2 + 7) == 1) {
        int v6 = (const SnippetUI::ImageElement *)*((void *)a2 + 2);
      }
      else {
        int v6 = (const SnippetUI::ImageElement *)&SnippetUI::_ImageElement_default_instance_;
      }
      SnippetUI::ImageElement::MergeFrom(v5, v6);
      break;
    case 2:
      SnippetUI::VisualElement::clear_element((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      char v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ColorElement>(0);
      *((void *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 2) {
        unsigned int v8 = (const SnippetUI::ColorElement *)*((void *)a2 + 2);
      }
      else {
        unsigned int v8 = (const SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_;
      }
      SnippetUI::ColorElement::MergeFrom(v7, v8);
      break;
    case 3:
      SnippetUI::VisualElement::clear_element((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      uint64_t v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomElement>(0);
      *((void *)this + 2) = v9;
      if (*((_DWORD *)a2 + 7) == 3) {
        unsigned int v10 = (const SnippetUI::CustomElement *)*((void *)a2 + 2);
      }
      else {
        unsigned int v10 = (const SnippetUI::CustomElement *)&SnippetUI::_CustomElement_default_instance_;
      }
      SnippetUI::CustomElement::MergeFrom(v9, v10);
      break;
    case 4:
      SnippetUI::VisualElement::clear_element((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChartElement>(0);
      *((void *)this + 2) = v11;
      if (*((_DWORD *)a2 + 7) == 4) {
        uint64_t v12 = (const SnippetUI::CoreChartElement *)*((void *)a2 + 2);
      }
      else {
        uint64_t v12 = (const SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_;
      }
      SnippetUI::CoreChartElement::MergeFrom(v11, v12);
      break;
    default:
      return this;
  }
  return this;
}

void sub_1C6105A34(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::VisualElement::default_instance(SnippetUI::VisualElement *this)
{
  if (atomic_load_explicit(scc_info_VisualElement_VisualElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_VisualElement_VisualElement_2eproto);
  }
  return &SnippetUI::_VisualElement_default_instance_;
}

void SnippetUI::VisualElement::CopyFrom(SnippetUI::VisualElement *this, const SnippetUI::VisualElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::VisualElement::Clear(this);
    SnippetUI::VisualElement::MergeFrom(this, a2);
  }
}

void SnippetUI::VisualElement::InternalSwap(SnippetUI::VisualElement *this, SnippetUI::VisualElement *a2)
{
  uint64_t v4 = (SnippetUI::VisualElement *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      int v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  int v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
}

void InitDefaultsscc_info_OrnamentElement_OrnamentElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/OrnamentElement.pb.cc", a4);
  SnippetUI::OrnamentElement::OrnamentElement((SnippetUI::OrnamentElement *)&SnippetUI::_OrnamentElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_OrnamentElement_default_instance_, v4);
  qword_1EB6901E8 = (uint64_t)&SnippetUI::_VisualElement_default_instance_;
}

SnippetUI::OrnamentElement *SnippetUI::OrnamentElement::OrnamentElement(SnippetUI::OrnamentElement *this)
{
  *(void *)this = &unk_1F2126778;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 13) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (atomic_load_explicit(scc_info_OrnamentElement_OrnamentElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_OrnamentElement_OrnamentElement_2eproto);
  }
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 5) = 0;
  return this;
}

void sub_1C6105C54(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<int>::~RepeatedField(v1 + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::OrnamentElement::GetMetadata(SnippetUI::OrnamentElement *this)
{
  return file_level_metadata_OrnamentElement_2eproto;
}

uint64_t SnippetUI::OrnamentElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 52) = a2;
  return this;
}

void SnippetUI::OrnamentElement::MergeFrom(SnippetUI::OrnamentElement *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/OrnamentElement.pb.cc", 307);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::OrnamentElement::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C6105D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::OrnamentElement::MergeFrom(SnippetUI::OrnamentElement *this, const SnippetUI::OrnamentElement *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/OrnamentElement.pb.cc", 322);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::OrnamentElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 4, (int *)a2 + 4);
  if (a2 != (const SnippetUI::OrnamentElement *)&SnippetUI::_OrnamentElement_default_instance_)
  {
    int v6 = (const SnippetUI::VisualElement *)*((void *)a2 + 5);
    if (v6)
    {
      char v7 = (SnippetUI::VisualElement *)*((void *)this + 5);
      if (!v7)
      {
        char v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(0);
        *((void *)this + 5) = v7;
        int v6 = (const SnippetUI::VisualElement *)*((void *)a2 + 5);
      }
      if (v6) {
        unsigned int v8 = v6;
      }
      else {
        unsigned int v8 = (const SnippetUI::VisualElement *)&SnippetUI::_VisualElement_default_instance_;
      }
      SnippetUI::VisualElement::MergeFrom(v7, v8);
    }
  }
  if (*((unsigned char *)a2 + 48)) {
    *((unsigned char *)this + 48) = 1;
  }
}

void sub_1C6105E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::OrnamentElement::CopyFrom(SnippetUI::OrnamentElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::OrnamentElement::Clear(this);
    SnippetUI::OrnamentElement::MergeFrom(this, a2);
  }
}

void SnippetUI::OrnamentElement::Clear(SnippetUI::OrnamentElement *this)
{
  *((_DWORD *)this + 4) = 0;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  char v4 = *((unsigned char *)this + 8);
  char v3 = (char *)this + 8;
  *((void *)v3 + 4) = 0;
  v3[40] = 0;
  if (v4)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v3);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::OrnamentElement::InternalSerializeWithCachedSizesToArray(SnippetUI::OrnamentElement *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this != (SnippetUI::OrnamentElement *)&SnippetUI::_OrnamentElement_default_instance_)
  {
    char v7 = (SnippetUI::VisualElement *)*((void *)this + 5);
    if (v7)
    {
      if (*(void *)a3 <= (unint64_t)a2)
      {
        uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        char v7 = (SnippetUI::VisualElement *)*((void *)this + 5);
      }
      *uint64_t v5 = 10;
      unsigned int v8 = *((_DWORD *)v7 + 6);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        unsigned int v10 = v8 >> 7;
        if (v8 >> 14)
        {
          uint64_t v11 = v5 + 2;
          do
          {
            uint64_t v12 = v11;
            *v11++ = v10 | 0x80;
            unsigned int v13 = v10 >> 7;
            unsigned int v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          char v9 = v12 + 2;
          *uint64_t v11 = v13;
        }
        else
        {
          v5[2] = v10;
          char v9 = v5 + 3;
        }
      }
      else
      {
        v5[1] = v8;
        char v9 = v5 + 2;
      }
      uint64_t v5 = (char *)SnippetUI::VisualElement::InternalSerializeWithCachedSizesToArray(v7, v9, a3, a4);
    }
  }
  unsigned int v15 = *((_DWORD *)this + 8);
  if ((int)v15 >= 1)
  {
    unint64_t v16 = *(void *)a3;
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unint64_t v16 = *(void *)a3;
    }
    if (v16 <= (unint64_t)v5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      BOOL v17 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v32, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
    }
    *uint64_t v5 = 18;
    unsigned int v18 = v5 + 1;
    if (v15 >= 0x80)
    {
      do
      {
        *v18++ = v15 | 0x80;
        unsigned int v31 = v15 >> 14;
        v15 >>= 7;
      }
      while (v31);
      uint64_t v5 = v18 - 1;
    }
    v5 += 2;
    unsigned char *v18 = v15;
    uint64_t v19 = (int *)*((void *)this + 3);
    unsigned int v20 = &v19[*((int *)this + 4)];
    do
    {
      if ((unint64_t)v5 >= *(void *)a3) {
        uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      }
      unint64_t v22 = *v19++;
      unint64_t v21 = v22;
      if (v22 > 0x7F)
      {
        *uint64_t v5 = v21 | 0x80;
        unint64_t v23 = v21 >> 7;
        if (v21 >> 14)
        {
          int v24 = v5 + 1;
          do
          {
            int v25 = v24;
            *v24++ = v23 | 0x80;
            unint64_t v26 = v23 >> 7;
            unint64_t v27 = v23 >> 14;
            v23 >>= 7;
          }
          while (v27);
          uint64_t v5 = v25 + 2;
          unsigned char *v24 = v26;
        }
        else
        {
          v5[1] = v23;
          v5 += 2;
        }
      }
      else
      {
        *v5++ = v21;
      }
    }
    while (v19 < v20);
  }
  if (*((unsigned char *)this + 48))
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      char v28 = *((unsigned char *)this + 48);
    }
    else
    {
      char v28 = 1;
    }
    *uint64_t v5 = 24;
    v5[1] = v28;
    v5 += 2;
  }
  uint64_t v29 = *((void *)this + 1);
  if (v29) {
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v29 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  }
  return (const google::protobuf::UnknownFieldSet *)v5;
}

void sub_1C61061E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::OrnamentElement::_InternalParse(SnippetUI::OrnamentElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unint64_t v23 = a2;
  uint64_t v5 = (SnippetUI::OrnamentElement *)((char *)this + 16);
  int v6 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)))return v23; {
        TagFallbacint k = (google::protobuf::internal *)((char *)v23 + 1);
        }
        unsigned int v10 = (char *)*(unsigned __int8 *)v23;
        if ((*(char *)v23 & 0x80000000) == 0) {
          goto LABEL_6;
        }
        unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallbacint k = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
          unint64_t v23 = TagFallback;
          goto LABEL_7;
        }
        TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, v10);
        unint64_t v23 = TagFallback;
        if (!TagFallback) {
          return TagFallback;
        }
LABEL_7:
        unsigned int v11 = v10 >> 3;
        if (v10 >> 3 != 3) {
          break;
        }
        if (v10 != 24) {
          goto LABEL_13;
        }
        unsigned int v15 = (google::protobuf::internal *)((char *)TagFallback + 1);
        unint64_t v16 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          int v17 = *(char *)v15;
          unint64_t v16 = v16 + (v17 << 7) - 128;
          if ((v17 & 0x80000000) == 0)
          {
            unsigned int v15 = (google::protobuf::internal *)((char *)TagFallback + 2);
            goto LABEL_22;
          }
          uint64_t v19 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v16);
          unint64_t v23 = v19;
          *((unsigned char *)this + 48) = v20 != 0;
          if (!v19) {
            return 0;
          }
        }
        else
        {
LABEL_22:
          unint64_t v23 = v15;
          *((unsigned char *)this + 48) = v16 != 0;
        }
      }
      if (v11 == 2) {
        break;
      }
      if (v11 != 1 || v10 != 10)
      {
LABEL_13:
        if (v10) {
          BOOL v13 = (v10 & 7) == 4;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        unsigned int v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v6, TagFallback, a3, v8);
        goto LABEL_28;
      }
      unsigned int v18 = (SnippetUI::VisualElement *)*((void *)this + 5);
      if (!v18)
      {
        unsigned int v18 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(0);
        *((void *)this + 5) = v18;
        TagFallbacint k = v23;
      }
      unsigned int v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualElement>(a3, v18, TagFallback);
LABEL_28:
      unint64_t v23 = (google::protobuf::internal *)v14;
      if (!v14) {
        return 0;
      }
    }
    if (v10 == 18)
    {
      unsigned int v14 = google::protobuf::internal::PackedInt32Parser(v5, TagFallback, a3, v7);
      goto LABEL_28;
    }
    if (v10 != 16) {
      goto LABEL_13;
    }
    int v21 = google::protobuf::internal::ReadVarint(&v23, (const char **)v10);
    if (!v23) {
      return 0;
    }
    SnippetUI::ColorElement::_internal_add_idioms((uint64_t)this, v21);
  }
}

uint64_t SnippetUI::OrnamentElement::GetCachedSize(SnippetUI::OrnamentElement *this)
{
  return *((unsigned int *)this + 13);
}

char *SnippetUI::OrnamentElement::ByteSizeLong(SnippetUI::OrnamentElement *this)
{
  uint64_t v2 = (_DWORD *)((char *)this + 16);
  int v3 = *((_DWORD *)this + 4);
  if (!v3)
  {
    uint64_t v5 = 0;
LABEL_11:
    int v9 = 0;
    uint64_t v8 = 0;
    goto LABEL_14;
  }
  int v4 = 0;
  uint64_t v5 = 0;
  do
  {
    int v6 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v2, v4);
    if (v6 < 0) {
      uint64_t v7 = 10;
    }
    else {
      uint64_t v7 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
    }
    v5 += v7;
    ++v4;
  }
  while (v3 != v4);
  if (!v5) {
    goto LABEL_11;
  }
  if ((v5 & 0x80000000) != 0) {
    uint64_t v8 = 11;
  }
  else {
    uint64_t v8 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  int v9 = v5;
LABEL_14:
  *((_DWORD *)this + 8) = v9;
  uint64_t v10 = v8 + v5;
  if (this != (SnippetUI::OrnamentElement *)&SnippetUI::_OrnamentElement_default_instance_)
  {
    unsigned int v11 = (SnippetUI::ImageElement **)*((void *)this + 5);
    if (v11)
    {
      uint64_t v12 = SnippetUI::VisualElement::ByteSizeLong(v11);
      v10 += (uint64_t)&v12[((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((unsigned char *)this + 48)) {
    BOOL v13 = (const google::protobuf::UnknownFieldSet *)(v10 + 2);
  }
  else {
    BOOL v13 = (const google::protobuf::UnknownFieldSet *)v10;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::OrnamentElement *)((char *)this + 8), v13, (_DWORD *)this + 13);
  }
  else
  {
    *((_DWORD *)this + 13) = v13;
    return (char *)v13;
  }
}

uint64_t SnippetUI::OrnamentElement::IsInitialized(SnippetUI::OrnamentElement *this)
{
  return 1;
}

SnippetUI::OrnamentElement *SnippetUI::OrnamentElement::New(SnippetUI::OrnamentElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OrnamentElement>(a2);
}

SnippetUI::OrnamentElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OrnamentElement>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::OrnamentElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::OrnamentElement>);
  }
  SnippetUI::OrnamentElement::OrnamentElement(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C61065E4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4023CD61A6);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::OrnamentElement>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::OrnamentElement *SnippetUI::OrnamentElement::New(SnippetUI::OrnamentElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OrnamentElement>(0);
}

void SnippetUI::OrnamentElement::~OrnamentElement(SnippetUI::OrnamentElement *this)
{
  SnippetUI::OrnamentElement::~OrnamentElement(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F2126778;
  if (this != (SnippetUI::OrnamentElement *)&SnippetUI::_OrnamentElement_default_instance_)
  {
    uint64_t v2 = *((void *)this + 5);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::OrnamentElement::InitAsDefaultInstance(SnippetUI::OrnamentElement *this)
{
  qword_1EB6901E8 = (uint64_t)&SnippetUI::_VisualElement_default_instance_;
}

uint64_t SnippetUI::OrnamentElement::_Internal::visual(SnippetUI::OrnamentElement::_Internal *this, const SnippetUI::OrnamentElement *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::OrnamentElement::clear_visual(SnippetUI::OrnamentElement *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

SnippetUI::OrnamentElement *SnippetUI::OrnamentElement::OrnamentElement(SnippetUI::OrnamentElement *this, const SnippetUI::OrnamentElement *a2)
{
  *(void *)this = &unk_1F2126778;
  *((void *)this + 1) = 0;
  int v4 = (SnippetUI::OrnamentElement *)((char *)this + 8);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 16, (int *)a2 + 4);
  *((_DWORD *)this + 13) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 != (const SnippetUI::OrnamentElement *)&SnippetUI::_OrnamentElement_default_instance_ && *((void *)a2 + 5)) {
    operator new();
  }
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  return this;
}

void sub_1C610683C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v3, 0x10A1C406A65A86DLL);
  google::protobuf::RepeatedField<int>::~RepeatedField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::OrnamentElement::default_instance(SnippetUI::OrnamentElement *this)
{
  if (atomic_load_explicit(scc_info_OrnamentElement_OrnamentElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_OrnamentElement_OrnamentElement_2eproto);
  }
  return &SnippetUI::_OrnamentElement_default_instance_;
}

void SnippetUI::OrnamentElement::CopyFrom(SnippetUI::OrnamentElement *this, const SnippetUI::OrnamentElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::OrnamentElement::Clear(this);
    SnippetUI::OrnamentElement::MergeFrom(this, a2);
  }
}

void SnippetUI::OrnamentElement::InternalSwap(SnippetUI::OrnamentElement *this, SnippetUI::OrnamentElement *a2)
{
  int v4 = (SnippetUI::OrnamentElement *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      int v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  int v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 16, (uint64_t)a2 + 16);
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 48);
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  *((unsigned char *)a2 + 48) = v7;
}

uint64_t DE_NSObjectToVariable(const char *a1, void *a2, uint64_t a3, const void **a4, uint64_t a5, int a6)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v46 = a2;
  if (!v46) {
    goto LABEL_113;
  }
  memset(&v59, 0, sizeof(v59));
  if (siri::dialogengine::IsPrimitiveType((const void **)a3))
  {
    std::string::operator=(&v59, (const std::string *)a3);
    goto LABEL_54;
  }
  siri::dialogengine::ObjectRegistry::GetObject((uint64_t)a1, (const std::string::value_type **)a3, &v57);
  uint64_t v11 = v57;
  if (v57)
  {
    siri::dialogengine::ObjectSchema::GetProperty(v57, a1, a4, 0, (siri::dialogengine::ObjectProperty *)&__p);
    if (v56)
    {
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v51, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else {
        std::string v51 = __s;
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      std::string v59 = v51;
    }
    else
    {
      siri::dialogengine::ObjectSchema::GetInput(v11, a1, a4, 0, (uint64_t)&v51);
      int v15 = v53;
      if (v53)
      {
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v50, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
        }
        else {
          std::string v50 = v52;
        }
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
        std::string v59 = v50;
      }
      else
      {
        std::operator+<char>();
        unint64_t v16 = std::string::append(&v47, "' on type '");
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v48.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        int v18 = *(char *)(a3 + 23);
        if (v18 >= 0) {
          uint64_t v19 = (const std::string::value_type *)a3;
        }
        else {
          uint64_t v19 = *(const std::string::value_type **)a3;
        }
        if (v18 >= 0) {
          std::string::size_type v20 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          std::string::size_type v20 = *(void *)(a3 + 8);
        }
        int v21 = std::string::append(&v48, v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v49.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        unint64_t v23 = std::string::append(&v49, "' for computed property callback!");
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::LogWithLevel((uint64_t)&v50, 3u);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v47.__r_.__value_.__l.__data_);
        }
      }
      if (v53) {
        siri::dialogengine::PropertyBase::~PropertyBase((void **)&v51.__r_.__value_.__l.__data_);
      }
      if (!v15)
      {
        int v14 = 1;
LABEL_49:
        if (v56) {
          siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_51;
      }
    }
    if (a6)
    {
      siri::dialogengine::GetArrayElementType((uint64_t)&v59, &v51);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      int v14 = 0;
      std::string v59 = v51;
    }
    else
    {
      int v14 = 0;
    }
    goto LABEL_49;
  }
  std::operator+<char>();
  uint64_t v12 = std::string::append(&v51, "' for computed property callback!");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  int v14 = 1;
LABEL_51:
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  if (v14) {
    goto LABEL_111;
  }
LABEL_54:
  size_t v25 = strlen(siri::dialogengine::TYPE_STRING);
  size_t v26 = v25;
  size_t v27 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    size_t size = v59.__r_.__value_.__l.__size_;
    if (v25 != v59.__r_.__value_.__l.__size_)
    {
      unsigned int v30 = siri::dialogengine::TYPE_NUMBER;
      size_t v31 = strlen(siri::dialogengine::TYPE_NUMBER);
      goto LABEL_68;
    }
    if (v25 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    char v28 = (std::string *)v59.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v25 != HIBYTE(v59.__r_.__value_.__r.__words[2]))
    {
      unsigned int v30 = siri::dialogengine::TYPE_NUMBER;
      size_t v31 = strlen(siri::dialogengine::TYPE_NUMBER);
LABEL_64:
      if (v31 != v27)
      {
        unint64_t v33 = siri::dialogengine::TYPE_BOOLEAN;
        size_t v34 = strlen(siri::dialogengine::TYPE_BOOLEAN);
LABEL_73:
        if (v34 != v27) {
          goto LABEL_85;
        }
        int v35 = &v59;
        goto LABEL_84;
      }
      char v32 = &v59;
      size_t size = v27;
      goto LABEL_71;
    }
    char v28 = &v59;
  }
  if (!memcmp(v28, siri::dialogengine::TYPE_STRING, v26))
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      operator new();
    }
    goto LABEL_108;
  }
  unsigned int v30 = siri::dialogengine::TYPE_NUMBER;
  size_t v31 = strlen(siri::dialogengine::TYPE_NUMBER);
  if ((v27 & 0x80) == 0) {
    goto LABEL_64;
  }
  size_t size = v59.__r_.__value_.__l.__size_;
LABEL_68:
  if (v31 != size)
  {
    unint64_t v33 = siri::dialogengine::TYPE_BOOLEAN;
    size_t v34 = strlen(siri::dialogengine::TYPE_BOOLEAN);
    goto LABEL_81;
  }
  if (size == -1) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  char v32 = (std::string *)v59.__r_.__value_.__r.__words[0];
LABEL_71:
  if (!memcmp(v32, v30, size))
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      operator new();
    }
    goto LABEL_108;
  }
  unint64_t v33 = siri::dialogengine::TYPE_BOOLEAN;
  size_t v34 = strlen(siri::dialogengine::TYPE_BOOLEAN);
  if ((v27 & 0x80) == 0) {
    goto LABEL_73;
  }
  size_t size = v59.__r_.__value_.__l.__size_;
LABEL_81:
  if (v34 != size) {
    goto LABEL_85;
  }
  if (size == -1) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  int v35 = (std::string *)v59.__r_.__value_.__r.__words[0];
  size_t v27 = size;
LABEL_84:
  if (!memcmp(v35, v33, v27))
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      operator new();
    }
    goto LABEL_108;
  }
LABEL_85:
  if (siri::dialogengine::IsArrayType(&v59))
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      siri::dialogengine::GetArrayElementType((uint64_t)&v59, &__p);
      id v36 = v46;
      operator new();
    }
  }
  else
  {
    if (siri::dialogengine::IsPrimitiveType((const void **)&v59.__r_.__value_.__l.__data_)
      || siri::dialogengine::IsArrayType(&v59))
    {
      std::operator+<char>();
      unsigned int v37 = std::string::append(&v50, "' for computed property at: ");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      int v39 = *(char *)(a5 + 23);
      if (v39 >= 0) {
        int v40 = (const std::string::value_type *)a5;
      }
      else {
        int v40 = *(const std::string::value_type **)a5;
      }
      if (v39 >= 0) {
        std::string::size_type v41 = *(unsigned __int8 *)(a5 + 23);
      }
      else {
        std::string::size_type v41 = *(void *)(a5 + 8);
      }
      uint64_t v42 = std::string::append(&v51, v40, v41);
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_111;
      }
      uint64_t v44 = (void *)v50.__r_.__value_.__r.__words[0];
      goto LABEL_110;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      v46;
      operator new();
    }
  }
LABEL_108:
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_111;
  }
  uint64_t v44 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_110:
  operator delete(v44);
LABEL_111:
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
LABEL_113:

  return 0;
}

void sub_1C610749C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }

  _Unwind_Resume(a1);
}

id DE_VariableToNSObject(void *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (!a1) {
    goto LABEL_35;
  }
  if (v4)
  {
    uint64_t v5 = NSString;
    if (a2)
    {
      if (v4[95] < 0) {
        std::string::__init_copy_ctor_external(&v31, *((const std::string::value_type **)v4 + 9), *((void *)v4 + 10));
      }
      else {
        std::string v31 = *(std::string *)(v4 + 3);
      }
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v9 = &v31;
      }
      else {
        int v9 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      uint64_t v2 = [v5 stringWithUTF8String:v9];
    }
    else
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)v4 + 48))(&v31);
      siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&v31, &v45);
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v45;
      }
      else {
        uint64_t v8 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      uint64_t v2 = [v5 stringWithUTF8String:v8];
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if (v44 < 0) {
        operator delete(__p);
      }
      if (v42 < 0) {
        operator delete(v41);
      }
      if (v40 < 0) {
        operator delete(v39);
      }
      if (v38 < 0) {
        operator delete(v37);
      }
      if (v36 < 0) {
        operator delete(v35);
      }
      if (v34 < 0) {
        operator delete(v32);
      }
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    goto LABEL_35;
  }
  if (v6)
  {
    uint64_t v7 = [NSNumber numberWithDouble:v6[9]];
LABEL_34:
    uint64_t v2 = (void *)v7;
    goto LABEL_35;
  }
  if (v10)
  {
    uint64_t v7 = [NSNumber numberWithBool:v10[66]];
    goto LABEL_34;
  }
  if (v12)
  {
    long long v13 = v12;
    uint64_t v2 = objc_opt_new();
    uint64_t v14 = v13[10] - v13[9];
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v14 >> 4;
      do
      {
        uint64_t v17 = v13[9];
        long long v18 = 0uLL;
        if (v15 < (v13[10] - v17) >> 4)
        {
          long long v18 = *(_OWORD *)(v17 + 16 * v15);
          uint64_t v19 = *(void *)(v17 + 16 * v15 + 8);
          if (v19) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
          }
        }
        unsigned int v30 = (std::__shared_weak_count *)*((void *)&v18 + 1);
        std::string::size_type v20 = DE_VariableToNSObject(v18, a2);
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        if (v20) {
          [v2 addObject:v20];
        }

        ++v15;
      }
      while (v16 != v15);
    }
  }
  else
  {
    if (v21)
    {
      long long v22 = v21;
      uint64_t v2 = objc_opt_new();
      std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100]((uint64_t)&v45, v22 + 9);
      std::string::size_type v23 = v45.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v45.__r_.__value_.__l.__data_ != &v45.__r_.__value_.__r.__words[1])
      {
        do
        {
          std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100](&v31, (long long *)(v23 + 32));
          long long v24 = DE_VariableToNSObject(v32, a2);
          if (v24)
          {
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v25 = &v31;
            }
            else {
              size_t v25 = (std::string *)v31.__r_.__value_.__r.__words[0];
            }
            size_t v26 = [NSString stringWithUTF8String:v25];
            [v2 setObject:v24 forKey:v26];
          }
          if (v33) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          }
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v31.__r_.__value_.__l.__data_);
          }
          size_t v27 = *(std::string **)(v23 + 8);
          if (v27)
          {
            do
            {
              char v28 = v27;
              size_t v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            }
            while (v27);
          }
          else
          {
            do
            {
              char v28 = *(std::string **)(v23 + 16);
              BOOL v29 = v28->__r_.__value_.__r.__words[0] == v23;
              std::string::size_type v23 = (std::string::size_type)v28;
            }
            while (!v29);
          }
          std::string::size_type v23 = (std::string::size_type)v28;
        }
        while (v28 != (std::string *)&v45.__r_.__value_.__r.__words[1]);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)v45.__r_.__value_.__l.__size_);
    }
    else
    {
      uint64_t v2 = 0;
    }
  }
LABEL_35:
  return v2;
}

void sub_1C6107C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::TestRunner::RunTestSuite(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = v1;
  uint64_t v13 = 0;
  uint64_t v8 = v2;
  uint64_t v15 = 0;
  uint64_t v14 = 0;
  siri::dialogengine::TestSuite::GetTests(v1, v11);
  if (v11[0] != v11[1])
  {
    siri::dialogengine::TestCase::TestCase(&v10, v11[0]);
    siri::dialogengine::TestResult::TestResult(v9, (const siri::dialogengine::TestCase *)&v10);
  }
  __p[0] = v11;
  std::vector<siri::dialogengine::TestCase>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  uint64_t v3 = *(unsigned __int8 *)(v8 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(v8 + 8);
  }
  if (v3) {
    siri::dialogengine::TestResults::SaveAsJson((uint64_t)&v12);
  }
  siri::dialogengine::TestResults::SummarizeToStdout((siri::dialogengine::TestResults *)&v12);
  uint64_t v4 = v13;
  if (v13 == v14)
  {
    BOOL v6 = 1;
  }
  else
  {
    int v5 = 0;
    do
    {
      if (*(_DWORD *)(v4 + 256) == 2) {
        ++v5;
      }
      v4 += 296;
    }
    while (v4 != v14);
    BOOL v6 = v5 == 0;
  }
  __p[0] = &v13;
  std::vector<siri::dialogengine::TestResult>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v6;
}

void sub_1C6108D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,unint64_t *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  siri::dialogengine::CATExecutionResult::~CATExecutionResult((siri::dialogengine::CATExecutionResult *)&a21);
  std::allocator<siri::dialogengine::TestResult>::destroy[abi:ne180100]((void **)&a22);
  siri::dialogengine::TestCase::~TestCase(&a59);
  a22 = &STACK[0x290];
  std::vector<siri::dialogengine::TestCase>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = a14;
  std::vector<siri::dialogengine::TestResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ExpandCondition(const siri::dialogengine::ConditionExpression **a1, std::string **a2, uint64_t a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  siri::dialogengine::ExpressionToString((siri::dialogengine *)&v68, *a1);
  BOOL v6 = std::string::insert(&v68, 0, "Original: ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 0);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = *a1;
  if (*((char *)*a1 + 175) < 0) {
    std::string::__init_copy_ctor_external(__p, *((const std::string::value_type **)v8 + 19), *((void *)v8 + 20));
  }
  else {
    __p[0] = *(std::string *)((char *)v8 + 152);
  }
  siri::dialogengine::StringToLower((uint64_t)__p, (uint64_t)&__str);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 5)
    {
      if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 6) {
        goto LABEL_41;
      }
      if (LODWORD(__str.__r_.__value_.__l.__data_) != 1952543859 || WORD2(__str.__r_.__value_.__r.__words[0]) != 29557) {
        goto LABEL_41;
      }
      goto LABEL_26;
    }
    if (LODWORD(__str.__r_.__value_.__l.__data_) != 1869771365 || __str.__r_.__value_.__s.__data_[4] != 114)
    {
      p_str = &__str;
      goto LABEL_37;
    }
LABEL_55:
    size_t v26 = *a2;
    if (SHIBYTE((*a2)[1].__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v68, v26[1].__r_.__value_.__l.__data_, v26[1].__r_.__value_.__l.__size_);
    }
    else {
      std::string v68 = v26[1];
    }
    goto LABEL_102;
  }
  if (__str.__r_.__value_.__l.__size_ != 5)
  {
    if (__str.__r_.__value_.__l.__size_ != 6) {
      goto LABEL_41;
    }
    if (*(_DWORD *)__str.__r_.__value_.__l.__data_ != 1952543859
      || *(_WORD *)(__str.__r_.__value_.__r.__words[0] + 4) != 29557)
    {
      goto LABEL_41;
    }
LABEL_26:
    uint64_t v11 = *a2;
    if (SHIBYTE((*a2)->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v68, v11->__r_.__value_.__l.__data_, v11->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v12;
    }
LABEL_102:
    unsigned int v37 = std::string::insert(&v68, 0, "'");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    int v39 = std::string::append(__p, "'");
    std::string::size_type v40 = v39->__r_.__value_.__r.__words[0];
    v70.__r_.__value_.__r.__words[0] = v39->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v39->__r_.__value_.__r.__words[1] + 7);
    char v41 = HIBYTE(v39->__r_.__value_.__r.__words[2]);
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    __str.__r_.__value_.__r.__words[0] = v40;
    __str.__r_.__value_.__l.__size_ = v70.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = v41;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    goto LABEL_163;
  }
  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (*(_DWORD *)__str.__r_.__value_.__l.__data_ == 1869771365
    && *(unsigned char *)(__str.__r_.__value_.__r.__words[0] + 4) == 114)
  {
    goto LABEL_55;
  }
LABEL_37:
  int data = (int)p_str->__r_.__value_.__l.__data_;
  int v17 = p_str->__r_.__value_.__s.__data_[4];
  if (data == 1701734764 && v17 == 115)
  {
    size_t v27 = *a2;
    memset(&v68, 0, sizeof(v68));
    std::vector<siri::dialogengine::CATExecutionDialogResult>::__init_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>((siri::dialogengine::CATExecutionDialogResult *)&v68, (const siri::dialogengine::CATExecutionDialogResult *)v27[3].__r_.__value_.__l.__data_, (const siri::dialogengine::CATExecutionDialogResult *)v27[3].__r_.__value_.__l.__size_, (uint64_t)(v27[3].__r_.__value_.__l.__size_ - v27[3].__r_.__value_.__r.__words[0]) >> 3);
    std::to_string(__p, (uint64_t)(v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]) >> 3);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = __p[0];
    *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 0;
    __p[0].__r_.__value_.__s.__data_[0] = 0;
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
    std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    goto LABEL_163;
  }
LABEL_41:
  std::string::basic_string[abi:ne180100]<0>(__p, "visual");
  BOOL v19 = siri::dialogengine::StringStartsWith(&__str, (unsigned __int8 *)__p);
  BOOL v20 = v19;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v20)
    {
LABEL_43:
      int v21 = *a1;
      if (*((char *)*a1 + 175) < 0) {
        std::string::__init_copy_ctor_external(&v62, *((const std::string::value_type **)v21 + 19), *((void *)v21 + 20));
      }
      else {
        std::string v62 = *(std::string *)((char *)v21 + 152);
      }
      siri::dialogengine::StringSplit((unsigned __int8 *)&v62, ".", &v68);
      std::string::size_type v23 = v68.__r_.__value_.__r.__words[0];
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]) >> 3) < 2) {
        goto LABEL_66;
      }
      int v24 = *(char *)(v68.__r_.__value_.__r.__words[0] + 23);
      if (v24 < 0)
      {
        if (*(void *)(v68.__r_.__value_.__r.__words[0] + 8) != 6) {
          goto LABEL_66;
        }
        std::string::size_type v23 = *(void *)v68.__r_.__value_.__l.__data_;
      }
      else if (v24 != 6)
      {
        goto LABEL_66;
      }
      int v28 = *(_DWORD *)v23;
      int v29 = *(unsigned __int16 *)(v23 + 4);
      if (v28 != 1970497910 || v29 != 27745) {
        goto LABEL_66;
      }
      char v42 = *a2;
      if (SHIBYTE((*a2)[5].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(__p, v42[5].__r_.__value_.__l.__data_, v42[5].__r_.__value_.__l.__size_);
      }
      else {
        __p[0] = v42[5];
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if (size)
        {
LABEL_134:
          std::string v45 = *a2;
          if (SHIBYTE((*a2)[5].__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v66, v45[5].__r_.__value_.__l.__data_, v45[5].__r_.__value_.__l.__size_);
          }
          else {
            std::string v66 = v45[5];
          }
          siri::dialogengine::JsonFromResponseMessage((std::string::size_type)&v66, &v67);
          std::string v48 = std::string::insert(&v67, 0, "{\"result\":");
          long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          __p[0].__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          std::string v50 = std::string::append(__p, "}");
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v70.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v67.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)__p);
        }
      }
      else if (*((unsigned char *)&__p[0].__r_.__value_.__s + 23))
      {
        goto LABEL_134;
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v62.__r_.__value_.__l.__size_ != 15) {
          goto LABEL_66;
        }
        std::string v47 = (std::string *)v62.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) != 15) {
          goto LABEL_66;
        }
        std::string v47 = &v62;
      }
      std::string::size_type v52 = v47->__r_.__value_.__r.__words[0];
      uint64_t v53 = *(std::string::size_type *)((char *)v47->__r_.__value_.__r.__words + 7);
      if (v52 == 0x732E6C6175736976 && v53 == 0x736E6F6974636573)
      {
        std::string v31 = "0";
        goto LABEL_67;
      }
LABEL_66:
      std::string v31 = "";
LABEL_67:
      std::string::basic_string[abi:ne180100]<0>(&v63, v31);
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string __str = v63;
      *((unsigned char *)&v63.__r_.__value_.__s + 23) = 0;
      v63.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::IsStringANumber(&__str);
      goto LABEL_163;
    }
  }
  else if (v19)
  {
    goto LABEL_43;
  }
  long long v22 = *a2;
  memset(__p, 0, 24);
  std::vector<siri::dialogengine::CATExecutionDialogResult>::__init_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>((siri::dialogengine::CATExecutionDialogResult *)__p, (const siri::dialogengine::CATExecutionDialogResult *)v22[3].__r_.__value_.__l.__data_, (const siri::dialogengine::CATExecutionDialogResult *)v22[3].__r_.__value_.__l.__size_, (uint64_t)(v22[3].__r_.__value_.__l.__size_ - v22[3].__r_.__value_.__r.__words[0]) >> 3);
  if (__p[0].__r_.__value_.__r.__words[0] == __p[0].__r_.__value_.__l.__size_)
  {
    size_t v25 = *a2;
    if (SHIBYTE((*a2)[5].__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v68, v25[5].__r_.__value_.__l.__data_, v25[5].__r_.__value_.__l.__size_);
    }
    else {
      std::string v68 = v25[5];
    }
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v32 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v32 = v68.__r_.__value_.__l.__size_;
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    if (!v32)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "CAT produced no output!");
      siri::dialogengine::TestResult::AddNote(a3, (uint64_t)__p);
      if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_177;
      }
      char v36 = (void *)__p[0].__r_.__value_.__r.__words[0];
      goto LABEL_176;
    }
  }
  else
  {
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  }
  std::string::basic_string[abi:ne180100]<0>(&v68, "printOnly");
  siri::dialogengine::StringToLower((uint64_t)&v68, (uint64_t)__p);
  if (!siri::dialogengine::StringStartsWith(&__str, (unsigned __int8 *)__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "spokenOnly");
    siri::dialogengine::StringToLower((uint64_t)&v67, (uint64_t)&v70);
    siri::dialogengine::StringStartsWith(&__str, (unsigned __int8 *)&v70);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::StringSplit((unsigned __int8 *)&__str, ".", __p);
  std::string::size_type v33 = __p[0].__r_.__value_.__r.__words[0];
  if (__p[0].__r_.__value_.__l.__size_ == __p[0].__r_.__value_.__r.__words[0]
    || (unint64_t v34 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(__p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0]) >> 3),
        v34 >= 3))
  {
    std::string::basic_string[abi:ne180100]<0>(&v63, "");
  }
  else
  {
    if (*(char *)(__p[0].__r_.__value_.__r.__words[0] + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)__p[0].__r_.__value_.__l.__data_, *(void *)(__p[0].__r_.__value_.__r.__words[0] + 8));
      std::string::size_type v33 = __p[0].__r_.__value_.__r.__words[0];
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL
          * ((uint64_t)(__p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0]) >> 3);
    }
    else
    {
      long long v35 = *(_OWORD *)__p[0].__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = *(void *)(__p[0].__r_.__value_.__r.__words[0] + 16);
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v35;
    }
    if (v34 < 2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v70, "print");
    }
    else if (*(char *)(v33 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(v33 + 24), *(void *)(v33 + 32));
    }
    else
    {
      std::string v70 = *(std::string *)(v33 + 24);
    }
    std::string::basic_string[abi:ne180100]<0>(&v66, "content");
    std::string::basic_string[abi:ne180100]<0>(&v65, "full");
    siri::dialogengine::StringReplace((uint64_t)&v68, (char *)&v66, (uint64_t)&v65, 0, &v67);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    std::string v68 = v67;
    *((unsigned char *)&v67.__r_.__value_.__s + 23) = 0;
    v67.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v66, "caption");
    std::string::basic_string[abi:ne180100]<0>(&v65, "supporting");
    siri::dialogengine::StringReplace((uint64_t)&v68, (char *)&v66, (uint64_t)&v65, 0, &v67);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    std::string v68 = v67;
    *((unsigned char *)&v67.__r_.__value_.__s + 23) = 0;
    v67.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    siri::dialogengine::StringSplit((unsigned __int8 *)&v68, "[", &v67);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0]) >> 3) < 2)
    {
      int v43 = 0;
    }
    else
    {
      std::string::operator=(&v68, (const std::string *)v67.__r_.__value_.__l.__data_);
      siri::dialogengine::StringTrim("] \t", (const std::string *)(v67.__r_.__value_.__r.__words[0] + 24), &v66);
      int v43 = siri::dialogengine::StringToInt(&v66, 0, 0);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
    }
    char v44 = *a2;
    memset(&v66, 0, sizeof(v66));
    std::vector<siri::dialogengine::CATExecutionDialogResult>::__init_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>((siri::dialogengine::CATExecutionDialogResult *)&v66, (const siri::dialogengine::CATExecutionDialogResult *)v44[3].__r_.__value_.__l.__data_, (const siri::dialogengine::CATExecutionDialogResult *)v44[3].__r_.__value_.__l.__size_, (uint64_t)(v44[3].__r_.__value_.__l.__size_ - v44[3].__r_.__value_.__r.__words[0]) >> 3);
    if (v43 < (unint64_t)((uint64_t)(v66.__r_.__value_.__l.__size_ - v66.__r_.__value_.__r.__words[0]) >> 3)) {
      siri::dialogengine::CATExecutionDialogResult::CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)&v62, (const siri::dialogengine::CATExecutionDialogResult *)(v66.__r_.__value_.__r.__words[0] + 8 * v43));
    }
    std::string::basic_string[abi:ne180100]<0>(&v63, "");
    v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
    std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
    v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
  }
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = v63;
LABEL_163:
  std::string::size_type v55 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v55 = __str.__r_.__value_.__l.__size_;
  }
  if (v55)
  {
    siri::dialogengine::Context::Context((siri::dialogengine::Context *)__p);
    operator new();
  }
  char v56 = *a1;
  if (*((char *)*a1 + 175) < 0) {
    std::string::__init_copy_ctor_external(&v70, *((const std::string::value_type **)v56 + 19), *((void *)v56 + 20));
  }
  else {
    std::string v70 = *(std::string *)((char *)v56 + 152);
  }
  uint64_t v57 = std::string::insert(&v70, 0, "Invalid name in test condition: '");
  long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  std::string v59 = std::string::append(&v68, "'");
  long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v60;
  v59->__r_.__value_.__l.__size_ = 0;
  v59->__r_.__value_.__r.__words[2] = 0;
  v59->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::TestResult::AddNote(a3, (uint64_t)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
  {
    char v36 = (void *)v70.__r_.__value_.__r.__words[0];
LABEL_176:
    operator delete(v36);
  }
LABEL_177:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C610AA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53)
{
  siri::dialogengine::CATExecutionDialogResult::~CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)&a15);
  a34 = &a38;
  std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  a38 = &a42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  if (*(char *)(v53 - 105) < 0) {
    operator delete(*(void **)(v53 - 128));
  }
  if (a51 < 0) {
    operator delete(__p);
  }
  std::string __p = &a53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ExpressionToString(siri::dialogengine *this, const siri::dialogengine::ConditionExpression *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"[", 1);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" \"", 2);
  if (*((char *)a2 + 175) < 0) {
    std::string::__init_copy_ctor_external(&v23, *((const std::string::value_type **)a2 + 19), *((void *)a2 + 20));
  }
  else {
    std::string v23 = *(std::string *)((char *)a2 + 152);
  }
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v5 = &v23;
  }
  else {
    int v5 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v23.__r_.__value_.__l.__size_;
  }
  long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, size);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\"", 1);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" \"", 2);
  if (*((char *)a2 + 199) < 0) {
    std::string::__init_copy_ctor_external(&v22, *((const std::string::value_type **)a2 + 22), *((void *)a2 + 23));
  }
  else {
    std::string v22 = *(std::string *)((char *)a2 + 176);
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v10 = &v22;
  }
  else {
    std::string v10 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v22.__r_.__value_.__l.__size_;
  }
  long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"", 1);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" \"", 2);
  if (*((char *)a2 + 223) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 25), *((void *)a2 + 26));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 200);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
  }
  int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_p, v16);
  long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ]", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  v24[0] = *MEMORY[0x1E4FBA408];
  uint64_t v19 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v24 + *(void *)(v24[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v25[0] = v19;
  v25[1] = MEMORY[0x1E4FBA470] + 16;
  if (v26 < 0) {
    operator delete((void *)v25[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8796CC0](&v27);
}

void sub_1C610B354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void __assign_helper_atomic_property__50596(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *__copy_helper_atomic_property__50598(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *uint64_t result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1C610B4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

const char *siri::dialogengine::VariableInfo<BOOL>::SchemaName()
{
  return "dialog.Boolean";
}

const char *siri::dialogengine::VariableInfo<BOOL>::PrimitiveName()
{
  return "BOOL";
}

const char *siri::dialogengine::VariableInfo<double>::SchemaName()
{
  return "dialog.Number";
}

const char *siri::dialogengine::VariableInfo<double>::PrimitiveName()
{
  return "double";
}

const char *siri::dialogengine::VariableInfo<std::string>::SchemaName()
{
  return "dialog.String";
}

const char *siri::dialogengine::VariableInfo<std::string>::PrimitiveName()
{
  return "string";
}

void siri::dialogengine::FindVariableBool(uint64_t a1@<X0>, const void **a2@<X1>, char *a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  {
    siri::dialogengine::FindVariable<BOOL>(siri::dialogengine::VariableObject &,std::string const&,std::optional<BOOL> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "FindVariable");
  }
  os_signpost_id_t v10 = os_signpost_id_generate((os_log_t)siri::dialogengine::FindVariable<BOOL>(siri::dialogengine::VariableObject &,std::string const&,std::optional<BOOL> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    std::string::size_type v11 = siri::dialogengine::FindVariable<BOOL>(siri::dialogengine::VariableObject &,std::string const&,std::optional<BOOL> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::FindVariable<BOOL>(siri::dialogengine::VariableObject &,std::string const&,std::optional<BOOL> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog))
    {
      if (*((char *)a2 + 23) >= 0) {
        long long v12 = a2;
      }
      else {
        long long v12 = (void *)*a2;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"BOOL";
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v11, OS_SIGNPOST_INTERVAL_BEGIN, v10, "FindVariable", "name = %s, type = %s", (uint8_t *)&buf, 0x16u);
    }
  }
  *(_WORD *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  uint64_t v13 = std::__tree<std::string>::find<std::string>(a1 + 72, a2);
  if (a1 + 80 == v13)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v15 = *(std::__shared_weak_count **)(v13 + 64);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v16)
    {
      *(unsigned char *)a5 = 1;
      if (*(char *)(v16 + 55) < 0) {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v16 + 32), *(void *)(v16 + 40));
      }
      else {
        std::string buf = *(std::string *)(v16 + 32);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        if (buf.__r_.__value_.__l.__size_ != 14)
        {
          operator delete(buf.__r_.__value_.__l.__data_);
LABEL_56:
          if (*((char *)a2 + 23) >= 0) {
            int v28 = a2;
          }
          else {
            int v28 = *a2;
          }
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Variable '%s' exists, but does not have type [%s]", v14, v28, "BOOL");
          goto LABEL_60;
        }
        BOOL v21 = *(void *)buf.__r_.__value_.__l.__data_ != 0x422E676F6C616964
           || *(void *)(buf.__r_.__value_.__r.__words[0] + 6) != 0x6E61656C6F6F422ELL;
        operator delete(buf.__r_.__value_.__l.__data_);
        if (v21) {
          goto LABEL_56;
        }
      }
      else
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) != 14) {
          goto LABEL_56;
        }
        if (buf.__r_.__value_.__r.__words[0] != 0x422E676F6C616964
          || *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 6) != 0x6E61656C6F6F422ELL)
        {
          goto LABEL_56;
        }
      }
      *(unsigned char *)(a5 + 1) = 1;
      std::string v23 = v22;
      if (v22 && v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        int v24 = v15;
      }
      else
      {
        int v24 = 0;
      }
      *(void *)(a5 + 8) = v22;
      *(void *)(a5 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v24;
      if (v15) {
        goto LABEL_61;
      }
      goto LABEL_62;
    }
  }
  if (*((unsigned char *)a4 + 4))
  {
    int v17 = *a4;
    if (*a4 == 1)
    {
      if (*((char *)a2 + 23) >= 0) {
        size_t v25 = a2;
      }
      else {
        size_t v25 = *a2;
      }
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Variable '%s' not found", v14, v25);
    }
    else if (v17 == 3)
    {
      if (*((char *)a2 + 23) >= 0) {
        char v26 = a2;
      }
      else {
        char v26 = *a2;
      }
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Variable '%s' not found", v14, v26);
    }
    else if (v17 == 2)
    {
      if (*((char *)a2 + 23) >= 0) {
        long long v18 = a2;
      }
      else {
        long long v18 = *a2;
      }
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Variable '%s' not found", v14, v18);
    }
    else
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v27 = a2;
      }
      else {
        uint64_t v27 = *a2;
      }
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Variable '%s' not found", v14, v27);
    }
  }
LABEL_60:
  int v24 = 0;
  std::string v23 = 0;
  if (v15) {
LABEL_61:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_62:
  if (!v23)
  {
    if (a3[1])
    {
      int v29 = operator new(0x60uLL);
      v29[1] = 0;
      std::string v29[2] = 0;
      void *v29 = &unk_1F2126A20;
      *(void *)&long long v30 = siri::dialogengine::VariableBoolean::VariableBoolean((uint64_t)(v29 + 3), (const std::string *)a2, *a3);
      *((void *)&v30 + 1) = v29;
      *(_OWORD *)(a5 + 8) = v30;
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
    }
  }
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    std::string v31 = siri::dialogengine::FindVariable<BOOL>(siri::dialogengine::VariableObject &,std::string const&,std::optional<BOOL> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::FindVariable<BOOL>(siri::dialogengine::VariableObject &,std::string const&,std::optional<BOOL> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v31, OS_SIGNPOST_INTERVAL_END, v10, "FindVariable", "", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_1C610BA14(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::FindVariableDouble(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  {
    siri::dialogengine::FindVariable<double>(siri::dialogengine::VariableObject &,std::string const&,std::optional<double> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "FindVariable");
  }
  os_signpost_id_t v10 = os_signpost_id_generate((os_log_t)siri::dialogengine::FindVariable<double>(siri::dialogengine::VariableObject &,std::string const&,std::optional<double> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    std::string::size_type v11 = siri::dialogengine::FindVariable<double>(siri::dialogengine::VariableObject &,std::string const&,std::optional<double> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::FindVariable<double>(siri::dialogengine::VariableObject &,std::string const&,std::optional<double> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog))
    {
      if (*((char *)a2 + 23) >= 0) {
        long long v12 = a2;
      }
      else {
        long long v12 = (void *)*a2;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"double";
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v11, OS_SIGNPOST_INTERVAL_BEGIN, v10, "FindVariable", "name = %s, type = %s", (uint8_t *)&buf, 0x16u);
    }
  }
  *(_WORD *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  uint64_t v13 = std::__tree<std::string>::find<std::string>(a1 + 72, a2);
  if (a1 + 80 == v13)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v15 = *(std::__shared_weak_count **)(v13 + 64);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v16)
    {
      *(unsigned char *)a5 = 1;
      if (*(char *)(v16 + 55) < 0) {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v16 + 32), *(void *)(v16 + 40));
      }
      else {
        std::string buf = *(std::string *)(v16 + 32);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        if (buf.__r_.__value_.__l.__size_ != 13)
        {
          operator delete(buf.__r_.__value_.__l.__data_);
LABEL_56:
          if (*((char *)a2 + 23) >= 0) {
            int v28 = a2;
          }
          else {
            int v28 = *a2;
          }
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Variable '%s' exists, but does not have type [%s]", v14, v28, "double");
          goto LABEL_60;
        }
        BOOL v21 = *(void *)buf.__r_.__value_.__l.__data_ != 0x4E2E676F6C616964
           || *(void *)(buf.__r_.__value_.__r.__words[0] + 5) != 0x7265626D754E2E67;
        operator delete(buf.__r_.__value_.__l.__data_);
        if (v21) {
          goto LABEL_56;
        }
      }
      else
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) != 13) {
          goto LABEL_56;
        }
        if (buf.__r_.__value_.__r.__words[0] != 0x4E2E676F6C616964
          || *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 5) != 0x7265626D754E2E67)
        {
          goto LABEL_56;
        }
      }
      *(unsigned char *)(a5 + 1) = 1;
      std::string v23 = v22;
      if (v22 && v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        int v24 = v15;
      }
      else
      {
        int v24 = 0;
      }
      *(void *)(a5 + 8) = v22;
      *(void *)(a5 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v24;
      if (v15) {
        goto LABEL_61;
      }
      goto LABEL_62;
    }
  }
  if (*((unsigned char *)a4 + 4))
  {
    int v17 = *a4;
    if (*a4 == 1)
    {
      if (*((char *)a2 + 23) >= 0) {
        size_t v25 = a2;
      }
      else {
        size_t v25 = *a2;
      }
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Variable '%s' not found", v14, v25);
    }
    else if (v17 == 3)
    {
      if (*((char *)a2 + 23) >= 0) {
        char v26 = a2;
      }
      else {
        char v26 = *a2;
      }
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Variable '%s' not found", v14, v26);
    }
    else if (v17 == 2)
    {
      if (*((char *)a2 + 23) >= 0) {
        long long v18 = a2;
      }
      else {
        long long v18 = *a2;
      }
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Variable '%s' not found", v14, v18);
    }
    else
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v27 = a2;
      }
      else {
        uint64_t v27 = *a2;
      }
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Variable '%s' not found", v14, v27);
    }
  }
LABEL_60:
  int v24 = 0;
  std::string v23 = 0;
  if (v15) {
LABEL_61:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_62:
  if (!v23)
  {
    if (*(unsigned char *)(a3 + 8))
    {
      int v29 = operator new(0x68uLL);
      v29[1] = 0;
      std::string v29[2] = 0;
      void *v29 = &unk_1F2126A88;
      *(void *)&long long v30 = siri::dialogengine::VariableNumber::VariableNumber((uint64_t)(v29 + 3), (const std::string *)a2, *(double *)a3);
      *((void *)&v30 + 1) = v29;
      *(_OWORD *)(a5 + 8) = v30;
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
    }
  }
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    std::string v31 = siri::dialogengine::FindVariable<double>(siri::dialogengine::VariableObject &,std::string const&,std::optional<double> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::FindVariable<double>(siri::dialogengine::VariableObject &,std::string const&,std::optional<double> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v31, OS_SIGNPOST_INTERVAL_END, v10, "FindVariable", "", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_1C610BED0(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::FindVariableString(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  {
    siri::dialogengine::FindVariable<std::string>(siri::dialogengine::VariableObject &,std::string const&,std::optional<std::string> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "FindVariable");
  }
  os_signpost_id_t v10 = os_signpost_id_generate((os_log_t)siri::dialogengine::FindVariable<std::string>(siri::dialogengine::VariableObject &,std::string const&,std::optional<std::string> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    std::string::size_type v11 = siri::dialogengine::FindVariable<std::string>(siri::dialogengine::VariableObject &,std::string const&,std::optional<std::string> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::FindVariable<std::string>(siri::dialogengine::VariableObject &,std::string const&,std::optional<std::string> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog))
    {
      if (*((char *)a2 + 23) >= 0) {
        long long v12 = a2;
      }
      else {
        long long v12 = (void *)*a2;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"string";
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v11, OS_SIGNPOST_INTERVAL_BEGIN, v10, "FindVariable", "name = %s, type = %s", (uint8_t *)&buf, 0x16u);
    }
  }
  *(_WORD *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  uint64_t v13 = std::__tree<std::string>::find<std::string>(a1 + 72, a2);
  if (a1 + 80 == v13)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v15 = *(std::__shared_weak_count **)(v13 + 64);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v16)
    {
      *(unsigned char *)a5 = 1;
      if (*(char *)(v16 + 55) < 0) {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v16 + 32), *(void *)(v16 + 40));
      }
      else {
        std::string buf = *(std::string *)(v16 + 32);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        if (buf.__r_.__value_.__l.__size_ != 13)
        {
          operator delete(buf.__r_.__value_.__l.__data_);
LABEL_56:
          if (*((char *)a2 + 23) >= 0) {
            int v28 = a2;
          }
          else {
            int v28 = *a2;
          }
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Variable '%s' exists, but does not have type [%s]", v14, v28, "string");
          goto LABEL_60;
        }
        BOOL v21 = *(void *)buf.__r_.__value_.__l.__data_ != 0x532E676F6C616964
           || *(void *)(buf.__r_.__value_.__r.__words[0] + 5) != 0x676E697274532E67;
        operator delete(buf.__r_.__value_.__l.__data_);
        if (v21) {
          goto LABEL_56;
        }
      }
      else
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) != 13) {
          goto LABEL_56;
        }
        if (buf.__r_.__value_.__r.__words[0] != 0x532E676F6C616964
          || *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 5) != 0x676E697274532E67)
        {
          goto LABEL_56;
        }
      }
      *(unsigned char *)(a5 + 1) = 1;
      std::string v23 = v22;
      if (v22 && v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        int v24 = v15;
      }
      else
      {
        int v24 = 0;
      }
      *(void *)(a5 + 8) = v22;
      *(void *)(a5 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v24;
      if (v15) {
        goto LABEL_61;
      }
      goto LABEL_62;
    }
  }
  if (*((unsigned char *)a4 + 4))
  {
    int v17 = *a4;
    if (*a4 == 1)
    {
      if (*((char *)a2 + 23) >= 0) {
        size_t v25 = a2;
      }
      else {
        size_t v25 = *a2;
      }
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Variable '%s' not found", v14, v25);
    }
    else if (v17 == 3)
    {
      if (*((char *)a2 + 23) >= 0) {
        char v26 = a2;
      }
      else {
        char v26 = *a2;
      }
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Variable '%s' not found", v14, v26);
    }
    else if (v17 == 2)
    {
      if (*((char *)a2 + 23) >= 0) {
        long long v18 = a2;
      }
      else {
        long long v18 = *a2;
      }
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Variable '%s' not found", v14, v18);
    }
    else
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v27 = a2;
      }
      else {
        uint64_t v27 = *a2;
      }
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Variable '%s' not found", v14, v27);
    }
  }
LABEL_60:
  int v24 = 0;
  std::string v23 = 0;
  if (v15) {
LABEL_61:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_62:
  if (!v23)
  {
    if (*(unsigned char *)(a3 + 24))
    {
      std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableString,std::allocator<siri::dialogengine::VariableString>,std::string const&,std::string const&,void>((uint64_t *)&buf, (const std::string *)a2, a3);
      long long v29 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)(a5 + 8) = v29;
      if (v24)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        if (buf.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
        }
      }
    }
  }
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v30 = siri::dialogengine::FindVariable<std::string>(siri::dialogengine::VariableObject &,std::string const&,std::optional<std::string> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::FindVariable<std::string>(siri::dialogengine::VariableObject &,std::string const&,std::optional<std::string> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v30, OS_SIGNPOST_INTERVAL_END, v10, "FindVariable", "", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_1C610C370(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void YAML::Clone(YAML *this, const YAML::Node *a2)
{
  YAML::NodeEvents::NodeEvents((YAML::NodeEvents *)v3, this);
  YAML::NodeBuilder::NodeBuilder((YAML::NodeBuilder *)&v2);
}

void sub_1C610C40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  YAML::NodeBuilder::~NodeBuilder((YAML::NodeBuilder *)&a9);
  YAML::NodeEvents::~NodeEvents((YAML::NodeEvents *)(v9 - 64));
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'siri::dialogengine::GroupRandom::Validate(siri::dialogengine::GroupRandom *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::GroupRandom::Validate((siri::dialogengine::GroupRandom *)((char *)this - 64), a2);
}

uint64_t siri::dialogengine::GroupRandom::Validate(siri::dialogengine::GroupRandom *this, siri::dialogengine::Context *a2)
{
  char v4 = siri::dialogengine::Group::Validate((uint64_t **)this, a2);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v16, (const void ***)this + 9);
  int v5 = (void **)v16[0];
  if (v16[0] != &v16[1])
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "random");
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)__p, (uint64_t)(v5 + 4), v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v6 = v15;
      unsigned __int8 v7 = v15;
      if ((v15 & 0x80u) != 0) {
        unint64_t v6 = (unint64_t)v14[1];
      }
      if (v6)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)v14, (uint64_t)this);
        char v4 = 0;
        unsigned __int8 v7 = v15;
      }
      if ((v7 & 0x80) != 0) {
        operator delete(v14[0]);
      }
      uint64_t v8 = (void **)v5[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void **)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void **)v5[2];
          BOOL v10 = *v9 == v5;
          int v5 = v9;
        }
        while (!v10);
      }
      int v5 = v9;
    }
    while (v9 != &v16[1]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v16[1]);
  if (((*(uint64_t (**)(siri::dialogengine::GroupRandom *))(*(void *)this + 72))(this) & 1) != 0
    && *((void *)this + 27) - *((void *)this + 26) <= 0x1FuLL)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "<random> group contains fewer than two items; Consider replacing it with <first>");
    siri::dialogengine::Context::AddValidationNit((uint64_t)a2, (long long *)v16, (uint64_t)this);
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    char v4 = 0;
  }
  return v4 & 1;
}

void sub_1C610C5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'siri::dialogengine::GroupRandom::~GroupRandom(siri::dialogengine::GroupRandom *this)
{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupRandom *)((char *)this - 64));
  JUMPOUT(0x1C8796D70);
}

{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupRandom *)((char *)this - 64));
}

uint64_t siri::dialogengine::GroupRandom::ShouldDoValidationCheckForFewerThanTwoChildren(siri::dialogengine::GroupRandom *this)
{
  return 1;
}

void siri::dialogengine::GroupRandom::Execute(siri::dialogengine::Node ***this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t *a3@<X8>)
{
  siri::dialogengine::Node::GetIdForDebug((siri::dialogengine::Node *)this, a2, 0, &v91);
  unint64_t v6 = std::string::insert(&v91, 0, "Executing 'Random' group: ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  if ((((uint64_t (*)(siri::dialogengine::Node ***, siri::dialogengine::Context *))(*this)[6])(this, a2) & 1) == 0)
  {
    siri::dialogengine::Node::GetIdForDebug((siri::dialogengine::Node *)this, a2, 0, &v91);
    long long v12 = std::string::insert(&v91, 0, "Condition for <random> group failed - skipping: ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = 0uLL;
  v91.__r_.__value_.__r.__words[2] = (std::string::size_type)&v92;
  std::string v92 = 0;
  long long v95 = 0;
  uint64_t v96 = 0;
  uint64_t v93 = 0;
  uint64_t v94 = &v95;
  char v98 = 0;
  uint64_t v99 = 0;
  std::string::size_type v97 = &v98;
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__p, (siri::dialogengine::Context *)((char *)a2 + 8));
  int v8 = v89;
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p.__r_.__value_.__l.__data_);
  if (!v8)
  {
    uint64_t v11 = *((void *)a2 + 63);
    BOOL v10 = (std::__shared_weak_count *)*((void *)a2 + 64);
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v11)
    {
      siri::dialogengine::Context::GetUseCaseState((const void ***)a2, v9, (uint64_t)&__p);
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      std::__tree<std::string>::destroy((uint64_t)&v91.__r_.__value_.__r.__words[2], v92);
      v91.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      std::string v92 = v81;
      uint64_t v93 = v82;
      if (v82)
      {
        *((void *)v81 + 2) = &v92;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v81;
        unint64_t v81 = 0;
        uint64_t v82 = 0;
      }
      else
      {
        v91.__r_.__value_.__r.__words[2] = (std::string::size_type)&v92;
      }
      std::__tree<std::string>::destroy((uint64_t)&v94, v95);
      uint64_t v94 = v83;
      long long v95 = v84;
      uint64_t v96 = v85;
      if (v85)
      {
        *((void *)v84 + 2) = &v95;
        long long v83 = &v84;
        long long v84 = 0;
        uint64_t v85 = 0;
      }
      else
      {
        uint64_t v94 = &v95;
      }
      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(v98);
      uint64_t v14 = v87;
      std::string::size_type v97 = v86;
      char v98 = v87;
      uint64_t v99 = v88;
      if (v88)
      {
        v87[2] = &v98;
        std::__split_buffer<std::string>::pointer v86 = &v87;
        unint64_t v87 = 0;
        uint64_t v88 = 0;
        uint64_t v14 = 0;
      }
      else
      {
        std::string::size_type v97 = &v98;
      }
      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(v14);
      std::__tree<std::string>::destroy((uint64_t)&v83, v84);
      std::__tree<std::string>::destroy((uint64_t)&__p.__r_.__value_.__r.__words[2], v81);
    }
  }
  if ((unint64_t)((char *)this[27] - (char *)this[26]) <= 0x1F)
  {
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"<random> group has zero or one child; execute as if it were a <first> group",
      v9);
LABEL_31:
    long long v18 = this[26];
    for (uint64_t i = this[27]; v18 != i; v18 += 2)
    {
      if (*v18)
      {
        if ((*(uint64_t (**)(siri::dialogengine::Node *, siri::dialogengine::Context *))(*(void *)*v18 + 48))(*v18, a2))
        {
          (*(void (**)(siri::dialogengine::Node *, siri::dialogengine::Context *))(*(void *)*v18 + 40))(*v18, a2);
          if (*a3 != a3[1]) {
            goto LABEL_47;
          }
          siri::dialogengine::Node::GetIdForDebug(*v18, a2, 0, &v79);
          BOOL v20 = std::string::insert(&v79, 0, "  Child of <random> returned an empty result - skipping: ");
          long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v79.__r_.__value_.__l.__data_);
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        }
        else
        {
          siri::dialogengine::Node::GetIdForDebug(*v18, a2, 0, &v79);
          std::string v22 = std::string::insert(&v79, 0, "  Condition for child of <random> failed - skipping: ");
          long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v79.__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"  Programming error: NULL node in <random> group", v15);
      }
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_47;
  }
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__p, (siri::dialogengine::Context *)((char *)a2 + 8));
  char v16 = v90;
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p.__r_.__value_.__l.__data_);
  if ((v16 & 0x40) != 0)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"<random> group in deterministic mode; execute as if it were a <first> group",
      v17);
    goto LABEL_31;
  }
  siri::dialogengine::Node::GetGlobalId((siri::dialogengine::Node *)this, a2, &__p);
  siri::dialogengine::Context::GetRandomMatch(a2, (const void **)&__p.__r_.__value_.__l.__data_, &v79);
  if (v79.__r_.__value_.__r.__words[0] != v79.__r_.__value_.__l.__size_)
  {
    *(std::string *)a3 = v79;
    memset(&v79, 0, sizeof(v79));
    goto LABEL_159;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v76 = 0;
  BOOL v77 = 0;
  uint64_t v78 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(&v76, this[26], this[27], ((char *)this[27] - (char *)this[26]) >> 4);
  size_t v25 = this[26];
  int v24 = this[27];
  if (v25 == v24)
  {
    BOOL v28 = 0;
  }
  else
  {
    char v26 = v25 + 2;
    do
    {
      float v27 = *((float *)*(v26 - 2) + 48);
      BOOL v28 = v27 != 1.0;
      BOOL v29 = v27 != 1.0 || v26 == v24;
      v26 += 2;
    }
    while (!v29);
  }
  long long v30 = v76;
  std::string v31 = v77;
  if (v76 == (std::string *)v77) {
    goto LABEL_158;
  }
  char v67 = 0;
  char v68 = 0;
  std::string v70 = (siri::dialogengine::Context *)((char *)a2 + 936);
  BOOL v69 = v28;
  while (1)
  {
    if (!v28)
    {
      unint64_t RandomNumber = siri::dialogengine::RandomNumberGenerator::GenerateRandomNumber(v70, (((char *)v31 - (char *)v30) >> 4) - 1);
      goto LABEL_90;
    }
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    float v35 = 0.0;
    do
    {
      float v35 = *(float *)(v30->__r_.__value_.__r.__words[0] + 192) + v35;
      if (v33 >= v32)
      {
        uint64_t v36 = v33 - v34;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v32 - (char *)v34) >> 1 > v37) {
          unint64_t v37 = ((char *)v32 - (char *)v34) >> 1;
        }
        if ((unint64_t)((char *)v32 - (char *)v34) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v37;
        }
        if (v38)
        {
          if (v38 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v39 = (char *)operator new(4 * v38);
        }
        else
        {
          int v39 = 0;
        }
        std::string::size_type v40 = (float *)&v39[4 * v36];
        *std::string::size_type v40 = v35;
        char v41 = v40 + 1;
        while (v33 != v34)
        {
          int v42 = *((_DWORD *)v33-- - 1);
          *((_DWORD *)v40-- - 1) = v42;
        }
        uint64_t v32 = (float *)&v39[4 * v38];
        if (v34) {
          operator delete(v34);
        }
        unint64_t v34 = v40;
        uint64_t v33 = v41;
      }
      else
      {
        *v33++ = v35;
      }
      long long v30 = (std::string *)((char *)v30 + 16);
    }
    while (v30 != (std::string *)v31);
    unint64_t v43 = siri::dialogengine::RandomNumberGenerator::GenerateRandomNumber(v70, (unint64_t)(float)(v35 * 1000.0));
    if (v33 == v34)
    {
      unint64_t RandomNumber = (((char *)v77 - (char *)v76) >> 4) - 1;
      BOOL v28 = v69;
      if (!v34) {
        goto LABEL_90;
      }
    }
    else
    {
      unint64_t RandomNumber = 0;
      unint64_t v46 = v33 - v34;
      if (v46 <= 1) {
        unint64_t v46 = 1;
      }
      BOOL v28 = v69;
      while ((float)((float)v43 / 1000.0) >= v34[RandomNumber])
      {
        if (v46 == ++RandomNumber)
        {
          unint64_t RandomNumber = (((char *)v77 - (char *)v76) >> 4) - 1;
          break;
        }
      }
    }
    operator delete(v34);
LABEL_90:
    std::string v47 = (siri::dialogengine::Node **)((char *)v76 + 16 * RandomNumber);
    if (*v47) {
      break;
    }
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"  Programming error: NULL node in <random> group", v44);
LABEL_142:
    std::string v62 = v77;
    std::string v31 = (void **)(&v76->__r_.__value_.__l.__data_ + 2 * RandomNumber);
    std::string v63 = v31 + 2;
    if (v31 + 2 != v77)
    {
      do
      {
        std::string v31 = v63;
        long long v64 = *(_OWORD *)v63;
        *std::string v63 = 0;
        v63[1] = 0;
        std::string v65 = (std::__shared_weak_count *)*(v63 - 1);
        *((_OWORD *)v63 - 1) = v64;
        if (v65) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v65);
        }
        v63 += 2;
      }
      while (v31 + 2 != v62);
      std::string v63 = v77;
    }
    while (v63 != v31)
    {
      std::string v66 = (std::__shared_weak_count *)*(v63 - 1);
      if (v66) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v66);
      }
      v63 -= 2;
    }
    BOOL v77 = v31;
    long long v30 = v76;
    if (v76 == (std::string *)v31) {
      goto LABEL_158;
    }
  }
  if (((*(uint64_t (**)(siri::dialogengine::Node *, siri::dialogengine::Context *))(*(void *)*v47 + 48))(*v47, a2) & 1) == 0)
  {
    siri::dialogengine::Node::GetIdForDebug(*v47, a2, 0, &v73);
    std::string v48 = std::string::insert(&v73, 0, "  Condition for child of <first> failed - skipping: ");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    std::string::size_type v75 = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v74 = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)v74);
    if (SHIBYTE(v75) < 0) {
      operator delete(v74[0]);
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
    goto LABEL_142;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*v47 + 40))(v74);
  if (v74[0] == v74[1])
  {
    siri::dialogengine::Node::GetIdForDebug(*v47, a2, 0, &v72);
    std::string v50 = std::string::insert(&v72, 0, "  Child of <random> returned an empty result - skipping: ");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)&v73);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    goto LABEL_141;
  }
  if (!v28)
  {
    siri::dialogengine::Node::GetGlobalId(*v47, a2, &v73);
    if (&v95 == (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v94, (const void **)&v73.__r_.__value_.__l.__data_))
    {
      siri::dialogengine::Node::GetIdForDebug(*v47, a2, 0, &v71);
      std::string::size_type v52 = std::string::insert(&v71, 0, "  Match found for <random> group - returning: ");
      long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v72.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::Debug((siri::dialogengine *)&v72);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v72.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if (v74 != (void **)a3) {
        std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(a3, (uint64_t *)v74[0], (uint64_t *)v74[1], ((char *)v74[1] - (char *)v74[0]) >> 4);
      }
      char v54 = 0;
    }
    else if (v68)
    {
      if (v67) {
        goto LABEL_97;
      }
LABEL_121:
      char v67 = 0;
      BOOL v28 = v69;
LABEL_122:
      if (*a3 == a3[1]
        || &v92 == (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v91.__r_.__value_.__r.__words[2], (const void **)&v73.__r_.__value_.__l.__data_))
      {
        siri::dialogengine::Node::GetIdForDebug(*v47, a2, 0, &v71);
        long long v58 = std::string::insert(&v71, 0, "  Upating best match so far for <random> group: ");
        long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v72.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::Debug((siri::dialogengine *)&v72);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v72.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        if (v74 != (void **)a3) {
          std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(a3, (uint64_t *)v74[0], (uint64_t *)v74[1], ((char *)v74[1] - (char *)v74[0]) >> 4);
        }
      }
      char v68 = 1;
      char v54 = 1;
    }
    else
    {
      std::string::size_type v55 = this[26];
      char v56 = this[27];
      while (v55 != v56)
      {
        siri::dialogengine::Node::GetGlobalId(*v55, a2, &v72);
        uint64_t v57 = (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v94, (const void **)&v72.__r_.__value_.__l.__data_);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v72.__r_.__value_.__l.__data_);
        }
        if (&v95 == v57) {
          goto LABEL_121;
        }
        v55 += 2;
      }
LABEL_97:
      BOOL v28 = v69;
      if (&v92 != (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v91.__r_.__value_.__r.__words[2], (const void **)&v73.__r_.__value_.__l.__data_))
      {
        char v67 = 1;
        goto LABEL_122;
      }
      siri::dialogengine::Node::GetIdForDebug(*v47, a2, 0, &v71);
      long long v60 = std::string::insert(&v71, 0, "  Unused matches are available. Using the non-repeated match: ");
      long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v72.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::Debug((siri::dialogengine *)&v72);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v72.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if (v74 != (void **)a3) {
        std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(a3, (uint64_t *)v74[0], (uint64_t *)v74[1], ((char *)v74[1] - (char *)v74[0]) >> 4);
      }
      char v54 = 0;
      char v67 = 1;
      char v68 = 1;
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
    if ((v54 & 1) == 0)
    {
      v73.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
      goto LABEL_157;
    }
LABEL_141:
    v73.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
    goto LABEL_142;
  }
  if (v74 != (void **)a3) {
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(a3, (uint64_t *)v74[0], (uint64_t *)v74[1], ((char *)v74[1] - (char *)v74[0]) >> 4);
  }
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
LABEL_157:
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
LABEL_158:
  siri::dialogengine::Context::AddRandomMatch((uint64_t)a2, (uint64_t)&__p, (uint64_t **)a3);
  v74[0] = &v76;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v74);
LABEL_159:
  long long v76 = &v79;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_47:
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(v98);
  std::__tree<std::string>::destroy((uint64_t)&v94, v95);
  std::__tree<std::string>::destroy((uint64_t)&v91.__r_.__value_.__r.__words[2], v92);
}

void sub_1C610D26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void ****a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void ***a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void **a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  a29 = &a36;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a36 = &a43;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&a43);
  a43 = &a46;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&a43);
  if (a57 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)(v57 - 208));
  _Unwind_Resume(a1);
}

void siri::dialogengine::GroupRandom::~GroupRandom(siri::dialogengine::GroupRandom *this)
{
  siri::dialogengine::Group::~Group(this);
  JUMPOUT(0x1C8796D70);
}

uint64_t non-virtual thunk to'siri::dialogengine::Group::Validate(uint64_t **this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::Group::Validate(this - 8, a2);
}

uint64_t siri::dialogengine::Group::Validate(uint64_t **this, siri::dialogengine::Context *a2)
{
  uint64_t v4 = siri::dialogengine::Node::Validate((siri::dialogengine::Node *)this, a2);
  unint64_t v6 = this[26];
  int v5 = this[27];
  while (v6 != v5)
  {
    uint64_t v7 = *v6;
    v6 += 2;
    uint64_t v4 = (*(unsigned int (**)(uint64_t, siri::dialogengine::Context *))(*(void *)v7 + 32))(v7, a2) & v4;
  }
  return v4;
}

void non-virtual thunk to'siri::dialogengine::Group::~Group(siri::dialogengine::Group *this)
{
  siri::dialogengine::Group::~Group((siri::dialogengine::Group *)((char *)this - 64));
  JUMPOUT(0x1C8796D70);
}

{
  siri::dialogengine::Group::~Group((siri::dialogengine::Group *)((char *)this - 64));
}

uint64_t siri::dialogengine::Group::Accept(siri::dialogengine::Group *this, siri::dialogengine::ConstNodeVisitor *a2)
{
  return (*(uint64_t (**)(siri::dialogengine::ConstNodeVisitor *, siri::dialogengine::Group *))(*(void *)a2 + 24))(a2, this);
}

uint64_t siri::dialogengine::Group::Accept(siri::dialogengine::Group *this, siri::dialogengine::NodeVisitor *a2)
{
  return (*(uint64_t (**)(siri::dialogengine::NodeVisitor *, siri::dialogengine::Group *))(*(void *)a2 + 24))(a2, this);
}

void *siri::dialogengine::Group::GetNodes@<X0>(siri::dialogengine::Group *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(a2, *((void **)this + 26), *((void **)this + 27), (uint64_t)(*((void *)this + 27) - *((void *)this + 26)) >> 4);
}

void siri::dialogengine::Group::SetNodes(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4 = a1 + 26;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__clear[abi:ne180100](a1 + 26);
  unint64_t v6 = *a2;
  int v5 = (long long *)a2[1];
  if (v6 != (uint64_t *)v5)
  {
    uint64_t v7 = a1 + 28;
    int v8 = (uint64_t *)a1[27];
    do
    {
      if ((unint64_t)v8 >= *v7)
      {
        uint64_t v10 = ((uint64_t)v8 - *v4) >> 4;
        if ((unint64_t)(v10 + 1) >> 60) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = *v7 - *v4;
        uint64_t v12 = v11 >> 3;
        if (v11 >> 3 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        v19[4] = a1 + 28;
        uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v13);
        unsigned __int8 v15 = &v14[16 * v10];
        v19[0] = v14;
        v19[1] = v15;
        void v19[3] = &v14[16 * v16];
        long long v17 = *(_OWORD *)v6;
        *(_OWORD *)unsigned __int8 v15 = *(_OWORD *)v6;
        if (*((void *)&v17 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::string v19[2] = v15 + 16;
        std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__swap_out_circular_buffer(v4, v19);
        int v8 = (uint64_t *)a1[27];
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)v19);
      }
      else
      {
        *int v8 = *v6;
        uint64_t v9 = v6[1];
        v8[1] = v9;
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        v8 += 2;
      }
      a1[27] = (uint64_t)v8;
      uint64_t v18 = *v6;
      v6 += 2;
      *(void *)(v18 + 200) = a1;
    }
    while (v6 != (uint64_t *)v5);
  }
}

void *siri::dialogengine::Group::AddNode(void *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result + 28;
  unint64_t v5 = result[28];
  unint64_t v6 = (void *)result[27];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = result + 26;
    uint64_t v10 = result[26];
    uint64_t v11 = ((uint64_t)v6 - v10) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v5 - v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = v4;
    unsigned __int8 v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v14);
    uint64_t v16 = &v15[16 * v11];
    v19[0] = v15;
    v19[1] = v16;
    void v19[3] = &v15[16 * v17];
    long long v18 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v16 = *(_OWORD *)a2;
    if (*((void *)&v18 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::string v19[2] = v16 + 16;
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__swap_out_circular_buffer(v9, v19);
    int v8 = (void *)v3[27];
    uint64_t result = (void *)std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    void *v6 = *a2;
    uint64_t v7 = a2[1];
    v6[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    int v8 = v6 + 2;
  }
  v3[27] = v8;
  *(void *)(*a2 + 200) = v3;
  return result;
}

void siri::dialogengine::Group::GetPhraseName(siri::dialogengine::Group *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 255) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 29), *((void *)this + 30));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 232);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 31);
  }
}

std::string *siri::dialogengine::Group::SetPhraseName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 232), a2);
}

void siri::dialogengine::Group::Expand(uint64_t a1, siri::dialogengine::Context *a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v10 = (std::__shared_weak_count *)a3[1];
  v13[0] = *a3;
  v13[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v12, 0, sizeof(v12));
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(v12, *(void **)(a1 + 208), *(void **)(a1 + 216), (uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 4);
  siri::dialogengine::ExpandNodes(a2, v13, v12, a4, a5, a6, v11);
  unint64_t v14 = v12;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C610D99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::Group::ExpandAsDAG(uint64_t a1, siri::dialogengine::Context *a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  v22[0] = 0;
  v22[1] = 0;
  long long v21 = v22;
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v19 = v20;
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  int v16 = 0;
  long long v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(&v23, *(void **)(a1 + 208), *(void **)(a1 + 216), (uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 4);
  uint64_t v14 = 0;
  unsigned __int8 v15 = 0;
  siri::dialogengine::CreateDAG(a2, (uint64_t)&v21, &v23, (uint64_t)v18, v17, a3, a4, &v14, &v16, 1u, a5);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v10 = &v23;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  long long v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(&v23, *(void **)(a1 + 208), *(void **)(a1 + 216), (uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 4);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  siri::dialogengine::CreateDAG(a2, (uint64_t)&v19, &v23, (uint64_t)v18, v17, a3, a4, &v12, &v16, 0, a5);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v10 = &v23;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = (void ***)v11;
  siri::dialogengine::CreateJSONObjectFromAdjacencyList(v17);
}

void sub_1C610DD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  for (uint64_t i = 40; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(v31 + i);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a17);
  *(void *)(v32 - 152) = &a24;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 152));
  *(void *)(v32 - 152) = &a27;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 152));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a31);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(void **)(v32 - 168));
  _Unwind_Resume(a1);
}

void sub_1C610DDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  a16 = (void **)(v20 - 152);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&a16);
  JUMPOUT(0x1C610DDB4);
}

void std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      unint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      unint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

BOOL siri::dialogengine::Group::operator==(uint64_t a1, uint64_t a2)
{
  BOOL result = siri::dialogengine::Node::operator==(a1, a2);
  if (result)
  {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 255);
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = *(unsigned __int8 *)(a1 + 255);
    }
    else {
      uint64_t v6 = *(void *)(a1 + 240);
    }
    uint64_t v7 = *(unsigned __int8 *)(a2 + 255);
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a2 + 240);
    }
    if (v6 != v7) {
      return 0;
    }
    uint64_t v9 = (const void **)(a1 + 232);
    if (v8 >= 0) {
      uint64_t v10 = (unsigned __int8 *)(a2 + 232);
    }
    else {
      uint64_t v10 = *(unsigned __int8 **)(a2 + 232);
    }
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*v9, v10, *(void *)(a1 + 240))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a1 + 255))
    {
      while (*(unsigned __int8 *)v9 == *v10)
      {
        uint64_t v9 = (const void **)((char *)v9 + 1);
        ++v10;
        if (!--v5) {
          goto LABEL_17;
        }
      }
      return 0;
    }
LABEL_17:
    uint64_t v11 = *(void *)(a1 + 208);
    uint64_t v12 = *(void *)(a1 + 216);
    if (v12 - v11 == *(void *)(a2 + 216) - *(void *)(a2 + 208))
    {
      if (v12 == v11) {
        return 1;
      }
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      while (1)
      {
        unsigned __int8 v15 = *(const void **)(v11 + v13);
        int v16 = *(const void **)(*(void *)(a2 + 208) + v13);
        if (v15)
        {
          if (v16) {
            goto LABEL_22;
          }
        }
        else
        {
          unint64_t v17 = 0;
          if (v16)
          {
LABEL_22:
            goto LABEL_25;
          }
        }
        unint64_t v18 = 0;
LABEL_25:
        if (v17 | v18)
        {
          BOOL result = 0;
          if (!v17 || !v18) {
            return result;
          }
          if ((siri::dialogengine::Group::operator==(v17) & 1) == 0) {
            return 0;
          }
          goto LABEL_53;
        }
        if (v15)
        {
          if (v16) {
            goto LABEL_32;
          }
        }
        else
        {
          uint64_t v19 = 0;
          if (v16)
          {
LABEL_32:
            goto LABEL_35;
          }
        }
        uint64_t v20 = 0;
LABEL_35:
        if (v19 | v20)
        {
          BOOL result = 0;
          if (!v19 || !v20) {
            return result;
          }
          if (!siri::dialogengine::Dialog::operator==(v19, v20)) {
            return 0;
          }
          goto LABEL_53;
        }
        if (v15)
        {
          if (v16) {
            goto LABEL_42;
          }
        }
        else
        {
          uint64_t v21 = 0;
          if (v16)
          {
LABEL_42:
            goto LABEL_45;
          }
        }
        uint64_t v22 = 0;
LABEL_45:
        if (v21 | v22)
        {
          BOOL result = 0;
          if (!v21 || !v22) {
            return result;
          }
          if (siri::dialogengine::Text::operator!=(v21, v22)) {
            return 0;
          }
        }
        else if (v15 {
               && v16
        }
               && ((*(uint64_t (**)(const void *, const void *))(*(void *)v15 + 64))(v15, v16) & 1) != 0)
        {
          return 0;
        }
LABEL_53:
        ++v14;
        uint64_t v11 = *(void *)(a1 + 208);
        v13 += 16;
        BOOL result = 1;
        if (v14 >= (*(void *)(a1 + 216) - v11) >> 4) {
          return result;
        }
      }
    }
    return 0;
  }
  return result;
}

BOOL siri::dialogengine::Group::operator!=(uint64_t a1, uint64_t a2)
{
  return !siri::dialogengine::Group::operator==(a1, a2);
}

void InitDefaultsscc_info_TextInput_TextInput_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextInput.pb.cc", a4);
  SnippetUI::TextInput::TextInput((SnippetUI::TextInput *)&SnippetUI::_TextInput_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_TextInput_default_instance_, v4);
  qword_1EB68F4A0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::TextInput *SnippetUI::TextInput::TextInput(SnippetUI::TextInput *this)
{
  *(void *)this = &unk_1F2126CE0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 18) = 0;
  if (atomic_load_explicit(scc_info_TextInput_TextInput_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_TextInput_TextInput_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = 0;
  *(void *)((char *)this + 61) = 0;
  return this;
}

void sub_1C610E398(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::TextInput::GetMetadata(SnippetUI::TextInput *this)
{
  return file_level_metadata_TextInput_2eproto;
}

uint64_t SnippetUI::TextInput::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

void SnippetUI::TextInput::MergeFrom(SnippetUI::TextInput *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextInput.pb.cc", 472);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::TextInput::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C610E4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::TextInput::MergeFrom(SnippetUI::TextInput *this, const SnippetUI::TextInput *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextInput.pb.cc", 487);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextInput *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  uint64_t v10 = *((void *)a2 + 4);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(void *)(v10 + 8)) {
      goto LABEL_29;
    }
  }
  else if (!*(unsigned char *)(v10 + 23))
  {
    goto LABEL_29;
  }
  uint64_t v11 = (uint64_t *)*((void *)this + 4);
  if (v11 != (uint64_t *)v10)
  {
    if (v11 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 32, v10);
    }
    std::string::operator=(*((std::string **)this + 4), (const std::string *)v10);
  }
LABEL_29:
  uint64_t v12 = *((void *)a2 + 5);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(void *)(v12 + 8)) {
      goto LABEL_37;
    }
  }
  else if (!*(unsigned char *)(v12 + 23))
  {
    goto LABEL_37;
  }
  uint64_t v13 = (uint64_t *)*((void *)this + 5);
  if (v13 != (uint64_t *)v12)
  {
    if (v13 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, v12);
    }
    std::string::operator=(*((std::string **)this + 5), (const std::string *)v12);
  }
LABEL_37:
  uint64_t v14 = *((void *)a2 + 6);
  if (*(char *)(v14 + 23) < 0)
  {
    if (!*(void *)(v14 + 8)) {
      goto LABEL_45;
    }
  }
  else if (!*(unsigned char *)(v14 + 23))
  {
    goto LABEL_45;
  }
  unsigned __int8 v15 = (uint64_t *)*((void *)this + 6);
  if (v15 != (uint64_t *)v14)
  {
    if (v15 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, v14);
    }
    std::string::operator=(*((std::string **)this + 6), (const std::string *)v14);
  }
LABEL_45:
  if (a2 != (const SnippetUI::TextInput *)&SnippetUI::_TextInput_default_instance_)
  {
    int v16 = (int **)*((void *)a2 + 7);
    if (v16)
    {
      unint64_t v17 = (int **)*((void *)this + 7);
      if (!v17)
      {
        unint64_t v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 7) = v17;
        int v16 = (int **)*((void *)a2 + 7);
      }
      if (v16) {
        unint64_t v18 = v16;
      }
      else {
        unint64_t v18 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v17, v18);
    }
  }
  int v19 = *((_DWORD *)a2 + 16);
  if (v19) {
    *((_DWORD *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v19;
  }
  if (*((unsigned char *)a2 + 68)) {
    *((unsigned char *)this + 68) = 1;
  }
}

void sub_1C610E73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::TextInput::CopyFrom(SnippetUI::TextInput *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::TextInput::Clear(this);
    SnippetUI::TextInput::MergeFrom(this, a2);
  }
}

void SnippetUI::TextInput::Clear(SnippetUI::TextInput *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
  uint64_t v5 = *((void *)this + 5);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
  uint64_t v6 = *((void *)this + 6);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
  uint64_t v8 = (void *)((char *)this + 56);
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  char v10 = *((unsigned char *)this + 8);
  uint64_t v9 = (SnippetUI::TextInput *)((char *)this + 8);
  *(void *)((char *)v8 + 5) = 0;
  *uint64_t v8 = 0;
  if (v10)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v9);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::TextInput::InternalSerializeWithCachedSizesToArray(SnippetUI::TextInput *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v7 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    uint64_t v8 = (const char *)*((void *)v7 + 1);
    if (!v8) {
      goto LABEL_7;
    }
    uint64_t v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  uint64_t v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((unsigned char *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.TextInput.identifier");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 2), a2);
  }
LABEL_7:
  uint64_t v9 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v9 + 23) < 0)
  {
    char v10 = (const char *)*((void *)v9 + 1);
    if (!v10) {
      goto LABEL_13;
    }
    uint64_t v9 = *(google::protobuf::internal **)v9;
    goto LABEL_12;
  }
  char v10 = (const char *)*((unsigned __int8 *)v9 + 23);
  if (*((unsigned char *)v9 + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v9, v10, 1, (google::protobuf::internal *)"SnippetUI.TextInput.initial_value");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 3), a2);
  }
LABEL_13:
  uint64_t v11 = (google::protobuf::internal *)*((void *)this + 4);
  if (*((char *)v11 + 23) < 0)
  {
    uint64_t v12 = (const char *)*((void *)v11 + 1);
    if (!v12) {
      goto LABEL_19;
    }
    uint64_t v11 = *(google::protobuf::internal **)v11;
    goto LABEL_18;
  }
  uint64_t v12 = (const char *)*((unsigned __int8 *)v11 + 23);
  if (*((unsigned char *)v11 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (google::protobuf::internal *)"SnippetUI.TextInput.placeholder_text");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 4), a2);
  }
LABEL_19:
  unsigned int v13 = *((_DWORD *)this + 16);
  if (v13)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned int v13 = *((_DWORD *)this + 16);
    }
    *a2 = 32;
    if (v13 > 0x7F)
    {
      a2[1] = v13 | 0x80;
      unint64_t v14 = (unint64_t)(int)v13 >> 7;
      if (v13 >> 14)
      {
        unsigned __int8 v15 = (unsigned __int8 *)(a2 + 2);
        do
        {
          int v16 = v15;
          *v15++ = v14 | 0x80;
          unint64_t v17 = v14 >> 7;
          unint64_t v18 = v14 >> 14;
          v14 >>= 7;
        }
        while (v18);
        a2 = (char *)(v16 + 2);
        *unsigned __int8 v15 = v17;
      }
      else
      {
        a2[2] = v14;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v13;
      a2 += 2;
    }
  }
  uint64_t v19 = *((void *)this + 5);
  if (*(char *)(v19 + 23) < 0)
  {
    if (!*(void *)(v19 + 8)) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (*(unsigned char *)(v19 + 23)) {
LABEL_31:
  }
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, (const void **)v19, a2);
LABEL_32:
  if (this != (SnippetUI::TextInput *)&SnippetUI::_TextInput_default_instance_)
  {
    char v20 = (SnippetUI::TextProperty *)*((void *)this + 7);
    if (v20)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        char v20 = (SnippetUI::TextProperty *)*((void *)this + 7);
      }
      *a2 = 50;
      unsigned int v21 = *((_DWORD *)v20 + 15);
      if (v21 > 0x7F)
      {
        a2[1] = v21 | 0x80;
        unsigned int v23 = v21 >> 7;
        if (v21 >> 14)
        {
          uint64_t v24 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v25 = v24;
            *v24++ = v23 | 0x80;
            unsigned int v26 = v23 >> 7;
            unsigned int v27 = v23 >> 14;
            v23 >>= 7;
          }
          while (v27);
          uint64_t v22 = v25 + 2;
          unsigned __int8 *v24 = v26;
        }
        else
        {
          a2[2] = v23;
          uint64_t v22 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v21;
        uint64_t v22 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v20, (google::protobuf::UnknownFieldSet *)v22, a3, a4);
    }
  }
  BOOL v28 = (google::protobuf::internal *)*((void *)this + 6);
  if (*((char *)v28 + 23) < 0)
  {
    BOOL v29 = (const char *)*((void *)v28 + 1);
    if (!v29) {
      goto LABEL_52;
    }
    BOOL v28 = *(google::protobuf::internal **)v28;
    goto LABEL_51;
  }
  BOOL v29 = (const char *)*((unsigned __int8 *)v28 + 23);
  if (*((unsigned char *)v28 + 23))
  {
LABEL_51:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v28, v29, 1, (google::protobuf::internal *)"SnippetUI.TextInput.component_name");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((const void ***)this + 6), a2);
  }
LABEL_52:
  if (*((unsigned char *)this + 68))
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned __int8 v30 = *((unsigned char *)this + 68);
    }
    else
    {
      unsigned __int8 v30 = 1;
    }
    *a2 = 64;
    a2[1] = v30;
    a2 += 2;
  }
  uint64_t v31 = *((void *)this + 1);
  if ((v31 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v31 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::TextInput::_InternalParse(SnippetUI::TextInput *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned __int8 v30 = a2;
  uint64_t v5 = (std::string **)((char *)this + 48);
  uint64_t v6 = (std::string **)((char *)this + 40);
  uint64_t v7 = (std::string **)((char *)this + 32);
  uint64_t v8 = (std::string **)((char *)this + 24);
  uint64_t v9 = (std::string **)((char *)this + 16);
  char v10 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23))) {
      return v30;
    }
    TagFallbacint k = (google::protobuf::internal *)((char *)v30 + 1);
    unsigned int v13 = (char *)*(unsigned __int8 *)v30;
    if ((*(char *)v30 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v13 = (char *)(v13 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v30 + 2);
LABEL_6:
      unsigned __int8 v30 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, v13);
    unsigned __int8 v30 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v13 >> 3)
    {
      case 1u:
        if (v13 != 10) {
          goto LABEL_48;
        }
        unint64_t v14 = *v9;
        if (*v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned __int8 v15 = (std::string::value_type *)TagFallback;
        int v16 = a3;
        unint64_t v17 = "SnippetUI.TextInput.identifier";
        goto LABEL_40;
      case 2u:
        if (v13 != 18) {
          goto LABEL_48;
        }
        unint64_t v14 = *v8;
        if (*v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned __int8 v15 = (std::string::value_type *)TagFallback;
        int v16 = a3;
        unint64_t v17 = "SnippetUI.TextInput.initial_value";
        goto LABEL_40;
      case 3u:
        if (v13 != 26) {
          goto LABEL_48;
        }
        unint64_t v14 = *v7;
        if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned __int8 v15 = (std::string::value_type *)TagFallback;
        int v16 = a3;
        unint64_t v17 = "SnippetUI.TextInput.placeholder_text";
        goto LABEL_40;
      case 4u:
        if (v13 != 32) {
          goto LABEL_48;
        }
        unint64_t v18 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v19) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_26;
        }
        int v20 = *(char *)v18;
        unint64_t v19 = v19 + (v20 << 7) - 128;
        if (v20 < 0)
        {
          unsigned __int8 v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v19);
          if (!v30) {
            goto LABEL_56;
          }
        }
        else
        {
          unint64_t v18 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_26:
          unsigned __int8 v30 = v18;
        }
        *((_DWORD *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v19;
        continue;
      case 5u:
        if (v13 != 42) {
          goto LABEL_48;
        }
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v21 = google::protobuf::internal::InlineGreedyStringParser(*v6, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_41;
      case 6u:
        if (v13 != 50) {
          goto LABEL_48;
        }
        uint64_t v22 = (SnippetUI::TextProperty *)*((void *)this + 7);
        if (!v22)
        {
          uint64_t v22 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((void *)this + 7) = v22;
          TagFallbacint k = v30;
        }
        unsigned int v21 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v22, TagFallback);
        goto LABEL_41;
      case 7u:
        if (v13 != 58) {
          goto LABEL_48;
        }
        unint64_t v14 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned __int8 v15 = (std::string::value_type *)TagFallback;
        int v16 = a3;
        unint64_t v17 = "SnippetUI.TextInput.component_name";
LABEL_40:
        unsigned int v21 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, v15, (uint64_t)v16, (google::protobuf::internal *)v17);
        goto LABEL_41;
      case 8u:
        if (v13 != 64) {
          goto LABEL_48;
        }
        unsigned int v23 = (google::protobuf::internal *)((char *)TagFallback + 1);
        unint64_t v24 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_47;
        }
        int v25 = *(char *)v23;
        unint64_t v24 = v24 + (v25 << 7) - 128;
        if (v25 < 0)
        {
          unsigned int v27 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v24);
          unsigned __int8 v30 = v27;
          *((unsigned char *)this + 68) = v28 != 0;
          if (!v27) {
            goto LABEL_56;
          }
        }
        else
        {
          unsigned int v23 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_47:
          unsigned __int8 v30 = v23;
          *((unsigned char *)this + 68) = v24 != 0;
        }
        continue;
      default:
LABEL_48:
        if (v13) {
          BOOL v26 = (v13 & 7) == 4;
        }
        else {
          BOOL v26 = 1;
        }
        if (v26)
        {
          *((_DWORD *)a3 + 20) = v13 - 1;
          return TagFallback;
        }
        unsigned int v21 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v13, v10, TagFallback, a3, v11);
LABEL_41:
        unsigned __int8 v30 = (google::protobuf::internal *)v21;
        if (v21) {
          continue;
        }
LABEL_56:
        TagFallbacint k = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::TextInput::GetCachedSize(SnippetUI::TextInput *this)
{
  return *((unsigned int *)this + 18);
}

char *SnippetUI::TextInput::ByteSizeLong(SnippetUI::TextInput *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  uint64_t v9 = *((void *)this + 4);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(void *)(v9 + 8)) {
      goto LABEL_18;
    }
  }
  else if (!*(unsigned char *)(v9 + 23))
  {
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)(v9 + 8);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v10;
  }
  v5 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_18:
  uint64_t v12 = *((void *)this + 5);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(void *)(v12 + 8)) {
      goto LABEL_23;
    }
  }
  else if (!*(unsigned char *)(v12 + 23))
  {
    goto LABEL_23;
  }
  uint64_t v14 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = v13;
  }
  v5 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_23:
  uint64_t v15 = *((void *)this + 6);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(void *)(v15 + 8)) {
      goto LABEL_28;
    }
  }
  else if (!*(unsigned char *)(v15 + 23))
  {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v15 + 8);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = v16;
  }
  v5 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_28:
  if (this != (SnippetUI::TextInput *)&SnippetUI::_TextInput_default_instance_)
  {
    unint64_t v18 = (SnippetUI::TextProperty *)*((void *)this + 7);
    if (v18)
    {
      unint64_t v19 = SnippetUI::TextProperty::ByteSizeLong(v18);
      v5 += (uint64_t)&v19[((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  int v20 = *((_DWORD *)this + 16);
  if (v20)
  {
    if (v20 < 0) {
      uint64_t v21 = 11;
    }
    else {
      uint64_t v21 = ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v5 += v21;
  }
  if (*((unsigned char *)this + 68)) {
    uint64_t v22 = (const google::protobuf::UnknownFieldSet *)(v5 + 2);
  }
  else {
    uint64_t v22 = (const google::protobuf::UnknownFieldSet *)v5;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::TextInput *)((char *)this + 8), v22, (_DWORD *)this + 18);
  }
  else
  {
    *((_DWORD *)this + 18) = v22;
    return (char *)v22;
  }
}

uint64_t SnippetUI::TextInput::IsInitialized(SnippetUI::TextInput *this)
{
  return 1;
}

SnippetUI::TextInput *SnippetUI::TextInput::New(SnippetUI::TextInput *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextInput>(a2);
}

SnippetUI::TextInput *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextInput>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::TextInput *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::TextInput>);
  }
  SnippetUI::TextInput::TextInput(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C610F320(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40ECD807AALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::TextInput>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::TextInput *SnippetUI::TextInput::New(SnippetUI::TextInput *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextInput>(0);
}

void SnippetUI::TextInput::~TextInput(SnippetUI::TextInput *this)
{
  SnippetUI::TextInput::~TextInput(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  *(void *)this = &unk_1F2126CE0;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  uint64_t v6 = *((void *)this + 4);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    MEMORY[0x1C8796D70](v6, 0x1012C40EC159624);
  }
  uint64_t v8 = *((void *)this + 5);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    MEMORY[0x1C8796D70](v8, 0x1012C40EC159624);
  }
  uint64_t v10 = *((void *)this + 6);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    MEMORY[0x1C8796D70](v10, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::TextInput *)&SnippetUI::_TextInput_default_instance_)
  {
    uint64_t v11 = *((void *)this + 7);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::TextInput_ValidationMode_descriptor(SnippetUI *this)
{
  return file_level_enum_descriptors_TextInput_2eproto;
}

BOOL SnippetUI::TextInput_ValidationMode_IsValid(SnippetUI *this)
{
  return this < 2;
}

void SnippetUI::TextInput::InitAsDefaultInstance(SnippetUI::TextInput *this)
{
  qword_1EB68F4A0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::TextInput::_Internal::label_text(SnippetUI::TextInput::_Internal *this, const SnippetUI::TextInput *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::TextInput::clear_label_text(SnippetUI::TextInput *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

SnippetUI::TextInput *SnippetUI::TextInput::TextInput(SnippetUI::TextInput *this, const SnippetUI::TextInput *a2)
{
  *(void *)this = &unk_1F2126CE0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 18) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextInput *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  *((void *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v10 = *((void *)a2 + 4);
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  }
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v11) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 32, v10);
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v12 = *((void *)a2 + 5);
  if (*(char *)(v12 + 23) < 0) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  }
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v13) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, v12);
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v14 = *((void *)a2 + 6);
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v15 = *(void *)(v14 + 8);
  }
  else {
    uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  }
  if ((uint64_t *)v14 != &google::protobuf::internal::fixed_address_empty_string && v15) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, v14);
  }
  if (a2 != (const SnippetUI::TextInput *)&SnippetUI::_TextInput_default_instance_ && *((void *)a2 + 7)) {
    operator new();
  }
  *((void *)this + 7) = 0;
  int v16 = *((_DWORD *)a2 + 16);
  *((unsigned char *)this + 68) = *((unsigned char *)a2 + 68);
  *((_DWORD *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v16;
  return this;
}

void sub_1C610F7B4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::TextInput::default_instance(SnippetUI::TextInput *this)
{
  if (atomic_load_explicit(scc_info_TextInput_TextInput_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_TextInput_TextInput_2eproto);
  }
  return &SnippetUI::_TextInput_default_instance_;
}

void SnippetUI::TextInput::CopyFrom(SnippetUI::TextInput *this, const SnippetUI::TextInput *a2)
{
  if (a2 != this)
  {
    SnippetUI::TextInput::Clear(this);
    SnippetUI::TextInput::MergeFrom(this, a2);
  }
}

void SnippetUI::TextInput::InternalSwap(SnippetUI::TextInput *this, SnippetUI::TextInput *a2)
{
  uint64_t v4 = (SnippetUI::TextInput *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v38;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  std::string::size_type v9[2] = v10;
LABEL_13:
  uint64_t v13 = (uint64_t *)*((void *)this + 3);
  uint64_t v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v13 = (uint64_t *)*((void *)this + 3);
  }
  uint64_t v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
  void v13[2] = v18;
  *(_OWORD *)uint64_t v15 = v17;
  std::string v15[2] = v16;
LABEL_19:
  unint64_t v19 = (uint64_t *)*((void *)this + 4);
  int v20 = (uint64_t **)((char *)a2 + 32);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_25;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    unint64_t v19 = (uint64_t *)*((void *)this + 4);
  }
  uint64_t v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v21 = *v20;
  }
  uint64_t v22 = v19[2];
  long long v23 = *(_OWORD *)v19;
  uint64_t v24 = v21[2];
  *(_OWORD *)unint64_t v19 = *(_OWORD *)v21;
  std::string v19[2] = v24;
  *(_OWORD *)uint64_t v21 = v23;
  std::string v21[2] = v22;
LABEL_25:
  int v25 = (uint64_t *)*((void *)this + 5);
  BOOL v26 = (uint64_t **)((char *)a2 + 40);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_31;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v25 = (uint64_t *)*((void *)this + 5);
  }
  unsigned int v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    unsigned int v27 = *v26;
  }
  uint64_t v28 = v25[2];
  long long v29 = *(_OWORD *)v25;
  uint64_t v30 = v27[2];
  *(_OWORD *)int v25 = *(_OWORD *)v27;
  std::string v25[2] = v30;
  *(_OWORD *)unsigned int v27 = v29;
  _OWORD v27[2] = v28;
LABEL_31:
  uint64_t v31 = (uint64_t *)*((void *)this + 6);
  uint64_t v32 = (uint64_t **)((char *)a2 + 48);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_37;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v31 = (uint64_t *)*((void *)this + 6);
  }
  uint64_t v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v33 = *v32;
  }
  uint64_t v34 = v31[2];
  long long v35 = *(_OWORD *)v31;
  uint64_t v36 = v33[2];
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)uint64_t v33 = v35;
  std::string v33[2] = v34;
LABEL_37:
  uint64_t v37 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v37;
  LODWORD(v37) = *((_DWORD *)this + 16);
  *((_DWORD *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v37;
  LOBYTE(v37) = *((unsigned char *)this + 68);
  *((unsigned char *)this + 68) = *((unsigned char *)a2 + 68);
  *((unsigned char *)a2 + 68) = v37;
}

uint64_t siri::dialogengine::XmlCharDeleter::operator()(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))*MEMORY[0x1E4FBA9D0])(a2);
}

void *siri::dialogengine::XmlCharToString@<X0>(siri::dialogengine *this@<X0>, void *a2@<X8>)
{
  if (this) {
    uint64_t v3 = (char *)this;
  }
  else {
    uint64_t v3 = "";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void *siri::dialogengine::EncodeXmlString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v3 = (const xmlChar *)a1;
  }
  else {
    uint64_t v3 = *(const xmlChar **)a1;
  }
  uint64_t v4 = (char *)xmlEncodeSpecialChars(&v7, v3);
  if (!v4) {
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  uint64_t v5 = v4;
  std::string::basic_string[abi:ne180100]<0>(a2, v4);
  return (void *)((uint64_t (*)(char *))*MEMORY[0x1E4FBA9D0])(v5);
}

void sub_1C610FC34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::ReadNextNode@<X0>(siri::dialogengine *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  uint64_t v5 = a2 + 8;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)a2 = xmlTextReaderRead(this);
  uint64_t v6 = xmlTextReaderConstName(this);
  if (v6) {
    xmlDoc v7 = (char *)v6;
  }
  else {
    xmlDoc v7 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v7);
  siri::dialogengine::StringToLower((uint64_t)__p, (uint64_t)&v11);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)uint64_t v5 = v11;
  *(void *)(v5 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v12;
  int v8 = xmlTextReaderNodeType(this);
  *(_DWORD *)(a2 + 32) = v8;
  uint64_t result = (uint64_t)xmlTextReaderCurrentNode(this);
  if (result) {
    uint64_t result = xmlGetLineNo((const xmlNode *)result);
  }
  *(void *)(a2 + 40) = result;
  *(unsigned char *)(a2 + 48) = v8 == 1;
  if (v8 == 15)
  {
    BOOL v10 = 1;
  }
  else
  {
    uint64_t result = xmlTextReaderIsEmptyElement(this);
    BOOL v10 = result != 0;
  }
  *(unsigned char *)(a2 + 49) = v10;
  return result;
}

void sub_1C610FD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v17 + 31) < 0) {
    operator delete(*v18);
  }
  _Unwind_Resume(exception_object);
}

void *siri::dialogengine::GetXmlAttr@<X0>(xmlTextReader *a1@<X0>, const xmlChar *a2@<X1>, void *a3@<X8>)
{
  if ((char)a2[23] < 0) {
    a2 = *(const xmlChar **)a2;
  }
  Attribute = xmlTextReaderGetAttribute(a1, a2);
  uint64_t v5 = Attribute;
  if (Attribute) {
    uint64_t v6 = (char *)Attribute;
  }
  else {
    uint64_t v6 = "";
  }
  uint64_t result = std::string::basic_string[abi:ne180100]<0>(a3, v6);
  if (v5) {
    return (void *)((uint64_t (*)(xmlChar *))*MEMORY[0x1E4FBA9D0])(v5);
  }
  return result;
}

void sub_1C610FDDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    ((void (*)(uint64_t))*MEMORY[0x1E4FBA9D0])(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetXmlAttrs@<X0>(siri::dialogengine *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)a2 = a2 + 8;
  if (xmlTextReaderMoveToFirstAttribute(this) == 1)
  {
    do
    {
      uint64_t v5 = xmlTextReaderConstName(this);
      if (v5) {
        uint64_t v6 = (char *)v5;
      }
      else {
        uint64_t v6 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(v15, v6);
      xmlDoc v7 = xmlTextReaderConstValue(this);
      if (v7) {
        int v8 = (char *)v7;
      }
      else {
        int v8 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, v8);
      siri::dialogengine::StringToLower((uint64_t)v15, (uint64_t)__p);
      uint64_t v17 = __p;
      uint64_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (_OWORD **)&v17);
      std::string::operator=((std::string *)((char *)v9 + 56), &__str);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      int Attribute = xmlTextReaderMoveToNextAttribute(this);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    while (Attribute == 1);
  }
  return xmlTextReaderMoveToElement(this);
}

void sub_1C610FF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v26);
  _Unwind_Resume(a1);
}

void *siri::dialogengine::GetOuterXml@<X0>(siri::dialogengine *this@<X0>, void *a2@<X8>)
{
  OuterXml = xmlTextReaderReadOuterXml(this);
  uint64_t v5 = OuterXml;
  if (OuterXml) {
    uint64_t v6 = (char *)OuterXml;
  }
  else {
    uint64_t v6 = "";
  }
  uint64_t result = std::string::basic_string[abi:ne180100]<0>(a2, v6);
  if (v5) {
    return (void *)((uint64_t (*)(xmlChar *))*MEMORY[0x1E4FBA9D0])(v5);
  }
  return result;
}

void sub_1C610FFD0(_Unwind_Exception *exception_object)
{
  if (v1) {
    ((void (*)(uint64_t))*MEMORY[0x1E4FBA9D0])(v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetXmlLineString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v6, *(void *)(a1 + 40));
  uint64_t v3 = std::string::insert(&v6, 0, "(Line ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = std::string::append(&v7, ")");
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C61100A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::StartXmlDocument(siri::dialogengine *this, _xmlTextWriter *a2)
{
  int started = xmlTextWriterStartDocument(this, "1.0", "UTF-8", "no");
  if (started == -1) {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error while Starting Document", v2);
  }
  return started != -1;
}

BOOL siri::dialogengine::EndXmlDocument(siri::dialogengine *this, _xmlTextWriter *a2)
{
  int v3 = xmlTextWriterEndDocument(this);
  if (v3 == -1) {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error while Ending Document.", v2);
  }
  return v3 != -1;
}

BOOL siri::dialogengine::StartXmlElement(siri::dialogengine *this, const xmlChar *a2, const char *a3)
{
  int started = xmlTextWriterStartElement(this, a2);
  if (started == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "Error starting '");
    uint64_t v5 = std::string::append(&v10, (const std::string::value_type *)a2);
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::string v7 = std::string::append(&v11, "' element.");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v12, 3u);
    if (SHIBYTE(v13) < 0) {
      operator delete((void *)v12);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
  return started != -1;
}

void sub_1C6110244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::EndXmlElement(siri::dialogengine *this, _xmlTextWriter *a2)
{
  if (a2) {
    int v2 = xmlTextWriterFullEndElement(this);
  }
  else {
    int v2 = xmlTextWriterEndElement(this);
  }
  int v4 = v2;
  if (v2 == -1) {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v3);
  }
  return v4 != -1;
}

BOOL siri::dialogengine::WriteXmlAttribute(siri::dialogengine *this, const xmlChar *a2, const xmlChar *a3, const char *a4)
{
  int v5 = xmlTextWriterWriteAttribute(this, a2, a3);
  if (v5 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "Error writing '");
    long long v6 = std::string::append(&v11, (const std::string::value_type *)a2);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    long long v8 = std::string::append(&v12, "' attribute.");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v8->__r_.__value_.__r.__words[2];
    long long v13 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v13, 3u);
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)v13);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  return v5 != -1;
}

void sub_1C61103B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::WriteXmlImpliedAttribute(siri::dialogengine *this, const xmlChar *a2, const xmlChar *a3, const char *a4)
{
  return !*a3 || siri::dialogengine::WriteXmlAttribute(this, a2, a3, a4);
}

BOOL siri::dialogengine::WriteXmlRawString(siri::dialogengine *this, const xmlChar *a2, const char *a3)
{
  return xmlTextWriterWriteRaw(this, a2) != -1;
}

void InitDefaultsscc_info_Sash_Standard_SashTitle_Sash_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Sash.pb.cc", a4);
  SnippetUI::Sash_Standard_SashTitle::Sash_Standard_SashTitle((SnippetUI::Sash_Standard_SashTitle *)&SnippetUI::_Sash_Standard_SashTitle_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Sash_Standard_SashTitle_default_instance_, v4);
  qword_1EB690060 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB690068 = &google::protobuf::internal::fixed_address_empty_string;
}

SnippetUI::Sash_Standard_SashTitle *SnippetUI::Sash_Standard_SashTitle::Sash_Standard_SashTitle(SnippetUI::Sash_Standard_SashTitle *this)
{
  *(void *)this = &unk_1F2126DB8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load_explicit(scc_info_Sash_Standard_SashTitle_Sash_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Sash_Standard_SashTitle_Sash_2eproto);
  }
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_1C6110510(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Sash_Standard_SashTitle::GetMetadata(SnippetUI::Sash_Standard_SashTitle *this)
{
  return file_level_metadata_Sash_2eproto;
}

uint64_t SnippetUI::Sash_Standard_SashTitle::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void SnippetUI::Sash_Standard_SashTitle::MergeFrom(SnippetUI::Sash_Standard_SashTitle *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Sash.pb.cc", 339);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Sash_Standard_SashTitle::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C611062C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Sash_Standard_SashTitle::MergeFrom(SnippetUI::Sash_Standard_SashTitle *this, const SnippetUI::Sash_Standard_SashTitle *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Sash.pb.cc", 354);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Sash_Standard_SashTitle *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  int v6 = *((_DWORD *)a2 + 7);
  if (v6 == 1)
  {
    char v7 = (const std::string *)*((void *)a2 + 2);
    if (*((_DWORD *)this + 7) != 1)
    {
      SnippetUI::Sash_Standard_SashTitle::clear_value((uint64_t)this);
      int v8 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    if (v6 != 2) {
      return;
    }
    char v7 = (const std::string *)*((void *)a2 + 2);
    if (*((_DWORD *)this + 7) != 2)
    {
      SnippetUI::Sash_Standard_SashTitle::clear_value((uint64_t)this);
      int v8 = 2;
LABEL_13:
      *((_DWORD *)this + 7) = v8;
      *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_14:
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, (uint64_t)v7);
    }
  }
  long long v9 = (std::string *)*((void *)this + 2);
  if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
    goto LABEL_14;
  }
  std::string::operator=(v9, v7);
}

void sub_1C6110754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Sash_Standard_SashTitle::clear_value(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 28);
  if (v2 == 2 || v2 == 1)
  {
    uint64_t v3 = *(void *)(this + 16);
    if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0) {
        operator delete(*(void **)v3);
      }
      this = MEMORY[0x1C8796D70](v3, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

void SnippetUI::Sash_Standard_SashTitle::CopyFrom(SnippetUI::Sash_Standard_SashTitle *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Sash_Standard_SashTitle::Clear(this);
    SnippetUI::Sash_Standard_SashTitle::MergeFrom(this, a2);
  }
}

void SnippetUI::Sash_Standard_SashTitle::Clear(SnippetUI::Sash_Standard_SashTitle *this)
{
  SnippetUI::Sash_Standard_SashTitle::clear_value((uint64_t)this);
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::Sash_Standard_SashTitle *)((char *)this + 8);
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Sash_Standard_SashTitle::InternalSerializeWithCachedSizesToArray(SnippetUI::Sash_Standard_SashTitle *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7 = *((_DWORD *)this + 7);
  if (v7 == 1)
  {
    int v8 = (unsigned __int8 *)*((void *)this + 2);
    if ((char)v8[23] < 0)
    {
      int v8 = *(unsigned __int8 **)v8;
      long long v9 = *(const char **)(*((void *)this + 2) + 8);
    }
    else
    {
      long long v9 = (const char *)v8[23];
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v8, v9, 1, (google::protobuf::internal *)"SnippetUI.Sash_Standard.SashTitle.application_bundle_identifier");
    if (*((_DWORD *)this + 7) == 1) {
      char v10 = (const void **)*((void *)this + 2);
    }
    else {
      char v10 = (const void **)&google::protobuf::internal::fixed_address_empty_string;
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, v10, (char *)a2);
    int v7 = *((_DWORD *)this + 7);
  }
  if (v7 == 2)
  {
    std::string v11 = (unsigned __int8 *)*((void *)this + 2);
    if ((char)v11[23] < 0)
    {
      std::string v11 = *(unsigned __int8 **)v11;
      std::string v12 = *(const char **)(*((void *)this + 2) + 8);
    }
    else
    {
      std::string v12 = (const char *)v11[23];
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v11, v12, 1, (google::protobuf::internal *)"SnippetUI.Sash_Standard.SashTitle.text");
    if (*((_DWORD *)this + 7) == 2) {
      long long v13 = (const void **)*((void *)this + 2);
    }
    else {
      long long v13 = (const void **)&google::protobuf::internal::fixed_address_empty_string;
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, v13, (char *)a2);
  }
  uint64_t v14 = *((void *)this + 1);
  if ((v14 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v14 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

google::protobuf::internal *SnippetUI::Sash_Standard_SashTitle::_InternalParse(SnippetUI::Sash_Standard_SashTitle *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v18 = a2;
  uint64_t v5 = (std::string **)((char *)this + 16);
  int v6 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23))) {
      return v18;
    }
    TagFallbacint k = (google::protobuf::internal *)((char *)v18 + 1);
    long long v9 = (char *)*(unsigned __int8 *)v18;
    if ((*(char *)v18 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    long long v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
      uint64_t v18 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v9);
    uint64_t v18 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v9 >> 3 == 2)
    {
      if (v9 == 18)
      {
        if (*((_DWORD *)this + 7) != 2)
        {
          SnippetUI::Sash_Standard_SashTitle::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_25:
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        long long v13 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_25;
        }
        uint64_t v14 = (std::string::value_type *)TagFallback;
        uint64_t v15 = a3;
        char v16 = "SnippetUI.Sash_Standard.SashTitle.text";
LABEL_30:
        std::string v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v13, v14, (uint64_t)v15, (google::protobuf::internal *)v16);
        goto LABEL_31;
      }
    }
    else if (v9 >> 3 == 1 && v9 == 10)
    {
      if (*((_DWORD *)this + 7) != 1)
      {
        SnippetUI::Sash_Standard_SashTitle::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_28:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      }
      long long v13 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_28;
      }
      uint64_t v14 = (std::string::value_type *)TagFallback;
      uint64_t v15 = a3;
      char v16 = "SnippetUI.Sash_Standard.SashTitle.application_bundle_identifier";
      goto LABEL_30;
    }
    if (!v9 || (v9 & 7) == 4) {
      break;
    }
    std::string v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_31:
    uint64_t v18 = (google::protobuf::internal *)v12;
    if (!v12) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v9 - 1;
  return TagFallback;
}

uint64_t SnippetUI::Sash_Standard_SashTitle::GetCachedSize(SnippetUI::Sash_Standard_SashTitle *this)
{
  return *((unsigned int *)this + 6);
}

char *SnippetUI::Sash_Standard_SashTitle::ByteSizeLong(SnippetUI::Sash_Standard_SashTitle *this)
{
  int v1 = *((_DWORD *)this + 7);
  if (v1 == 2 || v1 == 1)
  {
    uint64_t v2 = *((void *)this + 2);
    uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
    uint64_t v4 = *(void *)(v2 + 8);
    if ((v3 & 0x80u) == 0) {
      uint64_t v4 = v3;
    }
    uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Sash_Standard_SashTitle *)((char *)this + 8), v5, (_DWORD *)this + 6);
  }
  *((_DWORD *)this + 6) = v5;
  return (char *)v5;
}

uint64_t SnippetUI::Sash_Standard_SashTitle::IsInitialized(SnippetUI::Sash_Standard_SashTitle *this)
{
  return 1;
}

SnippetUI::Sash_Standard_SashTitle *SnippetUI::Sash_Standard_SashTitle::New(SnippetUI::Sash_Standard_SashTitle *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard_SashTitle>(a2);
}

SnippetUI::Sash_Standard_SashTitle *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard_SashTitle>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Sash_Standard_SashTitle *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Sash_Standard_SashTitle>);
  }
  SnippetUI::Sash_Standard_SashTitle::Sash_Standard_SashTitle(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C6110CB4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Sash_Standard_SashTitle>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Sash_Standard_SashTitle *SnippetUI::Sash_Standard_SashTitle::New(SnippetUI::Sash_Standard_SashTitle *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard_SashTitle>(0);
}

void SnippetUI::Sash_Standard_SashTitle::~Sash_Standard_SashTitle(SnippetUI::Sash_Standard_SashTitle *this)
{
  SnippetUI::Sash_Standard_SashTitle::~Sash_Standard_SashTitle(this);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F2126DB8;
  if (*((_DWORD *)this + 7)) {
    SnippetUI::Sash_Standard_SashTitle::clear_value((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_Sash_Standard_Sash_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Sash.pb.cc", a4);
  SnippetUI::Sash_Standard::Sash_Standard((SnippetUI::Sash_Standard *)&SnippetUI::_Sash_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Sash_Standard_default_instance_, v4);
  qword_1EB68F620 = (uint64_t)&SnippetUI::_Sash_Standard_SashTitle_default_instance_;
  unk_1EB68F628 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EB68F630 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EB68F638 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EB68F640 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Sash_Standard *SnippetUI::Sash_Standard::Sash_Standard(SnippetUI::Sash_Standard *this)
{
  *(void *)this = &unk_1F2126E78;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 17) = 0;
  if (atomic_load_explicit(scc_info_Sash_Standard_Sash_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Sash_Standard_Sash_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 49) = 0u;
  return this;
}

void sub_1C6110EA4(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Sash_Standard::GetMetadata(SnippetUI::Sash_Standard *this)
{
  return qword_1EA3DA5A8;
}

uint64_t SnippetUI::Sash_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 68) = a2;
  return this;
}

void SnippetUI::Sash_Standard::MergeFrom(SnippetUI::Sash_Standard *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Sash.pb.cc", 787);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Sash_Standard::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C6110FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Sash_Standard::MergeFrom(SnippetUI::Sash_Standard *this, const SnippetUI::Sash_Standard *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Sash.pb.cc", 802);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Sash_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Sash_Standard *)&SnippetUI::_Sash_Standard_default_instance_)
  {
    int v8 = (const SnippetUI::Sash_Standard_SashTitle *)*((void *)a2 + 3);
    if (v8)
    {
      long long v9 = (SnippetUI::Sash_Standard_SashTitle *)*((void *)this + 3);
      if (!v9)
      {
        long long v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard_SashTitle>(0);
        *((void *)this + 3) = v9;
        int v8 = (const SnippetUI::Sash_Standard_SashTitle *)*((void *)a2 + 3);
      }
      if (v8) {
        char v10 = v8;
      }
      else {
        char v10 = (const SnippetUI::Sash_Standard_SashTitle *)&SnippetUI::_Sash_Standard_SashTitle_default_instance_;
      }
      SnippetUI::Sash_Standard_SashTitle::MergeFrom(v9, v10);
    }
    std::string v11 = (int **)*((void *)a2 + 4);
    if (v11)
    {
      std::string v12 = (int **)*((void *)this + 4);
      if (!v12)
      {
        std::string v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 4) = v12;
        std::string v11 = (int **)*((void *)a2 + 4);
      }
      if (v11) {
        long long v13 = v11;
      }
      else {
        long long v13 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v12, v13);
    }
    uint64_t v14 = (int **)*((void *)a2 + 5);
    if (v14)
    {
      uint64_t v15 = (int **)*((void *)this + 5);
      if (!v15)
      {
        uint64_t v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 5) = v15;
        uint64_t v14 = (int **)*((void *)a2 + 5);
      }
      if (v14) {
        char v16 = v14;
      }
      else {
        char v16 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v15, v16);
    }
    uint64_t v17 = (int **)*((void *)a2 + 6);
    if (v17)
    {
      uint64_t v18 = (int **)*((void *)this + 6);
      if (!v18)
      {
        uint64_t v18 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 6) = v18;
        uint64_t v17 = (int **)*((void *)a2 + 6);
      }
      if (v17) {
        unint64_t v19 = v17;
      }
      else {
        unint64_t v19 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v18, v19);
    }
    int v20 = (int **)*((void *)a2 + 7);
    if (v20)
    {
      uint64_t v21 = (int **)*((void *)this + 7);
      if (!v21)
      {
        uint64_t v21 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 7) = v21;
        int v20 = (int **)*((void *)a2 + 7);
      }
      if (v20) {
        uint64_t v22 = v20;
      }
      else {
        uint64_t v22 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v21, v22);
    }
  }
  if (*((unsigned char *)a2 + 64)) {
    *((unsigned char *)this + 64) = 1;
  }
}

void sub_1C61111B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Sash_Standard::CopyFrom(SnippetUI::Sash_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Sash_Standard::Clear(this);
    SnippetUI::Sash_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::Sash_Standard::Clear(SnippetUI::Sash_Standard *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 6) = 0;
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  char v9 = *((unsigned char *)this + 8);
  int v8 = (char *)this + 8;
  *((void *)v8 + 6) = 0;
  v8[56] = 0;
  if (v9)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v8);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Sash_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::Sash_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::Sash_Standard *)&SnippetUI::_Sash_Standard_default_instance_) {
    goto LABEL_61;
  }
  uint64_t v7 = (SnippetUI::Sash_Standard_SashTitle *)*((void *)this + 3);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v7 = (SnippetUI::Sash_Standard_SashTitle *)*((void *)this + 3);
    }
    *uint64_t v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 6);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        std::string v12 = v5 + 2;
        do
        {
          long long v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        std::string v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *std::string v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    std::string v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::Sash_Standard_SashTitle::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  char v16 = (SnippetUI::VisualProperty *)*((void *)this + 4);
  if (!v16) {
    goto LABEL_26;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    char v16 = (SnippetUI::VisualProperty *)*((void *)this + 4);
  }
  *uint64_t v5 = 18;
  unsigned int v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    unsigned int v19 = v17 >> 7;
    if (v17 >> 14)
    {
      uint64_t v21 = v5 + 2;
      do
      {
        uint64_t v22 = v21;
        *v21++ = v19 | 0x80;
        unsigned int v23 = v19 >> 7;
        unsigned int v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      int v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *uint64_t v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    uint64_t v18 = 3;
  }
  else
  {
    v5[1] = v17;
    uint64_t v18 = 2;
  }
  int v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  uint64_t v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  int v25 = (SnippetUI::VisualProperty *)*((void *)this + 5);
  if (!v25) {
    goto LABEL_38;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    int v25 = (SnippetUI::VisualProperty *)*((void *)this + 5);
  }
  *uint64_t v5 = 26;
  unsigned int v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    unsigned int v28 = v26 >> 7;
    if (v26 >> 14)
    {
      uint64_t v30 = v5 + 2;
      do
      {
        uint64_t v31 = v30;
        *v30++ = v28 | 0x80;
        unsigned int v32 = v28 >> 7;
        unsigned int v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      long long v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      unsigned char *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    uint64_t v27 = 3;
  }
  else
  {
    v5[1] = v26;
    uint64_t v27 = 2;
  }
  long long v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  uint64_t v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  uint64_t v34 = (SnippetUI::VisualProperty *)*((void *)this + 6);
  if (!v34) {
    goto LABEL_50;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    uint64_t v34 = (SnippetUI::VisualProperty *)*((void *)this + 6);
  }
  *uint64_t v5 = 34;
  unsigned int v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    unsigned int v37 = v35 >> 7;
    if (v35 >> 14)
    {
      int v39 = v5 + 2;
      do
      {
        std::string::size_type v40 = v39;
        *v39++ = v37 | 0x80;
        unsigned int v41 = v37 >> 7;
        unsigned int v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      unint64_t v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *int v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    uint64_t v36 = 3;
  }
  else
  {
    v5[1] = v35;
    uint64_t v36 = 2;
  }
  unint64_t v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  uint64_t v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  unint64_t v43 = (SnippetUI::ActionProperty *)*((void *)this + 7);
  if (v43)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unint64_t v43 = (SnippetUI::ActionProperty *)*((void *)this + 7);
    }
    *uint64_t v5 = 42;
    unsigned int v44 = *((_DWORD *)v43 + 12);
    if (v44 > 0x7F)
    {
      v5[1] = v44 | 0x80;
      unsigned int v46 = v44 >> 7;
      if (v44 >> 14)
      {
        std::string v47 = v5 + 2;
        do
        {
          std::string v48 = v47;
          *v47++ = v46 | 0x80;
          unsigned int v49 = v46 >> 7;
          unsigned int v50 = v46 >> 14;
          v46 >>= 7;
        }
        while (v50);
        std::string v45 = (google::protobuf::UnknownFieldSet *)(v48 + 2);
        unsigned char *v47 = v49;
      }
      else
      {
        v5[2] = v46;
        std::string v45 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v44;
      std::string v45 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v43, v45, a3, a4);
  }
LABEL_61:
  long long v51 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v51 + 23) < 0)
  {
    std::string::size_type v52 = (const char *)*((void *)v51 + 1);
    if (!v52) {
      goto LABEL_67;
    }
    long long v51 = *(google::protobuf::internal **)v51;
    goto LABEL_66;
  }
  std::string::size_type v52 = (const char *)*((unsigned __int8 *)v51 + 23);
  if (*((unsigned char *)v51 + 23))
  {
LABEL_66:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v51, v52, 1, (google::protobuf::internal *)"SnippetUI.Sash_Standard.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((const void ***)this + 2), v5);
  }
LABEL_67:
  if (*((unsigned char *)this + 64))
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      char v53 = *((unsigned char *)this + 64);
    }
    else
    {
      char v53 = 1;
    }
    *uint64_t v5 = 56;
    v5[1] = v53;
    v5 += 2;
  }
  uint64_t v54 = *((void *)this + 1);
  if ((v54 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v54 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::Sash_Standard::_InternalParse(SnippetUI::Sash_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v31 = a2;
  uint64_t v5 = (std::string **)((char *)this + 16);
  uint64_t v6 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v31, *((_DWORD *)a3 + 23))) {
      return v31;
    }
    TagFallbacint k = (google::protobuf::internal *)((char *)v31 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v31;
    if ((*(char *)v31 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v31 + 2);
LABEL_6:
      uint64_t v31 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v31, v9);
    uint64_t v31 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_39;
        }
        unsigned int v10 = (SnippetUI::Sash_Standard_SashTitle *)*((void *)this + 3);
        if (!v10)
        {
          unsigned int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard_SashTitle>(0);
          *((void *)this + 3) = v10;
          TagFallbacint k = v31;
        }
        unsigned int v11 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallbacint k = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback) {
            goto LABEL_53;
          }
          std::string v12 = SizeFallback;
          unsigned int v11 = v21;
        }
        else
        {
          std::string v12 = (char *)TagFallback + 1;
        }
        int v22 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v12, v11);
        int v23 = *((_DWORD *)a3 + 22);
        BOOL v24 = __OFSUB__(v23--, 1);
        *((_DWORD *)a3 + 22) = v23;
        if (v23 < 0 != v24) {
          goto LABEL_53;
        }
        int v25 = v22;
        unsigned int v26 = SnippetUI::Sash_Standard_SashTitle::_InternalParse(v10, (google::protobuf::internal *)v12, a3);
        if (!v26) {
          goto LABEL_53;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          goto LABEL_53;
        }
        int v27 = *((_DWORD *)a3 + 7) + v25;
        *((_DWORD *)a3 + 7) = v27;
        *(void *)a3 = *((void *)a3 + 1) + (v27 & (v27 >> 31));
        uint64_t v31 = v26;
        continue;
      case 2u:
        if (v9 != 18) {
          goto LABEL_39;
        }
        long long v13 = (SnippetUI::VisualProperty *)*((void *)this + 4);
        if (v13) {
          goto LABEL_25;
        }
        long long v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 4) = v13;
        goto LABEL_24;
      case 3u:
        if (v9 != 26) {
          goto LABEL_39;
        }
        long long v13 = (SnippetUI::VisualProperty *)*((void *)this + 5);
        if (v13) {
          goto LABEL_25;
        }
        long long v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 5) = v13;
        goto LABEL_24;
      case 4u:
        if (v9 != 34) {
          goto LABEL_39;
        }
        long long v13 = (SnippetUI::VisualProperty *)*((void *)this + 6);
        if (v13) {
          goto LABEL_25;
        }
        long long v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 6) = v13;
LABEL_24:
        TagFallbacint k = v31;
LABEL_25:
        unsigned int v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v13, TagFallback);
        goto LABEL_44;
      case 5u:
        if (v9 != 42) {
          goto LABEL_39;
        }
        unsigned int v15 = (SnippetUI::ActionProperty *)*((void *)this + 7);
        if (!v15)
        {
          unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 7) = v15;
          TagFallbacint k = v31;
        }
        unsigned int v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_44;
      case 6u:
        if (v9 != 50) {
          goto LABEL_39;
        }
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v14 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Sash_Standard.component_name");
        goto LABEL_44;
      case 7u:
        if (v9 != 56) {
          goto LABEL_39;
        }
        char v16 = (google::protobuf::internal *)((char *)TagFallback + 1);
        unint64_t v17 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_38;
        }
        int v18 = *(char *)v16;
        unint64_t v17 = v17 + (v18 << 7) - 128;
        if (v18 < 0)
        {
          unsigned int v28 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v17);
          uint64_t v31 = v28;
          *((unsigned char *)this + 64) = v29 != 0;
          if (!v28) {
            goto LABEL_53;
          }
        }
        else
        {
          char v16 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_38:
          uint64_t v31 = v16;
          *((unsigned char *)this + 64) = v17 != 0;
        }
        continue;
      default:
LABEL_39:
        if (v9) {
          BOOL v19 = (v9 & 7) == 4;
        }
        else {
          BOOL v19 = 1;
        }
        if (v19)
        {
          *((_DWORD *)a3 + 20) = v9 - 1;
          return TagFallback;
        }
        unsigned int v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_44:
        uint64_t v31 = (google::protobuf::internal *)v14;
        if (v14) {
          continue;
        }
LABEL_53:
        TagFallbacint k = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::Sash_Standard::GetCachedSize(SnippetUI::Sash_Standard *this)
{
  return *((unsigned int *)this + 17);
}

char *SnippetUI::Sash_Standard::ByteSizeLong(SnippetUI::Sash_Standard *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  if (this != (SnippetUI::Sash_Standard *)&SnippetUI::_Sash_Standard_default_instance_)
  {
    uint64_t v6 = (SnippetUI::Sash_Standard_SashTitle *)*((void *)this + 3);
    if (v6)
    {
      uint64_t v7 = SnippetUI::Sash_Standard_SashTitle::ByteSizeLong(v6);
      v5 += (uint64_t)&v7[((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    unsigned int v8 = (SnippetUI::VisualProperty *)*((void *)this + 4);
    if (v8)
    {
      uint64_t v9 = SnippetUI::VisualProperty::ByteSizeLong(v8);
      v5 += (uint64_t)&v9[((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    unsigned int v10 = (SnippetUI::VisualProperty *)*((void *)this + 5);
    if (v10)
    {
      unsigned int v11 = SnippetUI::VisualProperty::ByteSizeLong(v10);
      v5 += (uint64_t)&v11[((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    std::string v12 = (SnippetUI::VisualProperty *)*((void *)this + 6);
    if (v12)
    {
      long long v13 = SnippetUI::VisualProperty::ByteSizeLong(v12);
      v5 += (uint64_t)&v13[((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    unsigned int v14 = (SnippetUI::ActionProperty *)*((void *)this + 7);
    if (v14)
    {
      unsigned int v15 = SnippetUI::ActionProperty::ByteSizeLong(v14);
      v5 += (uint64_t)&v15[((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((unsigned char *)this + 64)) {
    char v16 = (const google::protobuf::UnknownFieldSet *)(v5 + 2);
  }
  else {
    char v16 = (const google::protobuf::UnknownFieldSet *)v5;
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Sash_Standard *)((char *)this + 8), v16, (_DWORD *)this + 17);
  }
  else
  {
    *((_DWORD *)this + 17) = v16;
    return (char *)v16;
  }
}

uint64_t SnippetUI::Sash_Standard::IsInitialized(SnippetUI::Sash_Standard *this)
{
  return 1;
}

SnippetUI::Sash_Standard *SnippetUI::Sash_Standard::New(SnippetUI::Sash_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard>(a2);
}

SnippetUI::Sash_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Sash_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Sash_Standard>);
  }
  SnippetUI::Sash_Standard::Sash_Standard(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C6111D98(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4002C72E65);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Sash_Standard>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::Sash_Standard *SnippetUI::Sash_Standard::New(SnippetUI::Sash_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard>(0);
}

void SnippetUI::Sash_Standard::~Sash_Standard(SnippetUI::Sash_Standard *this)
{
  SnippetUI::Sash_Standard::~Sash_Standard(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(void *)this = &unk_1F2126E78;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Sash_Standard *)&SnippetUI::_Sash_Standard_default_instance_)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *((void *)this + 5);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 6);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    unsigned int v8 = *((void *)this + 7);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::Sash_Standard_SashTitle::InitAsDefaultInstance(SnippetUI::Sash_Standard_SashTitle *this)
{
  qword_1EB690060 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB690068 = &google::protobuf::internal::fixed_address_empty_string;
}

SnippetUI::Sash_Standard_SashTitle *SnippetUI::Sash_Standard_SashTitle::Sash_Standard_SashTitle(SnippetUI::Sash_Standard_SashTitle *this, const SnippetUI::Sash_Standard_SashTitle *a2)
{
  *(void *)this = &unk_1F2126DB8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Sash_Standard_SashTitle *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((_DWORD *)this + 7) = 0;
  int v5 = *((_DWORD *)a2 + 7);
  if ((v5 - 1) < 2)
  {
    uint64_t v6 = *((void *)a2 + 2);
    SnippetUI::Sash_Standard_SashTitle::clear_value((uint64_t)this);
    *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
    *((_DWORD *)this + 7) = v5;
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
  }
  return this;
}

void sub_1C611205C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Sash_Standard_SashTitle::default_instance(SnippetUI::Sash_Standard_SashTitle *this)
{
  if (atomic_load_explicit(scc_info_Sash_Standard_SashTitle_Sash_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Sash_Standard_SashTitle_Sash_2eproto);
  }
  return &SnippetUI::_Sash_Standard_SashTitle_default_instance_;
}

void SnippetUI::Sash_Standard_SashTitle::CopyFrom(SnippetUI::Sash_Standard_SashTitle *this, const SnippetUI::Sash_Standard_SashTitle *a2)
{
  if (a2 != this)
  {
    SnippetUI::Sash_Standard_SashTitle::Clear(this);
    SnippetUI::Sash_Standard_SashTitle::MergeFrom(this, a2);
  }
}

void SnippetUI::Sash_Standard_SashTitle::InternalSwap(SnippetUI::Sash_Standard_SashTitle *this, SnippetUI::Sash_Standard_SashTitle *a2)
{
  uint64_t v4 = (SnippetUI::Sash_Standard_SashTitle *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
}

void SnippetUI::Sash_Standard::InitAsDefaultInstance(SnippetUI::Sash_Standard *this)
{
  qword_1EB68F620 = (uint64_t)&SnippetUI::_Sash_Standard_SashTitle_default_instance_;
  unk_1EB68F628 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EB68F630 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EB68F638 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EB68F640 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Sash_Standard::_Internal::title(SnippetUI::Sash_Standard::_Internal *this, const SnippetUI::Sash_Standard *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::Sash_Standard::_Internal::thumbnail(SnippetUI::Sash_Standard::_Internal *this, const SnippetUI::Sash_Standard *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::Sash_Standard::_Internal::title_color(SnippetUI::Sash_Standard::_Internal *this, const SnippetUI::Sash_Standard *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::Sash_Standard::_Internal::background_color(SnippetUI::Sash_Standard::_Internal *this, const SnippetUI::Sash_Standard *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::Sash_Standard::_Internal::action(SnippetUI::Sash_Standard::_Internal *this, const SnippetUI::Sash_Standard *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::Sash_Standard::clear_thumbnail(SnippetUI::Sash_Standard *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Sash_Standard::clear_title_color(SnippetUI::Sash_Standard *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::Sash_Standard::clear_background_color(SnippetUI::Sash_Standard *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::Sash_Standard::clear_action(SnippetUI::Sash_Standard *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

SnippetUI::Sash_Standard *SnippetUI::Sash_Standard::Sash_Standard(SnippetUI::Sash_Standard *this, const SnippetUI::Sash_Standard *a2)
{
  *(void *)this = &unk_1F2126E78;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 17) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Sash_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  if (a2 == (const SnippetUI::Sash_Standard *)&SnippetUI::_Sash_Standard_default_instance_)
  {
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
  else
  {
    if (*((void *)a2 + 3)) {
      operator new();
    }
    *((void *)this + 3) = 0;
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
    *((void *)this + 6) = 0;
    if (*((void *)a2 + 7)) {
      operator new();
    }
  }
  *((void *)this + 7) = 0;
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
  return this;
}

void sub_1C6112504(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Sash_Standard::default_instance(SnippetUI::Sash_Standard *this)
{
  if (atomic_load_explicit(scc_info_Sash_Standard_Sash_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Sash_Standard_Sash_2eproto);
  }
  return &SnippetUI::_Sash_Standard_default_instance_;
}

void SnippetUI::Sash_Standard::CopyFrom(SnippetUI::Sash_Standard *this, const SnippetUI::Sash_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::Sash_Standard::Clear(this);
    SnippetUI::Sash_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::Sash_Standard::InternalSwap(SnippetUI::Sash_Standard *this, SnippetUI::Sash_Standard *a2)
{
  uint64_t v4 = (SnippetUI::Sash_Standard *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v18;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v7 = (uint64_t *)*((void *)this + 2);
  unsigned int v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  std::string::size_type v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v15;
  uint64_t v16 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v16;
  uint64_t v17 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v17;
  LOBYTE(v17) = *((unsigned char *)this + 64);
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
  *((unsigned char *)a2 + 64) = v17;
}

void siri::dialogengine::DialogHoliday::name(siri::dialogengine::DialogHoliday *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  *(_OWORD *)std::string __p = 0u;
  long long v4 = 0u;
  siri::dialogengine::GetHolidayName((uint64_t)this, (uint64_t)a2, __p);
}

void sub_1C6112798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetHolidayName(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = (const void **)std::string::basic_string[abi:ne180100]<0>(&v9, "holiday");
  RequiredStringuint64_t Parameter = siri::dialogengine::GetRequiredStringParameter(v5, a2);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = (const void **)std::string::basic_string[abi:ne180100]<0>(&v9, "calendarType");
  OptionalStringuint64_t Parameter = (char *)siri::dialogengine::GetOptionalStringParameter(v7, a2);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  *a3 = 0;
  if (RequiredStringParameter)
  {
    if (OptionalStringParameter)
    {
      if (OptionalStringParameter[95] < 0) {
        std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)OptionalStringParameter + 9), *((void *)OptionalStringParameter + 10));
      }
      else {
        std::string v9 = *(std::string *)(OptionalStringParameter + 3);
      }
      *a3 = siri::dialogengine::GetCalendarType((uint64_t)&v9);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
    }
    operator new();
  }
  operator new();
}

void sub_1C61129C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  MEMORY[0x1C8796D70](v27, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogHoliday::nameWithPrefix(siri::dialogengine::DialogHoliday *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  *(_OWORD *)std::string __p = 0u;
  long long v4 = 0u;
  HIDWORD(__p[0]) = 1;
  siri::dialogengine::GetHolidayName((uint64_t)this, (uint64_t)a2, __p);
}

void sub_1C6112AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogHoliday::nameWithDefiniteArticle(siri::dialogengine::DialogHoliday *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  *(_OWORD *)std::string __p = 0u;
  long long v4 = 0u;
  HIDWORD(__p[0]) = 2;
  siri::dialogengine::GetHolidayName((uint64_t)this, (uint64_t)a2, __p);
}

void sub_1C6112B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogHoliday::date(siri::dialogengine::DialogHoliday *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  memset(v15, 0, sizeof(v15));
  std::string::basic_string[abi:ne180100]<0>(__p, "holiday");
  RequiredStringuint64_t Parameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)__p, (uint64_t)a2);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "calendarType");
  OptionalStringuint64_t Parameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)__p, (uint64_t)a2);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "holidayLocale");
  uint64_t v7 = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)__p, (uint64_t)a2);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "holidayYear");
  OptionalNumberuint64_t Parameter = (double *)siri::dialogengine::GetOptionalNumberParameter((const void **)__p, (uint64_t)a2);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  LODWORD(v15[0]) = 0;
  if (!RequiredStringParameter) {
    operator new();
  }
  if (!OptionalStringParameter) {
    goto LABEL_16;
  }
  if (OptionalStringParameter[95] < 0) {
    std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)OptionalStringParameter + 9), *((void *)OptionalStringParameter + 10));
  }
  else {
    *(std::string *)std::string __p = *(std::string *)(OptionalStringParameter + 3);
  }
  LODWORD(v15[0]) = siri::dialogengine::GetCalendarType((uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
LABEL_16:
    if (v7) {
      goto LABEL_17;
    }
LABEL_21:
    siri::dialogengine::Context::GetDeviceLocale(this, (std::string *)__p);
    goto LABEL_22;
  }
  operator delete(*(void **)__p);
  if (!v7) {
    goto LABEL_21;
  }
LABEL_17:
  if (v7[95] < 0) {
    std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)v7 + 9), *((void *)v7 + 10));
  }
  else {
    *(std::string *)std::string __p = *(std::string *)(v7 + 3);
  }
LABEL_22:
  *(std::string *)&v15[1] = *(std::string *)__p;
  if (OptionalNumberParameter)
  {
    int ICUYear = (int)OptionalNumberParameter[9];
  }
  else
  {
    memset(&__p[8], 0, 24);
    *(void *)std::string __p = (uint64_t)siri::dialogengine::Context::GetCurrentTime(this);
    siri::dialogengine::Context::GetCurrentTimeZone(this, &v14);
    *(std::string *)&__p[8] = v14;
    int ICUYear = siri::dialogengine::GetICUYear((siri::dialogengine *)__p, v9);
    if ((__p[31] & 0x80000000) != 0) {
      operator delete(*(void **)&__p[8]);
    }
  }
  if (RequiredStringParameter[95] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)RequiredStringParameter + 9), *((void *)RequiredStringParameter + 10));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(RequiredStringParameter + 72);
    *(void *)&__p[16] = *((void *)RequiredStringParameter + 11);
  }
  siri::dialogengine::GetHolidayDate((uint64_t)__p, (unsigned int *)v15, (siri::dialogengine::VariableObject **)&v14);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v11 = siri::dialogengine::DialogDateTime::asCalendar(this, (siri::dialogengine::Context *)v14.__r_.__value_.__l.__data_, v10);
  if (v14.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v14.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v15[3]) < 0) {
    operator delete(v15[1]);
  }
  return v11;
}

void sub_1C6112E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogHoliday::emotion(siri::dialogengine::DialogHoliday *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  long long v4 = (const void **)std::string::basic_string[abi:ne180100]<0>(&v5, "holiday");
  siri::dialogengine::GetRequiredStringParameter(v4, (uint64_t)a2);
  if (v6 < 0) {
    operator delete(v5);
  }
  operator new();
}

void sub_1C6113084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v22 - 17) < 0) {
    operator delete(*(void **)(v22 - 40));
  }
  MEMORY[0x1C8796D70](v21, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void sub_1C611310C()
{
  if (*(char *)(v0 - 17) < 0) {
    operator delete(*(void **)(v0 - 40));
  }
  JUMPOUT(0x1C6113104);
}

void siri::dialogengine::ExpandNodes(siri::dialogengine::Context *a1, void *a2, void ***a3, uint64_t a4, uint64_t a5, unsigned int a6, __n128 a7)
{
  unsigned int v8 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 != v7)
  {
    do
    {
      uint64_t v12 = *v8;
      if (*v8)
      {
        if (!a5) {
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v13 = 0;
        unint64_t v15 = 0;
        if (!a5) {
          goto LABEL_12;
        }
      }
      siri::dialogengine::Node::GetCondition((siri::dialogengine::Node *)v12, a1, &v29);
      if (v29.__r_.__value_.__r.__words[0])
      {
        if (!a1
          || (uint64_t v17 = *(siri::dialogengine::Context ***)(v29.__r_.__value_.__r.__words[0] + 144),
              v17 == *(siri::dialogengine::Context ***)(v29.__r_.__value_.__r.__words[0] + 152))
          || (siri::dialogengine::EvaluateConditionEntry(a1, *v17, 0, v16) & 1) == 0)
        {
          std::string::size_type size = (std::__shared_weak_count *)v29.__r_.__value_.__l.__size_;
          if (v29.__r_.__value_.__l.__size_) {
            goto LABEL_25;
          }
          goto LABEL_26;
        }
      }
      if (v29.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v29.__r_.__value_.__l.__size_);
      }
LABEL_12:
      if (!v13)
      {
        if (v14 | v15)
        {
          if (v14) {
            int v20 = (const siri::dialogengine::SpeakableString *)(v14 + 208);
          }
          else {
            int v20 = (const siri::dialogengine::SpeakableString *)(v15 + 208);
          }
          siri::dialogengine::SpeakableString::SpeakableString(&v29, v20);
          siri::dialogengine::SpeakableString::GetPrintChunks((siri::dialogengine::SpeakableString *)&v29, v21, (uint64_t *)v28);
          siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::SpeakableString *)&v29, v22, v27);
          uint64_t v23 = a2[1];
          if (v23) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::EvaluateChunkList(&v26, (uint64_t)a1, v28, 0, a5, a6);
        }
        goto LABEL_26;
      }
      int v18 = (std::__shared_weak_count *)a2[1];
      v30[0] = *a2;
      v30[1] = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::dialogengine::Group::Expand(v13, a1, v30, a4, a5, a6, a7);
      if (v18)
      {
        std::string::size_type size = v18;
LABEL_25:
        std::__shared_weak_count::__release_shared[abi:ne180100](size);
      }
LABEL_26:
      v8 += 2;
    }
    while (v8 != v7);
  }
}

void sub_1C61135A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,std::__shared_weak_count *a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  std::string __p = &a32;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a35;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a38);
  _Unwind_Resume(a1);
}

void sub_1C6113670()
{
  if (!v0) {
    JUMPOUT(0x1C6113630);
  }
  JUMPOUT(0x1C6113628);
}

void sub_1C611367C()
{
  if (!v0) {
    JUMPOUT(0x1C6113640);
  }
  JUMPOUT(0x1C6113638);
}

void sub_1C6113688()
{
}

void sub_1C6113690()
{
}

void sub_1C6113698()
{
  if (v0) {
    JUMPOUT(0x1C61136A4);
  }
  JUMPOUT(0x1C6113668);
}

void siri::dialogengine::EvaluateChunkList(void *a1, uint64_t a2, char **a3, int a4, uint64_t a5, int a6)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  uint64_t v58 = 0;
  uint64_t v57 = 0;
  memset(v59, 0, 32);
  uint64_t v55 = 0;
  uint64_t v54 = 0;
  uint64_t v56 = 0;
  uint64_t v52 = 0;
  uint64_t v51 = 0;
  uint64_t v53 = 0;
  uint64_t v49 = 0;
  std::string v48 = 0;
  uint64_t v50 = 0;
  v63[1] = 0;
  v63[0] = 0;
  char v6 = *a3;
  uint64_t v7 = a3[1];
  uint64_t v64 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(v63, v6, v7, (v7 - v6) >> 4);
  unsigned int v8 = v63[0];
  if (v63[0] == v63[1])
  {
    v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
    *(_OWORD *)&v65.__r_.__value_.__r.__words[1] = 0uLL;
    v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65.__r_.__value_.__l.__size_;
    siri::dialogengine::CreateJSONObjectVal();
  }
  std::string v9 = *(const void **)v63[0];
  if (*(void *)v63[0])
  {
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  memset(&v62, 0, sizeof(v62));
  memset(&v59[4], 0, 24);
  memset(&v47, 0, sizeof(v47));
  if (v10)
  {
    uint64_t v14 = *(void *)(a2 + 504);
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 512);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v15 = v10 + 200;
    if (v10[223] < 0)
    {
      std::string::__init_copy_ctor_external(&v65, *((const std::string::value_type **)v10 + 25), *((void *)v10 + 26));
    }
    else
    {
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = *v15;
      v65.__r_.__value_.__r.__words[2] = *((void *)v10 + 27);
    }
    Phrase = siri::dialogengine::GroupPhrases::GetPhrase(v14 + 312, (unsigned __int8 *)&v65);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v65.__r_.__value_.__l.__data_);
      if (!v13)
      {
LABEL_18:
        memset(&v60, 0, sizeof(v60));
        if (!Phrase)
        {
          if (v10[223] < 0)
          {
            std::string::__init_copy_ctor_external(&v45, *((const std::string::value_type **)v10 + 25), *((void *)v10 + 26));
          }
          else
          {
            *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *v15;
            v45.__r_.__value_.__r.__words[2] = *((void *)v10 + 27);
          }
          int v20 = std::string::insert(&v45, 0, "Phrase '");
          long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          v46.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          uint64_t v22 = std::string::append(&v46, "' not found!");
          long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          v65.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v65, 3u);
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v65.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v46.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          {
            BOOL v24 = (void *)v45.__r_.__value_.__r.__words[0];
LABEL_59:
            operator delete(v24);
          }
LABEL_60:
          MEMORY[0x1C8796900](&v62, "phrase");
          if (v10[223] < 0)
          {
            std::string::__init_copy_ctor_external(&v65, *((const std::string::value_type **)v10 + 25), *((void *)v10 + 26));
          }
          else
          {
            *(_OWORD *)&v65.__r_.__value_.__l.__data_ = *v15;
            v65.__r_.__value_.__r.__words[2] = *((void *)v10 + 27);
          }
          int v25 = v10[247];
          *(std::string *)&v59[4] = v65;
          if (v25 < 0) {
            std::string::__init_copy_ctor_external(&v65, *((const std::string::value_type **)v10 + 28), *((void *)v10 + 29));
          }
          else {
            std::string v65 = *(std::string *)(v10 + 224);
          }
          int v26 = v10[223];
          std::string v47 = v65;
          if (v26 < 0)
          {
            std::string::__init_copy_ctor_external(&v45, *((const std::string::value_type **)v10 + 25), *((void *)v10 + 26));
          }
          else
          {
            *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *v15;
            v45.__r_.__value_.__r.__words[2] = *((void *)v10 + 27);
          }
          siri::dialogengine::CreateJSONStringVal();
        }
        if (a4)
        {
          (*(void (**)(std::string *__return_ptr, char *, uint64_t))(*(void *)v10 + 24))(&v65, v10, a2);
          if ((SHIBYTE(v67) & 0x80000000) == 0)
          {
            std::string::size_type v18 = v67;
            v46.__r_.__value_.__r.__words[2] = v67;
            long long v19 = __s;
LABEL_28:
            *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
            *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v19;
            goto LABEL_45;
          }
          std::string::__init_copy_ctor_external(&v46, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
        }
        else
        {
          (*(void (**)(std::string *__return_ptr, char *, uint64_t))(*(void *)v10 + 24))(&v65, v10, a2);
          if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            std::string::size_type v18 = v65.__r_.__value_.__r.__words[2];
            v46.__r_.__value_.__r.__words[2] = v65.__r_.__value_.__r.__words[2];
            long long v19 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
            goto LABEL_28;
          }
          std::string::__init_copy_ctor_external(&v46, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
        }
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
        std::string::size_type v18 = v46.__r_.__value_.__r.__words[2];
LABEL_45:
        v60.__r_.__value_.__r.__words[2] = v18;
        *((unsigned char *)&v46.__r_.__value_.__s + 23) = 0;
        v46.__r_.__value_.__s.__data_[0] = 0;
        if (v77 < 0) {
          operator delete(__p[0]);
        }
        if (v75 < 0) {
          operator delete(v74);
        }
        if (v73 < 0) {
          operator delete(v72);
        }
        if (v71 < 0) {
          operator delete(v70);
        }
        if (v69 < 0) {
          operator delete(v68);
        }
        if (SHIBYTE(v67) < 0) {
          operator delete((void *)__s);
        }
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        {
          BOOL v24 = (void *)v65.__r_.__value_.__r.__words[0];
          goto LABEL_59;
        }
        goto LABEL_60;
      }
    }
    else if (!v13)
    {
      goto LABEL_18;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    goto LABEL_18;
  }
  if (v11)
  {
    if (a4)
    {
      (*(void (**)(std::string *__return_ptr, char *, uint64_t))(*(void *)v11 + 24))(&v65, v11, a2);
      if ((SHIBYTE(v67) & 0x80000000) == 0)
      {
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = __s;
        std::string::size_type v16 = v67;
LABEL_34:
        v60.__r_.__value_.__r.__words[2] = v16;
        goto LABEL_75;
      }
      std::string::__init_copy_ctor_external(&v60, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
    }
    else
    {
      (*(void (**)(std::string *__return_ptr, char *, uint64_t))(*(void *)v11 + 24))(&v65, v11, a2);
      if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
        std::string::size_type v16 = v65.__r_.__value_.__r.__words[2];
        goto LABEL_34;
      }
      std::string::__init_copy_ctor_external(&v60, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
    }
LABEL_75:
    if (v77 < 0) {
      operator delete(__p[0]);
    }
    if (v75 < 0) {
      operator delete(v74);
    }
    if (v73 < 0) {
      operator delete(v72);
    }
    if (v71 < 0) {
      operator delete(v70);
    }
    if (v69 < 0) {
      operator delete(v68);
    }
    if (SHIBYTE(v67) < 0) {
      operator delete((void *)__s);
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    MEMORY[0x1C8796900](&v62, "var");
    std::string v29 = v11 + 200;
    if (v11[223] < 0)
    {
      std::string::__init_copy_ctor_external(&v65, *((const std::string::value_type **)v11 + 25), *((void *)v11 + 26));
    }
    else
    {
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = *v29;
      v65.__r_.__value_.__r.__words[2] = *((void *)v11 + 27);
    }
    int v30 = v11[247];
    *(std::string *)&v59[4] = v65;
    if (v30 < 0) {
      std::string::__init_copy_ctor_external(&v65, *((const std::string::value_type **)v11 + 28), *((void *)v11 + 29));
    }
    else {
      std::string v65 = *(std::string *)(v11 + 224);
    }
    int v31 = v11[223];
    std::string v47 = v65;
    if (v31 < 0)
    {
      std::string::__init_copy_ctor_external(&v45, *((const std::string::value_type **)v11 + 25), *((void *)v11 + 26));
    }
    else
    {
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *v29;
      v45.__r_.__value_.__r.__words[2] = *((void *)v11 + 27);
    }
    siri::dialogengine::CreateJSONStringVal();
  }
  if (v12)
  {
    MEMORY[0x1C8796900](&v62, "tag");
    siri::dialogengine::SpeakableString::SpeakableString(&v65, (const siri::dialogengine::SpeakableString *)(*(void *)v8 + 8));
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v60, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
    }
    else {
      std::string v60 = v65;
    }
    *(std::string *)&v59[4] = v60;
    *((unsigned char *)&v60.__r_.__value_.__s + 23) = 0;
    v60.__r_.__value_.__s.__data_[0] = 0;
    if (v77 < 0) {
      operator delete(__p[0]);
    }
    if (v75 < 0) {
      operator delete(v74);
    }
    if (v73 < 0) {
      operator delete(v72);
    }
    if (v71 < 0) {
      operator delete(v70);
    }
    if (v69 < 0) {
      operator delete(v68);
    }
    if (SHIBYTE(v67) < 0) {
      operator delete((void *)__s);
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (a6)
    {
      if (SHIBYTE(v59[6]) < 0)
      {
        if (v59[5] != 5) {
          goto LABEL_99;
        }
        if (*(_DWORD *)v59[4] != 1953525564 || *(unsigned char *)(v59[4] + 4) != 62) {
          goto LABEL_99;
        }
      }
      else
      {
        if (HIBYTE(v59[6]) != 5) {
          goto LABEL_99;
        }
        if (LODWORD(v59[4]) != 1953525564 || BYTE4(v59[4]) != 62) {
          goto LABEL_99;
        }
      }
      memset(&v46, 0, sizeof(v46));
      LODWORD(v60.__r_.__value_.__l.__data_) = 0;
      uint64_t v61 = 0;
      *(_OWORD *)&v60.__r_.__value_.__r.__words[1] = 0uLL;
      uint64_t v34 = (v58 - v57) >> 5;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 59) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v36 = v59[0] - v57;
      if ((v59[0] - v57) >> 4 > v35) {
        unint64_t v35 = v36 >> 4;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v37 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      *((void *)&__s + 1) = v59;
      unint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::RegEx>>(v37);
      std::string::size_type v39 = (std::string::size_type)&v38[32 * v34];
      v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
      v65.__r_.__value_.__l.__size_ = v39;
      *(void *)&long long __s = &v38[32 * v40];
      *(_DWORD *)std::string::size_type v39 = v60.__r_.__value_.__l.__data_;
      *(void *)(v39 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + 8) = 0;
      *(_OWORD *)(v39 + 8) = *(_OWORD *)&v60.__r_.__value_.__r.__words[1];
      *(void *)(v39 + 24) = v61;
      *(_OWORD *)&v60.__r_.__value_.__r.__words[1] = 0uLL;
      uint64_t v61 = 0;
      v65.__r_.__value_.__r.__words[2] = v39 + 32;
      std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__swap_out_circular_buffer(&v57, &v65);
      uint64_t v41 = v58;
      std::__split_buffer<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::~__split_buffer((uint64_t)&v65);
      uint64_t v58 = v41;
      v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60.__r_.__value_.__l.__size_;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
      v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
    }
LABEL_99:
    siri::dialogengine::CreateJSONStringVal();
  }
  MEMORY[0x1C8796900](&v62, "text");
  if (a4)
  {
    siri::dialogengine::SpeakableString::SpeakableString(&v65, (const siri::dialogengine::SpeakableString *)(*(void *)v8 + 8));
    if ((SHIBYTE(v67) & 0x80000000) == 0)
    {
      std::string::size_type v27 = v67;
      v60.__r_.__value_.__r.__words[2] = v67;
      long long v28 = __s;
LABEL_121:
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v28;
      *(_OWORD *)&v59[4] = v28;
LABEL_127:
      v59[6] = v27;
      *((unsigned char *)&v60.__r_.__value_.__s + 23) = 0;
      v60.__r_.__value_.__s.__data_[0] = 0;
      if (v77 < 0) {
        operator delete(__p[0]);
      }
      if (v75 < 0) {
        operator delete(v74);
      }
      if (v73 < 0) {
        operator delete(v72);
      }
      if (v71 < 0) {
        operator delete(v70);
      }
      if (v69 < 0) {
        operator delete(v68);
      }
      if (SHIBYTE(v67) < 0) {
        operator delete((void *)__s);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      goto LABEL_99;
    }
    std::string::__init_copy_ctor_external(&v60, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
  }
  else
  {
    siri::dialogengine::SpeakableString::SpeakableString(&v65, (const siri::dialogengine::SpeakableString *)(*(void *)v8 + 8));
    if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      std::string::size_type v27 = v65.__r_.__value_.__r.__words[2];
      v60.__r_.__value_.__r.__words[2] = v65.__r_.__value_.__r.__words[2];
      long long v28 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
      goto LABEL_121;
    }
    std::string::__init_copy_ctor_external(&v60, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  }
  *(_OWORD *)&v59[4] = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
  std::string::size_type v27 = v60.__r_.__value_.__r.__words[2];
  goto LABEL_127;
}

void sub_1C6115768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a67 = a14;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a67);
  STACK[0x2C0] = (unint64_t)&a71;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  STACK[0x2C0] = (unint64_t)&STACK[0x300];
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  std::string v72 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v72;
    operator delete(v72);
  }
  STACK[0x2C0] = (unint64_t)&STACK[0x240];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  STACK[0x2C0] = (unint64_t)&STACK[0x258];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  STACK[0x2C0] = (unint64_t)&STACK[0x270];
  std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  STACK[0x2C0] = (unint64_t)&STACK[0x288];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  char v73 = *(std::__shared_weak_count **)(a13 + 8);
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      *(void *)(v6 - google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
      *(void *)(v6 - 8) = 0;
      *(void *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = i - 32;
    uint64_t v5 = (void **)(i - 24);
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__init_with_size[abi:ne180100]<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*,std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 59) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (void *)result;
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::RegEx>>(a4);
    uint64_t v8 = v7;
    void *v6 = v7;
    v6[1] = v7;
    std::string::size_type v6[2] = &v7[32 * v9];
    uint64_t v13 = v7;
    uint64_t v12 = v7;
    v10[0] = v6 + 2;
    v10[1] = &v12;
    std::string v10[2] = &v13;
    char v11 = 0;
    if (a2 != a3)
    {
      do
      {
        *(_DWORD *)uint64_t v7 = *(_DWORD *)a2;
        *((void *)v7 + 2) = 0;
        *((void *)v7 + 3) = 0;
        *((void *)v7 + 1) = 0;
        std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>(v7 + 8, *(void **)(a2 + 8), *(void **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4);
        uint64_t v7 = v13 + 32;
        v13 += 32;
        a2 += 32;
      }
      while (a2 != a3);
      uint64_t v8 = v7;
    }
    char v11 = 1;
    uint64_t result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>,std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v6[1] = v8;
  }
  return result;
}

void sub_1C6116158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 32;
        uint64_t v7 = (void **)(v4 - 24);
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul> &,std::__bit_iterator<std::vector<BOOL>,false,0ul> &>(uint64_t *result, char a2, uint64_t *a3, char a4)
{
  uint64_t v4 = 1 << a4;
  uint64_t v5 = *result;
  if ((*a3 & (1 << a4)) != 0) {
    uint64_t v6 = *result | (1 << a2);
  }
  else {
    uint64_t v6 = *result & ~(1 << a2);
  }
  *uint64_t result = v6;
  if ((v5 & (1 << a2)) != 0) {
    uint64_t v7 = *a3 | v4;
  }
  else {
    uint64_t v7 = *a3 & ~v4;
  }
  *a3 = v7;
  return result;
}

uint64_t *std::__reverse[abi:ne180100]<std::_ClassicAlgPolicy,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t *result, unsigned int a2, uint64_t *a3, unsigned int a4)
{
  unsigned int v4 = a4;
  uint64_t v5 = a3;
  unsigned int v6 = a2;
  uint64_t v7 = result;
  if (result != a3 || a2 != a4)
  {
    while (1)
    {
      uint64_t v8 = v4 ? 0 : -1;
      v5 += v8;
      if (v4) {
        --v4;
      }
      else {
        unsigned int v4 = 63;
      }
      if (v7 >= v5 && (v7 != v5 || v6 >= v4)) {
        break;
      }
      uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul> &,std::__bit_iterator<std::vector<BOOL>,false,0ul> &>(v7, v6, v5, v4);
      v7 += v6 == 63;
      if (v6 == 63) {
        unsigned int v6 = 0;
      }
      else {
        ++v6;
      }
    }
  }
  return result;
}

uint64_t std::__split_buffer<std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unsigned int v4 = (void **)(i - 24);
    *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualElement>::TypeHandler>((uint64_t)this + 16) = v4;
    unsigned int v6 = v4;
    std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>,std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      do
      {
        uint64_t v4 = v2 - 32;
        unsigned int v6 = (void **)(v2 - 24);
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v6);
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void siri::dialogengine::CreateDAG(siri::dialogengine::Context *a1, uint64_t a2, void ***a3, uint64_t a4, uint64_t *a5, uint64_t a6, unsigned int a7, uint64_t *a8, int *a9, unsigned __int8 a10, int a11)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  char v11 = *a3;
  int v30 = a3[1];
  if (*a3 != v30)
  {
    do
    {
      std::string::size_type v16 = *v11;
      if (*v11)
      {
        if (!a6) {
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v17 = 0;
        unint64_t v19 = 0;
        if (!a6) {
          goto LABEL_12;
        }
      }
      siri::dialogengine::Node::GetCondition((siri::dialogengine::Node *)v16, a1, &v34);
      if (v34.__r_.__value_.__r.__words[0])
      {
        if (!a1
          || (long long v21 = *(siri::dialogengine::Context ***)(v34.__r_.__value_.__r.__words[0] + 144),
              v21 == *(siri::dialogengine::Context ***)(v34.__r_.__value_.__r.__words[0] + 152))
          || (siri::dialogengine::EvaluateConditionEntry(a1, *v21, 0, v20) & 1) == 0)
        {
          if (v34.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v34.__r_.__value_.__l.__size_);
          }
          goto LABEL_48;
        }
      }
      if (v34.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v34.__r_.__value_.__l.__size_);
      }
LABEL_12:
      if (v17)
      {
        memset(&v34, 0, sizeof(v34));
        std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(&v34, v17[26], v17[27], ((char *)v17[27] - (char *)v17[26]) >> 4);
        uint64_t v22 = (std::__shared_weak_count *)a8[1];
        uint64_t v47 = *a8;
        std::string v48 = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        HIDWORD(v26) = a11;
        LOBYTE(v26) = a10;
        siri::dialogengine::CreateDAG(a1, a2, &v34, a4, a5, a6, a7, &v47, a9, v26);
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
        *(void *)&long long v49 = &v34;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
      }
      else if (v18 | v19)
      {
        if (v18) {
          long long v23 = (const siri::dialogengine::SpeakableString *)(v18 + 208);
        }
        else {
          long long v23 = (const siri::dialogengine::SpeakableString *)(v19 + 208);
        }
        siri::dialogengine::SpeakableString::SpeakableString(&v34, v23);
        if (a10) {
          siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::SpeakableString *)&v34, v24, v33);
        }
        else {
          siri::dialogengine::SpeakableString::GetPrintChunks((siri::dialogengine::SpeakableString *)&v34, v24, v33);
        }
        int v25 = (std::__shared_weak_count *)a8[1];
        uint64_t v31 = *a8;
        unsigned int v32 = v25;
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        LODWORD(v26) = a11;
        siri::dialogengine::CreateOutputNodes((uint64_t)a1, (void **)v33, a10, a4, a5, a6, a7, &v31, a9);
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
        if (a2 && v18) {
          siri::dialogengine::CreateJSONObjectFromAdjacencyList(a5);
        }
        *(void *)&long long v49 = v33;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
        if (v46 < 0) {
          operator delete(__p);
        }
        if (v44 < 0) {
          operator delete(v43);
        }
        if (v42 < 0) {
          operator delete(v41);
        }
        if (v40 < 0) {
          operator delete(v39);
        }
        if (v38 < 0) {
          operator delete(v37);
        }
        if (v36 < 0) {
          operator delete(v35);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
      }
LABEL_48:
      v11 += 2;
    }
    while (v11 != v30);
  }
}

void sub_1C6116AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(v43 - 192);
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  *(void *)(v43 - 192) = &a30;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 192));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a34);
  *(void *)(v43 - 192) = &a38;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 192));
  siri::dialogengine::SpeakableString::~SpeakableString(&a41);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CreateOutputNodes(uint64_t a1, void **a2, int a3, int a4, uint64_t *a5, uint64_t a6, int a7, uint64_t *a8, int *a9)
{
  uint64_t v143 = *MEMORY[0x1E4F143B8];
  memset(&v141, 0, sizeof(v141));
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(&v138, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  uint64_t v11 = v138;
  if (v139 == v138) {
    goto LABEL_291;
  }
  unint64_t v12 = 0;
  char v69 = 0;
  char v13 = 0;
  int v66 = -1;
  *(void *)char v71 = a5;
  do
  {
    long long v14 = *(_OWORD *)(v11 + 16 * v12);
    unint64_t v15 = *(std::__shared_weak_count **)(v11 + 16 * v12 + 8);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = v14;
    if ((void)v14)
    {
    }
    else
    {
      unint64_t v18 = 0;
      uint64_t v17 = 0;
      unint64_t v19 = 0;
    }
    memset(&v137, 0, sizeof(v137));
    if (v12)
    {
      if (v17) {
        goto LABEL_10;
      }
    }
    else
    {
      v69 |= *a8 != 0;
      if (v17)
      {
LABEL_10:
        std::string::size_type size = HIBYTE(v141.__r_.__value_.__r.__words[2]);
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v141.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v69)
          {
            uint64_t v21 = a8[1];
            uint64_t v134 = *a8;
            uint64_t v135 = v21;
            if (v21) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v134 = 0;
            uint64_t v135 = 0;
          }
          siri::dialogengine::CreateNewNode((int)&v136, (int)a5, a4, (void *)v16, (uint64_t)&v134, *a9, 1);
        }
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v24 = a8[1];
        v132[0] = *a8;
        v132[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v25 = *a9;
        if (v17[223] < 0) {
          std::string::__init_copy_ctor_external(&v116, *((const std::string::value_type **)v17 + 25), *((void *)v17 + 26));
        }
        else {
          std::string v116 = *(std::string *)(v17 + 200);
        }
        siri::dialogengine::CreateNewNode((int)&v133, v71[0], a4, (void *)v16, (uint64_t)v132, v25, 0);
      }
    }
    if (v18)
    {
      std::string::size_type v22 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
      if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v22 = v141.__r_.__value_.__l.__size_;
      }
      if (v22)
      {
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v23 = a8[1];
        v129[0] = *a8;
        v129[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
        siri::dialogengine::CreateNewNode((int)&v130, (int)a5, a4, (void *)v16, (uint64_t)v129, *a9, 1);
      }
      if (a3)
      {
        (*((void (**)(std::string *__return_ptr, const std::string::value_type **, uint64_t))*v18 + 3))(&v116, v18, a1);
        if ((SHIBYTE(v118) & 0x80000000) == 0)
        {
          *(_OWORD *)&v131.__r_.__value_.__l.__data_ = __s;
          std::string::size_type v29 = v118;
LABEL_76:
          v131.__r_.__value_.__r.__words[2] = v29;
          goto LABEL_79;
        }
        std::string::__init_copy_ctor_external(&v131, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
      }
      else
      {
        (*((void (**)(std::string *__return_ptr, const std::string::value_type **, uint64_t))*v18 + 3))(&v116, v18, a1);
        if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          *(_OWORD *)&v131.__r_.__value_.__l.__data_ = *(_OWORD *)&v116.__r_.__value_.__l.__data_;
          std::string::size_type v29 = v116.__r_.__value_.__r.__words[2];
          goto LABEL_76;
        }
        std::string::__init_copy_ctor_external(&v131, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
      }
LABEL_79:
      if (v128 < 0) {
        operator delete(__p);
      }
      if (v126 < 0) {
        operator delete(v125);
      }
      if (v124 < 0) {
        operator delete(v123);
      }
      if (v122 < 0) {
        operator delete(v121);
      }
      if (v120 < 0) {
        operator delete(v119);
      }
      if (SHIBYTE(v118) < 0) {
        operator delete((void *)__s);
      }
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v116.__r_.__value_.__l.__data_);
      }
      std::string::size_type v30 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v30 = v131.__r_.__value_.__l.__size_;
      }
      if (v30)
      {
        if (!v15) {
          goto LABEL_98;
        }
      }
      else
      {
        if (*((char *)v18 + 223) < 0) {
          std::string::__init_copy_ctor_external(&v116, v18[25], (std::string::size_type)v18[26]);
        }
        else {
          std::string v116 = *(std::string *)(v18 + 25);
        }
        unsigned int v32 = std::string::insert(&v116, 0, "$");
        std::string::size_type v33 = v32->__r_.__value_.__r.__words[0];
        v142.__r_.__value_.__r.__words[0] = v32->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v142.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
        char v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        v131.__r_.__value_.__r.__words[0] = v33;
        v131.__r_.__value_.__l.__size_ = v142.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v131.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v142.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v131.__r_.__value_.__s + 23) = v34;
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v116.__r_.__value_.__l.__data_);
        }
        LODWORD(a5) = v71[0];
        if (!v15)
        {
LABEL_98:
          uint64_t v31 = a8[1];
          v114[0] = *a8;
          v114[1] = v31;
          if (v31) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::CreateNewNode((int)&v115, (int)a5, a4, (void *)v16, (uint64_t)v114, *a9, 2);
        }
      }
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_98;
    }
    if (!v19)
    {
      uint64_t v26 = (const siri::dialogengine::SpeakableString *)(v16 + 8);
      if (a3)
      {
        siri::dialogengine::SpeakableString::SpeakableString(&v92, v26);
        std::string::size_type v27 = (std::string *)v93;
        if (v94 < 0)
        {
          std::string::__init_copy_ctor_external(&v116, (const std::string::value_type *)v93[0], (std::string::size_type)v93[1]);
          goto LABEL_134;
        }
      }
      else
      {
        siri::dialogengine::SpeakableString::SpeakableString(&v79, v26);
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v116, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
LABEL_134:
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v137.__r_.__value_.__l.__data_);
          }
          std::string v137 = v116;
          *((unsigned char *)&v116.__r_.__value_.__s + 23) = 0;
          v116.__r_.__value_.__s.__data_[0] = 0;
          if (a3)
          {
            if (v104 < 0) {
              operator delete(v103);
            }
            if (v102 < 0) {
              operator delete(v101);
            }
            if (v100 < 0) {
              operator delete(v99);
            }
            if (v98 < 0) {
              operator delete(v97);
            }
            if (v96 < 0) {
              operator delete(v95);
            }
            if (v94 < 0) {
              operator delete(v93[0]);
            }
            if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_166;
            }
            char v40 = (void *)v92.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (v91 < 0) {
              operator delete(v90);
            }
            if (v89 < 0) {
              operator delete(v88);
            }
            if (v87 < 0) {
              operator delete(v86);
            }
            if (v85 < 0) {
              operator delete(v84);
            }
            if (v83 < 0) {
              operator delete(v82);
            }
            if (v81 < 0) {
              operator delete(v80);
            }
            if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_166;
            }
            char v40 = (void *)v79.__r_.__value_.__r.__words[0];
          }
          operator delete(v40);
LABEL_166:
          if (v12) {
            BOOL v41 = 1;
          }
          else {
            BOOL v41 = *a8 == 0;
          }
          char v42 = !v41;
          v13 |= v42;
          if ((v13 & 1) != 0
            && !((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? HIBYTE(v137.__r_.__value_.__r.__words[2])
               : v137.__r_.__value_.__l.__size_))
          {
            std::string::append(&v141, " ");
            char v13 = 1;
            goto LABEL_103;
          }
          if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v44 = &v137;
          }
          else {
            char v44 = (std::string *)v137.__r_.__value_.__r.__words[0];
          }
          if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v45 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v45 = v137.__r_.__value_.__l.__size_;
          }
LABEL_183:
          std::string::append(&v141, (const std::string::value_type *)v44, v45);
          goto LABEL_103;
        }
        std::string::size_type v27 = &v79;
      }
      std::string v116 = *v27;
      goto LABEL_134;
    }
    siri::dialogengine::SpeakableString::SpeakableString(&v116, (const siri::dialogengine::SpeakableString *)(v16 + 8));
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v131, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
    }
    else {
      std::string v131 = v116;
    }
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v137.__r_.__value_.__l.__data_);
    }
    std::string v137 = v131;
    *((unsigned char *)&v131.__r_.__value_.__s + 23) = 0;
    v131.__r_.__value_.__s.__data_[0] = 0;
    if (v128 < 0) {
      operator delete(__p);
    }
    if (v126 < 0) {
      operator delete(v125);
    }
    if (v124 < 0) {
      operator delete(v123);
    }
    if (v122 < 0) {
      operator delete(v121);
    }
    if (v120 < 0) {
      operator delete(v119);
    }
    if (SHIBYTE(v118) < 0) {
      operator delete((void *)__s);
    }
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v116.__r_.__value_.__l.__data_);
    }
    if (!a7)
    {
LABEL_189:
      std::string::basic_string[abi:ne180100]<0>(&v131, "\"");
      std::string::basic_string[abi:ne180100]<0>(&v142, "");
      siri::dialogengine::StringReplace((uint64_t)&v137, (char *)&v131, (uint64_t)&v142, 0, &v116);
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v137.__r_.__value_.__l.__data_);
      }
      std::string v137 = v116;
      *((unsigned char *)&v116.__r_.__value_.__s + 23) = 0;
      v116.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v142.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v131.__r_.__value_.__l.__data_);
      }
      if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v44 = &v137;
      }
      else {
        char v44 = (std::string *)v137.__r_.__value_.__r.__words[0];
      }
      if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v45 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v45 = v137.__r_.__value_.__l.__size_;
      }
      goto LABEL_183;
    }
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v137.__r_.__value_.__l.__size_ != 5)
      {
        if (v137.__r_.__value_.__l.__size_ != 6) {
          goto LABEL_189;
        }
        long long v28 = (std::string *)v137.__r_.__value_.__r.__words[0];
        goto LABEL_120;
      }
      if (*(_DWORD *)v137.__r_.__value_.__l.__data_ != 1953525564
        || *(unsigned char *)(v137.__r_.__value_.__r.__words[0] + 4) != 62)
      {
        goto LABEL_189;
      }
LABEL_206:
      int v66 = *a9;
      if (*a9)
      {
        if (!v12) {
          goto LABEL_213;
        }
        std::string v48 = *(const void **)(v138 + 16 * (v12 - 1));
        if (v48)
        {
          if (v49)
          {
            siri::dialogengine::SpeakableString::SpeakableString(&v116, (const siri::dialogengine::SpeakableString *)(v49 + 8));
            if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v131, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
            }
            else {
              std::string v131 = v116;
            }
            if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
            {
              BOOL v55 = v131.__r_.__value_.__l.__size_ == 6
                 && *(_DWORD *)v131.__r_.__value_.__l.__data_ == 1886334780
                 && *(_WORD *)(v131.__r_.__value_.__r.__words[0] + 4) == 15988;
              operator delete(v131.__r_.__value_.__l.__data_);
            }
            else
            {
              BOOL v55 = SHIBYTE(v131.__r_.__value_.__r.__words[2]) == 6
                 && LODWORD(v131.__r_.__value_.__l.__data_) == 1886334780
                 && WORD2(v131.__r_.__value_.__r.__words[0]) == 15988;
            }
            if (v128 < 0) {
              operator delete(__p);
            }
            if (v126 < 0) {
              operator delete(v125);
            }
            if (v124 < 0) {
              operator delete(v123);
            }
            if (v122 < 0) {
              operator delete(v121);
            }
            if (v120 < 0) {
              operator delete(v119);
            }
            if (SHIBYTE(v118) < 0) {
              operator delete((void *)__s);
            }
            if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v116.__r_.__value_.__l.__data_);
            }
            if (v55)
            {
              if (v15) {
                atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v57 = a8[1];
              v113[0] = *a8;
              v113[1] = v57;
              if (v57) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v58 = *a9;
              std::string::basic_string[abi:ne180100]<0>(&v116, "sequential_opt_dummy_node");
              siri::dialogengine::CreateNewNode((int)&v131, v71[0], a4, (void *)v16, (uint64_t)v113, v58, 0);
            }
          }
        }
      }
      else if (!v12)
      {
LABEL_213:
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v50 = a8[1];
        v111[0] = *a8;
        v111[1] = v50;
        if (v50) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v51 = *a9;
        std::string::basic_string[abi:ne180100]<0>(&v116, "dummy_node");
        siri::dialogengine::CreateNewNode((int)&v112, v71[0], a4, (void *)v16, (uint64_t)v111, v51, 0);
      }
      std::string::size_type v59 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
      if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v59 = v141.__r_.__value_.__l.__size_;
      }
      if (v59)
      {
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v60 = a8[1];
        v109[0] = *a8;
        v109[1] = v60;
        if (v60) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
        }
        siri::dialogengine::CreateNewNode((int)&v110, v71[0], a4, (void *)v16, (uint64_t)v109, *a9, 1);
      }
      a5 = *(uint64_t **)v71;
      goto LABEL_103;
    }
    if (HIBYTE(v137.__r_.__value_.__r.__words[2]) == 5)
    {
      if (LODWORD(v137.__r_.__value_.__l.__data_) != 1953525564 || v137.__r_.__value_.__s.__data_[4] != 62) {
        goto LABEL_189;
      }
      goto LABEL_206;
    }
    if (HIBYTE(v137.__r_.__value_.__r.__words[2]) != 6) {
      goto LABEL_189;
    }
    long long v28 = &v137;
LABEL_120:
    int data = (int)v28->__r_.__value_.__l.__data_;
    int v36 = WORD2(v28->__r_.__value_.__r.__words[0]);
    if (data != 1886334780 || v36 != 15988) {
      goto LABEL_189;
    }
    std::string::size_type v38 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
    if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v38 = v141.__r_.__value_.__l.__size_;
    }
    if (v38)
    {
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v39 = a8[1];
      v107[0] = *a8;
      v107[1] = v39;
      if (v39) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
      }
      siri::dialogengine::CreateNewNode((int)&v108, (int)a5, a4, (void *)v16, (uint64_t)v107, *a9, 1);
    }
    if (v12 == ((v139 - v138) >> 4) - 1)
    {
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v52 = a8[1];
      v105[0] = *a8;
      v105[1] = v52;
      if (v52) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v53 = *a9;
      std::string::basic_string[abi:ne180100]<0>(&v116, "closing_dummy_node");
      siri::dialogengine::CreateNewNode((int)&v106, (int)a5, a4, (void *)v16, (uint64_t)v105, v53, 0);
    }
    siri::dialogengine::AddNodeToAdjList(*a5, v66, *a9);
LABEL_103:
    if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v15) {
        goto LABEL_106;
      }
LABEL_105:
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      goto LABEL_106;
    }
    operator delete(v137.__r_.__value_.__l.__data_);
    if (v15) {
      goto LABEL_105;
    }
LABEL_106:
    ++v12;
    uint64_t v11 = v138;
  }
  while (v12 < (v139 - v138) >> 4);
  std::string::size_type v61 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
  if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v61 = v141.__r_.__value_.__l.__size_;
  }
  if (v61)
  {
    if (v13)
    {
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v141.__r_.__value_.__l.__size_ == 1)
        {
          std::string v62 = (std::string *)v141.__r_.__value_.__r.__words[0];
          goto LABEL_282;
        }
      }
      else if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) == 1)
      {
        std::string v62 = &v141;
LABEL_282:
        if (v62->__r_.__value_.__s.__data_[0] == 32)
        {
          if (v69)
          {
            uint64_t v63 = a8[1];
            uint64_t v76 = *a8;
            uint64_t v77 = v63;
            if (v63) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v63 + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v76 = 0;
            uint64_t v77 = 0;
          }
          uint64_t v65 = *a9;
          std::string::basic_string[abi:ne180100]<0>(&v116, "");
          siri::dialogengine::CreateNewNode((int)&v78, (int)a5, a4, 0, (uint64_t)&v76, v65, 1);
        }
      }
    }
    if (v69)
    {
      uint64_t v64 = a8[1];
      uint64_t v73 = *a8;
      uint64_t v74 = v64;
      if (v64) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v73 = 0;
      uint64_t v74 = 0;
    }
    siri::dialogengine::CreateNewNode((int)&v75, (int)a5, a4, 0, (uint64_t)&v73, *a9, 1);
  }
LABEL_291:
  v116.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
}

void sub_1C6118638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&STACK[0x310]);
  if (*(char *)(v20 - 185) < 0) {
    operator delete(*(void **)(v20 - 208));
  }
  if ((a19 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  STACK[0x310] = v20 - 176;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);
  if (*(char *)(v20 - 129) < 0) {
    operator delete(*(void **)(v20 - 152));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetAllPaths(uint64_t a1, int a2, unsigned int a3, int **a4, void *a5, void *a6, uint64_t a7, unsigned int a8, int *a9, int *a10)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (a2 != a3)
  {
    uint64_t v31 = *a5 + 24 * a2;
    unsigned int v32 = *(unsigned int **)v31;
    char v46 = *(unsigned int **)(v31 + 8);
    if (*(unsigned int **)v31 != v46)
    {
      std::string::size_type v33 = a4 + 2;
      char v34 = a4[1];
      do
      {
        uint64_t v35 = a7;
        uint64_t v36 = *v32;
        ++*a9;
        if ((unint64_t)v34 >= *v33)
        {
          std::string::size_type v38 = *a4;
          uint64_t v39 = v34 - *a4;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62) {
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v41 = *v33 - (void)v38;
          if (v41 >> 1 > v40) {
            unint64_t v40 = v41 >> 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          if (v42)
          {
            uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v42);
            std::string::size_type v38 = *a4;
            char v34 = a4[1];
          }
          else
          {
            uint64_t v43 = 0;
          }
          char v44 = &v43[4 * v39];
          *(_DWORD *)char v44 = v36;
          unint64_t v37 = (int *)(v44 + 4);
          while (v34 != v38)
          {
            int v45 = *--v34;
            *((_DWORD *)v44 - 1) = v45;
            v44 -= 4;
          }
          *a4 = (int *)v44;
          a4[1] = v37;
          a4[2] = (int *)&v43[4 * v42];
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          *char v34 = v36;
          unint64_t v37 = v34 + 1;
        }
        a4[1] = v37;
        if (*a9 > 300000000) {
          break;
        }
        if (*a10 > 2500) {
          break;
        }
        a7 = v35;
        siri::dialogengine::GetAllPaths(a1, v36, a3, a4, a5, a6, v35, a8, a9, a10);
        char v34 = a4[1] - 1;
        a4[1] = v34;
        ++v32;
      }
      while (v32 != v46);
    }
    return;
  }
  ++*a10;
  memset(&v53, 0, sizeof(v53));
  memset(v52, 0, sizeof(v52));
  long long v14 = *a4;
  unint64_t v15 = a4[1];
  if (*a4 == v15) {
    goto LABEL_81;
  }
  do
  {
    uint64_t v16 = 16 * *v14;
    uint64_t v17 = *(void *)(*a6 + v16);
    if (*(_DWORD *)(v17 + 4))
    {
      uint64_t v20 = *(const std::string::value_type **)(v17 + 8);
      uint64_t v18 = v17 + 8;
      unint64_t v19 = v20;
      int v21 = *(char *)(v18 + 23);
      if (v21 >= 0) {
        std::string::size_type v22 = (const std::string::value_type *)v18;
      }
      else {
        std::string::size_type v22 = v19;
      }
      if (v21 >= 0) {
        std::string::size_type v23 = *(unsigned __int8 *)(v18 + 23);
      }
      else {
        std::string::size_type v23 = *(void *)(v18 + 8);
      }
      std::string::append(&v53, v22, v23);
    }
    *(_OWORD *)&v51.__r_.__value_.__r.__words[1] = 0uLL;
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51.__r_.__value_.__l.__size_;
    if (a8) {
      goto LABEL_54;
    }
    v55[0] = 0;
    v55[1] = 0;
    uint64_t v56 = 0;
    memset(&v54, 0, sizeof(v54));
    int v24 = *(_DWORD *)(*(void *)(*a6 + v16) + 4);
    if (v24 == 2)
    {
      uint64_t v25 = "variable";
      goto LABEL_16;
    }
    if (v24 == 1)
    {
      uint64_t v25 = "text";
LABEL_16:
      MEMORY[0x1C8796900](v55, v25);
      std::string::operator=(&v54, (const std::string *)(*(void *)(*a6 + v16) + 8));
      std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v54.__r_.__value_.__l.__size_;
      }
      if (size) {
        siri::dialogengine::CreateJSONStringVal();
      }
    }
    std::string::size_type v27 = (void *)HIBYTE(v56);
    if (v56 < 0) {
      std::string::size_type v27 = v55[1];
    }
    if (v27) {
      siri::dialogengine::CreateJSONStringVal();
    }
    uint64_t v28 = *(void *)(*a6 + v16);
    if (*(char *)(v28 + 55) < 0)
    {
      if (*(void *)(v28 + 40)) {
LABEL_26:
      }
        siri::dialogengine::CreateJSONStringVal();
    }
    else if (*(unsigned char *)(v28 + 55))
    {
      goto LABEL_26;
    }
    if ((*(unsigned char *)(v28 + 55) & 0x80) != 0)
    {
      if (*(void *)(v28 + 40)) {
        goto LABEL_32;
      }
    }
    else if (*(unsigned char *)(v28 + 55))
    {
LABEL_32:
      siri::dialogengine::CreateJSONStringVal();
    }
    if (*(char *)(v28 + 103) < 0)
    {
      if (*(void *)(v28 + 88)) {
LABEL_37:
      }
        siri::dialogengine::CreateJSONStringVal();
    }
    else if (*(unsigned char *)(v28 + 103))
    {
      goto LABEL_37;
    }
    if (*(char *)(v28 + 127) < 0)
    {
      if (*(void *)(v28 + 112)) {
LABEL_42:
      }
        siri::dialogengine::CreateJSONStringVal();
    }
    else if (*(unsigned char *)(v28 + 127))
    {
      goto LABEL_42;
    }
    if (*(char *)(v28 + 151) < 0)
    {
      if (*(void *)(v28 + 136)) {
LABEL_47:
      }
        siri::dialogengine::CreateJSONStringVal();
    }
    else if (*(unsigned char *)(v28 + 151))
    {
      goto LABEL_47;
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56) < 0) {
      operator delete(v55[0]);
    }
    if (v51.__r_.__value_.__r.__words[2]) {
      siri::dialogengine::CreateJSONObjectVal();
    }
LABEL_54:
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)v51.__r_.__value_.__l.__size_);
    ++v14;
  }
  while (v14 != v15);
  std::string::size_type v29 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v29 = v53.__r_.__value_.__l.__size_;
  }
  if (v29)
  {
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v55, (uint64_t)&v53);
    siri::dialogengine::Dialog::ProcessString((siri::dialogengine::Context *)v55, (uint64_t)__p);
  }
LABEL_81:
  __p[0] = v52;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
}

void sub_1C61194F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,void *a54)
{
  a54 = &a43;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  if (a51 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::CreateNewNode(int a1, int a2, int a3, void *lpsrc, uint64_t a5, uint64_t a6, int a7)
{
  if (lpsrc)
  {
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  memset(&v14[6], 0, 7);
  memset(&v14[4], 0, 7);
  memset(&v14[2], 0, 7);
  memset(v14, 0, 7);
  memset(&v13, 0, sizeof(v13));
  if (a7 || !v10)
  {
    if (a7 == 2 && v11)
    {
      if (v11[247] < 0) {
        std::string::__init_copy_ctor_external(&v12, *((const std::string::value_type **)v11 + 28), *((void *)v11 + 29));
      }
      else {
        std::string v12 = *(std::string *)(v11 + 224);
      }
      _OWORD v14[2] = v12.__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)&v14[2] + 3) = *(_DWORD *)((char *)&v12.__r_.__value_.__r.__words[2] + 3);
      if (v11[223] < 0) {
        std::string::__init_copy_ctor_external(&v12, *((const std::string::value_type **)v11 + 25), *((void *)v11 + 26));
      }
      else {
        std::string v12 = *(std::string *)(v11 + 200);
      }
      v14[0] = v12.__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v14 + 3) = *(_DWORD *)((char *)&v12.__r_.__value_.__r.__words[2] + 3);
    }
  }
  else
  {
    if (v10[247] < 0) {
      std::string::__init_copy_ctor_external(&v12, *((const std::string::value_type **)v10 + 28), *((void *)v10 + 29));
    }
    else {
      std::string v12 = *(std::string *)(v10 + 224);
    }
    v14[6] = v12.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)&v14[6] + 3) = *(_DWORD *)((char *)&v12.__r_.__value_.__r.__words[2] + 3);
    if (v10[223] < 0) {
      std::string::__init_copy_ctor_external(&v12, *((const std::string::value_type **)v10 + 25), *((void *)v10 + 26));
    }
    else {
      std::string v12 = *(std::string *)(v10 + 200);
    }
    v14[4] = v12.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)&v14[4] + 3) = *(_DWORD *)((char *)&v12.__r_.__value_.__r.__words[2] + 3);
  }
  if (*(void *)a5) {
    std::string::operator=(&v13, (const std::string *)(*(void *)a5 + 56));
  }
  operator new();
}

void sub_1C6119E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, int a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::AddNodeToAdjList(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = (char **)(a1 + 24 * a2);
  unsigned int v6 = *v5;
  uint64_t v8 = v5 + 1;
  uint64_t v7 = v5[1];
  if (*v5 == v7) {
    goto LABEL_7;
  }
  uint64_t v9 = 0;
  uint64_t v10 = *v5;
  do
  {
    int v11 = *(_DWORD *)v10;
    v10 += 4;
    if (v11 == a3) {
      ++v9;
    }
  }
  while (v10 != v7);
  if (!v9)
  {
LABEL_7:
    uint64_t v12 = a1 + 24 * a2;
    unint64_t v15 = *(void *)(v12 + 16);
    long long v14 = (char **)(v12 + 16);
    unint64_t v13 = v15;
    if ((unint64_t)v7 >= v15)
    {
      uint64_t v17 = (v7 - v6) >> 2;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v19 = v13 - (void)v6;
      if (v19 >> 1 > v18) {
        unint64_t v18 = v19 >> 1;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20)
      {
        int v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v14, v20);
        uint64_t v7 = *v8;
        unsigned int v6 = *v5;
      }
      else
      {
        int v21 = 0;
      }
      std::string::size_type v22 = &v21[4 * v17];
      std::string::size_type v23 = &v21[4 * v20];
      *(_DWORD *)std::string::size_type v22 = a3;
      uint64_t v16 = v22 + 4;
      while (v7 != v6)
      {
        int v24 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v22 - 1) = v24;
        v22 -= 4;
      }
      *uint64_t v5 = v22;
      *uint64_t v8 = v16;
      *long long v14 = v23;
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v7 = a3;
      uint64_t v16 = v7 + 4;
    }
    *uint64_t v8 = v16;
  }
}

void siri::dialogengine::ConnectNodeWithPhraseChildren(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  if (*a2 && *a4 != a4[1])
  {
    uint64_t v7 = *a4 + 24 * *(int *)*a2;
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 2);
    uint64_t v8 = v18;
    uint64_t v9 = v19;
    if (v18 != v19)
    {
      while (1)
      {
        uint64_t v10 = *v8;
        long long v11 = *(_OWORD *)(*a3 + 16 * v10);
        uint64_t v12 = *(std::__shared_weak_count **)(*a3 + 16 * v10 + 8);
        if (v12)
        {
          p_shared_owners = &v12->__shared_owners_;
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          if (*(_DWORD *)(v11 + 4))
          {
            long long v14 = v11;
            atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
            goto LABEL_9;
          }
          long long v17 = v11;
          atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
        }
        else
        {
          if (*(_DWORD *)(v11 + 4))
          {
            long long v14 = (unint64_t)v11;
LABEL_9:
            siri::dialogengine::FindTerminalNode(&v15, (int **)&v14, a4, a3);
            if (v12) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
            if (v15 && *v15 != a1) {
              siri::dialogengine::AddNodeToAdjList(*a4, *v15, a1);
            }
            if (v16) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
            if (!v12) {
              goto LABEL_23;
            }
            goto LABEL_22;
          }
          long long v17 = (unint64_t)v11;
        }
        siri::dialogengine::ConnectNodeWithPhraseChildren(a1, &v17, a3, a4);
        if (v12)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_22:
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
LABEL_23:
        if (++v8 == v9)
        {
          uint64_t v8 = v18;
          break;
        }
      }
    }
    if (v8)
    {
      uint64_t v19 = v8;
      operator delete(v8);
    }
  }
}

void sub_1C611A278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::FindTerminalNode(void *a1, int **a2, void *a3, void *a4)
{
  uint64_t v5 = **a2;
  uint64_t v6 = *(void *)(*a4 + 16 * v5);
  uint64_t v7 = (uint64_t *)(*a3 + 24 * (int)v5);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  BOOL v10 = (*(_DWORD *)(v6 + 4) - 1) <= 1 && v8 == v9;
  if (v10)
  {
    uint64_t v19 = *(void *)(*a4 + 16 * v5 + 8);
    *a1 = v6;
    a1[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    if (v8 != v9)
    {
      unint64_t v13 = 0;
      uint64_t v14 = v8 + 4;
      do
      {
        long long v15 = *(_OWORD *)(*a4 + 16 * *(int *)(v14 - 4));
        long long v20 = v15;
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v15 + 1);
        if (*((void *)&v15 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        siri::dialogengine::FindTerminalNode(v21, &v20, a3, a4);
        uint64_t v18 = v21[0];
        long long v17 = (std::__shared_weak_count *)v21[1];
        *a1 = v21[0];
        a1[1] = v17;
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        if (v18) {
          break;
        }
        unint64_t v13 = v17;
        BOOL v10 = v14 == v9;
        v14 += 4;
      }
      while (!v10);
    }
  }
}

void sub_1C611A3F0(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<siri::dialogengine::OutputNode>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(char *)(result + 151) < 0) {
      operator delete(*(void **)(result + 128));
    }
    if (*(char *)(v1 + 127) < 0) {
      operator delete(*(void **)(v1 + 104));
    }
    if (*(char *)(v1 + 103) < 0) {
      operator delete(*(void **)(v1 + 80));
    }
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::OutputNode *,std::shared_ptr<siri::dialogengine::OutputNode>::__shared_ptr_default_delete<siri::dialogengine::OutputNode,siri::dialogengine::OutputNode>,std::allocator<siri::dialogengine::OutputNode>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::OutputNode *,std::shared_ptr<siri::dialogengine::OutputNode>::__shared_ptr_default_delete<siri::dialogengine::OutputNode,siri::dialogengine::OutputNode>,std::allocator<siri::dialogengine::OutputNode>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<siri::dialogengine::OutputNode>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<siri::dialogengine::OutputNode *,std::shared_ptr<siri::dialogengine::OutputNode>::__shared_ptr_default_delete<siri::dialogengine::OutputNode,siri::dialogengine::OutputNode>,std::allocator<siri::dialogengine::OutputNode>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::GetAllSchemasAndGlobalParams(siri::dialogengine *this, siri::dialogengine::Context *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  v14[1] = 0;
  v14[0] = 0;
  void v13[2] = v14;
  v13[1] = 0;
  v13[0] = 0;
  std::string v12[2] = v13;
  v12[1] = 0;
  v12[0] = 0;
  std::string v11[2] = v12;
  v11[0] = 0;
  void v10[3] = v11;
  v11[1] = 0;
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v15, (siri::dialogengine *)((char *)this + 8));
  long long v8 = 0uLL;
  uint64_t v9 = 0;
  std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v8, (uint64_t)v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16.__r_.__value_.__l.__size_ - v16.__r_.__value_.__r.__words[0]) >> 5));
  siri::dialogengine::GetBaseDir((long long **)&v8, &__str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "schema");
  siri::dialogengine::JoinPath((uint64_t)&__str, (uint64_t)&__p, (uint64_t)v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&v15);
  siri::dialogengine::ListDir((const char *)v10, (uint64_t)&v8);
  if ((void)v8 != *((void *)&v8 + 1))
  {
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    v6[0] = 0;
    v6[1] = 0;
    uint64_t v5 = v6;
    siri::dialogengine::JoinPath((uint64_t)v10, v8, (uint64_t)&v15);
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    std::string::basic_string[abi:ne180100]<0>(&v4, "");
    siri::dialogengine::ParseCATSchemaYAML((int)this, (const std::string *)&v15, &__str);
  }
  long long v15 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  siri::dialogengine::Context::GetGlobalParameters(this, (uint64_t)&__str);
  siri::dialogengine::Context::GetGlobalParameters(this, (uint64_t)&v8);
  if ((long long *)v8 != (long long *)((char *)&v8 + 8))
  {
    siri::dialogengine::Parameter::Parameter((siri::dialogengine::Parameter *)&v15, (const siri::dialogengine::Parameter *)(v8 + 56));
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v16;
    }
    siri::dialogengine::CreateObjectPropertyEntry((siri::dialogengine *)&v5, (siri::dialogengine::PropertyBase *)&v15);
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy(*((void **)&v8 + 1));
  siri::dialogengine::CreateJSONObjectVal();
}

void sub_1C611B210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46)
{
  for (uint64_t i = 120; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(v46 + i);
  std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy(a46);
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)STACK[0x268]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)STACK[0x280]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)STACK[0x298]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CreateObjectPropertyEntry(siri::dialogengine *this, siri::dialogengine::PropertyBase *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string v6 = *(std::string *)((char *)a2 + 8);
  }
  if (*((char *)a2 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else {
    std::string v5 = *(std::string *)((char *)a2 + 56);
  }
  if (*((char *)a2 + 103) < 0) {
    std::string::__init_copy_ctor_external(&v4, *((const std::string::value_type **)a2 + 10), *((void *)a2 + 11));
  }
  else {
    std::string v4 = *(std::string *)((char *)a2 + 80);
  }
  if (*((char *)a2 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v3, *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else {
    std::string v3 = *(std::string *)((char *)a2 + 32);
  }
  siri::dialogengine::CreateJSONStringVal();
}

void sub_1C611B9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  _Unwind_Resume(exception_object);
}

void YAML::ScanScalar(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  BOOL v6 = *(_DWORD *)(a2 + 20) == 2;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!*(void *)a2)
  {
    {
      YAML::Exp::Empty(void)::e = 0;
      word_1EA3DA5BC = 0;
      qword_1EA3DA5C8 = 0;
      unk_1EA3DA5D0 = 0;
      qword_1EA3DA5C0 = 0;
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Empty(void)::e, &dword_1C5C1E000);
    }
    *(void *)a2 = &YAML::Exp::Empty(void)::e;
  }
  int v83 = 0;
  int v81 = 0;
  BOOL v7 = 0;
  int v8 = 0;
  char v9 = 0;
  uint64_t v80 = -1;
LABEL_5:
  int v82 = v8;
  BOOL v10 = v7;
  while (1)
  {
    BOOL v11 = v10;
    if (!YAML::Stream::operator BOOL((void *)a1)) {
      goto LABEL_135;
    }
LABEL_7:
    std::string::size_type size = (a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(a3->__r_.__value_.__r.__words[2])
         : a3->__r_.__value_.__l.__size_;
    while (1)
    {
      uint64_t v13 = *(void *)a2;
      *(void *)&long long __p = 0;
      *((void *)&__p + 1) = a1;
      uint64_t v14 = YAML::RegEx::Match<YAML::StreamCharSource>(v13, (unint64_t *)&__p);
      if ((v14 & 0x80000000) == 0
        || (YAML::Exp::Break((YAML::Exp *)v14),
            *(void *)&long long __p = 0,
            *((void *)&__p + 1) = a1,
            (YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, (unint64_t *)&__p) & 0x80000000) == 0)
        || !YAML::Stream::operator BOOL((void *)a1))
      {
LABEL_44:
        int v23 = 0;
        goto LABEL_45;
      }
      if (!*(_DWORD *)(a1 + 16))
      {
        {
          if (v21)
          {
            YAML::Exp::DocStart(v21);
            YAML::Exp::DocEnd(v22);
            YAML::operator|(YAML::Exp::DocStart(void)::e, YAML::Exp::DocEnd(void)::e, (uint64_t)&YAML::Exp::DocIndicator(void)::e);
            __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::DocIndicator(void)::e, &dword_1C5C1E000);
          }
        }
        *(void *)&long long __p = 0;
        *((void *)&__p + 1) = a1;
        if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::DocIndicator(void)::e, (unint64_t *)&__p) & 0x80000000) == 0)
        {
          int v15 = *(_DWORD *)(a2 + 32);
          if (v15 == 1) {
            goto LABEL_44;
          }
          if (v15 == 2)
          {
            exception = __cxa_allocate_exception(0x38uLL);
            int v79 = *(_DWORD *)(a1 + 16);
            long long v84 = *(void ***)(a1 + 8);
            int v85 = v79;
            std::string::basic_string[abi:ne180100]<0>(&__p, "illegal document indicator in scalar");
            YAML::Exception::Exception((uint64_t)exception, &v84, &__p);
            void *exception = &unk_1F2127238;
          }
        }
      }
      if (*(unsigned char *)(a2 + 18) == 92)
      {
        {
          if (v20)
          {
            LODWORD(__p) = 1;
            WORD2(__p) = 92;
            uint64_t v87 = 0;
            uint64_t v88 = 0;
            *((void *)&__p + 1) = 0;
            YAML::Exp::Break(v20);
            YAML::operator+((int *)&__p, YAML::Exp::Break(void)::e, (uint64_t)&YAML::Exp::EscBreak(void)::e);
            long long v84 = (void **)&__p + 1;
            std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v84);
            __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::EscBreak(void)::e, &dword_1C5C1E000);
          }
        }
        *(void *)&long long __p = 0;
        *((void *)&__p + 1) = a1;
        if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::EscBreak(void)::e, (unint64_t *)&__p) & 0x80000000) == 0)break; {
      }
        }
      if (*(void *)(a1 + 64)) {
        int v16 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + ((*(void *)(a1 + 56) >> 9) & 0x7FFFFFFFFFFFF8))
      }
                                 + (*(void *)(a1 + 56) & 0xFFFLL));
      else {
        int v16 = 4;
      }
      if (v16 == *(unsigned __int8 *)(a2 + 18))
      {
        YAML::Exp::Escape((YAML::Exp *)a1, (uint64_t)&__p);
        if (v87 >= 0) {
          p_p = (const std::string::value_type *)&__p;
        }
        else {
          p_p = (const std::string::value_type *)__p;
        }
        if (v87 >= 0) {
          std::string::size_type v19 = HIBYTE(v87);
        }
        else {
          std::string::size_type v19 = *((void *)&__p + 1);
        }
        std::string::append(a3, p_p, v19);
        if (SHIBYTE(v87) < 0) {
          operator delete((void *)__p);
        }
        if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = a3->__r_.__value_.__l.__size_;
        }
        BOOL v6 = 1;
        uint64_t v80 = size;
        char v9 = 1;
      }
      else
      {
        int v17 = YAML::Stream::get((YAML::Stream *)a1);
        std::string::push_back(a3, v17);
        BOOL v6 = 1;
        char v9 = 1;
        if (v17 != 9 && v17 != 32) {
          goto LABEL_7;
        }
      }
    }
    YAML::Stream::get((YAML::Stream *)a1);
    std::string::size_type size = SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0
         ? a3->__r_.__value_.__l.__size_
         : HIBYTE(a3->__r_.__value_.__r.__words[2]);
    int v23 = 1;
    uint64_t v80 = size;
    BOOL v6 = 1;
    char v9 = 1;
LABEL_45:
    if (!YAML::Stream::operator BOOL((void *)a1)) {
      break;
    }
    if (*(_DWORD *)(a2 + 32) == 1 && !*(_DWORD *)(a1 + 16))
    {
      {
        if (v44)
        {
          YAML::Exp::DocStart(v44);
          YAML::Exp::DocEnd(v45);
          YAML::operator|(YAML::Exp::DocStart(void)::e, YAML::Exp::DocEnd(void)::e, (uint64_t)&YAML::Exp::DocIndicator(void)::e);
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::DocIndicator(void)::e, &dword_1C5C1E000);
        }
      }
      *(void *)&long long __p = 0;
      *((void *)&__p + 1) = a1;
      if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::DocIndicator(void)::e, (unint64_t *)&__p) & 0x80000000) == 0)goto LABEL_135; {
    }
      }
    uint64_t v24 = *(void *)a2;
    *(void *)&long long __p = 0;
    *((void *)&__p + 1) = a1;
    uint64_t v25 = YAML::RegEx::Match<YAML::StreamCharSource>(v24, (unint64_t *)&__p);
    int v26 = v25;
    if ((v25 & 0x80000000) == 0)
    {
      if (*(unsigned char *)(a2 + 8))
      {
        unint64_t v49 = v80;
        if (v25)
        {
          do
          {
            YAML::Stream::get((YAML::Stream *)a1);
            --v26;
          }
          while (v26);
        }
        goto LABEL_136;
      }
LABEL_135:
      unint64_t v49 = v80;
      goto LABEL_136;
    }
    if (*(_DWORD *)(a2 + 20) == 2) {
      uint64_t v25 = (uint64_t)std::string::erase(a3, size, 0xFFFFFFFFFFFFFFFFLL);
    }
    YAML::Exp::Break((YAML::Exp *)v25);
    *(void *)&long long __p = 0;
    *((void *)&__p + 1) = a1;
    int v27 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, (unint64_t *)&__p);
    if (v27 >= 1)
    {
      do
      {
        YAML::Stream::get((YAML::Stream *)a1);
        --v27;
      }
      while (v27);
    }
    while (*(void *)(a1 + 64)
         && *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + ((*(void *)(a1 + 56) >> 9) & 0x7FFFFFFFFFFFF8))
                     + (*(void *)(a1 + 56) & 0xFFFLL)) == 32
         && (*(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 12) || !((*(unsigned char *)(a2 + 16) == 0) | v9 & 1)))
    {
      uint64_t v28 = *(void *)a2;
      *(void *)&long long __p = 0;
      *((void *)&__p + 1) = a1;
      if ((YAML::RegEx::Match<YAML::StreamCharSource>(v28, (unint64_t *)&__p) & 0x80000000) == 0) {
        break;
      }
      YAML::Stream::get((YAML::Stream *)a1);
    }
    if (!((*(unsigned char *)(a2 + 16) == 0) | v9 & 1))
    {
      int v29 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a2 + 12) > v29) {
        int v29 = *(_DWORD *)(a2 + 12);
      }
      *(_DWORD *)(a2 + 12) = v29;
    }
    while (1)
    {
      {
        if (v32)
        {
          YAML::Exp::Space(v32);
          YAML::Exp::Tab(v33);
          YAML::operator|(&YAML::Exp::Space(void)::e, &YAML::Exp::Tab(void)::e, (uint64_t)YAML::Exp::Blank(void)::e);
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::Blank(void)::e, &dword_1C5C1E000);
        }
      }
      *(void *)&long long __p = 0;
      *((void *)&__p + 1) = a1;
      uint64_t v30 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Blank(void)::e, (unint64_t *)&__p);
      if ((v30 & 0x80000000) != 0) {
        break;
      }
      if (*(void *)(a1 + 64)
        && *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + ((*(void *)(a1 + 56) >> 9) & 0x7FFFFFFFFFFFF8))
                    + (*(void *)(a1 + 56) & 0xFFFLL)) == 9
        && *(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 12)
        && *(_DWORD *)(a2 + 36) == 2)
      {
        uint64_t v76 = __cxa_allocate_exception(0x38uLL);
        int v77 = *(_DWORD *)(a1 + 16);
        long long v84 = *(void ***)(a1 + 8);
        int v85 = v77;
        std::string::basic_string[abi:ne180100]<0>(&__p, "illegal tab when looking for indentation");
        YAML::Exception::Exception((uint64_t)v76, &v84, &__p);
        void *v76 = &unk_1F2127238;
      }
      if (!*(unsigned char *)(a2 + 17)) {
        break;
      }
      uint64_t v31 = *(void *)a2;
      *(void *)&long long __p = 0;
      *((void *)&__p + 1) = a1;
      uint64_t v30 = YAML::RegEx::Match<YAML::StreamCharSource>(v31, (unint64_t *)&__p);
      if ((v30 & 0x80000000) == 0) {
        break;
      }
      YAML::Stream::get((YAML::Stream *)a1);
    }
    YAML::Exp::Break((YAML::Exp *)v30);
    *(void *)&long long __p = 0;
    *((void *)&__p + 1) = a1;
    int v34 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, (unint64_t *)&__p);
    {
      if (v42)
      {
        YAML::Exp::Space(v42);
        YAML::Exp::Tab(v43);
        YAML::operator|(&YAML::Exp::Space(void)::e, &YAML::Exp::Tab(void)::e, (uint64_t)YAML::Exp::Blank(void)::e);
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::Blank(void)::e, &dword_1C5C1E000);
      }
    }
    *(void *)&long long __p = 0;
    *((void *)&__p + 1) = a1;
    int v35 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Blank(void)::e, (unint64_t *)&__p);
    int v36 = v35;
    BOOL v37 = v11;
    BOOL v38 = v34 > -1 && v81 == 0;
    BOOL v7 = v35 >= 0;
    int v39 = *(_DWORD *)(a2 + 20);
    BOOL v40 = v38 && v39 == 1;
    int v41 = v83;
    if (v40) {
      int v41 = v37;
    }
    int v83 = v41;
    if (!v6) {
      goto LABEL_94;
    }
    switch(v39)
    {
      case 0:
        std::string::append(a3, "\n");
        goto LABEL_94;
      case 2:
        if (v34 < 0)
        {
          if (((v82 | v23) & 1) == 0) {
            std::string::append(a3, " ");
          }
          goto LABEL_127;
        }
        int v82 = 1;
        std::string::append(a3, "\n");
        BOOL v10 = v7;
        BOOL v6 = 1;
        break;
      case 1:
        if ((v82 | v37) & 1 | (v34 >= 0) || (v35 & 0x80000000) == 0)
        {
          if ((v34 & 0x80000000) == 0)
          {
            ++v81;
            int v8 = 1;
            BOOL v6 = 1;
            goto LABEL_5;
          }
LABEL_112:
          uint64_t v46 = "\n";
        }
        else
        {
          uint64_t v46 = " ";
          if (*(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 12)) {
            goto LABEL_112;
          }
        }
        std::string::append(a3, v46);
        if (v34 < 0 && v81 >= 1)
        {
          std::string::basic_string[abi:ne180100](&__p, (v81 - 1), 10);
          if (v87 >= 0) {
            uint64_t v47 = (const std::string::value_type *)&__p;
          }
          else {
            uint64_t v47 = (const std::string::value_type *)__p;
          }
          if (v87 >= 0) {
            std::string::size_type v48 = HIBYTE(v87);
          }
          else {
            std::string::size_type v48 = *((void *)&__p + 1);
          }
          std::string::append(a3, v47, v48);
          if (SHIBYTE(v87) < 0) {
            operator delete((void *)__p);
          }
          if (v83 & 1 | (v36 >= 0 || (v9 & 1) == 0))
          {
            std::string::append(a3, "\n");
          }
          else
          {
            BOOL v7 = 0;
            int v83 = 0;
          }
          int v81 = 0;
        }
LABEL_127:
        int v8 = 0;
        BOOL v6 = 1;
        if (*(_DWORD *)(a1 + 16) >= *(_DWORD *)(a2 + 12)) {
          goto LABEL_5;
        }
        *(unsigned char *)(a2 + 40) = 1;
        goto LABEL_135;
      default:
LABEL_94:
        int v82 = 1;
        BOOL v10 = v7;
        BOOL v6 = 1;
        if (v34 < 0) {
          goto LABEL_127;
        }
        break;
    }
  }
  unint64_t v49 = v80;
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v50 = __cxa_allocate_exception(0x38uLL);
    int v51 = *(_DWORD *)(a1 + 16);
    long long v84 = *(void ***)(a1 + 8);
    int v85 = v51;
    std::string::basic_string[abi:ne180100]<0>(&__p, "illegal EOF in scalar");
    YAML::Exception::Exception((uint64_t)v50, &v84, &__p);
    *uint64_t v50 = &unk_1F2127238;
  }
LABEL_136:
  if (*(unsigned char *)(a2 + 24))
  {
    unint64_t v52 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v52 & 0x80u) == 0) {
      std::string v53 = a3;
    }
    else {
      std::string v53 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((v52 & 0x80u) != 0) {
      unint64_t v52 = a3->__r_.__value_.__l.__size_;
    }
    unint64_t v54 = v52;
    while (v54)
    {
      int v55 = v53->__r_.__value_.__s.__data_[--v54];
      if (v55 != 32)
      {
        unint64_t v56 = v54;
        goto LABEL_147;
      }
    }
    unint64_t v56 = -1;
LABEL_147:
    if (v56 != -1 && v56 >= v49) {
      unint64_t v58 = v56;
    }
    else {
      unint64_t v58 = v49;
    }
    if (v49 != -1) {
      unint64_t v56 = v58;
    }
    if (v56 < v52) {
      std::string::erase(a3, v56 + 1, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
  int v59 = *(_DWORD *)(a2 + 28);
  if (v59 == -1)
  {
    unint64_t v65 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v65 & 0x80u) == 0) {
      int v66 = a3;
    }
    else {
      int v66 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((v65 & 0x80u) != 0) {
      unint64_t v65 = a3->__r_.__value_.__l.__size_;
    }
    unint64_t v67 = v65;
    while (v67)
    {
      int v68 = v66->__r_.__value_.__s.__data_[--v67];
      if (v68 != 10)
      {
        unint64_t v69 = v67;
        goto LABEL_190;
      }
    }
    unint64_t v69 = -1;
LABEL_190:
    if (v69 != -1 && v69 >= v49) {
      unint64_t v74 = v69;
    }
    else {
      unint64_t v74 = v49;
    }
    if (v49 != -1) {
      unint64_t v69 = v74;
    }
    if (v69 == -1)
    {
      std::string::size_type v75 = 0;
    }
    else
    {
      if (v69 >= v65) {
        return;
      }
      std::string::size_type v75 = v69 + 1;
    }
    std::string::erase(a3, v75, 0xFFFFFFFFFFFFFFFFLL);
  }
  else if (!v59)
  {
    unint64_t v60 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v60 & 0x80u) == 0) {
      std::string::size_type v61 = a3;
    }
    else {
      std::string::size_type v61 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((v60 & 0x80u) != 0) {
      unint64_t v60 = a3->__r_.__value_.__l.__size_;
    }
    unint64_t v62 = v60;
    while (v62)
    {
      int v63 = v61->__r_.__value_.__s.__data_[--v62];
      if (v63 != 10)
      {
        unint64_t v64 = v62;
        goto LABEL_178;
      }
    }
    unint64_t v64 = -1;
LABEL_178:
    if (v64 != -1 && v64 >= v49) {
      unint64_t v71 = v64;
    }
    else {
      unint64_t v71 = v49;
    }
    if (v49 != -1) {
      unint64_t v64 = v71;
    }
    if (v64 == -1)
    {
      std::string::size_type v72 = 0;
LABEL_202:
      std::string::erase(a3, v72, 0xFFFFFFFFFFFFFFFFLL);
    }
    else if (v64 + 1 < v60)
    {
      std::string::size_type v72 = v64 + 2;
      goto LABEL_202;
    }
  }
}

void sub_1C611C724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor()
{
  for (uint64_t i = 0; i != -24; i -= 6)
  {
    uint64_t v1 = &YAML::convert<BOOL>::decode(YAML::Node const&,BOOL &)::names[i];
    if (SHIBYTE(YAML::convert<BOOL>::decode(YAML::Node const&,BOOL &)::names[i + 23]) < 0) {
      operator delete((void *)v1[21]);
    }
    if (*((char *)v1 + 167) < 0) {
      operator delete((void *)v1[18]);
    }
  }
}

uint64_t google::protobuf::util::converter::JsonObjectWriter::JsonObjectWriter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void google::protobuf::StringPiece::operator[]()
{
  __assert_rtn("operator[]", "stringpiece.h", 277, "0 <= i");
}

{
  __assert_rtn("operator[]", "stringpiece.h", 278, "i < length_");
}

void google::protobuf::util::converter::StructuredObjectWriter::BaseElement::pop<google::protobuf::util::converter::JsonObjectWriter::Element>()
{
  __assert_rtn("down_cast", "casts.h", 92, "f == nullptr || dynamic_cast<To>(f) != nullptr");
}

void google::protobuf::util::converter::DataPiece::StringToNumber<int>()
{
  __assert_rtn("StringPiece", "stringpiece.h", 230, "len >= 0");
}

void google::protobuf::internal::StringPiecePod::operator[]()
{
  __assert_rtn("operator[]", "stringpiece.h", 454, "0 <= i");
}

{
  __assert_rtn("operator[]", "stringpiece.h", 455, "i < size_");
}

void google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray()
{
  __assert_rtn("group", "unknown_field_set.h", 348, "type() == TYPE_GROUP");
}

uint64_t google::protobuf::TextFormat::Printer::Printer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void google::protobuf::FieldDescriptor::CopyTo()
{
}

{
  __assert_rtn("_internal_set_label", "descriptor.pb.h", 8936, "PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Label_IsValid(value)");
}

void google::protobuf::CalculateBase64EscapedLen()
{
  __assert_rtn("CalculateBase64EscapedLen", "strutil.cc", 1696, "len >= input_len");
}

void google::protobuf::strings::ArrayByteSource::Skip()
{
  __assert_rtn("remove_prefix", "stringpiece.h", 283, "length_ >= n");
}

void google::protobuf::internal::ExtensionSet::GrowCapacity()
{
}

void google::protobuf::internal::ExtensionSet::IsInitialized()
{
}

void google::protobuf::internal::ExtensionSet::FindOrNullInLargeMap()
{
}

{
  __assert_rtn("FindOrNullInLargeMap", "extension_set.cc", 1834, "is_large()");
}

CCCryptorStatus CCCryptorCreateWithMode(CCOperation op, CCMode mode, CCAlgorithm alg, CCPadding padding, const void *iv, const void *key, size_t keyLength, const void *tweak, size_t tweakLength, int numRounds, CCModeOptions options, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x1F40C94C0](*(void *)&op, *(void *)&mode, *(void *)&alg, *(void *)&padding, iv, key, keyLength, tweak);
}

CCCryptorStatus CCCryptorFinal(CCCryptorRef cryptorRef, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1F40C94C8](cryptorRef, dataOut, dataOutAvailable, dataOutMoved);
}

size_t CCCryptorGetOutputLength(CCCryptorRef cryptorRef, size_t inputLength, BOOL final)
{
  return MEMORY[0x1F40C9520](cryptorRef, inputLength, final);
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x1F40C9528](cryptorRef);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1F40C9538](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

void CCHmacFinal(CCHmacContext *ctx, void *macOut)
{
}

void CCHmacInit(CCHmacContext *ctx, CCHmacAlgorithm algorithm, const void *key, size_t keyLength)
{
}

void CCHmacUpdate(CCHmacContext *ctx, const void *data, size_t dataLength)
{
}

int CCKeyDerivationPBKDF(CCPBKDFAlgorithm algorithm, const char *password, size_t passwordLen, const uint8_t *salt, size_t saltLen, CCPseudoRandomAlgorithm prf, unsigned int rounds, uint8_t *derivedKey, size_t derivedKeyLen)
{
  return MEMORY[0x1F40C9648](*(void *)&algorithm, password, passwordLen, salt, saltLen, *(void *)&prf, *(void *)&rounds, derivedKey);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9778](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9780](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9788](c, data, *(void *)&len);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

void CFRelease(CFTypeRef cf)
{
}

NSString *NSUserName(void)
{
  return (NSString *)MEMORY[0x1F40E72F0]();
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40F6EF8](key, algorithm, dataToSign, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1F40F6F08](keyData, attributes, error);
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return MEMORY[0x1F40F6F80](key, algorithm, signedData, signature, error);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1F40F70F0](rnd, count, bytes);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Temperature>()
{
  while (1)
    ;
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Area>()
{
  while (1)
    ;
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Speed>()
{
  while (1)
    ;
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Length>()
{
  while (1)
    ;
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Weight>()
{
  while (1)
    ;
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Density>()
{
  while (1)
    ;
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Pressure>()
{
  while (1)
    ;
}

void siri::dialogengine::ParseUnitLabel<siri::dialogengine::Temperature>()
{
  while (1)
    ;
}

void siri::dialogengine::ParseUnitLabel<siri::dialogengine::Area>()
{
  while (1)
    ;
}

void siri::dialogengine::ParseUnitLabel<siri::dialogengine::Speed>()
{
  while (1)
    ;
}

void siri::dialogengine::ParseUnitLabel<siri::dialogengine::Length>()
{
  while (1)
    ;
}

void siri::dialogengine::ParseUnitLabel<siri::dialogengine::Weight>()
{
  while (1)
    ;
}

void siri::dialogengine::ParseUnitLabel<siri::dialogengine::Density>()
{
  while (1)
    ;
}

void siri::dialogengine::ParseUnitLabel<siri::dialogengine::Pressure>()
{
  while (1)
    ;
}

void siri::dialogengine::ConvertUnitValue<siri::dialogengine::Temperature>()
{
  while (1)
    ;
}

void siri::dialogengine::ConvertUnitValue<siri::dialogengine::Area>()
{
  while (1)
    ;
}

void siri::dialogengine::ConvertUnitValue<siri::dialogengine::Speed>()
{
  while (1)
    ;
}

void siri::dialogengine::ConvertUnitValue<siri::dialogengine::Length>()
{
  while (1)
    ;
}

void siri::dialogengine::ConvertUnitValue<siri::dialogengine::Weight>()
{
  while (1)
    ;
}

void siri::dialogengine::ConvertUnitValue<siri::dialogengine::Density>()
{
  while (1)
    ;
}

void siri::dialogengine::ConvertUnitValue<siri::dialogengine::Pressure>()
{
  while (1)
    ;
}

void siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Temperature>()
{
  while (1)
    ;
}

void siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Area>()
{
  while (1)
    ;
}

void siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Speed>()
{
  while (1)
    ;
}

void siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Length>()
{
  while (1)
    ;
}

void siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Weight>()
{
  while (1)
    ;
}

void siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Density>()
{
  while (1)
    ;
}

void siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Pressure>()
{
  while (1)
    ;
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Temperature>()
{
  while (1)
    ;
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Area>()
{
  while (1)
    ;
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Speed>()
{
  while (1)
    ;
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Length>()
{
  while (1)
    ;
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Weight>()
{
  while (1)
    ;
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Density>()
{
  while (1)
    ;
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Pressure>()
{
  while (1)
    ;
}

uint64_t morphun::dictionary::PhraseProperties::isEndsWithVowel()
{
  return MEMORY[0x1F4180E58]();
}

uint64_t morphun::dictionary::PhraseProperties::isStartsWithVowel()
{
  return MEMORY[0x1F4180E60]();
}

uint64_t morphun::TokenIterator::TokenIterator()
{
  return MEMORY[0x1F4180E68]();
}

uint64_t morphun::TokenIterator::operator++()
{
  return MEMORY[0x1F4180E70]();
}

uint64_t morphun::TokenizerFactory::createTokenizer()
{
  return MEMORY[0x1F4180E78]();
}

uint64_t morphun::lang::features::LanguageGrammarFeatures::getLanguageGrammarFeatures()
{
  return MEMORY[0x1F4180E80]();
}

void morphun::lang::features::LanguageGrammarFeatures::~LanguageGrammarFeatures(morphun::lang::features::LanguageGrammarFeatures *this)
{
}

void morphun::lang::features::LanguageGrammarFeatures_GrammarCategory::~LanguageGrammarFeatures_GrammarCategory(morphun::lang::features::LanguageGrammarFeatures_GrammarCategory *this)
{
}

uint64_t morphun::util::LocaleUtils::getFallbackPair()
{
  return MEMORY[0x1F4180E98]();
}

uint64_t morphun::util::LocaleUtils::areLanguageScriptCompatible()
{
  return MEMORY[0x1F4180EA0]();
}

uint64_t morphun::util::StringUtils::codePointAt()
{
  return MEMORY[0x1F4180EA8]();
}

uint64_t morphun::util::StringUtils::to_u16string()
{
  return MEMORY[0x1F4180EB0]();
}

uint64_t morphun::util::StringUtils::appendCodePoint()
{
  return MEMORY[0x1F4180EB8]();
}

uint64_t morphun::util::StringUtils::capitalizeFirst()
{
  return MEMORY[0x1F4180EC0]();
}

uint64_t morphun::util::StringUtils::lowercase()
{
  return MEMORY[0x1F4180EE0]();
}

uint64_t morphun::util::StringUtils::to_string()
{
  return MEMORY[0x1F4180EF0]();
}

uint64_t morphun::util::StringUtils::uppercase()
{
  return MEMORY[0x1F4180EF8]();
}

uint64_t morphun::util::LoggerConfig::getLogLevel(morphun::util::LoggerConfig *this)
{
  return MEMORY[0x1F4180F00](this);
}

uint64_t morphun::util::VersionUtils::getLibraryVersion(morphun::util::VersionUtils *this)
{
  return MEMORY[0x1F4180F18](this);
}

uint64_t morphun::util::ULocale::ULocale()
{
  return MEMORY[0x1F4180F28]();
}

{
  return MEMORY[0x1F4180F30]();
}

void morphun::util::ULocale::~ULocale(morphun::util::ULocale *this)
{
}

uint64_t morphun::util::ULocale::operator=()
{
  return MEMORY[0x1F4180F50]();
}

void morphun::Object::~Object(morphun::Object *this)
{
}

uint64_t morphun::dialog::NumberConcept::NumberConcept(morphun::dialog::NumberConcept *this, double a2, const morphun::util::ULocale *a3, const morphun::util::ULocale *a4)
{
  return MEMORY[0x1F4180F60](this, a3, a4, a2);
}

uint64_t morphun::dialog::NumberConcept::NumberConcept(morphun::dialog::NumberConcept *this, uint64_t a2, const morphun::util::ULocale *a3, const morphun::util::ULocale *a4)
{
  return MEMORY[0x1F4180F68](this, a2, a3, a4);
}

void morphun::dialog::NumberConcept::~NumberConcept(morphun::dialog::NumberConcept *this)
{
}

uint64_t morphun::dialog::SemanticValue::SemanticValue()
{
  return MEMORY[0x1F4180F78]();
}

void morphun::dialog::SemanticValue::~SemanticValue(morphun::dialog::SemanticValue *this)
{
}

uint64_t morphun::dialog::PronounConcept::PronounConcept()
{
  return MEMORY[0x1F4180F88]();
}

{
  return MEMORY[0x1F4180F90]();
}

void morphun::dialog::PronounConcept::~PronounConcept(morphun::dialog::PronounConcept *this)
{
}

uint64_t morphun::dialog::SemanticConcept::SemanticConcept()
{
  return MEMORY[0x1F4180FA0]();
}

void morphun::dialog::SemanticConcept::~SemanticConcept(morphun::dialog::SemanticConcept *this)
{
}

uint64_t morphun::dialog::SemanticFeature::SemanticFeature()
{
  return MEMORY[0x1F4180FB0]();
}

{
  return MEMORY[0x1F4180FB8]();
}

void morphun::dialog::SemanticFeature::~SemanticFeature(morphun::dialog::SemanticFeature *this)
{
}

uint64_t morphun::dialog::SpeakableString::SpeakableString()
{
  return MEMORY[0x1F4180FC8]();
}

{
  return MEMORY[0x1F4180FD0]();
}

void morphun::dialog::SpeakableString::~SpeakableString(morphun::dialog::SpeakableString *this)
{
}

uint64_t morphun::dialog::SemanticConceptList::SemanticConceptList()
{
  return MEMORY[0x1F4180FE0]();
}

void morphun::dialog::SemanticConceptList::~SemanticConceptList(morphun::dialog::SemanticConceptList *this)
{
}

uint64_t morphun::dialog::SemanticFeatureModel::SemanticFeatureModel(morphun::dialog::SemanticFeatureModel *this, const morphun::util::ULocale *a2)
{
  return MEMORY[0x1F4180FF0](this, a2);
}

uint64_t morphun::dialog::SemanticFeatureModel::SemanticFeatureModel()
{
  return MEMORY[0x1F4180FF8]();
}

void morphun::dialog::SemanticFeatureModel::~SemanticFeatureModel(morphun::dialog::SemanticFeatureModel *this)
{
}

uint64_t morphun::dialog::GrammaticalCountFactory::GrammaticalCountFactory(morphun::dialog::GrammaticalCountFactory *this, const morphun::util::ULocale *a2)
{
  return MEMORY[0x1F4181008](this, a2);
}

void morphun::dialog::GrammaticalCountFactory::~GrammaticalCountFactory(morphun::dialog::GrammaticalCountFactory *this)
{
}

uint64_t morphun::dialog::InflectableStringConcept::InflectableStringConcept(morphun::dialog::InflectableStringConcept *this, const morphun::dialog::SemanticFeatureModel *a2, const morphun::dialog::SpeakableString *a3)
{
  return MEMORY[0x1F4181018](this, a2, a3);
}

uint64_t morphun::dialog::SemanticFeatureModel_DisplayData::SemanticFeatureModel_DisplayData()
{
  return MEMORY[0x1F4181020]();
}

void morphun::dialog::SemanticFeatureModel_DisplayData::~SemanticFeatureModel_DisplayData(morphun::dialog::SemanticFeatureModel_DisplayData *this)
{
}

uint64_t morphun::dialog::SemanticFeatureModel_DisplayValue::SemanticFeatureModel_DisplayValue()
{
  return MEMORY[0x1F4181030]();
}

uint64_t morphun::dialog::LocalizedCommonConceptFactoryProvider::getDefaultCommonConceptFactoryProvider(morphun::dialog::LocalizedCommonConceptFactoryProvider *this)
{
  return MEMORY[0x1F4181038](this);
}

uint64_t morphun::resources::DataRegistrationService::getDataPathForLocale(morphun::resources::DataRegistrationService *this, const morphun::util::ULocale *a2)
{
  return MEMORY[0x1F4181040](this, a2);
}

uint64_t morphun::resources::DataRegistrationService::registerDataPathForLocale()
{
  return MEMORY[0x1F4181048]();
}

uint64_t morphun::TokenIterator::operator*()
{
  return MEMORY[0x1F4181050]();
}

uint64_t morphun::TokenIterator::operator!=()
{
  return MEMORY[0x1F4181058]();
}

uint64_t morphun::lang::features::LanguageGrammarFeatures::getFeatures(morphun::lang::features::LanguageGrammarFeatures *this)
{
  return MEMORY[0x1F4181068](this);
}

uint64_t morphun::lang::features::LanguageGrammarFeatures::getCategories(morphun::lang::features::LanguageGrammarFeatures *this)
{
  return MEMORY[0x1F4181070](this);
}

uint64_t morphun::lang::features::LanguageGrammarFeatures_GrammarCategory::isUniqueValues(morphun::lang::features::LanguageGrammarFeatures_GrammarCategory *this)
{
  return MEMORY[0x1F4181078](this);
}

uint64_t morphun::lang::features::LanguageGrammarFeatures_GrammarCategory::getName(morphun::lang::features::LanguageGrammarFeatures_GrammarCategory *this)
{
  return MEMORY[0x1F4181080](this);
}

uint64_t morphun::lang::features::LanguageGrammarFeatures_GrammarCategory::getValues(morphun::lang::features::LanguageGrammarFeatures_GrammarCategory *this)
{
  return MEMORY[0x1F4181088](this);
}

uint64_t morphun::lang::features::LanguageGrammarFeatures_GrammarFeatures::getName(morphun::lang::features::LanguageGrammarFeatures_GrammarFeatures *this)
{
  return MEMORY[0x1F4181090](this);
}

uint64_t morphun::util::ULocale::getFallback(morphun::util::ULocale *this)
{
  return MEMORY[0x1F4181098](this);
}

uint64_t morphun::Token::isWhitespace(morphun::Token *this)
{
  return MEMORY[0x1F41810A0](this);
}

uint64_t morphun::Token::isSignificant(morphun::Token *this)
{
  return MEMORY[0x1F41810B0](this);
}

uint64_t morphun::Token::getNext(morphun::Token *this)
{
  return MEMORY[0x1F41810C8](this);
}

uint64_t morphun::Token::getValue(morphun::Token *this)
{
  return MEMORY[0x1F41810D0](this);
}

uint64_t morphun::Token::getLength(morphun::Token *this)
{
  return MEMORY[0x1F41810D8](this);
}

uint64_t morphun::dialog::PronounConcept::getFeatureValue(morphun::dialog::PronounConcept *this, const morphun::dialog::SemanticFeature *a2)
{
  return MEMORY[0x1F41810E0](this, a2);
}

uint64_t morphun::dialog::SemanticFeature::operator<()
{
  return MEMORY[0x1F41810E8]();
}

uint64_t morphun::dialog::SpeakableString::getPrint(morphun::dialog::SpeakableString *this)
{
  return MEMORY[0x1F41810F0](this);
}

uint64_t morphun::dialog::SemanticFeatureModel::getFeature()
{
  return MEMORY[0x1F41810F8]();
}

uint64_t morphun::dialog::GrammaticalCountFactory::choose()
{
  return MEMORY[0x1F4181100]();
}

uint64_t morphun::dialog::SemanticFeatureConceptBase::getFeatureValueByName()
{
  return MEMORY[0x1F4181108]();
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x1F417E350](this);
}

std::string::const_reference std::string::at(const std::string *this, std::string::size_type __n)
{
  return (std::string::const_reference)MEMORY[0x1F417E368](this, __n);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1F417E380](this, __c, __pos);
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1F417E388](this, __c, __pos);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E3A8]();
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1F417E400](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4D0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4D8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4E0](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1F417E550](this, *(void *)&__ecode);
}

void std::regex_error::~regex_error(std::regex_error *this)
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string::reference std::string::at(std::string *this, std::string::size_type __n)
{
  return (std::string::reference)MEMORY[0x1F417E598](this, __n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5A0](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C8](this, __str, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E5D0](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5E0](this, __s, __n);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  return (std::string::iterator)MEMORY[0x1F417E5F8](this, __pos.__i_, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E600](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E620](this, __pos, __n1, __s);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1F417E628](this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E678](this, __c);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1F417E728]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1F417E730]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::get()
{
  return MEMORY[0x1F417E758]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x1F417E760]();
}

uint64_t std::istream::ignore()
{
  return MEMORY[0x1F417E798]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1F417E7A0]();
}

uint64_t std::istream::putback()
{
  return MEMORY[0x1F417E7B0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1F417E7C0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1F417E7C8]();
}

{
  return MEMORY[0x1F417E7E0]();
}

{
  return MEMORY[0x1F417E7E8]();
}

{
  return MEMORY[0x1F417E808]();
}

{
  return MEMORY[0x1F417E810]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1F417E840]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E880]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8B0]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x1F417E908](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x1F417E918](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

uint64_t std::ofstream::open()
{
  return MEMORY[0x1F417E950]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1F417E960](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1F417EAA8](retstr, __s);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1F417ECE0](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1F417ECE8](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::codecvt<char32_t,char,__mbstate_t>::~codecvt(std::codecvt<char32_t, char, mbstate_t> *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x1F417EE58](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE80](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE88](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x1F417EF70](a1);
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t analytics_send_event_lazy()
{
  return MEMORY[0x1F41138D8]();
}

void bzero(void *a1, size_t a2)
{
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CB3A0](a1, a2);
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x1F40CB3D0](*(void *)&__clock_id, __tp);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1F40CB400](a1);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182BE0](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x1F4182BE8](strm, *(void *)&level, *(void *)&method, *(void *)&windowBits, *(void *)&memLevel, *(void *)&strategy, version, *(void *)&stream_size);
}

double difftime(time_t a1, time_t a2)
{
  MEMORY[0x1F40CB8F8](a1, a2);
  return result;
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

int feof(FILE *a1)
{
  return MEMORY[0x1F40CC098](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1F40CC100](a1, *(void *)&a2, a3);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

void free(void *a1)
{
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return (char *)MEMORY[0x1F40CC398](a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

int getpagesize(void)
{
  return MEMORY[0x1F40CC480]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

tm *__cdecl gmtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1F40CC5B0](a1, a2);
}

int gzclose(gzFile file)
{
  return MEMORY[0x1F4182C20](file);
}

int gzeof(gzFile file)
{
  return MEMORY[0x1F4182C38](file);
}

const char *__cdecl gzerror(gzFile file, int *errnum)
{
  return (const char *)MEMORY[0x1F4182C48](file, errnum);
}

gzFile gzopen(const char *a1, const char *a2)
{
  return (gzFile)MEMORY[0x1F4182C60](a1, a2);
}

int gzread(gzFile file, voidp buf, unsigned int len)
{
  return MEMORY[0x1F4182C78](file, buf, *(void *)&len);
}

int gzwrite(gzFile file, voidpc buf, unsigned int len)
{
  return MEMORY[0x1F4182CA0](file, buf, *(void *)&len);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182CB8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1F4182CC8](strm, *(void *)&windowBits, version, *(void *)&stream_size);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1F40CC870](a1, a2);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40CC9B8](*(void *)&task, *(void *)&name);
}

mach_port_t mach_thread_self(void)
{
  return MEMORY[0x1F40CCA58]();
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CCDD0](a1, a2);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x1F40CCE30](a1);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyCppObjectAtomic(void *dest, const void *src, void (__cdecl *copyHelper)(void *, const void *))
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1F40CD120](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

int pclose(FILE *a1)
{
  return MEMORY[0x1F40CD740](a1);
}

FILE *__cdecl popen(const char *a1, const char *a2)
{
  return (FILE *)MEMORY[0x1F40CD780](a1, a2);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1F40CDA20](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1F40CDC60](a1);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

int rmdir(const char *a1)
{
  return MEMORY[0x1F40CDD90](a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0A0](a1, a2);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1F4182060](a1);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1F4182198](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1F41821A8](a1, sql, callback, a4, errmsg);
}

void sqlite3_free(void *a1)
{
}

int sqlite3_open(const char *filename, sqlite3 **ppDb)
{
  return MEMORY[0x1F4182278](filename, ppDb);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1F40CE198](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE258](__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x1F40CE260](a1, a2);
  return result;
}

float strtof(const char *a1, char **a2)
{
  MEMORY[0x1F40CE270](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2C0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2E0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2F0](__str, __endptr, *(void *)&__base);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

kern_return_t thread_info(thread_inspect_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt)
{
  return MEMORY[0x1F40CE530](*(void *)&target_act, *(void *)&flavor, thread_info_out, thread_info_outCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

time_t timegm(tm *const a1)
{
  return MEMORY[0x1F40CE590](a1);
}

int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len)
{
  return MEMORY[0x1F40CE598](__b1, __b2, __len);
}

char *__cdecl u_austrcpy(char *dst, const UChar *src)
{
  return (char *)MEMORY[0x1F417F6F0](dst, src);
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x1F417F718](*(void *)&c);
}

void u_charsToUChars(const char *cs, UChar *us, int32_t length)
{
}

const char *__cdecl u_errorName(UErrorCode code)
{
  return (const char *)MEMORY[0x1F417F728](*(void *)&code);
}

UBool u_hasBinaryProperty(UChar32 c, UProperty which)
{
  return MEMORY[0x1F417F780](*(void *)&c, *(void *)&which);
}

UBool u_isdigit(UChar32 c)
{
  return MEMORY[0x1F417F7C8](*(void *)&c);
}

UChar *__cdecl u_strcpy(UChar *dst, const UChar *src)
{
  return (UChar *)MEMORY[0x1F417F880](dst, src);
}

int32_t u_strlen(const UChar *s)
{
  return MEMORY[0x1F417F890](s);
}

UBlockCode ublock_getCode(UChar32 c)
{
  return MEMORY[0x1F417FA20](*(void *)&c);
}

uint64_t ubrk_close()
{
  return MEMORY[0x1F417FA30]();
}

uint64_t ubrk_getRuleStatus()
{
  return MEMORY[0x1F417FA60]();
}

uint64_t ubrk_next()
{
  return MEMORY[0x1F417FA78]();
}

uint64_t ubrk_open()
{
  return MEMORY[0x1F417FA80]();
}

uint64_t ubrk_setUText()
{
  return MEMORY[0x1F417FAA8]();
}

uint64_t ucal_add()
{
  return MEMORY[0x1F417FAB0]();
}

uint64_t ucal_close()
{
  return MEMORY[0x1F417FAC8]();
}

uint64_t ucal_get()
{
  return MEMORY[0x1F417FAD0]();
}

uint64_t ucal_getAttribute()
{
  return MEMORY[0x1F417FAD8]();
}

uint64_t ucal_getDSTSavings()
{
  return MEMORY[0x1F417FAE8]();
}

uint64_t ucal_getFieldDifference()
{
  return MEMORY[0x1F417FAF8]();
}

uint64_t ucal_getHostTimeZone()
{
  return MEMORY[0x1F417FB08]();
}

uint64_t ucal_getLimit()
{
  return MEMORY[0x1F417FB18]();
}

uint64_t ucal_getMillis()
{
  return MEMORY[0x1F417FB20]();
}

uint64_t ucal_inDaylightTime()
{
  return MEMORY[0x1F417FB60]();
}

uint64_t ucal_open()
{
  return MEMORY[0x1F417FB70]();
}

uint64_t ucal_openTimeZones()
{
  return MEMORY[0x1F417FB80]();
}

uint64_t ucal_set()
{
  return MEMORY[0x1F417FB90]();
}

uint64_t ucal_setDate()
{
  return MEMORY[0x1F417FBA0]();
}

uint64_t ucal_setMillis()
{
  return MEMORY[0x1F417FBB8]();
}

uint64_t ucasemap_close()
{
  return MEMORY[0x1F417FBC8]();
}

uint64_t ucasemap_open()
{
  return MEMORY[0x1F417FBD0]();
}

uint64_t ucasemap_utf8ToTitle()
{
  return MEMORY[0x1F417FBE0]();
}

uint64_t ucnv_close()
{
  return MEMORY[0x1F417FC30]();
}

uint64_t ucnv_fromUChars()
{
  return MEMORY[0x1F417FC58]();
}

uint64_t ucnv_getMaxCharSize()
{
  return MEMORY[0x1F417FC98]();
}

uint64_t ucnv_open()
{
  return MEMORY[0x1F417FCB8]();
}

uint64_t ucnv_toUChars()
{
  return MEMORY[0x1F417FCF8]();
}

uint64_t ucurr_forLocale()
{
  return MEMORY[0x1F417FE38]();
}

uint64_t ucurr_getDefaultFractionDigits()
{
  return MEMORY[0x1F417FE40]();
}

uint64_t ucurr_getName()
{
  return MEMORY[0x1F417FE48]();
}

uint64_t ucurr_getPluralName()
{
  return MEMORY[0x1F417FE58]();
}

uint64_t ucurr_isAvailable()
{
  return MEMORY[0x1F417FE68]();
}

uint64_t udat_close()
{
  return MEMORY[0x1F417FE90]();
}

uint64_t udat_format()
{
  return MEMORY[0x1F417FEA0]();
}

uint64_t udat_open()
{
  return MEMORY[0x1F417FED8]();
}

uint64_t udatpg_close()
{
  return MEMORY[0x1F417FF48]();
}

uint64_t udatpg_getBestPattern()
{
  return MEMORY[0x1F417FF58]();
}

uint64_t udatpg_open()
{
  return MEMORY[0x1F417FF80]();
}

uint64_t uenum_close()
{
  return MEMORY[0x1F417FFD8]();
}

uint64_t uenum_next()
{
  return MEMORY[0x1F417FFE8]();
}

uint64_t uloc_addLikelySubtags()
{
  return MEMORY[0x1F4180108]();
}

uint64_t uloc_getDisplayCountry()
{
  return MEMORY[0x1F4180150]();
}

uint64_t ulocdata_getMeasurementSystem()
{
  return MEMORY[0x1F4180208]();
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

uint64_t unorm2_getDecomposition()
{
  return MEMORY[0x1F4180220]();
}

uint64_t unorm2_getNFCInstance()
{
  return MEMORY[0x1F4180230]();
}

uint64_t unum_close()
{
  return MEMORY[0x1F4180290]();
}

uint64_t unum_formatDoubleCurrency()
{
  return MEMORY[0x1F41802B0]();
}

uint64_t unum_getTextAttribute()
{
  return MEMORY[0x1F41802E8]();
}

uint64_t unum_open()
{
  return MEMORY[0x1F41802F0]();
}

uint64_t unum_setAttribute()
{
  return MEMORY[0x1F4180320]();
}

uint64_t unumf_close()
{
  return MEMORY[0x1F4180350]();
}

uint64_t unumf_closeResult()
{
  return MEMORY[0x1F4180358]();
}

uint64_t unumf_formatDouble()
{
  return MEMORY[0x1F4180368]();
}

uint64_t unumf_openForSkeletonAndLocale()
{
  return MEMORY[0x1F4180378]();
}

uint64_t unumf_openResult()
{
  return MEMORY[0x1F4180380]();
}

uint64_t unumf_resultToString()
{
  return MEMORY[0x1F4180390]();
}

uint64_t uplrules_close()
{
  return MEMORY[0x1F4180410]();
}

uint64_t uplrules_open()
{
  return MEMORY[0x1F4180420]();
}

uint64_t uplrules_select()
{
  return MEMORY[0x1F4180430]();
}

UText *__cdecl utext_close(UText *ut)
{
  return (UText *)MEMORY[0x1F4180780](ut);
}

UText *__cdecl utext_openUTF8(UText *ut, const char *s, int64_t length, UErrorCode *status)
{
  return (UText *)MEMORY[0x1F41807C8](ut, s, length, status);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE680](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}

xmlChar *__cdecl xmlEncodeSpecialChars(const xmlDoc *doc, const xmlChar *input)
{
  return (xmlChar *)MEMORY[0x1F4182690](doc, input);
}

void xmlFreeDoc(xmlDocPtr cur)
{
}

void xmlFreeTextReader(xmlTextReaderPtr reader)
{
}

void xmlFreeTextWriter(xmlTextWriterPtr writer)
{
}

void xmlFreeValidCtxt(xmlValidCtxtPtr a1)
{
}

uint64_t xmlGetLineNo(const xmlNode *node)
{
  return MEMORY[0x1F41826F0](node);
}

xmlDtdPtr xmlIOParseDTD(xmlSAXHandlerPtr sax, xmlParserInputBufferPtr input, xmlCharEncoding enc)
{
  return (xmlDtdPtr)MEMORY[0x1F4182710](sax, input, *(void *)&enc);
}

xmlTextWriterPtr xmlNewTextWriterFilename(const char *uri, int compression)
{
  return (xmlTextWriterPtr)MEMORY[0x1F4182788](uri, *(void *)&compression);
}

xmlValidCtxtPtr xmlNewValidCtxt(void)
{
  return (xmlValidCtxtPtr)MEMORY[0x1F4182798]();
}

xmlDocPtr xmlParseFile(const char *filename)
{
  return (xmlDocPtr)MEMORY[0x1F41827F8](filename);
}

xmlDocPtr xmlParseMemory(const char *buffer, int size)
{
  return (xmlDocPtr)MEMORY[0x1F4182808](buffer, *(void *)&size);
}

xmlParserInputBufferPtr xmlParserInputBufferCreateMem(const char *mem, int size, xmlCharEncoding enc)
{
  return (xmlParserInputBufferPtr)MEMORY[0x1F4182810](mem, *(void *)&size, *(void *)&enc);
}

xmlTextReaderPtr xmlReaderForFile(const char *filename, const char *encoding, int options)
{
  return (xmlTextReaderPtr)MEMORY[0x1F4182828](filename, encoding, *(void *)&options);
}

xmlTextReaderPtr xmlReaderForMemory(const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  return (xmlTextReaderPtr)MEMORY[0x1F4182830](buffer, *(void *)&size, URL, encoding, *(void *)&options);
}

void xmlSetStructuredErrorFunc(void *ctx, xmlStructuredErrorFunc handler)
{
}

const xmlChar *__cdecl xmlTextReaderConstBaseUri(xmlTextReaderPtr reader)
{
  return (const xmlChar *)MEMORY[0x1F4182968](reader);
}

const xmlChar *__cdecl xmlTextReaderConstName(xmlTextReaderPtr reader)
{
  return (const xmlChar *)MEMORY[0x1F4182970](reader);
}

const xmlChar *__cdecl xmlTextReaderConstValue(xmlTextReaderPtr reader)
{
  return (const xmlChar *)MEMORY[0x1F4182978](reader);
}

xmlNodePtr xmlTextReaderCurrentNode(xmlTextReaderPtr reader)
{
  return (xmlNodePtr)MEMORY[0x1F4182980](reader);
}

xmlChar *__cdecl xmlTextReaderGetAttribute(xmlTextReaderPtr reader, const xmlChar *name)
{
  return (xmlChar *)MEMORY[0x1F4182988](reader, name);
}

int xmlTextReaderIsEmptyElement(xmlTextReaderPtr reader)
{
  return MEMORY[0x1F4182998](reader);
}

xmlChar *__cdecl xmlTextReaderLookupNamespace(xmlTextReaderPtr reader, const xmlChar *prefix)
{
  return (xmlChar *)MEMORY[0x1F41829A0](reader, prefix);
}

int xmlTextReaderMoveToElement(xmlTextReaderPtr reader)
{
  return MEMORY[0x1F41829A8](reader);
}

int xmlTextReaderMoveToFirstAttribute(xmlTextReaderPtr reader)
{
  return MEMORY[0x1F41829B0](reader);
}

int xmlTextReaderMoveToNextAttribute(xmlTextReaderPtr reader)
{
  return MEMORY[0x1F41829B8](reader);
}

int xmlTextReaderNodeType(xmlTextReaderPtr reader)
{
  return MEMORY[0x1F41829C8](reader);
}

int xmlTextReaderRead(xmlTextReaderPtr reader)
{
  return MEMORY[0x1F41829D0](reader);
}

xmlChar *__cdecl xmlTextReaderReadInnerXml(xmlTextReaderPtr reader)
{
  return (xmlChar *)MEMORY[0x1F41829D8](reader);
}

xmlChar *__cdecl xmlTextReaderReadOuterXml(xmlTextReaderPtr reader)
{
  return (xmlChar *)MEMORY[0x1F41829E0](reader);
}

int xmlTextWriterEndDocument(xmlTextWriterPtr writer)
{
  return MEMORY[0x1F41829F0](writer);
}

int xmlTextWriterEndElement(xmlTextWriterPtr writer)
{
  return MEMORY[0x1F41829F8](writer);
}

int xmlTextWriterFlush(xmlTextWriterPtr writer)
{
  return MEMORY[0x1F4182A00](writer);
}

int xmlTextWriterFullEndElement(xmlTextWriterPtr writer)
{
  return MEMORY[0x1F4182A08](writer);
}

int xmlTextWriterSetIndent(xmlTextWriterPtr writer, int indent)
{
  return MEMORY[0x1F4182A10](writer, *(void *)&indent);
}

int xmlTextWriterSetIndentString(xmlTextWriterPtr writer, const xmlChar *str)
{
  return MEMORY[0x1F4182A18](writer, str);
}

int xmlTextWriterStartDocument(xmlTextWriterPtr writer, const char *version, const char *encoding, const char *standalone)
{
  return MEMORY[0x1F4182A20](writer, version, encoding, standalone);
}

int xmlTextWriterStartElement(xmlTextWriterPtr writer, const xmlChar *name)
{
  return MEMORY[0x1F4182A28](writer, name);
}

int xmlTextWriterWriteAttribute(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content)
{
  return MEMORY[0x1F4182A30](writer, name, content);
}

int xmlTextWriterWriteRaw(xmlTextWriterPtr writer, const xmlChar *content)
{
  return MEMORY[0x1F4182A50](writer, content);
}

int xmlValidateDtd(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlDtdPtr dtd)
{
  return MEMORY[0x1F4182A68](ctxt, doc, dtd);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}