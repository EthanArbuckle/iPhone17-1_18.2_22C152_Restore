void siri::dialogengine::PatternSetting::~PatternSetting(siri::dialogengine::PatternSetting *this)
{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F211F818;
  v2 = (void **)((char *)this + 240);
  *((void *)this + 30) = &unk_1F211F848;
  *((void *)this + 38) = &unk_1F211F868;
  if (*((char *)this + 359) < 0) {
    operator delete(*((void **)this + 42));
  }
  *((void *)this + 38) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 40));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)this);
  JUMPOUT(0x1C8796D70);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F211F818;
  v2 = (void **)((char *)this + 240);
  *((void *)this + 30) = &unk_1F211F848;
  *((void *)this + 38) = &unk_1F211F868;
  if (*((char *)this + 359) < 0) {
    operator delete(*((void **)this + 42));
  }
  *((void *)this + 38) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 40));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)this);
}

uint64_t siri::dialogengine::PatternSetting::PatternSetting(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4, char a5, const std::string *a6, std::string *a7, long long *a8)
{
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  std::string::basic_string[abi:ne180100]<0>(&v20, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::Parameter::Parameter(a1, a2, a3, a4, &v21, &v20, a6, &__p, a7, 1, 0, 0, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F211F818;
  *(void *)(a1 + 240) = &unk_1F211F848;
  *(void *)(a1 + 304) = &unk_1F211F868;
  v16 = (std::string *)(a1 + 336);
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v17 = *a8;
    *(void *)(a1 + 352) = *((void *)a8 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  *(unsigned char *)(a1 + 233) = a5;
  return a1;
}

void sub_1C5E18EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  siri::dialogengine::Parameter::~Parameter(v29);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSetting::GetDefaultValueFromSetting(siri::dialogengine::PatternSetting *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 359) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 42), *((void *)this + 43));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 21);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 44);
  }
}

std::string *siri::dialogengine::PatternSetting::SetDefaultValueFromSetting(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 14, a2);
}

void siri::dialogengine::ConditionReferenceCollector::CollectConditionName(uint64_t **this, const siri::dialogengine::Node *a2)
{
  if (*((char *)a2 + 143) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)a2 + 5);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(this + 1, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    char v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v4 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5E19040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ConditionReferenceCollector::Visit(uint64_t **this, const siri::dialogengine::Group *a2)
{
  siri::dialogengine::ConditionReferenceCollector::CollectConditionName(this, a2);
  siri::dialogengine::ConstNodeVisitor::Visit((siri::dialogengine::ConstNodeVisitor *)this, a2);
}

void siri::dialogengine::ConditionReferenceCollector::~ConditionReferenceCollector(char **this)
{
  *this = (char *)&unk_1F211E030;
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
  JUMPOUT(0x1C8796D70);
}

{
  *this = (char *)&unk_1F211E030;
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
}

uint64_t siri::dialogengine::ConditionReferenceCollector::GetConditionNames(siri::dialogengine::ConditionReferenceCollector *this)
{
  return (uint64_t)this + 8;
}

void sub_1C5E19554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a12);

  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0x220]);
  std::__tree<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>>>::destroy(*(void **)(v15 - 176));

  if (*(char *)(v15 - 129) < 0) {
    operator delete(*(void **)(v15 - 152));
  }
  if (*(char *)(v15 - 105) < 0) {
    operator delete(*(void **)(v15 - 128));
  }

  _Unwind_Resume(a1);
}

void sub_1C5E19658()
{
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  JUMPOUT(0x1C5E195FCLL);
}

void sub_1C5E199D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  std::__tree<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>>>::destroy((void *)STACK[0x228]);
  if (STACK[0x248]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x248]);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0x250]);

  if (*(char *)(v13 - 129) < 0) {
    operator delete(*(void **)(v13 - 152));
  }
  if (*(char *)(v13 - 105) < 0) {
    operator delete(*(void **)(v13 - 128));
  }

  _Unwind_Resume(a1);
}

void sub_1C5E19B08()
{
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  JUMPOUT(0x1C5E19AA0);
}

void InitDefaultsscc_info_Button_Button_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", a4);
  SnippetUI::Button::Button((SnippetUI::Button *)&SnippetUI::_Button_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Button_default_instance_, v4);
  qword_1EB6905B8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB6905C0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB6905C8 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
}

SnippetUI::Button *SnippetUI::Button::Button(SnippetUI::Button *this)
{
  *(void *)this = &unk_1F211E080;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 17) = 0;
  if (atomic_load_explicit(scc_info_Button_Button_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Button_Button_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_1C5E19C24(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Button::GetMetadata(SnippetUI::Button *this)
{
  return file_level_metadata_Button_2eproto;
}

void InitDefaultsscc_info_WatchListButton_Button_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", a4);
  SnippetUI::WatchListButton::WatchListButton((SnippetUI::WatchListButton *)&SnippetUI::_WatchListButton_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_WatchListButton_default_instance_, v4);
}

SnippetUI::WatchListButton *SnippetUI::WatchListButton::WatchListButton(SnippetUI::WatchListButton *this)
{
  *(void *)this = &unk_1F211E380;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load_explicit(scc_info_WatchListButton_Button_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_WatchListButton_Button_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C5E19D48(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::WatchListButton::GetMetadata(SnippetUI::WatchListButton *this)
{
  return qword_1EA3D8AB8;
}

uint64_t SnippetUI::WatchListButton::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void SnippetUI::WatchListButton::MergeFrom(SnippetUI::WatchListButton *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1824);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::WatchListButton::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5E19E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::WatchListButton::MergeFrom(SnippetUI::WatchListButton *this, const SnippetUI::WatchListButton *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1839);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::WatchListButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      return;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    return;
  }
  v9 = (std::string *)*((void *)this + 2);
  v8 = (char *)this + 16;
  char v7 = v9;
  if (v9 != (std::string *)v6)
  {
    if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v8, v6);
    }
    std::string::operator=(v7, (const std::string *)v6);
  }
}

void sub_1C5E19F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::WatchListButton::CopyFrom(SnippetUI::WatchListButton *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::WatchListButton::Clear(this);
    SnippetUI::WatchListButton::MergeFrom(this, a2);
  }
}

void SnippetUI::WatchListButton::Clear(SnippetUI::WatchListButton *this)
{
  uint64_t v1 = *((void *)this + 2);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::WatchListButton *)((char *)this + 8);
  if (v3) {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::WatchListButton::InternalSerializeWithCachedSizesToArray(SnippetUI::WatchListButton *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char v7 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)*((void *)v7 + 1);
    if (!v8) {
      goto LABEL_7;
    }
    char v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((unsigned char *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.WatchListButton.canonical_id");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 2), (char *)a2);
  }
LABEL_7:
  uint64_t v9 = *((void *)this + 1);
  if ((v9 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v9 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

google::protobuf::internal *SnippetUI::WatchListButton::_InternalParse(SnippetUI::WatchListButton *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  v12 = a2;
  char v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v12, *((_DWORD *)a3 + 23))) {
      return v12;
    }
    TagFallback = (google::protobuf::internal *)((char *)v12 + 1);
    v8 = (char *)*(unsigned __int8 *)v12;
    if ((*(char *)v12 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v12 + 2);
LABEL_6:
      v12 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v12, v8);
    v12 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v8 == 10)
    {
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      }
      char v10 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.WatchListButton.canonical_id");
      goto LABEL_16;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    char v10 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v4, TagFallback, a3, v6);
LABEL_16:
    v12 = (google::protobuf::internal *)v10;
    if (!v10) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

uint64_t SnippetUI::WatchListButton::GetCachedSize(SnippetUI::WatchListButton *this)
{
  return *((unsigned int *)this + 6);
}

char *SnippetUI::WatchListButton::ByteSizeLong(SnippetUI::WatchListButton *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(void *)(v1 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    char v4 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v1 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = v2;
  }
  char v4 = (const google::protobuf::UnknownFieldSet *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::WatchListButton *)((char *)this + 8), v4, (_DWORD *)this + 6);
  }
  *((_DWORD *)this + 6) = v4;
  return (char *)v4;
}

uint64_t SnippetUI::WatchListButton::IsInitialized(SnippetUI::WatchListButton *this)
{
  return 1;
}

SnippetUI::WatchListButton *SnippetUI::WatchListButton::New(SnippetUI::WatchListButton *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::WatchListButton>(a2);
}

SnippetUI::WatchListButton *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::WatchListButton>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::WatchListButton *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::WatchListButton>);
  }
  SnippetUI::WatchListButton::WatchListButton(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5E1A300(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::WatchListButton>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::WatchListButton *SnippetUI::WatchListButton::New(SnippetUI::WatchListButton *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::WatchListButton>(0);
}

void SnippetUI::WatchListButton::~WatchListButton(SnippetUI::WatchListButton *this)
{
  SnippetUI::WatchListButton::~WatchListButton(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F211E380;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_StandardPlayerButton_Button_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", a4);
  SnippetUI::StandardPlayerButton::StandardPlayerButton((SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_StandardPlayerButton_default_instance_, v4);
  qword_1EA3DB7C8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EA3DB7D0 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::StandardPlayerButton *SnippetUI::StandardPlayerButton::StandardPlayerButton(SnippetUI::StandardPlayerButton *this)
{
  *(void *)this = &unk_1F211E140;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load_explicit(scc_info_StandardPlayerButton_Button_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_StandardPlayerButton_Button_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  return this;
}

void sub_1C5E1A4FC(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::StandardPlayerButton::GetMetadata(SnippetUI::StandardPlayerButton *this)
{
  return qword_1EA3D8A88;
}

uint64_t SnippetUI::StandardPlayerButton::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void SnippetUI::StandardPlayerButton::MergeFrom(SnippetUI::StandardPlayerButton *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1041);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::StandardPlayerButton::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5E1A618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::StandardPlayerButton::MergeFrom(SnippetUI::StandardPlayerButton *this, const SnippetUI::StandardPlayerButton *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1056);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::StandardPlayerButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_)
  {
    char v10 = (int **)*((void *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((void *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 4) = v11;
        char v10 = (int **)*((void *)a2 + 4);
      }
      if (v10) {
        v12 = v10;
      }
      else {
        v12 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v11, v12);
    }
    uint64_t v13 = (int **)*((void *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((void *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 5) = v14;
        uint64_t v13 = (int **)*((void *)a2 + 5);
      }
      if (v13) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v14, v15);
    }
  }
}

void sub_1C5E1A7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::StandardPlayerButton::CopyFrom(SnippetUI::StandardPlayerButton *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::StandardPlayerButton::Clear(this);
    SnippetUI::StandardPlayerButton::MergeFrom(this, a2);
  }
}

void SnippetUI::StandardPlayerButton::Clear(SnippetUI::StandardPlayerButton *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  char v7 = *((unsigned char *)this + 8);
  uint64_t v6 = (SnippetUI::StandardPlayerButton *)((char *)this + 8);
  *((void *)v6 + 4) = 0;
  if (v7)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::StandardPlayerButton::InternalSerializeWithCachedSizesToArray(SnippetUI::StandardPlayerButton *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_) {
    goto LABEL_25;
  }
  char v7 = (SnippetUI::ActionProperty *)*((void *)this + 4);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v7 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    }
    char *v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 12);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          uint64_t v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  char v16 = (SnippetUI::ActionProperty *)*((void *)this + 5);
  if (v16)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      char v16 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    }
    char *v5 = 18;
    unsigned int v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      unsigned int v19 = v17 >> 7;
      if (v17 >> 14)
      {
        std::string v20 = v5 + 2;
        do
        {
          std::string v21 = v20;
          *v20++ = v19 | 0x80;
          unsigned int v22 = v19 >> 7;
          unsigned int v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *std::string v20 = v22;
      }
      else
      {
        v5[2] = v19;
        v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  v24 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    v25 = (const char *)*((void *)v24 + 1);
    if (!v25) {
      goto LABEL_31;
    }
    v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((unsigned char *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.StandardPlayerButton.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 2), v5);
  }
LABEL_31:
  v26 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v26 + 23) < 0)
  {
    v27 = (const char *)*((void *)v26 + 1);
    if (!v27) {
      goto LABEL_37;
    }
    v26 = *(google::protobuf::internal **)v26;
    goto LABEL_36;
  }
  v27 = (const char *)*((unsigned __int8 *)v26 + 23);
  if (*((unsigned char *)v26 + 23))
  {
LABEL_36:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v26, v27, 1, (google::protobuf::internal *)"SnippetUI.StandardPlayerButton.link_identifier");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((const void ***)this + 3), v5);
  }
LABEL_37:
  uint64_t v28 = *((void *)this + 1);
  if ((v28 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v28 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::StandardPlayerButton::_InternalParse(SnippetUI::StandardPlayerButton *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v19 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  char v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v19, *((_DWORD *)a3 + 23))) {
      return v19;
    }
    TagFallback = (google::protobuf::internal *)((char *)v19 + 1);
    unsigned int v10 = (char *)*(unsigned __int8 *)v19;
    if ((*(char *)v19 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v19 + 2);
LABEL_6:
      unsigned int v19 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v19, v10);
    unsigned int v19 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_25;
        }
        v11 = (SnippetUI::ActionProperty *)*((void *)this + 4);
        if (v11) {
          goto LABEL_15;
        }
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 4) = v11;
        goto LABEL_14;
      case 2u:
        if (v10 != 18) {
          goto LABEL_25;
        }
        v11 = (SnippetUI::ActionProperty *)*((void *)this + 5);
        if (!v11)
        {
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 5) = v11;
LABEL_14:
          TagFallback = v19;
        }
LABEL_15:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v11, TagFallback);
        goto LABEL_30;
      case 3u:
        if (v10 != 26) {
          goto LABEL_25;
        }
        uint64_t v13 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v14 = (std::string::value_type *)TagFallback;
        unsigned int v15 = a3;
        char v16 = "SnippetUI.StandardPlayerButton.component_name";
        goto LABEL_24;
      case 4u:
        if (v10 != 34) {
          goto LABEL_25;
        }
        uint64_t v13 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v14 = (std::string::value_type *)TagFallback;
        unsigned int v15 = a3;
        char v16 = "SnippetUI.StandardPlayerButton.link_identifier";
LABEL_24:
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v13, v14, (uint64_t)v15, (google::protobuf::internal *)v16);
        goto LABEL_30;
      default:
LABEL_25:
        if (v10) {
          BOOL v17 = (v10 & 7) == 4;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_30:
        unsigned int v19 = (google::protobuf::internal *)v12;
        if (v12) {
          continue;
        }
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::StandardPlayerButton::GetCachedSize(SnippetUI::StandardPlayerButton *this)
{
  return *((unsigned int *)this + 12);
}

char *SnippetUI::StandardPlayerButton::ByteSizeLong(SnippetUI::StandardPlayerButton *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_)
  {
    uint64_t v9 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    if (v9)
    {
      unsigned int v10 = SnippetUI::ActionProperty::ByteSizeLong(v9);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::ActionProperty *)*((void *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::ActionProperty::ByteSizeLong(v11);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::StandardPlayerButton *)((char *)this + 8), v5, (_DWORD *)this + 12);
  }
  else
  {
    *((_DWORD *)this + 12) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::StandardPlayerButton::IsInitialized(SnippetUI::StandardPlayerButton *this)
{
  return 1;
}

SnippetUI::StandardPlayerButton *SnippetUI::StandardPlayerButton::New(SnippetUI::StandardPlayerButton *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StandardPlayerButton>(a2);
}

SnippetUI::StandardPlayerButton *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StandardPlayerButton>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::StandardPlayerButton *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::StandardPlayerButton>);
  }
  SnippetUI::StandardPlayerButton::StandardPlayerButton(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5E1AFCC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::StandardPlayerButton>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::StandardPlayerButton *SnippetUI::StandardPlayerButton::New(SnippetUI::StandardPlayerButton *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StandardPlayerButton>(0);
}

void SnippetUI::StandardPlayerButton::~StandardPlayerButton(SnippetUI::StandardPlayerButton *this)
{
  SnippetUI::StandardPlayerButton::~StandardPlayerButton(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(void *)this = &unk_1F211E140;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_PlayerButton_Button_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", a4);
  SnippetUI::PlayerButton::PlayerButton((SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_PlayerButton_default_instance_, v4);
  qword_1EB68F558 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1EB68F560 = &SnippetUI::_Button_default_instance_;
}

SnippetUI::PlayerButton *SnippetUI::PlayerButton::PlayerButton(SnippetUI::PlayerButton *this)
{
  *(void *)this = &unk_1F211E2C0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if (atomic_load_explicit(scc_info_PlayerButton_Button_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_PlayerButton_Button_2eproto);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  return this;
}

void sub_1C5E1B264(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::PlayerButton::GetMetadata(SnippetUI::PlayerButton *this)
{
  return qword_1EA3D8AA8;
}

uint64_t SnippetUI::PlayerButton::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

void SnippetUI::PlayerButton::MergeFrom(SnippetUI::PlayerButton *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1625);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::PlayerButton::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5E1B380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::PlayerButton::MergeFrom(SnippetUI::PlayerButton *this, const SnippetUI::PlayerButton *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1640);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::PlayerButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 != (const SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_)
  {
    uint64_t v6 = (const SnippetUI::Button *)*((void *)a2 + 2);
    if (v6)
    {
      char v7 = (SnippetUI::Button *)*((void *)this + 2);
      if (!v7)
      {
        char v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((void *)this + 2) = v7;
        uint64_t v6 = (const SnippetUI::Button *)*((void *)a2 + 2);
      }
      if (v6) {
        uint64_t v8 = v6;
      }
      else {
        uint64_t v8 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      }
      SnippetUI::Button::MergeFrom(v7, v8);
    }
    uint64_t v9 = (const SnippetUI::Button *)*((void *)a2 + 3);
    if (v9)
    {
      unsigned int v10 = (SnippetUI::Button *)*((void *)this + 3);
      if (!v10)
      {
        unsigned int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((void *)this + 3) = v10;
        uint64_t v9 = (const SnippetUI::Button *)*((void *)a2 + 3);
      }
      if (v9) {
        v11 = v9;
      }
      else {
        v11 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      }
      SnippetUI::Button::MergeFrom(v10, v11);
    }
  }
}

void sub_1C5E1B48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Button *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::Button *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Button>);
  }
  SnippetUI::Button::Button(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5E1B534(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40013F3344);
  _Unwind_Resume(a1);
}

void SnippetUI::Button::MergeFrom(SnippetUI::Button *this, const SnippetUI::Button *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 705);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Button *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_)
  {
    unsigned int v10 = (int **)*((void *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((void *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 4) = v11;
        unsigned int v10 = (int **)*((void *)a2 + 4);
      }
      if (v10) {
        char v12 = v10;
      }
      else {
        char v12 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v11, v12);
    }
    uint64_t v13 = (int **)*((void *)a2 + 5);
    if (v13)
    {
      unsigned int v14 = (int **)*((void *)this + 5);
      if (!v14)
      {
        unsigned int v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v14;
        uint64_t v13 = (int **)*((void *)a2 + 5);
      }
      if (v13) {
        unsigned int v15 = v13;
      }
      else {
        unsigned int v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    char v16 = (int **)*((void *)a2 + 6);
    if (v16)
    {
      BOOL v17 = (int **)*((void *)this + 6);
      if (!v17)
      {
        BOOL v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 6) = v17;
        char v16 = (int **)*((void *)a2 + 6);
      }
      if (v16) {
        v18 = v16;
      }
      else {
        v18 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v17, v18);
    }
  }
  int v19 = *((_DWORD *)a2 + 14);
  if (v19) {
    *((_DWORD *)this + 14) = v19;
  }
  int v20 = *((_DWORD *)a2 + 15);
  if (v20) {
    *((_DWORD *)this + 15) = v20;
  }
  int v21 = *((_DWORD *)a2 + 16);
  if (v21) {
    *((_DWORD *)this + 16) = v21;
  }
}

void sub_1C5E1B740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Button>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void SnippetUI::PlayerButton::CopyFrom(SnippetUI::PlayerButton *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::PlayerButton::Clear(this);
    SnippetUI::PlayerButton::MergeFrom(this, a2);
  }
}

void SnippetUI::PlayerButton::Clear(SnippetUI::PlayerButton *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v5 = *((unsigned char *)this + 8);
  uint64_t v4 = (SnippetUI::PlayerButton *)((char *)this + 8);
  *((void *)v4 + 2) = 0;
  if (v5)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::PlayerButton::InternalSerializeWithCachedSizesToArray(SnippetUI::PlayerButton *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  if (this == (SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_) {
    goto LABEL_25;
  }
  uint64_t v6 = (SnippetUI::Button *)*((void *)this + 2);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      uint64_t v6 = (SnippetUI::Button *)*((void *)this + 2);
    }
    *a2 = 10;
    unsigned int v7 = *((_DWORD *)v6 + 17);
    if (v7 > 0x7F)
    {
      a2[1] = v7 | 0x80;
      unsigned int v9 = v7 >> 7;
      if (v7 >> 14)
      {
        v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          char v12 = v11;
          *v11++ = v9 | 0x80;
          unsigned int v13 = v9 >> 7;
          unsigned int v14 = v9 >> 14;
          v9 >>= 7;
        }
        while (v14);
        unsigned int v10 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
        unsigned __int8 *v11 = v13;
        goto LABEL_13;
      }
      a2[2] = v9;
      uint64_t v8 = 3;
    }
    else
    {
      a2[1] = v7;
      uint64_t v8 = 2;
    }
    unsigned int v10 = (google::protobuf::UnknownFieldSet *)&a2[v8];
LABEL_13:
    a2 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v6, v10, a3, a4);
  }
  unsigned int v15 = (SnippetUI::Button *)*((void *)this + 3);
  if (v15)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned int v15 = (SnippetUI::Button *)*((void *)this + 3);
    }
    *a2 = 18;
    unsigned int v16 = *((_DWORD *)v15 + 17);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        int v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          int v20 = v19;
          *v19++ = v18 | 0x80;
          unsigned int v21 = v18 >> 7;
          unsigned int v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        BOOL v17 = v20 + 2;
        *int v19 = v21;
      }
      else
      {
        a2[2] = v18;
        BOOL v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      BOOL v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v15, (google::protobuf::UnknownFieldSet *)v17, a3, a4);
  }
LABEL_25:
  uint64_t v23 = *((void *)this + 1);
  if ((v23 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v23 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

const google::protobuf::UnknownFieldSet *SnippetUI::Button::InternalSerializeWithCachedSizesToArray(SnippetUI::Button *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char v5 = (char *)a2;
  if (this == (SnippetUI::Button *)&SnippetUI::_Button_default_instance_) {
    goto LABEL_37;
  }
  unsigned int v7 = (SnippetUI::ActionProperty *)*((void *)this + 4);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      char v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      unsigned int v7 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    }
    char *v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 12);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        char v12 = v5 + 2;
        do
        {
          unsigned int v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    char v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  unsigned int v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  if (!v16) {
    goto LABEL_26;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    char v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unsigned int v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  }
  char *v5 = 18;
  unsigned int v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    unsigned int v19 = v17 >> 7;
    if (v17 >> 14)
    {
      unsigned int v21 = v5 + 2;
      do
      {
        unsigned int v22 = v21;
        *v21++ = v19 | 0x80;
        unsigned int v23 = v19 >> 7;
        unsigned int v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      int v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *unsigned int v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    uint64_t v18 = 3;
  }
  else
  {
    v5[1] = v17;
    uint64_t v18 = 2;
  }
  int v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  char v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::VisualProperty *)*((void *)this + 6);
  if (v25)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      char v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v25 = (SnippetUI::VisualProperty *)*((void *)this + 6);
    }
    char *v5 = 26;
    unsigned int v26 = *((_DWORD *)v25 + 15);
    if (v26 > 0x7F)
    {
      v5[1] = v26 | 0x80;
      unsigned int v28 = v26 >> 7;
      if (v26 >> 14)
      {
        v29 = v5 + 2;
        do
        {
          v30 = v29;
          *v29++ = v28 | 0x80;
          unsigned int v31 = v28 >> 7;
          unsigned int v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        v27 = (google::protobuf::UnknownFieldSet *)(v30 + 2);
        unsigned char *v29 = v31;
      }
      else
      {
        v5[2] = v28;
        v27 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v26;
      v27 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    char v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v25, v27, a3, a4);
  }
LABEL_37:
  unsigned int v33 = *((_DWORD *)this + 14);
  if (v33)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      char v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unsigned int v33 = *((_DWORD *)this + 14);
    }
    char *v5 = 32;
    if (v33 > 0x7F)
    {
      v5[1] = v33 | 0x80;
      unint64_t v34 = (unint64_t)(int)v33 >> 7;
      if (v33 >> 14)
      {
        v35 = v5 + 2;
        do
        {
          v36 = v35;
          *v35++ = v34 | 0x80;
          unint64_t v37 = v34 >> 7;
          unint64_t v38 = v34 >> 14;
          v34 >>= 7;
        }
        while (v38);
        char v5 = v36 + 2;
        unsigned char *v35 = v37;
      }
      else
      {
        v5[2] = v34;
        v5 += 3;
      }
    }
    else
    {
      v5[1] = v33;
      v5 += 2;
    }
  }
  v39 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v39 + 23) < 0)
  {
    v40 = (const char *)*((void *)v39 + 1);
    if (!v40) {
      goto LABEL_53;
    }
    v39 = *(google::protobuf::internal **)v39;
    goto LABEL_52;
  }
  v40 = (const char *)*((unsigned __int8 *)v39 + 23);
  if (*((unsigned char *)v39 + 23))
  {
LABEL_52:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v39, v40, 1, (google::protobuf::internal *)"SnippetUI.Button.component_name");
    char v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((const void ***)this + 2), v5);
  }
LABEL_53:
  v41 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v41 + 23) < 0)
  {
    v42 = (const char *)*((void *)v41 + 1);
    if (!v42) {
      goto LABEL_59;
    }
    v41 = *(google::protobuf::internal **)v41;
    goto LABEL_58;
  }
  v42 = (const char *)*((unsigned __int8 *)v41 + 23);
  if (*((unsigned char *)v41 + 23))
  {
LABEL_58:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v41, v42, 1, (google::protobuf::internal *)"SnippetUI.Button.link_identifier");
    char v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((const void ***)this + 3), v5);
  }
LABEL_59:
  unsigned int v43 = *((_DWORD *)this + 15);
  if (v43)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      char v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unsigned int v43 = *((_DWORD *)this + 15);
    }
    char *v5 = 56;
    if (v43 > 0x7F)
    {
      v5[1] = v43 | 0x80;
      unint64_t v44 = (unint64_t)(int)v43 >> 7;
      if (v43 >> 14)
      {
        v45 = v5 + 2;
        do
        {
          v46 = v45;
          *v45++ = v44 | 0x80;
          unint64_t v47 = v44 >> 7;
          unint64_t v48 = v44 >> 14;
          v44 >>= 7;
        }
        while (v48);
        char v5 = v46 + 2;
        unsigned char *v45 = v47;
      }
      else
      {
        v5[2] = v44;
        v5 += 3;
      }
    }
    else
    {
      v5[1] = v43;
      v5 += 2;
    }
  }
  unsigned int v49 = *((_DWORD *)this + 16);
  if (v49)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      char v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unsigned int v49 = *((_DWORD *)this + 16);
    }
    char *v5 = 64;
    if (v49 > 0x7F)
    {
      v5[1] = v49 | 0x80;
      unint64_t v50 = (unint64_t)(int)v49 >> 7;
      if (v49 >> 14)
      {
        v51 = v5 + 2;
        do
        {
          v52 = v51;
          *v51++ = v50 | 0x80;
          unint64_t v53 = v50 >> 7;
          unint64_t v54 = v50 >> 14;
          v50 >>= 7;
        }
        while (v54);
        char v5 = v52 + 2;
        unsigned char *v51 = v53;
      }
      else
      {
        v5[2] = v50;
        v5 += 3;
      }
    }
    else
    {
      v5[1] = v49;
      v5 += 2;
    }
  }
  uint64_t v55 = *((void *)this + 1);
  if ((v55 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v55 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::PlayerButton::_InternalParse(SnippetUI::PlayerButton *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v14 = a2;
  char v5 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v14, *((_DWORD *)a3 + 23))) {
      return v14;
    }
    TagFallback = (google::protobuf::internal *)((char *)v14 + 1);
    unsigned int v8 = (char *)*(unsigned __int8 *)v14;
    if ((*(char *)v14 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v14 + 2);
LABEL_6:
      unsigned int v14 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v14, v8);
    unsigned int v14 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v8 >> 3 == 2)
    {
      if (v8 == 18)
      {
        char v12 = (SnippetUI::Button *)*((void *)this + 3);
        if (!v12)
        {
          char v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
          *((void *)this + 3) = v12;
          goto LABEL_22;
        }
LABEL_23:
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Button>(a3, v12, TagFallback);
        goto LABEL_24;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 10)
    {
      char v12 = (SnippetUI::Button *)*((void *)this + 2);
      if (!v12)
      {
        char v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((void *)this + 2) = v12;
LABEL_22:
        TagFallback = v14;
      }
      goto LABEL_23;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
LABEL_24:
    unsigned int v14 = (google::protobuf::internal *)v11;
    if (!v11) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

uint64_t SnippetUI::PlayerButton::GetCachedSize(SnippetUI::PlayerButton *this)
{
  return *((unsigned int *)this + 8);
}

char *SnippetUI::PlayerButton::ByteSizeLong(SnippetUI::PlayerButton *this)
{
  if (this == (SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v2 = (SnippetUI::Button *)*((void *)this + 2);
    if (v2)
    {
      uint64_t v3 = SnippetUI::Button::ByteSizeLong(v2);
      uint64_t v4 = (const google::protobuf::UnknownFieldSet *)&v3[((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    else
    {
      uint64_t v4 = 0;
    }
    char v5 = (SnippetUI::Button *)*((void *)this + 3);
    if (v5)
    {
      uint64_t v6 = SnippetUI::Button::ByteSizeLong(v5);
      uint64_t v4 = (const google::protobuf::UnknownFieldSet *)&v6[(void)v4
                                                        + 1
                                                        + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::PlayerButton *)((char *)this + 8), v4, (_DWORD *)this + 8);
  }
  else
  {
    *((_DWORD *)this + 8) = v4;
    return (char *)v4;
  }
}

char *SnippetUI::Button::ByteSizeLong(SnippetUI::Button *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    char v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  char v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  char v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::Button *)&SnippetUI::_Button_default_instance_)
  {
    uint64_t v9 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    if (v9)
    {
      unsigned int v10 = SnippetUI::ActionProperty::ByteSizeLong(v9);
      char v5 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((void *)this + 5);
    if (v11)
    {
      char v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      char v5 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v13 = (SnippetUI::VisualProperty *)*((void *)this + 6);
    if (v13)
    {
      unsigned int v14 = SnippetUI::VisualProperty::ByteSizeLong(v13);
      char v5 = (const google::protobuf::UnknownFieldSet *)&v14[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  int v15 = *((_DWORD *)this + 14);
  if (v15)
  {
    if (v15 < 0) {
      uint64_t v16 = 11;
    }
    else {
      uint64_t v16 = ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    char v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v16);
  }
  int v17 = *((_DWORD *)this + 15);
  if (v17)
  {
    if (v17 < 0) {
      uint64_t v18 = 11;
    }
    else {
      uint64_t v18 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    char v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v18);
  }
  int v19 = *((_DWORD *)this + 16);
  if (v19)
  {
    if (v19 < 0) {
      uint64_t v20 = 11;
    }
    else {
      uint64_t v20 = ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    char v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v20);
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Button *)((char *)this + 8), v5, (_DWORD *)this + 17);
  }
  else
  {
    *((_DWORD *)this + 17) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::PlayerButton::IsInitialized(SnippetUI::PlayerButton *this)
{
  return 1;
}

SnippetUI::PlayerButton *SnippetUI::PlayerButton::New(SnippetUI::PlayerButton *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(a2);
}

SnippetUI::PlayerButton *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::PlayerButton *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::PlayerButton>);
  }
  SnippetUI::PlayerButton::PlayerButton(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5E1C3D0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::PlayerButton>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::PlayerButton *SnippetUI::PlayerButton::New(SnippetUI::PlayerButton *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(0);
}

void SnippetUI::PlayerButton::~PlayerButton(SnippetUI::PlayerButton *this)
{
  SnippetUI::PlayerButton::~PlayerButton(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1F211E2C0;
  if (this != (SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 3);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::Button::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 68) = a2;
  return this;
}

void SnippetUI::Button::MergeFrom(SnippetUI::Button *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 690);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Button::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5E1C5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Button::CopyFrom(SnippetUI::Button *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Button::Clear(this);
    SnippetUI::Button::MergeFrom(this, a2);
  }
}

void SnippetUI::Button::Clear(SnippetUI::Button *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  char v7 = (char *)this + 48;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 5) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  char v9 = *((unsigned char *)this + 8);
  uint64_t v8 = (SnippetUI::Button *)((char *)this + 8);
  *(void *)char v7 = 0;
  *((void *)v7 + 1) = 0;
  *((_DWORD *)v7 + 4) = 0;
  if (v9)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v8);
  }
}

google::protobuf::internal *SnippetUI::Button::_InternalParse(SnippetUI::Button *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  v30 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  char v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23))) {
      return v30;
    }
    TagFallback = (google::protobuf::internal *)((char *)v30 + 1);
    unsigned int v10 = (char *)*(unsigned __int8 *)v30;
    if ((*(char *)v30 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v30 + 2);
LABEL_6:
      v30 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, v10);
    v30 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_49;
        }
        v11 = (SnippetUI::ActionProperty *)*((void *)this + 4);
        if (!v11)
        {
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 4) = v11;
          TagFallback = v30;
        }
        char v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v11, TagFallback);
        goto LABEL_54;
      case 2u:
        if (v10 != 18) {
          goto LABEL_49;
        }
        unsigned int v13 = (SnippetUI::TextProperty *)*((void *)this + 5);
        if (!v13)
        {
          unsigned int v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((void *)this + 5) = v13;
          TagFallback = v30;
        }
        char v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v13, TagFallback);
        goto LABEL_54;
      case 3u:
        if (v10 != 26) {
          goto LABEL_49;
        }
        unsigned int v14 = (SnippetUI::VisualProperty *)*((void *)this + 6);
        if (!v14)
        {
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((void *)this + 6) = v14;
          TagFallback = v30;
        }
        char v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_54;
      case 4u:
        if (v10 != 32) {
          goto LABEL_49;
        }
        int v15 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v16) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_26;
        }
        int v17 = *(char *)v15;
        unint64_t v16 = v16 + (v17 << 7) - 128;
        if (v17 < 0)
        {
          v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v16);
          if (!v30) {
            goto LABEL_61;
          }
        }
        else
        {
          int v15 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_26:
          v30 = v15;
        }
        *((_DWORD *)this + 14) = v16;
        continue;
      case 5u:
        if (v10 != 42) {
          goto LABEL_49;
        }
        uint64_t v18 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        int v19 = (std::string::value_type *)TagFallback;
        uint64_t v20 = a3;
        unsigned int v21 = "SnippetUI.Button.component_name";
        goto LABEL_36;
      case 6u:
        if (v10 != 50) {
          goto LABEL_49;
        }
        uint64_t v18 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        int v19 = (std::string::value_type *)TagFallback;
        uint64_t v20 = a3;
        unsigned int v21 = "SnippetUI.Button.link_identifier";
LABEL_36:
        char v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v18, v19, (uint64_t)v20, (google::protobuf::internal *)v21);
        goto LABEL_54;
      case 7u:
        if (v10 != 56) {
          goto LABEL_49;
        }
        unsigned int v22 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v23) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_41;
        }
        int v24 = *(char *)v22;
        unint64_t v23 = v23 + (v24 << 7) - 128;
        if (v24 < 0)
        {
          v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v23);
          if (!v30) {
            goto LABEL_61;
          }
        }
        else
        {
          unsigned int v22 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_41:
          v30 = v22;
        }
        *((_DWORD *)this + 15) = v23;
        continue;
      case 8u:
        if (v10 != 64) {
          goto LABEL_49;
        }
        v25 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v26) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_47;
        }
        int v27 = *(char *)v25;
        unint64_t v26 = v26 + (v27 << 7) - 128;
        if (v27 < 0)
        {
          v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v26);
          if (!v30) {
            goto LABEL_61;
          }
        }
        else
        {
          v25 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_47:
          v30 = v25;
        }
        *((_DWORD *)this + 16) = v26;
        continue;
      default:
LABEL_49:
        if (v10) {
          BOOL v28 = (v10 & 7) == 4;
        }
        else {
          BOOL v28 = 1;
        }
        if (v28)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        char v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_54:
        v30 = (google::protobuf::internal *)v12;
        if (v12) {
          continue;
        }
LABEL_61:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::Button::GetCachedSize(SnippetUI::Button *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t SnippetUI::Button::IsInitialized(SnippetUI::Button *this)
{
  return 1;
}

SnippetUI::Button *SnippetUI::Button::New(SnippetUI::Button *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(a2);
}

SnippetUI::Button *SnippetUI::Button::New(SnippetUI::Button *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
}

void SnippetUI::Button::~Button(SnippetUI::Button *this)
{
  SnippetUI::Button::~Button(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(void *)this = &unk_1F211E080;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Button *)&SnippetUI::_Button_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    char v7 = *((void *)this + 5);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 6);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_BinaryButton_Button_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", a4);
  SnippetUI::BinaryButton::BinaryButton((SnippetUI::BinaryButton *)&SnippetUI::_BinaryButton_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_BinaryButton_default_instance_, v4);
  qword_1EB68F530 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1EB68F538 = &SnippetUI::_Button_default_instance_;
}

SnippetUI::BinaryButton *SnippetUI::BinaryButton::BinaryButton(SnippetUI::BinaryButton *this)
{
  *(void *)this = &unk_1F211E200;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load_explicit(scc_info_BinaryButton_Button_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_BinaryButton_Button_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  return this;
}

void sub_1C5E1CD9C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::BinaryButton::GetMetadata(SnippetUI::BinaryButton *this)
{
  return qword_1EA3D8A98;
}

uint64_t SnippetUI::BinaryButton::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void SnippetUI::BinaryButton::MergeFrom(SnippetUI::BinaryButton *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1364);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::BinaryButton::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5E1CEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::BinaryButton::MergeFrom(SnippetUI::BinaryButton *this, const SnippetUI::BinaryButton *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1379);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::BinaryButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  char v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::BinaryButton *)&SnippetUI::_BinaryButton_default_instance_)
  {
    unsigned int v10 = (const SnippetUI::Button *)*((void *)a2 + 4);
    if (v10)
    {
      v11 = (SnippetUI::Button *)*((void *)this + 4);
      if (!v11)
      {
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((void *)this + 4) = v11;
        unsigned int v10 = (const SnippetUI::Button *)*((void *)a2 + 4);
      }
      if (v10) {
        char v12 = v10;
      }
      else {
        char v12 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      }
      SnippetUI::Button::MergeFrom(v11, v12);
    }
    unsigned int v13 = (const SnippetUI::Button *)*((void *)a2 + 5);
    if (v13)
    {
      unsigned int v14 = (SnippetUI::Button *)*((void *)this + 5);
      if (!v14)
      {
        unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((void *)this + 5) = v14;
        unsigned int v13 = (const SnippetUI::Button *)*((void *)a2 + 5);
      }
      if (v13) {
        int v15 = v13;
      }
      else {
        int v15 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      }
      SnippetUI::Button::MergeFrom(v14, v15);
    }
  }
}

void sub_1C5E1D064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::BinaryButton::CopyFrom(SnippetUI::BinaryButton *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::BinaryButton::Clear(this);
    SnippetUI::BinaryButton::MergeFrom(this, a2);
  }
}

void SnippetUI::BinaryButton::Clear(SnippetUI::BinaryButton *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  char v7 = *((unsigned char *)this + 8);
  uint64_t v6 = (SnippetUI::BinaryButton *)((char *)this + 8);
  *((void *)v6 + 4) = 0;
  if (v7)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::BinaryButton::InternalSerializeWithCachedSizesToArray(SnippetUI::BinaryButton *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::BinaryButton *)&SnippetUI::_BinaryButton_default_instance_) {
    goto LABEL_25;
  }
  char v7 = (SnippetUI::Button *)*((void *)this + 4);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v7 = (SnippetUI::Button *)*((void *)this + 4);
    }
    char *v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 17);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        char v12 = v5 + 2;
        do
        {
          unsigned int v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  char v16 = (SnippetUI::Button *)*((void *)this + 5);
  if (v16)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      char v16 = (SnippetUI::Button *)*((void *)this + 5);
    }
    char *v5 = 18;
    unsigned int v17 = *((_DWORD *)v16 + 17);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      unsigned int v19 = v17 >> 7;
      if (v17 >> 14)
      {
        uint64_t v20 = v5 + 2;
        do
        {
          unsigned int v21 = v20;
          *v20++ = v19 | 0x80;
          unsigned int v22 = v19 >> 7;
          unsigned int v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        uint64_t v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *uint64_t v20 = v22;
      }
      else
      {
        v5[2] = v19;
        uint64_t v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      uint64_t v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  int v24 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    v25 = (const char *)*((void *)v24 + 1);
    if (!v25) {
      goto LABEL_31;
    }
    int v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((unsigned char *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.BinaryButton.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 2), v5);
  }
LABEL_31:
  unint64_t v26 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v26 + 23) < 0)
  {
    int v27 = (const char *)*((void *)v26 + 1);
    if (!v27) {
      goto LABEL_37;
    }
    unint64_t v26 = *(google::protobuf::internal **)v26;
    goto LABEL_36;
  }
  int v27 = (const char *)*((unsigned __int8 *)v26 + 23);
  if (*((unsigned char *)v26 + 23))
  {
LABEL_36:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v26, v27, 1, (google::protobuf::internal *)"SnippetUI.BinaryButton.link_identifier");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((const void ***)this + 3), v5);
  }
LABEL_37:
  uint64_t v28 = *((void *)this + 1);
  if ((v28 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v28 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::BinaryButton::_InternalParse(SnippetUI::BinaryButton *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v19 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  char v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v19, *((_DWORD *)a3 + 23))) {
      return v19;
    }
    TagFallback = (google::protobuf::internal *)((char *)v19 + 1);
    unsigned int v10 = (char *)*(unsigned __int8 *)v19;
    if ((*(char *)v19 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v19 + 2);
LABEL_6:
      unsigned int v19 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v19, v10);
    unsigned int v19 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_25;
        }
        v11 = (SnippetUI::Button *)*((void *)this + 4);
        if (v11) {
          goto LABEL_15;
        }
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((void *)this + 4) = v11;
        goto LABEL_14;
      case 2u:
        if (v10 != 18) {
          goto LABEL_25;
        }
        v11 = (SnippetUI::Button *)*((void *)this + 5);
        if (!v11)
        {
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
          *((void *)this + 5) = v11;
LABEL_14:
          TagFallback = v19;
        }
LABEL_15:
        char v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Button>(a3, v11, TagFallback);
        goto LABEL_30;
      case 3u:
        if (v10 != 26) {
          goto LABEL_25;
        }
        unsigned int v13 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v14 = (std::string::value_type *)TagFallback;
        unsigned int v15 = a3;
        char v16 = "SnippetUI.BinaryButton.component_name";
        goto LABEL_24;
      case 4u:
        if (v10 != 34) {
          goto LABEL_25;
        }
        unsigned int v13 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v14 = (std::string::value_type *)TagFallback;
        unsigned int v15 = a3;
        char v16 = "SnippetUI.BinaryButton.link_identifier";
LABEL_24:
        char v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v13, v14, (uint64_t)v15, (google::protobuf::internal *)v16);
        goto LABEL_30;
      default:
LABEL_25:
        if (v10) {
          BOOL v17 = (v10 & 7) == 4;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        char v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_30:
        unsigned int v19 = (google::protobuf::internal *)v12;
        if (v12) {
          continue;
        }
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::BinaryButton::GetCachedSize(SnippetUI::BinaryButton *this)
{
  return *((unsigned int *)this + 12);
}

char *SnippetUI::BinaryButton::ByteSizeLong(SnippetUI::BinaryButton *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::BinaryButton *)&SnippetUI::_BinaryButton_default_instance_)
  {
    uint64_t v9 = (SnippetUI::Button *)*((void *)this + 4);
    if (v9)
    {
      unsigned int v10 = SnippetUI::Button::ByteSizeLong(v9);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::Button *)*((void *)this + 5);
    if (v11)
    {
      char v12 = SnippetUI::Button::ByteSizeLong(v11);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::BinaryButton *)((char *)this + 8), v5, (_DWORD *)this + 12);
  }
  else
  {
    *((_DWORD *)this + 12) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::BinaryButton::IsInitialized(SnippetUI::BinaryButton *this)
{
  return 1;
}

SnippetUI::BinaryButton *SnippetUI::BinaryButton::New(SnippetUI::BinaryButton *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BinaryButton>(a2);
}

SnippetUI::BinaryButton *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BinaryButton>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::BinaryButton *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::BinaryButton>);
  }
  SnippetUI::BinaryButton::BinaryButton(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5E1D86C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::BinaryButton>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::BinaryButton *SnippetUI::BinaryButton::New(SnippetUI::BinaryButton *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BinaryButton>(0);
}

void SnippetUI::BinaryButton::~BinaryButton(SnippetUI::BinaryButton *this)
{
  SnippetUI::BinaryButton::~BinaryButton(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(void *)this = &unk_1F211E200;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::BinaryButton *)&SnippetUI::_BinaryButton_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::Button_FormAction_descriptor(SnippetUI *this)
{
  return file_level_enum_descriptors_Button_2eproto;
}

BOOL SnippetUI::Button_FormAction_IsValid(SnippetUI *this)
{
  return this < 3;
}

uint64_t SnippetUI::Button_LabelStyle_descriptor(SnippetUI *this)
{
  return qword_1EA3D8AD0;
}

BOOL SnippetUI::Button_LabelStyle_IsValid(SnippetUI *this)
{
  return this < 4;
}

uint64_t SnippetUI::Button_ButtonRole_descriptor(SnippetUI *this)
{
  return qword_1EA3D8AD8;
}

BOOL SnippetUI::Button_ButtonRole_IsValid(SnippetUI *this)
{
  return this < 3;
}

void SnippetUI::Button::InitAsDefaultInstance(SnippetUI::Button *this)
{
  qword_1EB6905B8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB6905C0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB6905C8 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
}

uint64_t SnippetUI::Button::_Internal::action(SnippetUI::Button::_Internal *this, const SnippetUI::Button *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::Button::_Internal::label(SnippetUI::Button::_Internal *this, const SnippetUI::Button *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::Button::_Internal::thumbnail(SnippetUI::Button::_Internal *this, const SnippetUI::Button *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::Button::clear_action(SnippetUI::Button *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Button::clear_label(SnippetUI::Button *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::Button::clear_thumbnail(SnippetUI::Button *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

SnippetUI::Button *SnippetUI::Button::Button(SnippetUI::Button *this, const SnippetUI::Button *a2)
{
  *(void *)this = &unk_1F211E080;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 17) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Button *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (a2 == (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_)
  {
    *((void *)this + 4) = 0;
    *((void *)this + 5) = 0;
  }
  else
  {
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
  }
  *((void *)this + 6) = 0;
  uint64_t v10 = *((void *)a2 + 7);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((void *)this + 7) = v10;
  return this;
}

void sub_1C5E1DDA4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::Button::default_instance(SnippetUI::Button *this)
{
  if (atomic_load_explicit(scc_info_Button_Button_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Button_Button_2eproto);
  }
  return &SnippetUI::_Button_default_instance_;
}

void SnippetUI::Button::CopyFrom(SnippetUI::Button *this, const SnippetUI::Button *a2)
{
  if (a2 != this)
  {
    SnippetUI::Button::Clear(this);
    SnippetUI::Button::MergeFrom(this, a2);
  }
}

void SnippetUI::Button::InternalSwap(SnippetUI::Button *this, SnippetUI::Button *a2)
{
  uint64_t v4 = (SnippetUI::Button *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v22;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  unsigned int v13 = (uint64_t *)*((void *)this + 3);
  unsigned int v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    unsigned int v13 = (uint64_t *)*((void *)this + 3);
  }
  unsigned int v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    unsigned int v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)unsigned int v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)unsigned int v15 = v17;
  v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  uint64_t v21 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v21;
  LODWORD(v21) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v21;
  LODWORD(v21) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v21;
  LODWORD(v21) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v21;
}

void SnippetUI::StandardPlayerButton::InitAsDefaultInstance(SnippetUI::StandardPlayerButton *this)
{
  qword_1EA3DB7C8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EA3DB7D0 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::StandardPlayerButton::_Internal::play_action(SnippetUI::StandardPlayerButton::_Internal *this, const SnippetUI::StandardPlayerButton *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::StandardPlayerButton::_Internal::pause_action(SnippetUI::StandardPlayerButton::_Internal *this, const SnippetUI::StandardPlayerButton *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::StandardPlayerButton::clear_play_action(SnippetUI::StandardPlayerButton *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::StandardPlayerButton::clear_pause_action(SnippetUI::StandardPlayerButton *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

SnippetUI::StandardPlayerButton *SnippetUI::StandardPlayerButton::StandardPlayerButton(SnippetUI::StandardPlayerButton *this, const SnippetUI::StandardPlayerButton *a2)
{
  *(void *)this = &unk_1F211E140;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::StandardPlayerButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (a2 == (const SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_)
  {
    *((void *)this + 4) = 0;
  }
  else
  {
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
  }
  *((void *)this + 5) = 0;
  return this;
}

void sub_1C5E1E27C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::StandardPlayerButton::default_instance(SnippetUI::StandardPlayerButton *this)
{
  if (atomic_load_explicit(scc_info_StandardPlayerButton_Button_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_StandardPlayerButton_Button_2eproto);
  }
  return &SnippetUI::_StandardPlayerButton_default_instance_;
}

void SnippetUI::StandardPlayerButton::CopyFrom(SnippetUI::StandardPlayerButton *this, const SnippetUI::StandardPlayerButton *a2)
{
  if (a2 != this)
  {
    SnippetUI::StandardPlayerButton::Clear(this);
    SnippetUI::StandardPlayerButton::MergeFrom(this, a2);
  }
}

void SnippetUI::StandardPlayerButton::InternalSwap(SnippetUI::StandardPlayerButton *this, SnippetUI::StandardPlayerButton *a2)
{
  uint64_t v4 = (SnippetUI::StandardPlayerButton *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v21;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  unsigned int v13 = (uint64_t *)*((void *)this + 3);
  unsigned int v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    unsigned int v13 = (uint64_t *)*((void *)this + 3);
  }
  unsigned int v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    unsigned int v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)unsigned int v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)unsigned int v15 = v17;
  v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
}

void SnippetUI::BinaryButton::InitAsDefaultInstance(SnippetUI::BinaryButton *this)
{
  qword_1EB68F530 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1EB68F538 = &SnippetUI::_Button_default_instance_;
}

uint64_t SnippetUI::BinaryButton::_Internal::primary_button(SnippetUI::BinaryButton::_Internal *this, const SnippetUI::BinaryButton *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::BinaryButton::_Internal::secondary_button(SnippetUI::BinaryButton::_Internal *this, const SnippetUI::BinaryButton *a2)
{
  return *((void *)this + 5);
}

SnippetUI::BinaryButton *SnippetUI::BinaryButton::BinaryButton(SnippetUI::BinaryButton *this, const SnippetUI::BinaryButton *a2)
{
  *(void *)this = &unk_1F211E200;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::BinaryButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (a2 == (const SnippetUI::BinaryButton *)&SnippetUI::_BinaryButton_default_instance_)
  {
    *((void *)this + 4) = 0;
  }
  else
  {
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
  }
  *((void *)this + 5) = 0;
  return this;
}

void sub_1C5E1E660(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40013F3344);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::BinaryButton::default_instance(SnippetUI::BinaryButton *this)
{
  if (atomic_load_explicit(scc_info_BinaryButton_Button_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_BinaryButton_Button_2eproto);
  }
  return &SnippetUI::_BinaryButton_default_instance_;
}

void SnippetUI::BinaryButton::CopyFrom(SnippetUI::BinaryButton *this, const SnippetUI::BinaryButton *a2)
{
  if (a2 != this)
  {
    SnippetUI::BinaryButton::Clear(this);
    SnippetUI::BinaryButton::MergeFrom(this, a2);
  }
}

void SnippetUI::BinaryButton::InternalSwap(SnippetUI::BinaryButton *this, SnippetUI::BinaryButton *a2)
{
  uint64_t v4 = (SnippetUI::BinaryButton *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v21;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  unsigned int v13 = (uint64_t *)*((void *)this + 3);
  unsigned int v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    unsigned int v13 = (uint64_t *)*((void *)this + 3);
  }
  unsigned int v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    unsigned int v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)unsigned int v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)unsigned int v15 = v17;
  v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
}

void SnippetUI::PlayerButton::InitAsDefaultInstance(SnippetUI::PlayerButton *this)
{
  qword_1EB68F558 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1EB68F560 = &SnippetUI::_Button_default_instance_;
}

uint64_t SnippetUI::PlayerButton::_Internal::play_button(SnippetUI::PlayerButton::_Internal *this, const SnippetUI::PlayerButton *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::PlayerButton::_Internal::pause_button(SnippetUI::PlayerButton::_Internal *this, const SnippetUI::PlayerButton *a2)
{
  return *((void *)this + 3);
}

SnippetUI::PlayerButton *SnippetUI::PlayerButton::PlayerButton(SnippetUI::PlayerButton *this, const SnippetUI::PlayerButton *a2)
{
  *(void *)this = &unk_1F211E2C0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::PlayerButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 == (const SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_)
  {
    *((void *)this + 2) = 0;
  }
  else
  {
    if (*((void *)a2 + 2)) {
      operator new();
    }
    *((void *)this + 2) = 0;
    if (*((void *)a2 + 3)) {
      operator new();
    }
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_1C5E1E9DC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40013F3344);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::PlayerButton::default_instance(SnippetUI::PlayerButton *this)
{
  if (atomic_load_explicit(scc_info_PlayerButton_Button_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_PlayerButton_Button_2eproto);
  }
  return &SnippetUI::_PlayerButton_default_instance_;
}

void SnippetUI::PlayerButton::CopyFrom(SnippetUI::PlayerButton *this, const SnippetUI::PlayerButton *a2)
{
  if (a2 != this)
  {
    SnippetUI::PlayerButton::Clear(this);
    SnippetUI::PlayerButton::MergeFrom(this, a2);
  }
}

void SnippetUI::PlayerButton::InternalSwap(SnippetUI::PlayerButton *this, SnippetUI::PlayerButton *a2)
{
  uint64_t v4 = (SnippetUI::PlayerButton *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
}

SnippetUI::WatchListButton *SnippetUI::WatchListButton::WatchListButton(SnippetUI::WatchListButton *this, const SnippetUI::WatchListButton *a2)
{
  *(void *)this = &unk_1F211E380;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::WatchListButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  return this;
}

void sub_1C5E1EBD0(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::WatchListButton::default_instance(SnippetUI::WatchListButton *this)
{
  if (atomic_load_explicit(scc_info_WatchListButton_Button_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_WatchListButton_Button_2eproto);
  }
  return &SnippetUI::_WatchListButton_default_instance_;
}

void SnippetUI::WatchListButton::CopyFrom(SnippetUI::WatchListButton *this, const SnippetUI::WatchListButton *a2)
{
  if (a2 != this)
  {
    SnippetUI::WatchListButton::Clear(this);
    SnippetUI::WatchListButton::MergeFrom(this, a2);
  }
}

__n128 SnippetUI::WatchListButton::InternalSwap(SnippetUI::WatchListButton *this, SnippetUI::WatchListButton *a2)
{
  uint64_t v4 = (SnippetUI::WatchListButton *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v10 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (std::string **)((char *)this + 16);
  uint64_t v9 = (std::string *)v10;
  long long v11 = (std::string **)((char *)a2 + 16);
  if (v10 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      return result;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v8, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v12 = *v11;
  if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v12 = *v11;
  }
  std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
  __n128 result = *(__n128 *)&v9->__r_.__value_.__l.__data_;
  std::string::size_type v14 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v9->__r_.__value_.__r.__words[2] = v14;
  *(__n128 *)&v12->__r_.__value_.__l.__data_ = result;
  v12->__r_.__value_.__r.__words[2] = v13;
  return result;
}

void siri::dialogengine::ValidateRequestData(siri::dialogengine *this, const siri::dialogengine::Context *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "device");
  siri::dialogengine::Context::FindVariable((uint64_t)this, (uint64_t)&__p, &v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!v18) {
    goto LABEL_15;
  }
  if (!v4) {
    goto LABEL_15;
  }
  uint64_t v5 = (uint64_t)v4;
  std::string::basic_string[abi:ne180100]<0>(v13, "voiceGender");
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v12 = 0;
  LOBYTE(v9) = 0;
  char v10 = 0;
  siri::dialogengine::FindVariableString(v5, (const void **)v13, (uint64_t)&__p, &v9, (uint64_t)v15);
  uint64_t v7 = v16;
  uint64_t v6 = v17;
  if (v12 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v14 & 0x80000000) == 0)
  {
    if (v7) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  operator delete(v13[0]);
  if (!v7)
  {
LABEL_13:
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
LABEL_15:
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    goto LABEL_24;
  }
LABEL_10:
  if (*(char *)(v7 + 95) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 72), *(void *)(v7 + 80));
  }
  else {
    std::string __p = *(std::string *)(v7 + 72);
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    BOOL v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 0;
    if (!v6) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  BOOL v8 = __p.__r_.__value_.__l.__size_ == 0;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v6) {
LABEL_20:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
LABEL_21:
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v8) {
LABEL_24:
  }
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Global parameter 'device.voiceGender' is missing, or is not a string, or is an empty string", v3);
}

void sub_1C5E1EF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  unint64_t v26 = *(std::__shared_weak_count **)(v24 - 24);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ParseRequestFromJson(siri::dialogengine::Context **a1@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  {
    siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "Request");
  }
  os_signpost_id_t v3 = os_signpost_id_generate((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v4 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "ParseRequestFromJson", "", buf, 2u);
    }
  }
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"BEGIN: ParseRequestFromJson", v2);
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine7ContextENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a1);
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  memset(&v8, 0, sizeof(v8));
  memset(&v7, 0, sizeof(v7));
  memset(&v6, 0, sizeof(v6));
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)v11);
}

void sub_1C5E20EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
  STACK[0xA40] = (unint64_t)&a18;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA40]);
  if (SLOBYTE(STACK[0xA8F]) < 0) {
    operator delete((void *)STACK[0xA78]);
  }
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&STACK[0xA90]);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(v19 - 200);
  STACK[0xA90] = (unint64_t)&STACK[0xC80];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA90]);
  if (SLOBYTE(STACK[0xCB7]) < 0) {
    operator delete((void *)STACK[0xCA0]);
  }
  if (*(char *)(v19 - 233) < 0) {
    operator delete(*(void **)(v19 - 256));
  }
  if (*(char *)(v19 - 201) < 0) {
    operator delete(*(void **)(v19 - 224));
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v18 + 8);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseJSONVariable(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  {
    siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "Request");
  }
  os_signpost_id_t v5 = os_signpost_id_generate((os_log_t)siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    std::vector<std::string> v6 = siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog))
    {
      if (*((char *)a3 + 23) >= 0) {
        std::string v7 = a3;
      }
      else {
        std::string v7 = (uint64_t *)*a3;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = v7;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "ParseJSONVariable", "name = %s", buf, 0xCu);
    }
  }
  int v8 = *(unsigned __int16 *)(a2 + 22);
  if ((v8 & 0x400) != 0) {
    operator new();
  }
  if ((v8 & 8) != 0) {
    operator new();
  }
  if ((v8 & 0x10) != 0) {
    operator new();
  }
  if (v8 == 3) {
    operator new();
  }
  if (v8 == 4) {
    operator new();
  }
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v9 = siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v9, OS_SIGNPOST_INTERVAL_END, v5, "ParseJSONVariable", "", buf, 2u);
    }
  }
}

void sub_1C5E218A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  MEMORY[0x1C8796D70](v20, 0x10B3C40C1072A30);
  _Unwind_Resume(a1);
}

BOOL rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(unsigned int *a1, uint64_t *a2)
{
  __int16 v2 = *((_WORD *)a1 + 11);
  switch(v2 & 7)
  {
    case 0:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a2, 0);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteNull(a2);
      return 1;
    case 1:
      uint64_t v5 = 1;
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a2, 1);
      std::vector<std::string> v6 = a2;
      int v7 = 0;
      goto LABEL_5;
    case 2:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a2, 2);
      uint64_t v5 = 1;
      std::vector<std::string> v6 = a2;
      int v7 = 1;
LABEL_5:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool(v6, v7);
      return v5;
    case 3:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)a2);
      if (*((_WORD *)a1 + 11) != 3) {
        __assert_rtn("MemberBegin", "document.h", 1155, "IsObject()");
      }
      uint64_t v8 = *((void *)a1 + 1);
      while (2)
      {
        if (v8 == *((void *)a1 + 1) + 48 * *a1)
        {
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)a2);
          return 1;
        }
        if ((*(_WORD *)(v8 + 22) & 0x400) == 0) {
          __assert_rtn("Accept", "document.h", 1872, "m->name.IsString()");
        }
        uint64_t String = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v8);
        unsigned int StringLength = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetStringLength((unsigned int *)v8);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a2, String, StringLength);
        uint64_t v11 = v8 + 24;
        if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(v11, a2))
        {
          uint64_t v8 = v11 + 24;
          if (*((_WORD *)a1 + 11) != 3) {
            __assert_rtn("MemberEnd", "document.h", 1158, "IsObject()");
          }
          continue;
        }
        break;
      }
      return 0;
    case 4:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)a2);
      if (*((_WORD *)a1 + 11) != 4) {
        __assert_rtn("Begin", "document.h", 1591, "IsArray()");
      }
      uint64_t v12 = *((void *)a1 + 1);
      while (2)
      {
        if (v12 == *((void *)a1 + 1) + 24 * *a1)
        {
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)a2);
          return 1;
        }
        if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(v12, a2))
        {
          v12 += 24;
          if (*((_WORD *)a1 + 11) != 4) {
            __assert_rtn("End", "document.h", 1594, "IsArray()");
          }
          continue;
        }
        break;
      }
      return 0;
    case 5:
      uint64_t v13 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)a1);
      unsigned int v14 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetStringLength(a1);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a2, v13, v14);
      return 1;
    case 6:
      if ((*((_WORD *)a1 + 11) & 0x200) != 0)
      {
        double v16 = *(double *)a1;
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a2, 6);
        return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteDouble((uint64_t)a2, v16);
      }
      else
      {
        if ((v2 & 0x20) != 0)
        {
          unint64_t v18 = *a1;
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a2, 6);
          uint64_t v19 = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>((void *)*a2, 11);
          uint64_t v21 = v19;
          if ((v18 & 0x80000000) != 0)
          {
            *uint64_t v19 = 45;
            unsigned int v22 = v19 + 1;
            unint64_t v18 = -(int)v18;
          }
          else
          {
            unsigned int v22 = v19;
          }
          unsigned int v23 = rapidjson::internal::u32toa((rapidjson::internal *)v18, v22, v20);
          uint64_t v24 = *(void *)(*a2 + 24);
          if (v24 - *(void *)(*a2 + 16) < (unint64_t)(v21 - v23 + 11)) {
            __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
          }
          *(void *)(*a2 + 24) = v24 - (v21 - v23) - 11;
        }
        else if ((v2 & 0x40) != 0)
        {
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint((void **)a2, (rapidjson::internal *)*a1);
        }
        else
        {
          unint64_t v15 = *(void *)a1;
          if ((v2 & 0x80) != 0) {
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64((void **)a2, v15);
          }
          else {
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint64((void **)a2, v15);
          }
        }
        return 1;
      }
    default:
      __assert_rtn("Accept", "document.h", 1892, "GetType() == kNumberType");
  }
}

void siri::dialogengine::ParseJSONObject(uint64_t a1, int *a2, uint64_t a3)
{
  {
    siri::dialogengine::ParseJSONObject(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,siri::dialogengine::Variable *)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "Request");
  }
  os_signpost_id_t v6 = os_signpost_id_generate((os_log_t)siri::dialogengine::ParseJSONObject(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,siri::dialogengine::Variable *)::sSignpostLog);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v7 = siri::dialogengine::ParseJSONObject(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,siri::dialogengine::Variable *)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseJSONObject(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,siri::dialogengine::Variable *)::sSignpostLog))
    {
      LOWORD(__p[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v6, "ParseJSONObject", "", (uint8_t *)__p, 2u);
    }
  }
  if (*((_WORD *)a2 + 11) != 3) {
    __assert_rtn("GetObject", "document.h", 1544, "IsObject()");
  }
  unsigned int v8 = *a2;
  if (*a2)
  {
    uint64_t v9 = *((void *)a2 + 1);
    uint64_t v10 = v9 + 48 * v8;
    do
    {
      uint64_t String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v9);
      std::string::basic_string[abi:ne180100]<0>(__p, String);
      uint64_t v12 = v9 + 24;
      siri::dialogengine::ParseJSONVariable(a1, v12, __p, a3);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v9 = v12 + 24;
    }
    while (v9 != v10);
  }
  if (v6 - 1 < 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v13 = siri::dialogengine::ParseJSONObject(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,siri::dialogengine::Variable *)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseJSONObject(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,siri::dialogengine::Variable *)::sSignpostLog))
    {
      LOWORD(__p[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v13, OS_SIGNPOST_INTERVAL_END, v6, "ParseJSONObject", "", (uint8_t *)__p, 2u);
    }
  }
}

void sub_1C5E21F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableObject,siri::dialogengine::Variable>(void *result, void *lpsrc, uint64_t a3)
{
  os_signpost_id_t v3 = result;
  if (lpsrc
  {
    *os_signpost_id_t v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *os_signpost_id_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableNumber,std::allocator<siri::dialogengine::VariableNumber>,char const(&)[5],long long const&,void>(void *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x68uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1F2126A88;
  std::string::basic_string[abi:ne180100]<0>(&__p, "secs");
  siri::dialogengine::VariableNumber::VariableNumber((uint64_t)(v4 + 3), &__p, (double)*a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1C5E2204C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t rapidjson::GenericObject<true,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>::end(unsigned int *a1)
{
  if (*((_WORD *)a1 + 11) != 3) {
    __assert_rtn("MemberEnd", "document.h", 1158, "IsObject()");
  }
  return *((void *)a1 + 1) + 48 * *a1;
}

void siri::dialogengine::SetResponseModeToVoiceOnlyIfDeviceIsHomePod(siri::dialogengine *this, siri::dialogengine::Context *a2, siri::dialogengine::RequestInfo *a3)
{
  if (siri::dialogengine::DeviceIsHomePod(this, a2))
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Device is a HomePod; Forcing response mode to voiceOnly",
      v4);
    *((_DWORD *)a2 + 38) = 1;
  }
}

uint64_t rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 32);
  unint64_t v3 = v2 - *(void *)(result + 24);
  if (v3)
  {
    if (v3 <= 0xF) {
      __assert_rtn("Top", "stack.h", 146, "GetSize() >= sizeof(T)");
    }
    uint64_t v5 = *(void *)(v2 - 16);
    if (v5)
    {
      os_signpost_id_t v6 = *(void **)result;
      if (v5) {
        char v7 = 58;
      }
      else {
        char v7 = 44;
      }
      if (*(unsigned char *)(v2 - 8)) {
        char v8 = 44;
      }
      else {
        char v8 = v7;
      }
      __n128 result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(v6, 1);
      *(unsigned char *)__n128 result = v8;
      uint64_t v5 = *(void *)(v2 - 16);
    }
    if (*(unsigned char *)(v2 - 8)) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = a2 == 5;
    }
    if (!v9 && (v5 & 1) == 0) {
      __assert_rtn("Prefix", "writer.h", 483, "type == kStringType");
    }
    *(void *)(v2 - 16) = v5 + 1;
  }
  else
  {
    if (*(unsigned char *)(result + 60)) {
      __assert_rtn("Prefix", "writer.h", 487, "!hasRoot_");
    }
    *(unsigned char *)(result + 60) = 1;
  }
  return result;
}

unsigned char *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(uint64_t a1)
{
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix(a1, 3);
  uint64_t v2 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>((void *)(a1 + 8));
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 0;
  __n128 result = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(void **)a1, 1);
  *__n128 result = 123;
  return result;
}

unsigned char *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  if (!a2) {
    __assert_rtn("String", "writer.h", 203, "str != 0");
  }
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a1, 5);
  return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(a1, a2, a3);
}

unsigned char *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((unint64_t)(v1 - *(void *)(a1 + 24)) <= 0xF) {
    __assert_rtn("EndObject", "writer.h", 232, "level_stack_.GetSize() >= sizeof(Level)");
  }
  if (*(unsigned char *)(v1 - 8)) {
    __assert_rtn("EndObject", "writer.h", 233, "!level_stack_.template Top<Level>()->inArray");
  }
  char v3 = *(unsigned char *)(v1 - 16);
  uint64_t v2 = v1 - 16;
  if (v3) {
    __assert_rtn("EndObject", "writer.h", 234, "0 == level_stack_.template Top<Level>()->valueCount % 2");
  }
  *(void *)(a1 + 32) = v2;
  __n128 result = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(void **)a1, 1);
  *__n128 result = 125;
  return result;
}

unsigned char *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray(uint64_t a1)
{
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix(a1, 4);
  uint64_t v2 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>((void *)(a1 + 8));
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  __n128 result = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(void **)a1, 1);
  *__n128 result = 91;
  return result;
}

unsigned char *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((unint64_t)(v1 - *(void *)(a1 + 24)) <= 0xF) {
    __assert_rtn("EndArray", "writer.h", 247, "level_stack_.GetSize() >= sizeof(Level)");
  }
  if (!*(unsigned char *)(v1 - 8)) {
    __assert_rtn("EndArray", "writer.h", 248, "level_stack_.template Top<Level>()->inArray");
  }
  *(void *)(a1 + 32) = v1 - 16;
  __n128 result = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(void **)a1, 1);
  *__n128 result = 93;
  return result;
}

unsigned char *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint(void **a1, rapidjson::internal *a2)
{
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a1, 6);
  uint64_t v4 = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 10);
  __n128 result = rapidjson::internal::u32toa(a2, v4, v5);
  uint64_t v7 = (*a1)[3];
  if (v7 - (*a1)[2] < (unint64_t)(v4 - result + 10)) {
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  }
  (*a1)[3] = v7 - (v4 - result) - 10;
  return result;
}

unsigned char *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64(void **a1, unint64_t a2)
{
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a1, 6);
  uint64_t v4 = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 21);
  os_signpost_id_t v6 = v4;
  if ((a2 & 0x8000000000000000) != 0)
  {
    *uint64_t v4 = 45;
    uint64_t v7 = v4 + 1;
    a2 = -(uint64_t)a2;
  }
  else
  {
    uint64_t v7 = v4;
  }
  __n128 result = rapidjson::internal::u64toa(a2, v7, v5);
  uint64_t v9 = (*a1)[3];
  if (v9 - (*a1)[2] < (unint64_t)(v6 - result + 21)) {
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  }
  (*a1)[3] = v9 - (v6 - result) - 21;
  return result;
}

unsigned char *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint64(void **a1, unint64_t a2)
{
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a1, 6);
  uint64_t v4 = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 20);
  __n128 result = rapidjson::internal::u64toa(a2, v4, v5);
  uint64_t v7 = (*a1)[3];
  if (v7 - (*a1)[2] < (unint64_t)(v4 - result + 20)) {
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  }
  (*a1)[3] = v7 - (v4 - result) - 20;
  return result;
}

void std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::Variable,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5E226A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Variable *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::Variable>,std::allocator<siri::dialogengine::Variable>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Variable *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::Variable>,std::allocator<siri::dialogengine::Variable>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::Variable *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::Variable>,std::allocator<siri::dialogengine::Variable>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::ParseRequestFromVariable(uint64_t *a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, const std::string *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = (NSObject **)&unk_1EA3D7000;
  {
    siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "Request");
  }
  os_signpost_id_t v12 = os_signpost_id_generate((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog);
  unint64_t v13 = v12 - 1;
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unsigned int v14 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v12, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
    }
  }
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"BEGIN: ParseRequestFromVariable", v11);
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine7ContextENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((siri::dialogengine::Context **)a5);
  memset(&v243, 0, sizeof(v243));
  memset(&__str, 0, sizeof(__str));
  memset(&v241, 0, sizeof(v241));
  memset(&v240, 0, sizeof(v240));
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v219);
  std::string::operator=(v222, a2);
  std::string::operator=(&v227, a3);
  std::string::operator=(v236, a4);
  uint64_t v15 = *a1;
  if (!*a1)
  {
    unint64_t v18 = (siri::dialogengine::Context *)*a5;
    std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
    std::string::basic_string[abi:ne180100]<0>(__p, "requestVars is NULL");
    std::string::operator=((std::string *)((char *)v18 + 688), buf);
    siri::dialogengine::Context::SetError((uint64_t)v18, (uint64_t)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v19 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
      if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v19, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
      }
    }
    siri::dialogengine::RequestInfo::~RequestInfo(&v219);
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v240;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v241.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v243.__r_.__value_.__l.__data_);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "createTrace");
  LOWORD(v217.__r_.__value_.__l.__data_) = 256;
  v218.__r_.__value_.__s.__data_[0] = 0;
  v218.__r_.__value_.__s.__data_[4] = 0;
  siri::dialogengine::FindVariableBool(v15, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v217, (int *)&v218, (uint64_t)buf);
  int v17 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
  if (buf[0].__r_.__value_.__r.__words[2]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
  }
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v17) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (v17)
  {
LABEL_25:
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate trace creation (and debug mode)", v16);
    v230 |= 0x11u;
  }
LABEL_26:
  uint64_t v20 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v218, "requestType");
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  buf[1].__r_.__value_.__s.__data_[0] = 0;
  v217.__r_.__value_.__s.__data_[0] = 0;
  v217.__r_.__value_.__s.__data_[4] = 0;
  siri::dialogengine::FindVariableString(v20, (const void **)&v218.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v217, (uint64_t)__p);
  if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v218.__r_.__value_.__l.__data_);
  }
  if (!__p[0].__r_.__value_.__l.__size_)
  {
    int v21 = 0;
    goto LABEL_51;
  }
  if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0) {
    std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(void *)(__p[0].__r_.__value_.__l.__size_ + 80));
  }
  else {
    buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
  }
  std::string::basic_string[abi:ne180100]<0>(&v218, "visual");
  BOOL v22 = siri::dialogengine::StringsEqual((uint64_t)buf, (uint64_t)&v218);
  BOOL v23 = v22;
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v218.__r_.__value_.__l.__data_);
    if (v23) {
      goto LABEL_38;
    }
  }
  else if (v22)
  {
LABEL_38:
    int v21 = 1;
    goto LABEL_49;
  }
  std::string::basic_string[abi:ne180100]<0>(&v218, "dialog");
  BOOL v24 = siri::dialogengine::StringsEqual((uint64_t)buf, (uint64_t)&v218);
  BOOL v25 = v24;
  if ((SHIBYTE(v218.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v24) {
      goto LABEL_48;
    }
LABEL_44:
    std::operator+<char>();
    unint64_t v26 = std::string::append(&v217, "], defaulting to dialog");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v218.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v218, 1u);
    if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v218.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v217.__r_.__value_.__l.__data_);
    }
    goto LABEL_48;
  }
  operator delete(v218.__r_.__value_.__l.__data_);
  if (!v25) {
    goto LABEL_44;
  }
LABEL_48:
  int v21 = 0;
LABEL_49:
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
LABEL_51:
  if (__p[0].__r_.__value_.__r.__words[2]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2]);
  }
  LODWORD(v219) = v21;
  uint64_t v28 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v218, "templateDir");
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  buf[1].__r_.__value_.__s.__data_[0] = 0;
  v217.__r_.__value_.__s.__data_[0] = 0;
  v217.__r_.__value_.__s.__data_[4] = 0;
  siri::dialogengine::FindVariableString(v28, (const void **)&v218.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v217, (uint64_t)__p);
  if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v218.__r_.__value_.__l.__data_);
  }
  if (!__p[0].__r_.__value_.__s.__data_[0])
  {
    char v29 = 0;
LABEL_75:
    int v32 = 1;
    goto LABEL_76;
  }
  if (__p[0].__r_.__value_.__s.__data_[1])
  {
    if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0) {
      std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(void *)(__p[0].__r_.__value_.__l.__size_ + 80));
    }
    else {
      buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
    }
    if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v243.__r_.__value_.__l.__data_);
    }
    char v29 = 0;
    std::string v243 = buf[0];
    goto LABEL_75;
  }
  v30 = (siri::dialogengine::Context *)*a5;
  std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
  std::string::basic_string[abi:ne180100]<0>(&v218, "templateDir is not a string");
  std::string::operator=((std::string *)((char *)v30 + 688), buf);
  siri::dialogengine::Context::SetError((uint64_t)v30, (uint64_t)&v218);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v218.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unsigned int v31 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v31, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
    }
  }
  int v32 = 0;
  char v29 = 1;
LABEL_76:
  if (__p[0].__r_.__value_.__r.__words[2]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2]);
  }
  if (!v32) {
    goto LABEL_559;
  }
  std::string::size_type size = HIBYTE(v243.__r_.__value_.__r.__words[2]);
  if ((v243.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v243.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (!siri::dialogengine::DirExists((uint64_t *)&v243))
    {
      std::operator+<char>();
      siri::dialogengine::Log::LogWithLevel((uint64_t)buf, 1u);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
    }
  }
  siri::dialogengine::ValidateTemplateDir((uint64_t)&v243, &v218);
  uint64_t v34 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "enableUpdates");
  LOWORD(v216.__r_.__value_.__l.__data_) = 256;
  v217.__r_.__value_.__s.__data_[0] = 0;
  v217.__r_.__value_.__s.__data_[4] = 0;
  siri::dialogengine::FindVariableBool(v34, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v216, (int *)&v217, (uint64_t)buf);
  int v35 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
  if (buf[0].__r_.__value_.__r.__words[2]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  BOOL v37 = !siri::dialogengine::DisableUpdates((uint64_t)&v243);
  if (v35) {
    int v38 = v37;
  }
  else {
    int v38 = 0;
  }
  if (v38)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Enable updates", v36);
    v230 |= 8u;
  }
  siri::dialogengine::GetTemplateDirs((uint64_t)&v218, v38, (uint64_t)buf);
  std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)&v220, (std::string *)buf[0].__r_.__value_.__l.__data_, (std::string *)buf[0].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(buf[0].__r_.__value_.__l.__size_ - buf[0].__r_.__value_.__r.__words[0]) >> 5));
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  uint64_t v39 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "isSpotlight");
  LOWORD(v216.__r_.__value_.__l.__data_) = 256;
  v217.__r_.__value_.__s.__data_[0] = 0;
  v217.__r_.__value_.__s.__data_[4] = 0;
  siri::dialogengine::FindVariableBool(v39, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v216, (int *)&v217, (uint64_t)buf);
  int v41 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
  if (buf[0].__r_.__value_.__r.__words[2]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
  }
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v41) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (v41)
  {
LABEL_100:
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate spotlight mode", v40);
    v230 |= 0x100u;
  }
LABEL_101:
  uint64_t v42 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v217, "catId");
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  buf[1].__r_.__value_.__s.__data_[0] = 0;
  LODWORD(v216.__r_.__value_.__l.__data_) = 3;
  v216.__r_.__value_.__s.__data_[4] = 1;
  siri::dialogengine::FindVariableString(v42, (const void **)&v217.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v216, (uint64_t)__p);
  if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v217.__r_.__value_.__l.__data_);
  }
  if (__p[0].__r_.__value_.__l.__size_)
  {
    if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0) {
      std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(void *)(__p[0].__r_.__value_.__l.__size_ + 80));
    }
    else {
      buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = buf[0];
  }
  if (__p[0].__r_.__value_.__r.__words[2]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2]);
  }
  std::string::operator=(&v221, &__str);
  uint64_t v43 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v217, "locale");
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  buf[1].__r_.__value_.__s.__data_[0] = 0;
  LODWORD(v216.__r_.__value_.__l.__data_) = 1;
  v216.__r_.__value_.__s.__data_[4] = 1;
  siri::dialogengine::FindVariableString(v43, (const void **)&v217.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v216, (uint64_t)__p);
  if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v217.__r_.__value_.__l.__data_);
  }
  if (__p[0].__r_.__value_.__l.__size_)
  {
    if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0) {
      std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(void *)(__p[0].__r_.__value_.__l.__size_ + 80));
    }
    else {
      std::string v217 = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
    }
    siri::dialogengine::GetCanonicalLocale(&v217, 0, buf);
    if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v241.__r_.__value_.__l.__data_);
    }
    std::string v241 = buf[0];
    *((unsigned char *)&buf[0].__r_.__value_.__s + 23) = 0;
    buf[0].__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v217.__r_.__value_.__l.__data_);
    }
    siri::dialogengine::GetFallbackLocales((uint64_t)&v241, (uint64_t *)buf);
    std::vector<std::string>::__vdeallocate(&v240);
    std::vector<std::string> v240 = (std::vector<std::string>)buf[0];
    memset(buf, 0, 24);
    v217.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
  }
  if (__p[0].__r_.__value_.__r.__words[2]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2]);
  }
  std::string::operator=(&v228, &v241);
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v229, v240.__begin_, (long long *)v240.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v240.__end_ - (char *)v240.__begin_) >> 3));
  if (v240.__begin_ != v240.__end_)
  {
    if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
    {
      if (!a3->__r_.__value_.__l.__size_) {
        goto LABEL_138;
      }
      v45 = (uint64_t *)a3->__r_.__value_.__r.__words[0];
    }
    else
    {
      v45 = (uint64_t *)a3;
      if (!*((unsigned char *)&a3->__r_.__value_.__s + 23)) {
        goto LABEL_138;
      }
    }
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Ignoring CAT 'locales' parameter - using specified CAT locale string '%s'", v44, v45);
  }
LABEL_138:
  if (!v21 && v240.__begin_ == v240.__end_)
  {
    std::string::size_type v46 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v46 & 0x80u) != 0) {
      std::string::size_type v46 = a3->__r_.__value_.__l.__size_;
    }
    if (!v46)
    {
      v76 = (siri::dialogengine::Context *)*a5;
      std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
      std::string::basic_string[abi:ne180100]<0>(__p, "No locale specified");
      std::string::operator=((std::string *)((char *)v76 + 688), buf);
      siri::dialogengine::Context::SetError((uint64_t)v76, (uint64_t)__p);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      if (v13 > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_248;
      }
      v77 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
      if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog)) {
        goto LABEL_248;
      }
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      v78 = buf;
LABEL_247:
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v77, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromVariable", "", (uint8_t *)v78, 2u);
LABEL_248:
      char v29 = 1;
      goto LABEL_557;
    }
  }
  uint64_t v47 = *a1;
  std::string::basic_string[abi:ne180100]<0>(buf, "dialogMetadata");
  uint64_t v48 = std::__tree<std::string>::find<std::string>(v47 + 72, (const void **)&buf[0].__r_.__value_.__l.__data_);
  if (v47 + 80 == v48)
  {
    unint64_t v50 = 0;
    unsigned int v49 = 0;
  }
  else
  {
    unsigned int v49 = *(const void **)(v48 + 56);
    unint64_t v50 = *(std::__shared_weak_count **)(v48 + 64);
    if (v50) {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v49) {
      goto LABEL_149;
    }
LABEL_180:
    int v65 = 1;
    goto LABEL_191;
  }
  operator delete(buf[0].__r_.__value_.__l.__data_);
  if (!v49) {
    goto LABEL_180;
  }
LABEL_149:
  if (v51)
  {
    v201 = a1;
    v198 = v50;
    siri::dialogengine::VariableObject::GetValues(v51, buf);
    char v52 = v29;
    os_signpost_id_t spid = v12;
    std::string::size_type v54 = buf[0].__r_.__value_.__l.__size_;
    unint64_t v53 = (const void **)buf[0].__r_.__value_.__r.__words[0];
    if (buf[0].__r_.__value_.__r.__words[0] == buf[0].__r_.__value_.__l.__size_)
    {
LABEL_178:
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      int v65 = 1;
    }
    else
    {
      uint64_t v55 = (siri::dialogengine::Context *)*a5;
      v56 = (std::string *)(*a5 + 688);
      while (1)
      {
        v57 = (char *)*v53;
        if (*((char *)*v53 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(__p, *((const std::string::value_type **)v57 + 1), *((void *)v57 + 2));
        }
        else
        {
          long long v58 = *(_OWORD *)(v57 + 8);
          __p[0].__r_.__value_.__r.__words[2] = *((void *)v57 + 3);
          *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v58;
        }
        if (*v53
        {
          if (v59[95] < 0) {
            std::string::__init_copy_ctor_external(&v217, *((const std::string::value_type **)v59 + 9), *((void *)v59 + 10));
          }
          else {
            std::string v217 = *(std::string *)(v59 + 3);
          }
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v63 = __p;
          }
          else {
            v63 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Got dialog metadata for semantic concept category '%s'", v60, v63);
          v216.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          v64 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v233, (const void **)&__p[0].__r_.__value_.__l.__data_, (long long **)&v216);
          std::string::operator=((std::string *)(v64 + 7), &v217);
          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v217.__r_.__value_.__l.__data_);
          }
          char v62 = 0;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v217, "request-error");
          std::string::basic_string[abi:ne180100]<0>(&v216, "JSON property dialogMetadata has a value that is not a string type");
          std::string::operator=(v56, &v217);
          siri::dialogengine::Context::SetError((uint64_t)v55, (uint64_t)&v216);
          if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v216.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v217.__r_.__value_.__l.__data_);
          }
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v61 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
            if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
            {
              LOWORD(v217.__r_.__value_.__l.__data_) = 0;
              _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v61, OS_SIGNPOST_INTERVAL_END, spid, "ParseRequestFromVariable", "", (uint8_t *)&v217, 2u);
            }
          }
          char v62 = 1;
          char v52 = 1;
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        if (v62) {
          break;
        }
        v53 += 2;
        if (v53 == (const void **)v54) {
          goto LABEL_178;
        }
      }
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      int v65 = 0;
    }
    a1 = v201;
    os_signpost_id_t v12 = spid;
    uint64_t v10 = (NSObject **)&unk_1EA3D7000;
    char v29 = v52;
    unint64_t v50 = v198;
  }
  else
  {
    v66 = (siri::dialogengine::Context *)*a5;
    std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
    std::string::basic_string[abi:ne180100]<0>(__p, "JSON property dialogMetadata is not an object type");
    std::string::operator=((std::string *)((char *)v66 + 688), buf);
    siri::dialogengine::Context::SetError((uint64_t)v66, (uint64_t)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v67 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
      if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v67, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
      }
    }
    int v65 = 0;
    char v29 = 1;
  }
LABEL_191:
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  if (!v65) {
    goto LABEL_557;
  }
  uint64_t v68 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v217, "interactionId");
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  buf[1].__r_.__value_.__s.__data_[0] = 0;
  v216.__r_.__value_.__s.__data_[0] = 0;
  v216.__r_.__value_.__s.__data_[4] = 0;
  siri::dialogengine::FindVariableString(v68, (const void **)&v217.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v216, (uint64_t)__p);
  if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v217.__r_.__value_.__l.__data_);
  }
  if (!__p[0].__r_.__value_.__s.__data_[0]) {
    goto LABEL_214;
  }
  if (__p[0].__r_.__value_.__s.__data_[1])
  {
    if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0) {
      std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(void *)(__p[0].__r_.__value_.__l.__size_ + 80));
    }
    else {
      buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
    }
    std::string::operator=(&__s, buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
LABEL_214:
    int v71 = 1;
    goto LABEL_215;
  }
  v69 = (siri::dialogengine::Context *)*a5;
  std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
  std::string::basic_string[abi:ne180100]<0>(&v217, "interactionId is not a string");
  std::string::operator=((std::string *)((char *)v69 + 688), buf);
  siri::dialogengine::Context::SetError((uint64_t)v69, (uint64_t)&v217);
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v217.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v70 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v70, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
    }
  }
  int v71 = 0;
  char v29 = 1;
LABEL_215:
  if (__p[0].__r_.__value_.__r.__words[2]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2]);
  }
  if (!v71) {
    goto LABEL_557;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(buf, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    buf[0] = __s;
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  uint64_t v72 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v217, "executionRequestId");
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  buf[1].__r_.__value_.__s.__data_[0] = 0;
  v216.__r_.__value_.__s.__data_[0] = 0;
  v216.__r_.__value_.__s.__data_[4] = 0;
  siri::dialogengine::FindVariableString(v72, (const void **)&v217.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v216, (uint64_t)__p);
  if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v217.__r_.__value_.__l.__data_);
  }
  if (!__p[0].__r_.__value_.__s.__data_[0]) {
    goto LABEL_252;
  }
  if (__p[0].__r_.__value_.__s.__data_[1])
  {
    if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0) {
      std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(void *)(__p[0].__r_.__value_.__l.__size_ + 80));
    }
    else {
      buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
    }
    std::string::operator=(&v235, buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
LABEL_252:
    int v75 = 1;
    goto LABEL_253;
  }
  v73 = (siri::dialogengine::Context *)*a5;
  std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
  std::string::basic_string[abi:ne180100]<0>(&v217, "executionRequestId is not a string");
  std::string::operator=((std::string *)((char *)v73 + 688), buf);
  siri::dialogengine::Context::SetError((uint64_t)v73, (uint64_t)&v217);
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v217.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v74 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v74, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
    }
  }
  int v75 = 0;
  char v29 = 1;
LABEL_253:
  if (__p[0].__r_.__value_.__r.__words[2]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2]);
  }
  if (!v75) {
    goto LABEL_557;
  }
  uint64_t v79 = *a1;
  std::string::basic_string[abi:ne180100]<0>(buf, "globalParameters");
  uint64_t v80 = std::__tree<std::string>::find<std::string>(v79 + 72, (const void **)&buf[0].__r_.__value_.__l.__data_);
  if (v79 + 80 == v80)
  {
    v81 = 0;
    v82 = 0;
  }
  else
  {
    v81 = *(const void **)(v80 + 56);
    v82 = *(std::__shared_weak_count **)(v80 + 64);
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (v81)
  {
    if (v83)
    {
      if (v82) {
        atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v197 = v82;
      v202 = a1;
      os_signpost_id_t spida = v13;
      v200 = a5;
      siri::dialogengine::VariableObject::GetValues(v83, buf);
      std::string::size_type v85 = buf[0].__r_.__value_.__l.__size_;
      v84 = (void *)buf[0].__r_.__value_.__r.__words[0];
      if (buf[0].__r_.__value_.__r.__words[0] != buf[0].__r_.__value_.__l.__size_)
      {
        uint64_t v86 = *v200;
        do
        {
          uint64_t v87 = *v84;
          if (*(char *)(*v84 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)(v87 + 8), *(void *)(v87 + 16));
          }
          else
          {
            long long v88 = *(_OWORD *)(v87 + 8);
            __p[0].__r_.__value_.__r.__words[2] = *(void *)(v87 + 24);
            *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v88;
          }
          uint64_t GlobalParameter = siri::dialogengine::Context::GetGlobalParameter(v86, (const void **)&__p[0].__r_.__value_.__l.__data_);
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v91 = __p;
          }
          else {
            v91 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
          }
          if (GlobalParameter)
          {
            siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Store global parameter '%s'", v90, v91);
            v92 = (std::__shared_weak_count *)v84[1];
            v215[0] = *v84;
            v215[1] = v92;
            if (v92) {
              atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            siri::dialogengine::Context::AddVariable(v86, v215);
            if (v92) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v92);
            }
          }
          else
          {
            siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Ignoring unsupported global parameter '%s'", v90, v91);
          }
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          v84 += 2;
        }
        while (v84 != (void *)v85);
      }
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (v197)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v197);
        std::__shared_weak_count::__release_shared[abi:ne180100](v197);
      }
      a5 = v200;
      a1 = v202;
      uint64_t v10 = (NSObject **)&unk_1EA3D7000;
      unint64_t v13 = spida;
LABEL_299:
      uint64_t v96 = *a1;
      std::string::basic_string[abi:ne180100]<0>(buf, "parameters");
      uint64_t v97 = std::__tree<std::string>::find<std::string>(v96 + 72, (const void **)&buf[0].__r_.__value_.__l.__data_);
      if (v96 + 80 == v97)
      {
        v98 = 0;
        v99 = 0;
      }
      else
      {
        v98 = *(void **)(v97 + 56);
        v99 = *(std::__shared_weak_count **)(v97 + 64);
        if (v99) {
          atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      if (!v98) {
        goto LABEL_328;
      }
      std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableObject,siri::dialogengine::Variable>(&v217, v98, (uint64_t)v99);
      v100 = (siri::dialogengine::VariableObject *)v217.__r_.__value_.__r.__words[0];
      if (v217.__r_.__value_.__r.__words[0])
      {
        siri::dialogengine::ConvertVariableObjToJSONObj((uint64_t *)__p, (siri::dialogengine *)v217.__r_.__value_.__l.__data_);
        siri::dialogengine::ConstructJSONString(__p, buf);
        char v199 = v29;
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)__p[0].__r_.__value_.__l.__size_);
        std::string::operator=(&v223, buf);
        os_signpost_id_t spidb = v13;
        v101 = v10;
        siri::dialogengine::VariableObject::GetValues(v100, __p);
        std::string::size_type v103 = __p[0].__r_.__value_.__l.__size_;
        v102 = (void *)__p[0].__r_.__value_.__r.__words[0];
        if (__p[0].__r_.__value_.__r.__words[0] != __p[0].__r_.__value_.__l.__size_)
        {
          v104 = (siri::dialogengine::Context *)*a5;
          do
          {
            v105 = (std::__shared_weak_count *)v102[1];
            v214[0] = *v102;
            v214[1] = v105;
            if (v105) {
              atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            siri::dialogengine::Context::AddVariable((uint64_t)v104, v214);
            if (v105) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v105);
            }
            v102 += 2;
          }
          while (v102 != (void *)v103);
        }
        v216.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v216);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
        uint64_t v10 = v101;
        unint64_t v13 = spidb;
        char v29 = v199;
      }
      else
      {
        v106 = (siri::dialogengine::Context *)*a5;
        std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
        std::string::basic_string[abi:ne180100]<0>(__p, "JSON property parameters is not an object type");
        std::string::operator=((std::string *)((char *)v106 + 688), buf);
        siri::dialogengine::Context::SetError((uint64_t)v106, (uint64_t)__p);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
        if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v107 = v10[342];
          if (os_signpost_enabled(v107))
          {
            LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v107, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
          }
        }
        char v29 = 1;
      }
      if (v217.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v217.__r_.__value_.__l.__size_);
      }
      if (v100) {
LABEL_328:
      }
        LODWORD(v100) = 1;
      if (v99) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v99);
      }
      if (!v100) {
        goto LABEL_557;
      }
      uint64_t v108 = *a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "debug");
      LOWORD(v216.__r_.__value_.__l.__data_) = 256;
      v217.__r_.__value_.__s.__data_[0] = 0;
      v217.__r_.__value_.__s.__data_[4] = 0;
      siri::dialogengine::FindVariableBool(v108, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v216, (int *)&v217, (uint64_t)buf);
      int v110 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
      if (buf[0].__r_.__value_.__r.__words[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (v110)
      {
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate debug mode", v109);
        siri::dialogengine::Log::SetLogDebugMessages((siri::dialogengine::Log *)1);
        v230 |= 1u;
      }
      uint64_t v111 = *a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "test");
      LOWORD(v216.__r_.__value_.__l.__data_) = 256;
      v217.__r_.__value_.__s.__data_[0] = 0;
      v217.__r_.__value_.__s.__data_[4] = 0;
      siri::dialogengine::FindVariableBool(v111, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v216, (int *)&v217, (uint64_t)buf);
      int v113 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
      if (buf[0].__r_.__value_.__r.__words[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (v113)
      {
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate test mode", v112);
        v230 |= 2u;
      }
      uint64_t v114 = *a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "resetState");
      LOWORD(v216.__r_.__value_.__l.__data_) = 256;
      v217.__r_.__value_.__s.__data_[0] = 0;
      v217.__r_.__value_.__s.__data_[4] = 0;
      siri::dialogengine::FindVariableBool(v114, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v216, (int *)&v217, (uint64_t)buf);
      int v116 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
      if (buf[0].__r_.__value_.__r.__words[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (v116)
      {
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Reset dialog state", v115);
        siri::dialogengine::DialogStateBase::Get(v117);
      }
      uint64_t v118 = *a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "multiuser");
      LOWORD(v216.__r_.__value_.__l.__data_) = 256;
      v217.__r_.__value_.__s.__data_[0] = 0;
      v217.__r_.__value_.__s.__data_[4] = 0;
      siri::dialogengine::FindVariableBool(v118, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v216, (int *)&v217, (uint64_t)buf);
      int v119 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
      if (buf[0].__r_.__value_.__r.__words[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (v119) {
        char v231 = 1;
      }
      uint64_t v120 = *a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "grounding");
      LOWORD(v216.__r_.__value_.__l.__data_) = 256;
      v217.__r_.__value_.__s.__data_[0] = 0;
      v217.__r_.__value_.__s.__data_[4] = 0;
      siri::dialogengine::FindVariableBool(v120, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v216, (int *)&v217, (uint64_t)buf);
      int v121 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
      if (buf[0].__r_.__value_.__r.__words[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (v121) {
        char v232 = 1;
      }
      uint64_t v122 = *a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "deterministic");
      LOWORD(v216.__r_.__value_.__l.__data_) = 256;
      v217.__r_.__value_.__s.__data_[0] = 0;
      v217.__r_.__value_.__s.__data_[4] = 0;
      siri::dialogengine::FindVariableBool(v122, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v216, (int *)&v217, (uint64_t)buf);
      if (*(unsigned char *)(buf[0].__r_.__value_.__l.__size_ + 66))
      {
        if (buf[0].__r_.__value_.__r.__words[2]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        goto LABEL_372;
      }
      BOOL IsDeterministic = siri::dialogengine::IsDeterministic(v123);
      if (buf[0].__r_.__value_.__r.__words[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (IsDeterministic)
      {
LABEL_372:
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate deterministic mode (and reset dialog state)", v124);
        siri::dialogengine::DialogStateBase::Get(v126);
      }
      uint64_t v127 = *a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "switchFallthrough");
      LOWORD(v216.__r_.__value_.__l.__data_) = 256;
      v217.__r_.__value_.__s.__data_[0] = 0;
      v217.__r_.__value_.__s.__data_[4] = 0;
      siri::dialogengine::FindVariableBool(v127, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v216, (int *)&v217, (uint64_t)buf);
      int v128 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
      if (buf[0].__r_.__value_.__r.__words[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (v128) {
        v230 |= 0x400u;
      }
      uint64_t v129 = *a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "includeKeywords");
      LOWORD(v216.__r_.__value_.__l.__data_) = 256;
      v217.__r_.__value_.__s.__data_[0] = 0;
      v217.__r_.__value_.__s.__data_[4] = 0;
      siri::dialogengine::FindVariableBool(v129, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v216, (int *)&v217, (uint64_t)buf);
      int v130 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
      if (buf[0].__r_.__value_.__r.__words[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (v130) {
        v230 |= 0x800u;
      }
      uint64_t v131 = *a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "validateAttrs");
      LOWORD(v216.__r_.__value_.__l.__data_) = 256;
      v217.__r_.__value_.__s.__data_[0] = 0;
      v217.__r_.__value_.__s.__data_[4] = 0;
      siri::dialogengine::FindVariableBool(v131, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v216, (int *)&v217, (uint64_t)buf);
      if (*(unsigned char *)(buf[0].__r_.__value_.__l.__size_ + 66))
      {
        if (buf[0].__r_.__value_.__r.__words[2]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
      }
      else
      {
        BOOL ShouldValidateAttrs = siri::dialogengine::ShouldValidateAttrs(v132);
        if (buf[0].__r_.__value_.__r.__words[2]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        if (!ShouldValidateAttrs)
        {
LABEL_396:
          uint64_t v135 = *a1;
          std::string::basic_string[abi:ne180100]<0>(__p, "labelMode");
          LOWORD(v216.__r_.__value_.__l.__data_) = 256;
          v217.__r_.__value_.__s.__data_[0] = 0;
          v217.__r_.__value_.__s.__data_[4] = 0;
          siri::dialogengine::FindVariableBool(v135, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v216, (int *)&v217, (uint64_t)buf);
          int v137 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
          if (buf[0].__r_.__value_.__r.__words[2]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
          }
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          if (v137)
          {
            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate label mode", v136);
            v230 |= 0x200u;
          }
          uint64_t v138 = *a1;
          std::string::basic_string[abi:ne180100]<0>(&v217, "useCaseState");
          buf[0].__r_.__value_.__s.__data_[0] = 0;
          buf[1].__r_.__value_.__s.__data_[0] = 0;
          v216.__r_.__value_.__s.__data_[0] = 0;
          v216.__r_.__value_.__s.__data_[4] = 0;
          siri::dialogengine::FindVariableString(v138, (const void **)&v217.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v216, (uint64_t)__p);
          if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf[0].__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v217.__r_.__value_.__l.__data_);
          }
          if (__p[0].__r_.__value_.__s.__data_[0])
          {
            if (!__p[0].__r_.__value_.__s.__data_[1])
            {
              v139 = (siri::dialogengine::Context *)*a5;
              std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
              std::string::basic_string[abi:ne180100]<0>(&v217, "useCaseState is not a string");
              std::string::operator=((std::string *)((char *)v139 + 688), buf);
              siri::dialogengine::Context::SetError((uint64_t)v139, (uint64_t)&v217);
              if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v217.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf[0].__r_.__value_.__l.__data_);
              }
              if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v140 = v10[342];
                if (os_signpost_enabled(v140))
                {
                  LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
                  _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v140, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
                }
              }
              int v141 = 0;
              char v29 = 1;
LABEL_423:
              if (__p[0].__r_.__value_.__r.__words[2]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2]);
              }
              if (!v141) {
                goto LABEL_557;
              }
              uint64_t v142 = *a1;
              std::string::basic_string[abi:ne180100]<0>(&v217, "familyState");
              buf[0].__r_.__value_.__s.__data_[0] = 0;
              buf[1].__r_.__value_.__s.__data_[0] = 0;
              v216.__r_.__value_.__s.__data_[0] = 0;
              v216.__r_.__value_.__s.__data_[4] = 0;
              siri::dialogengine::FindVariableString(v142, (const void **)&v217.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v216, (uint64_t)__p);
              if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf[0].__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v217.__r_.__value_.__l.__data_);
              }
              if (__p[0].__r_.__value_.__s.__data_[0])
              {
                if (!__p[0].__r_.__value_.__s.__data_[1])
                {
                  v143 = (siri::dialogengine::Context *)*a5;
                  std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                  std::string::basic_string[abi:ne180100]<0>(&v217, "familyState is not a string");
                  std::string::operator=((std::string *)((char *)v143 + 688), buf);
                  siri::dialogengine::Context::SetError((uint64_t)v143, (uint64_t)&v217);
                  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v217.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(buf[0].__r_.__value_.__l.__data_);
                  }
                  if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v144 = v10[342];
                    if (os_signpost_enabled(v144))
                    {
                      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
                      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v144, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
                    }
                  }
                  int v145 = 0;
                  char v29 = 1;
LABEL_447:
                  if (__p[0].__r_.__value_.__r.__words[2]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2]);
                  }
                  if (!v145) {
                    goto LABEL_557;
                  }
                  uint64_t v146 = *a1;
                  std::string::basic_string[abi:ne180100]<0>(&v217, "patternId");
                  buf[0].__r_.__value_.__s.__data_[0] = 0;
                  buf[1].__r_.__value_.__s.__data_[0] = 0;
                  v216.__r_.__value_.__s.__data_[0] = 0;
                  v216.__r_.__value_.__s.__data_[4] = 0;
                  siri::dialogengine::FindVariableString(v146, (const void **)&v217.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v216, (uint64_t)__p);
                  if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(buf[0].__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v217.__r_.__value_.__l.__data_);
                  }
                  if (__p[0].__r_.__value_.__s.__data_[0])
                  {
                    if (!__p[0].__r_.__value_.__s.__data_[1])
                    {
                      v147 = (siri::dialogengine::Context *)*a5;
                      std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                      std::string::basic_string[abi:ne180100]<0>(&v217, "patternId is not a string");
                      std::string::operator=((std::string *)((char *)v147 + 688), buf);
                      siri::dialogengine::Context::SetError((uint64_t)v147, (uint64_t)&v217);
                      if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v217.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(buf[0].__r_.__value_.__l.__data_);
                      }
                      if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
                      {
                        v148 = v10[342];
                        if (os_signpost_enabled(v148))
                        {
                          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
                          _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v148, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
                        }
                      }
                      int v149 = 0;
                      char v29 = 1;
LABEL_471:
                      if (__p[0].__r_.__value_.__r.__words[2]) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2]);
                      }
                      if (!v149) {
                        goto LABEL_557;
                      }
                      uint64_t v150 = *a1;
                      std::string::basic_string[abi:ne180100]<0>(&v217, "responseMode");
                      buf[0].__r_.__value_.__s.__data_[0] = 0;
                      buf[1].__r_.__value_.__s.__data_[0] = 0;
                      v216.__r_.__value_.__s.__data_[0] = 0;
                      v216.__r_.__value_.__s.__data_[4] = 0;
                      siri::dialogengine::FindVariableString(v150, (const void **)&v217.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v216, (uint64_t)__p);
                      if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(buf[0].__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v217.__r_.__value_.__l.__data_);
                      }
                      if (__p[0].__r_.__value_.__s.__data_[0])
                      {
                        if (!__p[0].__r_.__value_.__s.__data_[1])
                        {
                          v151 = (siri::dialogengine::Context *)*a5;
                          std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                          std::string::basic_string[abi:ne180100]<0>(&v217, "responseMode is not a string");
                          std::string::operator=((std::string *)((char *)v151 + 688), buf);
                          siri::dialogengine::Context::SetError((uint64_t)v151, (uint64_t)&v217);
                          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v217.__r_.__value_.__l.__data_);
                          }
                          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(buf[0].__r_.__value_.__l.__data_);
                          }
                          if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
                          {
                            v152 = v10[342];
                            if (os_signpost_enabled(v152))
                            {
                              LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
                              _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v152, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
                            }
                          }
                          int v153 = 0;
                          char v29 = 1;
LABEL_495:
                          if (__p[0].__r_.__value_.__r.__words[2]) {
                            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2]);
                          }
                          if (!v153) {
                            goto LABEL_557;
                          }
                          uint64_t v154 = *a1;
                          std::string::basic_string[abi:ne180100]<0>(__p, "randomSeed");
                          v217.__r_.__value_.__s.__data_[0] = 0;
                          v217.__r_.__value_.__s.__data_[8] = 0;
                          v216.__r_.__value_.__s.__data_[0] = 0;
                          v216.__r_.__value_.__s.__data_[4] = 0;
                          siri::dialogengine::FindVariableDouble(v154, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)&v217, (int *)&v216, (uint64_t)buf);
                          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__p[0].__r_.__value_.__l.__data_);
                          }
                          if (buf[0].__r_.__value_.__s.__data_[0])
                          {
                            if (!buf[0].__r_.__value_.__s.__data_[1]
                              || (double v155 = *(double *)(buf[0].__r_.__value_.__l.__size_ + 72), v155 < 0.0)
                              || v155 > 4294967300.0)
                            {
                              v157 = (siri::dialogengine::Context *)*a5;
                              std::string::basic_string[abi:ne180100]<0>(__p, "request-error");
                              std::string::basic_string[abi:ne180100]<0>(&v217, "randomSeed is not a non-negative integer or is out of range");
                              std::string::operator=((std::string *)((char *)v157 + 688), __p);
                              siri::dialogengine::Context::SetError((uint64_t)v157, (uint64_t)&v217);
                              if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v217.__r_.__value_.__l.__data_);
                              }
                              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(__p[0].__r_.__value_.__l.__data_);
                              }
                              if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
                              {
                                v158 = v10[342];
                                if (os_signpost_enabled(v158))
                                {
                                  LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
                                  _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v158, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromVariable", "", (uint8_t *)__p, 2u);
                                }
                              }
                              int v159 = 0;
                              unsigned int v156 = 0;
                              char v29 = 1;
LABEL_515:
                              if (buf[0].__r_.__value_.__r.__words[2]) {
                                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2]);
                              }
                              if (!v159) {
                                goto LABEL_557;
                              }
                              unsigned int v225 = v156;
                              siri::dialogengine::RandomNumberGenerator::RandomNumberGenerator((siri::dialogengine::RandomNumberGenerator *)buf, v156);
                              if ((v230 & 2) != 0)
                              {
                                if (v156) {
                                  v161 = "Initialize random number generator with specified seed: %u";
                                }
                                else {
                                  v161 = "Initialize random number generator with auto-selected seed: %u";
                                }
                                siri::dialogengine::Log::Info((siri::dialogengine::Log *)v161, v160, LODWORD(buf[0].__r_.__value_.__l.__data_));
                              }
                              v162 = (siri::dialogengine::Context *)*a5;
                              memcpy((void *)(*a5 + 936), buf, 0x9D0uLL);
                              uint64_t v163 = *a1;
                              std::string::basic_string[abi:ne180100]<0>(&v217, "currentTime");
                              v216.__r_.__value_.__s.__data_[0] = 0;
                              v216.__r_.__value_.__s.__data_[8] = 0;
                              v210.__r_.__value_.__s.__data_[0] = 0;
                              v210.__r_.__value_.__s.__data_[4] = 0;
                              siri::dialogengine::FindVariableDouble(v163, (const void **)&v217.__r_.__value_.__l.__data_, (uint64_t)&v216, (int *)&v210, (uint64_t)__p);
                              if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v217.__r_.__value_.__l.__data_);
                              }
                              if (__p[0].__r_.__value_.__s.__data_[0])
                              {
                                if (!__p[0].__r_.__value_.__s.__data_[1])
                                {
                                  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"currentTime is not an integer", v165);
                                  std::string::basic_string[abi:ne180100]<0>(&v217, "request-error");
                                  std::string::basic_string[abi:ne180100]<0>(&v216, "currentTime is not an integer");
                                  std::string::operator=((std::string *)((char *)v162 + 688), &v217);
                                  siri::dialogengine::Context::SetError((uint64_t)v162, (uint64_t)&v216);
                                  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(v216.__r_.__value_.__l.__data_);
                                  }
                                  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(v217.__r_.__value_.__l.__data_);
                                  }
                                  if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
                                  {
                                    v171 = v10[342];
                                    if (os_signpost_enabled(v171))
                                    {
                                      LOWORD(v217.__r_.__value_.__l.__data_) = 0;
                                      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v171, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromVariable", "", (uint8_t *)&v217, 2u);
                                    }
                                  }
                                  int v172 = 0;
                                  char v29 = 1;
                                  goto LABEL_547;
                                }
                                double v166 = *(double *)(__p[0].__r_.__value_.__l.__size_ + 72);
                                *(double *)&v209.__r_.__value_.__l.__data_ = v166;
                                std::string::basic_string[abi:ne180100]<0>(&v217, "now");
                                siri::dialogengine::Context::FindVariable(&v210, v162, &v217);
                                v167 = (std::__shared_weak_count *)v210.__r_.__value_.__l.__size_;
                                std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableObject,siri::dialogengine::Variable>(&v216, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
                                if (v167) {
                                  std::__shared_weak_count::__release_shared[abi:ne180100](v167);
                                }
                                if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v217.__r_.__value_.__l.__data_);
                                }
                                uint64_t v169 = v216.__r_.__value_.__r.__words[0];
                                if (v216.__r_.__value_.__r.__words[0])
                                {
                                  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Set the global variable 'now' from the value of 'currentTime': %lld", v168, (uint64_t)v166);
                                  std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableNumber,std::allocator<siri::dialogengine::VariableNumber>,char const(&)[5],double const&,void>(&v217, (double *)&v209);
                                  long long v212 = *(_OWORD *)&v217.__r_.__value_.__l.__data_;
                                  v170 = (std::__shared_weak_count *)v217.__r_.__value_.__l.__size_;
                                  siri::dialogengine::VariableObject::AddProperty(v169, &v212);
                                  if (v170) {
                                    std::__shared_weak_count::__release_shared[abi:ne180100](v170);
                                  }
                                }
                                else
                                {
                                  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not find global variable 'now' in order to apply 'currentTime' override", v168);
                                }
                                if (v216.__r_.__value_.__l.__size_) {
                                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v216.__r_.__value_.__l.__size_);
                                }
                              }
                              int v172 = 1;
LABEL_547:
                              if (__p[0].__r_.__value_.__r.__words[2]) {
                                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2]);
                              }
                              if (!v172) {
                                goto LABEL_557;
                              }
                              v173 = (std::__shared_weak_count *)a1[1];
                              v211[0] = *a1;
                              v211[1] = v173;
                              if (v173) {
                                atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
                              }
                              siri::dialogengine::ExtractUserSettings((siri::dialogengine *)v211, (const char *)1, (uint64_t)__p);
                              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&v226, (long long *)__p[0].__r_.__value_.__l.__data_, (long long *)&__p[0].__r_.__value_.__r.__words[1]);
                              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)__p[0].__r_.__value_.__l.__size_);
                              if (v173) {
                                std::__shared_weak_count::__release_shared[abi:ne180100](v173);
                              }
                              uint64_t v174 = *a1;
                              std::string::basic_string[abi:ne180100]<0>(__p, "customPronunciations");
                              uint64_t v175 = std::__tree<std::string>::find<std::string>(v174 + 72, (const void **)&__p[0].__r_.__value_.__l.__data_);
                              if (v174 + 80 == v175)
                              {
                                v177 = 0;
                                v178 = 0;
                              }
                              else
                              {
                                v177 = *(const void **)(v175 + 56);
                                v178 = *(std::__shared_weak_count **)(v175 + 64);
                                if (v178) {
                                  atomic_fetch_add_explicit(&v178->__shared_owners_, 1uLL, memory_order_relaxed);
                                }
                              }
                              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(__p[0].__r_.__value_.__l.__data_);
                              }
                              if (v177)
                              {
                                if (v180)
                                {
                                  os_signpost_id_t spidc = v13;
                                  memset(&v217, 0, sizeof(v217));
                                  siri::dialogengine::VariableObject::GetValues(v180, &v216);
                                  std::string::size_type v182 = v216.__r_.__value_.__l.__size_;
                                  for (i = (const void **)v216.__r_.__value_.__r.__words[0];
                                        i != (const void **)v182;
                                        i += 2)
                                  {
                                    if (*i)
                                    {
                                      if (v183)
                                      {
                                        v184 = v183;
                                        if (v183[31] < 0)
                                        {
                                          std::string::__init_copy_ctor_external(&v210, *((const std::string::value_type **)v183 + 1), *((void *)v183 + 2));
                                        }
                                        else
                                        {
                                          long long v185 = *(_OWORD *)(v183 + 8);
                                          v210.__r_.__value_.__r.__words[2] = *((void *)v183 + 3);
                                          *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v185;
                                        }
                                        if (v184[95] < 0) {
                                          std::string::__init_copy_ctor_external(&v209, *((const std::string::value_type **)v184 + 9), *((void *)v184 + 10));
                                        }
                                        else {
                                          std::string v209 = *(std::string *)(v184 + 3);
                                        }
                                        if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
                                          std::string::__init_copy_ctor_external(__p, v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
                                        }
                                        else {
                                          __p[0] = v210;
                                        }
                                        __p[1] = v209;
                                        memset(&v209, 0, sizeof(v209));
                                        std::vector<siri::dialogengine::DatabaseField>::push_back[abi:ne180100]((void **)&v217.__r_.__value_.__l.__data_, (long long *)__p);
                                        std::pair<std::string const,std::string>::~pair((uint64_t)__p);
                                        if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
                                          operator delete(v209.__r_.__value_.__l.__data_);
                                        }
                                        if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
                                          operator delete(v210.__r_.__value_.__l.__data_);
                                        }
                                      }
                                    }
                                  }
                                  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v216;
                                  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                                  if (v217.__r_.__value_.__r.__words[0] != v217.__r_.__value_.__l.__size_) {
                                    std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(&v237, (std::string *)v217.__r_.__value_.__l.__data_, (std::string *)v217.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v217.__r_.__value_.__l.__size_ - v217.__r_.__value_.__r.__words[0]) >> 4));
                                  }
                                  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v217;
                                  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                                  uint64_t v10 = (NSObject **)&unk_1EA3D7000;
                                  unint64_t v13 = spidc;
                                }
                              }
                              if (v178) {
                                std::__shared_weak_count::__release_shared[abi:ne180100](v178);
                              }
                              siri::dialogengine::SetResponseModeToVoiceOnlyIfDeviceIsHomePod(v162, (siri::dialogengine::Context *)&v219, v176);
                              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CAT Request (Dialog Engine 3402.35.1)", v186);
                              has_internal_diagnostics = (siri::dialogengine *)os_variant_has_internal_diagnostics();
                              if (has_internal_diagnostics
                                && siri::dialogengine::ShouldLogCATParameters(has_internal_diagnostics, v188))
                              {
                                os_signpost_id_t v189 = os_signpost_id_generate(v10[342]);
                                if (v189 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
                                {
                                  v190 = v10[342];
                                  if (os_signpost_enabled(v190))
                                  {
                                    LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
                                    _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v190, OS_SIGNPOST_INTERVAL_BEGIN, v189, "Log request data (Variable)", "", (uint8_t *)__p, 2u);
                                  }
                                }
                                __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2124DD0;
                                LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 0;
                                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__r.__words[2]);
                                char v208 = 0;
                                (*(void (**)(uint64_t, std::string *))(*(void *)*a1 + 16))(*a1, __p);
                                std::stringbuf::str();
                                v191 = std::string::insert(&v216, 0, "CAT Request Data (from Variable) = ");
                                long long v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
                                v217.__r_.__value_.__r.__words[2] = v191->__r_.__value_.__r.__words[2];
                                *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v192;
                                v191->__r_.__value_.__l.__size_ = 0;
                                v191->__r_.__value_.__r.__words[2] = 0;
                                v191->__r_.__value_.__r.__words[0] = 0;
                                siri::dialogengine::Log::LogWithLevel((uint64_t)&v217, 0);
                                if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v217.__r_.__value_.__l.__data_);
                                }
                                if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v216.__r_.__value_.__l.__data_);
                                }
                                if (v189 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
                                {
                                  v193 = v10[342];
                                  if (os_signpost_enabled(v193))
                                  {
                                    LOWORD(v217.__r_.__value_.__l.__data_) = 0;
                                    _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v193, OS_SIGNPOST_INTERVAL_END, v189, "Log request data (Variable)", "", (uint8_t *)&v217, 2u);
                                  }
                                }
                                siri::dialogengine::VariableJSONPrinter::~VariableJSONPrinter((siri::dialogengine::VariableJSONPrinter *)__p);
                              }
                              siri::dialogengine::Context::SetRequestInfo((uint64_t)v162, (uint64_t)&v219);
                              v194 = (siri::dialogengine::TraceWriter *)*((void *)v162 + 431);
                              v195 = (std::__shared_weak_count *)*((void *)v162 + 432);
                              if (v195) {
                                atomic_fetch_add_explicit(&v195->__shared_owners_, 1uLL, memory_order_relaxed);
                              }
                              siri::dialogengine::TraceWriter::Initialize(v194, v162);
                              if (v195) {
                                std::__shared_weak_count::__release_shared[abi:ne180100](v195);
                              }
                              siri::dialogengine::ValidateRequestData(v162, v196);
                              if (v13 > 0xFFFFFFFFFFFFFFFDLL) {
                                goto LABEL_248;
                              }
                              v77 = v10[342];
                              if (!os_signpost_enabled(v77)) {
                                goto LABEL_248;
                              }
                              LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
                              v78 = __p;
                              goto LABEL_247;
                            }
                            unsigned int v156 = v155;
                          }
                          else
                          {
                            unsigned int v156 = 0;
                          }
                          int v159 = 1;
                          goto LABEL_515;
                        }
                        if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0) {
                          std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(void *)(__p[0].__r_.__value_.__l.__size_ + 80));
                        }
                        else {
                          buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
                        }
                        siri::dialogengine::RequestInfo::SetResponseMode((uint64_t)&v219, (unint64_t)buf);
                        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(buf[0].__r_.__value_.__l.__data_);
                        }
                      }
                      int v153 = 1;
                      goto LABEL_495;
                    }
                    if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0) {
                      std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(void *)(__p[0].__r_.__value_.__l.__size_ + 80));
                    }
                    else {
                      buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
                    }
                    std::string::operator=(&v224, buf);
                    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(buf[0].__r_.__value_.__l.__data_);
                    }
                  }
                  int v149 = 1;
                  goto LABEL_471;
                }
                if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0) {
                  std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(void *)(__p[0].__r_.__value_.__l.__size_ + 80));
                }
                else {
                  buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
                }
                std::string::operator=(&v239, buf);
                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                }
              }
              int v145 = 1;
              goto LABEL_447;
            }
            if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0) {
              std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(void *)(__p[0].__r_.__value_.__l.__size_ + 80));
            }
            else {
              buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
            }
            std::string::operator=(&v238, buf);
            if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
          }
          int v141 = 1;
          goto LABEL_423;
        }
      }
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate attribute validation", v133);
      v230 |= 0x80u;
      goto LABEL_396;
    }
    v94 = (siri::dialogengine::Context *)*a5;
    std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
    std::string::basic_string[abi:ne180100]<0>(__p, "JSON property globalParameters is not an object type");
    std::string::operator=((std::string *)((char *)v94 + 688), buf);
    siri::dialogengine::Context::SetError((uint64_t)v94, (uint64_t)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v95 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
      if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v95, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
      }
    }
    int v93 = 0;
    char v29 = 1;
  }
  else
  {
    int v93 = 1;
  }
  if (v82)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v82);
    if (v93) {
      goto LABEL_299;
    }
  }
  else if (v93)
  {
    goto LABEL_299;
  }
LABEL_557:
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v218.__r_.__value_.__l.__data_);
  }
LABEL_559:
  siri::dialogengine::RequestInfo::~RequestInfo(&v219);
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v240;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v241.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v243.__r_.__value_.__l.__data_);
    if (v29) {
      return;
    }
  }
  else if (v29)
  {
    return;
  }
  v179 = (std::__shared_weak_count *)a5[1];
  if (v179) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v179);
  }
}

void sub_1C5E25334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  a15 = &STACK[0xBD0];
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (SLOBYTE(STACK[0xC07]) < 0) {
    operator delete((void *)STACK[0xBF0]);
  }
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&STACK[0xC10]);
  STACK[0xC10] = v16 - 224;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xC10]);
  if (*(char *)(v16 - 169) < 0) {
    operator delete(*(void **)(v16 - 192));
  }
  if (*(char *)(v16 - 137) < 0) {
    operator delete(*(void **)(v16 - 160));
  }
  if (*(char *)(v16 - 105) < 0) {
    operator delete(*(void **)(v16 - 128));
  }
  unint64_t v18 = *(std::__shared_weak_count **)(a12 + 8);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableNumber,std::allocator<siri::dialogengine::VariableNumber>,char const(&)[5],double const&,void>(void *a1, double *a2)
{
  uint64_t v4 = operator new(0x68uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1F2126A88;
  std::string::basic_string[abi:ne180100]<0>(&__p, "secs");
  siri::dialogengine::VariableNumber::VariableNumber((uint64_t)(v4 + 3), &__p, *a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1C5E25BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableJSONPrinter::~VariableJSONPrinter(siri::dialogengine::VariableJSONPrinter *this)
{
  *(void *)this = &unk_1F2124DD0;
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *((void *)this + 2) = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)((char *)this + *(void *)(v3 - 24) + 16) = *(void *)(v2 + 64);
  *((void *)this + 4) = v4;
  *((void *)this + 5) = MEMORY[0x1E4FBA470] + 16;
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0]((char *)this + 144);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F2124DD0;
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *((void *)this + 2) = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)((char *)this + *(void *)(v3 - 24) + 16) = *(void *)(v2 + 64);
  *((void *)this + 4) = v4;
  *((void *)this + 5) = MEMORY[0x1E4FBA470] + 16;
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0]((char *)this + 144);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::PrepareRequestFromJson(siri::dialogengine::Context **a1@<X8>)
{
  {
    siri::dialogengine::PrepareRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "Request");
  }
  os_signpost_id_t v2 = os_signpost_id_generate((os_log_t)siri::dialogengine::PrepareRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v3 = siri::dialogengine::PrepareRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::PrepareRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "PrepareRequestFromJson", "", buf, 2u);
    }
  }
  siri::dialogengine::ParseRequestFromJson(a1);
}

void sub_1C5E26210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32)
{
  a9 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a16 = &a22;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  siri::dialogengine::RequestInfo::~RequestInfo(&a32);
  uint64_t v34 = *(std::__shared_weak_count **)(v32 + 8);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::ValidateParamAndVariableTypes(siri::dialogengine *this, siri::dialogengine::Context *a2)
{
  if (this)
  {
    uint64_t v4 = *((void *)this + 63);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 64);
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    if (v4)
    {
      std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100]((uint64_t)&v81, (const void ***)this + 65);
      uint64_t v5 = v81;
      if (v81 != (long long *)v82)
      {
        while (1)
        {
          std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100](&v78, v5 + 2);
          uint64_t v6 = *((void *)this + 63);
          uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 64);
          if (v7) {
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (*(char *)(v79 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)(v79 + 8), *(void *)(v79 + 16));
          }
          else
          {
            long long v8 = *(_OWORD *)(v79 + 8);
            v77.__r_.__value_.__r.__words[2] = *(void *)(v79 + 24);
            *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v8;
          }
          uint64_t Parameter = siri::dialogengine::File::GetParameter(v6, (unsigned __int8 **)&v77);
          if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            break;
          }
          operator delete(v77.__r_.__value_.__l.__data_);
          if (v7) {
            goto LABEL_13;
          }
LABEL_14:
          if (Parameter)
          {
            if (*(char *)(Parameter + 55) < 0) {
              std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)(Parameter + 32), *(void *)(Parameter + 40));
            }
            else {
              std::string v77 = *(std::string *)(Parameter + 32);
            }
            if (*(char *)(v79 + 55) < 0) {
              std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)(v79 + 32), *(void *)(v79 + 40));
            }
            else {
              std::string v76 = *(std::string *)(v79 + 32);
            }
            if (siri::dialogengine::IsArrayType(&v77))
            {
              size_t v10 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
              size_t v11 = v10;
              if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (v10 == HIBYTE(v76.__r_.__value_.__r.__words[2]))
                {
                  os_signpost_id_t v12 = &v76;
                  goto LABEL_30;
                }
                goto LABEL_31;
              }
              if (v10 != v76.__r_.__value_.__l.__size_) {
                goto LABEL_31;
              }
              if (v10 == -1) {
                std::string::__throw_out_of_range[abi:ne180100]();
              }
              os_signpost_id_t v12 = (std::string *)v76.__r_.__value_.__r.__words[0];
LABEL_30:
              if (memcmp(v12, (const void *)siri::dialogengine::TYPE_ARRAY, v11))
              {
LABEL_31:
                std::string::basic_string[abi:ne180100]<0>(&__str, "request-error");
                if (*(char *)(Parameter + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)(Parameter + 8), *(void *)(Parameter + 16));
                }
                else
                {
                  long long v13 = *(_OWORD *)(Parameter + 8);
                  v69.__r_.__value_.__r.__words[2] = *(void *)(Parameter + 24);
                  *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v13;
                }
                BOOL v22 = std::string::insert(&v69, 0, "Type mismatch for CAT parameter '");
                long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
                v70.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v23;
                v22->__r_.__value_.__l.__size_ = 0;
                v22->__r_.__value_.__r.__words[2] = 0;
                v22->__r_.__value_.__r.__words[0] = 0;
                BOOL v24 = std::string::append(&v70, "': expected array type but received '");
                long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
                v71.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v25;
                v24->__r_.__value_.__l.__size_ = 0;
                v24->__r_.__value_.__r.__words[2] = 0;
                v24->__r_.__value_.__r.__words[0] = 0;
                if (*(char *)(v79 + 55) < 0) {
                  std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)(v79 + 32), *(void *)(v79 + 40));
                }
                else {
                  std::string v68 = *(std::string *)(v79 + 32);
                }
                if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unint64_t v26 = &v68;
                }
                else {
                  unint64_t v26 = (std::string *)v68.__r_.__value_.__r.__words[0];
                }
                if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v68.__r_.__value_.__l.__size_;
                }
                goto LABEL_132;
              }
            }
            if (siri::dialogengine::IsPrimitiveType((const void **)&v77.__r_.__value_.__l.__data_))
            {
              size_t v14 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
              goto LABEL_36;
            }
            BOOL IsArrayType = siri::dialogengine::IsArrayType(&v77);
            size_t v14 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
            if (IsArrayType)
            {
LABEL_36:
              size_t v16 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
              size_t v17 = v16;
              if ((v14 & 0x80) == 0)
              {
                if (v16 == v14)
                {
                  unint64_t v18 = &v76;
                  goto LABEL_42;
                }
                uint64_t v20 = (const void *)siri::dialogengine::TYPE_OBJECT;
                size_t v21 = strlen((const char *)siri::dialogengine::TYPE_OBJECT);
LABEL_59:
                if (v21 == v14)
                {
                  unsigned int v31 = &v76;
                  size_t v19 = v14;
                  goto LABEL_65;
                }
                goto LABEL_66;
              }
              size_t v19 = v76.__r_.__value_.__l.__size_;
              if (v16 == v76.__r_.__value_.__l.__size_)
              {
                if (v16 == -1) {
                  std::string::__throw_out_of_range[abi:ne180100]();
                }
                unint64_t v18 = (std::string *)v76.__r_.__value_.__r.__words[0];
LABEL_42:
                if (memcmp(v18, (const void *)siri::dialogengine::TYPE_ARRAY, v17))
                {
                  uint64_t v20 = (const void *)siri::dialogengine::TYPE_OBJECT;
                  size_t v21 = strlen((const char *)siri::dialogengine::TYPE_OBJECT);
                  if (((char)v14 & 0x80000000) == 0) {
                    goto LABEL_59;
                  }
                  size_t v19 = v76.__r_.__value_.__l.__size_;
                  goto LABEL_62;
                }
                goto LABEL_147;
              }
              uint64_t v20 = (const void *)siri::dialogengine::TYPE_OBJECT;
              size_t v21 = strlen((const char *)siri::dialogengine::TYPE_OBJECT);
LABEL_62:
              if (v21 == v19)
              {
                if (v19 == -1) {
                  std::string::__throw_out_of_range[abi:ne180100]();
                }
                unsigned int v31 = (std::string *)v76.__r_.__value_.__r.__words[0];
LABEL_65:
                if (!memcmp(v31, v20, v19))
                {
LABEL_147:
                  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v76.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v77.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_151;
                }
              }
LABEL_66:
              if ((v14 & 0x80u) == 0) {
                std::string::size_type v32 = v14;
              }
              else {
                std::string::size_type v32 = v76.__r_.__value_.__l.__size_;
              }
              std::string::size_type v33 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
              if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v33 = v77.__r_.__value_.__l.__size_;
              }
              if (v32 == v33)
              {
                if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v34 = &v77;
                }
                else {
                  uint64_t v34 = (std::string *)v77.__r_.__value_.__r.__words[0];
                }
                if ((char)v14 < 0)
                {
                  if (!memcmp(v76.__r_.__value_.__l.__data_, v34, v76.__r_.__value_.__l.__size_)) {
                    goto LABEL_147;
                  }
                }
                else
                {
                  if (!v14) {
                    goto LABEL_147;
                  }
                  int v35 = &v76;
                  while (v35->__r_.__value_.__s.__data_[0] == v34->__r_.__value_.__s.__data_[0])
                  {
                    int v35 = (std::string *)((char *)v35 + 1);
                    uint64_t v34 = (std::string *)((char *)v34 + 1);
                    if (!--v14) {
                      goto LABEL_147;
                    }
                  }
                }
              }
              std::string::basic_string[abi:ne180100]<0>(&__str, "request-error");
              if (*(char *)(Parameter + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(Parameter + 8), *(void *)(Parameter + 16));
              }
              else
              {
                long long v36 = *(_OWORD *)(Parameter + 8);
                v67.__r_.__value_.__r.__words[2] = *(void *)(Parameter + 24);
                *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v36;
              }
              BOOL v37 = std::string::insert(&v67, 0, "Type mismatch for CAT parameter '");
              long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
              v68.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v38;
              v37->__r_.__value_.__l.__size_ = 0;
              v37->__r_.__value_.__r.__words[2] = 0;
              v37->__r_.__value_.__r.__words[0] = 0;
              uint64_t v39 = std::string::append(&v68, "': expected '");
              long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
              v69.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v40;
              v39->__r_.__value_.__l.__size_ = 0;
              v39->__r_.__value_.__r.__words[2] = 0;
              v39->__r_.__value_.__r.__words[0] = 0;
              if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v41 = &v77;
              }
              else {
                int v41 = (std::string *)v77.__r_.__value_.__r.__words[0];
              }
              if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v42 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v42 = v77.__r_.__value_.__l.__size_;
              }
              uint64_t v43 = std::string::append(&v69, (const std::string::value_type *)v41, v42);
              long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
              v70.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v44;
              v43->__r_.__value_.__l.__size_ = 0;
              v43->__r_.__value_.__r.__words[2] = 0;
              v43->__r_.__value_.__r.__words[0] = 0;
              v45 = std::string::append(&v70, "' but received '");
              long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
              v71.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v46;
              v45->__r_.__value_.__l.__size_ = 0;
              v45->__r_.__value_.__r.__words[2] = 0;
              v45->__r_.__value_.__r.__words[0] = 0;
              if (*(char *)(v79 + 55) < 0) {
                std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(v79 + 32), *(void *)(v79 + 40));
              }
              else {
                std::string v66 = *(std::string *)(v79 + 32);
              }
              if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v47 = &v66;
              }
              else {
                uint64_t v47 = (std::string *)v66.__r_.__value_.__r.__words[0];
              }
              if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v48 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v48 = v66.__r_.__value_.__l.__size_;
              }
              unsigned int v49 = std::string::append(&v71, (const std::string::value_type *)v47, v48);
              long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
              v72.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v50;
              v49->__r_.__value_.__l.__size_ = 0;
              v49->__r_.__value_.__r.__words[2] = 0;
              v49->__r_.__value_.__r.__words[0] = 0;
              v51 = std::string::append(&v72, "'");
              long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
              std::string::size_type v74 = v51->__r_.__value_.__r.__words[2];
              *(_OWORD *)std::string __p = v52;
              v51->__r_.__value_.__l.__size_ = 0;
              v51->__r_.__value_.__r.__words[2] = 0;
              v51->__r_.__value_.__r.__words[0] = 0;
              std::string::operator=((std::string *)((char *)this + 688), &__str);
              siri::dialogengine::Context::SetError((uint64_t)this, (uint64_t)__p);
              if (SHIBYTE(v74) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v72.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v66.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v71.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v70.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v69.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v68.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
              {
                unint64_t v53 = (void *)v67.__r_.__value_.__r.__words[0];
                goto LABEL_144;
              }
              goto LABEL_145;
            }
            size_t v28 = strlen((const char *)siri::dialogengine::TYPE_OBJECT);
            size_t v29 = v28;
            if ((*((unsigned char *)&v76.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (v28 == v76.__r_.__value_.__l.__size_)
              {
                if (v28 == -1) {
                  std::string::__throw_out_of_range[abi:ne180100]();
                }
                v30 = (std::string *)v76.__r_.__value_.__r.__words[0];
                goto LABEL_119;
              }
            }
            else if (v28 == HIBYTE(v76.__r_.__value_.__r.__words[2]))
            {
              v30 = &v76;
LABEL_119:
              if (!memcmp(v30, (const void *)siri::dialogengine::TYPE_OBJECT, v29)) {
                goto LABEL_36;
              }
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, "request-error");
            if (*(char *)(Parameter + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)(Parameter + 8), *(void *)(Parameter + 16));
            }
            else
            {
              long long v54 = *(_OWORD *)(Parameter + 8);
              v69.__r_.__value_.__r.__words[2] = *(void *)(Parameter + 24);
              *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v54;
            }
            uint64_t v55 = std::string::insert(&v69, 0, "Type mismatch for CAT parameter '");
            long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
            v70.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v56;
            v55->__r_.__value_.__l.__size_ = 0;
            v55->__r_.__value_.__r.__words[2] = 0;
            v55->__r_.__value_.__r.__words[0] = 0;
            v57 = std::string::append(&v70, "': expected object type but received '");
            long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
            v71.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v58;
            v57->__r_.__value_.__l.__size_ = 0;
            v57->__r_.__value_.__r.__words[2] = 0;
            v57->__r_.__value_.__r.__words[0] = 0;
            if (*(char *)(v79 + 55) < 0) {
              std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)(v79 + 32), *(void *)(v79 + 40));
            }
            else {
              std::string v68 = *(std::string *)(v79 + 32);
            }
            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v26 = &v68;
            }
            else {
              unint64_t v26 = (std::string *)v68.__r_.__value_.__r.__words[0];
            }
            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v68.__r_.__value_.__l.__size_;
            }
LABEL_132:
            v59 = std::string::append(&v71, (const std::string::value_type *)v26, size);
            long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            v72.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            v61 = std::string::append(&v72, "'");
            long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
            std::string::size_type v74 = v61->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v62;
            v61->__r_.__value_.__l.__size_ = 0;
            v61->__r_.__value_.__r.__words[2] = 0;
            v61->__r_.__value_.__r.__words[0] = 0;
            std::string::operator=((std::string *)((char *)this + 688), &__str);
            siri::dialogengine::Context::SetError((uint64_t)this, (uint64_t)__p);
            if (SHIBYTE(v74) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v72.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v68.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v71.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v70.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
            {
              unint64_t v53 = (void *)v69.__r_.__value_.__r.__words[0];
LABEL_144:
              operator delete(v53);
            }
LABEL_145:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            goto LABEL_147;
          }
LABEL_151:
          if (v80) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v80);
          }
          if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v78.__r_.__value_.__l.__data_);
          }
          v63 = (long long *)*((void *)v5 + 1);
          if (v63)
          {
            do
            {
              v64 = v63;
              v63 = *(long long **)v63;
            }
            while (v63);
          }
          else
          {
            do
            {
              v64 = (long long *)*((void *)v5 + 2);
              BOOL v65 = *(void *)v64 == (void)v5;
              uint64_t v5 = v64;
            }
            while (!v65);
          }
          uint64_t v5 = v64;
          if (v64 == (long long *)v82) {
            goto LABEL_161;
          }
        }
        if (!v7) {
          goto LABEL_14;
        }
LABEL_13:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        goto LABEL_14;
      }
LABEL_161:
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v82[0]);
    }
  }
}

void sub_1C5E26C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v63 - 209) < 0) {
    operator delete(*(void **)(v63 - 232));
  }
  if (*(char *)(v63 - 185) < 0) {
    operator delete(*(void **)(v63 - 208));
  }
  if (*(char *)(v63 - 153) < 0) {
    operator delete(*(void **)(v63 - 176));
  }
  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(v63 - 152);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(void **)(v63 - 104));
  _Unwind_Resume(a1);
}

void siri::dialogengine::PrepareRequestFromVariable(uint64_t *a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, const std::string *a4@<X3>, uint64_t *a5@<X8>)
{
  {
    siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "Request");
  }
  os_signpost_id_t v10 = os_signpost_id_generate((os_log_t)siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog);
  unint64_t v11 = v10 - 1;
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v12 = siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v10, "PrepareRequestFromVariable", "", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v13 = *a1;
  size_t v14 = (std::__shared_weak_count *)a1[1];
  v35[0] = v13;
  v35[1] = (uint64_t)v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::ParseRequestFromVariable(v35, a2, a3, a4, a5);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v15 = *a5;
  if (*a5)
  {
    if (*(char *)(v15 + 711) < 0) {
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v15 + 688), *(void *)(v15 + 696));
    }
    else {
      std::string buf = *(std::string *)(v15 + 688);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      if (buf.__r_.__value_.__l.__size_ != 13)
      {
        operator delete(buf.__r_.__value_.__l.__data_);
LABEL_33:
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&buf, (const siri::dialogengine::RequestInfo *)(v15 + 8));
        if (LODWORD(buf.__r_.__value_.__l.__data_) == 1)
        {
          BOOL v24 = 0;
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v24, buf.__r_.__value_.__l.__size_, buf.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_) >> 5));
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v23, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
          }
          else {
            std::string v23 = v29;
          }
          siri::dialogengine::FindVisualFile(&v24, (uint64_t)&v23, (uint64_t)&__str);
          std::string::operator=(v34, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v23.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          BOOL v24 = 0;
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v24, buf.__r_.__value_.__l.__size_, buf.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_) >> 5));
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v23, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
          }
          else {
            std::string v23 = v29;
          }
          siri::dialogengine::FindParamsFile(&v24, (uint64_t)&v23, (uint64_t)&__str);
          std::string::operator=(v30, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v23.__r_.__value_.__l.__data_);
          }
          v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
          std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
          BOOL v24 = 0;
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v24, buf.__r_.__value_.__l.__size_, buf.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_) >> 5));
          memset(&v23, 0, sizeof(v23));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, v31, v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3));
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__p, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
          }
          else {
            std::string __p = v29;
          }
          siri::dialogengine::FindLocaleFile(&v24, (long long **)&v23, (uint64_t)&__p, (uint64_t)&__str);
          std::string::operator=(v33, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        }
        v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
        std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
        siri::dialogengine::Context::SetRequestInfo(v15, (uint64_t)&buf);
        siri::dialogengine::Context::Load((siri::dialogengine::Context *)v15);
        siri::dialogengine::ValidateParamAndVariableTypes((siri::dialogengine *)v15, v20);
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          size_t v21 = siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
          if (os_signpost_enabled((os_log_t)siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
          {
            LOWORD(__str.__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v21, OS_SIGNPOST_INTERVAL_END, v10, "PrepareRequestFromVariable", "", (uint8_t *)&__str, 2u);
          }
        }
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&buf.__r_.__value_.__l.__data_);
        return;
      }
      BOOL v18 = *(void *)buf.__r_.__value_.__l.__data_ != 0x2D74736575716572
         || *(void *)(buf.__r_.__value_.__r.__words[0] + 5) != 0x726F7272652D7473;
      operator delete(buf.__r_.__value_.__l.__data_);
      if (v18) {
        goto LABEL_33;
      }
    }
    else
    {
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) != 13) {
        goto LABEL_33;
      }
      if (buf.__r_.__value_.__r.__words[0] != 0x2D74736575716572
        || *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 5) != 0x726F7272652D7473)
      {
        goto LABEL_33;
      }
    }
  }
  if (v11 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    size_t v19 = siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C5C1E000, v19, OS_SIGNPOST_INTERVAL_END, v10, "PrepareRequestFromVariable", "", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_1C5E27318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32)
{
  a9 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a16 = &a22;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  siri::dialogengine::RequestInfo::~RequestInfo(&a32);
  if (*(void *)(v32 + 8)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v32 + 8));
  }
  _Unwind_Resume(a1);
}

unsigned char *siri::dialogengine::AddValidationEntriesToJsonDoc(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v5 = (const char *)a1;
  }
  else {
    uint64_t v5 = *(const char **)a1;
  }
  unsigned int v6 = strlen(v5);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a3, (uint64_t)v5, v6);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((void **)a3);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((void **)a3);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)a3, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(a3, (uint64_t)"text", 4u);
      if (*(char *)(v7 + 87) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 64), *(void *)(v7 + 72));
      }
      else
      {
        long long v9 = *(_OWORD *)(v7 + 64);
        __p.__r_.__value_.__r.__words[2] = *(void *)(v7 + 80);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      unsigned int v11 = strlen((const char *)p_p);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a3, (uint64_t)p_p, v11);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)a3, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(a3, (uint64_t)"textWithLineNumber", 0x12u);
      siri::dialogengine::ValidationEntry::GetFormattedText((siri::dialogengine::ValidationEntry *)v7, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        os_signpost_id_t v12 = &__p;
      }
      else {
        os_signpost_id_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      unsigned int v13 = strlen((const char *)v12);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a3, (uint64_t)v12, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)a3, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(a3, (uint64_t)"lineNumber", 0xAu);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64((void **)a3, *(void *)(v7 + 8));
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)a3, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(a3, (uint64_t)"filename", 8u);
      if (*(char *)(v7 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 40), *(void *)(v7 + 48));
      }
      else
      {
        long long v14 = *(_OWORD *)(v7 + 40);
        __p.__r_.__value_.__r.__words[2] = *(void *)(v7 + 56);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v15 = &__p;
      }
      else {
        uint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      unsigned int v16 = strlen((const char *)v15);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a3, (uint64_t)v15, v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((void **)a3);
      v7 += 88;
    }
    while (v7 != v8);
  }
  return rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((void **)a3);
}

void sub_1C5E27658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GenerateValidationResponse(siri::dialogengine *this@<X0>, void *a2@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v40 = 0uLL;
  uint64_t v41 = 0;
  long long v38 = 0uLL;
  uint64_t v39 = 0;
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  if (!this)
  {
    uint64_t v5 = 0;
    goto LABEL_46;
  }
  uint64_t v6 = *((void *)this + 63);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    (*(void (**)(uint64_t, siri::dialogengine *))(*(void *)v6 + 16))(v6, this);
    std::vector<siri::dialogengine::ValidationEntry>::vector<std::__tree_const_iterator<siri::dialogengine::ValidationEntry,std::__tree_node<siri::dialogengine::ValidationEntry,void *> *,long>,0>(v42, *(void **)(v6 + 568), (void *)(v6 + 576));
    std::vector<siri::dialogengine::ValidationEntry>::__vdeallocate((void **)&v40);
    long long v40 = *(_OWORD *)v42;
    uint64_t v41 = *(void *)&v42[16];
    memset(v42, 0, 24);
    __p[0] = v42;
    std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::vector<siri::dialogengine::ValidationEntry>::vector<std::__tree_const_iterator<siri::dialogengine::ValidationEntry,std::__tree_node<siri::dialogengine::ValidationEntry,void *> *,long>,0>(v42, *(void **)(v6 + 592), (void *)(v6 + 600));
    std::vector<siri::dialogengine::ValidationEntry>::__vdeallocate((void **)&v38);
    long long v38 = *(_OWORD *)v42;
    uint64_t v39 = *(void *)&v42[16];
    memset(v42, 0, 24);
    __p[0] = v42;
    std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::vector<siri::dialogengine::ValidationEntry>::vector<std::__tree_const_iterator<siri::dialogengine::ValidationEntry,std::__tree_node<siri::dialogengine::ValidationEntry,void *> *,long>,0>(v42, *(void **)(v6 + 616), (void *)(v6 + 624));
    std::vector<siri::dialogengine::ValidationEntry>::__vdeallocate((void **)&v36);
    long long v36 = *(_OWORD *)v42;
    uint64_t v37 = *(void *)&v42[16];
    memset(v42, 0, 24);
    __p[0] = v42;
    std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    goto LABEL_46;
  }
  if (*((char *)this + 711) < 0) {
    std::string::__init_copy_ctor_external(&v33, *((const std::string::value_type **)this + 86), *((void *)this + 87));
  }
  else {
    std::string v33 = *(std::string *)((char *)this + 688);
  }
  uint64_t v7 = std::string::insert(&v33, 0, "Could not load CAT file (");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  long long v9 = std::string::append(&v34, "): ");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)this + 735) < 0) {
    std::string::__init_copy_ctor_external(&v32, *((const std::string::value_type **)this + 89), *((void *)this + 90));
  }
  else {
    std::string v32 = *(std::string *)((char *)this + 712);
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v11 = &v32;
  }
  else {
    unsigned int v11 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  unsigned int v13 = std::string::append(&v35, (const std::string::value_type *)v11, size);
  *(_OWORD *)std::string __p = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  *(void *)&long long v29 = *((void *)&v13->__r_.__value_.__l + 2);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = siri::dialogengine::ValidationEntry::ValidationEntry((uint64_t)v42, (long long *)__p, 0);
  uint64_t v15 = v40;
  if (v41 == (void)v40)
  {
    std::vector<siri::dialogengine::ValidationEntry>::__vdeallocate((void **)&v40);
    unint64_t v22 = 0x5D1745D1745D1746 * ((v41 - (uint64_t)v40) >> 3);
    if (v22 <= 1) {
      unint64_t v22 = 1;
    }
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v41 - (uint64_t)v40) >> 3)) >= 0x1745D1745D1745DLL) {
      unint64_t v23 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v23 = v22;
    }
    std::vector<siri::dialogengine::ValidationEntry>::__vallocate[abi:ne180100](&v40, v23);
    uint64_t v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::ValidationEntry>,siri::dialogengine::ValidationEntry const*,siri::dialogengine::ValidationEntry const*,siri::dialogengine::ValidationEntry*>((uint64_t)v42, (uint64_t)&v45, *((uint64_t *)&v40 + 1));
  }
  else
  {
    if (*((void *)&v40 + 1) != (void)v40)
    {
      *(void *)(v40 + 8) = *(void *)&v42[8];
      std::string::operator=((std::string *)(v15 + 16), (const std::string *)&v42[16]);
      std::string::operator=((std::string *)(v15 + 40), &v43);
      std::string::operator=((std::string *)(v15 + 64), &v44);
      uint64_t v16 = v15 + 88;
      if (*((void *)&v40 + 1) != v15 + 88)
      {
        uint64_t v17 = *((void *)&v40 + 1) - 88;
        uint64_t v18 = *((void *)&v40 + 1) - 88;
        size_t v19 = (void (***)(uint64_t))(*((void *)&v40 + 1) - 88);
        do
        {
          uint64_t v20 = *v19;
          v19 -= 11;
          (*v20)(v18);
          v17 -= 88;
          BOOL v21 = v18 == v16;
          uint64_t v18 = (uint64_t)v19;
        }
        while (!v21);
      }
      *((void *)&v40 + 1) = v16;
      goto LABEL_34;
    }
    uint64_t v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::ValidationEntry>,siri::dialogengine::ValidationEntry const*,siri::dialogengine::ValidationEntry const*,siri::dialogengine::ValidationEntry*>(v14, (uint64_t)&v45, v40);
  }
  *((void *)&v40 + 1) = v24;
LABEL_34:
  *(void *)std::string::size_type v42 = &unk_1F211E4D0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)v42);
  if (SBYTE7(v29) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
LABEL_46:
  *(_OWORD *)std::string __p = 0u;
  long long v29 = 0u;
  uint64_t v30 = 0;
  uint64_t v31 = 256;
  memset(&v42[8], 0, 32);
  *(void *)std::string::size_type v42 = __p;
  v43.__r_.__value_.__r.__words[0] = 0;
  v43.__r_.__value_.__l.__size_ = 512;
  LODWORD(v43.__r_.__value_.__r.__words[2]) = 324;
  WORD2(v43.__r_.__value_.__r.__words[2]) = 0x2000;
  v44.__r_.__value_.__r.__words[0] = 4;
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((void **)v42);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)v42, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)v42, (uint64_t)"status", 6u);
  if (this)
  {
    if ((void)v40 == *((void *)&v40 + 1))
    {
      if ((void)v38 == *((void *)&v38 + 1)) {
        uint64_t v26 = "valid";
      }
      else {
        uint64_t v26 = "warnings";
      }
      if ((void)v38 == *((void *)&v38 + 1)) {
        unsigned int v25 = 5;
      }
      else {
        unsigned int v25 = 8;
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)v42, 5);
    }
    else
    {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)v42, 5);
      unsigned int v25 = 7;
      uint64_t v26 = "invalid";
    }
  }
  else
  {
    unsigned int v25 = 5;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)v42, 5);
    uint64_t v26 = "error";
  }
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)v42, (uint64_t)v26, v25);
  std::string::basic_string[abi:ne180100]<0>(&v35, "errors");
  siri::dialogengine::AddValidationEntriesToJsonDoc((uint64_t)&v35, (uint64_t *)&v40, (uint64_t *)v42);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v35, "warnings");
  siri::dialogengine::AddValidationEntriesToJsonDoc((uint64_t)&v35, (uint64_t *)&v38, (uint64_t *)v42);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((void **)v42);
  uint64_t String = (char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString(__p);
  std::string::basic_string[abi:ne180100]<0>(a2, String);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&v42[8]);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)__p);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)std::string::size_type v42 = &v36;
  std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v42);
  *(void *)std::string::size_type v42 = &v38;
  std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v42);
  *(void *)std::string::size_type v42 = &v40;
  std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v42);
}

void sub_1C5E27CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  *(void *)(v52 - 184) = v51;
  siri::dialogengine::ValidationEntry::~ValidationEntry((void **)(v52 - 160));
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  *(void *)(v52 - 160) = &a46;
  std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 160));
  *(void *)(v52 - 160) = &a50;
  std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 160));
  *(void *)(v52 - 160) = v52 - 192;
  std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 160));
  _Unwind_Resume(a1);
}

void std::vector<siri::dialogengine::ValidationEntry>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 88;
      uint64_t v6 = v3 - 88;
      uint64_t v7 = v3 - 88;
      do
      {
        long long v8 = *(void (***)(char *))v7;
        v7 -= 88;
        (*v8)(v6);
        v5 -= 88;
        BOOL v9 = v6 == v1;
        uint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::ValidationEntry>,siri::dialogengine::ValidationEntry const*,siri::dialogengine::ValidationEntry const*,siri::dialogengine::ValidationEntry*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      siri::dialogengine::ValidationEntry::ValidationEntry((siri::dialogengine::ValidationEntry *)(a3 + v6), (const siri::dialogengine::ValidationEntry *)(a1 + v6));
      v6 += 88;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void siri::dialogengine::GenerateResponse(uint64_t *__return_ptr a1@<X8>, siri::dialogengine *this@<X0>)
{
  uint64_t v3 = this;
  std::string v217 = a1;
  uint64_t v308 = *MEMORY[0x1E4F143B8];
  if (siri::dialogengine::HasPreloadBeenCalled(this)) {
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Performance: DialogEngine preload has been called", v4);
  }
  else {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Performance: DialogEngine preload has not been called. This is less significant on 2023 and later releases, but may lead to additional time loading schema and metadata", v4);
  }
  memset(&v293, 0, sizeof(v293));
  memset(&v292, 0, sizeof(v292));
  memset(&v291, 0, sizeof(v291));
  memset(&v290, 0, sizeof(v290));
  std::string::basic_string[abi:ne180100]<0>(&__p, "dialog");
  v219 = v3;
  if (!v3)
  {
    MEMORY[0x1C8796900](&v292, "internal-error");
    MEMORY[0x1C8796900](&v291, "No context object provided.");
    long long v10 = 0;
    uint64_t v235 = 0;
    uint64_t v218 = 0;
    int v236 = 0;
    int v233 = 0;
    unsigned int v240 = 0;
    BOOL v238 = 0;
    goto LABEL_113;
  }
  uint64_t v5 = (siri::dialogengine *)((char *)v3 + 8);
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v275, (siri::dialogengine *)((char *)v3 + 8));
  uint64_t v6 = "";
  if (LODWORD(v275.__r_.__value_.__l.__data_) == 1) {
    uint64_t v6 = "visual";
  }
  LODWORD(v218) = v275.__r_.__value_.__l.__data_;
  if (LODWORD(v275.__r_.__value_.__l.__data_)) {
    uint64_t v7 = (char *)v6;
  }
  else {
    uint64_t v7 = "dialog";
  }
  std::string::basic_string[abi:ne180100]<0>(v298, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v298[0];
  uint64_t v8 = *((void *)v3 + 433);
  BOOL v9 = (std::__shared_weak_count *)*((void *)v3 + 434);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v238 = v8 != 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  else
  {
    BOOL v238 = v8 != 0;
  }
  unsigned int v240 = v286;
  std::string::basic_string[abi:ne180100]<0>(v298, "alwaysDisplayDialog");
  siri::dialogengine::RequestInfo::GetUserSetting((uint64_t)&v275, (const void **)&v298[0].__r_.__value_.__l.__data_, &v274);
  if (SHIBYTE(v298[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v298[0].__r_.__value_.__l.__data_);
  }
  int v233 = siri::dialogengine::StringToBool(&v274);
  unsigned int v12 = v288;
  if (*((char *)v3 + 711) < 0) {
    std::string::__init_copy_ctor_external(v298, *((const std::string::value_type **)v3 + 86), *((void *)v3 + 87));
  }
  else {
    v298[0] = *(std::string *)((char *)v3 + 688);
  }
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v292.__r_.__value_.__l.__data_);
  }
  std::string v292 = v298[0];
  unsigned int v13 = (siri::dialogengine::File *)*((void *)v3 + 63);
  long long v10 = (std::__shared_weak_count *)*((void *)v3 + 64);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v13)
  {
    if (*((char *)v13 + 127) < 0) {
      std::string::__init_copy_ctor_external(v298, *((const std::string::value_type **)v13 + 13), *((void *)v13 + 14));
    }
    else {
      v298[0] = *(std::string *)((char *)v13 + 104);
    }
    if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v293.__r_.__value_.__l.__data_);
    }
    std::string v293 = v298[0];
    if ((v12 & 0x200) != 0)
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Removing non-label content from file", v11);
      v298[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F21232E0;
      (*(void (**)(siri::dialogengine::File *, std::string *))(*(void *)v13 + 24))(v13, v298);
    }
  }
  if ((SHIBYTE(v292.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) != 7) {
      goto LABEL_105;
    }
    uint64_t v14 = &v292;
    if (!v13) {
      goto LABEL_105;
    }
LABEL_39:
    if (!(LODWORD(v14->__r_.__value_.__l.__data_) ^ 0x63637573 | *(_DWORD *)((char *)v14->__r_.__value_.__r.__words + 3) ^ 0x73736563))
    {
      uint64_t v15 = *((void *)v3 + 63);
      uint64_t v16 = (std::__shared_weak_count *)*((void *)v3 + 64);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v15)
      {
        if (*(char *)(v15 + 127) < 0) {
          std::string::__init_copy_ctor_external(&v263, *(const std::string::value_type **)(v15 + 104), *(void *)(v15 + 112));
        }
        else {
          std::string v263 = *(std::string *)(v15 + 104);
        }
        std::string::size_type size = HIBYTE(v263.__r_.__value_.__r.__words[2]);
        if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v263.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v298, (siri::dialogengine *)((char *)v3 + 8));
          long long v270 = 0uLL;
          *(void *)&long long v271 = 0;
          std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v270, v298[0].__r_.__value_.__l.__size_, v298[0].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v298[0].__r_.__value_.__r.__words[2] - v298[0].__r_.__value_.__l.__size_) >> 5));
          siri::dialogengine::RequestInfo::~RequestInfo((void **)&v298[0].__r_.__value_.__l.__data_);
          if ((void)v270 == *((void *)&v270 + 1))
          {
            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"RequestInfo has no template dirs. Can't check grading allow list without a templateDir.", v18);
          }
          else
          {
            if (*(char *)(v270 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v298, *(const std::string::value_type **)v270, *(void *)(v270 + 8));
            }
            else
            {
              long long v19 = *(_OWORD *)v270;
              v298[0].__r_.__value_.__r.__words[2] = *(void *)(v270 + 16);
              *(_OWORD *)&v298[0].__r_.__value_.__l.__data_ = v19;
            }
            std::string::size_type v20 = HIBYTE(v298[0].__r_.__value_.__r.__words[2]);
            if ((v298[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v20 = v298[0].__r_.__value_.__l.__size_;
            }
            if (v20)
            {
              siri::dialogengine::GradingAllowListFactory::GetAllowListForTemplateDir((char *)v298, &v262);
              std::string::size_type v22 = v262.__r_.__value_.__r.__words[0];
              if (v262.__r_.__value_.__r.__words[0])
              {
                unint64_t v23 = &v263;
                v242 = v10;
                BOOL IsAllowed = siri::dialogengine::GradingAllowList::IsAllowed((uint64_t *)v262.__r_.__value_.__l.__data_, (char *)&v263);
                BOOL v25 = IsAllowed;
                if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  unint64_t v23 = (std::string *)v263.__r_.__value_.__r.__words[0];
                }
                if (IsAllowed) {
                  uint64_t v26 = "true";
                }
                else {
                  uint64_t v26 = "false";
                }
                long long v27 = &v296;
                std::string::basic_string[abi:ne180100]<0>(&v296, v26);
                if (SHIBYTE(data) < 0) {
                  long long v27 = (int64x2_t *)v296.i64[0];
                }
                if (*(char *)(v22 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v295, *(const std::string::value_type **)v22, *(void *)(v22 + 8));
                }
                else
                {
                  long long v29 = *(_OWORD *)v22;
                  v295.__r_.__value_.__r.__words[2] = *(void *)(v22 + 16);
                  *(_OWORD *)&v295.__r_.__value_.__l.__data_ = v29;
                }
                int v30 = SHIBYTE(v295.__r_.__value_.__r.__words[2]);
                std::string::size_type v31 = v295.__r_.__value_.__r.__words[0];
                if (*(char *)(v22 + 47) < 0) {
                  std::string::__init_copy_ctor_external(&v294, *(const std::string::value_type **)(v22 + 24), *(void *)(v22 + 32));
                }
                else {
                  std::string v294 = *(std::string *)(v22 + 24);
                }
                std::string v32 = &v295;
                if (v30 < 0) {
                  std::string v32 = (std::string *)v31;
                }
                std::string v33 = &v294;
                if ((v294.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string v33 = (std::string *)v294.__r_.__value_.__r.__words[0];
                }
                siri::dialogengine::Log::Info((siri::dialogengine::Log *)"catId [%s] is approved for grading: %s\nBundle ID: %s\nAllow list: %s", v28, v23, v27, v32, v33);
                long long v10 = v242;
                if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v294.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v295.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(data) < 0) {
                  operator delete((void *)v296.i64[0]);
                }
                *((unsigned char *)v219 + 736) = v25;
              }
              else
              {
                siri::dialogengine::Log::Info((siri::dialogengine::Log *)"No grading allow list found.", v21);
              }
              if (v262.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v262.__r_.__value_.__l.__size_);
              }
            }
            else
            {
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"templateDir value is empty. Can't check grading allow list without a templateDir.", v18);
            }
            if (SHIBYTE(v298[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v298[0].__r_.__value_.__l.__data_);
            }
          }
          v298[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v270;
          std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)v298);
        }
        else
        {
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"File has no catId. Can't check grading allow list without a catId.", v11);
        }
        if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v263.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Context has no File; therefore no catId. Can't check grading allow list without a catId.",
          v11);
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      uint64_t v34 = *((void *)v219 + 431);
      std::string v35 = (std::__shared_weak_count *)*((void *)v219 + 432);
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::dialogengine::TraceWriter::WriteDialogStateToFile(v34, (char *)v219, 0);
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v298, v5);
      int v36 = v307;
      siri::dialogengine::RequestInfo::~RequestInfo((void **)&v298[0].__r_.__value_.__l.__data_);
      uint64_t v3 = v219;
      if (!v36)
      {
        uint64_t v37 = (siri::dialogengine::TraceWriter *)*((void *)v219 + 431);
        long long v38 = (std::__shared_weak_count *)*((void *)v219 + 432);
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        siri::dialogengine::TraceWriter::WriteExpandedParams(v37, v219);
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
      }
      siri::dialogengine::File::Execute(v13, (const void ***)v219, (uint64_t *)v298);
      std::vector<std::shared_ptr<siri::dialogengine::Node>>::__vdeallocate((uint64_t *)&v290);
      std::string v290 = v298[0];
      memset(v298, 0, 24);
      v263.__r_.__value_.__r.__words[0] = (std::string::size_type)v298;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v263);
    }
    goto LABEL_105;
  }
  if (v292.__r_.__value_.__l.__size_ == 7)
  {
    uint64_t v14 = (std::string *)v292.__r_.__value_.__r.__words[0];
    if (v13) {
      goto LABEL_39;
    }
  }
LABEL_105:
  if (*((char *)v3 + 735) < 0) {
    std::string::__init_copy_ctor_external(v298, *((const std::string::value_type **)v3 + 89), *((void *)v3 + 90));
  }
  else {
    v298[0] = *(std::string *)((char *)v3 + 712);
  }
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v291.__r_.__value_.__l.__data_);
  }
  uint64_t v235 = (uint64_t)v13;
  int v236 = (v12 >> 9) & 1;
  HIDWORD(v218) = (v12 >> 11) & 1;
  std::string v291 = v298[0];
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v274.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&v275.__r_.__value_.__l.__data_);
LABEL_113:
  int64x2_t v296 = 0uLL;
  std::string::pointer data = 0;
  std::string::size_type v40 = v290.__r_.__value_.__l.__size_;
  uint64_t v39 = (const void **)v290.__r_.__value_.__r.__words[0];
  std::string v243 = v10;
  while (v39 != (const void **)v40)
  {
    if (*v39)
    {
      long long v270 = 0uLL;
      *(void *)&long long v271 = 0;
      if (v41)
      {
        std::string::size_type v42 = v41;
        siri::dialogengine::SpeakableString::SpeakableString(v298, (const siri::dialogengine::SpeakableString *)(v41 + 208));
        siri::dialogengine::SpeakableString::SpeakableString(&v275, (const siri::dialogengine::SpeakableString *)(v42 + 376));
        std::string v43 = (std::string *)*((void *)&v270 + 1);
        if (*((void *)&v270 + 1) >= (unint64_t)v271)
        {
          unint64_t v51 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)&v270 + 1) - v270) >> 3);
          unint64_t v52 = v51 + 1;
          if (v51 + 1 > 0x186186186186186) {
            goto LABEL_647;
          }
          if (0x9E79E79E79E79E7ALL * ((uint64_t)(v271 - v270) >> 3) > v52) {
            unint64_t v52 = 0x9E79E79E79E79E7ALL * ((uint64_t)(v271 - v270) >> 3);
          }
          if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v271 - v270) >> 3) >= 0xC30C30C30C30C3) {
            unint64_t v53 = 0x186186186186186;
          }
          else {
            unint64_t v53 = v52;
          }
          *((void *)&v264 + 1) = &v271;
          if (v53) {
            unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v53);
          }
          else {
            uint64_t v54 = 0;
          }
          v263.__r_.__value_.__r.__words[0] = v53;
          v263.__r_.__value_.__l.__size_ = v53 + 168 * v51;
          v263.__r_.__value_.__r.__words[2] = v263.__r_.__value_.__l.__size_;
          *(void *)&long long v264 = v53 + 168 * v54;
          siri::dialogengine::SpeakableString::SpeakableString((std::string *)v263.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)v298);
          v263.__r_.__value_.__r.__words[2] += 168;
          std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer((std::string *)&v270, &v263);
          std::string v44 = (std::string *)*((void *)&v270 + 1);
          std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v263);
        }
        else
        {
          siri::dialogengine::SpeakableString::SpeakableString(*((std::string **)&v270 + 1), (const siri::dialogengine::SpeakableString *)v298);
          std::string v44 = v43 + 7;
        }
        *((void *)&v270 + 1) = v44;
        if ((unint64_t)v44 >= (unint64_t)v271)
        {
          unint64_t v57 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)((uint64_t)v44 - v270) >> 3);
          unint64_t v58 = v57 + 1;
          if (v57 + 1 > 0x186186186186186) {
LABEL_647:
          }
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          if (0x9E79E79E79E79E7ALL * ((uint64_t)(v271 - v270) >> 3) > v58) {
            unint64_t v58 = 0x9E79E79E79E79E7ALL * ((uint64_t)(v271 - v270) >> 3);
          }
          if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v271 - v270) >> 3) >= 0xC30C30C30C30C3) {
            unint64_t v59 = 0x186186186186186;
          }
          else {
            unint64_t v59 = v58;
          }
          *((void *)&v264 + 1) = &v271;
          if (v59) {
            unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v59);
          }
          else {
            uint64_t v60 = 0;
          }
          v263.__r_.__value_.__r.__words[0] = v59;
          v263.__r_.__value_.__l.__size_ = v59 + 168 * v57;
          v263.__r_.__value_.__r.__words[2] = v263.__r_.__value_.__l.__size_;
          *(void *)&long long v264 = v59 + 168 * v60;
          siri::dialogengine::SpeakableString::SpeakableString((std::string *)v263.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v275);
          v263.__r_.__value_.__r.__words[2] += 168;
          std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer((std::string *)&v270, &v263);
          long long v56 = (std::string *)*((void *)&v270 + 1);
          std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v263);
        }
        else
        {
          siri::dialogengine::SpeakableString::SpeakableString(v44, (const siri::dialogengine::SpeakableString *)&v275);
          long long v56 = v44 + 7;
        }
        *((void *)&v270 + 1) = v56;
        if (v287 < 0) {
          operator delete(v285);
        }
        if (v284 < 0) {
          operator delete(v283);
        }
        if (v282 < 0) {
          operator delete(v281);
        }
        if (v280 < 0) {
          operator delete(v279);
        }
        if (v278 < 0) {
          operator delete(v277);
        }
        if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v276.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v275.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v306) & 0x80000000) == 0) {
          goto LABEL_170;
        }
LABEL_169:
        operator delete((void *)v305);
        goto LABEL_170;
      }
    }
    else
    {
      long long v270 = 0uLL;
      *(void *)&long long v271 = 0;
    }
    uint64_t v306 = 0;
    long long v305 = 0u;
    long long v304 = 0u;
    long long v303 = 0u;
    long long v302 = 0u;
    long long v301 = 0u;
    long long v300 = 0u;
    long long v299 = 0u;
    memset(v298, 0, sizeof(v298));
    v276.__r_.__value_.__l.__size_ = (std::string::size_type)&v271;
    v275.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(1uLL);
    v275.__r_.__value_.__l.__size_ = v275.__r_.__value_.__r.__words[0];
    v275.__r_.__value_.__r.__words[2] = v275.__r_.__value_.__r.__words[0];
    v276.__r_.__value_.__r.__words[0] = v275.__r_.__value_.__r.__words[0] + 168 * v45;
    siri::dialogengine::SpeakableString::SpeakableString((std::string *)v275.__r_.__value_.__l.__data_, (const siri::dialogengine::SpeakableString *)v298);
    v275.__r_.__value_.__r.__words[2] += 168;
    std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer((std::string *)&v270, &v275);
    long long v46 = (std::string *)*((void *)&v270 + 1);
    std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v275);
    *((void *)&v270 + 1) = v46;
    uint64_t v306 = 0;
    long long v305 = 0u;
    long long v304 = 0u;
    long long v303 = 0u;
    long long v302 = 0u;
    long long v301 = 0u;
    long long v300 = 0u;
    long long v299 = 0u;
    memset(v298, 0, sizeof(v298));
    if ((unint64_t)v46 >= (unint64_t)v271)
    {
      unint64_t v47 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)((uint64_t)v46 - v270) >> 3);
      unint64_t v48 = v47 + 1;
      if (v47 + 1 > 0x186186186186186) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      if (0x9E79E79E79E79E7ALL * ((uint64_t)(v271 - v270) >> 3) > v48) {
        unint64_t v48 = 0x9E79E79E79E79E7ALL * ((uint64_t)(v271 - v270) >> 3);
      }
      if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v271 - v270) >> 3) >= 0xC30C30C30C30C3) {
        unint64_t v49 = 0x186186186186186;
      }
      else {
        unint64_t v49 = v48;
      }
      v276.__r_.__value_.__l.__size_ = (std::string::size_type)&v271;
      if (v49) {
        unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v49);
      }
      else {
        uint64_t v50 = 0;
      }
      v275.__r_.__value_.__r.__words[0] = v49;
      v275.__r_.__value_.__l.__size_ = v49 + 168 * v47;
      v275.__r_.__value_.__r.__words[2] = v275.__r_.__value_.__l.__size_;
      v276.__r_.__value_.__r.__words[0] = v49 + 168 * v50;
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v275.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)v298);
      v275.__r_.__value_.__r.__words[2] += 168;
      std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer((std::string *)&v270, &v275);
      uint64_t v55 = *((void *)&v270 + 1);
      std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v275);
      *((void *)&v270 + 1) = v55;
      if ((SHIBYTE(v306) & 0x80000000) == 0) {
        goto LABEL_170;
      }
      goto LABEL_169;
    }
    siri::dialogengine::SpeakableString::SpeakableString(v46, (const siri::dialogengine::SpeakableString *)v298);
    *((void *)&v270 + 1) = v46 + 7;
LABEL_170:
    if (SHIBYTE(v304) < 0) {
      operator delete(*((void **)&v303 + 1));
    }
    if (SBYTE7(v303) < 0) {
      operator delete((void *)v302);
    }
    if (SHIBYTE(v301) < 0) {
      operator delete(*((void **)&v300 + 1));
    }
    if (SBYTE7(v300) < 0) {
      operator delete((void *)v299);
    }
    if (SHIBYTE(v298[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v298[1].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v298[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v298[0].__r_.__value_.__l.__data_);
    }
    v61 = (void *)v296.i64[1];
    if (v296.i64[1] >= (unint64_t)data)
    {
      unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((v296.i64[1] - v296.i64[0]) >> 3);
      unint64_t v64 = v63 + 1;
      if (v63 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)&data[-v296.i64[0]] >> 3) > v64) {
        unint64_t v64 = 0x5555555555555556 * ((uint64_t)&data[-v296.i64[0]] >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&data[-v296.i64[0]] >> 3) >= 0x555555555555555) {
        unint64_t v65 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v65 = v64;
      }
      v298[1].__r_.__value_.__l.__size_ = (std::string::size_type)&data;
      if (v65)
      {
        if (v65 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        std::string v66 = (char *)operator new(24 * v65);
      }
      else
      {
        std::string v66 = 0;
      }
      std::string v67 = &v66[24 * v63];
      v298[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
      v298[0].__r_.__value_.__l.__size_ = (std::string::size_type)v67;
      v298[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v67;
      v298[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v66[24 * v65];
      *((void *)v67 + 1) = 0;
      *((void *)v67 + 2) = 0;
      *(void *)std::string v67 = 0;
      std::vector<siri::dialogengine::SpeakableString>::__init_with_size[abi:ne180100]<siri::dialogengine::SpeakableString*,siri::dialogengine::SpeakableString*>(v67, v270, *((uint64_t *)&v270 + 1), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)&v270 + 1) - v270) >> 3));
      std::string::size_type v68 = v298[0].__r_.__value_.__l.__size_;
      std::string::size_type v62 = v298[0].__r_.__value_.__r.__words[2] + 24;
      v298[0].__r_.__value_.__r.__words[2] += 24;
      std::string v69 = (void *)v296.i64[1];
      std::string v70 = (void *)v296.i64[0];
      if (v296.i64[1] == v296.i64[0])
      {
        int64x2_t v72 = vdupq_n_s64(v296.u64[1]);
      }
      else
      {
        do
        {
          *(void *)(v68 - 24) = 0;
          *(void *)(v68 - 16) = 0;
          v68 -= 24;
          *(void *)(v68 + 16) = 0;
          long long v71 = *(_OWORD *)(v69 - 3);
          v69 -= 3;
          *(_OWORD *)std::string::size_type v68 = v71;
          *(void *)(v68 + 16) = v69[2];
          void *v69 = 0;
          v69[1] = 0;
          v69[2] = 0;
        }
        while (v69 != v70);
        int64x2_t v72 = v296;
        std::string::size_type v62 = v298[0].__r_.__value_.__r.__words[2];
      }
      v296.i64[0] = v68;
      v296.i64[1] = v62;
      *(int64x2_t *)&v298[0].__r_.__value_.__r.__words[1] = v72;
      std::string::size_type v73 = (std::string::size_type)data;
      std::string::pointer data = v298[1].__r_.__value_.__l.__data_;
      v298[1].__r_.__value_.__r.__words[0] = v73;
      v298[0].__r_.__value_.__r.__words[0] = v72.i64[0];
      std::__split_buffer<std::vector<siri::dialogengine::SpeakableString>>::~__split_buffer((uint64_t)v298);
    }
    else
    {
      *(void *)v296.i64[1] = 0;
      v61[1] = 0;
      v61[2] = 0;
      std::vector<siri::dialogengine::SpeakableString>::__init_with_size[abi:ne180100]<siri::dialogengine::SpeakableString*,siri::dialogengine::SpeakableString*>(v61, v270, *((uint64_t *)&v270 + 1), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)&v270 + 1) - v270) >> 3));
      std::string::size_type v62 = (std::string::size_type)(v61 + 3);
    }
    v296.i64[1] = v62;
    v298[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v270;
    std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)v298);
    v39 += 2;
    long long v10 = v243;
  }
  int v74 = v238;
  if (v218) {
    int v74 = 1;
  }
  if (!v240) {
    int v74 = 1;
  }
  int v75 = v219;
  if (((v74 | v236) & 1) == 0)
  {
    siri::dialogengine::NodeVectorDialogFilterAdapter::NodeVectorDialogFilterAdapter((siri::dialogengine::NodeVectorDialogFilterAdapter *)v298, (uint64_t)&v290);
    std::string::basic_string[abi:ne180100]<0>(&v275, "");
    siri::dialogengine::FilterDialogForModeAndSettings((uint64_t *)v298, v240, v233, 0, 0, (uint64_t)&v275);
    if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v275.__r_.__value_.__l.__data_);
    }
    v298[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F21239B8;
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((void *)v299);
    if (v298[0].__r_.__value_.__r.__words[2])
    {
      v298[1].__r_.__value_.__r.__words[0] = v298[0].__r_.__value_.__r.__words[2];
      operator delete((void *)v298[0].__r_.__value_.__r.__words[2]);
    }
  }
  long long v270 = 0u;
  long long v271 = 0u;
  uint64_t v272 = 0;
  uint64_t v273 = 256;
  p_std::string::size_type size = &v263.__r_.__value_.__l.__size_;
  *(_OWORD *)&v263.__r_.__value_.__r.__words[1] = 0u;
  long long v264 = 0u;
  v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v270;
  uint64_t v265 = 0;
  uint64_t v266 = 512;
  int v267 = 324;
  __int16 v268 = 0x2000;
  uint64_t v269 = 4;
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(&v263);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"status", 6u);
  if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v76 = &v292;
  }
  else {
    std::string v76 = (std::string *)v292.__r_.__value_.__r.__words[0];
  }
  unsigned int v77 = strlen((const char *)v76);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v76, v77);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"error", 5u);
  if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v78 = &v291;
  }
  else {
    std::string v78 = (std::string *)v291.__r_.__value_.__r.__words[0];
  }
  unsigned int v79 = strlen((const char *)v78);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v78, v79);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"response", 8u);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray(&v263);
  char v81 = 0;
  v82 = 0;
  if (v219)
  {
    std::string::size_type v83 = v290.__r_.__value_.__r.__words[0];
    v84 = 0;
    if (v290.__r_.__value_.__l.__size_ != v290.__r_.__value_.__r.__words[0])
    {
      uint64_t v220 = 0;
      v82 = 0;
      v84 = 0;
      unint64_t v85 = 0;
      char v81 = 0;
      while (1)
      {
        unint64_t v244 = v85;
        uint64_t v86 = 16 * v85;
        uint64_t v87 = *(const void **)(v83 + 16 * v85);
        if (v87) {
          break;
        }
LABEL_551:
        unint64_t v176 = v244;
LABEL_552:
        unint64_t v85 = v176 + 1;
        if (v85 >= (uint64_t)(v290.__r_.__value_.__l.__size_ - v83) >> 4) {
          goto LABEL_555;
        }
      }
      uint64_t v239 = v86;
      std::string v241 = v84;
      if (!v88) {
        goto LABEL_509;
      }
      v89 = v88;
      siri::dialogengine::Node::GetGlobalId(v88, v75, &v295);
      siri::dialogengine::SpeakableString::SpeakableString(v298, (siri::dialogengine::Node *)((char *)v89 + 208));
      v90 = &v262;
      siri::dialogengine::SpeakableString::SpeakableString(&v275, (siri::dialogengine::Node *)((char *)v89 + 376));
      v91 = *(long long **)(v296.i64[0] + 24 * v244);
      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v92 = &v295;
      }
      else {
        v92 = (std::string *)v295.__r_.__value_.__r.__words[0];
      }
      if (SHIBYTE(v298[0].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v294, v298[0].__r_.__value_.__l.__data_, v298[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string v294 = v298[0];
      }
      if ((v294.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v93 = &v294;
      }
      else {
        int v93 = (std::string *)v294.__r_.__value_.__r.__words[0];
      }
      if (SHIBYTE(v298[1].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v274, v298[1].__r_.__value_.__l.__data_, v298[1].__r_.__value_.__l.__size_);
      }
      else {
        std::string v274 = v298[1];
      }
      v94 = &v274;
      if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v94 = (std::string *)v274.__r_.__value_.__r.__words[0];
      }
      v234 = v94;
      if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v262, v275.__r_.__value_.__l.__data_, v275.__r_.__value_.__l.__size_);
      }
      else {
        std::string v262 = v275;
      }
      if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v90 = (std::string *)v262.__r_.__value_.__r.__words[0];
      }
      if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v261, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
      }
      else {
        std::string v261 = v276;
      }
      v95 = &v261;
      if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v95 = (std::string *)v261.__r_.__value_.__r.__words[0];
      }
      char v231 = v95;
      char v232 = v93;
      if (*((char *)v91 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v260, *(const std::string::value_type **)v91, *((void *)v91 + 1));
      }
      else
      {
        long long v96 = *v91;
        v260.__r_.__value_.__r.__words[2] = *((void *)v91 + 2);
        *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v96;
      }
      uint64_t v97 = &v260;
      if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v97 = (std::string *)v260.__r_.__value_.__r.__words[0];
      }
      v229 = v97;
      int v230 = v90;
      v98 = (std::string *)((char *)v91 + 24);
      if (*((char *)v91 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v259, *((const std::string::value_type **)v91 + 3), *((void *)v91 + 4));
      }
      else
      {
        *(_OWORD *)&v259.__r_.__value_.__l.__data_ = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
        v259.__r_.__value_.__r.__words[2] = *((void *)v91 + 5);
      }
      v99 = (std::string *)((char *)v91 + 168);
      v100 = &v259;
      if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v100 = (std::string *)v259.__r_.__value_.__r.__words[0];
      }
      std::string v227 = v100;
      std::string v228 = v92;
      if (*((char *)v91 + 191) < 0)
      {
        std::string::__init_copy_ctor_external(&v258, *((const std::string::value_type **)v91 + 21), *((void *)v91 + 22));
      }
      else
      {
        *(_OWORD *)&v258.__r_.__value_.__l.__data_ = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
        v258.__r_.__value_.__r.__words[2] = *((void *)v91 + 23);
      }
      v101 = &v258;
      if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v101 = (std::string *)v258.__r_.__value_.__r.__words[0];
      }
      uint64_t v226 = v101;
      v102 = (std::string *)(v91 + 12);
      if (*((char *)v91 + 215) < 0)
      {
        std::string::__init_copy_ctor_external(&v257, *((const std::string::value_type **)v91 + 24), *((void *)v91 + 25));
      }
      else
      {
        *(_OWORD *)&v257.__r_.__value_.__l.__data_ = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
        v257.__r_.__value_.__r.__words[2] = *((void *)v91 + 26);
      }
      if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v103 = &v257;
      }
      else {
        std::string::size_type v103 = (std::string *)v257.__r_.__value_.__r.__words[0];
      }
      if (*((unsigned char *)v89 + 547))
      {
        if (*((unsigned char *)v89 + 546)) {
          v104 = "true";
        }
        else {
          v104 = "false";
        }
      }
      else
      {
        v104 = "???";
      }
      std::string::basic_string[abi:ne180100]<0>(v255, v104);
      v105 = v255;
      if (v256 < 0) {
        v105 = (void **)v255[0];
      }
      unsigned int v225 = v105;
      if (*((unsigned char *)v89 + 545))
      {
        if (*((unsigned char *)v89 + 544)) {
          v106 = "true";
        }
        else {
          v106 = "false";
        }
      }
      else
      {
        v106 = "???";
      }
      std::string::basic_string[abi:ne180100]<0>(v253, v106);
      std::vector<std::pair<std::string, std::string>> v237 = (siri::dialogengine::SpeakableString *)v91;
      v107 = v253;
      if (v254 < 0) {
        v107 = (void **)v253[0];
      }
      std::string v224 = v107;
      if (*((unsigned char *)v75 + 736)) {
        uint64_t v108 = "true";
      }
      else {
        uint64_t v108 = "false";
      }
      std::string::basic_string[abi:ne180100]<0>(v251, v108);
      std::string v223 = v89;
      if (v252 >= 0) {
        v109 = v251;
      }
      else {
        v109 = (void **)v251[0];
      }
      siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)v298, &v250);
      int v110 = v103;
      if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v111 = &v250;
      }
      else {
        uint64_t v111 = (std::string *)v250.__r_.__value_.__r.__words[0];
      }
      siri::dialogengine::SpeakableString::GetRedactedSpeak((siri::dialogengine::SpeakableString *)v298, &v249);
      v222 = v99;
      if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v112 = &v249;
      }
      else {
        v112 = (std::string *)v249.__r_.__value_.__r.__words[0];
      }
      siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)&v275, &v248);
      if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v113 = &v248;
      }
      else {
        int v113 = (std::string *)v248.__r_.__value_.__r.__words[0];
      }
      siri::dialogengine::SpeakableString::GetRedactedSpeak((siri::dialogengine::SpeakableString *)&v275, &v247);
      std::string v221 = v102;
      if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v114 = &v247;
      }
      else {
        uint64_t v114 = (std::string *)v247.__r_.__value_.__r.__words[0];
      }
      siri::dialogengine::SpeakableString::GetRedactedPrint(v237, &v246);
      int v115 = SHIBYTE(v246.__r_.__value_.__r.__words[2]);
      std::string::size_type v116 = v246.__r_.__value_.__r.__words[0];
      siri::dialogengine::SpeakableString::GetRedactedSpeak(v237, &v245);
      uint64_t v118 = &v246;
      if (v115 < 0) {
        uint64_t v118 = (std::string *)v116;
      }
      int v119 = &v245;
      if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v119 = (std::string *)v245.__r_.__value_.__r.__words[0];
      }
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Dialog ID: '%s'\nFull print: '%s'\nFull speak: '%s'\nSupporting print: '%s'\nSupporting speak: '%s'\nUnfiltered full print: '%s'\nUnfiltered full speak: '%s'\nUnfiltered supporting print: '%s'\nUnfiltered supporting speak: '%s'\nspokenOnly: %s\nprintOnly:  %s\nisApprovedForGrading: %s\nRedacted full print: '%s'\nRedacted full speak: '%s'\nRedacted supporting print: '%s'\nRedacted supporting speak: '%s'\nUnfiltered redacted full print: '%s'\nUnfiltered redacted full speak: '%s'\n", v117,
        v228,
        v232,
        v234,
        v230,
        v231,
        v229,
        v227,
        v226,
        v110,
        v225,
        v224,
        v109,
        v111,
        v112,
        v113,
        v114,
        v118,
        v119,
        p_size,
        v217);
      long long v10 = v243;
      int v75 = v219;
      if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v245.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v246.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v247.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v248.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v249.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v250.__r_.__value_.__l.__data_);
      }
      if (v252 < 0) {
        operator delete(v251[0]);
      }
      if (v254 < 0) {
        operator delete(v253[0]);
      }
      if (v256 < 0) {
        operator delete(v255[0]);
      }
      if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v257.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v258.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v259.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v260.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v261.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v262.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v274.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v294.__r_.__value_.__l.__data_);
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(&v263);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"type", 4u);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      unsigned int v121 = strlen((const char *)p_p);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)p_p, v121);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"id", 2u);
      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v122 = &v295;
      }
      else {
        uint64_t v122 = (std::string *)v295.__r_.__value_.__r.__words[0];
      }
      unsigned int v123 = strlen((const char *)v122);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v122, v123);
      if (HIDWORD(v218))
      {
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"keywords", 8u);
        if (*((char *)v223 + 599) < 0) {
          std::string::__init_copy_ctor_external(&v294, *((const std::string::value_type **)v223 + 72), *((void *)v223 + 73));
        }
        else {
          std::string v294 = *(std::string *)((unsigned char *)v223 + 24);
        }
        v124 = (v294.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &v294
             : (std::string *)v294.__r_.__value_.__r.__words[0];
        unsigned int v125 = strlen((const char *)v124);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v124, v125);
        if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v294.__r_.__value_.__l.__data_);
        }
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"content", 7u);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(&v263);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"print", 5u);
      if (SHIBYTE(v298[0].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v294, v298[0].__r_.__value_.__l.__data_, v298[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string v294 = v298[0];
      }
      if ((v294.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v126 = &v294;
      }
      else {
        v126 = (std::string *)v294.__r_.__value_.__r.__words[0];
      }
      unsigned int v127 = strlen((const char *)v126);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v126, v127);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"speak", 5u);
      if (SHIBYTE(v298[1].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v274, v298[1].__r_.__value_.__l.__data_, v298[1].__r_.__value_.__l.__size_);
      }
      else {
        std::string v274 = v298[1];
      }
      if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v128 = &v274;
      }
      else {
        int v128 = (std::string *)v274.__r_.__value_.__r.__words[0];
      }
      unsigned int v129 = strlen((const char *)v128);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v128, v129);
      siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)v298, &v262);
      if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v130 = v262.__r_.__value_.__l.__size_;
        operator delete(v262.__r_.__value_.__l.__data_);
        if (!v130) {
          goto LABEL_377;
        }
      }
      else if (!*((unsigned char *)&v262.__r_.__value_.__s + 23))
      {
        goto LABEL_377;
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"redactedPrint", 0xDu);
      siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)v298, &v262);
      if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v131 = &v262;
      }
      else {
        uint64_t v131 = (std::string *)v262.__r_.__value_.__r.__words[0];
      }
      unsigned int v132 = strlen((const char *)v131);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v131, v132);
      if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v262.__r_.__value_.__l.__data_);
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"redactedSpeak", 0xDu);
      siri::dialogengine::SpeakableString::GetRedactedSpeak((siri::dialogengine::SpeakableString *)v298, &v262);
      if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v133 = &v262;
      }
      else {
        v133 = (std::string *)v262.__r_.__value_.__r.__words[0];
      }
      unsigned int v134 = strlen((const char *)v133);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v133, v134);
      if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v262.__r_.__value_.__l.__data_);
      }
LABEL_377:
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(&v263);
      std::string::size_type v135 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
      if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v135 = v276.__r_.__value_.__l.__size_;
      }
      if (!v135)
      {
        std::string::size_type v136 = HIBYTE(v275.__r_.__value_.__r.__words[2]);
        if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v136 = v275.__r_.__value_.__l.__size_;
        }
        if (!v136) {
          goto LABEL_414;
        }
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"caption", 7u);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(&v263);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"print", 5u);
      if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v262, v275.__r_.__value_.__l.__data_, v275.__r_.__value_.__l.__size_);
      }
      else {
        std::string v262 = v275;
      }
      if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v137 = &v262;
      }
      else {
        int v137 = (std::string *)v262.__r_.__value_.__r.__words[0];
      }
      unsigned int v138 = strlen((const char *)v137);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v137, v138);
      if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v262.__r_.__value_.__l.__data_);
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"speak", 5u);
      if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v262, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
      }
      else {
        std::string v262 = v276;
      }
      if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v139 = &v262;
      }
      else {
        v139 = (std::string *)v262.__r_.__value_.__r.__words[0];
      }
      unsigned int v140 = strlen((const char *)v139);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v139, v140);
      if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v262.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)&v275, &v262);
      if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v141 = v262.__r_.__value_.__l.__size_;
        operator delete(v262.__r_.__value_.__l.__data_);
        if (!v141)
        {
LABEL_413:
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(&v263);
LABEL_414:
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"unfilteredContent", 0x11u);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(&v263);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"print", 5u);
          if (*((char *)v237 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v262, *(const std::string::value_type **)v237, *((void *)v237 + 1));
          }
          else
          {
            long long v146 = *(_OWORD *)v237;
            v262.__r_.__value_.__r.__words[2] = *((void *)v237 + 2);
            *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v146;
          }
          if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v147 = &v262;
          }
          else {
            v147 = (std::string *)v262.__r_.__value_.__r.__words[0];
          }
          unsigned int v148 = strlen((const char *)v147);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v147, v148);
          if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v262.__r_.__value_.__l.__data_);
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"speak", 5u);
          if (*((char *)v237 + 47) < 0) {
            std::string::__init_copy_ctor_external(&v262, *((const std::string::value_type **)v237 + 3), *((void *)v237 + 4));
          }
          else {
            std::string v262 = *v98;
          }
          if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v149 = &v262;
          }
          else {
            int v149 = (std::string *)v262.__r_.__value_.__r.__words[0];
          }
          unsigned int v150 = strlen((const char *)v149);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v149, v150);
          if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v262.__r_.__value_.__l.__data_);
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"redactedPrint", 0xDu);
          siri::dialogengine::SpeakableString::GetRedactedPrint(v237, &v262);
          if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v151 = &v262;
          }
          else {
            v151 = (std::string *)v262.__r_.__value_.__r.__words[0];
          }
          unsigned int v152 = strlen((const char *)v151);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v151, v152);
          if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v262.__r_.__value_.__l.__data_);
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"redactedSpeak", 0xDu);
          siri::dialogengine::SpeakableString::GetRedactedSpeak(v237, &v262);
          if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v153 = &v262;
          }
          else {
            int v153 = (std::string *)v262.__r_.__value_.__r.__words[0];
          }
          unsigned int v154 = strlen((const char *)v153);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v153, v154);
          if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v262.__r_.__value_.__l.__data_);
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(&v263);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"unfilteredCaption", 0x11u);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(&v263);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"print", 5u);
          if (*((char *)v237 + 191) < 0) {
            std::string::__init_copy_ctor_external(&v262, *((const std::string::value_type **)v237 + 21), *((void *)v237 + 22));
          }
          else {
            std::string v262 = *v222;
          }
          if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            double v155 = &v262;
          }
          else {
            double v155 = (std::string *)v262.__r_.__value_.__r.__words[0];
          }
          unsigned int v156 = strlen((const char *)v155);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v155, v156);
          if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v262.__r_.__value_.__l.__data_);
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"speak", 5u);
          if (*((char *)v237 + 215) < 0) {
            std::string::__init_copy_ctor_external(&v262, *((const std::string::value_type **)v237 + 24), *((void *)v237 + 25));
          }
          else {
            std::string v262 = *v221;
          }
          if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v157 = &v262;
          }
          else {
            v157 = (std::string *)v262.__r_.__value_.__r.__words[0];
          }
          unsigned int v158 = strlen((const char *)v157);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v157, v158);
          if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v262.__r_.__value_.__l.__data_);
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(&v263);
          if (*((unsigned char *)v223 + 545))
          {
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"printOnly", 9u);
            if (*((unsigned char *)v223 + 545))
            {
              BOOL v159 = *((unsigned char *)v223 + 544) != 0;
              if (*((unsigned char *)v223 + 544)) {
                int v160 = 2;
              }
              else {
                int v160 = 1;
              }
            }
            else
            {
              BOOL v159 = 0;
              int v160 = 1;
            }
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, v160);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool((uint64_t *)&v263, v159);
          }
          if (*((unsigned char *)v223 + 547))
          {
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"spokenOnly", 0xAu);
            if (*((unsigned char *)v223 + 547))
            {
              BOOL v161 = *((unsigned char *)v223 + 546) != 0;
              if (*((unsigned char *)v223 + 546)) {
                int v162 = 2;
              }
              else {
                int v162 = 1;
              }
            }
            else
            {
              BOOL v161 = 0;
              int v162 = 1;
            }
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, v162);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool((uint64_t *)&v263, v161);
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"isApprovedForGrading", 0x14u);
          int v163 = *((unsigned __int8 *)v219 + 736);
          if (*((unsigned char *)v219 + 736)) {
            int v164 = 2;
          }
          else {
            int v164 = 1;
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, v164);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool((uint64_t *)&v263, v163 != 0);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(&v263);
          if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v274.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v294.__r_.__value_.__l.__data_);
          }
          if (v287 < 0) {
            operator delete(v285);
          }
          if (v284 < 0) {
            operator delete(v283);
          }
          if (v282 < 0) {
            operator delete(v281);
          }
          if (v280 < 0) {
            operator delete(v279);
          }
          if (v278 < 0) {
            operator delete(v277);
          }
          if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v276.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v275.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v306) < 0) {
            operator delete((void *)v305);
          }
          if (SHIBYTE(v304) < 0) {
            operator delete(*((void **)&v303 + 1));
          }
          if (SBYTE7(v303) < 0) {
            operator delete((void *)v302);
          }
          if (SHIBYTE(v301) < 0) {
            operator delete(*((void **)&v300 + 1));
          }
          if (SBYTE7(v300) < 0) {
            operator delete((void *)v299);
          }
          if (SHIBYTE(v298[1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v298[1].__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v298[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v298[0].__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v295.__r_.__value_.__l.__data_);
          }
          std::string::size_type v83 = v290.__r_.__value_.__r.__words[0];
          uint64_t v87 = *(const void **)(v290.__r_.__value_.__r.__words[0] + v239);
          if (!v87)
          {
            char v81 = 1;
LABEL_549:
            v84 = v241;
            goto LABEL_551;
          }
          char v81 = 1;
LABEL_509:
          if (v165)
          {
            double v166 = v165;
            if (v82 >= v220)
            {
              uint64_t v168 = (v82 - v241) >> 3;
              unint64_t v169 = v168 + 1;
              if ((unint64_t)(v168 + 1) >> 61) {
                std::vector<BOOL>::__throw_length_error[abi:ne180100]();
              }
              if ((v220 - v241) >> 2 > v169) {
                unint64_t v169 = (v220 - v241) >> 2;
              }
              if ((unint64_t)(v220 - v241) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v170 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v170 = v169;
              }
              if (v170)
              {
                if (v170 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                v171 = (char *)operator new(8 * v170);
              }
              else
              {
                v171 = 0;
              }
              int v172 = &v171[8 * v168];
              *(void *)int v172 = v166;
              v167 = v172 + 8;
              if (v82 != v241)
              {
                do
                {
                  uint64_t v173 = *((void *)v82 - 1);
                  v82 -= 8;
                  *((void *)v172 - 1) = v173;
                  v172 -= 8;
                }
                while (v82 != v241);
                v82 = v241;
              }
              v84 = v172;
              uint64_t v220 = &v171[8 * v170];
              if (v82) {
                operator delete(v82);
              }
            }
            else
            {
              *(void *)v82 = v165;
              v167 = v82 + 8;
              v84 = v241;
            }
            std::string::size_type v83 = v290.__r_.__value_.__r.__words[0];
            uint64_t v87 = *(const void **)(v290.__r_.__value_.__r.__words[0] + v239);
            if (!v87)
            {
              v82 = v167;
              long long v10 = v243;
              goto LABEL_551;
            }
            std::string v241 = v84;
            v82 = v167;
            long long v10 = v243;
          }
          if (v174)
          {
            uint64_t v175 = v174;
            v84 = v241;
            siri::dialogengine::VisualResponse::GetResponseBase64Protobuf(v174, v298);
            unint64_t v176 = v244;
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(&v263);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"type", 4u);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v177 = &__p;
            }
            else {
              v177 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            unsigned int v178 = strlen((const char *)v177);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v177, v178);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"data", 4u);
            if ((v298[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v179 = v298;
            }
            else {
              v179 = (std::string *)v298[0].__r_.__value_.__r.__words[0];
            }
            unsigned int v180 = strlen((const char *)v179);
            v181 = (siri::dialogengine *)rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v179, v180);
            siri::dialogengine::GetLogStateRef(v181);
            if (HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState))
            {
              rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
              rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"json", 4u);
              siri::dialogengine::VisualResponse::GetResponseJSON(v175, &v275);
              std::string::size_type v182 = (v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? &v275
                   : (std::string *)v275.__r_.__value_.__r.__words[0];
              uint64_t v183 = (v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? HIBYTE(v275.__r_.__value_.__r.__words[2])
                   : v275.__r_.__value_.__l.__size_;
              rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::RawValue(&v263, (uint64_t)v182, v183);
              if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v275.__r_.__value_.__l.__data_);
              }
            }
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(&v263);
            if (SHIBYTE(v298[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v298[0].__r_.__value_.__l.__data_);
            }
            std::string::size_type v83 = v290.__r_.__value_.__r.__words[0];
            goto LABEL_552;
          }
          goto LABEL_549;
        }
      }
      else if (!*((unsigned char *)&v262.__r_.__value_.__s + 23))
      {
        goto LABEL_413;
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"redactedPrint", 0xDu);
      siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)&v275, &v262);
      if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v142 = &v262;
      }
      else {
        uint64_t v142 = (std::string *)v262.__r_.__value_.__r.__words[0];
      }
      unsigned int v143 = strlen((const char *)v142);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v142, v143);
      if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v262.__r_.__value_.__l.__data_);
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"redactedSpeak", 0xDu);
      siri::dialogengine::SpeakableString::GetRedactedSpeak((siri::dialogengine::SpeakableString *)&v275, &v262);
      if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v144 = &v262;
      }
      else {
        v144 = (std::string *)v262.__r_.__value_.__r.__words[0];
      }
      unsigned int v145 = strlen((const char *)v144);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v144, v145);
      if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v262.__r_.__value_.__l.__data_);
      }
      goto LABEL_413;
    }
  }
  else
  {
    v84 = 0;
  }
LABEL_555:
  if (!v218 && (v81 & 1) == 0)
  {
    v184 = &v293;
    if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v184 = (std::string *)v293.__r_.__value_.__r.__words[0];
    }
    long long v185 = &v292;
    if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v185 = (std::string *)v292.__r_.__value_.__r.__words[0];
    }
    v186 = &v291;
    if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v186 = (std::string *)v291.__r_.__value_.__r.__words[0];
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"The execution of dialog CAT '%s' produced no dialog\nSTATUS: %s\nERROR: %s", v80, v184, v185, v186);
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray(&v263);
  v187 = v84;
  if (v82 != v84)
  {
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"visual_refs", 0xBu);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray(&v263);
    v188 = v84;
    do
    {
      uint64_t v189 = *(void *)v188;
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(&v263);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"id", 2u);
      if (*(char *)(v189 + 119) < 0) {
        std::string::__init_copy_ctor_external(v298, *(const std::string::value_type **)(v189 + 96), *(void *)(v189 + 104));
      }
      else {
        v298[0] = *(std::string *)(v189 + 96);
      }
      if ((v298[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v190 = v298;
      }
      else {
        v190 = (std::string *)v298[0].__r_.__value_.__r.__words[0];
      }
      unsigned int v191 = strlen((const char *)v190);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v190, v191);
      v84 = v187;
      if (SHIBYTE(v298[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v298[0].__r_.__value_.__l.__data_);
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"parameters", 0xAu);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(&v263);
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v275, (const void ***)(v189 + 208));
      std::string::size_type v192 = v275.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v275.__r_.__value_.__l.__data_ != &v275.__r_.__value_.__r.__words[1])
      {
        do
        {
          std::pair<std::string const,std::string>::pair[abi:ne180100](v298, (long long *)(v192 + 32));
          if ((v298[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v193 = v298;
          }
          else {
            v193 = (std::string *)v298[0].__r_.__value_.__r.__words[0];
          }
          unsigned int v194 = strlen((const char *)v193);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v193, v194);
          if ((v298[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v195 = &v298[1];
          }
          else {
            v195 = (std::string *)v298[1].__r_.__value_.__l.__data_;
          }
          unsigned int v196 = strlen((const char *)v195);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v195, v196);
          if (SHIBYTE(v298[1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v298[1].__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v298[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v298[0].__r_.__value_.__l.__data_);
          }
          v197 = *(std::string **)(v192 + 8);
          v84 = v187;
          if (v197)
          {
            do
            {
              v198 = v197;
              v197 = (std::string *)v197->__r_.__value_.__r.__words[0];
            }
            while (v197);
          }
          else
          {
            do
            {
              v198 = *(std::string **)(v192 + 16);
              BOOL v199 = v198->__r_.__value_.__r.__words[0] == v192;
              std::string::size_type v192 = (std::string::size_type)v198;
            }
            while (!v199);
          }
          std::string::size_type v192 = (std::string::size_type)v198;
        }
        while (v198 != (std::string *)&v275.__r_.__value_.__r.__words[1]);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v275.__r_.__value_.__l.__size_);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(&v263);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(&v263);
      v188 += 8;
    }
    while (v188 != v82);
    long long v10 = v243;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray(&v263);
    int v75 = v219;
  }
  if (v235)
  {
    std::string::basic_string[abi:ne180100]<0>(v298, "category");
    std::string::basic_string[abi:ne180100]<0>(v298[1].__r_.__value_.__r.__words, "listenAfterSpeaking");
    memset(&v275, 0, sizeof(v275));
    v295.__r_.__value_.__r.__words[0] = (std::string::size_type)&v275;
    v295.__r_.__value_.__s.__data_[8] = 0;
    v275.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v275.__r_.__value_.__l.__size_ = v275.__r_.__value_.__r.__words[0];
    v275.__r_.__value_.__r.__words[2] = v275.__r_.__value_.__r.__words[0] + 48;
    unint64_t v200 = 0;
    v275.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v275.__r_.__value_.__r.__words[2], (long long *)v298, &v299, (std::string *)v275.__r_.__value_.__l.__data_);
    do
    {
      if (SHIBYTE(v298[v200 / 0x18 + 1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v298[v200 / 0x18 + 1].__r_.__value_.__l.__data_);
      }
      v200 -= 24;
    }
    while (v200 != -48);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"meta", 4u);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(&v263);
    std::string::size_type v202 = v275.__r_.__value_.__l.__size_;
    for (std::string::size_type i = v275.__r_.__value_.__r.__words[0]; i != v202; i += 24)
    {
      if (*(char *)(i + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v298, *(const std::string::value_type **)i, *(void *)(i + 8));
      }
      else
      {
        long long v203 = *(_OWORD *)i;
        v298[0].__r_.__value_.__r.__words[2] = *(void *)(i + 16);
        *(_OWORD *)&v298[0].__r_.__value_.__l.__data_ = v203;
      }
      siri::dialogengine::File::GetMetadataUnique(v235, (uint64_t)v298, &v295);
      std::string::size_type v204 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
      char v205 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v204 = v295.__r_.__value_.__l.__size_;
      }
      if (v204)
      {
        if ((v298[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v206 = v298;
        }
        else {
          v206 = (std::string *)v298[0].__r_.__value_.__r.__words[0];
        }
        unsigned int v207 = strlen((const char *)v206);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v206, v207);
        if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v208 = &v295;
        }
        else {
          char v208 = (std::string *)v295.__r_.__value_.__r.__words[0];
        }
        unsigned int v209 = strlen((const char *)v208);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v208, v209);
        char v205 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
      }
      if (v205 < 0) {
        operator delete(v295.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v298[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v298[0].__r_.__value_.__l.__data_);
      }
    }
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(&v263);
    v298[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v275;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v298);
    long long v10 = v243;
    v84 = v187;
  }
  if (v75)
  {
    std::string v210 = (siri::dialogengine::TraceWriter *)*((void *)v75 + 431);
    v211 = (std::__shared_weak_count *)*((void *)v75 + 432);
    if (v211) {
      atomic_fetch_add_explicit(&v211->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(unsigned char *)v210)
    {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(&v263, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v263, (uint64_t)"traceOutputPath", 0xFu);
      siri::dialogengine::TraceWriter::GetTracePath(v210, v298);
      long long v212 = (v298[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? v298
           : (std::string *)v298[0].__r_.__value_.__r.__words[0];
      unsigned int v213 = strlen((const char *)v212);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v263, (uint64_t)v212, v213);
      if (SHIBYTE(v298[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v298[0].__r_.__value_.__l.__data_);
      }
    }
    if (v211) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v211);
    }
    long long v214 = *(_OWORD *)((char *)v75 + 760);
    *(_OWORD *)&v298[0].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v75 + 744);
    *(_OWORD *)&v298[0].__r_.__value_.__r.__words[2] = v214;
    *(_OWORD *)&v298[1].__r_.__value_.__r.__words[1] = *(_OWORD *)((char *)v75 + 776);
    siri::dialogengine::ElapsedTimer::CalculateElapsedWallMilliseconds((siri::dialogengine::ElapsedTimer *)v298);
    if (*(double *)&v298[0].__r_.__value_.__r.__words[2] != -1.0 && !v298[1].__r_.__value_.__s.__data_[16]) {
      siri::dialogengine::GetCurrentThreadMillisecondTime((siri::dialogengine *)v298[0].__r_.__value_.__l.__data_);
    }
    siri::dialogengine::LogCoreAnalyticsCatExecutionTimeEvent();
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(&v263);
  uint64_t String = (char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString(&v270);
  std::string::basic_string[abi:ne180100]<0>(v217, String);
  if (v84) {
    operator delete(v84);
  }
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)p_size);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&v270);
  v298[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v296;
  std::vector<std::vector<siri::dialogengine::SpeakableString>>::__destroy_vector::operator()[abi:ne180100]((void ***)v298);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  v298[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v290;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v298);
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v291.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v292.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v293.__r_.__value_.__l.__data_);
  }
}

void sub_1C5E2AC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52)
{
  if (SLOBYTE(STACK[0x667]) < 0) {
    operator delete((void *)STACK[0x650]);
  }
  if (SLOBYTE(STACK[0x687]) < 0) {
    operator delete((void *)STACK[0x670]);
  }
  if (STACK[0x2E8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2E8]);
  }
  if (SLOBYTE(STACK[0x6A7]) < 0) {
    operator delete((void *)STACK[0x690]);
  }
  STACK[0x690] = (unint64_t)&STACK[0x350];
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x690]);
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&STACK[0x3A0]);
  if (SLOBYTE(STACK[0x5A7]) < 0) {
    operator delete((void *)STACK[0x590]);
  }
  if (a52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a52);
  }
  STACK[0x350] = (unint64_t)&STACK[0x5B0];
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x350]);
  if (SLOBYTE(STACK[0x5E7]) < 0) {
    operator delete((void *)STACK[0x5D0]);
  }
  if (SLOBYTE(STACK[0x607]) < 0) {
    operator delete((void *)STACK[0x5F0]);
  }
  if (SLOBYTE(STACK[0x627]) < 0) {
    operator delete((void *)STACK[0x610]);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::HasPreloadBeenCalled(siri::dialogengine *this)
{
  siri::dialogengine::GetPreloadStatusMutex(this);
  std::mutex::lock(&siri::dialogengine::GetPreloadStatusMutex(void)::sMutex);
  uint64_t v1 = siri::dialogengine::GetPreloadStatus(void)::sPreloadHasBeenCalled;
  std::mutex::unlock(&siri::dialogengine::GetPreloadStatusMutex(void)::sMutex);
  return v1;
}

void *std::vector<siri::dialogengine::SpeakableString>::__init_with_size[abi:ne180100]<siri::dialogengine::SpeakableString*,siri::dialogengine::SpeakableString*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x186186186186187) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = result;
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(a4);
    uint64_t v7 = result;
    void *v6 = result;
    v6[1] = result;
    v6[2] = &result[21 * v8];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = siri::dialogengine::SpeakableString::SpeakableString((std::string *)&v7[v9 / 8], (const siri::dialogengine::SpeakableString *)(a2 + v9));
        v9 += 168;
      }
      while (a2 + v9 != a3);
      uint64_t v7 = (void *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1C5E2B548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void siri::dialogengine::NodeVectorDialogFilterAdapter::~NodeVectorDialogFilterAdapter(siri::dialogengine::NodeVectorDialogFilterAdapter *this)
{
  *(void *)this = &unk_1F21239B8;
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*((void **)this + 6));
  os_signpost_id_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F21239B8;
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*((void **)this + 6));
  os_signpost_id_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C8796D70);
}

void *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::RawValue(void **a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("RawValue", "prettywriter.h", 202, "json != 0");
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1, 5);
  uint64_t result = *a1;
  if ((*a1)[4] - (*a1)[3] < a3)
  {
    uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(result, a3);
    if (!a3) {
      return result;
    }
  }
  else if (!a3)
  {
    return result;
  }
  unint64_t v7 = 0;
  do
  {
    char v8 = *(unsigned char *)(a2 + v7);
    if (!v8) {
      __assert_rtn("WriteRawValue", "writer.h", 463, "is.Peek() != '\\0'");
    }
    uint64_t result = (void *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>((uint64_t)*a1, 1);
    *(unsigned char *)uint64_t result = v8;
    ++v7;
  }
  while (v7 < a3);
  return result;
}

void std::vector<std::vector<siri::dialogengine::SpeakableString>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  os_signpost_id_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::vector<siri::dialogengine::SpeakableString>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v6 = v4;
    std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void siri::dialogengine::GetPreloadStatusMutex(siri::dialogengine *this)
{
  {
    __cxa_atexit(MEMORY[0x1E4FBA268], &siri::dialogengine::GetPreloadStatusMutex(void)::sMutex, &dword_1C5C1E000);
  }
}

void siri::dialogengine::ReportPreloadHasBeenCalled(siri::dialogengine *this)
{
  siri::dialogengine::GetPreloadStatusMutex(this);
  std::mutex::lock(&siri::dialogengine::GetPreloadStatusMutex(void)::sMutex);
  siri::dialogengine::GetPreloadStatus(void)::sPreloadHasBeenCalled = 1;
  std::mutex::unlock(&siri::dialogengine::GetPreloadStatusMutex(void)::sMutex);
}

void sub_1C5E2B9EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E2BB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C5E2BBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E2BD98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E2BE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DECompressWriter;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C5E2BF54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E2BFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E2C0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C5E2C264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E2C30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DEDecompressWriter;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C5E2C408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkVariable::Expand(siri::dialogengine::ChunkVariable *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2)
  {
    *(void *)(a3 + 160) = 0;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }
  uint64_t v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "inflect");
  siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)__p, &v102);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "semanticConcept");
  siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)__p, &__str);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "transform");
  siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)__p, &v100);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  siri::dialogengine::ResolveValue((uint64_t **)v5, (const void **)this + 25, 0, (uint64_t)&v102, (uint64_t)&__str, (uint64_t *)&lpsrc);
  if (!lpsrc)
  {
    *(void *)(a3 + 160) = 0;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    goto LABEL_289;
  }
  LOBYTE(v95[0]) = 0;
  char v97 = 0;
  siri::dialogengine::ResolveType(v95, (uint64_t)v5, (uint64_t)this + 200, 1, (uint64_t)&v94);
  (*(void (**)(std::string *__return_ptr))(*(void *)lpsrc + 56))(&v87);
  if (v97)
  {
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v86, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v86 = __s;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v86, "");
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size) {
    std::string::operator=(&v86, &__str);
  }
  char v8 = v99;
  v85[0] = lpsrc;
  v85[1] = v99;
  if (v99) {
    atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char ShouldGround = siri::dialogengine::ChunkVariable::ShouldGround((uint64_t)this, (uint64_t **)v5, (uint64_t)v85, &v87);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if ((ShouldGround & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    siri::dialogengine::SpeakableString::SpeakableString(a3, (uint64_t)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    goto LABEL_269;
  }
  std::string::size_type v62 = (std::string *)a3;
  if (lpsrc)
  {
    if (v10)
    {
      unsigned int v11 = v10;
      if (*((void *)v10 + 10) != *((void *)v10 + 9))
      {
        memset(&v74, 0, sizeof(v74));
        memset(__p, 0, sizeof(__p));
        *(_OWORD *)&v75.__r_.__value_.__r.__words[1] = 0u;
        memset(v76, 0, sizeof(v76));
        long long v77 = 0u;
        memset(v78, 0, sizeof(v78));
        memset(v79, 0, sizeof(v79));
        memset(v80, 0, sizeof(v80));
        long long v81 = 0u;
        memset(v82, 0, sizeof(v82));
        memset(v83, 0, sizeof(v83));
        memset(v84, 0, sizeof(v84));
        std::string::basic_string[abi:ne180100]<0>(&v107, "iterator");
        siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v107, &v66);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        __p[0] = v66;
        *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
        v66.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v107, "formatPhrase");
        siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v107, &v66);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
        std::string v74 = v66;
        *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
        v66.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v107, "index");
        siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v107, &v66);
        if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[1].__r_.__value_.__l.__data_);
        }
        __p[1] = v66;
        *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
        v66.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        std::string::size_type v12 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v12 = __p[0].__r_.__value_.__l.__size_;
        }
        if (v12)
        {
          std::string::size_type v12 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v12 = v74.__r_.__value_.__l.__size_;
          }
          LOBYTE(v12) = v12 != 0;
        }
        v75.__r_.__value_.__s.__data_[0] = v12;
        std::string::basic_string[abi:ne180100]<0>(&v107, "list");
        siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v107, &v66);
        if ((v76[7] & 0x80000000) != 0) {
          operator delete((void *)v75.__r_.__value_.__l.__size_);
        }
        *(_OWORD *)&v75.__r_.__value_.__r.__words[1] = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
        *(void *)std::string v76 = *((void *)&v66.__r_.__value_.__l + 2);
        *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
        v66.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v107, "beforefirst");
        siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v107, &v66);
        if ((v76[31] & 0x80000000) != 0) {
          operator delete(*(void **)&v76[8]);
        }
        *(std::string *)&v76[8] = v66;
        *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
        v66.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v107, "afterfirst");
        siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v107, &v66);
        if ((v78[7] & 0x80000000) != 0) {
          operator delete((void *)v77);
        }
        long long v77 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
        *(void *)std::string v78 = *((void *)&v66.__r_.__value_.__l + 2);
        *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
        v66.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v107, "separator");
        siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v107, &v66);
        if ((v78[31] & 0x80000000) != 0) {
          operator delete(*(void **)&v78[8]);
        }
        *(std::string *)&v78[8] = v66;
        *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
        v66.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v107, "beforelast");
        siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v107, &v66);
        uint64_t v3 = v79;
        if (SHIBYTE(v79[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79[0].__r_.__value_.__l.__data_);
        }
        v79[0] = v66;
        *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
        v66.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v107, "afterlast");
        siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v107, &v66);
        if (SHIBYTE(v79[1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79[1].__r_.__value_.__l.__data_);
        }
        v79[1] = v66;
        *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
        v66.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v107, "itemprefix");
        siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v107, &v66);
        if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80[0].__r_.__value_.__l.__data_);
        }
        v80[0] = v66;
        *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
        v66.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v107, "itemsuffix");
        siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v107, &v66);
        if (SHIBYTE(v80[1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80[1].__r_.__value_.__l.__data_);
        }
        v80[1] = v66;
        *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
        v66.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v107, "itemformat");
        siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v107, &v66);
        if (SHIBYTE(v82[0]) < 0) {
          operator delete((void *)v81);
        }
        long long v81 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
        v82[0] = *((void *)&v66.__r_.__value_.__l + 2);
        *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
        v66.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        std::string::operator=(&v83[1], &v100);
        std::string::operator=((std::string *)&v82[1], &v86);
        std::string::operator=(v83, &v102);
        std::string::operator=(v84, (const std::string *)((char *)this + 200));
        std::string::operator=(&v84[1], &v94);
        siri::dialogengine::VariableArray::Iterate(v11, v5, (siri::dialogengine::FormatAttributes *)__p, (uint64_t)&v107);
        memset(&v106, 0, sizeof(v106));
        if (!v75.__r_.__value_.__s.__data_[0])
        {
          std::string::size_type v13 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v13 = v86.__r_.__value_.__l.__size_;
          }
          if (!v13)
          {
            siri::dialogengine::SemanticFeatureConstraint::FromString((uint64_t)v5, (unsigned __int8 *)&v102, &v66);
            std::vector<siri::dialogengine::SemanticFeatureConstraint>::__vdeallocate((void **)&v106.__r_.__value_.__l.__data_);
            std::string v106 = v66;
            memset(&v66, 0, sizeof(v66));
            v104[0] = (void **)&v66;
            std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100](v104);
          }
        }
        siri::dialogengine::FormatList(v5, (siri::dialogengine::Context *)&v107, (uint64_t)&v75.__r_.__value_.__l.__size_, (uint64_t)&v76[8], (uint64_t)&v77, (uint64_t)&v78[8], (uint64_t)v79, (uint64_t)&v79[1], (uint64_t)&v66, (uint64_t)v80, (uint64_t)&v80[1], (long long **)&v106);
        std::string::operator=(&v87, &v66);
        std::string::operator=(&v88, &v67);
        std::string::operator=(&v89, &v68);
        std::string::operator=(&v90, &v69);
        std::string::operator=(&v91, &v70);
        std::string::operator=(&v92, &v71);
        std::string::operator=(&v93, &v72);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v72.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v69.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v68.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v67.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
        std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
        v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v107;
        std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
        siri::dialogengine::FormatAttributes::~FormatAttributes((void **)&__p[0].__r_.__value_.__l.__data_);
      }
      char v14 = 1;
      goto LABEL_151;
    }
  }
  std::string::size_type v15 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v15 = v86.__r_.__value_.__l.__size_;
  }
  if (!v15)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "number");
    siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)__p, &v66);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    std::string::size_type v16 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v16 = v66.__r_.__value_.__l.__size_;
    }
    if (v16)
    {
      if (lpsrc
      {
        siri::dialogengine::FormatNumber(v5, (uint64_t)v17, &v66, (uint64_t)__p);
        siri::dialogengine::SpeakableString::operator=(&v87, __p);
        siri::dialogengine::SpeakableString::~SpeakableString((void **)&__p[0].__r_.__value_.__l.__data_);
      }
      else
      {
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v107, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
        }
        else {
          std::string v107 = v87;
        }
        siri::dialogengine::FormatNumber(v5, &v107, &v66, (uint64_t)__p);
        siri::dialogengine::SpeakableString::operator=(&v87, __p);
        siri::dialogengine::SpeakableString::~SpeakableString((void **)&__p[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
      }
    }
    siri::dialogengine::SemanticFeatureConstraint::FromString((uint64_t)v5, (unsigned __int8 *)&v102, &v107);
    if (v107.__r_.__value_.__r.__words[0] == v107.__r_.__value_.__l.__size_) {
      goto LABEL_148;
    }
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v100.__r_.__value_.__l.__size_ != 7) {
        goto LABEL_131;
      }
      uint64_t v18 = (std::string *)v100.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) != 7) {
        goto LABEL_131;
      }
      uint64_t v18 = &v100;
    }
    int data = (int)v18->__r_.__value_.__l.__data_;
    int v20 = *(_DWORD *)((char *)v18->__r_.__value_.__r.__words + 3);
    if (data == 1852797552 && v20 == 1853189998)
    {
      BOOL v22 = 1;
LABEL_134:
      siri::dialogengine::InflectDialog(v5, (siri::dialogengine::Context *)&v107, (uint64_t)&v87, v22, __p);
      std::string::operator=(&v87, __p);
      std::string::operator=(&v88, &__p[1]);
      std::string::operator=(&v89, &v74);
      std::string::operator=(&v90, &v75);
      std::string::operator=(&v91, (const std::string *)v76);
      std::string::operator=(&v92, (const std::string *)&v76[24]);
      std::string::operator=(&v93, (const std::string *)v78);
      if ((v78[23] & 0x80000000) != 0) {
        operator delete(*(void **)v78);
      }
      if (SHIBYTE(v77) < 0) {
        operator delete(*(void **)&v76[24]);
      }
      if ((v76[23] & 0x80000000) != 0) {
        operator delete(*(void **)v76);
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[1].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
LABEL_148:
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v107;
      std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      goto LABEL_150;
    }
LABEL_131:
    siri::dialogengine::ResolveType(v95, (uint64_t)v5, (uint64_t)this + 200, 0, (uint64_t)__p);
    BOOL v22 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "dialog.Pronoun");
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    goto LABEL_134;
  }
LABEL_150:
  char v14 = 0;
LABEL_151:
  std::__optional_copy_base<siri::dialogengine::ObjectProperty,false>::__optional_copy_base[abi:ne180100]((siri::dialogengine::ObjectProperty *)v64, (const siri::dialogengine::ObjectProperty *)v95);
  if (*((char *)this + 223) < 0) {
    std::string::__init_copy_ctor_external(__p, *((const std::string::value_type **)this + 25), *((void *)this + 26));
  }
  else {
    __p[0] = *(std::string *)((char *)this + 200);
  }
  siri::dialogengine::StringSplit((unsigned __int8 *)__p, ".", &v66);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::string::size_type v24 = v66.__r_.__value_.__l.__size_;
  unint64_t v23 = (long long *)v66.__r_.__value_.__r.__words[0];
  if (v66.__r_.__value_.__r.__words[0] == v66.__r_.__value_.__l.__size_) {
    goto LABEL_220;
  }
  char v61 = v14;
  unint64_t v25 = 0;
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  v80[0].__r_.__value_.__s.__data_[16] = 0;
  do
  {
    memset(&v106, 0, sizeof(v106));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v106, v23, (long long *)(v24 - 24 * v25), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - 24 * v25 - (void)v23) >> 3));
    std::string::basic_string[abi:ne180100]<0>(v104, ".");
    siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v107, (uint64_t)v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_, (uint64_t)v104);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    v104[0] = (void **)&v106;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v104);
    siri::dialogengine::ResolveType((void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)v5, (uint64_t)&v107, 0, (uint64_t)&v106);
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v106.__r_.__value_.__l.__size_ != 13) {
        goto LABEL_196;
      }
      uint64_t v26 = (std::string *)v106.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) != 13) {
        goto LABEL_196;
      }
      uint64_t v26 = &v106;
    }
    std::string::size_type v27 = v26->__r_.__value_.__r.__words[0];
    uint64_t v28 = *(std::string::size_type *)((char *)v26->__r_.__value_.__r.__words + 5);
    if (v27 == 0x502E676F6C616964 && v28 == 0x6E6F737265502E67)
    {
      siri::dialogengine::Context::FindVariable((uint64_t)v5, (uint64_t)v66.__r_.__value_.__l.__data_, &v103);
      int v30 = v5;
      std::string::size_type v31 = v66.__r_.__value_.__l.__size_;
      std::string::size_type v32 = v66.__r_.__value_.__r.__words[0];
      std::string v33 = (const void *)v103;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66.__r_.__value_.__l.__size_ - v66.__r_.__value_.__r.__words[0]) >> 3)
         - v25 >= 2)
      {
        uint64_t v34 = 24;
        std::string v35 = (const void *)v103;
        unint64_t v36 = 1;
        do
        {
          if (v35)
          {
            uint64_t v38 = std::__tree<std::string>::find<std::string>((uint64_t)(v37 + 72), (const void **)(v32 + v34));
            if (v37 + 80 == (char *)v38)
            {
              long long v39 = 0uLL;
            }
            else
            {
              long long v39 = *(_OWORD *)(v38 + 56);
              uint64_t v40 = *(void *)(v38 + 64);
              if (v40) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
              }
            }
            uint64_t v41 = (std::__shared_weak_count *)*((void *)&v103 + 1);
            long long v103 = v39;
            if (v41)
            {
              uint64_t v63 = v39;
              std::__shared_weak_count::__release_shared[abi:ne180100](v41);
              *(void *)&long long v39 = v63;
            }
            std::string v33 = (const void *)v39;
            std::string::size_type v31 = v66.__r_.__value_.__l.__size_;
            std::string::size_type v32 = v66.__r_.__value_.__r.__words[0];
            std::string v35 = (const void *)v39;
          }
          ++v36;
          v34 += 24;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v32) >> 3) - v25 > v36);
      }
      if (v33)
      {
        uint64_t v5 = v30;
        if (v42)
        {
          std::string v43 = v42;
          std::string::basic_string[abi:ne180100]<0>(v104, "relationship");
          uint64_t v44 = std::__tree<std::string>::find<std::string>((uint64_t)(v43 + 72), (const void **)v104);
          if (v43 + 80 == (char *)v44)
          {
            BOOL v47 = 0;
          }
          else
          {
            uint64_t v46 = *(void *)(v44 + 56);
            uint64_t v45 = *(std::__shared_weak_count **)(v44 + 64);
            if (v45)
            {
              atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
              BOOL v47 = v46 != 0;
              std::__shared_weak_count::__release_shared[abi:ne180100](v45);
            }
            else
            {
              BOOL v47 = v46 != 0;
            }
          }
          if (v105 < 0) {
            operator delete(v104[0]);
          }
        }
        else
        {
          BOOL v47 = 0;
        }
      }
      else
      {
        BOOL v47 = 0;
        uint64_t v5 = v30;
      }
      if (*((void *)&v103 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v103 + 1));
      }
      if (v47)
      {
        LOBYTE(v48) = 0;
        LODWORD(v3) = 1;
        goto LABEL_203;
      }
    }
LABEL_196:
    if (v80[0].__r_.__value_.__s.__data_[16]) {
      BOOL v49 = v78[10] == 0;
    }
    else {
      BOOL v49 = 0;
    }
    int v48 = !v49;
    LODWORD(v3) = v48 & v3;
LABEL_203:
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v106.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v107.__r_.__value_.__l.__data_);
    }
    if ((v48 & 1) == 0)
    {
      int v53 = 1;
      char v14 = v61;
      goto LABEL_217;
    }
    ++v25;
    std::string::size_type v24 = v66.__r_.__value_.__l.__size_;
    unint64_t v23 = (long long *)v66.__r_.__value_.__r.__words[0];
  }
  while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66.__r_.__value_.__l.__size_ - v66.__r_.__value_.__r.__words[0]) >> 3) > v25);
  uint64_t v50 = *((void *)v5 + 63);
  unint64_t v51 = (std::__shared_weak_count *)*((void *)v5 + 64);
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v14 = v61;
  if (!v50
    || (uint64_t Parameter = siri::dialogengine::File::GetParameter(v50, (unsigned __int8 **)v23)) == 0
    || *(unsigned char *)(Parameter + 154))
  {
    int v53 = 0;
    if (!v51) {
      goto LABEL_217;
    }
    goto LABEL_215;
  }
  LODWORD(v3) = 0;
  int v53 = 1;
  if (v51) {
LABEL_215:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
LABEL_217:
  if (v80[0].__r_.__value_.__s.__data_[16]) {
    siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p[0].__r_.__value_.__l.__data_);
  }
  if (!v53) {
LABEL_220:
  }
    LODWORD(v3) = 1;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v65) {
    siri::dialogengine::ObjectProperty::~ObjectProperty(v64);
  }
  if (v3)
  {
    MEMORY[0x1C8796900](&v89, "[[Redacted]]");
    MEMORY[0x1C8796900](&v90, "[[Redacted]]");
  }
  std::string::size_type v54 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
  if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v54 = v100.__r_.__value_.__l.__size_;
  }
  if (v54) {
    char v55 = v14;
  }
  else {
    char v55 = 1;
  }
  if ((v55 & 1) == 0)
  {
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(__p, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
    }
    else {
      __p[0] = v87;
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__p[0].__r_.__value_.__l.__size_) {
        goto LABEL_239;
      }
      operator delete(__p[0].__r_.__value_.__l.__data_);
      goto LABEL_254;
    }
    if (*((unsigned char *)&__p[0].__r_.__value_.__s + 23)) {
      goto LABEL_254;
    }
LABEL_239:
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v100.__r_.__value_.__l.__size_ != 5) {
        goto LABEL_250;
      }
      long long v56 = (std::string *)v100.__r_.__value_.__r.__words[0];
LABEL_244:
      int v57 = (int)v56->__r_.__value_.__l.__data_;
      int v58 = v56->__r_.__value_.__s.__data_[4];
      BOOL v60 = v57 == 1953461617 && v58 == 101;
    }
    else
    {
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) == 5)
      {
        long long v56 = &v100;
        goto LABEL_244;
      }
LABEL_250:
      BOOL v60 = 0;
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (!v60)
    {
LABEL_254:
      siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)&v87, v5, (uint64_t)&v100, __p);
      std::string::operator=(&v87, __p);
      std::string::operator=(&v88, &__p[1]);
      std::string::operator=(&v89, &v74);
      std::string::operator=(&v90, &v75);
      std::string::operator=(&v91, (const std::string *)v76);
      std::string::operator=(&v92, (const std::string *)&v76[24]);
      std::string::operator=(&v93, (const std::string *)v78);
      if ((v78[23] & 0x80000000) != 0) {
        operator delete(*(void **)v78);
      }
      if (SHIBYTE(v77) < 0) {
        operator delete(*(void **)&v76[24]);
      }
      if ((v76[23] & 0x80000000) != 0) {
        operator delete(*(void **)v76);
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[1].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
  }
  siri::dialogengine::SpeakableString::SpeakableString(v62, (const siri::dialogengine::SpeakableString *)&v87);
LABEL_269:
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (v97) {
    siri::dialogengine::ObjectProperty::~ObjectProperty(v95);
  }
LABEL_289:
  if (v99) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v99);
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
}

void sub_1C5E2D880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete((void *)STACK[0x3A0]);
  }
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&STACK[0x3C0]);
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete((void *)STACK[0x468]);
  }
  if (LOBYTE(STACK[0x570])) {
    siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&STACK[0x480]);
  }
  if (STACK[0x580]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x580]);
  }
  if (SLOBYTE(STACK[0x59F]) < 0) {
    operator delete((void *)STACK[0x588]);
  }
  if (*(char *)(v54 - 233) < 0) {
    operator delete(*(void **)(v54 - 256));
  }
  if (*(char *)(v54 - 209) < 0) {
    operator delete(*(void **)(v54 - 232));
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ChunkVariable::ShouldGround(uint64_t a1, uint64_t **a2, uint64_t a3, const std::string *a4)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "ground");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "groundvar");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_11;
  }
  std::string::size_type v9 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = v31.__r_.__value_.__l.__size_;
  }
  if (v9)
  {
LABEL_11:
    long long v29 = 0u;
    memset(&v30, 0, sizeof(v30));
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v23 = 0u;
    memset(v22, 0, sizeof(v22));
    if (a4)
    {
      std::string::operator=((std::string *)v22, a4);
      std::string::operator=((std::string *)&v22[24], a4 + 1);
      std::string::operator=((std::string *)&v24, a4 + 2);
      std::string::operator=((std::string *)((char *)&v25 + 8), a4 + 3);
      std::string::operator=((std::string *)&v27, a4 + 4);
      std::string::operator=((std::string *)((char *)&v28 + 8), a4 + 5);
      std::string::operator=(&v30, a4 + 6);
    }
    else
    {
      siri::dialogengine::ResolveType(0, (uint64_t)a2, a1 + 200, 1, (uint64_t)v41);
      (*(void (**)(std::string *__return_ptr))(**(void **)a3 + 56))(&__p);
      std::string::operator=((std::string *)v22, &__p);
      std::string::operator=((std::string *)&v22[24], &v34);
      std::string::operator=((std::string *)&v24, &v35);
      std::string::operator=((std::string *)((char *)&v25 + 8), &v36);
      std::string::operator=((std::string *)&v27, &v37);
      std::string::operator=((std::string *)((char *)&v28 + 8), &v38);
      std::string::operator=(&v30, &v39);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v42 < 0) {
        operator delete(v41[0]);
      }
    }
    long long v10 = (std::string *)(a1 + 200);
    unsigned int v11 = (char *)&v31.__r_.__value_.__r.__words[2] + 7;
    std::string::size_type v12 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v12 = v31.__r_.__value_.__l.__size_;
    }
    if (v12) {
      long long v10 = &v31;
    }
    else {
      unsigned int v11 = (char *)(a1 + 223);
    }
    if (*v11 < 0)
    {
      p_std::string::size_type size = &v31.__r_.__value_.__l.__size_;
      if (!v12) {
        p_std::string::size_type size = (std::string::size_type *)(a1 + 208);
      }
      std::string::__init_copy_ctor_external(&v21, v10->__r_.__value_.__l.__data_, *p_size);
    }
    else
    {
      std::string v21 = *v10;
    }
    siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)v22, &v19);
    int v14 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v20, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    }
    else {
      std::string v20 = v19;
    }
    std::string::size_type v15 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v15 = v31.__r_.__value_.__l.__size_;
    }
    if (v15)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      std::string::basic_string[abi:ne180100]<0>(v41, "");
      siri::dialogengine::ResolveValue(a2, (const void **)&v31.__r_.__value_.__l.__data_, 1, (uint64_t)&__p, (uint64_t)v41, &v43);
      if (v42 < 0) {
        operator delete(v41[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v43)
      {
        siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)&v31, 1, (uint64_t)v41);
        (*(void (**)(std::string *__return_ptr))(*(void *)v43 + 56))(&__p);
        siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&__p, &v40);
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v20.__r_.__value_.__l.__data_);
        }
        std::string v20 = v40;
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v42 < 0) {
          operator delete(v41[0]);
        }
      }
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
    }
    if (v14 < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    int GroundingMode = siri::dialogengine::GetGroundingMode((unsigned __int8 *)&v32);
    uint64_t ShouldGround = siri::dialogengine::Grounding::ShouldGround((uint64_t)a2, (char *)&v21, (uint64_t)&v20, GroundingMode);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(*((void **)&v28 + 1));
    }
    if (SBYTE7(v28) < 0) {
      operator delete((void *)v27);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete(*((void **)&v25 + 1));
    }
    if (SBYTE7(v25) < 0) {
      operator delete((void *)v24);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(*(void **)&v22[24]);
    }
    if ((v22[23] & 0x80000000) != 0) {
      operator delete(*(void **)v22);
    }
    if ((*((unsigned char *)&v31.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_91;
    }
  }
  else
  {
    uint64_t ShouldGround = 1;
    if ((*((unsigned char *)&v31.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_91:
    }
      operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  return ShouldGround;
}

void sub_1C5E2E194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a60);
  if (*(char *)(v61 - 65) < 0) {
    operator delete(*(void **)(v61 - 88));
  }
  uint64_t v63 = *(std::__shared_weak_count **)(v61 - 56);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v60 < 0) {
    operator delete(a10);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(&a27);
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::FormatAttributes::~FormatAttributes(void **this)
{
  if (*((char *)this + 415) < 0) {
    operator delete(this[49]);
  }
  if (*((char *)this + 391) < 0) {
    operator delete(this[46]);
  }
  if (*((char *)this + 367) < 0) {
    operator delete(this[43]);
  }
  if (*((char *)this + 343) < 0) {
    operator delete(this[40]);
  }
  if (*((char *)this + 319) < 0) {
    operator delete(this[37]);
  }
  if (*((char *)this + 295) < 0) {
    operator delete(this[34]);
  }
  if (*((char *)this + 271) < 0) {
    operator delete(this[31]);
  }
  if (*((char *)this + 247) < 0) {
    operator delete(this[28]);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1C5E2E484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ChunkVariable::Validate(uint64_t a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  if (!a2)
  {
    char v8 = 0;
    return v8 & 1;
  }
  LOBYTE(v135[0]) = 0;
  char v137 = 0;
  uint64_t v6 = (std::string *)(a1 + 200);
  siri::dialogengine::ResolveType(v135, (uint64_t)a2, a1 + 200, 1, (uint64_t)&__s1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "iterator");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v133.__r_.__value_.__l.__size_;
  }
  if (size && !siri::dialogengine::IsArrayType(&__s1))
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v132, "'");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v132.__r_.__value_.__l.__data_);
    }
    char v8 = 0;
  }
  else
  {
    char v8 = 1;
  }
  if (*(char *)(a1 + 223) < 0) {
    uint64_t v11 = *(void *)(a1 + 208);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 223);
  }
  if (!v11) {
    goto LABEL_84;
  }
  size_t v12 = strlen(siri::dialogengine::TYPE_UNKNOWN);
  size_t v13 = v12;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v12 != __s1.__r_.__value_.__l.__size_) {
      goto LABEL_31;
    }
    if (v12 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v12 != HIBYTE(__s1.__r_.__value_.__r.__words[2])) {
      goto LABEL_31;
    }
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_UNKNOWN, v13))
  {
    std::operator+<char>();
    std::string::size_type v15 = std::string::append(&v132, "'");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v132.__r_.__value_.__l.__data_);
    }
    char v8 = 0;
  }
LABEL_31:
  if (!siri::dialogengine::IsPropertyValidForType((BOOL)a2, (unsigned __int8 *)v6))
  {
    std::operator+<char>();
    uint64_t v17 = std::string::append(&v132, "'");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v132.__r_.__value_.__l.__data_);
    }
    char v8 = 0;
  }
  if ((siri::dialogengine::IsPropertyValidForLocale((uint64_t)a2, (unsigned __int8 *)v6) & 1) == 0)
  {
    std::operator+<char>();
    std::string v19 = std::string::append(&v130, "' is not valid for locale '");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v131.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::GetLocale(a2, v21, (uint64_t)&v129);
    if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v22 = &v129;
    }
    else {
      BOOL v22 = (std::string *)v129.__r_.__value_.__r.__words[0];
    }
    if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v129.__r_.__value_.__l.__size_;
    }
    long long v24 = std::string::append(&v131, (const std::string::value_type *)v22, v23);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v132.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    long long v26 = std::string::append(&v132, "'");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v132.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v131.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v130.__r_.__value_.__l.__data_);
    }
    char v8 = 0;
  }
  if (v137)
  {
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = __s;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v28) {
        goto LABEL_84;
      }
    }
    else if (!v28)
    {
      goto LABEL_84;
    }
    std::operator+<char>();
    long long v29 = std::string::append(&v131, "' is deprecated: ");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v132.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v130, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v130 = __s;
    }
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v31 = &v130;
    }
    else {
      std::string v31 = (std::string *)v130.__r_.__value_.__r.__words[0];
    }
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v32 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v32 = v130.__r_.__value_.__l.__size_;
    }
    std::string v33 = std::string::append(&v132, (const std::string::value_type *)v31, v32);
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationWarning((uint64_t)a2, (long long *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v130.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v132.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v131.__r_.__value_.__l.__data_);
    }
    char v8 = 0;
  }
LABEL_84:
  std::string::basic_string[abi:ne180100]<0>(&__p, "number");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v132);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type v35 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
  if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v35 = v132.__r_.__value_.__l.__size_;
  }
  if (v35)
  {
    siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)v6, 1, (uint64_t)&__p);
    size_t v36 = strlen(siri::dialogengine::TYPE_NUMBER);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v36 == __p.__r_.__value_.__l.__size_)
      {
        if (v36 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        std::string v37 = (void *)__p.__r_.__value_.__r.__words[0];
        int v38 = memcmp(__p.__r_.__value_.__l.__data_, siri::dialogengine::TYPE_NUMBER, v36);
        operator delete(v37);
        if (!v38) {
          goto LABEL_103;
        }
      }
      else
      {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else if (v36 == HIBYTE(__p.__r_.__value_.__r.__words[2]) && !memcmp(&__p, siri::dialogengine::TYPE_NUMBER, v36))
    {
LABEL_103:
      memset(&v131, 0, sizeof(v131));
      memset(&v130, 0, sizeof(v130));
      siri::dialogengine::ValidateNumber(a2, (uint64_t)&v132, (uint64_t)&__p);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&v131);
      std::string v131 = __p;
      memset(&__p, 0, sizeof(__p));
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&v130);
      std::string v130 = v128;
      memset(&v128, 0, sizeof(v128));
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
      std::string::size_type v42 = v131.__r_.__value_.__l.__size_;
      uint64_t v41 = (long long *)v131.__r_.__value_.__r.__words[0];
      if (v131.__r_.__value_.__r.__words[0] != v131.__r_.__value_.__l.__size_)
      {
        do
        {
          siri::dialogengine::Context::AddValidationError((uint64_t)a2, v41, a3);
          uint64_t v41 = (long long *)((char *)v41 + 24);
        }
        while (v41 != (long long *)v42);
        char v8 = 0;
      }
      std::string::size_type v44 = v130.__r_.__value_.__l.__size_;
      uint64_t v43 = (long long *)v130.__r_.__value_.__r.__words[0];
      if (v130.__r_.__value_.__r.__words[0] != v130.__r_.__value_.__l.__size_)
      {
        do
        {
          siri::dialogengine::Context::AddValidationWarning((uint64_t)a2, v43, a3);
          uint64_t v43 = (long long *)((char *)v43 + 24);
        }
        while (v43 != (long long *)v44);
        char v8 = 0;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_110;
    }
    std::operator+<char>();
    std::string v39 = std::string::append(&v131, "'");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v131.__r_.__value_.__l.__data_);
    }
    char v8 = 0;
    goto LABEL_103;
  }
LABEL_110:
  std::string::basic_string[abi:ne180100]<0>(&__p, "inflect");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v131);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type v45 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
  if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v45 = v131.__r_.__value_.__l.__size_;
  }
  if (v45)
  {
    siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)v6, 1, (uint64_t)&__p);
    size_t v46 = strlen(siri::dialogengine::TYPE_STRING);
    size_t v47 = v46;
    size_t v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v46 != __p.__r_.__value_.__l.__size_)
      {
        uint64_t v50 = siri::dialogengine::TYPE_NUMBER;
        size_t v51 = strlen(siri::dialogengine::TYPE_NUMBER);
        size_t v48 = __p.__r_.__value_.__l.__size_;
        goto LABEL_128;
      }
      if (v46 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (v46 != HIBYTE(__p.__r_.__value_.__r.__words[2]))
      {
        uint64_t v50 = siri::dialogengine::TYPE_NUMBER;
        size_t v51 = strlen(siri::dialogengine::TYPE_NUMBER);
        goto LABEL_125;
      }
      p_p = &__p;
    }
    if (!memcmp(p_p, siri::dialogengine::TYPE_STRING, v47)) {
      goto LABEL_138;
    }
    uint64_t v50 = siri::dialogengine::TYPE_NUMBER;
    size_t v51 = strlen(siri::dialogengine::TYPE_NUMBER);
    if ((v48 & 0x80) != 0)
    {
      size_t v48 = __p.__r_.__value_.__l.__size_;
LABEL_128:
      if (v51 != v48) {
        goto LABEL_132;
      }
      if (v48 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_131:
      if (memcmp(v52, v50, v48))
      {
LABEL_132:
        if (!siri::dialogengine::IsArrayType(&__p))
        {
          std::operator+<char>();
          int v53 = std::string::append(&v129, "'");
          long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v130.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v130, a3);
          if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v130.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v129.__r_.__value_.__l.__data_);
          }
          char v8 = 0;
        }
      }
LABEL_138:
      siri::dialogengine::SemanticFeatureConstraint::ValidateString(a2, (unsigned __int8 *)&v131, (uint64_t)&v130);
      std::string::size_type v56 = v130.__r_.__value_.__l.__size_;
      std::string::size_type v55 = v130.__r_.__value_.__r.__words[0];
      if (v130.__r_.__value_.__r.__words[0] != v130.__r_.__value_.__l.__size_)
      {
        do
        {
          if (*(char *)(v55 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)v55, *(void *)(v55 + 8));
          }
          else
          {
            long long v57 = *(_OWORD *)v55;
            v129.__r_.__value_.__r.__words[2] = *(void *)(v55 + 16);
            *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v57;
          }
          siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v129, a3);
          if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v129.__r_.__value_.__l.__data_);
          }
          v55 += 24;
        }
        while (v55 != v56);
        char v8 = 0;
      }
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_148;
    }
LABEL_125:
    if (v51 != v48) {
      goto LABEL_132;
    }
    unint64_t v52 = &__p;
    goto LABEL_131;
  }
LABEL_148:
  std::string::basic_string[abi:ne180100]<0>(&__p, "list");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v130);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "beforefirst");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v129);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "afterfirst");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v126);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "separator");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v125);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "beforelast");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v124);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "afterlast");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v123);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "itemprefix");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v122);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "itemsuffix");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "itemformat");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v120);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "formatPhrase");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v119);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type v58 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
  if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v58 = v130.__r_.__value_.__l.__size_;
  }
  if (v58) {
    goto LABEL_201;
  }
  std::string::size_type v59 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v59 = v129.__r_.__value_.__l.__size_;
  }
  if (v59) {
    goto LABEL_201;
  }
  std::string::size_type v60 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v60 = v126.__r_.__value_.__l.__size_;
  }
  if (v60) {
    goto LABEL_201;
  }
  std::string::size_type v61 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v61 = v125.__r_.__value_.__l.__size_;
  }
  if (v61) {
    goto LABEL_201;
  }
  std::string::size_type v62 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
  if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v62 = v124.__r_.__value_.__l.__size_;
  }
  if (v62) {
    goto LABEL_201;
  }
  std::string::size_type v63 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
  if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v63 = v123.__r_.__value_.__l.__size_;
  }
  if (v63) {
    goto LABEL_201;
  }
  std::string::size_type v64 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
  if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v64 = v122.__r_.__value_.__l.__size_;
  }
  if (v64) {
    goto LABEL_201;
  }
  std::string::size_type v65 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v65 = v121.__r_.__value_.__l.__size_;
  }
  if (v65) {
    goto LABEL_201;
  }
  std::string::size_type v66 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
  if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v66 = v120.__r_.__value_.__l.__size_;
  }
  if (v66) {
    goto LABEL_201;
  }
  std::string::size_type v67 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v67 = v133.__r_.__value_.__l.__size_;
  }
  if (v67) {
    goto LABEL_201;
  }
  std::string::size_type v68 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
  if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v68 = v119.__r_.__value_.__l.__size_;
  }
  if (v68)
  {
LABEL_201:
    if (!siri::dialogengine::IsArrayType(&__s1))
    {
      std::operator+<char>();
      std::string v69 = std::string::append(&v118, "'");
      long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, a3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v118.__r_.__value_.__l.__data_);
      }
      char v8 = 0;
    }
  }
  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v71 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v71 = v133.__r_.__value_.__l.__size_;
  }
  std::string::size_type v72 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
  if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v72 = v119.__r_.__value_.__l.__size_;
  }
  if (v71)
  {
    if (v72) {
      goto LABEL_219;
    }
  }
  else if (!v72)
  {
    goto LABEL_219;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Missing 'iterator' or 'formatPhrase' attributes; both of these attributes must be set");
  siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v8 = 0;
LABEL_219:
  std::string::size_type v73 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
  if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v73 = v120.__r_.__value_.__l.__size_;
  }
  if (v73
    && (siri::dialogengine::ValidateArrayItemFormat((uint64_t)a2, &v120, (const void **)&v6->__r_.__value_.__l.__data_) & 1) == 0)
  {
    std::operator+<char>();
    std::string v74 = std::string::append(&v116, "' references unknown type: '");
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v117.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v76 = &v120;
    }
    else {
      std::string v76 = (std::string *)v120.__r_.__value_.__r.__words[0];
    }
    if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v77 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v77 = v120.__r_.__value_.__l.__size_;
    }
    std::string v78 = std::string::append(&v117, (const std::string::value_type *)v76, v77);
    long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    v118.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    uint64_t v80 = std::string::append(&v118, "'");
    long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v118.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v117.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v116.__r_.__value_.__l.__data_);
    }
    char v8 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "transform");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v118);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v118.__r_.__value_.__l.__size_) {
      goto LABEL_250;
    }
  }
  else if (!*((unsigned char *)&v118.__r_.__value_.__s + 23))
  {
    goto LABEL_250;
  }
  if (!siri::dialogengine::IsValidTransformMode(&v118))
  {
    std::operator+<char>();
    v82 = std::string::append(&v117, "'");
    long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v117.__r_.__value_.__l.__data_);
    }
    char v8 = 0;
  }
LABEL_250:
  std::string::basic_string[abi:ne180100]<0>(&__p, "ground");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v117);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type v84 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
  if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v84 = v117.__r_.__value_.__l.__size_;
  }
  if (v84 && !siri::dialogengine::GetGroundingMode((unsigned __int8 *)&v117))
  {
    std::operator+<char>();
    unint64_t v85 = std::string::append(&v115, "': ");
    long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v87 = &v117;
    }
    else {
      std::string v87 = (std::string *)v117.__r_.__value_.__r.__words[0];
    }
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v88 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v88 = v117.__r_.__value_.__l.__size_;
    }
    std::string v89 = std::string::append(&v116, (const std::string::value_type *)v87, v88);
    long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v116.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v115.__r_.__value_.__l.__data_);
    }
    char v8 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "groundvar");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v116);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type v91 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
  if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v91 = v116.__r_.__value_.__l.__size_;
  }
  if (v91)
  {
    siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)&v116, 1, (uint64_t)&__p);
    size_t v92 = strlen(siri::dialogengine::TYPE_UNKNOWN);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v92 != HIBYTE(__p.__r_.__value_.__r.__words[2]) || memcmp(&__p, siri::dialogengine::TYPE_UNKNOWN, v92)) {
        goto LABEL_285;
      }
      goto LABEL_281;
    }
    if (v92 != __p.__r_.__value_.__l.__size_)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_285;
    }
    if (v92 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    std::string v93 = (void *)__p.__r_.__value_.__r.__words[0];
    int v94 = memcmp(__p.__r_.__value_.__l.__data_, siri::dialogengine::TYPE_UNKNOWN, v92);
    operator delete(v93);
    if (!v94)
    {
LABEL_281:
      std::operator+<char>();
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, a3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      char v8 = 0;
    }
  }
LABEL_285:
  std::string::basic_string[abi:ne180100]<0>(&__p, "semanticConcept");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v115);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type v95 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
  if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v95 = v115.__r_.__value_.__l.__size_;
  }
  if (!v95) {
    goto LABEL_301;
  }
  siri::dialogengine::GetLiteralType(v6, &__p);
  size_t v96 = strlen(siri::dialogengine::TYPE_UNKNOWN);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v96 == __p.__r_.__value_.__l.__size_)
    {
      if (v96 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      char v97 = (void *)__p.__r_.__value_.__r.__words[0];
      int v98 = memcmp(__p.__r_.__value_.__l.__data_, siri::dialogengine::TYPE_UNKNOWN, v96);
      operator delete(v97);
      if (v98) {
        goto LABEL_301;
      }
      goto LABEL_297;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else if (v96 == HIBYTE(__p.__r_.__value_.__r.__words[2]) && !memcmp(&__p, siri::dialogengine::TYPE_UNKNOWN, v96))
  {
LABEL_297:
    std::string::basic_string[abi:ne180100]<0>(&__p, "Semantic concepts should be defined in the params file for non-literals, not on the <var> element");
    siri::dialogengine::Context::AddValidationWarning((uint64_t)a2, (long long *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    char v8 = 0;
  }
LABEL_301:
  siri::dialogengine::ValidateVariableVersion((uint64_t)a2, (uint64_t)v6, v113);
  unint64_t v99 = v114;
  if ((v114 & 0x80u) != 0) {
    unint64_t v99 = (unint64_t)v113[1];
  }
  if (v99)
  {
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)v113, a3);
    char v8 = 0;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v111, (const void ***)(a1 + 176));
  std::string v100 = v111;
  if (v111 != (long long *)v112)
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&__p, v100 + 2);
      std::string::basic_string[abi:ne180100]<0>(v107, "var");
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)v107, (uint64_t)&__p, v109);
      if (v108 < 0) {
        operator delete(v107[0]);
      }
      unint64_t v101 = v110;
      unsigned __int8 v102 = v110;
      if ((v110 & 0x80u) != 0) {
        unint64_t v101 = (unint64_t)v109[1];
      }
      if (v101)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)v109, 0);
        char v8 = 0;
        unsigned __int8 v102 = v110;
      }
      if ((v102 & 0x80) != 0) {
        operator delete(v109[0]);
      }
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      long long v103 = (long long *)*((void *)v100 + 1);
      if (v103)
      {
        do
        {
          v104 = v103;
          long long v103 = *(long long **)v103;
        }
        while (v103);
      }
      else
      {
        do
        {
          v104 = (long long *)*((void *)v100 + 2);
          BOOL v105 = *(void *)v104 == (void)v100;
          std::string v100 = v104;
        }
        while (!v105);
      }
      std::string v100 = v104;
    }
    while (v104 != (long long *)v112);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v112[0]);
  if ((char)v114 < 0) {
    operator delete(v113[0]);
  }
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v115.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v116.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v117.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v118.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v119.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v121.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v126.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  if (v137) {
    siri::dialogengine::ObjectProperty::~ObjectProperty(v135);
  }
  return v8 & 1;
}

void sub_1C5E2FA08(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (LOBYTE(STACK[0x368])) {
    siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&STACK[0x278]);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkVariable::~ChunkVariable(void **this)
{
  *this = &unk_1F211E508;
  if (*((char *)this + 247) < 0) {
    operator delete(this[28]);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  *this = &unk_1F21244A0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(this[23]);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 1);
  JUMPOUT(0x1C8796D70);
}

{
  *this = &unk_1F211E508;
  if (*((char *)this + 247) < 0) {
    operator delete(this[28]);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  *this = &unk_1F21244A0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(this[23]);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 1);
}

double siri::dialogengine::ChunkVariable::ChunkVariable(siri::dialogengine::ChunkVariable *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 24) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = (char *)this + 184;
  *(void *)this = &unk_1F211E508;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((unsigned char *)this + 248) = 0;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 24) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = (char *)this + 184;
  *(void *)this = &unk_1F211E508;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((unsigned char *)this + 248) = 0;
  return result;
}

double siri::dialogengine::ChunkVariable::ChunkVariable(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = siri::dialogengine::ChunkText::ChunkText(a1, a2);
  *(void *)uint64_t v2 = &unk_1F211E508;
  double result = 0.0;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(unsigned char *)(v2 + 248) = 0;
  return result;
}

{
  uint64_t v2;
  double result;

  uint64_t v2 = siri::dialogengine::ChunkText::ChunkText(a1, a2);
  *(void *)uint64_t v2 = &unk_1F211E508;
  double result = 0.0;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(unsigned char *)(v2 + 248) = 0;
  return result;
}

uint64_t siri::dialogengine::ChunkVariable::ChunkVariable(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = (void *)siri::dialogengine::ChunkText::ChunkText(a1, a2);
  void *v5 = &unk_1F211E508;
  uint64_t v6 = (std::string *)(v5 + 25);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    v6->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = 0;
  return a1;
}

void sub_1C5E30370(_Unwind_Exception *a1)
{
  siri::dialogengine::ChunkText::~ChunkText(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkVariable::GetName(siri::dialogengine::ChunkVariable *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 223) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 25), *((void *)this + 26));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 27);
  }
}

double siri::dialogengine::ChunkVariable::SetName(uint64_t a1, const std::string *a2)
{
  siri::dialogengine::StringTrim(" \t\n\r", a2, &v5);
  uint64_t v3 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*v3);
  }
  double result = *(double *)&v5.__r_.__value_.__l.__data_;
  *(_OWORD *)uint64_t v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(void *)(a1 + 216) = *((void *)&v5.__r_.__value_.__l + 2);
  return result;
}

void siri::dialogengine::ChunkVariable::GetId(siri::dialogengine::ChunkVariable *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 247) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 28), *((void *)this + 29));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 14);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 30);
  }
}

std::string *siri::dialogengine::ChunkVariable::SetId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 224), a2);
}

uint64_t siri::dialogengine::ChunkVariable::IsOptional(siri::dialogengine::ChunkVariable *this)
{
  return *((unsigned __int8 *)this + 248);
}

uint64_t siri::dialogengine::ChunkVariable::SetOptional(uint64_t this, char a2)
{
  *(unsigned char *)(this + 248) = a2;
  return this;
}

uint64_t siri::dialogengine::WriteParametersXml(siri::dialogengine::File *this, uint64_t a2)
{
  if (!this)
  {
    std::string v5 = "File cannot be null, not writing.";
LABEL_9:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v5, (const char *)a2);
    return 0;
  }
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (!v3)
  {
    std::string v5 = "Path cannot be empty, not writing.";
    goto LABEL_9;
  }
  if (*((char *)this + 55) < 0) {
    std::string::__init_copy_ctor_external(&v83, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else {
    std::string v83 = *(std::string *)((char *)this + 32);
  }
  std::string::size_type size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
  if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v83.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    BOOL v8 = 0;
    if ((*((unsigned char *)&v83.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_16;
    }
LABEL_24:
    operator delete(v83.__r_.__value_.__l.__data_);
    if (v8) {
      goto LABEL_17;
    }
    goto LABEL_25;
  }
  siri::dialogengine::File::GetMetadata(this, (uint64_t)&v82);
  if (v82.__r_.__value_.__r.__words[2])
  {
    BOOL v8 = 0;
  }
  else
  {
    memset(&v81, 0, sizeof(v81));
    std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(&v81, *((void *)this + 22), *((void *)this + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 4));
    BOOL v8 = v81.__r_.__value_.__r.__words[0] == v81.__r_.__value_.__l.__size_;
    std::string::size_type v84 = &v81;
    std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  }
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((void *)v82.__r_.__value_.__l.__size_);
  if ((*((unsigned char *)&v83.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_24;
  }
LABEL_16:
  if (v8)
  {
LABEL_17:
    std::operator+<char>();
    siri::dialogengine::Log::Debug((siri::dialogengine *)&v83);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    return 1;
  }
LABEL_25:
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v9 = (const char *)a2;
  }
  else {
    uint64_t v9 = *(const char **)a2;
  }
  long long v10 = (void **)xmlNewTextWriterFilename(v9, 0);
  std::string::size_type v84 = (std::string *)v10;
  if (!v10)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to create xmlWriter", v11);
    return 0;
  }
  size_t v12 = (xmlTextWriter *)v10;
  xmlTextWriterSetIndent((xmlTextWriterPtr)v10, 1);
  xmlTextWriterSetIndentString(v12, (const xmlChar *)"  ");
  BOOL started = siri::dialogengine::StartXmlDocument(v12, v13);
  if (*((char *)this + 175) < 0) {
    std::string::__init_copy_ctor_external(&v82, *((const std::string::value_type **)this + 19), *((void *)this + 20));
  }
  else {
    std::string v82 = *(std::string *)((char *)this + 152);
  }
  std::string::size_type v15 = std::string::insert(&v82, 0, "urn:apple:names:siri:cat:");
  long long v17 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v83.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v17;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v82.__r_.__value_.__l.__data_);
    if (!started)
    {
LABEL_44:
      BOOL v21 = 0;
      goto LABEL_45;
    }
  }
  else if (!started)
  {
    goto LABEL_44;
  }
  if (!siri::dialogengine::StartXmlElement(v12, (const xmlChar *)"cat", v16)) {
    goto LABEL_44;
  }
  std::string v19 = (v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &v83
      : (std::string *)v83.__r_.__value_.__r.__words[0];
  if (!siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"xmlns", (const xmlChar *)v19, v18)) {
    goto LABEL_44;
  }
  if (*((char *)this + 127) < 0) {
    std::string::__init_copy_ctor_external(&v82, *((const std::string::value_type **)this + 13), *((void *)this + 14));
  }
  else {
    std::string v82 = *(std::string *)((char *)this + 104);
  }
  char v79 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v80 = &v82;
  }
  else {
    uint64_t v80 = (std::string *)v82.__r_.__value_.__r.__words[0];
  }
  if (v80->__r_.__value_.__s.__data_[0])
  {
    BOOL v21 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"id", (const xmlChar *)v80, v20);
    char v79 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  }
  else
  {
    BOOL v21 = 1;
  }
  if (v79 < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
LABEL_45:
  siri::dialogengine::File::GetMetadata(this, (uint64_t)&v82);
  std::string::size_type v23 = v82.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v82.__r_.__value_.__l.__data_ != &v82.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      long long v24 = *(void **)(v23 + 56);
      if (v24 != (void *)(v23 + 64)) {
        break;
      }
LABEL_65:
      std::string v33 = *(std::string **)(v23 + 8);
      if (v33)
      {
        do
        {
          long long v34 = v33;
          std::string v33 = (std::string *)v33->__r_.__value_.__r.__words[0];
        }
        while (v33);
      }
      else
      {
        do
        {
          long long v34 = *(std::string **)(v23 + 16);
          BOOL v32 = v34->__r_.__value_.__r.__words[0] == v23;
          std::string::size_type v23 = (std::string::size_type)v34;
        }
        while (!v32);
      }
      std::string::size_type v23 = (std::string::size_type)v34;
      if (v34 == (std::string *)&v82.__r_.__value_.__r.__words[1]) {
        goto LABEL_71;
      }
    }
    while (1)
    {
      if (!v21 || !siri::dialogengine::StartXmlElement(v12, (const xmlChar *)"meta", v22)) {
        goto LABEL_58;
      }
      long long v26 = (const xmlChar *)(v23 + 32);
      if (*(char *)(v23 + 55) < 0) {
        long long v26 = *(const xmlChar **)(v23 + 32);
      }
      if (!siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"name", v26, v25)) {
        goto LABEL_58;
      }
      std::string::size_type v28 = (const xmlChar *)(v24 + 4);
      if (*((char *)v24 + 55) < 0) {
        std::string::size_type v28 = *(const xmlChar **)v28;
      }
      if (!siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"value", v28, v27)) {
        goto LABEL_58;
      }
      if (xmlTextWriterEndElement(v12) == -1) {
        break;
      }
      BOOL v21 = 1;
LABEL_59:
      long long v30 = (void *)v24[1];
      if (v30)
      {
        do
        {
          std::string v31 = v30;
          long long v30 = (void *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          std::string v31 = (void *)v24[2];
          BOOL v32 = *v31 == (void)v24;
          long long v24 = v31;
        }
        while (!v32);
      }
      long long v24 = v31;
      if (v31 == (void *)(v23 + 64)) {
        goto LABEL_65;
      }
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v29);
LABEL_58:
    BOOL v21 = 0;
    goto LABEL_59;
  }
LABEL_71:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((void *)v82.__r_.__value_.__l.__size_);
  memset(&v82, 0, sizeof(v82));
  std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(&v82, *((void *)this + 22), *((void *)this + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 4));
  long long v35 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
  v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  if ((void)v35 == *((void *)&v35 + 1))
  {
    if (!v21) {
      goto LABEL_213;
    }
  }
  else
  {
    LOBYTE(v37) = v21 && siri::dialogengine::StartXmlElement(v12, (const xmlChar *)"parameters", v36);
    memset(&v82, 0, sizeof(v82));
    std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(&v82, *((void *)this + 22), *((void *)this + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 4));
    std::string::size_type v39 = v82.__r_.__value_.__l.__size_;
    if (v82.__r_.__value_.__r.__words[0] != v82.__r_.__value_.__l.__size_)
    {
      long long v40 = (char *)(v82.__r_.__value_.__r.__words[0] + 207);
      while (1)
      {
        if (!v37 || !siri::dialogengine::StartXmlElement(v12, (const xmlChar *)"parameter", (const char *)v38)) {
          goto LABEL_203;
        }
        if (*(v40 - 176) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(v40 - 199), *(void *)(v40 - 191));
        }
        else
        {
          long long v42 = *(_OWORD *)(v40 - 199);
          v81.__r_.__value_.__r.__words[2] = *(void *)(v40 - 183);
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v42;
        }
        uint64_t v43 = (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v81
            : (std::string *)v81.__r_.__value_.__r.__words[0];
        BOOL v44 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"name", (const xmlChar *)v43, v41);
        BOOL v46 = v44;
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v81.__r_.__value_.__l.__data_);
          if (!v46) {
            goto LABEL_203;
          }
        }
        else if (!v44)
        {
          goto LABEL_203;
        }
        if (*(v40 - 152) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(v40 - 175), *(void *)(v40 - 167));
        }
        else
        {
          long long v47 = *(_OWORD *)(v40 - 175);
          v81.__r_.__value_.__r.__words[2] = *(void *)(v40 - 159);
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v47;
        }
        size_t v48 = (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v81
            : (std::string *)v81.__r_.__value_.__r.__words[0];
        BOOL v49 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"type", (const xmlChar *)v48, v45);
        BOOL v51 = v49;
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v81.__r_.__value_.__l.__data_);
          if (!v51) {
            goto LABEL_203;
          }
        }
        else if (!v49)
        {
          goto LABEL_203;
        }
        if (*(v40 - 128) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(v40 - 151), *(void *)(v40 - 143));
        }
        else
        {
          long long v52 = *(_OWORD *)(v40 - 151);
          v81.__r_.__value_.__r.__words[2] = *(void *)(v40 - 135);
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v52;
        }
        int v38 = (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v81
            : (std::string *)v81.__r_.__value_.__r.__words[0];
        if (v38->__r_.__value_.__s.__data_[0]) {
          break;
        }
        BOOL v53 = 1;
        if ((*((unsigned char *)&v81.__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_109;
        }
LABEL_110:
        if (!v53) {
          goto LABEL_203;
        }
        if (*(v40 - 24) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(v40 - 47), *(void *)(v40 - 39));
        }
        else
        {
          long long v54 = *(_OWORD *)(v40 - 47);
          v81.__r_.__value_.__r.__words[2] = *(void *)(v40 - 31);
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v54;
        }
        if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v38 = &v81;
        }
        else {
          int v38 = (std::string *)v81.__r_.__value_.__r.__words[0];
        }
        if (!v38->__r_.__value_.__s.__data_[0])
        {
          BOOL v55 = 1;
          if ((*((unsigned char *)&v81.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_122;
          }
LABEL_121:
          operator delete(v81.__r_.__value_.__l.__data_);
          goto LABEL_122;
        }
        BOOL v55 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"semanticConcept", (const xmlChar *)v38, v50);
        if ((*((unsigned char *)&v81.__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_121;
        }
LABEL_122:
        if (!v55) {
          goto LABEL_203;
        }
        if (*(v40 - 104) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(v40 - 127), *(void *)(v40 - 119));
        }
        else
        {
          long long v56 = *(_OWORD *)(v40 - 127);
          v81.__r_.__value_.__r.__words[2] = *(void *)(v40 - 111);
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v56;
        }
        char v57 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
        if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v38 = &v81;
        }
        else {
          int v38 = (std::string *)v81.__r_.__value_.__r.__words[0];
        }
        if (v38->__r_.__value_.__s.__data_[0])
        {
          BOOL v58 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"sampleValue", (const xmlChar *)v38, v50);
          char v57 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
        }
        else
        {
          BOOL v58 = 1;
        }
        if (v57 < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        if (!v58) {
          goto LABEL_203;
        }
        if (*(v40 - 56) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(v40 - 79), *(void *)(v40 - 71));
        }
        else
        {
          long long v59 = *(_OWORD *)(v40 - 79);
          v81.__r_.__value_.__r.__words[2] = *(void *)(v40 - 63);
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v59;
        }
        char v60 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
        if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v38 = &v81;
        }
        else {
          int v38 = (std::string *)v81.__r_.__value_.__r.__words[0];
        }
        if (v38->__r_.__value_.__s.__data_[0])
        {
          BOOL v61 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"deprecated", (const xmlChar *)v38, v50);
          char v60 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
        }
        else
        {
          BOOL v61 = 1;
        }
        if (v60 < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        if (!v61) {
          goto LABEL_203;
        }
        if (*v40 < 0)
        {
          std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(v40 - 23), *(void *)(v40 - 15));
        }
        else
        {
          long long v62 = *(_OWORD *)(v40 - 23);
          v81.__r_.__value_.__r.__words[2] = *(void *)(v40 - 7);
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v62;
        }
        char v63 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
        if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v38 = &v81;
        }
        else {
          int v38 = (std::string *)v81.__r_.__value_.__r.__words[0];
        }
        if (v38->__r_.__value_.__s.__data_[0])
        {
          BOOL v64 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"valueFromCat", (const xmlChar *)v38, v50);
          char v63 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
        }
        else
        {
          BOOL v64 = 1;
        }
        if (v63 < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        if (*(v40 - 55)) {
          BOOL v65 = v64;
        }
        else {
          BOOL v65 = 0;
        }
        if (*(v40 - 55)) {
          BOOL v64 = 0;
        }
        if (v65)
        {
          std::string::basic_string[abi:ne180100]<0>(&v81, "true");
          char v67 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          int v38 = (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v81
              : (std::string *)v81.__r_.__value_.__r.__words[0];
          if (v38->__r_.__value_.__s.__data_[0])
          {
            BOOL v64 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"profanityFilter", (const xmlChar *)v38, v66);
            char v67 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          }
          else
          {
            BOOL v64 = 1;
          }
          if (v67 < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
        }
        if (*(v40 - 54)) {
          BOOL v37 = v64;
        }
        else {
          BOOL v37 = 0;
        }
        if (!*(v40 - 54) && v64)
        {
          std::string::basic_string[abi:ne180100]<0>(&v81, "false");
          char v69 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          int v38 = (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v81
              : (std::string *)v81.__r_.__value_.__r.__words[0];
          if (v38->__r_.__value_.__s.__data_[0])
          {
            BOOL v37 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"optional", (const xmlChar *)v38, v68);
            char v69 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          }
          else
          {
            BOOL v37 = 1;
          }
          if (v69 < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
        }
        if (*(v40 - 53))
        {
          if (!v37) {
            goto LABEL_204;
          }
        }
        else
        {
          if (!v37) {
            goto LABEL_204;
          }
          std::string::basic_string[abi:ne180100]<0>(&v81, "false");
          char v71 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v38 = &v81;
          }
          else {
            int v38 = (std::string *)v81.__r_.__value_.__r.__words[0];
          }
          if (v38->__r_.__value_.__s.__data_[0])
          {
            BOOL v72 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"redacted", (const xmlChar *)v38, v70);
            char v71 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          }
          else
          {
            BOOL v72 = 1;
          }
          if (v71 < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          if (!v72) {
            goto LABEL_203;
          }
        }
        if (xmlTextWriterEndElement(v12) == -1)
        {
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v73);
LABEL_203:
          LOBYTE(v37) = 0;
          goto LABEL_204;
        }
        LOBYTE(v37) = 1;
LABEL_204:
        std::string v74 = v40 + 129;
        v40 += 336;
        if (v74 == (char *)v39) {
          goto LABEL_205;
        }
      }
      BOOL v53 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"description", (const xmlChar *)v38, v50);
      if ((*((unsigned char *)&v81.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_110;
      }
LABEL_109:
      operator delete(v81.__r_.__value_.__l.__data_);
      goto LABEL_110;
    }
LABEL_205:
    v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
    std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
    if (!v37) {
      goto LABEL_213;
    }
    if (xmlTextWriterFullEndElement(v12) == -1) {
      goto LABEL_210;
    }
  }
  if (xmlTextWriterFullEndElement(v12) == -1)
  {
LABEL_210:
    std::string v76 = "Error ending element.";
LABEL_212:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v76, v75);
LABEL_213:
    uint64_t v6 = 0;
    goto LABEL_214;
  }
  if (xmlTextWriterEndDocument(v12) == -1)
  {
    std::string v76 = "Error while Ending Document.";
    goto LABEL_212;
  }
  uint64_t v6 = 1;
LABEL_214:
  xmlTextWriterFlush(v12);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  std::string::size_type v77 = (xmlTextWriter *)v84;
  std::string::size_type v84 = 0;
  if (v77) {
    xmlFreeTextWriter(v77);
  }
  return v6;
}

void sub_1C5E30EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::string __p = &a18;
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100](&__p);
  if (a30 < 0) {
    operator delete(a25);
  }
  std::unique_ptr<_xmlTextWriter,siri::dialogengine::xmlTextWriterDeleter>::reset[abi:ne180100]((xmlTextWriter **)(v30 - 88));
  _Unwind_Resume(a1);
}

void std::unique_ptr<_xmlTextWriter,siri::dialogengine::xmlTextWriterDeleter>::reset[abi:ne180100](xmlTextWriter **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    xmlFreeTextWriter(v2);
  }
}

uint64_t siri::dialogengine::WriteLocaleXml(uint64_t a1, char *uri)
{
  uint64_t v2 = a1;
  if (!a1)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"File cannot be null, not writing.", uri);
    return v2;
  }
  if (uri[23] < 0)
  {
    if (!*((void *)uri + 1))
    {
LABEL_11:
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Path cannot be empty, not writing.", uri);
      return 0;
    }
    urstd::string::size_type i = *(char **)uri;
  }
  else if (!uri[23])
  {
    goto LABEL_11;
  }
  uint64_t v3 = xmlNewTextWriterFilename(uri, 0);
  std::string v87 = v3;
  if (!v3)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to create xmlWriter", v4);
    return 0;
  }
  std::string v5 = v3;
  xmlTextWriterSetIndent(v3, 1);
  xmlTextWriterSetIndentString(v5, (const xmlChar *)"  ");
  BOOL started = siri::dialogengine::StartXmlDocument(v5, v6);
  if (*(char *)(v2 + 175) < 0) {
    std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)(v2 + 152), *(void *)(v2 + 160));
  }
  else {
    std::string v89 = *(std::string *)(v2 + 152);
  }
  BOOL v8 = std::string::insert(&v89, 0, "urn:apple:names:siri:cat:");
  long long v10 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t v86 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)unint64_t v85 = v10;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v89.__r_.__value_.__l.__data_);
    if (!started) {
      goto LABEL_49;
    }
  }
  else if (!started)
  {
    goto LABEL_49;
  }
  if (siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"cat", v9))
  {
    size_t v12 = v86 >= 0 ? (const xmlChar *)v85 : (const xmlChar *)v85[0];
    if (siri::dialogengine::WriteXmlAttribute(v5, (const xmlChar *)"xmlns", v12, v11))
    {
      if (*(char *)(v2 + 127) < 0) {
        std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)(v2 + 104), *(void *)(v2 + 112));
      }
      else {
        std::string v89 = *(std::string *)(v2 + 104);
      }
      char v14 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v15 = &v89;
      }
      else {
        std::string::size_type v15 = (std::string *)v89.__r_.__value_.__r.__words[0];
      }
      if (v15->__r_.__value_.__s.__data_[0])
      {
        BOOL v16 = siri::dialogengine::WriteXmlAttribute(v5, (const xmlChar *)"id", (const xmlChar *)v15, v13);
        char v14 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
      }
      else
      {
        BOOL v16 = 1;
      }
      if (v14 < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (v16)
      {
        if (*(char *)(v2 + 151) < 0) {
          std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)(v2 + 128), *(void *)(v2 + 136));
        }
        else {
          std::string v89 = *(std::string *)(v2 + 128);
        }
        char v17 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v18 = &v89;
        }
        else {
          long long v18 = (std::string *)v89.__r_.__value_.__r.__words[0];
        }
        if (v18->__r_.__value_.__s.__data_[0])
        {
          BOOL v19 = siri::dialogengine::WriteXmlAttribute(v5, (const xmlChar *)"locale", (const xmlChar *)v18, v13);
          char v17 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
        }
        else
        {
          BOOL v19 = 1;
        }
        if (v17 < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        if (v19)
        {
          BOOL v20 = xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") != -1;
          goto LABEL_50;
        }
      }
    }
  }
LABEL_49:
  BOOL v20 = 0;
LABEL_50:
  siri::dialogengine::File::GetConditions(v2, &v89);
  long long v21 = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
  v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
  if (*((void *)&v21 + 1) == (void)v21) {
    goto LABEL_98;
  }
  BOOL v23 = v20
     && xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") != -1
     && siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"conditions", v22);
  siri::dialogengine::File::GetConditions(v2, &v89);
  std::string::size_type size = v89.__r_.__value_.__l.__size_;
  for (std::string::size_type i = v89.__r_.__value_.__r.__words[0]; i != size; i += 16)
  {
    if (v23 && siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"condition", v24))
    {
      std::string::size_type v28 = *(std::string **)i;
      if (*(char *)(*(void *)i + 119) < 0) {
        std::string::__init_copy_ctor_external(&v92, v28[4].__r_.__value_.__l.__data_, v28[4].__r_.__value_.__l.__size_);
      }
      else {
        std::string v92 = v28[4];
      }
      if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v35 = &v92;
      }
      else {
        long long v35 = (std::string *)v92.__r_.__value_.__r.__words[0];
      }
      BOOL v36 = siri::dialogengine::WriteXmlAttribute(v5, (const xmlChar *)"name", (const xmlChar *)v35, v27);
      BOOL v29 = v36;
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v92.__r_.__value_.__l.__data_);
        if (!v29) {
          goto LABEL_61;
        }
      }
      else if (!v36)
      {
        goto LABEL_61;
      }
      int v38 = *(std::string **)i;
      if (*(char *)(*(void *)i + 143) < 0) {
        std::string::__init_copy_ctor_external(&v92, v38[5].__r_.__value_.__l.__data_, v38[5].__r_.__value_.__l.__size_);
      }
      else {
        std::string v92 = v38[5];
      }
      if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v39 = &v92;
      }
      else {
        std::string::size_type v39 = (std::string *)v92.__r_.__value_.__r.__words[0];
      }
      if (v39->__r_.__value_.__s.__data_[0])
      {
        LOBYTE(v29) = siri::dialogengine::WriteXmlAttribute(v5, (const xmlChar *)"note", (const xmlChar *)v39, v37);
        if ((*((unsigned char *)&v92.__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_92;
        }
      }
      else
      {
        LOBYTE(v29) = 1;
        if ((*((unsigned char *)&v92.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_92:
        }
          operator delete(v92.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      LOBYTE(v29) = 0;
    }
LABEL_61:
    uint64_t v30 = *(std::string **)i;
    memset(&v92, 0, sizeof(v92));
    std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(&v92, (void *)v30[6].__r_.__value_.__l.__data_, (void *)v30[6].__r_.__value_.__l.__size_, (uint64_t)(v30[6].__r_.__value_.__l.__size_ - v30[6].__r_.__value_.__r.__words[0]) >> 4);
    std::string::size_type v33 = v92.__r_.__value_.__l.__size_;
    for (j = (_xmlTextWriter **)v92.__r_.__value_.__r.__words[0]; j != (_xmlTextWriter **)v33; j += 2)
      LOBYTE(v29) = v29 && siri::dialogengine::_WriteConditionEntry(v5, *j, v31);
    std::string::size_type v88 = &v92;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
    if (!v29) {
      goto LABEL_71;
    }
    if (xmlTextWriterEndElement(v5) == -1)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v34);
LABEL_71:
      BOOL v23 = 0;
      continue;
    }
    BOOL v23 = 1;
  }
  v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
  if (v23)
  {
    if (xmlTextWriterFullEndElement(v5) != -1)
    {
      BOOL v20 = 1;
      goto LABEL_98;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v40);
  }
  BOOL v20 = 0;
LABEL_98:
  siri::dialogengine::GroupPhrases::GetPhrases((siri::dialogengine::GroupPhrases *)(v2 + 312), &v89);
  long long v41 = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
  v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
  if (*((void *)&v41 + 1) == (void)v41) {
    goto LABEL_114;
  }
  char v43 = v20
     && xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") != -1
     && siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"phrases", v42);
  siri::dialogengine::GroupPhrases::GetPhrases((siri::dialogengine::GroupPhrases *)(v2 + 312), &v89);
  std::string::size_type v46 = v89.__r_.__value_.__l.__size_;
  for (k = (_xmlTextWriter **)v89.__r_.__value_.__r.__words[0]; k != (_xmlTextWriter **)v46; k += 2)
  {
    if (v43) {
      char v43 = siri::dialogengine::_WriteGroup(v5, *k, v44);
    }
    else {
      char v43 = 0;
    }
  }
  v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
  if (v43)
  {
    if (xmlTextWriterFullEndElement(v5) != -1)
    {
      BOOL v20 = 1;
      goto LABEL_114;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v47);
  }
  BOOL v20 = 0;
LABEL_114:
  BOOL v49 = *(_xmlTextWriter **)(v2 + 224);
  size_t v48 = *(std::__shared_weak_count **)(v2 + 232);
  if (v48)
  {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (v49) {
    int v50 = 0;
  }
  else {
    int v50 = v20;
  }
  if (v49 && v20)
  {
    if (xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") == -1) {
      int v50 = 0;
    }
    else {
      int v50 = siri::dialogengine::_WriteGroup(v5, v49, v51);
    }
  }
  uint64_t v52 = *(void *)(v2 + 296);
  if (v52)
  {
    memset(&v89, 0, sizeof(v89));
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(&v89, *(void **)(v52 + 208), *(void **)(v52 + 216), (uint64_t)(*(void *)(v52 + 216) - *(void *)(v52 + 208)) >> 4);
    long long v53 = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
    if (*((void *)&v53 + 1) != (void)v53)
    {
      BOOL v55 = v50
         && xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") != -1
         && siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"fallback", v54);
      memset(&v89, 0, sizeof(v89));
      std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(&v89, *(void **)(v52 + 208), *(void **)(v52 + 216), (uint64_t)(*(void *)(v52 + 216) - *(void *)(v52 + 208)) >> 4);
      std::string::size_type v57 = v89.__r_.__value_.__l.__size_;
      long long v56 = (const void **)v89.__r_.__value_.__r.__words[0];
      if (v89.__r_.__value_.__r.__words[0] == v89.__r_.__value_.__l.__size_)
      {
        LOBYTE(v60) = v55;
      }
      else
      {
        do
        {
          if (*v56)
          {
            uint64_t v60 = (v58 == 0) & v55;
            if (v58 && v55) {
              uint64_t v60 = siri::dialogengine::_WriteDialog(v5, v58, v59);
            }
          }
          else
          {
            uint64_t v60 = v55;
          }
          v56 += 2;
          BOOL v55 = v60;
        }
        while (v56 != (const void **)v57);
      }
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
      if (v60)
      {
        if (xmlTextWriterFullEndElement(v5) != -1)
        {
          int v50 = 1;
          goto LABEL_144;
        }
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v61);
      }
      int v50 = 0;
    }
  }
LABEL_144:
  uint64_t v63 = *(void *)(v2 + 240);
  long long v62 = *(std::__shared_weak_count **)(v2 + 248);
  if (v62)
  {
    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  if (v63) {
    int v64 = 0;
  }
  else {
    int v64 = v50;
  }
  if (v63 && ((v50 ^ 1) & 1) == 0)
  {
    if (xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") != -1)
    {
      if (siri::dialogengine::VisualRef::IsEmpty((siri::dialogengine::VisualRef *)v63))
      {
LABEL_194:
        int v64 = 1;
        goto LABEL_197;
      }
      if (siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"visual", v65))
      {
        if (*(char *)(v63 + 119) < 0) {
          std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)(v63 + 96), *(void *)(v63 + 104));
        }
        else {
          std::string v89 = *(std::string *)(v63 + 96);
        }
        char v68 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v69 = &v89;
        }
        else {
          char v69 = (std::string *)v89.__r_.__value_.__r.__words[0];
        }
        if (v69->__r_.__value_.__s.__data_[0])
        {
          BOOL v67 = siri::dialogengine::WriteXmlAttribute(v5, (const xmlChar *)"id", (const xmlChar *)v69, v66);
          char v68 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
        }
        else
        {
          BOOL v67 = 1;
        }
        if (v68 < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        BOOL v67 = 0;
      }
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v92, (const void ***)(v63 + 208));
      std::string::size_type v70 = v92.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v92.__r_.__value_.__l.__data_ != &v92.__r_.__value_.__r.__words[1])
      {
        while (1)
        {
          std::pair<std::string const,std::string>::pair[abi:ne180100](&v89, (long long *)(v70 + 32));
          if (!v67 || !siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"param", v71)) {
            goto LABEL_181;
          }
          std::string::size_type v73 = (v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v89
              : (std::string *)v89.__r_.__value_.__r.__words[0];
          if (v73->__r_.__value_.__s.__data_[0]
            && !siri::dialogengine::WriteXmlAttribute(v5, (const xmlChar *)"name", (const xmlChar *)v73, v72))
          {
            goto LABEL_181;
          }
          std::string v74 = v91 >= 0 ? (const xmlChar *)&__p : (const xmlChar *)__p;
          if (xmlTextWriterWriteRaw(v5, v74) == -1) {
            goto LABEL_181;
          }
          if (xmlTextWriterEndElement(v5) == -1) {
            break;
          }
          BOOL v67 = 1;
LABEL_182:
          if (v91 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v89.__r_.__value_.__l.__data_);
          }
          std::string v76 = *(std::string **)(v70 + 8);
          if (v76)
          {
            do
            {
              std::string::size_type v77 = v76;
              std::string v76 = (std::string *)v76->__r_.__value_.__r.__words[0];
            }
            while (v76);
          }
          else
          {
            do
            {
              std::string::size_type v77 = *(std::string **)(v70 + 16);
              BOOL v78 = v77->__r_.__value_.__r.__words[0] == v70;
              std::string::size_type v70 = (std::string::size_type)v77;
            }
            while (!v78);
          }
          std::string::size_type v70 = (std::string::size_type)v77;
          if (v77 == (std::string *)&v92.__r_.__value_.__r.__words[1]) {
            goto LABEL_192;
          }
        }
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v75);
LABEL_181:
        BOOL v67 = 0;
        goto LABEL_182;
      }
LABEL_192:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v92.__r_.__value_.__l.__size_);
      if (v67)
      {
        if (xmlTextWriterEndElement(v5) != -1) {
          goto LABEL_194;
        }
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v79);
      }
    }
    int v64 = 0;
  }
LABEL_197:
  uint64_t v81 = *(void *)(v2 + 256);
  uint64_t v80 = *(std::__shared_weak_count **)(v2 + 264);
  if (v80)
  {
    atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v80);
  }
  if (v81)
  {
    if (!v64
      || xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") == -1
      || !siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"response", v82))
    {
      goto LABEL_210;
    }
    if (xmlTextWriterFullEndElement(v5) == -1) {
      goto LABEL_209;
    }
  }
  else if (!v64)
  {
LABEL_210:
    uint64_t v2 = 0;
    goto LABEL_211;
  }
  if (xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") == -1) {
    goto LABEL_210;
  }
  if (xmlTextWriterFullEndElement(v5) == -1)
  {
LABEL_209:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v83, v85[0], v85[1], v86);
    goto LABEL_210;
  }
  uint64_t v2 = siri::dialogengine::EndXmlDocument(v5, (_xmlTextWriter *)v83);
LABEL_211:
  xmlTextWriterFlush(v5);
  if (SHIBYTE(v86) < 0) {
    operator delete(v85[0]);
  }
  std::string v87 = 0;
  xmlFreeTextWriter(v5);
  return v2;
}

void sub_1C5E31AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, xmlTextWriter *a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<_xmlTextWriter,siri::dialogengine::xmlTextWriterDeleter>::reset[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::_WriteConditionEntry(siri::dialogengine *this, _xmlTextWriter *a2, const siri::dialogengine::ConditionEntry *a3)
{
  switch(*((_DWORD *)a2 + 8))
  {
    case 0:
      if (!siri::dialogengine::StartXmlElement(this, (const xmlChar *)"and", (const char *)a3))
      {
        char v15 = 0;
        goto LABEL_39;
      }
      if (*((char *)a2 + 63) < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
      }
      else {
        std::string __p = *(std::string *)((char *)a2 + 40);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (p_p->__r_.__value_.__s.__data_[0])
      {
        char v15 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"note", (const xmlChar *)p_p, v5);
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_39;
        }
      }
      else
      {
        char v15 = 1;
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_39:
          memset(&__p, 0, sizeof(__p));
          std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(&__p, *((void **)a2 + 8), *((void **)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 4);
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
          std::string::size_type v18 = __p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_) {
            goto LABEL_82;
          }
          while (1)
          {
            BOOL v20 = *(_xmlTextWriter **)v18;
            long long v21 = *(std::__shared_weak_count **)(v18 + 8);
            if (v21) {
              atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v15) {
              break;
            }
            char v15 = 0;
            if (v21) {
              goto LABEL_46;
            }
LABEL_47:
            v18 += 16;
            if (v18 == size) {
              goto LABEL_82;
            }
          }
          char v15 = siri::dialogengine::_WriteConditionEntry(this, v20, v17);
          if (!v21) {
            goto LABEL_47;
          }
LABEL_46:
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          goto LABEL_47;
        }
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_39;
    case 1:
      if (!siri::dialogengine::StartXmlElement(this, (const xmlChar *)"or", (const char *)a3))
      {
        char v15 = 0;
        goto LABEL_56;
      }
      if (*((char *)a2 + 63) < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
      }
      else {
        std::string __p = *(std::string *)((char *)a2 + 40);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v22 = &__p;
      }
      else {
        BOOL v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v22->__r_.__value_.__s.__data_[0])
      {
        char v15 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"note", (const xmlChar *)v22, v10);
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }
      char v15 = 1;
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_55:
      }
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_56:
      memset(&__p, 0, sizeof(__p));
      std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(&__p, *((void **)a2 + 8), *((void **)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 4);
      std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
      std::string::size_type v24 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_) {
        goto LABEL_82;
      }
      while (1)
      {
        long long v26 = *(_xmlTextWriter **)v24;
        long long v27 = *(std::__shared_weak_count **)(v24 + 8);
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v15) {
          break;
        }
        char v15 = 0;
        if (v27) {
          goto LABEL_63;
        }
LABEL_64:
        v24 += 16;
        if (v24 == v25) {
          goto LABEL_82;
        }
      }
      char v15 = siri::dialogengine::_WriteConditionEntry(this, v26, v23);
      if (!v27) {
        goto LABEL_64;
      }
LABEL_63:
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      goto LABEL_64;
    case 2:
      if (!siri::dialogengine::StartXmlElement(this, (const xmlChar *)"not", (const char *)a3))
      {
        char v15 = 0;
        goto LABEL_73;
      }
      if (*((char *)a2 + 63) < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
      }
      else {
        std::string __p = *(std::string *)((char *)a2 + 40);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v28 = &__p;
      }
      else {
        std::string::size_type v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v28->__r_.__value_.__s.__data_[0])
      {
        char v15 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"note", (const xmlChar *)v28, v11);
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_73;
        }
        goto LABEL_72;
      }
      char v15 = 1;
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_72:
      }
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_73:
      memset(&__p, 0, sizeof(__p));
      std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(&__p, *((void **)a2 + 8), *((void **)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 4);
      std::string::size_type v31 = __p.__r_.__value_.__l.__size_;
      std::string::size_type v30 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
      {
        while (1)
        {
          BOOL v32 = *(_xmlTextWriter **)v30;
          std::string::size_type v33 = *(std::__shared_weak_count **)(v30 + 8);
          if (v33) {
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v15) {
            break;
          }
          char v15 = 0;
          if (v33) {
            goto LABEL_80;
          }
LABEL_81:
          v30 += 16;
          if (v30 == v31) {
            goto LABEL_82;
          }
        }
        char v15 = siri::dialogengine::_WriteConditionEntry(this, v32, v29);
        if (!v33) {
          goto LABEL_81;
        }
LABEL_80:
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        goto LABEL_81;
      }
LABEL_82:
      v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
      if (v15) {
        goto LABEL_83;
      }
      return 0;
    case 3:
      BOOL result = siri::dialogengine::StartXmlElement(this, (const xmlChar *)"expression", (const char *)a3);
      if (!result) {
        return result;
      }
      if (*((char *)a2 + 175) < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 19), *((void *)a2 + 20));
      }
      else {
        std::string __p = *(std::string *)((char *)a2 + 152);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v35 = &__p;
      }
      else {
        long long v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      BOOL v36 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"name", (const xmlChar *)v35, v13);
      BOOL v38 = v36;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v38) {
          return 0;
        }
      }
      else if (!v36)
      {
        return 0;
      }
      if (*((char *)a2 + 199) < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 22), *((void *)a2 + 23));
      }
      else {
        std::string __p = *(std::string *)((char *)a2 + 176);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v42 = &__p;
      }
      else {
        long long v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v42->__r_.__value_.__s.__data_[0])
      {
        BOOL v43 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"op", (const xmlChar *)v42, v37);
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_119;
        }
        goto LABEL_118;
      }
      BOOL v43 = 1;
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_118:
      }
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_119:
      if (!v43) {
        return 0;
      }
      if (*((char *)a2 + 223) < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 25), *((void *)a2 + 26));
      }
      else {
        std::string __p = *(std::string *)((char *)a2 + 200);
      }
      char v47 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v48 = &__p;
      }
      else {
        size_t v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v48->__r_.__value_.__s.__data_[0])
      {
        BOOL v49 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"value", (const xmlChar *)v48, v37);
        char v47 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else
      {
        BOOL v49 = 1;
      }
      if (v47 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v49) {
        return 0;
      }
      if (*((char *)a2 + 63) < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
      }
      else {
        std::string __p = *(std::string *)((char *)a2 + 40);
      }
      char v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v45 = &__p;
      }
      else {
        std::string::size_type v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v45->__r_.__value_.__s.__data_[0])
      {
LABEL_127:
        BOOL v46 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"note", (const xmlChar *)v45, v37);
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_129;
        }
        goto LABEL_128;
      }
LABEL_152:
      BOOL v46 = 1;
      if (v44 < 0) {
LABEL_128:
      }
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_129:
      if (!v46) {
        return 0;
      }
LABEL_83:
      if (xmlTextWriterEndElement(this) != -1) {
        return 1;
      }
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v34);
      return 0;
    case 4:
      BOOL result = siri::dialogengine::StartXmlElement(this, (const xmlChar *)"sub-condition", (const char *)a3);
      if (!result) {
        return result;
      }
      if (*((char *)a2 + 175) < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 19), *((void *)a2 + 20));
      }
      else {
        std::string __p = *(std::string *)((char *)a2 + 152);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v39 = &__p;
      }
      else {
        std::string::size_type v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      BOOL v40 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"name", (const xmlChar *)v39, v14);
      BOOL v41 = v40;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v41) {
          return 0;
        }
      }
      else if (!v40)
      {
        return 0;
      }
      if (*((char *)a2 + 63) < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
      }
      else {
        std::string __p = *(std::string *)((char *)a2 + 40);
      }
      char v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v45 = &__p;
      }
      else {
        std::string::size_type v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v45->__r_.__value_.__s.__data_[0]) {
        goto LABEL_127;
      }
      goto LABEL_152;
    default:
      std::string::basic_string[abi:ne180100]<0>(&v51, "Unsupported Condition Entry type:");
      std::to_string(&v50, *((_DWORD *)a2 + 8));
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v6 = &v50;
      }
      else {
        uint64_t v6 = (std::string *)v50.__r_.__value_.__r.__words[0];
      }
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v7 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v7 = v50.__r_.__value_.__l.__size_;
      }
      BOOL v8 = std::string::append(&v51, (const std::string::value_type *)v6, v7);
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      return 0;
  }
}

void sub_1C5E32364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::_WriteGroup(siri::dialogengine *this, _xmlTextWriter *a2, const siri::dialogengine::Group *a3)
{
  if (!a2) {
    goto LABEL_38;
  }
  long long v9 = v8;
  if (v5)
  {
    long long v10 = "all";
    goto LABEL_8;
  }
  if (v6)
  {
    long long v10 = "first";
    goto LABEL_8;
  }
  if (!v7)
  {
    if (v8)
    {
      if (!siri::dialogengine::StartXmlElement(this, (const xmlChar *)"switch", (const char *)a3)) {
        goto LABEL_77;
      }
      goto LABEL_9;
    }
LABEL_38:
    BOOL v16 = "Unrecognized Group node type.";
    goto LABEL_185;
  }
  long long v10 = "random";
LABEL_8:
  if (!siri::dialogengine::StartXmlElement(this, (const xmlChar *)v10, (const char *)a3)) {
    goto LABEL_77;
  }
LABEL_9:
  if (*((char *)a2 + 119) < 0) {
    std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else {
    std::string v66 = *(std::string *)((unsigned char *)a2 + 4);
  }
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v12 = &v66;
  }
  else {
    size_t v12 = (std::string *)v66.__r_.__value_.__r.__words[0];
  }
  if (v12->__r_.__value_.__s.__data_[0])
  {
    BOOL v13 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"id", (const xmlChar *)v12, v11);
    if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_17;
    }
  }
  else
  {
    BOOL v13 = 1;
    if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_17:
      if (!v13) {
        goto LABEL_77;
      }
      goto LABEL_21;
    }
  }
  operator delete(v66.__r_.__value_.__l.__data_);
  if (!v13) {
    goto LABEL_77;
  }
LABEL_21:
  if (*((char *)a2 + 191) < 0) {
    std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)a2 + 21), *((void *)a2 + 22));
  }
  else {
    std::string v66 = *(std::string *)((unsigned char *)a2 + 7);
  }
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v14 = &v66;
  }
  else {
    char v14 = (std::string *)v66.__r_.__value_.__r.__words[0];
  }
  if (v14->__r_.__value_.__s.__data_[0])
  {
    BOOL v15 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"note", (const xmlChar *)v14, v11);
    if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_29;
    }
  }
  else
  {
    BOOL v15 = 1;
    if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_29:
      if (!v15) {
        goto LABEL_77;
      }
      goto LABEL_33;
    }
  }
  operator delete(v66.__r_.__value_.__l.__data_);
  if (!v15) {
    goto LABEL_77;
  }
LABEL_33:
  if (*((char *)a2 + 255) < 0) {
    std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)a2 + 29), *((void *)a2 + 30));
  }
  else {
    std::string v66 = *(std::string *)((char *)a2 + 232);
  }
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v17 = &v66;
  }
  else {
    char v17 = (std::string *)v66.__r_.__value_.__r.__words[0];
  }
  if (!v17->__r_.__value_.__s.__data_[0])
  {
    BOOL v18 = 1;
    if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  BOOL v18 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"phrase", (const xmlChar *)v17, v11);
  if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_45:
  }
    operator delete(v66.__r_.__value_.__l.__data_);
LABEL_46:
  if (v18)
  {
    if (*((char *)a2 + 167) < 0) {
      std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
    }
    else {
      std::string v66 = *(std::string *)((unsigned char *)a2 + 6);
    }
    char v19 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v20 = &v66;
    }
    else {
      BOOL v20 = (std::string *)v66.__r_.__value_.__r.__words[0];
    }
    if (v20->__r_.__value_.__s.__data_[0])
    {
      BOOL v21 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"case", (const xmlChar *)v20, v11);
      char v19 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    }
    else
    {
      BOOL v21 = 1;
    }
    if (v19 < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    if (v21)
    {
      if (*((char *)a2 + 143) < 0) {
        std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
      }
      else {
        std::string v66 = *(std::string *)((unsigned char *)a2 + 5);
      }
      char v22 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v23 = &v66;
      }
      else {
        BOOL v23 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      if (v23->__r_.__value_.__s.__data_[0])
      {
        BOOL v24 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"condition", (const xmlChar *)v23, v11);
        char v22 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      }
      else
      {
        BOOL v24 = 1;
      }
      if (v22 < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if (v24)
      {
        float v25 = *((float *)a2 + 48);
        if (v25 == 1.0)
        {
          long long v26 = (void **)"";
        }
        else
        {
          siri::dialogengine::StringFromDouble((siri::dialogengine *)0xFFFFFFFFLL, (uint64_t)v64);
          if (v65 >= 0) {
            long long v26 = v64;
          }
          else {
            long long v26 = (void **)v64[0];
          }
        }
        if (*(unsigned char *)v26) {
          BOOL v58 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"weight", (const xmlChar *)v26, v11);
        }
        else {
          BOOL v58 = 1;
        }
        if (v25 != 1.0 && v65 < 0) {
          operator delete(v64[0]);
        }
        if (v9) {
          BOOL v27 = 0;
        }
        else {
          BOOL v27 = v58;
        }
        if (v9 && v58)
        {
          if (v9[279] < 0) {
            std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)v9 + 32), *((void *)v9 + 33));
          }
          else {
            std::string v66 = *(std::string *)(v9 + 256);
          }
          char v59 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
          uint64_t v60 = (v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v66
              : (std::string *)v66.__r_.__value_.__r.__words[0];
          if (v60->__r_.__value_.__s.__data_[0])
          {
            BOOL v27 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"value", (const xmlChar *)v60, v11);
            char v59 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
          }
          else
          {
            BOOL v27 = 1;
          }
          if (v59 < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_78;
      }
    }
  }
LABEL_77:
  BOOL v27 = 0;
LABEL_78:
  BOOL v61 = 0;
  long long v62 = 0;
  uint64_t v63 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(&v61, *((void **)a2 + 26), *((void **)a2 + 27), (uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 4);
  BOOL v29 = v61;
  std::string::size_type v28 = v62;
  while (v29 != v28)
  {
    std::string::size_type v30 = *v29;
    if (*v29)
    {
      int v33 = v31 == 0 && v27;
      if (!v31 || !v27 || (v34 = siri::dialogengine::_WriteGroup(this, v31, v32), int v33 = v34, (v30 = *v29) != 0))
      {
        if (v35) {
          int v37 = 0;
        }
        else {
          int v37 = v33;
        }
        if (!v35 || !v33 || (v38 = siri::dialogengine::_WriteDialog(this, v35, v36), int v37 = v38, (v30 = *v29) != 0))
        {
          if (v39) {
            BOOL v27 = 0;
          }
          else {
            BOOL v27 = v37;
          }
          if (!v39 || !v37) {
            goto LABEL_150;
          }
          BOOL v41 = v39;
          if (!siri::dialogengine::StartXmlElement(this, (const xmlChar *)"text", v40)) {
            goto LABEL_148;
          }
          if (v41[119] < 0) {
            std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)v41 + 12), *((void *)v41 + 13));
          }
          else {
            std::string v66 = *(std::string *)(v41 + 4);
          }
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v43 = &v66;
          }
          else {
            BOOL v43 = (std::string *)v66.__r_.__value_.__r.__words[0];
          }
          if (v43->__r_.__value_.__s.__data_[0])
          {
            BOOL v44 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"id", (const xmlChar *)v43, v42);
            if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) == 0) {
              goto LABEL_105;
            }
LABEL_108:
            operator delete(v66.__r_.__value_.__l.__data_);
            if (v44) {
              goto LABEL_109;
            }
LABEL_148:
            xmlTextWriterSetIndent(this, 0);
            BOOL v27 = 0;
LABEL_149:
            xmlTextWriterWriteRaw(this, (const xmlChar *)"\n");
            xmlTextWriterSetIndent(this, 1);
            goto LABEL_150;
          }
          BOOL v44 = 1;
          if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) != 0) {
            goto LABEL_108;
          }
LABEL_105:
          if (!v44) {
            goto LABEL_148;
          }
LABEL_109:
          if (v41[191] < 0) {
            std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)v41 + 21), *((void *)v41 + 22));
          }
          else {
            std::string v66 = *(std::string *)(v41 + 7);
          }
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v45 = &v66;
          }
          else {
            std::string::size_type v45 = (std::string *)v66.__r_.__value_.__r.__words[0];
          }
          if (v45->__r_.__value_.__s.__data_[0])
          {
            BOOL v46 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"note", (const xmlChar *)v45, v42);
            if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) == 0)
            {
LABEL_117:
              if (!v46) {
                goto LABEL_148;
              }
LABEL_121:
              if (v41[143] < 0) {
                std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)v41 + 15), *((void *)v41 + 16));
              }
              else {
                std::string v66 = *(std::string *)(v41 + 5);
              }
              if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                char v47 = &v66;
              }
              else {
                char v47 = (std::string *)v66.__r_.__value_.__r.__words[0];
              }
              if (v47->__r_.__value_.__s.__data_[0])
              {
                BOOL v48 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"condition", (const xmlChar *)v47, v42);
                if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) == 0)
                {
LABEL_129:
                  if (!v48) {
                    goto LABEL_148;
                  }
LABEL_133:
                  if (v41[167] < 0) {
                    std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)v41 + 18), *((void *)v41 + 19));
                  }
                  else {
                    std::string v66 = *(std::string *)(v41 + 6);
                  }
                  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    BOOL v49 = &v66;
                  }
                  else {
                    BOOL v49 = (std::string *)v66.__r_.__value_.__r.__words[0];
                  }
                  if (v49->__r_.__value_.__s.__data_[0])
                  {
                    BOOL v50 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"case", (const xmlChar *)v49, v42);
                    if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) == 0)
                    {
LABEL_141:
                      if (!v50) {
                        goto LABEL_148;
                      }
                      goto LABEL_142;
                    }
                  }
                  else
                  {
                    BOOL v50 = 1;
                    if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) == 0) {
                      goto LABEL_141;
                    }
                  }
                  operator delete(v66.__r_.__value_.__l.__data_);
                  if (!v50) {
                    goto LABEL_148;
                  }
LABEL_142:
                  float v51 = *((float *)v41 + 48);
                  if (v51 == 1.0)
                  {
                    uint64_t v52 = (const xmlChar *)"";
                  }
                  else
                  {
                    siri::dialogengine::StringFromDouble((siri::dialogengine *)0xFFFFFFFFLL, (uint64_t)v79);
                    if (v80 >= 0) {
                      uint64_t v52 = (const xmlChar *)v79;
                    }
                    else {
                      uint64_t v52 = (const xmlChar *)v79[0];
                    }
                  }
                  if (*v52) {
                    BOOL v53 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"weight", v52, v42);
                  }
                  else {
                    BOOL v53 = 1;
                  }
                  if (v51 == 1.0)
                  {
                    xmlTextWriterSetIndent(this, 0);
                    if (v53) {
                      goto LABEL_162;
                    }
                  }
                  else
                  {
                    if (v80 < 0) {
                      operator delete(v79[0]);
                    }
                    xmlTextWriterSetIndent(this, 0);
                    if (!v53) {
                      goto LABEL_180;
                    }
LABEL_162:
                    siri::dialogengine::SpeakableString::SpeakableString(&v66, (const siri::dialogengine::SpeakableString *)(v41 + 208));
                    int v55 = siri::dialogengine::_WriteSpeakableString(this, (_xmlTextWriter *)&v66, v54);
                    if (v78 < 0) {
                      operator delete(__p);
                    }
                    if (v76 < 0) {
                      operator delete(v75);
                    }
                    if (v74 < 0) {
                      operator delete(v73);
                    }
                    if (v72 < 0) {
                      operator delete(v71);
                    }
                    if (v70 < 0) {
                      operator delete(v69);
                    }
                    if (v68 < 0) {
                      operator delete(v67);
                    }
                    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v66.__r_.__value_.__l.__data_);
                    }
                    if (v55)
                    {
                      if (xmlTextWriterEndElement(this) != -1)
                      {
                        BOOL v27 = 1;
                        goto LABEL_149;
                      }
                      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v56);
                    }
                  }
LABEL_180:
                  BOOL v27 = 0;
                  goto LABEL_149;
                }
              }
              else
              {
                BOOL v48 = 1;
                if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) == 0) {
                  goto LABEL_129;
                }
              }
              operator delete(v66.__r_.__value_.__l.__data_);
              if (!v48) {
                goto LABEL_148;
              }
              goto LABEL_133;
            }
          }
          else
          {
            BOOL v46 = 1;
            if ((*((unsigned char *)&v66.__r_.__value_.__s + 23) & 0x80) == 0) {
              goto LABEL_117;
            }
          }
          operator delete(v66.__r_.__value_.__l.__data_);
          if (!v46) {
            goto LABEL_148;
          }
          goto LABEL_121;
        }
        BOOL v27 = v38;
      }
      else
      {
        BOOL v27 = v34;
      }
    }
LABEL_150:
    v29 += 2;
  }
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  if (!v27) {
    return 0;
  }
  if (xmlTextWriterFullEndElement(this) != -1) {
    return 1;
  }
  BOOL v16 = "Error ending element.";
LABEL_185:
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)v16, (const char *)a2, a3);
  return 0;
}

void sub_1C5E32E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::_WriteDialog(siri::dialogengine *this, _xmlTextWriter *a2, const siri::dialogengine::Dialog *a3)
{
  if (!siri::dialogengine::StartXmlElement(this, (const xmlChar *)"dialog", (const char *)a3)) {
    goto LABEL_72;
  }
  if (*((char *)a2 + 119) < 0) {
    std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else {
    std::string v50 = *(std::string *)((unsigned char *)a2 + 4);
  }
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v50;
  }
  else {
    uint64_t v6 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  if (v6->__r_.__value_.__s.__data_[0])
  {
    BOOL v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"id", (const xmlChar *)v6, v5);
    if ((*((unsigned char *)&v50.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_10;
    }
LABEL_13:
    operator delete(v50.__r_.__value_.__l.__data_);
    if (!v7) {
      goto LABEL_73;
    }
    goto LABEL_14;
  }
  BOOL v7 = 1;
  if ((*((unsigned char *)&v50.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_13;
  }
LABEL_10:
  if (!v7) {
    goto LABEL_73;
  }
LABEL_14:
  if (*((char *)a2 + 191) < 0) {
    std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)a2 + 21), *((void *)a2 + 22));
  }
  else {
    std::string v50 = *(std::string *)((unsigned char *)a2 + 7);
  }
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v8 = &v50;
  }
  else {
    BOOL v8 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  if (v8->__r_.__value_.__s.__data_[0])
  {
    BOOL v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"note", (const xmlChar *)v8, v5);
    if ((*((unsigned char *)&v50.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_22;
    }
LABEL_25:
    operator delete(v50.__r_.__value_.__l.__data_);
    if (!v7) {
      goto LABEL_73;
    }
    goto LABEL_26;
  }
  BOOL v7 = 1;
  if ((*((unsigned char *)&v50.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_25;
  }
LABEL_22:
  if (!v7) {
    goto LABEL_73;
  }
LABEL_26:
  if (*((char *)a2 + 143) < 0) {
    std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else {
    std::string v50 = *(std::string *)((unsigned char *)a2 + 5);
  }
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v9 = &v50;
  }
  else {
    long long v9 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  if (v9->__r_.__value_.__s.__data_[0])
  {
    BOOL v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"condition", (const xmlChar *)v9, v5);
    if ((*((unsigned char *)&v50.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  BOOL v7 = 1;
  if ((*((unsigned char *)&v50.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_34:
  }
    operator delete(v50.__r_.__value_.__l.__data_);
LABEL_35:
  if (*((unsigned char *)a2 + 545)) {
    BOOL v10 = v7;
  }
  else {
    BOOL v10 = 0;
  }
  if (*((unsigned char *)a2 + 545)) {
    BOOL v7 = 0;
  }
  if (v10)
  {
    if (*((unsigned char *)a2 + 544)) {
      uint64_t v11 = "true";
    }
    else {
      uint64_t v11 = "false";
    }
    std::string::basic_string[abi:ne180100]<0>(&v50, v11);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v12 = &v50;
    }
    else {
      size_t v12 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if (v12->__r_.__value_.__s.__data_[0])
    {
      BOOL v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"printOnly", (const xmlChar *)v12, v5);
      if ((*((unsigned char *)&v50.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_50;
      }
      goto LABEL_49;
    }
    BOOL v7 = 1;
    if ((*((unsigned char *)&v50.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_49:
    }
      operator delete(v50.__r_.__value_.__l.__data_);
  }
LABEL_50:
  if (*((unsigned char *)a2 + 547))
  {
    if (!v7) {
      goto LABEL_73;
    }
    if (*((unsigned char *)a2 + 546)) {
      BOOL v13 = "true";
    }
    else {
      BOOL v13 = "false";
    }
    std::string::basic_string[abi:ne180100]<0>(&v50, v13);
    char v14 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v15 = &v50;
    }
    else {
      BOOL v15 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if (v15->__r_.__value_.__s.__data_[0])
    {
      BOOL v16 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"spokenOnly", (const xmlChar *)v15, v5);
      char v14 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    }
    else
    {
      BOOL v16 = 1;
    }
    if (v14 < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (v16) {
      goto LABEL_70;
    }
LABEL_72:
    BOOL v7 = 0;
    goto LABEL_73;
  }
  if (!v7) {
    goto LABEL_73;
  }
LABEL_70:
  if (*((char *)a2 + 167) < 0) {
    std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else {
    std::string v50 = *(std::string *)((unsigned char *)a2 + 6);
  }
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v29 = &v50;
  }
  else {
    BOOL v29 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  if (v29->__r_.__value_.__s.__data_[0])
  {
    BOOL v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"case", (const xmlChar *)v29, v5);
    if ((*((unsigned char *)&v50.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_142;
    }
    goto LABEL_141;
  }
  BOOL v7 = 1;
  if ((*((unsigned char *)&v50.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_141:
  }
    operator delete(v50.__r_.__value_.__l.__data_);
LABEL_142:
  if (v7)
  {
    if (*((char *)a2 + 575) < 0) {
      std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)a2 + 69), *((void *)a2 + 70));
    }
    else {
      std::string v50 = *(std::string *)((unsigned char *)a2 + 23);
    }
    char v30 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = &v50;
    }
    else {
      std::string::size_type v31 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if (v31->__r_.__value_.__s.__data_[0])
    {
      BOOL v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"type", (const xmlChar *)v31, v5);
      char v30 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    }
    else
    {
      BOOL v7 = 1;
    }
    if (v30 < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (v7)
    {
      if (*((float *)a2 + 48) == 1.0) {
        goto LABEL_167;
      }
      siri::dialogengine::StringFromDouble((siri::dialogengine *)0xFFFFFFFFLL, (uint64_t)&v50);
      char v32 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v33 = &v50;
      }
      else {
        int v33 = (std::string *)v50.__r_.__value_.__r.__words[0];
      }
      if (v33->__r_.__value_.__s.__data_[0])
      {
        BOOL v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"weight", (const xmlChar *)v33, v5);
        char v32 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      }
      else
      {
        BOOL v7 = 1;
      }
      if (v32 < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
      if (v7)
      {
LABEL_167:
        if (*((char *)a2 + 599) < 0) {
          std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)a2 + 72), *((void *)a2 + 73));
        }
        else {
          std::string v50 = *(std::string *)((unsigned char *)a2 + 24);
        }
        char v34 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v35 = &v50;
        }
        else {
          long long v35 = (std::string *)v50.__r_.__value_.__r.__words[0];
        }
        if (v35->__r_.__value_.__s.__data_[0])
        {
          BOOL v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"keywords", (const xmlChar *)v35, v5);
          char v34 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        }
        else
        {
          BOOL v7 = 1;
        }
        if (v34 < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
      }
    }
  }
LABEL_73:
  siri::dialogengine::SpeakableString::SpeakableString(&v50, (_xmlTextWriter *)((char *)a2 + 208));
  siri::dialogengine::SpeakableString::SpeakableString(&v36, (_xmlTextWriter *)((char *)a2 + 376));
  if (siri::dialogengine::SpeakableString::operator==((unsigned __int8 *)&v36, (unsigned __int8 *)&v50))
  {
    if (!v7) {
      goto LABEL_105;
    }
    int started = siri::dialogengine::_WriteSpeakableString(this, (_xmlTextWriter *)&v50, v17);
  }
  else
  {
    uint64_t v19 = v53;
    if ((v53 & 0x80u) != 0) {
      uint64_t v19 = v52;
    }
    if (v19)
    {
      BOOL v20 = 0;
    }
    else
    {
      std::string::size_type size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v50.__r_.__value_.__l.__size_;
      }
      BOOL v20 = size == 0;
    }
    int started = v20 && v7;
    if (!v20 && v7)
    {
      int started = siri::dialogengine::StartXmlElement(this, (const xmlChar *)"full", (const char *)v17);
      if (started)
      {
        int started = siri::dialogengine::_WriteSpeakableString(this, (_xmlTextWriter *)&v50, v17);
        if (started)
        {
          if (xmlTextWriterEndElement(this) == -1)
          {
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v22);
            int started = 0;
          }
          else
          {
            int started = 1;
          }
        }
      }
    }
    uint64_t v23 = v39;
    if ((v39 & 0x80u) != 0) {
      uint64_t v23 = v38;
    }
    if (v23) {
      goto LABEL_180;
    }
    std::string::size_type v24 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v24 = v36.__r_.__value_.__l.__size_;
    }
    if (v24)
    {
LABEL_180:
      if (!started
        || !siri::dialogengine::StartXmlElement(this, (const xmlChar *)"supporting", (const char *)v17)
        || !siri::dialogengine::_WriteSpeakableString(this, (_xmlTextWriter *)&v36, v25))
      {
        goto LABEL_105;
      }
      if (xmlTextWriterEndElement(this) == -1) {
        goto LABEL_104;
      }
      goto LABEL_102;
    }
  }
  if (started)
  {
LABEL_102:
    if (xmlTextWriterEndElement(this) != -1)
    {
      uint64_t v27 = 1;
      goto LABEL_106;
    }
LABEL_104:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v26);
  }
LABEL_105:
  uint64_t v27 = 0;
LABEL_106:
  if (v49 < 0) {
    operator delete(__p);
  }
  if (v47 < 0) {
    operator delete(v46);
  }
  if (v45 < 0) {
    operator delete(v44);
  }
  if (v43 < 0) {
    operator delete(v42);
  }
  if (v41 < 0) {
    operator delete(v40);
  }
  if ((char)v39 < 0) {
    operator delete(v37);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (v63 < 0) {
    operator delete(v62);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  if (v59 < 0) {
    operator delete(v58);
  }
  if (v57 < 0) {
    operator delete(v56);
  }
  if (v55 < 0) {
    operator delete(v54);
  }
  if ((char)v53 < 0) {
    operator delete(v51);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  return v27;
}

void sub_1C5E33640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::_WriteSpeakableString(siri::dialogengine *this, _xmlTextWriter *a2, const siri::dialogengine::SpeakableString *a3)
{
  if (siri::dialogengine::SpeakableString::SpeakEqualsPrint(a2))
  {
    if (*((char *)a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v7 = xmlTextWriterWriteRaw(this, (const xmlChar *)p_p) != -1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return v7;
  }
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!size)
    {
LABEL_28:
      unsigned int v12 = 1;
      goto LABEL_31;
    }
  }
  else if (!*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
    goto LABEL_28;
  }
  if (siri::dialogengine::StartXmlElement(this, (const xmlChar *)"print", v5))
  {
    if (*((char *)a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v9 = &__p;
    }
    else {
      long long v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v10 = xmlTextWriterWriteRaw(this, (const xmlChar *)v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v10 != -1)
    {
      if (xmlTextWriterEndElement(this) != -1) {
        goto LABEL_28;
      }
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v11);
    }
  }
  unsigned int v12 = 0;
LABEL_31:
  BOOL v13 = (_OWORD *)((char *)a2 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v13;
    __p.__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v14) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v12;
    }
    if (!v14) {
      return v7;
    }
  }
  else
  {
    if (*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v12;
    }
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      return v7;
    }
  }
  if (((v12 ^ 1) & 1) == 0)
  {
    if (siri::dialogengine::StartXmlElement(this, (const xmlChar *)"speak", v5))
    {
      if (*((char *)a2 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v13;
        __p.__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v15 = &__p;
      }
      else {
        BOOL v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v16 = xmlTextWriterWriteRaw(this, (const xmlChar *)v15);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v16 != -1)
      {
        if (xmlTextWriterEndElement(this) != -1) {
          return 1;
        }
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v17);
      }
    }
    return 0;
  }
  return v7;
}

void sub_1C5E33924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void YAML::Scanner::Scanner(uint64_t a1, uint64_t a2)
{
}

{
  YAML::Stream::Stream(a1, a2);
}

void YAML::Scanner::~Scanner(YAML::Scanner *this)
{
  uint64_t v2 = (void **)*((void *)this + 35);
  uint64_t v3 = (void **)*((void *)this + 36);
  *((void *)this + 39) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)*((void *)this + 36);
      uint64_t v2 = (void **)(*((void *)this + 35) + 8);
      *((void *)this + 35) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *((void *)this + 38) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *((void *)this + 35);
    uint64_t v8 = *((void *)this + 36);
    if (v8 != v9) {
      *((void *)this + 36) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  int v10 = (void *)*((void *)this + 34);
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 31);
  if (v11)
  {
    unsigned int v12 = (void *)*((void *)this + 32);
    BOOL v13 = (void *)*((void *)this + 31);
    if (v12 != v11)
    {
      do
      {
        uint64_t v15 = *--v12;
        uint64_t v14 = v15;
        void *v12 = 0;
        if (v15) {
          MEMORY[0x1C8796D70](v14, 0x1020C406E52F545);
        }
      }
      while (v12 != v11);
      BOOL v13 = (void *)*((void *)this + 31);
    }
    *((void *)this + 32) = v11;
    operator delete(v13);
  }
  int v16 = (void **)*((void *)this + 26);
  char v17 = (void **)*((void *)this + 27);
  *((void *)this + 30) = 0;
  unint64_t v18 = (char *)v17 - (char *)v16;
  if ((unint64_t)((char *)v17 - (char *)v16) >= 0x11)
  {
    do
    {
      operator delete(*v16);
      char v17 = (void **)*((void *)this + 27);
      int v16 = (void **)(*((void *)this + 26) + 8);
      *((void *)this + 26) = v16;
      unint64_t v18 = (char *)v17 - (char *)v16;
    }
    while ((unint64_t)((char *)v17 - (char *)v16) > 0x10);
  }
  unint64_t v19 = v18 >> 3;
  if (v19 == 1)
  {
    uint64_t v20 = 256;
    goto LABEL_27;
  }
  if (v19 == 2)
  {
    uint64_t v20 = 512;
LABEL_27:
    *((void *)this + 29) = v20;
  }
  if (v16 != v17)
  {
    do
    {
      BOOL v21 = *v16++;
      operator delete(v21);
    }
    while (v16 != v17);
    uint64_t v23 = *((void *)this + 26);
    uint64_t v22 = *((void *)this + 27);
    if (v22 != v23) {
      *((void *)this + 27) = v22 + ((v23 - v22 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  std::string::size_type v24 = (void *)*((void *)this + 25);
  if (v24) {
    operator delete(v24);
  }
  float v25 = (void **)*((void *)this + 20);
  long long v26 = (void **)*((void *)this + 21);
  *((void *)this + 24) = 0;
  unint64_t v27 = (char *)v26 - (char *)v25;
  if ((unint64_t)((char *)v26 - (char *)v25) >= 0x11)
  {
    do
    {
      operator delete(*v25);
      long long v26 = (void **)*((void *)this + 21);
      float v25 = (void **)(*((void *)this + 20) + 8);
      *((void *)this + 20) = v25;
      unint64_t v27 = (char *)v26 - (char *)v25;
    }
    while ((unint64_t)((char *)v26 - (char *)v25) > 0x10);
  }
  unint64_t v28 = v27 >> 3;
  if (v28 == 1)
  {
    uint64_t v29 = 42;
    goto LABEL_40;
  }
  if (v28 == 2)
  {
    uint64_t v29 = 85;
LABEL_40:
    *((void *)this + 23) = v29;
  }
  if (v25 != v26)
  {
    do
    {
      char v30 = *v25++;
      operator delete(v30);
    }
    while (v25 != v26);
    uint64_t v32 = *((void *)this + 20);
    uint64_t v31 = *((void *)this + 21);
    if (v31 != v32) {
      *((void *)this + 21) = v31 + ((v32 - v31 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  int v33 = (void *)*((void *)this + 19);
  if (v33) {
    operator delete(v33);
  }
  char v34 = (void **)*((void *)this + 13);
  long long v35 = (void **)*((void *)this + 14);
  if (v35 == v34)
  {
    long long v35 = (void **)*((void *)this + 13);
  }
  else
  {
    unint64_t v36 = *((void *)this + 16);
    int v37 = &v34[v36 / 0x33];
    uint64_t v38 = (uint64_t)*v37 + 80 * (v36 % 0x33);
    unint64_t v39 = (unint64_t)v34[(*((void *)this + 17) + v36) / 0x33] + 80 * ((*((void *)this + 17) + v36) % 0x33);
    if (v38 != v39)
    {
      do
      {
        std::allocator<YAML::Token>::destroy[abi:ne180100](v38);
        v38 += 80;
        if (v38 - (void)*v37 == 4080)
        {
          uint64_t v40 = (uint64_t)v37[1];
          ++v37;
          uint64_t v38 = v40;
        }
      }
      while (v38 != v39);
      char v34 = (void **)*((void *)this + 13);
      long long v35 = (void **)*((void *)this + 14);
    }
  }
  *((void *)this + 17) = 0;
  unint64_t v41 = (char *)v35 - (char *)v34;
  if ((unint64_t)((char *)v35 - (char *)v34) >= 0x11)
  {
    do
    {
      operator delete(*v34);
      long long v35 = (void **)*((void *)this + 14);
      char v34 = (void **)(*((void *)this + 13) + 8);
      *((void *)this + 13) = v34;
      unint64_t v41 = (char *)v35 - (char *)v34;
    }
    while ((unint64_t)((char *)v35 - (char *)v34) > 0x10);
  }
  unint64_t v42 = v41 >> 3;
  if (v42 == 1)
  {
    uint64_t v43 = 25;
    goto LABEL_60;
  }
  if (v42 == 2)
  {
    uint64_t v43 = 51;
LABEL_60:
    *((void *)this + 16) = v43;
  }
  if (v34 != v35)
  {
    do
    {
      BOOL v44 = *v34++;
      operator delete(v44);
    }
    while (v34 != v35);
    uint64_t v46 = *((void *)this + 13);
    uint64_t v45 = *((void *)this + 14);
    if (v45 != v46) {
      *((void *)this + 14) = v45 + ((v46 - v45 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  char v47 = (void *)*((void *)this + 12);
  if (v47) {
    operator delete(v47);
  }
  YAML::Stream::~Stream(this);
}

void std::allocator<YAML::Token>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

BOOL YAML::Scanner::empty(YAML::Scanner *this)
{
  return *((void *)this + 17) == 0;
}

void YAML::Scanner::EnsureTokensInQueue(YAML::Scanner *this)
{
  uint64_t v2 = (char *)this + 96;
  while (1)
  {
    while (1)
    {
      if (!*((void *)this + 17)) {
        goto LABEL_5;
      }
      int v3 = *(_DWORD *)(*(void *)(*((void *)this + 13) + 8 * (*((void *)this + 16) / 0x33uLL))
                     + 80 * (*((void *)this + 16) % 0x33uLL));
      if (v3 != 1) {
        break;
      }
      std::deque<YAML::Token>::pop_front((uint64_t)v2);
    }
    if (!v3) {
      return;
    }
LABEL_5:
    if (*((unsigned char *)this + 145)) {
      break;
    }
    YAML::Scanner::ScanNextToken(this);
  }
}

void std::deque<YAML::Token>::pop_front(uint64_t a1)
{
  std::allocator<YAML::Token>::destroy[abi:ne180100](*(void *)(*(void *)(a1 + 8)
                                                               + 8 * (*(void *)(a1 + 32) / 0x33uLL)) + 80 * (*(void *)(a1 + 32) % 0x33uLL));
  int64x2_t v2 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1C615D8D0);
  *(int64x2_t *)(a1 + 32) = v2;
  if (v2.i64[0] >= 0x66uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 51;
  }
}

void YAML::Scanner::ScanNextToken(YAML::Scanner *this)
{
  if (*((unsigned char *)this + 145)) {
    return;
  }
  if (!*((unsigned char *)this + 144))
  {
    YAML::Scanner::StartStream(this);
  }
  YAML::Scanner::ScanToNextToken(this);
  YAML::Scanner::PopIndentToHere(this);
  uint64_t v2 = YAML::Stream::operator BOOL(this);
  if (v2)
  {
    if (!*((_DWORD *)this + 4))
    {
      if (*((void *)this + 8)
        && *(unsigned char *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                    + (*((void *)this + 7) & 0xFFFLL)) == 37)
      {
        YAML::Scanner::ScanDirective(this);
        return;
      }
      YAML::Exp::DocStart((YAML::Exp *)v2);
      *(void *)&long long v16 = 0;
      *((void *)&v16 + 1) = this;
      uint64_t v2 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::DocStart(void)::e, (unint64_t *)&v16);
      if ((v2 & 0x80000000) == 0)
      {
        YAML::Scanner::ScanDocStart(this);
        return;
      }
      if (!*((_DWORD *)this + 4))
      {
        YAML::Exp::DocEnd((YAML::Exp *)v2);
        *(void *)&long long v16 = 0;
        *((void *)&v16 + 1) = this;
        uint64_t v2 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::DocEnd(void)::e, (unint64_t *)&v16);
        if ((v2 & 0x80000000) == 0)
        {
          YAML::Scanner::ScanDocEnd(this);
          return;
        }
      }
    }
    if (*((void *)this + 8))
    {
      unsigned int v3 = *(unsigned __int8 *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                              + (*((void *)this + 7) & 0xFFFLL));
      if (v3 <= 0x5C)
      {
        if (v3 == 44)
        {
          YAML::Scanner::ScanFlowEntry(this);
          return;
        }
        if (v3 == 91) {
          goto LABEL_10;
        }
      }
      else
      {
        if (v3 == 93 || v3 == 125)
        {
          YAML::Scanner::ScanFlowEnd(this);
          return;
        }
        if (v3 == 123)
        {
LABEL_10:
          YAML::Scanner::ScanFlowStart(this);
          return;
        }
      }
    }
    YAML::Exp::BlockEntry((YAML::Exp *)v2);
    *(void *)&long long v16 = 0;
    *((void *)&v16 + 1) = this;
    uint64_t v4 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::BlockEntry(void)::e, (unint64_t *)&v16);
    if ((v4 & 0x80000000) == 0)
    {
      YAML::Scanner::ScanBlockEntry(this);
      return;
    }
    if (*((void *)this + 39))
    {
      YAML::Exp::KeyInFlow((YAML::Exp *)v4);
      unint64_t v5 = &YAML::Exp::KeyInFlow(void)::e;
    }
    else
    {
      YAML::Exp::Key((YAML::Exp *)v4);
      unint64_t v5 = &YAML::Exp::Key(void)::e;
    }
    *(void *)&long long v16 = 0;
    *((void *)&v16 + 1) = this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v5, (unint64_t *)&v16) & 0x80000000) == 0)
    {
      YAML::Scanner::ScanKey(this);
      return;
    }
    ValueRegex = YAML::Scanner::GetValueRegex(this);
    *(void *)&long long v16 = 0;
    *((void *)&v16 + 1) = this;
    uint64_t v7 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)ValueRegex, (unint64_t *)&v16);
    if ((v7 & 0x80000000) == 0)
    {
      YAML::Scanner::ScanValue(this);
      return;
    }
    if (*((void *)this + 8))
    {
      int v8 = *(unsigned __int8 *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                              + (*((void *)this + 7) & 0xFFFLL));
      if (v8 == 33)
      {
        YAML::Scanner::ScanTag(this);
        return;
      }
      if (v8 == 42 || v8 == 38)
      {
        YAML::Scanner::ScanAnchorOrAlias((void **)this);
        return;
      }
      uint64_t v11 = *((void *)this + 39);
      BOOL v9 = v11 == 0;
      if (!v11)
      {
        int v13 = *(unsigned __int8 *)(*(void *)(*((void *)this + 4)
                                             + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                                 + (*((void *)this + 7) & 0xFFFLL));
        if (v13 == 124 || v13 == 62)
        {
          YAML::Scanner::ScanBlockScalar(this);
          return;
        }
      }
      int v12 = *(unsigned __int8 *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                               + (*((void *)this + 7) & 0xFFFLL));
      if (v12 == 39 || v12 == 34)
      {
        YAML::Scanner::ScanQuotedScalar(this);
        return;
      }
    }
    else
    {
      BOOL v9 = *((void *)this + 39) == 0;
    }
    if (v9)
    {
      YAML::Exp::PlainScalar((YAML::Exp *)v7);
      int v10 = &YAML::Exp::PlainScalar(void)::e;
    }
    else
    {
      YAML::Exp::PlainScalarInFlow((YAML::Exp *)v7);
      int v10 = &YAML::Exp::PlainScalarInFlow(void)::e;
    }
    *(void *)&long long v16 = 0;
    *((void *)&v16 + 1) = this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v10, (unint64_t *)&v16) & 0x80000000) != 0)
    {
      exception = __cxa_allocate_exception(0x38uLL);
      int v15 = *((_DWORD *)this + 4);
      uint64_t v17 = *((void *)this + 1);
      int v18 = v15;
      std::string::basic_string[abi:ne180100]<0>(&v16, "unknown token");
      YAML::Exception::Exception((uint64_t)exception, &v17, &v16);
      void *exception = &unk_1F2127238;
    }
    YAML::Scanner::ScanPlainScalar(this);
  }
  else
  {
    YAML::Scanner::EndStream(this);
  }
}

void sub_1C5E3433C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void YAML::Scanner::StartStream(YAML::Scanner *this)
{
  *((unsigned char *)this + 144) = 1;
  *((unsigned char *)this + 146) = 1;
  operator new();
}

void sub_1C5E34434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MEMORY[0x1C8796D70](a10, 0x1020C406E52F545);
  }
  _Unwind_Resume(exception_object);
}

uint64_t YAML::Scanner::ScanToNextToken(YAML::Scanner *this)
{
  while (1)
  {
    while (YAML::Stream::operator BOOL(this) && *((void *)this + 8))
    {
      int v2 = *(unsigned __int8 *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                              + (*((void *)this + 7) & 0xFFFLL));
      if (v2 != 32 && v2 != 9) {
        break;
      }
      if (!*((void *)this + 39))
      {
        {
          YAML::Exp::Tab(void)::e = 1;
          word_1EA3D77CC = 9;
          qword_1EA3D77D8 = 0;
          unk_1EA3D77E0 = 0;
          qword_1EA3D77D0 = 0;
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tab(void)::e, &dword_1C5C1E000);
        }
        unint64_t v9 = 0;
        v10[0] = this;
        if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::Tab(void)::e, &v9) & 0x80000000) == 0) {
          *((unsigned char *)this + 146) = 0;
        }
      }
      YAML::Stream::get(this);
    }
    {
      YAML::Exp::Comment(void)::e = 1;
      word_1EA3D788C = 35;
      qword_1EA3D7898 = 0;
      unk_1EA3D78A0 = 0;
      qword_1EA3D7890 = 0;
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_1C5C1E000);
    }
    LODWORD(v9) = YAML::Exp::Comment(void)::e;
    WORD2(v9) = word_1EA3D788C;
    memset(v10, 0, sizeof(v10));
    std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(v10, (int *)qword_1EA3D7890, (int *)qword_1EA3D7898, (qword_1EA3D7898 - qword_1EA3D7890) >> 5);
    v11[0] = 0;
    v11[1] = (void **)this;
    int v4 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&v9, (unint64_t *)v11);
    v11[0] = (void **)v10;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v11);
    if ((v4 & 0x80000000) == 0)
    {
      while (1)
      {
        uint64_t v5 = YAML::Stream::operator BOOL(this);
        if (!v5) {
          break;
        }
        YAML::Exp::Break((YAML::Exp *)v5);
        unint64_t v9 = 0;
        v10[0] = this;
        uint64_t v5 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, &v9);
        if ((v5 & 0x80000000) == 0) {
          break;
        }
        YAML::Stream::get(this);
      }
    }
    YAML::Exp::Break((YAML::Exp *)v5);
    unint64_t v9 = 0;
    v10[0] = this;
    uint64_t result = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, &v9);
    if ((result & 0x80000000) != 0) {
      break;
    }
    YAML::Exp::Break((YAML::Exp *)result);
    unint64_t v9 = 0;
    v10[0] = this;
    int v7 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, &v9);
    if (v7 >= 1)
    {
      int v8 = v7;
      do
      {
        YAML::Stream::get(this);
        --v8;
      }
      while (v8);
    }
    YAML::Scanner::InvalidateSimpleKey(this);
    if (!*((void *)this + 39)) {
      *((unsigned char *)this + 146) = 1;
    }
  }
  return result;
}

void sub_1C5E346CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::PopIndentToHere(YAML::Scanner *this)
{
  if (!*((void *)this + 39))
  {
    uint64_t v2 = *((void *)this + 30);
    if (v2)
    {
      while (1)
      {
        unsigned int v3 = *(_DWORD **)(*(void *)(*((void *)this + 26)
                                    + (((unint64_t)(v2 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v2 + *((void *)this + 29) - 1) & 0x1FF));
        int v4 = *((_DWORD *)this + 4);
        if (*v3 < v4) {
          goto LABEL_11;
        }
        if (*v3 == v4)
        {
          if (v3[1] != 1) {
            goto LABEL_11;
          }
          YAML::Exp::BlockEntry(this);
          v5[0] = 0;
          v5[1] = (unint64_t)this;
          if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::BlockEntry(void)::e, v5) & 0x80000000) == 0) {
            break;
          }
        }
        YAML::Scanner::PopIndent(this);
        uint64_t v2 = *((void *)this + 30);
        if (!v2) {
          return;
        }
      }
      while (1)
      {
        uint64_t v2 = *((void *)this + 30);
        if (!v2) {
          break;
        }
LABEL_11:
        if (*(_DWORD *)(*(void *)(*(void *)(*((void *)this + 26)
                                               + (((unint64_t)(v2 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v2 + *((void *)this + 29) - 1) & 0x1FF))
                       + 8) != 1)
          return;
        YAML::Scanner::PopIndent(this);
      }
    }
  }
}

void YAML::Scanner::EndStream(YAML::Scanner *this)
{
  if (*((int *)this + 4) >= 1) {
    *((_DWORD *)this + 4) = 0;
  }
  YAML::Scanner::PopAllIndents(this);
  for (uint64_t i = *((void *)this + 24); i; uint64_t i = *((void *)this + 24))
  {
    *((void *)this + 24) = i - 1;
    std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((void *)this + 19);
  }
  *(_WORD *)((char *)this + 145) = 1;
}

void YAML::Exp::DocStart(YAML::Exp *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "---");
    uint64_t v1 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v9, (char *)__p, 6);
    YAML::Exp::BlankOrBreak(v1);
    int v2 = 0;
    __int16 v3 = 0;
    memset(v4, 0, sizeof(v4));
    YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v2, (uint64_t)&v5);
    YAML::operator+(&v9, (int *)&v5, (uint64_t)&YAML::Exp::DocStart(void)::e);
    uint64_t v11 = (void **)&v6;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
    uint64_t v11 = (void **)v4;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
    uint64_t v5 = (void **)&v10;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v5);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::DocStart(void)::e, &dword_1C5C1E000);
  }
}

void sub_1C5E34964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  *(void *)(v24 - 40) = v23 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(void *)(v24 - 40) = v22;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  a13 = v24 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t YAML::RegEx::Match<YAML::StreamCharSource>(uint64_t a1, unint64_t *a2)
{
  unint64_t v5 = *a2;
  int v4 = (YAML::Stream *)a2[1];
  if (*((void *)v4 + 8) > v5 || YAML::Stream::_ReadAheadTo(v4, v5))
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
        if (*(unsigned char *)(*(void *)(*(void *)(a2[1] + 32)
                                  + (((*(void *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                      + ((*(void *)(a2[1] + 56) + *a2) & 0xFFF)) == 4)
          return 0;
        else {
          return 0xFFFFFFFFLL;
        }
      case 1:
        if (*(unsigned __int8 *)(*(void *)(*(void *)(a2[1] + 32)
                                            + (((*(void *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                                + ((*(void *)(a2[1] + 56) + *a2) & 0xFFF)) == *(unsigned __int8 *)(a1 + 4))
          return 1;
        else {
          return 0xFFFFFFFFLL;
        }
      case 2:
        int v8 = *(char *)(*(void *)(*(void *)(a2[1] + 32)
                                 + (((*(void *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                     + ((*(void *)(a2[1] + 56) + *a2) & 0xFFF));
        uint64_t v7 = 0xFFFFFFFFLL;
        if (*(char *)(a1 + 4) <= v8)
        {
          if (*(char *)(a1 + 5) < v8) {
            return 0xFFFFFFFFLL;
          }
          else {
            return 1;
          }
        }
        return v7;
      case 3:
        uint64_t v9 = *(void *)(a1 + 8);
        if (*(void *)(a1 + 16) == v9) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          uint64_t v12 = YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v9 + v10, a2);
          if ((v12 & 0x80000000) == 0) {
            break;
          }
          ++v11;
          uint64_t v9 = *(void *)(a1 + 8);
          v10 += 32;
          uint64_t v7 = 0xFFFFFFFFLL;
          if (v11 >= (*(void *)(a1 + 16) - v9) >> 5) {
            return v7;
          }
        }
        return v12;
      case 4:
        uint64_t v13 = *(void *)(a1 + 8);
        if (*(void *)(a1 + 16) == v13) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        LODWORD(v7) = -1;
        break;
      case 5:
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v7 = 0xFFFFFFFFLL;
        if (v17 != *(void *)(a1 + 16))
        {
          if ((int)YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v17, a2) >= 0) {
            return 0xFFFFFFFFLL;
          }
          else {
            return 1;
          }
        }
        return v7;
      case 6:
        uint64_t v18 = *(void *)(a1 + 8);
        if (*(void *)(a1 + 16) == v18) {
          return 0;
        }
        uint64_t v19 = 0;
        LODWORD(v7) = 0;
        unint64_t v20 = 0;
        while (1)
        {
          uint64_t v21 = v18 + v19;
          unint64_t v22 = a2[1];
          unint64_t v23 = *a2 + (int)v7;
          if ((int)(v7 + *a2) < 0 != __OFADD__(v7, *a2)) {
            unint64_t v23 = 0;
          }
          v26[0] = v23;
          v26[1] = v22;
          int v24 = YAML::RegEx::Match<YAML::StreamCharSource>(v21, v26);
          if (v24 == -1) {
            break;
          }
          uint64_t v7 = (v24 + v7);
          ++v20;
          uint64_t v18 = *(void *)(a1 + 8);
          v19 += 32;
          if (v20 >= (*(void *)(a1 + 16) - v18) >> 5) {
            return v7;
          }
        }
        return 0xFFFFFFFFLL;
      default:
        return 0xFFFFFFFFLL;
    }
    while (1)
    {
      unsigned int v16 = YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v13 + v14, a2);
      if (v16 == -1) {
        break;
      }
      if (v15) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = v16;
      }
      ++v15;
      uint64_t v13 = *(void *)(a1 + 8);
      v14 += 32;
      if (v15 >= (*(void *)(a1 + 16) - v13) >> 5) {
        return v7;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void YAML::Exp::DocEnd(YAML::Exp *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "...");
    uint64_t v1 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v9, (char *)__p, 6);
    YAML::Exp::BlankOrBreak(v1);
    int v2 = 0;
    __int16 v3 = 0;
    memset(v4, 0, sizeof(v4));
    YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v2, (uint64_t)&v5);
    YAML::operator+(&v9, (int *)&v5, (uint64_t)&YAML::Exp::DocEnd(void)::e);
    unint64_t v11 = (void **)&v6;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
    unint64_t v11 = (void **)v4;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
    unint64_t v5 = (void **)&v10;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v5);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::DocEnd(void)::e, &dword_1C5C1E000);
  }
}

void sub_1C5E34D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  *(void *)(v24 - 40) = v23 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(void *)(v24 - 40) = v22;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  a13 = v24 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void YAML::Exp::BlockEntry(YAML::Exp *this)
{
  {
    if (v1)
    {
      int v7 = 1;
      __int16 v8 = 45;
      memset(v9, 0, sizeof(v9));
      YAML::Exp::BlankOrBreak(v1);
      int v2 = 0;
      __int16 v3 = 0;
      memset(v4, 0, sizeof(v4));
      YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v2, (uint64_t)&v5);
      YAML::operator+(&v7, (int *)&v5, (uint64_t)&YAML::Exp::BlockEntry(void)::e);
      uint64_t v10 = (void **)&v6;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v10);
      uint64_t v10 = (void **)v4;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v10);
      unint64_t v5 = (void **)v9;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v5);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::BlockEntry(void)::e, &dword_1C5C1E000);
    }
  }
}

void sub_1C5E34F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *(void *)(v8 - 40) = v7 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  *(void *)(v8 - 40) = v6;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void YAML::Exp::Key(YAML::Exp *this)
{
  {
    if (v1)
    {
      int v2 = 1;
      __int16 v3 = 63;
      memset(v4, 0, sizeof(v4));
      YAML::Exp::BlankOrBreak(v1);
      YAML::operator+(&v2, YAML::Exp::BlankOrBreak(void)::e, (uint64_t)&YAML::Exp::Key(void)::e);
      unint64_t v5 = (void **)v4;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v5);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Key(void)::e, &dword_1C5C1E000);
    }
  }
}

void sub_1C5E35014(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void YAML::Exp::KeyInFlow(YAML::Exp *this)
{
  {
    if (v1)
    {
      int v2 = 1;
      __int16 v3 = 63;
      memset(v4, 0, sizeof(v4));
      YAML::Exp::BlankOrBreak(v1);
      YAML::operator+(&v2, YAML::Exp::BlankOrBreak(void)::e, (uint64_t)&YAML::Exp::KeyInFlow(void)::e);
      unint64_t v5 = (void **)v4;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v5);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::KeyInFlow(void)::e, &dword_1C5C1E000);
    }
  }
}

void sub_1C5E350F8(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

int *YAML::Scanner::GetValueRegex(YAML::Scanner *this)
{
  if (!*((void *)this + 39))
  {
    if (!v4) {
      return (int *)&YAML::Exp::Value(void)::e;
    }
    int v13 = 1;
    __int16 v14 = 58;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = 0;
    YAML::Exp::BlankOrBreak(v4);
    int v8 = 0;
    __int16 v9 = 0;
    memset(v10, 0, sizeof(v10));
    YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v8, (uint64_t)&v11);
    YAML::operator+(&v13, (int *)&v11, (uint64_t)&YAML::Exp::Value(void)::e);
    __p[0] = v12;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = v10;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    unint64_t v11 = (void **)&v15;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
    uint64_t v1 = (int *)&YAML::Exp::Value(void)::e;
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Value(void)::e, &dword_1C5C1E000);
LABEL_18:
    __cxa_guard_release(v3);
    return v1;
  }
  if (!*((unsigned char *)this + 147))
  {
    if (!v5) {
      return (int *)&YAML::Exp::ValueInFlow(void)::e;
    }
    int v13 = 1;
    __int16 v14 = 58;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = 0;
    YAML::Exp::BlankOrBreak(v5);
    std::string::basic_string[abi:ne180100]<0>(__p, ",}");
    YAML::RegEx::RegEx((uint64_t)&v8, (char *)__p, 3);
    YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v8, (uint64_t)&v11);
    YAML::operator+(&v13, (int *)&v11, (uint64_t)&YAML::Exp::ValueInFlow(void)::e);
    uint64_t v18 = (void **)v12;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v18);
    uint64_t v18 = (void **)v10;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v18);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    unint64_t v11 = (void **)&v15;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
    uint64_t v1 = (int *)&YAML::Exp::ValueInFlow(void)::e;
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::ValueInFlow(void)::e, &dword_1C5C1E000);
    goto LABEL_18;
  }
  {
    uint64_t v1 = &YAML::Exp::ValueInJSONFlow(void)::e;
      return v1;
    YAML::Exp::ValueInJSONFlow(void)::e = 1;
    word_1EA3D8B1C = 58;
    qword_1EA3D8B28 = 0;
    unk_1EA3D8B30 = 0;
    qword_1EA3D8B20 = 0;
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::ValueInJSONFlow(void)::e, &dword_1C5C1E000);
    goto LABEL_18;
  }
  return &YAML::Exp::ValueInJSONFlow(void)::e;
}

void sub_1C5E353D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(void *)(v20 - 40) = v19 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  *(void *)(v20 - 40) = &a16;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (a14 < 0) {
    operator delete(__p);
  }
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

uint64_t YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(uint64_t a1, void *a2)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      if (*(unsigned char *)(*(void *)(*(void *)(a2[1] + 32)
                                + (((*(void *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                    + ((*(void *)(a2[1] + 56) + *a2) & 0xFFFLL)) == 4)
        uint64_t v4 = 0;
      else {
        uint64_t v4 = 0xFFFFFFFFLL;
      }
      break;
    case 1:
      if (*(unsigned __int8 *)(*(void *)(*(void *)(a2[1] + 32)
                                          + (((*(void *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                              + ((*(void *)(a2[1] + 56) + *a2) & 0xFFFLL)) == *(unsigned __int8 *)(a1 + 4))
        uint64_t v4 = 1;
      else {
        uint64_t v4 = 0xFFFFFFFFLL;
      }
      break;
    case 2:
      int v5 = *(char *)(*(void *)(*(void *)(a2[1] + 32)
                               + (((*(void *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                   + ((*(void *)(a2[1] + 56) + *a2) & 0xFFFLL));
      uint64_t v4 = 0xFFFFFFFFLL;
      if (*(char *)(a1 + 4) <= v5)
      {
        if (*(char *)(a1 + 5) < v5) {
          uint64_t v4 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v4 = 1;
        }
      }
      break;
    case 3:
      uint64_t v6 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v6) {
        goto LABEL_37;
      }
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v6 + v7, a2);
        if ((v9 & 0x80000000) == 0) {
          break;
        }
        ++v8;
        uint64_t v6 = *(void *)(a1 + 8);
        v7 += 32;
        if (v8 >= (*(void *)(a1 + 16) - v6) >> 5) {
          goto LABEL_37;
        }
      }
      uint64_t v4 = v9;
      break;
    case 4:
      uint64_t v10 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v10) {
        goto LABEL_37;
      }
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      LODWORD(v4) = -1;
      do
      {
        unsigned int v13 = YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v10 + v11, a2);
        if (v13 == -1) {
          goto LABEL_37;
        }
        if (v12) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v13;
        }
        ++v12;
        uint64_t v10 = *(void *)(a1 + 8);
        v11 += 32;
      }
      while (v12 < (*(void *)(a1 + 16) - v10) >> 5);
      break;
    case 5:
      uint64_t v14 = *(void *)(a1 + 8);
      uint64_t v4 = 0xFFFFFFFFLL;
      if (v14 != *(void *)(a1 + 16))
      {
        if ((int)YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v14, a2) >= 0) {
          uint64_t v4 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v4 = 1;
        }
      }
      break;
    case 6:
      uint64_t v15 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v15)
      {
        uint64_t v4 = 0;
      }
      else
      {
        uint64_t v16 = 0;
        LODWORD(v4) = 0;
        unint64_t v17 = 0;
        do
        {
          uint64_t v18 = v15 + v16;
          uint64_t v19 = a2[1];
          uint64_t v20 = *a2 + (int)v4;
          if ((int)(v4 + *a2) < 0 != __OFADD__(v4, *a2)) {
            uint64_t v20 = 0;
          }
          v23[0] = v20;
          v23[1] = v19;
          int v21 = YAML::RegEx::Match<YAML::StreamCharSource>(v18, v23);
          if (v21 == -1) {
            goto LABEL_37;
          }
          uint64_t v4 = (v21 + v4);
          ++v17;
          uint64_t v15 = *(void *)(a1 + 8);
          v16 += 32;
        }
        while (v17 < (*(void *)(a1 + 16) - v15) >> 5);
      }
      break;
    default:
LABEL_37:
      uint64_t v4 = 0xFFFFFFFFLL;
      break;
  }
  return v4;
}

void YAML::Scanner::PopAllIndents(YAML::Scanner *this)
{
  if (!*((void *)this + 39))
  {
    while (1)
    {
      uint64_t v2 = *((void *)this + 30);
      if (!v2
        || *(_DWORD *)(*(void *)(*(void *)(*((void *)this + 26)
                                             + (((unint64_t)(v2 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((v2 + *((void *)this + 29) - 1) & 0x1FF))
                     + 4) == 2)
      {
        break;
      }
      YAML::Scanner::PopIndent(this);
    }
  }
}

void YAML::Scanner::PopIndent(YAML::Scanner *this)
{
  uint64_t v3 = *((void *)this + 26);
  uint64_t v2 = *((void *)this + 27);
  uint64_t v4 = ((v2 - v3) << 6) - 1;
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *((void *)this + 30) - 1;
  unint64_t v6 = v5 + *((void *)this + 29);
  uint64_t v7 = *(void *)(*(void *)(v3 + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v6 & 0x1FF));
  *((void *)this + 30) = v5;
  if (v4 - v6 >= 0x400)
  {
    operator delete(*(void **)(v2 - 8));
    *((void *)this + 27) -= 8;
  }
  if (*(_DWORD *)(v7 + 8))
  {
    YAML::Scanner::InvalidateSimpleKey(this);
  }
  else
  {
    int v8 = *(_DWORD *)(v7 + 4);
    if (v8)
    {
      if (v8 != 1) {
        return;
      }
      uint64_t v9 = *((void *)this + 1);
      int v10 = *((_DWORD *)this + 4);
      *(void *)&long long v13 = 0x500000000;
      *((void *)&v13 + 1) = v9;
      int v14 = v10;
      *(_OWORD *)std::string __p = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      int v18 = 0;
      std::deque<YAML::Token>::push_back((void *)this + 12, &v13);
    }
    else
    {
      uint64_t v11 = *((void *)this + 1);
      int v12 = *((_DWORD *)this + 4);
      *(void *)&long long v13 = 0x600000000;
      *((void *)&v13 + 1) = v11;
      int v14 = v12;
      *(_OWORD *)std::string __p = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      int v18 = 0;
      std::deque<YAML::Token>::push_back((void *)this + 12, &v13);
    }
    uint64_t v19 = (void **)&v16 + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
    if (SBYTE7(v16) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C5E358B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void YAML::ptr_vector<YAML::Scanner::IndentMarker>::push_back(char **a1, uint64_t *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = (v5 - *a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - (void)*a1;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v12 = (char *)operator new(8 * v11);
    }
    else
    {
      int v12 = 0;
    }
    long long v13 = &v12[8 * v8];
    int v14 = &v12[8 * v11];
    uint64_t v15 = *a2;
    *a2 = 0;
    *(void *)long long v13 = v15;
    uint64_t v7 = v13 + 8;
    long long v16 = *a1;
    long long v17 = a1[1];
    if (v17 == *a1)
    {
      *a1 = v13;
      a1[1] = v7;
      a1[2] = v14;
    }
    else
    {
      do
      {
        uint64_t v18 = *((void *)v17 - 1);
        v17 -= 8;
        *(void *)long long v17 = 0;
        *((void *)v13 - 1) = v18;
        v13 -= 8;
      }
      while (v17 != v16);
      long long v17 = *a1;
      uint64_t v19 = a1[1];
      *a1 = v13;
      a1[1] = v7;
      a1[2] = v14;
      while (v19 != v17)
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        uint64_t v20 = v21;
        *(void *)uint64_t v19 = 0;
        if (v21) {
          MEMORY[0x1C8796D70](v20, 0x1020C406E52F545);
        }
      }
    }
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    *(void *)uint64_t v5 = v6;
    uint64_t v7 = v5 + 8;
  }
  a1[1] = v7;
}

void std::deque<YAML::Scanner::IndentMarker *>::push_back(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v5;
      unint64_t v11 = v5 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = (uint64_t)&v4[-*a1] >> 2;
          }
          uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v42);
          uint64_t v45 = &v43[8 * (v42 >> 2)];
          uint64_t v46 = (uint64_t *)a1[1];
          unint64_t v4 = v45;
          uint64_t v47 = a1[2] - (void)v46;
          if (v47)
          {
            unint64_t v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v48 = 8 * (v47 >> 3);
            char v49 = &v43[8 * (v42 >> 2)];
            do
            {
              uint64_t v50 = *v46++;
              *(void *)char v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          float v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            unint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          uint64_t v21 = &v11[-8 * v20];
          int64_t v22 = v4 - v11;
          if (v4 == v11)
          {
            uint64_t v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            uint64_t v23 = (char *)a1[1];
          }
          unint64_t v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(void *)unint64_t v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      uint64_t v8 = a1[5];
      unint64_t v10 = a1[4] + v8;
      goto LABEL_84;
    }
    uint64_t v24 = v6 >> 3;
    float v25 = (char *)a1[3];
    long long v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      unint64_t v28 = operator new(0x1000uLL);
      uint64_t v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = v27 >> 2;
          }
          uint64_t v53 = 2 * v52;
          long long v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v52);
          uint64_t v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          long long v56 = (uint64_t *)a1[1];
          char v57 = v5;
          uint64_t v58 = a1[2] - (void)v56;
          if (v58)
          {
            char v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v59 = 8 * (v58 >> 3);
            uint64_t v60 = v5;
            do
            {
              uint64_t v61 = *v56++;
              *(void *)uint64_t v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          long long v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v29;
        char v63 = (char *)a1[1];
        int v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        uint64_t v65 = *((void *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          uint64_t v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = (uint64_t)&v64[-*a1] >> 2;
            }
            int v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v97);
            std::string v100 = &v98[8 * (v97 >> 2)];
            unint64_t v101 = (uint64_t *)a1[1];
            int v64 = v100;
            uint64_t v102 = a1[2] - (void)v101;
            if (v102)
            {
              int v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                uint64_t v105 = *v101++;
                *(void *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            std::string v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              int v64 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v16 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v16) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            uint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            char v72 = &v63[-8 * v71];
            int64_t v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              char v63 = (char *)a1[1];
            }
            int v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(void *)int v64 = v65;
      }
      else
      {
        *(void *)unint64_t v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v27 >> 2;
    }
    uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v30);
    uint64_t v33 = v32;
    char v34 = &v31[8 * v24];
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v34;
    long long v110 = v35;
    unint64_t v36 = operator new(0x1000uLL);
    *(void *)&long long v37 = v34;
    *((void *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      uint64_t v38 = 8 * v24;
      *(void *)&long long v39 = v110;
      if (v6 >= 1)
      {
        uint64_t v40 = v38 >> 3;
        if (v40 >= -1) {
          unint64_t v41 = v40 + 1;
        }
        else {
          unint64_t v41 = v40 + 2;
        }
        v34 -= 8 * (v41 >> 1);
        *(void *)&long long v37 = v34;
        *((void *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      uint64_t v74 = v38 >> 2;
      if (v4 == v5) {
        unint64_t v75 = 1;
      }
      else {
        unint64_t v75 = v74;
      }
      char v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v75);
      char v34 = &v76[8 * (v75 >> 2)];
      *(void *)&long long v39 = v76;
      *((void *)&v39 + 1) = v34;
      *(void *)&long long v37 = v34;
      *((void *)&v37 + 1) = &v76[8 * v77];
      if (!v31) {
        goto LABEL_56;
      }
      long long v107 = v37;
      long long v110 = v39;
      operator delete(v31);
      long long v37 = v107;
    }
    long long v39 = v110;
LABEL_56:
    *(void *)char v34 = v36;
    *(void *)&long long v37 = v37 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      char v79 = (void *)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1) == (void)v39)
      {
        uint64_t v81 = (unsigned char *)v37;
        if ((unint64_t)v37 >= *((void *)&v37 + 1))
        {
          if (*((void *)&v37 + 1) == *((void *)&v39 + 1)) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = (uint64_t)(*((void *)&v37 + 1) - *((void *)&v39 + 1)) >> 2;
          }
          std::string v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v86);
          char v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          std::string v89 = v80;
          uint64_t v90 = v81 - (unsigned char *)v79;
          if (v81 != (unsigned char *)v79)
          {
            std::string v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v91 = 8 * (v90 >> 3);
            std::string v92 = v80;
            std::string v93 = v79;
            do
            {
              uint64_t v94 = *v93++;
              *(void *)std::string v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(void *)&long long v39 = v87;
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = v89;
          *((void *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            long long v108 = v37;
            long long v112 = v39;
            operator delete(v79);
            long long v37 = v108;
            long long v39 = v112;
          }
        }
        else
        {
          uint64_t v82 = (uint64_t)(*((void *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1) {
            uint64_t v83 = v82 + 1;
          }
          else {
            uint64_t v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v85 = v37 + 8 * (v83 >> 1);
          char v80 = (char *)(v85 - (v37 - *((void *)&v39 + 1)));
          if ((void)v37 == *((void *)&v39 + 1))
          {
            uint64_t v81 = (unsigned char *)*((void *)&v39 + 1);
          }
          else
          {
            uint64_t v109 = *((void *)&v37 + 1);
            uint64_t v111 = v39;
            memmove((void *)(v85 - (v37 - *((void *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((void *)&v39 + 1));
            *((void *)&v37 + 1) = v109;
            *(void *)&long long v39 = v111;
          }
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = &v81[8 * v84];
        }
      }
      else
      {
        char v80 = (char *)*((void *)&v39 + 1);
      }
      uint64_t v95 = *(void *)(i - 8);
      *((void *)v80 - 1) = v95;
      *((void *)&v39 + 1) -= 8;
    }
    size_t v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96) {
      operator delete(v96);
    }
    goto LABEL_83;
  }
LABEL_84:
  *(void *)(*(void *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_1C5E35F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void YAML::Scanner::pop(YAML::Scanner *this)
{
  YAML::Scanner::EnsureTokensInQueue(this);
  if (*((void *)this + 17))
  {
    std::deque<YAML::Token>::pop_front((uint64_t)this + 96);
  }
}

unint64_t YAML::Scanner::peek(YAML::Scanner *this)
{
  if (!*((void *)this + 17)) {
    __assert_rtn("peek", "scanner.cpp", 37, "!m_tokens.empty()");
  }
  return *(void *)(*((void *)this + 13) + 8 * (*((void *)this + 16) / 0x33uLL))
       + 80 * (*((void *)this + 16) % 0x33uLL);
}

uint64_t YAML::Scanner::mark(YAML::Scanner *this)
{
  return *((void *)this + 1);
}

BOOL YAML::Scanner::IsWhitespaceToBeEaten(YAML::Scanner *this, int a2)
{
  return a2 == 32 || a2 == 9;
}

unint64_t YAML::Scanner::PushToken(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 16);
  LODWORD(v7) = 0;
  DWORD1(v7) = a2;
  *((void *)&v7 + 1) = v3;
  int v8 = v4;
  *(_OWORD *)std::string __p = 0u;
  memset(v10, 0, sizeof(v10));
  int v11 = 0;
  std::deque<YAML::Token>::push_back((void *)(a1 + 96), &v7);
  uint64_t v12 = (void **)v10 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  if (SBYTE7(v10[0]) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v5 = *(void *)(a1 + 136) + *(void *)(a1 + 128) - 1;
  return *(void *)(*(void *)(a1 + 104) + 8 * (v5 / 0x33)) + 80 * (v5 % 0x33);
}

void sub_1C5E36120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::Scanner::GetStartTokenFor(uint64_t a1, int a2)
{
  if (!a2) {
    return 4;
  }
  if (a2 != 1)
  {
    if (a2 == 2) {
      __assert_rtn("GetStartTokenFor", "scanner.cpp", 279, "false");
    }
    __assert_rtn("GetStartTokenFor", "scanner.cpp", 282, "false");
  }
  return 3;
}

uint64_t YAML::Scanner::PushIndentTo(uint64_t a1)
{
  if (!*(void *)(a1 + 312)) {
    operator new();
  }
  return 0;
}

void sub_1C5E362CC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x1020C406E52F545);
  _Unwind_Resume(a1);
}

uint64_t YAML::Scanner::GetTopIndent(YAML::Scanner *this)
{
  uint64_t v1 = *((void *)this + 30);
  if (v1) {
    return **(unsigned int **)(*(void *)(*((void *)this + 26)
  }
                                         + (((unint64_t)(v1 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * ((v1 + *((void *)this + 29) - 1) & 0x1FF));
  else {
    return 0;
  }
}

void YAML::Scanner::ThrowParserException(void *a1, long long *a2)
{
  uint64_t v5 = -1;
  int v6 = -1;
  if (a1[17])
  {
    unint64_t v3 = *(void *)(a1[13] + 8 * (a1[16] / 0x33uLL)) + 80 * (a1[16] % 0x33uLL);
    uint64_t v5 = *(void *)(v3 + 8);
    int v6 = *(_DWORD *)(v3 + 16);
  }
  exception = __cxa_allocate_exception(0x38uLL);
  YAML::ParserException::ParserException((uint64_t)exception, &v5, a2);
}

void sub_1C5E363E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *YAML::ParserException::ParserException(uint64_t a1, _DWORD *a2, long long *a3)
{
  uint64_t result = (void *)YAML::Exception::Exception(a1, a2, a3);
  *uint64_t result = &unk_1F2127238;
  return result;
}

void siri::dialogengine::RoundTemperatureValue(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = (int)a2;
  *(_DWORD *)a3 = *(_DWORD *)a1;
  int v6 = (std::string *)(a3 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    *(void *)(a3 + 24) = *(void *)(a1 + 24);
  }
  double v7 = *(double *)(a1 + 32);
  *(double *)(a3 + 32) = v7;
  switch(v3)
  {
    case 0:
      double v8 = (double)(int)llround(v7);
      unint64_t v9 = "Temperature rounding mode: TEMPERATURE_ROUNDING_INTEGER (%f -> %f)";
      goto LABEL_10;
    case 1:
      if ((*(_DWORD *)a1 | 2) == 3) {
        double v10 = (double)(int)llround(v7);
      }
      else {
        double v10 = round(v7 * 10.0) / 10.0;
      }
      *(double *)(a3 + 32) = v10;
      siri::dialogengine::GetUnitLabel<siri::dialogengine::Temperature>();
    case 2:
      double v8 = round(v7 * 10.0) / 10.0;
      unint64_t v9 = "Temperature rounding mode: TEMPERATURE_ROUNDING_ONE_DIGIT (%f -> %f)";
      goto LABEL_10;
    case 3:
      double v8 = round(v7 * 100.0) / 100.0;
      unint64_t v9 = "Temperature rounding mode: TEMPERATURE_ROUNDING_TWO_DIGITS (%f -> %f)";
LABEL_10:
      *(double *)(a3 + 32) = v8;
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)v9, a2, *(void *)&v7, *(void *)&v8);
      break;
    default:
      return;
  }
}

void sub_1C5E365A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v18 + 31) < 0) {
    operator delete(*v17);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetRoundedValueFromTemperatureVar(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v5, "value");
  RequiredNumberuint64_t Parameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&v5, a2);
  int v4 = RequiredNumberParameter;
  if (v6 < 0)
  {
    operator delete(v5);
    if (v4) {
LABEL_3:
    }
      siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Temperature>();
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5E36768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v26, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FormatTemperature(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredNumberuint64_t Parameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  int v4 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v4)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(&__p, "units");
      OptionalStringuint64_t Parameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
      char v6 = OptionalStringParameter;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v6)
        {
LABEL_5:
          if (v6[95] < 0) {
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
          }
          else {
            std::string __p = *(std::string *)(v6 + 3);
          }
          siri::dialogengine::ParseUnitLabel<siri::dialogengine::Temperature>();
        }
      }
      else if (OptionalStringParameter)
      {
        goto LABEL_5;
      }
      siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Temperature>();
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5E36D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,void *a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogTemperature::toString(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogTemperature::longSpoken(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogTemperature::shortSpoken(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogTemperature::mediumSpoken(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogTemperature::units(siri::dialogengine::DialogTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C5E36F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v21, 0x10B3C40D3060B95);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogTemperature::value(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogTemperature::asPreciseTemperature(siri::dialogengine::DialogTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5E371F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  MEMORY[0x1C8796D70](v22, 0x10B3C40C1072A30);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_SimpleItem_Player_SimpleItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", a4);
  SnippetUI::SimpleItem_Player::SimpleItem_Player((SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SimpleItem_Player_default_instance_, v4);
  qword_1EB68FA88 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68FA90 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68FA98 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB68FAA0 = &SnippetUI::_ActionProperty_default_instance_;
  qword_1EB68FAA8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::SimpleItem_Player *SnippetUI::SimpleItem_Player::SimpleItem_Player(SnippetUI::SimpleItem_Player *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F211E838;
  *((_DWORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load_explicit(scc_info_SimpleItem_Player_SimpleItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Player_SimpleItem_2eproto);
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
  return this;
}

void sub_1C5E373F8(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SimpleItem_Player::GetMetadata(SnippetUI::SimpleItem_Player *this)
{
  return qword_1EA3D8B88;
}

void InitDefaultsscc_info_SimpleItem_Visual_SimpleItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", a4);
  SnippetUI::SimpleItem_Visual::SimpleItem_Visual((SnippetUI::SimpleItem_Visual *)&SnippetUI::_SimpleItem_Visual_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SimpleItem_Visual_default_instance_, v4);
  qword_1EB68FAF0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB68FAF8 = &SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::SimpleItem_Visual *SnippetUI::SimpleItem_Visual::SimpleItem_Visual(SnippetUI::SimpleItem_Visual *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F211E778;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load_explicit(scc_info_SimpleItem_Visual_SimpleItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Visual_SimpleItem_2eproto);
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  return this;
}

void sub_1C5E37540(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SimpleItem_Visual::GetMetadata(SnippetUI::SimpleItem_Visual *this)
{
  return qword_1EA3D8B78;
}

uint64_t SnippetUI::SimpleItem_Visual::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

void SnippetUI::SimpleItem_Visual::MergeFrom(SnippetUI::SimpleItem_Visual *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 2486);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::SimpleItem_Visual::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5E37664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Visual::MergeFrom(SnippetUI::SimpleItem_Visual *this, const SnippetUI::SimpleItem_Visual *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 2501);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_Visual *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::VisualProperty>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  uint64_t v6 = *((void *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 5);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, v6);
    }
    std::string::operator=(*((std::string **)this + 5), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 6);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  unint64_t v9 = (uint64_t *)*((void *)this + 6);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, v8);
    }
    std::string::operator=(*((std::string **)this + 6), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SimpleItem_Visual *)&SnippetUI::_SimpleItem_Visual_default_instance_)
  {
    double v10 = (int **)*((void *)a2 + 7);
    if (v10)
    {
      int v11 = (int **)*((void *)this + 7);
      if (!v11)
      {
        int v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 7) = v11;
        double v10 = (int **)*((void *)a2 + 7);
      }
      if (v10) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v11, v12);
    }
    uint64_t v13 = (int **)*((void *)a2 + 8);
    if (v13)
    {
      uint64_t v14 = (int **)*((void *)this + 8);
      if (!v14)
      {
        uint64_t v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 8) = v14;
        uint64_t v13 = (int **)*((void *)a2 + 8);
      }
      if (v13) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
  }
}

void sub_1C5E3781C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::VisualProperty>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    uint64_t v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      uint64_t v13 = (int ***)(v6 + 8);
      uint64_t v14 = (int ***)v7;
      do
      {
        char v16 = *v13++;
        uint64_t v15 = v16;
        uint64_t v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::VisualProperty>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      uint64_t v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      uint64_t v21 = (int ***)((char *)v8 + v20);
      uint64_t v22 = (int ***)(v20 + v6 + 8);
      do
      {
        uint64_t v23 = *v22++;
        uint64_t v24 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::VisualProperty>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    uint64_t v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_1C5E3798C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::VisualProperty>::Merge(int **a1, int **a2)
{
}

void SnippetUI::SimpleItem_Visual::CopyFrom(SnippetUI::SimpleItem_Visual *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Visual::Clear(this);
    SnippetUI::SimpleItem_Visual::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Visual::Clear(SnippetUI::SimpleItem_Visual *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualProperty>::TypeHandler>((uint64_t)this + 16);
  uint64_t v2 = *((void *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 6);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 7) = 0;
  uint64_t v5 = *((void *)this + 8);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  char v7 = *((unsigned char *)this + 8);
  uint64_t v6 = (SnippetUI::SimpleItem_Visual *)((char *)this + 8);
  *((void *)v6 + 7) = 0;
  if (v7)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
  }
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualProperty>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    uint64_t v3 = (SnippetUI::VisualProperty **)(*(void *)(a1 + 16) + 8);
    do
    {
      uint64_t v4 = *v3++;
      SnippetUI::VisualProperty::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1C5E37BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *SnippetUI::SimpleItem_Visual::InternalSerializeWithCachedSizesToArray(SnippetUI::SimpleItem_Visual *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    int v8 = 0;
    while ((unint64_t)a2 < *(void *)a3)
    {
      if (v8 < 0) {
        goto LABEL_5;
      }
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        uint64_t v10 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
      }
      int v11 = *(SnippetUI::VisualProperty **)(*((void *)this + 4) + 8 * v8 + 8);
      *(unsigned char *)a2 = 10;
      unsigned int v12 = *((_DWORD *)v11 + 15);
      if (v12 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v12 | 0x80;
        unsigned int v14 = v12 >> 7;
        if (v12 >> 14)
        {
          uint64_t v15 = (char *)a2 + 2;
          do
          {
            char v16 = v15;
            *v15++ = v14 | 0x80;
            unsigned int v17 = v14 >> 7;
            unsigned int v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          uint64_t v13 = (google::protobuf::UnknownFieldSet *)(v16 + 2);
          *uint64_t v15 = v17;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v14;
          uint64_t v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v12;
        uint64_t v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7) {
        goto LABEL_19;
      }
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    uint64_t v9 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  if (this != (SnippetUI::SimpleItem_Visual *)&SnippetUI::_SimpleItem_Visual_default_instance_)
  {
    int v19 = (SnippetUI::ActionProperty *)*((void *)this + 7);
    if (!v19) {
      goto LABEL_32;
    }
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      int v19 = (SnippetUI::ActionProperty *)*((void *)this + 7);
    }
    *(unsigned char *)a2 = 18;
    unsigned int v20 = *((_DWORD *)v19 + 12);
    if (v20 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v20 | 0x80;
      unsigned int v22 = v20 >> 7;
      if (v20 >> 14)
      {
        uint64_t v24 = (char *)a2 + 2;
        do
        {
          int v25 = v24;
          *v24++ = v22 | 0x80;
          unsigned int v26 = v22 >> 7;
          unsigned int v27 = v22 >> 14;
          v22 >>= 7;
        }
        while (v27);
        uint64_t v23 = (google::protobuf::UnknownFieldSet *)(v25 + 2);
        unsigned char *v24 = v26;
        goto LABEL_31;
      }
      *((unsigned char *)a2 + 2) = v22;
      uint64_t v21 = 3;
    }
    else
    {
      *((unsigned char *)a2 + 1) = v20;
      uint64_t v21 = 2;
    }
    uint64_t v23 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v21);
LABEL_31:
    a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v19, v23, a3, a4);
LABEL_32:
    unint64_t v28 = (SnippetUI::TextProperty *)*((void *)this + 8);
    if (v28)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        unint64_t v28 = (SnippetUI::TextProperty *)*((void *)this + 8);
      }
      *(unsigned char *)a2 = 26;
      unsigned int v29 = *((_DWORD *)v28 + 15);
      if (v29 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v29 | 0x80;
        unsigned int v31 = v29 >> 7;
        if (v29 >> 14)
        {
          uint64_t v32 = (char *)a2 + 2;
          do
          {
            uint64_t v33 = v32;
            *v32++ = v31 | 0x80;
            unsigned int v34 = v31 >> 7;
            unsigned int v35 = v31 >> 14;
            v31 >>= 7;
          }
          while (v35);
          unint64_t v30 = (google::protobuf::UnknownFieldSet *)(v33 + 2);
          *uint64_t v32 = v34;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v31;
          unint64_t v30 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v29;
        unint64_t v30 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v28, v30, a3, a4);
    }
  }
  unint64_t v36 = (google::protobuf::internal *)*((void *)this + 5);
  if (*((char *)v36 + 23) < 0)
  {
    long long v37 = (const char *)*((void *)v36 + 1);
    if (!v37) {
      goto LABEL_49;
    }
    unint64_t v36 = *(google::protobuf::internal **)v36;
    goto LABEL_48;
  }
  long long v37 = (const char *)*((unsigned __int8 *)v36 + 23);
  if (*((unsigned char *)v36 + 23))
  {
LABEL_48:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v36, v37, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Visual.component_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((const void ***)this + 5), (char *)a2);
  }
LABEL_49:
  uint64_t v38 = (google::protobuf::internal *)*((void *)this + 6);
  if (*((char *)v38 + 23) < 0)
  {
    long long v39 = (const char *)*((void *)v38 + 1);
    if (!v39) {
      goto LABEL_55;
    }
    uint64_t v38 = *(google::protobuf::internal **)v38;
    goto LABEL_54;
  }
  long long v39 = (const char *)*((unsigned __int8 *)v38 + 23);
  if (*((unsigned char *)v38 + 23))
  {
LABEL_54:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v38, v39, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Visual.link_identifier");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((const void ***)this + 6), (char *)a2);
  }
LABEL_55:
  uint64_t v40 = *((void *)this + 1);
  if ((v40 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v40 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

void sub_1C5E37F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::SimpleItem_Visual::_InternalParse(SnippetUI::SimpleItem_Visual *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v29 = a2;
  uint64_t v5 = (std::string **)((char *)this + 48);
  char v6 = (std::string **)((char *)this + 40);
  int v7 = (unsigned int *)((char *)this + 16);
  int v8 = (unint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v29, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v29 + 1);
      int v11 = (char *)*(unsigned __int8 *)v29;
      if (*(char *)v29 < 0)
      {
        int v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v29, v11);
          unsigned int v29 = TagFallback;
          if (!TagFallback) {
            return TagFallback;
          }
LABEL_7:
          switch(v11 >> 3)
          {
            case 1u:
              if (v11 != 10) {
                goto LABEL_38;
              }
              unsigned int v12 = (char *)TagFallback - 1;
              break;
            case 2u:
              if (v11 != 18) {
                goto LABEL_38;
              }
              unsigned int v20 = (SnippetUI::ActionProperty *)*((void *)this + 7);
              if (!v20)
              {
                unsigned int v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
                *((void *)this + 7) = v20;
                TagFallback = v29;
              }
              uint64_t v21 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v20, TagFallback);
              goto LABEL_43;
            case 3u:
              if (v11 != 26) {
                goto LABEL_38;
              }
              unsigned int v22 = (SnippetUI::TextProperty *)*((void *)this + 8);
              if (!v22)
              {
                unsigned int v22 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
                *((void *)this + 8) = v22;
                TagFallback = v29;
              }
              uint64_t v21 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v22, TagFallback);
              goto LABEL_43;
            case 4u:
              if (v11 != 34) {
                goto LABEL_38;
              }
              uint64_t v23 = *v6;
              if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
              uint64_t v24 = (std::string::value_type *)TagFallback;
              int v25 = a3;
              unsigned int v26 = "SnippetUI.SimpleItem_Visual.component_name";
              goto LABEL_37;
            case 5u:
              if (v11 != 42) {
                goto LABEL_38;
              }
              uint64_t v23 = *v5;
              if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
              uint64_t v24 = (std::string::value_type *)TagFallback;
              int v25 = a3;
              unsigned int v26 = "SnippetUI.SimpleItem_Visual.link_identifier";
LABEL_37:
              uint64_t v21 = google::protobuf::internal::InlineGreedyStringParserUTF8(v23, v24, (uint64_t)v25, (google::protobuf::internal *)v26);
              goto LABEL_43;
            default:
LABEL_38:
              if (v11) {
                BOOL v27 = (v11 & 7) == 4;
              }
              else {
                BOOL v27 = 1;
              }
              if (v27)
              {
                *((_DWORD *)a3 + 20) = v11 - 1;
                return TagFallback;
              }
              uint64_t v21 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v8, TagFallback, a3, v9);
LABEL_43:
              unsigned int v29 = (google::protobuf::internal *)v21;
              if (!v21) {
                return 0;
              }
              continue;
          }
          while (1)
          {
            uint64_t v13 = (google::protobuf::internal *)(v12 + 1);
            unsigned int v29 = (google::protobuf::internal *)(v12 + 1);
            unsigned int v14 = (int *)*((void *)this + 4);
            if (!v14) {
              break;
            }
            uint64_t v15 = *((int *)this + 6);
            int v16 = *v14;
            if ((int)v15 >= *v14)
            {
              if (v16 == *((_DWORD *)this + 7))
              {
LABEL_15:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v16 + 1);
                unsigned int v14 = (int *)*((void *)this + 4);
                int v16 = *v14;
              }
              int *v14 = v16 + 1;
              unsigned int v17 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                           + 2));
              uint64_t v18 = *((void *)this + 4);
              uint64_t v19 = *((int *)this + 6);
              *((_DWORD *)this + 6) = v19 + 1;
              *(void *)(v18 + 8 * v19 + 8) = v17;
              uint64_t v13 = v29;
              goto LABEL_17;
            }
            *((_DWORD *)this + 6) = v15 + 1;
            unsigned int v17 = *(SnippetUI::VisualProperty **)&v14[2 * v15 + 2];
LABEL_17:
            unsigned int v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v17, v13);
            unsigned int v29 = (google::protobuf::internal *)v12;
            if (!v12) {
              return 0;
            }
            if (*(void *)a3 <= (unint64_t)v12 || *v12 != 10) {
              goto LABEL_2;
            }
          }
          int v16 = *((_DWORD *)this + 7);
          goto LABEL_15;
        }
        TagFallback = (google::protobuf::internal *)((char *)v29 + 2);
      }
      unsigned int v29 = TagFallback;
      goto LABEL_7;
    }
    return v29;
  }
}

uint64_t SnippetUI::SimpleItem_Visual::GetCachedSize(SnippetUI::SimpleItem_Visual *this)
{
  return *((unsigned int *)this + 18);
}

char *SnippetUI::SimpleItem_Visual::ByteSizeLong(SnippetUI::SimpleItem_Visual *this)
{
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    uint64_t v4 = (SnippetUI::VisualProperty **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * (void)v2;
    do
    {
      char v6 = *v4++;
      int v7 = SnippetUI::VisualProperty::ByteSizeLong(v6);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (void)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *((void *)this + 5);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_14;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v9;
  }
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  uint64_t v11 = *((void *)this + 6);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(void *)(v11 + 8)) {
      goto LABEL_19;
    }
  }
  else if (!*(unsigned char *)(v11 + 23))
  {
    goto LABEL_19;
  }
  uint64_t v13 = *(void *)(v11 + 8);
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = v12;
  }
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_19:
  if (this != (SnippetUI::SimpleItem_Visual *)&SnippetUI::_SimpleItem_Visual_default_instance_)
  {
    unsigned int v14 = (SnippetUI::ActionProperty *)*((void *)this + 7);
    if (v14)
    {
      uint64_t v15 = SnippetUI::ActionProperty::ByteSizeLong(v14);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)&v15[(void)v2
                                                         + 1
                                                         + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6)];
    }
    int v16 = (SnippetUI::TextProperty *)*((void *)this + 8);
    if (v16)
    {
      unsigned int v17 = SnippetUI::TextProperty::ByteSizeLong(v16);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)&v17[(void)v2
                                                         + 1
                                                         + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SimpleItem_Visual *)((char *)this + 8), v2, (_DWORD *)this + 18);
  }
  else
  {
    *((_DWORD *)this + 18) = v2;
    return (char *)v2;
  }
}

uint64_t SnippetUI::SimpleItem_Visual::IsInitialized(SnippetUI::SimpleItem_Visual *this)
{
  return 1;
}

SnippetUI::SimpleItem_Visual *SnippetUI::SimpleItem_Visual::New(SnippetUI::SimpleItem_Visual *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Visual>(a2);
}

SnippetUI::SimpleItem_Visual *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Visual>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::SimpleItem_Visual *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Visual>);
  }
  SnippetUI::SimpleItem_Visual::SimpleItem_Visual(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5E38540(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40A49539A5);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Visual>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::SimpleItem_Visual *SnippetUI::SimpleItem_Visual::New(SnippetUI::SimpleItem_Visual *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Visual>(0);
}

void SnippetUI::SimpleItem_Visual::~SimpleItem_Visual(SnippetUI::SimpleItem_Visual *this)
{
  SnippetUI::SimpleItem_Visual::~SimpleItem_Visual(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(void *)this = &unk_1F211E778;
  uint64_t v2 = *((void *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 6);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SimpleItem_Visual *)&SnippetUI::_SimpleItem_Visual_default_instance_)
  {
    char v6 = *((void *)this + 7);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    int v7 = *((void *)this + 8);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::SimpleItem_Visual *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_SimpleItem_Standard_SimpleItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", a4);
  SnippetUI::SimpleItem_Standard::SimpleItem_Standard((SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SimpleItem_Standard_default_instance_, v4);
  qword_1EB690C58 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690C60 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB690C68 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB690C70 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1EB690C78 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB690C80 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB690C88 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::SimpleItem_Standard *SnippetUI::SimpleItem_Standard::SimpleItem_Standard(SnippetUI::SimpleItem_Standard *this)
{
  *(void *)this = &unk_1F211E538;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  if (atomic_load_explicit(scc_info_SimpleItem_Standard_SimpleItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Standard_SimpleItem_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  return this;
}

void sub_1C5E38814(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SimpleItem_Standard::GetMetadata(SnippetUI::SimpleItem_Standard *this)
{
  return file_level_metadata_SimpleItem_2eproto;
}

uint64_t SnippetUI::SimpleItem_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 88) = a2;
  return this;
}

void SnippetUI::SimpleItem_Standard::MergeFrom(SnippetUI::SimpleItem_Standard *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 841);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::SimpleItem_Standard::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5E38930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Standard::MergeFrom(SnippetUI::SimpleItem_Standard *this, const SnippetUI::SimpleItem_Standard *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 856);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_)
  {
    uint64_t v10 = (int **)*((void *)a2 + 4);
    if (v10)
    {
      uint64_t v11 = (int **)*((void *)this + 4);
      if (!v11)
      {
        uint64_t v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        uint64_t v10 = (int **)*((void *)a2 + 4);
      }
      if (v10) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    uint64_t v13 = (int **)*((void *)a2 + 5);
    if (v13)
    {
      unsigned int v14 = (int **)*((void *)this + 5);
      if (!v14)
      {
        unsigned int v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v14;
        uint64_t v13 = (int **)*((void *)a2 + 5);
      }
      if (v13) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    int v16 = (int **)*((void *)a2 + 6);
    if (v16)
    {
      unsigned int v17 = (int **)*((void *)this + 6);
      if (!v17)
      {
        unsigned int v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 6) = v17;
        int v16 = (int **)*((void *)a2 + 6);
      }
      if (v16) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    uint64_t v19 = (int **)*((void *)a2 + 7);
    if (v19)
    {
      unsigned int v20 = (int **)*((void *)this + 7);
      if (!v20)
      {
        unsigned int v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 7) = v20;
        uint64_t v19 = (int **)*((void *)a2 + 7);
      }
      if (v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v20, v21);
    }
    unsigned int v22 = (int **)*((void *)a2 + 8);
    if (v22)
    {
      uint64_t v23 = (int **)*((void *)this + 8);
      if (!v23)
      {
        uint64_t v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 8) = v23;
        unsigned int v22 = (int **)*((void *)a2 + 8);
      }
      if (v22) {
        uint64_t v24 = v22;
      }
      else {
        uint64_t v24 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v23, v24);
    }
    int v25 = (int **)*((void *)a2 + 9);
    if (v25)
    {
      unsigned int v26 = (int **)*((void *)this + 9);
      if (!v26)
      {
        unsigned int v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 9) = v26;
        int v25 = (int **)*((void *)a2 + 9);
      }
      if (v25) {
        BOOL v27 = v25;
      }
      else {
        BOOL v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
    unint64_t v28 = (int **)*((void *)a2 + 10);
    if (v28)
    {
      unsigned int v29 = (int **)*((void *)this + 10);
      if (!v29)
      {
        unsigned int v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 10) = v29;
        unint64_t v28 = (int **)*((void *)a2 + 10);
      }
      if (v28) {
        unint64_t v30 = v28;
      }
      else {
        unint64_t v30 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v29, v30);
    }
  }
}

void sub_1C5E38BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Standard::CopyFrom(SnippetUI::SimpleItem_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Standard::Clear(this);
    SnippetUI::SimpleItem_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Standard::Clear(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 6) = 0;
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 7) = 0;
  uint64_t v8 = *((void *)this + 8);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 8) = 0;
  uint64_t v9 = *((void *)this + 9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 9) = 0;
  uint64_t v10 = *((void *)this + 10);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  char v12 = *((unsigned char *)this + 8);
  uint64_t v11 = (SnippetUI::SimpleItem_Standard *)((char *)this + 8);
  *((void *)v11 + 9) = 0;
  if (v12)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v11);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SimpleItem_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::SimpleItem_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_) {
    goto LABEL_61;
  }
  uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
    }
    char *v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        char v12 = v5 + 2;
        do
        {
          uint64_t v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      unint64_t v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  int v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  if (!v16) {
    goto LABEL_26;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    int v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  }
  char *v5 = 18;
  unsigned int v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    unsigned int v19 = v17 >> 7;
    if (v17 >> 14)
    {
      uint64_t v21 = v5 + 2;
      do
      {
        unsigned int v22 = v21;
        *v21++ = v19 | 0x80;
        unsigned int v23 = v19 >> 7;
        unsigned int v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      unsigned int v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *uint64_t v21 = v23;
      goto LABEL_25;
    }
    unint64_t v5[2] = v19;
    uint64_t v18 = 3;
  }
  else
  {
    v5[1] = v17;
    uint64_t v18 = 2;
  }
  unsigned int v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  int v25 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
  if (!v25) {
    goto LABEL_38;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    int v25 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
  }
  char *v5 = 26;
  unsigned int v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    unsigned int v28 = v26 >> 7;
    if (v26 >> 14)
    {
      unint64_t v30 = v5 + 2;
      do
      {
        char v31 = v30;
        *v30++ = v28 | 0x80;
        unsigned int v32 = v28 >> 7;
        unsigned int v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      unsigned int v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      unsigned char *v30 = v32;
      goto LABEL_37;
    }
    unint64_t v5[2] = v28;
    uint64_t v27 = 3;
  }
  else
  {
    v5[1] = v26;
    uint64_t v27 = 2;
  }
  unsigned int v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  uint64_t v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  unsigned int v34 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
  if (!v34) {
    goto LABEL_50;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unsigned int v34 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
  }
  char *v5 = 34;
  unsigned int v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    unsigned int v37 = v35 >> 7;
    if (v35 >> 14)
    {
      long long v39 = v5 + 2;
      do
      {
        uint64_t v40 = v39;
        *v39++ = v37 | 0x80;
        unsigned int v41 = v37 >> 7;
        unsigned int v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      uint64_t v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      unsigned char *v39 = v41;
      goto LABEL_49;
    }
    unint64_t v5[2] = v37;
    uint64_t v36 = 3;
  }
  else
  {
    v5[1] = v35;
    uint64_t v36 = 2;
  }
  uint64_t v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  uint64_t v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  uint64_t v43 = (SnippetUI::ActionProperty *)*((void *)this + 8);
  if (v43)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      uint64_t v43 = (SnippetUI::ActionProperty *)*((void *)this + 8);
    }
    char *v5 = 42;
    unsigned int v44 = *((_DWORD *)v43 + 12);
    if (v44 > 0x7F)
    {
      v5[1] = v44 | 0x80;
      unsigned int v46 = v44 >> 7;
      if (v44 >> 14)
      {
        uint64_t v47 = v5 + 2;
        do
        {
          uint64_t v48 = v47;
          *v47++ = v46 | 0x80;
          unsigned int v49 = v46 >> 7;
          unsigned int v50 = v46 >> 14;
          v46 >>= 7;
        }
        while (v50);
        uint64_t v45 = (google::protobuf::UnknownFieldSet *)(v48 + 2);
        *uint64_t v47 = v49;
      }
      else
      {
        unint64_t v5[2] = v46;
        uint64_t v45 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v44;
      uint64_t v45 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v43, v45, a3, a4);
  }
LABEL_61:
  float v51 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v51 + 23) < 0)
  {
    unint64_t v52 = (const char *)*((void *)v51 + 1);
    if (!v52) {
      goto LABEL_67;
    }
    float v51 = *(google::protobuf::internal **)v51;
    goto LABEL_66;
  }
  unint64_t v52 = (const char *)*((unsigned __int8 *)v51 + 23);
  if (*((unsigned char *)v51 + 23))
  {
LABEL_66:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v51, v52, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Standard.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((const void ***)this + 2), v5);
  }
LABEL_67:
  if (this == (SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_) {
    goto LABEL_91;
  }
  uint64_t v53 = (SnippetUI::TextProperty *)*((void *)this + 9);
  if (v53)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      uint64_t v53 = (SnippetUI::TextProperty *)*((void *)this + 9);
    }
    char *v5 = 58;
    unsigned int v54 = *((_DWORD *)v53 + 15);
    if (v54 > 0x7F)
    {
      v5[1] = v54 | 0x80;
      unsigned int v56 = v54 >> 7;
      if (v54 >> 14)
      {
        uint64_t v58 = v5 + 2;
        do
        {
          uint64_t v59 = v58;
          *v58++ = v56 | 0x80;
          unsigned int v60 = v56 >> 7;
          unsigned int v61 = v56 >> 14;
          v56 >>= 7;
        }
        while (v61);
        char v57 = (google::protobuf::UnknownFieldSet *)(v59 + 2);
        *uint64_t v58 = v60;
        goto LABEL_79;
      }
      unint64_t v5[2] = v56;
      uint64_t v55 = 3;
    }
    else
    {
      v5[1] = v54;
      uint64_t v55 = 2;
    }
    char v57 = (google::protobuf::UnknownFieldSet *)&v5[v55];
LABEL_79:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v53, v57, a3, a4);
  }
  long long v62 = (SnippetUI::TextProperty *)*((void *)this + 10);
  if (v62)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      long long v62 = (SnippetUI::TextProperty *)*((void *)this + 10);
    }
    char *v5 = 66;
    unsigned int v63 = *((_DWORD *)v62 + 15);
    if (v63 > 0x7F)
    {
      v5[1] = v63 | 0x80;
      unsigned int v65 = v63 >> 7;
      if (v63 >> 14)
      {
        uint64_t v66 = v5 + 2;
        do
        {
          uint64_t v67 = v66;
          *v66++ = v65 | 0x80;
          unsigned int v68 = v65 >> 7;
          unsigned int v69 = v65 >> 14;
          v65 >>= 7;
        }
        while (v69);
        int v64 = (google::protobuf::UnknownFieldSet *)(v67 + 2);
        unsigned char *v66 = v68;
      }
      else
      {
        unint64_t v5[2] = v65;
        int v64 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v63;
      int v64 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v62, v64, a3, a4);
  }
LABEL_91:
  uint64_t v70 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v70 + 23) < 0)
  {
    uint64_t v71 = (const char *)*((void *)v70 + 1);
    if (!v71) {
      goto LABEL_97;
    }
    uint64_t v70 = *(google::protobuf::internal **)v70;
    goto LABEL_96;
  }
  uint64_t v71 = (const char *)*((unsigned __int8 *)v70 + 23);
  if (*((unsigned char *)v70 + 23))
  {
LABEL_96:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v70, v71, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Standard.link_identifier");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((const void ***)this + 3), v5);
  }
LABEL_97:
  uint64_t v72 = *((void *)this + 1);
  if ((v72 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v72 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::SimpleItem_Standard::_InternalParse(SnippetUI::SimpleItem_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v21 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  uint64_t v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23))) {
      return v21;
    }
    TagFallback = (google::protobuf::internal *)((char *)v21 + 1);
    unsigned int v10 = (char *)*(unsigned __int8 *)v21;
    if ((*(char *)v21 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_6:
      uint64_t v21 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, v10);
    uint64_t v21 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_45;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 4);
        if (v11) {
          goto LABEL_39;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        goto LABEL_38;
      case 2u:
        if (v10 != 18) {
          goto LABEL_45;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 5);
        if (v11) {
          goto LABEL_39;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v11;
        goto LABEL_38;
      case 3u:
        if (v10 != 26) {
          goto LABEL_45;
        }
        char v12 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
        if (v12) {
          goto LABEL_23;
        }
        char v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 6) = v12;
        goto LABEL_22;
      case 4u:
        if (v10 != 34) {
          goto LABEL_45;
        }
        char v12 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
        if (v12) {
          goto LABEL_23;
        }
        char v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 7) = v12;
LABEL_22:
        TagFallback = v21;
LABEL_23:
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_50;
      case 5u:
        if (v10 != 42) {
          goto LABEL_45;
        }
        unsigned int v14 = (SnippetUI::ActionProperty *)*((void *)this + 8);
        if (!v14)
        {
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 8) = v14;
          TagFallback = v21;
        }
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_50;
      case 6u:
        if (v10 != 50) {
          goto LABEL_45;
        }
        unsigned int v15 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        int v16 = (std::string::value_type *)TagFallback;
        unsigned int v17 = a3;
        uint64_t v18 = "SnippetUI.SimpleItem_Standard.component_name";
        goto LABEL_44;
      case 7u:
        if (v10 != 58) {
          goto LABEL_45;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 9);
        if (v11) {
          goto LABEL_39;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 9) = v11;
        goto LABEL_38;
      case 8u:
        if (v10 != 66) {
          goto LABEL_45;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 10);
        if (v11) {
          goto LABEL_39;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 10) = v11;
LABEL_38:
        TagFallback = v21;
LABEL_39:
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_50;
      case 9u:
        if (v10 != 74) {
          goto LABEL_45;
        }
        unsigned int v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        int v16 = (std::string::value_type *)TagFallback;
        unsigned int v17 = a3;
        uint64_t v18 = "SnippetUI.SimpleItem_Standard.link_identifier";
LABEL_44:
        uint64_t v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, v16, (uint64_t)v17, (google::protobuf::internal *)v18);
        goto LABEL_50;
      default:
LABEL_45:
        if (v10) {
          BOOL v19 = (v10 & 7) == 4;
        }
        else {
          BOOL v19 = 1;
        }
        if (v19)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        uint64_t v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_50:
        uint64_t v21 = (google::protobuf::internal *)v13;
        if (v13) {
          continue;
        }
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::SimpleItem_Standard::GetCachedSize(SnippetUI::SimpleItem_Standard *this)
{
  return *((unsigned int *)this + 22);
}

char *SnippetUI::SimpleItem_Standard::ByteSizeLong(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_)
  {
    uint64_t v9 = (SnippetUI::TextProperty *)*((void *)this + 4);
    if (v9)
    {
      unsigned int v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 5);
    if (v11)
    {
      char v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v13 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
    if (v13)
    {
      unsigned int v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v14[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v15 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
    if (v15)
    {
      int v16 = SnippetUI::MultilineTextProperty::ByteSizeLong(v15);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v16[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v17 = (SnippetUI::ActionProperty *)*((void *)this + 8);
    if (v17)
    {
      uint64_t v18 = SnippetUI::ActionProperty::ByteSizeLong(v17);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v18[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    BOOL v19 = (SnippetUI::TextProperty *)*((void *)this + 9);
    if (v19)
    {
      unsigned int v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v20[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v21 = (SnippetUI::TextProperty *)*((void *)this + 10);
    if (v21)
    {
      unsigned int v22 = SnippetUI::TextProperty::ByteSizeLong(v21);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v22[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SimpleItem_Standard *)((char *)this + 8), v5, (_DWORD *)this + 22);
  }
  else
  {
    *((_DWORD *)this + 22) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::SimpleItem_Standard::IsInitialized(SnippetUI::SimpleItem_Standard *this)
{
  return 1;
}

SnippetUI::SimpleItem_Standard *SnippetUI::SimpleItem_Standard::New(SnippetUI::SimpleItem_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Standard>(a2);
}

SnippetUI::SimpleItem_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::SimpleItem_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x60uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Standard>);
  }
  SnippetUI::SimpleItem_Standard::SimpleItem_Standard(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5E399C4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C404A70EBA6);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Standard>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::SimpleItem_Standard *SnippetUI::SimpleItem_Standard::New(SnippetUI::SimpleItem_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Standard>(0);
}

void SnippetUI::SimpleItem_Standard::~SimpleItem_Standard(SnippetUI::SimpleItem_Standard *this)
{
  SnippetUI::SimpleItem_Standard::~SimpleItem_Standard(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(void *)this = &unk_1F211E538;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 6);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = *((void *)this + 7);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    unsigned int v10 = *((void *)this + 8);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = *((void *)this + 9);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    char v12 = *((void *)this + 10);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_SimpleItem_RichSearchResult_SimpleItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", a4);
  SnippetUI::SimpleItem_RichSearchResult::SimpleItem_RichSearchResult((SnippetUI::SimpleItem_RichSearchResult *)&SnippetUI::_SimpleItem_RichSearchResult_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SimpleItem_RichSearchResult_default_instance_, v4);
  qword_1EA3DB290 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EA3DB298 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EA3DB2A0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EA3DB2A8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EA3DB2B0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EA3DB2B8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EA3DB2C0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EA3DB2C8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EA3DB2D0 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EA3DB2D8 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SimpleItem_RichSearchResult *SnippetUI::SimpleItem_RichSearchResult::SimpleItem_RichSearchResult(SnippetUI::SimpleItem_RichSearchResult *this)
{
  *(void *)this = &unk_1F211E8F8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  if (atomic_load_explicit(scc_info_SimpleItem_RichSearchResult_SimpleItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_RichSearchResult_SimpleItem_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  return this;
}

void sub_1C5E39D78(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::GetMetadata(SnippetUI::SimpleItem_RichSearchResult *this)
{
  return qword_1EA3D8B98;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 112) = a2;
  return this;
}

void SnippetUI::SimpleItem_RichSearchResult::MergeFrom(SnippetUI::SimpleItem_RichSearchResult *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 3699);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::SimpleItem_RichSearchResult::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5E39E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_RichSearchResult::MergeFrom(SnippetUI::SimpleItem_RichSearchResult *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v41, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 3714);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v41, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v40, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v41[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_RichSearchResult *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SimpleItem_RichSearchResult *)&SnippetUI::_SimpleItem_RichSearchResult_default_instance_)
  {
    unsigned int v10 = (int **)*((void *)a2 + 4);
    if (v10)
    {
      uint64_t v11 = (int **)*((void *)this + 4);
      if (!v11)
      {
        uint64_t v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        unsigned int v10 = (int **)*((void *)a2 + 4);
      }
      if (v10) {
        char v12 = v10;
      }
      else {
        char v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    uint64_t v13 = (int **)*((void *)a2 + 5);
    if (v13)
    {
      unsigned int v14 = (int **)*((void *)this + 5);
      if (!v14)
      {
        unsigned int v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v14;
        uint64_t v13 = (int **)*((void *)a2 + 5);
      }
      if (v13) {
        unsigned int v15 = v13;
      }
      else {
        unsigned int v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    int v16 = (int **)*((void *)a2 + 6);
    if (v16)
    {
      unsigned int v17 = (int **)*((void *)this + 6);
      if (!v17)
      {
        unsigned int v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 6) = v17;
        int v16 = (int **)*((void *)a2 + 6);
      }
      if (v16) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    BOOL v19 = (int **)*((void *)a2 + 7);
    if (v19)
    {
      unsigned int v20 = (int **)*((void *)this + 7);
      if (!v20)
      {
        unsigned int v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 7) = v20;
        BOOL v19 = (int **)*((void *)a2 + 7);
      }
      if (v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v20, v21);
    }
    unsigned int v22 = (int **)*((void *)a2 + 8);
    if (v22)
    {
      unsigned int v23 = (int **)*((void *)this + 8);
      if (!v23)
      {
        unsigned int v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 8) = v23;
        unsigned int v22 = (int **)*((void *)a2 + 8);
      }
      if (v22) {
        unsigned int v24 = v22;
      }
      else {
        unsigned int v24 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v23, v24);
    }
    int v25 = (int **)*((void *)a2 + 9);
    if (v25)
    {
      unsigned int v26 = (int **)*((void *)this + 9);
      if (!v26)
      {
        unsigned int v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 9) = v26;
        int v25 = (int **)*((void *)a2 + 9);
      }
      if (v25) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
    unsigned int v28 = (int **)*((void *)a2 + 10);
    if (v28)
    {
      unsigned int v29 = (int **)*((void *)this + 10);
      if (!v29)
      {
        unsigned int v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 10) = v29;
        unsigned int v28 = (int **)*((void *)a2 + 10);
      }
      if (v28) {
        unint64_t v30 = v28;
      }
      else {
        unint64_t v30 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v29, v30);
    }
    char v31 = (int **)*((void *)a2 + 11);
    if (v31)
    {
      unsigned int v32 = (int **)*((void *)this + 11);
      if (!v32)
      {
        unsigned int v32 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 11) = v32;
        char v31 = (int **)*((void *)a2 + 11);
      }
      if (v31) {
        unsigned int v33 = v31;
      }
      else {
        unsigned int v33 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v32, v33);
    }
    unsigned int v34 = (int **)*((void *)a2 + 12);
    if (v34)
    {
      unsigned int v35 = (int **)*((void *)this + 12);
      if (!v35)
      {
        unsigned int v35 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 12) = v35;
        unsigned int v34 = (int **)*((void *)a2 + 12);
      }
      if (v34) {
        uint64_t v36 = v34;
      }
      else {
        uint64_t v36 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v35, v36);
    }
    unsigned int v37 = (int **)*((void *)a2 + 13);
    if (v37)
    {
      uint64_t v38 = (int **)*((void *)this + 13);
      if (!v38)
      {
        uint64_t v38 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 13) = v38;
        unsigned int v37 = (int **)*((void *)a2 + 13);
      }
      if (v37) {
        long long v39 = v37;
      }
      else {
        long long v39 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v38, v39);
    }
  }
}

void sub_1C5E3A198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_RichSearchResult::CopyFrom(SnippetUI::SimpleItem_RichSearchResult *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_RichSearchResult::Clear(this);
    SnippetUI::SimpleItem_RichSearchResult::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_RichSearchResult::Clear(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 6) = 0;
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 7) = 0;
  uint64_t v8 = *((void *)this + 8);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 8) = 0;
  uint64_t v9 = *((void *)this + 9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 9) = 0;
  uint64_t v10 = *((void *)this + 10);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 10) = 0;
  uint64_t v11 = *((void *)this + 11);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *((void *)this + 11) = 0;
  uint64_t v12 = *((void *)this + 12);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  *((void *)this + 12) = 0;
  uint64_t v13 = *((void *)this + 13);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  char v15 = *((unsigned char *)this + 8);
  unsigned int v14 = (SnippetUI::SimpleItem_RichSearchResult *)((char *)this + 8);
  *((void *)v14 + 12) = 0;
  if (v15)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v14);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SimpleItem_RichSearchResult::InternalSerializeWithCachedSizesToArray(SnippetUI::SimpleItem_RichSearchResult *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::SimpleItem_RichSearchResult *)&SnippetUI::_SimpleItem_RichSearchResult_default_instance_) {
    goto LABEL_121;
  }
  uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
    }
    char *v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v12 = v5 + 2;
        do
        {
          uint64_t v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      unint64_t v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  int v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  if (!v16) {
    goto LABEL_26;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    int v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  }
  char *v5 = 18;
  unsigned int v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    unsigned int v19 = v17 >> 7;
    if (v17 >> 14)
    {
      uint64_t v21 = v5 + 2;
      do
      {
        unsigned int v22 = v21;
        *v21++ = v19 | 0x80;
        unsigned int v23 = v19 >> 7;
        unsigned int v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      unsigned int v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *uint64_t v21 = v23;
      goto LABEL_25;
    }
    unint64_t v5[2] = v19;
    uint64_t v18 = 3;
  }
  else
  {
    v5[1] = v17;
    uint64_t v18 = 2;
  }
  unsigned int v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  int v25 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
  if (!v25) {
    goto LABEL_38;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    int v25 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
  }
  char *v5 = 26;
  unsigned int v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    unsigned int v28 = v26 >> 7;
    if (v26 >> 14)
    {
      unint64_t v30 = v5 + 2;
      do
      {
        char v31 = v30;
        *v30++ = v28 | 0x80;
        unsigned int v32 = v28 >> 7;
        unsigned int v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      unsigned int v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      unsigned char *v30 = v32;
      goto LABEL_37;
    }
    unint64_t v5[2] = v28;
    uint64_t v27 = 3;
  }
  else
  {
    v5[1] = v26;
    uint64_t v27 = 2;
  }
  unsigned int v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  uint64_t v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  unsigned int v34 = (SnippetUI::TextProperty *)*((void *)this + 7);
  if (!v34) {
    goto LABEL_50;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unsigned int v34 = (SnippetUI::TextProperty *)*((void *)this + 7);
  }
  char *v5 = 34;
  unsigned int v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    unsigned int v37 = v35 >> 7;
    if (v35 >> 14)
    {
      long long v39 = v5 + 2;
      do
      {
        char v40 = v39;
        *v39++ = v37 | 0x80;
        unsigned int v41 = v37 >> 7;
        unsigned int v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      uint64_t v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      unsigned char *v39 = v41;
      goto LABEL_49;
    }
    unint64_t v5[2] = v37;
    uint64_t v36 = 3;
  }
  else
  {
    v5[1] = v35;
    uint64_t v36 = 2;
  }
  uint64_t v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  uint64_t v43 = (SnippetUI::MultilineTextProperty *)*((void *)this + 8);
  if (!v43) {
    goto LABEL_62;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    uint64_t v43 = (SnippetUI::MultilineTextProperty *)*((void *)this + 8);
  }
  char *v5 = 42;
  unsigned int v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    unsigned int v46 = v44 >> 7;
    if (v44 >> 14)
    {
      uint64_t v48 = v5 + 2;
      do
      {
        unsigned int v49 = v48;
        *v48++ = v46 | 0x80;
        unsigned int v50 = v46 >> 7;
        unsigned int v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      uint64_t v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *uint64_t v48 = v50;
      goto LABEL_61;
    }
    unint64_t v5[2] = v46;
    uint64_t v45 = 3;
  }
  else
  {
    v5[1] = v44;
    uint64_t v45 = 2;
  }
  uint64_t v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  uint64_t v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  unint64_t v52 = (SnippetUI::TextProperty *)*((void *)this + 9);
  if (!v52) {
    goto LABEL_74;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unint64_t v52 = (SnippetUI::TextProperty *)*((void *)this + 9);
  }
  char *v5 = 50;
  unsigned int v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    unsigned int v55 = v53 >> 7;
    if (v53 >> 14)
    {
      char v57 = v5 + 2;
      do
      {
        uint64_t v58 = v57;
        *v57++ = v55 | 0x80;
        unsigned int v59 = v55 >> 7;
        unsigned int v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      unsigned int v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      unsigned char *v57 = v59;
      goto LABEL_73;
    }
    unint64_t v5[2] = v55;
    uint64_t v54 = 3;
  }
  else
  {
    v5[1] = v53;
    uint64_t v54 = 2;
  }
  unsigned int v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  unsigned int v61 = (SnippetUI::TextProperty *)*((void *)this + 10);
  if (!v61) {
    goto LABEL_86;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unsigned int v61 = (SnippetUI::TextProperty *)*((void *)this + 10);
  }
  char *v5 = 58;
  unsigned int v62 = *((_DWORD *)v61 + 15);
  if (v62 > 0x7F)
  {
    v5[1] = v62 | 0x80;
    unsigned int v64 = v62 >> 7;
    if (v62 >> 14)
    {
      uint64_t v66 = v5 + 2;
      do
      {
        uint64_t v67 = v66;
        *v66++ = v64 | 0x80;
        unsigned int v68 = v64 >> 7;
        unsigned int v69 = v64 >> 14;
        v64 >>= 7;
      }
      while (v69);
      unsigned int v65 = (google::protobuf::UnknownFieldSet *)(v67 + 2);
      unsigned char *v66 = v68;
      goto LABEL_85;
    }
    unint64_t v5[2] = v64;
    uint64_t v63 = 3;
  }
  else
  {
    v5[1] = v62;
    uint64_t v63 = 2;
  }
  unsigned int v65 = (google::protobuf::UnknownFieldSet *)&v5[v63];
LABEL_85:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v61, v65, a3, a4);
LABEL_86:
  uint64_t v70 = (SnippetUI::TextProperty *)*((void *)this + 11);
  if (!v70) {
    goto LABEL_98;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    uint64_t v70 = (SnippetUI::TextProperty *)*((void *)this + 11);
  }
  char *v5 = 66;
  unsigned int v71 = *((_DWORD *)v70 + 15);
  if (v71 > 0x7F)
  {
    v5[1] = v71 | 0x80;
    unsigned int v73 = v71 >> 7;
    if (v71 >> 14)
    {
      unint64_t v75 = v5 + 2;
      do
      {
        char v76 = v75;
        *v75++ = v73 | 0x80;
        unsigned int v77 = v73 >> 7;
        unsigned int v78 = v73 >> 14;
        v73 >>= 7;
      }
      while (v78);
      uint64_t v74 = (google::protobuf::UnknownFieldSet *)(v76 + 2);
      *unint64_t v75 = v77;
      goto LABEL_97;
    }
    unint64_t v5[2] = v73;
    uint64_t v72 = 3;
  }
  else
  {
    v5[1] = v71;
    uint64_t v72 = 2;
  }
  uint64_t v74 = (google::protobuf::UnknownFieldSet *)&v5[v72];
LABEL_97:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v70, v74, a3, a4);
LABEL_98:
  char v79 = (SnippetUI::VisualProperty *)*((void *)this + 12);
  if (!v79) {
    goto LABEL_110;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    char v79 = (SnippetUI::VisualProperty *)*((void *)this + 12);
  }
  char *v5 = 74;
  unsigned int v80 = *((_DWORD *)v79 + 15);
  if (v80 > 0x7F)
  {
    v5[1] = v80 | 0x80;
    unsigned int v82 = v80 >> 7;
    if (v80 >> 14)
    {
      uint64_t v84 = v5 + 2;
      do
      {
        uint64_t v85 = v84;
        *v84++ = v82 | 0x80;
        unsigned int v86 = v82 >> 7;
        unsigned int v87 = v82 >> 14;
        v82 >>= 7;
      }
      while (v87);
      uint64_t v83 = (google::protobuf::UnknownFieldSet *)(v85 + 2);
      unsigned char *v84 = v86;
      goto LABEL_109;
    }
    unint64_t v5[2] = v82;
    uint64_t v81 = 3;
  }
  else
  {
    v5[1] = v80;
    uint64_t v81 = 2;
  }
  uint64_t v83 = (google::protobuf::UnknownFieldSet *)&v5[v81];
LABEL_109:
  uint64_t v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v79, v83, a3, a4);
LABEL_110:
  uint64_t v88 = (SnippetUI::ActionProperty *)*((void *)this + 13);
  if (v88)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      uint64_t v88 = (SnippetUI::ActionProperty *)*((void *)this + 13);
    }
    char *v5 = 82;
    unsigned int v89 = *((_DWORD *)v88 + 12);
    if (v89 > 0x7F)
    {
      v5[1] = v89 | 0x80;
      unsigned int v91 = v89 >> 7;
      if (v89 >> 14)
      {
        std::string v92 = v5 + 2;
        do
        {
          std::string v93 = v92;
          *v92++ = v91 | 0x80;
          unsigned int v94 = v91 >> 7;
          unsigned int v95 = v91 >> 14;
          v91 >>= 7;
        }
        while (v95);
        uint64_t v90 = (google::protobuf::UnknownFieldSet *)(v93 + 2);
        unsigned char *v92 = v94;
      }
      else
      {
        unint64_t v5[2] = v91;
        uint64_t v90 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v89;
      uint64_t v90 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v88, v90, a3, a4);
  }
LABEL_121:
  size_t v96 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v96 + 23) < 0)
  {
    unint64_t v97 = (const char *)*((void *)v96 + 1);
    if (!v97) {
      goto LABEL_127;
    }
    size_t v96 = *(google::protobuf::internal **)v96;
    goto LABEL_126;
  }
  unint64_t v97 = (const char *)*((unsigned __int8 *)v96 + 23);
  if (*((unsigned char *)v96 + 23))
  {
LABEL_126:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v96, v97, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_RichSearchResult.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 11, *((const void ***)this + 2), v5);
  }
LABEL_127:
  int v98 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v98 + 23) < 0)
  {
    uint64_t v99 = (const char *)*((void *)v98 + 1);
    if (!v99) {
      goto LABEL_133;
    }
    int v98 = *(google::protobuf::internal **)v98;
    goto LABEL_132;
  }
  uint64_t v99 = (const char *)*((unsigned __int8 *)v98 + 23);
  if (*((unsigned char *)v98 + 23))
  {
LABEL_132:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v98, v99, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_RichSearchResult.link_identifier");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 12, *((const void ***)this + 3), v5);
  }
LABEL_133:
  uint64_t v100 = *((void *)this + 1);
  if ((v100 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v100 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::SimpleItem_RichSearchResult::_InternalParse(SnippetUI::SimpleItem_RichSearchResult *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v22 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  uint64_t v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23))) {
      return v22;
    }
    TagFallback = (google::protobuf::internal *)((char *)v22 + 1);
    unsigned int v10 = (char *)*(unsigned __int8 *)v22;
    if ((*(char *)v22 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
      unsigned int v22 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, v10);
    unsigned int v22 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_55;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 4);
        if (v11) {
          goto LABEL_37;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        goto LABEL_36;
      case 2u:
        if (v10 != 18) {
          goto LABEL_55;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 5);
        if (v11) {
          goto LABEL_37;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v11;
        goto LABEL_36;
      case 3u:
        if (v10 != 26) {
          goto LABEL_55;
        }
        uint64_t v12 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
        if (v12) {
          goto LABEL_26;
        }
        uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 6) = v12;
        goto LABEL_25;
      case 4u:
        if (v10 != 34) {
          goto LABEL_55;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 7);
        if (v11) {
          goto LABEL_37;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 7) = v11;
        goto LABEL_36;
      case 5u:
        if (v10 != 42) {
          goto LABEL_55;
        }
        uint64_t v12 = (SnippetUI::MultilineTextProperty *)*((void *)this + 8);
        if (v12) {
          goto LABEL_26;
        }
        uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 8) = v12;
LABEL_25:
        TagFallback = v22;
LABEL_26:
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_60;
      case 6u:
        if (v10 != 50) {
          goto LABEL_55;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 9);
        if (v11) {
          goto LABEL_37;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 9) = v11;
        goto LABEL_36;
      case 7u:
        if (v10 != 58) {
          goto LABEL_55;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 10);
        if (v11) {
          goto LABEL_37;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 10) = v11;
        goto LABEL_36;
      case 8u:
        if (v10 != 66) {
          goto LABEL_55;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 11);
        if (v11) {
          goto LABEL_37;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 11) = v11;
LABEL_36:
        TagFallback = v22;
LABEL_37:
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_60;
      case 9u:
        if (v10 != 74) {
          goto LABEL_55;
        }
        unsigned int v14 = (SnippetUI::VisualProperty *)*((void *)this + 12);
        if (!v14)
        {
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((void *)this + 12) = v14;
          TagFallback = v22;
        }
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_60;
      case 0xAu:
        if (v10 != 82) {
          goto LABEL_55;
        }
        unsigned int v15 = (SnippetUI::ActionProperty *)*((void *)this + 13);
        if (!v15)
        {
          unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 13) = v15;
          TagFallback = v22;
        }
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_60;
      case 0xBu:
        if (v10 != 90) {
          goto LABEL_55;
        }
        int v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v17 = (std::string::value_type *)TagFallback;
        uint64_t v18 = a3;
        unsigned int v19 = "SnippetUI.SimpleItem_RichSearchResult.component_name";
        goto LABEL_54;
      case 0xCu:
        if (v10 != 98) {
          goto LABEL_55;
        }
        int v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v17 = (std::string::value_type *)TagFallback;
        uint64_t v18 = a3;
        unsigned int v19 = "SnippetUI.SimpleItem_RichSearchResult.link_identifier";
LABEL_54:
        uint64_t v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_60;
      default:
LABEL_55:
        if (v10) {
          BOOL v20 = (v10 & 7) == 4;
        }
        else {
          BOOL v20 = 1;
        }
        if (v20)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        uint64_t v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_60:
        unsigned int v22 = (google::protobuf::internal *)v13;
        if (v13) {
          continue;
        }
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::GetCachedSize(SnippetUI::SimpleItem_RichSearchResult *this)
{
  return *((unsigned int *)this + 28);
}

char *SnippetUI::SimpleItem_RichSearchResult::ByteSizeLong(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SimpleItem_RichSearchResult *)&SnippetUI::_SimpleItem_RichSearchResult_default_instance_)
  {
    uint64_t v9 = (SnippetUI::TextProperty *)*((void *)this + 4);
    if (v9)
    {
      unsigned int v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 5);
    if (v11)
    {
      uint64_t v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v13 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
    if (v13)
    {
      unsigned int v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v14[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v15 = (SnippetUI::TextProperty *)*((void *)this + 7);
    if (v15)
    {
      int v16 = SnippetUI::TextProperty::ByteSizeLong(v15);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v16[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v17 = (SnippetUI::MultilineTextProperty *)*((void *)this + 8);
    if (v17)
    {
      uint64_t v18 = SnippetUI::MultilineTextProperty::ByteSizeLong(v17);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v18[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v19 = (SnippetUI::TextProperty *)*((void *)this + 9);
    if (v19)
    {
      BOOL v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v20[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v21 = (SnippetUI::TextProperty *)*((void *)this + 10);
    if (v21)
    {
      unsigned int v22 = SnippetUI::TextProperty::ByteSizeLong(v21);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v22[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v23 = (SnippetUI::TextProperty *)*((void *)this + 11);
    if (v23)
    {
      unsigned int v24 = SnippetUI::TextProperty::ByteSizeLong(v23);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v24[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6)];
    }
    int v25 = (SnippetUI::VisualProperty *)*((void *)this + 12);
    if (v25)
    {
      unsigned int v26 = SnippetUI::VisualProperty::ByteSizeLong(v25);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v26[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v27 = (SnippetUI::ActionProperty *)*((void *)this + 13);
    if (v27)
    {
      unsigned int v28 = SnippetUI::ActionProperty::ByteSizeLong(v27);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v28[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SimpleItem_RichSearchResult *)((char *)this + 8), v5, (_DWORD *)this + 28);
  }
  else
  {
    *((_DWORD *)this + 28) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::IsInitialized(SnippetUI::SimpleItem_RichSearchResult *this)
{
  return 1;
}

SnippetUI::SimpleItem_RichSearchResult *SnippetUI::SimpleItem_RichSearchResult::New(SnippetUI::SimpleItem_RichSearchResult *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_RichSearchResult>(a2);
}

SnippetUI::SimpleItem_RichSearchResult *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_RichSearchResult>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::SimpleItem_RichSearchResult *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x78uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_RichSearchResult>);
  }
  SnippetUI::SimpleItem_RichSearchResult::SimpleItem_RichSearchResult(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5E3B340(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40E3061A4BLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_RichSearchResult>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::SimpleItem_RichSearchResult *SnippetUI::SimpleItem_RichSearchResult::New(SnippetUI::SimpleItem_RichSearchResult *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_RichSearchResult>(0);
}

void SnippetUI::SimpleItem_RichSearchResult::~SimpleItem_RichSearchResult(SnippetUI::SimpleItem_RichSearchResult *this)
{
  SnippetUI::SimpleItem_RichSearchResult::~SimpleItem_RichSearchResult(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(void *)this = &unk_1F211E8F8;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SimpleItem_RichSearchResult *)&SnippetUI::_SimpleItem_RichSearchResult_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 6);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = *((void *)this + 7);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    unsigned int v10 = *((void *)this + 8);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = *((void *)this + 9);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v12 = *((void *)this + 10);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t v13 = *((void *)this + 11);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    unsigned int v14 = *((void *)this + 12);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    unsigned int v15 = *((void *)this + 13);
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_SimpleItem_Rich_SimpleItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", a4);
  SnippetUI::SimpleItem_Rich::SimpleItem_Rich((SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SimpleItem_Rich_default_instance_, v4);
  qword_1EB68F870 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68F878 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68F880 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB68F888 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68F890 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB68F898 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EB68F8A0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB68F8A8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68F8B0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68F8B8 = &SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::SimpleItem_Rich *SnippetUI::SimpleItem_Rich::SimpleItem_Rich(SnippetUI::SimpleItem_Rich *this)
{
  *(void *)this = &unk_1F211E5F8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  if (atomic_load_explicit(scc_info_SimpleItem_Rich_SimpleItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Rich_SimpleItem_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  return this;
}

void sub_1C5E3B778(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SimpleItem_Rich::GetMetadata(SnippetUI::SimpleItem_Rich *this)
{
  return qword_1EA3D8B58;
}

uint64_t SnippetUI::SimpleItem_Rich::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 112) = a2;
  return this;
}

void SnippetUI::SimpleItem_Rich::MergeFrom(SnippetUI::SimpleItem_Rich *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 1556);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::SimpleItem_Rich::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5E3B894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Rich::MergeFrom(SnippetUI::SimpleItem_Rich *this, const SnippetUI::SimpleItem_Rich *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v41, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 1571);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v41, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v40, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v41[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_Rich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_)
  {
    unsigned int v10 = (int **)*((void *)a2 + 4);
    if (v10)
    {
      uint64_t v11 = (int **)*((void *)this + 4);
      if (!v11)
      {
        uint64_t v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        unsigned int v10 = (int **)*((void *)a2 + 4);
      }
      if (v10) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    uint64_t v13 = (int **)*((void *)a2 + 5);
    if (v13)
    {
      unsigned int v14 = (int **)*((void *)this + 5);
      if (!v14)
      {
        unsigned int v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v14;
        uint64_t v13 = (int **)*((void *)a2 + 5);
      }
      if (v13) {
        unsigned int v15 = v13;
      }
      else {
        unsigned int v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    int v16 = (int **)*((void *)a2 + 6);
    if (v16)
    {
      unsigned int v17 = (int **)*((void *)this + 6);
      if (!v17)
      {
        unsigned int v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 6) = v17;
        int v16 = (int **)*((void *)a2 + 6);
      }
      if (v16) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    unsigned int v19 = (int **)*((void *)a2 + 7);
    if (v19)
    {
      BOOL v20 = (int **)*((void *)this + 7);
      if (!v20)
      {
        BOOL v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 7) = v20;
        unsigned int v19 = (int **)*((void *)a2 + 7);
      }
      if (v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v20, v21);
    }
    unsigned int v22 = (int **)*((void *)a2 + 8);
    if (v22)
    {
      unsigned int v23 = (int **)*((void *)this + 8);
      if (!v23)
      {
        unsigned int v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 8) = v23;
        unsigned int v22 = (int **)*((void *)a2 + 8);
      }
      if (v22) {
        unsigned int v24 = v22;
      }
      else {
        unsigned int v24 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v23, v24);
    }
    int v25 = (int **)*((void *)a2 + 9);
    if (v25)
    {
      unsigned int v26 = (int **)*((void *)this + 9);
      if (!v26)
      {
        unsigned int v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 9) = v26;
        int v25 = (int **)*((void *)a2 + 9);
      }
      if (v25) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v26, v27);
    }
    unsigned int v28 = (int **)*((void *)a2 + 10);
    if (v28)
    {
      unsigned int v29 = (int **)*((void *)this + 10);
      if (!v29)
      {
        unsigned int v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 10) = v29;
        unsigned int v28 = (int **)*((void *)a2 + 10);
      }
      if (v28) {
        unint64_t v30 = v28;
      }
      else {
        unint64_t v30 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v29, v30);
    }
    char v31 = (int **)*((void *)a2 + 11);
    if (v31)
    {
      unsigned int v32 = (int **)*((void *)this + 11);
      if (!v32)
      {
        unsigned int v32 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 11) = v32;
        char v31 = (int **)*((void *)a2 + 11);
      }
      if (v31) {
        unsigned int v33 = v31;
      }
      else {
        unsigned int v33 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v32, v33);
    }
    unsigned int v34 = (int **)*((void *)a2 + 12);
    if (v34)
    {
      unsigned int v35 = (int **)*((void *)this + 12);
      if (!v35)
      {
        unsigned int v35 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 12) = v35;
        unsigned int v34 = (int **)*((void *)a2 + 12);
      }
      if (v34) {
        uint64_t v36 = v34;
      }
      else {
        uint64_t v36 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v35, v36);
    }
    unsigned int v37 = (int **)*((void *)a2 + 13);
    if (v37)
    {
      uint64_t v38 = (int **)*((void *)this + 13);
      if (!v38)
      {
        uint64_t v38 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 13) = v38;
        unsigned int v37 = (int **)*((void *)a2 + 13);
      }
      if (v37) {
        long long v39 = v37;
      }
      else {
        long long v39 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v38, v39);
    }
  }
}

void sub_1C5E3BB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Rich::CopyFrom(SnippetUI::SimpleItem_Rich *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Rich::Clear(this);
    SnippetUI::SimpleItem_Rich::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Rich::Clear(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 6) = 0;
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 7) = 0;
  uint64_t v8 = *((void *)this + 8);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 8) = 0;
  uint64_t v9 = *((void *)this + 9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 9) = 0;
  uint64_t v10 = *((void *)this + 10);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 10) = 0;
  uint64_t v11 = *((void *)this + 11);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *((void *)this + 11) = 0;
  uint64_t v12 = *((void *)this + 12);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  *((void *)this + 12) = 0;
  uint64_t v13 = *((void *)this + 13);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  char v15 = *((unsigned char *)this + 8);
  unsigned int v14 = (SnippetUI::SimpleItem_Rich *)((char *)this + 8);
  *((void *)v14 + 12) = 0;
  if (v15)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v14);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SimpleItem_Rich::InternalSerializeWithCachedSizesToArray(SnippetUI::SimpleItem_Rich *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_) {
    goto LABEL_85;
  }
  uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
    }
    char *v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v12 = v5 + 2;
        do
        {
          uint64_t v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      unint64_t v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  int v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  if (!v16) {
    goto LABEL_26;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    int v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  }
  char *v5 = 18;
  unsigned int v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    unsigned int v19 = v17 >> 7;
    if (v17 >> 14)
    {
      uint64_t v21 = v5 + 2;
      do
      {
        unsigned int v22 = v21;
        *v21++ = v19 | 0x80;
        unsigned int v23 = v19 >> 7;
        unsigned int v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      BOOL v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *uint64_t v21 = v23;
      goto LABEL_25;
    }
    unint64_t v5[2] = v19;
    uint64_t v18 = 3;
  }
  else
  {
    v5[1] = v17;
    uint64_t v18 = 2;
  }
  BOOL v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  int v25 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
  if (!v25) {
    goto LABEL_38;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    int v25 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
  }
  char *v5 = 26;
  unsigned int v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    unsigned int v28 = v26 >> 7;
    if (v26 >> 14)
    {
      unint64_t v30 = v5 + 2;
      do
      {
        char v31 = v30;
        *v30++ = v28 | 0x80;
        unsigned int v32 = v28 >> 7;
        unsigned int v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      unsigned int v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      unsigned char *v30 = v32;
      goto LABEL_37;
    }
    unint64_t v5[2] = v28;
    uint64_t v27 = 3;
  }
  else
  {
    v5[1] = v26;
    uint64_t v27 = 2;
  }
  unsigned int v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  uint64_t v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  unsigned int v34 = (SnippetUI::TextProperty *)*((void *)this + 7);
  if (!v34) {
    goto LABEL_50;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unsigned int v34 = (SnippetUI::TextProperty *)*((void *)this + 7);
  }
  char *v5 = 34;
  unsigned int v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    unsigned int v37 = v35 >> 7;
    if (v35 >> 14)
    {
      long long v39 = v5 + 2;
      do
      {
        char v40 = v39;
        *v39++ = v37 | 0x80;
        unsigned int v41 = v37 >> 7;
        unsigned int v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      uint64_t v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      unsigned char *v39 = v41;
      goto LABEL_49;
    }
    unint64_t v5[2] = v37;
    uint64_t v36 = 3;
  }
  else
  {
    v5[1] = v35;
    uint64_t v36 = 2;
  }
  uint64_t v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  uint64_t v43 = (SnippetUI::MultilineTextProperty *)*((void *)this + 8);
  if (!v43) {
    goto LABEL_62;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    uint64_t v43 = (SnippetUI::MultilineTextProperty *)*((void *)this + 8);
  }
  char *v5 = 42;
  unsigned int v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    unsigned int v46 = v44 >> 7;
    if (v44 >> 14)
    {
      uint64_t v48 = v5 + 2;
      do
      {
        unsigned int v49 = v48;
        *v48++ = v46 | 0x80;
        unsigned int v50 = v46 >> 7;
        unsigned int v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      uint64_t v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *uint64_t v48 = v50;
      goto LABEL_61;
    }
    unint64_t v5[2] = v46;
    uint64_t v45 = 3;
  }
  else
  {
    v5[1] = v44;
    uint64_t v45 = 2;
  }
  uint64_t v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  uint64_t v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  unint64_t v52 = (SnippetUI::VisualProperty *)*((void *)this + 9);
  if (!v52) {
    goto LABEL_74;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unint64_t v52 = (SnippetUI::VisualProperty *)*((void *)this + 9);
  }
  char *v5 = 50;
  unsigned int v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    unsigned int v55 = v53 >> 7;
    if (v53 >> 14)
    {
      char v57 = v5 + 2;
      do
      {
        uint64_t v58 = v57;
        *v57++ = v55 | 0x80;
        unsigned int v59 = v55 >> 7;
        unsigned int v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      unsigned int v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      unsigned char *v57 = v59;
      goto LABEL_73;
    }
    unint64_t v5[2] = v55;
    uint64_t v54 = 3;
  }
  else
  {
    v5[1] = v53;
    uint64_t v54 = 2;
  }
  unsigned int v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  uint64_t v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  unsigned int v61 = (SnippetUI::ActionProperty *)*((void *)this + 10);
  if (v61)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unsigned int v61 = (SnippetUI::ActionProperty *)*((void *)this + 10);
    }
    char *v5 = 58;
    unsigned int v62 = *((_DWORD *)v61 + 12);
    if (v62 > 0x7F)
    {
      v5[1] = v62 | 0x80;
      unsigned int v64 = v62 >> 7;
      if (v62 >> 14)
      {
        unsigned int v65 = v5 + 2;
        do
        {
          uint64_t v66 = v65;
          *v65++ = v64 | 0x80;
          unsigned int v67 = v64 >> 7;
          unsigned int v68 = v64 >> 14;
          v64 >>= 7;
        }
        while (v68);
        uint64_t v63 = (google::protobuf::UnknownFieldSet *)(v66 + 2);
        *unsigned int v65 = v67;
      }
      else
      {
        unint64_t v5[2] = v64;
        uint64_t v63 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v62;
      uint64_t v63 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v61, v63, a3, a4);
  }
LABEL_85:
  unsigned int v69 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v69 + 23) < 0)
  {
    uint64_t v70 = (const char *)*((void *)v69 + 1);
    if (!v70) {
      goto LABEL_91;
    }
    unsigned int v69 = *(google::protobuf::internal **)v69;
    goto LABEL_90;
  }
  uint64_t v70 = (const char *)*((unsigned __int8 *)v69 + 23);
  if (*((unsigned char *)v69 + 23))
  {
LABEL_90:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v69, v70, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Rich.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((const void ***)this + 2), v5);
  }
LABEL_91:
  if (this == (SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_) {
    goto LABEL_127;
  }
  unsigned int v71 = (SnippetUI::TextProperty *)*((void *)this + 11);
  if (v71)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unsigned int v71 = (SnippetUI::TextProperty *)*((void *)this + 11);
    }
    char *v5 = 74;
    unsigned int v72 = *((_DWORD *)v71 + 15);
    if (v72 > 0x7F)
    {
      v5[1] = v72 | 0x80;
      unsigned int v74 = v72 >> 7;
      if (v72 >> 14)
      {
        char v76 = v5 + 2;
        do
        {
          unsigned int v77 = v76;
          *v76++ = v74 | 0x80;
          unsigned int v78 = v74 >> 7;
          unsigned int v79 = v74 >> 14;
          v74 >>= 7;
        }
        while (v79);
        unint64_t v75 = (google::protobuf::UnknownFieldSet *)(v77 + 2);
        unsigned char *v76 = v78;
        goto LABEL_103;
      }
      unint64_t v5[2] = v74;
      uint64_t v73 = 3;
    }
    else
    {
      v5[1] = v72;
      uint64_t v73 = 2;
    }
    unint64_t v75 = (google::protobuf::UnknownFieldSet *)&v5[v73];
LABEL_103:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v71, v75, a3, a4);
  }
  unsigned int v80 = (SnippetUI::TextProperty *)*((void *)this + 12);
  if (!v80) {
    goto LABEL_116;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unsigned int v80 = (SnippetUI::TextProperty *)*((void *)this + 12);
  }
  char *v5 = 82;
  unsigned int v81 = *((_DWORD *)v80 + 15);
  if (v81 > 0x7F)
  {
    v5[1] = v81 | 0x80;
    unsigned int v83 = v81 >> 7;
    if (v81 >> 14)
    {
      uint64_t v85 = v5 + 2;
      do
      {
        unsigned int v86 = v85;
        *v85++ = v83 | 0x80;
        unsigned int v87 = v83 >> 7;
        unsigned int v88 = v83 >> 14;
        v83 >>= 7;
      }
      while (v88);
      uint64_t v84 = (google::protobuf::UnknownFieldSet *)(v86 + 2);
      *uint64_t v85 = v87;
      goto LABEL_115;
    }
    unint64_t v5[2] = v83;
    uint64_t v82 = 3;
  }
  else
  {
    v5[1] = v81;
    uint64_t v82 = 2;
  }
  uint64_t v84 = (google::protobuf::UnknownFieldSet *)&v5[v82];
LABEL_115:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v80, v84, a3, a4);
LABEL_116:
  unsigned int v89 = (SnippetUI::TextProperty *)*((void *)this + 13);
  if (v89)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unsigned int v89 = (SnippetUI::TextProperty *)*((void *)this + 13);
    }
    char *v5 = 90;
    unsigned int v90 = *((_DWORD *)v89 + 15);
    if (v90 > 0x7F)
    {
      v5[1] = v90 | 0x80;
      unsigned int v92 = v90 >> 7;
      if (v90 >> 14)
      {
        std::string v93 = v5 + 2;
        do
        {
          unsigned int v94 = v93;
          *v93++ = v92 | 0x80;
          unsigned int v95 = v92 >> 7;
          unsigned int v96 = v92 >> 14;
          v92 >>= 7;
        }
        while (v96);
        unsigned int v91 = (google::protobuf::UnknownFieldSet *)(v94 + 2);
        *std::string v93 = v95;
      }
      else
      {
        unint64_t v5[2] = v92;
        unsigned int v91 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v90;
      unsigned int v91 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v89, v91, a3, a4);
  }
LABEL_127:
  unint64_t v97 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v97 + 23) < 0)
  {
    int v98 = (const char *)*((void *)v97 + 1);
    if (!v98) {
      goto LABEL_133;
    }
    unint64_t v97 = *(google::protobuf::internal **)v97;
    goto LABEL_132;
  }
  int v98 = (const char *)*((unsigned __int8 *)v97 + 23);
  if (*((unsigned char *)v97 + 23))
  {
LABEL_132:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v97, v98, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Rich.link_identifier");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 12, *((const void ***)this + 3), v5);
  }
LABEL_133:
  uint64_t v99 = *((void *)this + 1);
  if ((v99 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v99 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::SimpleItem_Rich::_InternalParse(SnippetUI::SimpleItem_Rich *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v22 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  uint64_t v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23))) {
      return v22;
    }
    TagFallback = (google::protobuf::internal *)((char *)v22 + 1);
    unsigned int v10 = (char *)*(unsigned __int8 *)v22;
    if ((*(char *)v22 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
      unsigned int v22 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, v10);
    unsigned int v22 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_55;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 4);
        if (v11) {
          goto LABEL_49;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        goto LABEL_48;
      case 2u:
        if (v10 != 18) {
          goto LABEL_55;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 5);
        if (v11) {
          goto LABEL_49;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v11;
        goto LABEL_48;
      case 3u:
        if (v10 != 26) {
          goto LABEL_55;
        }
        uint64_t v12 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
        if (v12) {
          goto LABEL_26;
        }
        uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 6) = v12;
        goto LABEL_25;
      case 4u:
        if (v10 != 34) {
          goto LABEL_55;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 7);
        if (v11) {
          goto LABEL_49;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 7) = v11;
        goto LABEL_48;
      case 5u:
        if (v10 != 42) {
          goto LABEL_55;
        }
        uint64_t v12 = (SnippetUI::MultilineTextProperty *)*((void *)this + 8);
        if (v12) {
          goto LABEL_26;
        }
        uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 8) = v12;
LABEL_25:
        TagFallback = v22;
LABEL_26:
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_60;
      case 6u:
        if (v10 != 50) {
          goto LABEL_55;
        }
        unsigned int v14 = (SnippetUI::VisualProperty *)*((void *)this + 9);
        if (!v14)
        {
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((void *)this + 9) = v14;
          TagFallback = v22;
        }
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_60;
      case 7u:
        if (v10 != 58) {
          goto LABEL_55;
        }
        unsigned int v15 = (SnippetUI::ActionProperty *)*((void *)this + 10);
        if (!v15)
        {
          unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 10) = v15;
          TagFallback = v22;
        }
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_60;
      case 8u:
        if (v10 != 66) {
          goto LABEL_55;
        }
        int v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v17 = (std::string::value_type *)TagFallback;
        uint64_t v18 = a3;
        unsigned int v19 = "SnippetUI.SimpleItem_Rich.component_name";
        goto LABEL_54;
      case 9u:
        if (v10 != 74) {
          goto LABEL_55;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 11);
        if (v11) {
          goto LABEL_49;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 11) = v11;
        goto LABEL_48;
      case 0xAu:
        if (v10 != 82) {
          goto LABEL_55;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 12);
        if (v11) {
          goto LABEL_49;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 12) = v11;
        goto LABEL_48;
      case 0xBu:
        if (v10 != 90) {
          goto LABEL_55;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 13);
        if (v11) {
          goto LABEL_49;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 13) = v11;
LABEL_48:
        TagFallback = v22;
LABEL_49:
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_60;
      case 0xCu:
        if (v10 != 98) {
          goto LABEL_55;
        }
        int v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v17 = (std::string::value_type *)TagFallback;
        uint64_t v18 = a3;
        unsigned int v19 = "SnippetUI.SimpleItem_Rich.link_identifier";
LABEL_54:
        uint64_t v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_60;
      default:
LABEL_55:
        if (v10) {
          BOOL v20 = (v10 & 7) == 4;
        }
        else {
          BOOL v20 = 1;
        }
        if (v20)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        uint64_t v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_60:
        unsigned int v22 = (google::protobuf::internal *)v13;
        if (v13) {
          continue;
        }
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::SimpleItem_Rich::GetCachedSize(SnippetUI::SimpleItem_Rich *this)
{
  return *((unsigned int *)this + 28);
}

char *SnippetUI::SimpleItem_Rich::ByteSizeLong(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_)
  {
    uint64_t v9 = (SnippetUI::TextProperty *)*((void *)this + 4);
    if (v9)
    {
      unsigned int v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 5);
    if (v11)
    {
      uint64_t v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v13 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
    if (v13)
    {
      unsigned int v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v14[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v15 = (SnippetUI::TextProperty *)*((void *)this + 7);
    if (v15)
    {
      int v16 = SnippetUI::TextProperty::ByteSizeLong(v15);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v16[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v17 = (SnippetUI::MultilineTextProperty *)*((void *)this + 8);
    if (v17)
    {
      uint64_t v18 = SnippetUI::MultilineTextProperty::ByteSizeLong(v17);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v18[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v19 = (SnippetUI::VisualProperty *)*((void *)this + 9);
    if (v19)
    {
      BOOL v20 = SnippetUI::VisualProperty::ByteSizeLong(v19);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v20[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v21 = (SnippetUI::ActionProperty *)*((void *)this + 10);
    if (v21)
    {
      unsigned int v22 = SnippetUI::ActionProperty::ByteSizeLong(v21);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v22[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v23 = (SnippetUI::TextProperty *)*((void *)this + 11);
    if (v23)
    {
      unsigned int v24 = SnippetUI::TextProperty::ByteSizeLong(v23);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v24[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6)];
    }
    int v25 = (SnippetUI::TextProperty *)*((void *)this + 12);
    if (v25)
    {
      unsigned int v26 = SnippetUI::TextProperty::ByteSizeLong(v25);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v26[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v27 = (SnippetUI::TextProperty *)*((void *)this + 13);
    if (v27)
    {
      unsigned int v28 = SnippetUI::TextProperty::ByteSizeLong(v27);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v28[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SimpleItem_Rich *)((char *)this + 8), v5, (_DWORD *)this + 28);
  }
  else
  {
    *((_DWORD *)this + 28) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::SimpleItem_Rich::IsInitialized(SnippetUI::SimpleItem_Rich *this)
{
  return 1;
}

SnippetUI::SimpleItem_Rich *SnippetUI::SimpleItem_Rich::New(SnippetUI::SimpleItem_Rich *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Rich>(a2);
}

SnippetUI::SimpleItem_Rich *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Rich>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::SimpleItem_Rich *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x78uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Rich>);
  }
  SnippetUI::SimpleItem_Rich::SimpleItem_Rich(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5E3CD44(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40E3061A4BLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Rich>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::SimpleItem_Rich *SnippetUI::SimpleItem_Rich::New(SnippetUI::SimpleItem_Rich *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Rich>(0);
}

void SnippetUI::SimpleItem_Rich::~SimpleItem_Rich(SnippetUI::SimpleItem_Rich *this)
{
  SnippetUI::SimpleItem_Rich::~SimpleItem_Rich(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(void *)this = &unk_1F211E5F8;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 6);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = *((void *)this + 7);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    unsigned int v10 = *((void *)this + 8);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = *((void *)this + 9);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v12 = *((void *)this + 10);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t v13 = *((void *)this + 11);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    unsigned int v14 = *((void *)this + 12);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    unsigned int v15 = *((void *)this + 13);
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_SimpleItem_ReverseRich_SimpleItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", a4);
  SnippetUI::SimpleItem_ReverseRich::SimpleItem_ReverseRich((SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SimpleItem_ReverseRich_default_instance_, v4);
  qword_1EB68FF20 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68FF28 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68FF30 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB68FF38 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EB68FF40 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB68FF48 = &SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::SimpleItem_ReverseRich *SnippetUI::SimpleItem_ReverseRich::SimpleItem_ReverseRich(SnippetUI::SimpleItem_ReverseRich *this)
{
  *(void *)this = &unk_1F211E6B8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  if (atomic_load_explicit(scc_info_SimpleItem_ReverseRich_SimpleItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_ReverseRich_SimpleItem_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  return this;
}

void sub_1C5E3D170(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SimpleItem_ReverseRich::GetMetadata(SnippetUI::SimpleItem_ReverseRich *this)
{
  return qword_1EA3D8B68;
}

uint64_t SnippetUI::SimpleItem_ReverseRich::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

void SnippetUI::SimpleItem_ReverseRich::MergeFrom(SnippetUI::SimpleItem_ReverseRich *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 2103);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::SimpleItem_ReverseRich::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5E3D28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_ReverseRich::MergeFrom(SnippetUI::SimpleItem_ReverseRich *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v29, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 2118);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v29, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v28, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v29[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_ReverseRich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_)
  {
    unsigned int v10 = (int **)*((void *)a2 + 4);
    if (v10)
    {
      uint64_t v11 = (int **)*((void *)this + 4);
      if (!v11)
      {
        uint64_t v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        unsigned int v10 = (int **)*((void *)a2 + 4);
      }
      if (v10) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    uint64_t v13 = (int **)*((void *)a2 + 5);
    if (v13)
    {
      unsigned int v14 = (int **)*((void *)this + 5);
      if (!v14)
      {
        unsigned int v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v14;
        uint64_t v13 = (int **)*((void *)a2 + 5);
      }
      if (v13) {
        unsigned int v15 = v13;
      }
      else {
        unsigned int v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    int v16 = (int **)*((void *)a2 + 6);
    if (v16)
    {
      unsigned int v17 = (int **)*((void *)this + 6);
      if (!v17)
      {
        unsigned int v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 6) = v17;
        int v16 = (int **)*((void *)a2 + 6);
      }
      if (v16) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    unsigned int v19 = (int **)*((void *)a2 + 7);
    if (v19)
    {
      BOOL v20 = (int **)*((void *)this + 7);
      if (!v20)
      {
        BOOL v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 7) = v20;
        unsigned int v19 = (int **)*((void *)a2 + 7);
      }
      if (v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v20, v21);
    }
    unsigned int v22 = (int **)*((void *)a2 + 8);
    if (v22)
    {
      unsigned int v23 = (int **)*((void *)this + 8);
      if (!v23)
      {
        unsigned int v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 8) = v23;
        unsigned int v22 = (int **)*((void *)a2 + 8);
      }
      if (v22) {
        unsigned int v24 = v22;
      }
      else {
        unsigned int v24 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v23, v24);
    }
    int v25 = (int **)*((void *)a2 + 9);
    if (v25)
    {
      unsigned int v26 = (int **)*((void *)this + 9);
      if (!v26)
      {
        unsigned int v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 9) = v26;
        int v25 = (int **)*((void *)a2 + 9);
      }
      if (v25) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
  }
}

void sub_1C5E3D4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_ReverseRich::CopyFrom(SnippetUI::SimpleItem_ReverseRich *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_ReverseRich::Clear(this);
    SnippetUI::SimpleItem_ReverseRich::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_ReverseRich::Clear(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 6) = 0;
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 7) = 0;
  uint64_t v8 = *((void *)this + 8);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 8) = 0;
  uint64_t v9 = *((void *)this + 9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  char v11 = *((unsigned char *)this + 8);
  unsigned int v10 = (SnippetUI::SimpleItem_ReverseRich *)((char *)this + 8);
  *((void *)v10 + 8) = 0;
  if (v11)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v10);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SimpleItem_ReverseRich::InternalSerializeWithCachedSizesToArray(SnippetUI::SimpleItem_ReverseRich *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_) {
    goto LABEL_61;
  }
  uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
    }
    char *v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v12 = v5 + 2;
        do
        {
          uint64_t v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        char v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      unint64_t v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    char v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  int v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  if (!v16) {
    goto LABEL_26;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    int v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  }
  char *v5 = 18;
  unsigned int v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    unsigned int v19 = v17 >> 7;
    if (v17 >> 14)
    {
      uint64_t v21 = v5 + 2;
      do
      {
        unsigned int v22 = v21;
        *v21++ = v19 | 0x80;
        unsigned int v23 = v19 >> 7;
        unsigned int v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      BOOL v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *uint64_t v21 = v23;
      goto LABEL_25;
    }
    unint64_t v5[2] = v19;
    uint64_t v18 = 3;
  }
  else
  {
    v5[1] = v17;
    uint64_t v18 = 2;
  }
  BOOL v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  int v25 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
  if (!v25) {
    goto LABEL_38;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    int v25 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
  }
  char *v5 = 26;
  unsigned int v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    unsigned int v28 = v26 >> 7;
    if (v26 >> 14)
    {
      unint64_t v30 = v5 + 2;
      do
      {
        char v31 = v30;
        *v30++ = v28 | 0x80;
        unsigned int v32 = v28 >> 7;
        unsigned int v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      unsigned int v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      unsigned char *v30 = v32;
      goto LABEL_37;
    }
    unint64_t v5[2] = v28;
    uint64_t v27 = 3;
  }
  else
  {
    v5[1] = v26;
    uint64_t v27 = 2;
  }
  unsigned int v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  uint64_t v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  unsigned int v34 = (SnippetUI::VisualProperty *)*((void *)this + 7);
  if (!v34) {
    goto LABEL_50;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unsigned int v34 = (SnippetUI::VisualProperty *)*((void *)this + 7);
  }
  char *v5 = 34;
  unsigned int v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    unsigned int v37 = v35 >> 7;
    if (v35 >> 14)
    {
      long long v39 = v5 + 2;
      do
      {
        char v40 = v39;
        *v39++ = v37 | 0x80;
        unsigned int v41 = v37 >> 7;
        unsigned int v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      uint64_t v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      unsigned char *v39 = v41;
      goto LABEL_49;
    }
    unint64_t v5[2] = v37;
    uint64_t v36 = 3;
  }
  else
  {
    v5[1] = v35;
    uint64_t v36 = 2;
  }
  uint64_t v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  uint64_t v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  uint64_t v43 = (SnippetUI::ActionProperty *)*((void *)this + 8);
  if (v43)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      uint64_t v43 = (SnippetUI::ActionProperty *)*((void *)this + 8);
    }
    char *v5 = 42;
    unsigned int v44 = *((_DWORD *)v43 + 12);
    if (v44 > 0x7F)
    {
      v5[1] = v44 | 0x80;
      unsigned int v46 = v44 >> 7;
      if (v44 >> 14)
      {
        uint64_t v47 = v5 + 2;
        do
        {
          uint64_t v48 = v47;
          *v47++ = v46 | 0x80;
          unsigned int v49 = v46 >> 7;
          unsigned int v50 = v46 >> 14;
          v46 >>= 7;
        }
        while (v50);
        uint64_t v45 = (google::protobuf::UnknownFieldSet *)(v48 + 2);
        *uint64_t v47 = v49;
      }
      else
      {
        unint64_t v5[2] = v46;
        uint64_t v45 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v44;
      uint64_t v45 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v43, v45, a3, a4);
  }
LABEL_61:
  unsigned int v51 = (uint64_t *)*((void *)this + 2);
  if ((*((char *)v51 + 23) & 0x80000000) == 0)
  {
    unint64_t v52 = (const char *)*((unsigned __int8 *)v51 + 23);
    if (!*((unsigned char *)v51 + 23)) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  unint64_t v52 = (const char *)v51[1];
  if (v52)
  {
    unsigned int v51 = (uint64_t *)*v51;
LABEL_66:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v51, v52, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_ReverseRich.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((const void ***)this + 2), v5);
  }
LABEL_67:
  if (this != (SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_)
  {
    unsigned int v53 = (SnippetUI::TextProperty *)*((void *)this + 9);
    if (v53)
    {
      if ((unint64_t)v5 >= *(void *)a3)
      {
        uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        unsigned int v53 = (SnippetUI::TextProperty *)*((void *)this + 9);
      }
      char *v5 = 58;
      unsigned int v54 = *((_DWORD *)v53 + 15);
      if (v54 > 0x7F)
      {
        v5[1] = v54 | 0x80;
        unsigned int v56 = v54 >> 7;
        if (v54 >> 14)
        {
          char v57 = v5 + 2;
          do
          {
            uint64_t v58 = v57;
            *v57++ = v56 | 0x80;
            unsigned int v59 = v56 >> 7;
            unsigned int v60 = v56 >> 14;
            v56 >>= 7;
          }
          while (v60);
          unsigned int v55 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
          unsigned char *v57 = v59;
        }
        else
        {
          unint64_t v5[2] = v56;
          unsigned int v55 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v54;
        unsigned int v55 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v53, v55, a3, a4);
    }
  }
  unsigned int v61 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v61 + 23) < 0)
  {
    unsigned int v62 = (const char *)*((void *)v61 + 1);
    if (!v62) {
      goto LABEL_85;
    }
    unsigned int v61 = *(google::protobuf::internal **)v61;
    goto LABEL_84;
  }
  unsigned int v62 = (const char *)*((unsigned __int8 *)v61 + 23);
  if (*((unsigned char *)v61 + 23))
  {
LABEL_84:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v61, v62, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_ReverseRich.link_identifier");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((const void ***)this + 3), v5);
  }
LABEL_85:
  uint64_t v63 = *((void *)this + 1);
  if ((v63 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v63 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::SimpleItem_ReverseRich::_InternalParse(SnippetUI::SimpleItem_ReverseRich *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v22 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  uint64_t v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23))) {
      return v22;
    }
    TagFallback = (google::protobuf::internal *)((char *)v22 + 1);
    unsigned int v10 = (char *)*(unsigned __int8 *)v22;
    if ((*(char *)v22 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
      unsigned int v22 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, v10);
    unsigned int v22 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_42;
        }
        char v11 = (SnippetUI::TextProperty *)*((void *)this + 4);
        if (v11) {
          goto LABEL_36;
        }
        char v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        goto LABEL_35;
      case 2u:
        if (v10 != 18) {
          goto LABEL_42;
        }
        char v11 = (SnippetUI::TextProperty *)*((void *)this + 5);
        if (v11) {
          goto LABEL_36;
        }
        char v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v11;
        goto LABEL_35;
      case 3u:
        if (v10 != 26) {
          goto LABEL_42;
        }
        uint64_t v12 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
        if (!v12)
        {
          uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
          *((void *)this + 6) = v12;
          TagFallback = v22;
        }
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_47;
      case 4u:
        if (v10 != 34) {
          goto LABEL_42;
        }
        unsigned int v14 = (SnippetUI::VisualProperty *)*((void *)this + 7);
        if (!v14)
        {
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((void *)this + 7) = v14;
          TagFallback = v22;
        }
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_47;
      case 5u:
        if (v10 != 42) {
          goto LABEL_42;
        }
        unsigned int v15 = (SnippetUI::ActionProperty *)*((void *)this + 8);
        if (!v15)
        {
          unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 8) = v15;
          TagFallback = v22;
        }
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_47;
      case 6u:
        if (v10 != 50) {
          goto LABEL_42;
        }
        int v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v17 = (std::string::value_type *)TagFallback;
        uint64_t v18 = a3;
        unsigned int v19 = "SnippetUI.SimpleItem_ReverseRich.component_name";
        goto LABEL_41;
      case 7u:
        if (v10 != 58) {
          goto LABEL_42;
        }
        char v11 = (SnippetUI::TextProperty *)*((void *)this + 9);
        if (v11) {
          goto LABEL_36;
        }
        char v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 9) = v11;
LABEL_35:
        TagFallback = v22;
LABEL_36:
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_47;
      case 8u:
        if (v10 != 66) {
          goto LABEL_42;
        }
        int v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v17 = (std::string::value_type *)TagFallback;
        uint64_t v18 = a3;
        unsigned int v19 = "SnippetUI.SimpleItem_ReverseRich.link_identifier";
LABEL_41:
        uint64_t v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_47;
      default:
LABEL_42:
        if (v10) {
          BOOL v20 = (v10 & 7) == 4;
        }
        else {
          BOOL v20 = 1;
        }
        if (v20)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        uint64_t v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_47:
        unsigned int v22 = (google::protobuf::internal *)v13;
        if (v13) {
          continue;
        }
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::SimpleItem_ReverseRich::GetCachedSize(SnippetUI::SimpleItem_ReverseRich *this)
{
  return *((unsigned int *)this + 20);
}

char *SnippetUI::SimpleItem_ReverseRich::ByteSizeLong(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_)
  {
    uint64_t v9 = (SnippetUI::TextProperty *)*((void *)this + 4);
    if (v9)
    {
      unsigned int v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    char v11 = (SnippetUI::TextProperty *)*((void *)this + 5);
    if (v11)
    {
      uint64_t v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v13 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
    if (v13)
    {
      unsigned int v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v14[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v15 = (SnippetUI::VisualProperty *)*((void *)this + 7);
    if (v15)
    {
      int v16 = SnippetUI::VisualProperty::ByteSizeLong(v15);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v16[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v17 = (SnippetUI::ActionProperty *)*((void *)this + 8);
    if (v17)
    {
      uint64_t v18 = SnippetUI::ActionProperty::ByteSizeLong(v17);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v18[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v19 = (SnippetUI::TextProperty *)*((void *)this + 9);
    if (v19)
    {
      BOOL v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v20[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SimpleItem_ReverseRich *)((char *)this + 8), v5, (_DWORD *)this + 20);
  }
  else
  {
    *((_DWORD *)this + 20) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::SimpleItem_ReverseRich::IsInitialized(SnippetUI::SimpleItem_ReverseRich *this)
{
  return 1;
}

SnippetUI::SimpleItem_ReverseRich *SnippetUI::SimpleItem_ReverseRich::New(SnippetUI::SimpleItem_ReverseRich *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_ReverseRich>(a2);
}

SnippetUI::SimpleItem_ReverseRich *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_ReverseRich>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::SimpleItem_ReverseRich *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_ReverseRich>);
  }
  SnippetUI::SimpleItem_ReverseRich::SimpleItem_ReverseRich(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5E3E1DC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C401DBA19FDLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_ReverseRich>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::SimpleItem_ReverseRich *SnippetUI::SimpleItem_ReverseRich::New(SnippetUI::SimpleItem_ReverseRich *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_ReverseRich>(0);
}

void SnippetUI::SimpleItem_ReverseRich::~SimpleItem_ReverseRich(SnippetUI::SimpleItem_ReverseRich *this)
{
  SnippetUI::SimpleItem_ReverseRich::~SimpleItem_ReverseRich(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(void *)this = &unk_1F211E6B8;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 6);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = *((void *)this + 7);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    unsigned int v10 = *((void *)this + 8);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    char v11 = *((void *)this + 9);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::SimpleItem_Player::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 96) = a2;
  return this;
}

void SnippetUI::SimpleItem_Player::MergeFrom(SnippetUI::SimpleItem_Player *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 2990);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::SimpleItem_Player::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5E3E524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Player::MergeFrom(SnippetUI::SimpleItem_Player *this, const SnippetUI::SimpleItem_Player *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 3005);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v25, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v26[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_Player *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  uint64_t v6 = *((void *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 5);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, v6);
    }
    std::string::operator=(*((std::string **)this + 5), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 6);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 6);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, v8);
    }
    std::string::operator=(*((std::string **)this + 6), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_)
  {
    unsigned int v10 = (int **)*((void *)a2 + 7);
    if (v10)
    {
      char v11 = (int **)*((void *)this + 7);
      if (!v11)
      {
        char v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 7) = v11;
        unsigned int v10 = (int **)*((void *)a2 + 7);
      }
      if (v10) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    uint64_t v13 = (int **)*((void *)a2 + 8);
    if (v13)
    {
      unsigned int v14 = (int **)*((void *)this + 8);
      if (!v14)
      {
        unsigned int v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 8) = v14;
        uint64_t v13 = (int **)*((void *)a2 + 8);
      }
      if (v13) {
        unsigned int v15 = v13;
      }
      else {
        unsigned int v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    int v16 = (int **)*((void *)a2 + 9);
    if (v16)
    {
      unsigned int v17 = (int **)*((void *)this + 9);
      if (!v17)
      {
        unsigned int v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 9) = v17;
        int v16 = (int **)*((void *)a2 + 9);
      }
      if (v16) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    unsigned int v19 = (int **)*((void *)a2 + 10);
    if (v19)
    {
      BOOL v20 = (int **)*((void *)this + 10);
      if (!v20)
      {
        BOOL v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 10) = v20;
        unsigned int v19 = (int **)*((void *)a2 + 10);
      }
      if (v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v20, v21);
    }
    unsigned int v22 = (int **)*((void *)a2 + 11);
    if (v22)
    {
      unsigned int v23 = (int **)*((void *)this + 11);
      if (!v23)
      {
        unsigned int v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 11) = v23;
        unsigned int v22 = (int **)*((void *)a2 + 11);
      }
      if (v22) {
        unsigned int v24 = v22;
      }
      else {
        unsigned int v24 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v23, v24);
    }
  }
}

void sub_1C5E3E764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Player::CopyFrom(SnippetUI::SimpleItem_Player *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Player::Clear(this);
    SnippetUI::SimpleItem_Player::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Player::Clear(SnippetUI::SimpleItem_Player *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16);
  uint64_t v2 = *((void *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 6);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 7) = 0;
  uint64_t v5 = *((void *)this + 8);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 8) = 0;
  uint64_t v6 = *((void *)this + 9);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 9) = 0;
  uint64_t v7 = *((void *)this + 10);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 10) = 0;
  uint64_t v8 = *((void *)this + 11);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  char v10 = *((unsigned char *)this + 8);
  uint64_t v9 = (SnippetUI::SimpleItem_Player *)((char *)this + 8);
  *((void *)v9 + 10) = 0;
  if (v10)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v9);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SimpleItem_Player::InternalSerializeWithCachedSizesToArray(SnippetUI::SimpleItem_Player *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      if ((unint64_t)a2 >= *(void *)a3) {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      }
      uint64_t v9 = (SnippetUI::Player *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16, i);
      *(unsigned char *)a2 = 10;
      unsigned int v11 = *((_DWORD *)v9 + 14);
      if (v11 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v11 | 0x80;
        unsigned int v13 = v11 >> 7;
        if (v11 >> 14)
        {
          unsigned int v14 = (char *)a2 + 2;
          do
          {
            unsigned int v15 = v14;
            *v14++ = v13 | 0x80;
            unsigned int v16 = v13 >> 7;
            unsigned int v17 = v13 >> 14;
            v13 >>= 7;
          }
          while (v17);
          uint64_t v12 = (google::protobuf::UnknownFieldSet *)(v15 + 2);
          unsigned char *v14 = v16;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v13;
          uint64_t v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v11;
        uint64_t v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::Player::InternalSerializeWithCachedSizesToArray(v9, v12, a3, v10);
    }
  }
  if (this != (SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_)
  {
    uint64_t v18 = (SnippetUI::TextProperty *)*((void *)this + 7);
    if (!v18) {
      goto LABEL_26;
    }
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v18 = (SnippetUI::TextProperty *)*((void *)this + 7);
    }
    *(unsigned char *)a2 = 18;
    unsigned int v19 = *((_DWORD *)v18 + 15);
    if (v19 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v19 | 0x80;
      unsigned int v21 = v19 >> 7;
      if (v19 >> 14)
      {
        unsigned int v23 = (char *)a2 + 2;
        do
        {
          unsigned int v24 = v23;
          *v23++ = v21 | 0x80;
          unsigned int v25 = v21 >> 7;
          unsigned int v26 = v21 >> 14;
          v21 >>= 7;
        }
        while (v26);
        unsigned int v22 = (google::protobuf::UnknownFieldSet *)(v24 + 2);
        *unsigned int v23 = v25;
        goto LABEL_25;
      }
      *((unsigned char *)a2 + 2) = v21;
      uint64_t v20 = 3;
    }
    else
    {
      *((unsigned char *)a2 + 1) = v19;
      uint64_t v20 = 2;
    }
    unsigned int v22 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v20);
LABEL_25:
    a2 = SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v18, v22, a3, a4);
LABEL_26:
    uint64_t v27 = (SnippetUI::TextProperty *)*((void *)this + 8);
    if (!v27) {
      goto LABEL_38;
    }
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v27 = (SnippetUI::TextProperty *)*((void *)this + 8);
    }
    *(unsigned char *)a2 = 26;
    unsigned int v28 = *((_DWORD *)v27 + 15);
    if (v28 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v28 | 0x80;
      unsigned int v30 = v28 >> 7;
      if (v28 >> 14)
      {
        unsigned int v32 = (char *)a2 + 2;
        do
        {
          unsigned int v33 = v32;
          *v32++ = v30 | 0x80;
          unsigned int v34 = v30 >> 7;
          unsigned int v35 = v30 >> 14;
          v30 >>= 7;
        }
        while (v35);
        char v31 = (google::protobuf::UnknownFieldSet *)(v33 + 2);
        *unsigned int v32 = v34;
        goto LABEL_37;
      }
      *((unsigned char *)a2 + 2) = v30;
      uint64_t v29 = 3;
    }
    else
    {
      *((unsigned char *)a2 + 1) = v28;
      uint64_t v29 = 2;
    }
    char v31 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v29);
LABEL_37:
    a2 = SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v27, v31, a3, a4);
LABEL_38:
    uint64_t v36 = (SnippetUI::MultilineTextProperty *)*((void *)this + 9);
    if (!v36) {
      goto LABEL_50;
    }
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v36 = (SnippetUI::MultilineTextProperty *)*((void *)this + 9);
    }
    *(unsigned char *)a2 = 34;
    unsigned int v37 = *((_DWORD *)v36 + 15);
    if (v37 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v37 | 0x80;
      unsigned int v39 = v37 >> 7;
      if (v37 >> 14)
      {
        unsigned int v41 = (char *)a2 + 2;
        do
        {
          unsigned int v42 = v41;
          *v41++ = v39 | 0x80;
          unsigned int v43 = v39 >> 7;
          unsigned int v44 = v39 >> 14;
          v39 >>= 7;
        }
        while (v44);
        char v40 = (google::protobuf::UnknownFieldSet *)(v42 + 2);
        unsigned char *v41 = v43;
        goto LABEL_49;
      }
      *((unsigned char *)a2 + 2) = v39;
      uint64_t v38 = 3;
    }
    else
    {
      *((unsigned char *)a2 + 1) = v37;
      uint64_t v38 = 2;
    }
    char v40 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v38);
LABEL_49:
    a2 = SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v36, v40, a3, a4);
LABEL_50:
    uint64_t v45 = (SnippetUI::ActionProperty *)*((void *)this + 10);
    if (v45)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        uint64_t v45 = (SnippetUI::ActionProperty *)*((void *)this + 10);
      }
      *(unsigned char *)a2 = 42;
      unsigned int v46 = *((_DWORD *)v45 + 12);
      if (v46 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v46 | 0x80;
        unsigned int v48 = v46 >> 7;
        if (v46 >> 14)
        {
          unsigned int v49 = (char *)a2 + 2;
          do
          {
            unsigned int v50 = v49;
            *v49++ = v48 | 0x80;
            unsigned int v51 = v48 >> 7;
            unsigned int v52 = v48 >> 14;
            v48 >>= 7;
          }
          while (v52);
          uint64_t v47 = (google::protobuf::UnknownFieldSet *)(v50 + 2);
          *unsigned int v49 = v51;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v48;
          uint64_t v47 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v46;
        uint64_t v47 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v45, v47, a3, a4);
    }
  }
  unsigned int v53 = (google::protobuf::internal *)*((void *)this + 5);
  if (*((char *)v53 + 23) < 0)
  {
    unsigned int v54 = (const char *)*((void *)v53 + 1);
    if (!v54) {
      goto LABEL_67;
    }
    unsigned int v53 = *(google::protobuf::internal **)v53;
    goto LABEL_66;
  }
  unsigned int v54 = (const char *)*((unsigned __int8 *)v53 + 23);
  if (*((unsigned char *)v53 + 23))
  {
LABEL_66:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v53, v54, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Player.component_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((const void ***)this + 5), (char *)a2);
  }
LABEL_67:
  unsigned int v55 = (uint64_t *)*((void *)this + 6);
  if ((*((char *)v55 + 23) & 0x80000000) == 0)
  {
    unsigned int v56 = (const char *)*((unsigned __int8 *)v55 + 23);
    if (!*((unsigned char *)v55 + 23)) {
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  unsigned int v56 = (const char *)v55[1];
  if (v56)
  {
    unsigned int v55 = (uint64_t *)*v55;
LABEL_72:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v55, v56, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Player.link_identifier");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((const void ***)this + 6), (char *)a2);
  }
LABEL_73:
  if (this != (SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_)
  {
    char v57 = (SnippetUI::TextProperty *)*((void *)this + 11);
    if (v57)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        char v57 = (SnippetUI::TextProperty *)*((void *)this + 11);
      }
      *(unsigned char *)a2 = 66;
      unsigned int v58 = *((_DWORD *)v57 + 15);
      if (v58 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v58 | 0x80;
        unsigned int v60 = v58 >> 7;
        if (v58 >> 14)
        {
          unsigned int v61 = (char *)a2 + 2;
          do
          {
            unsigned int v62 = v61;
            *v61++ = v60 | 0x80;
            unsigned int v63 = v60 >> 7;
            unsigned int v64 = v60 >> 14;
            v60 >>= 7;
          }
          while (v64);
          unsigned int v59 = (google::protobuf::UnknownFieldSet *)(v62 + 2);
          unsigned char *v61 = v63;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v60;
          unsigned int v59 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v58;
        unsigned int v59 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v57, v59, a3, a4);
    }
  }
  uint64_t v65 = *((void *)this + 1);
  if ((v65 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v65 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

google::protobuf::internal *SnippetUI::SimpleItem_Player::_InternalParse(SnippetUI::SimpleItem_Player *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v30 = a2;
  uint64_t v5 = (std::string **)((char *)this + 48);
  uint64_t v6 = (std::string **)((char *)this + 40);
  int v7 = (unsigned int *)((char *)this + 16);
  uint64_t v8 = (unint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v30 + 1);
      unsigned int v11 = (char *)*(unsigned __int8 *)v30;
      if (*(char *)v30 < 0)
      {
        unsigned int v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, v11);
          unsigned int v30 = TagFallback;
          if (!TagFallback) {
            return TagFallback;
          }
LABEL_7:
          switch(v11 >> 3)
          {
            case 1u:
              if (v11 != 10) {
                goto LABEL_51;
              }
              uint64_t v12 = (char *)TagFallback - 1;
              break;
            case 2u:
              if (v11 != 18) {
                goto LABEL_51;
              }
              uint64_t v20 = (SnippetUI::TextProperty *)*((void *)this + 7);
              if (v20) {
                goto LABEL_50;
              }
              uint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
              *((void *)this + 7) = v20;
              goto LABEL_49;
            case 3u:
              if (v11 != 26) {
                goto LABEL_51;
              }
              uint64_t v20 = (SnippetUI::TextProperty *)*((void *)this + 8);
              if (v20) {
                goto LABEL_50;
              }
              uint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
              *((void *)this + 8) = v20;
              goto LABEL_49;
            case 4u:
              if (v11 != 34) {
                goto LABEL_51;
              }
              unsigned int v21 = (SnippetUI::MultilineTextProperty *)*((void *)this + 9);
              if (!v21)
              {
                unsigned int v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
                *((void *)this + 9) = v21;
                TagFallback = v30;
              }
              unsigned int v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v21, TagFallback);
              goto LABEL_56;
            case 5u:
              if (v11 != 42) {
                goto LABEL_51;
              }
              unsigned int v23 = (SnippetUI::ActionProperty *)*((void *)this + 10);
              if (!v23)
              {
                unsigned int v23 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
                *((void *)this + 10) = v23;
                TagFallback = v30;
              }
              unsigned int v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v23, TagFallback);
              goto LABEL_56;
            case 6u:
              if (v11 != 50) {
                goto LABEL_51;
              }
              unsigned int v24 = *v6;
              if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
              unsigned int v25 = (std::string::value_type *)TagFallback;
              unsigned int v26 = a3;
              uint64_t v27 = "SnippetUI.SimpleItem_Player.component_name";
              goto LABEL_45;
            case 7u:
              if (v11 != 58) {
                goto LABEL_51;
              }
              unsigned int v24 = *v5;
              if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
              unsigned int v25 = (std::string::value_type *)TagFallback;
              unsigned int v26 = a3;
              uint64_t v27 = "SnippetUI.SimpleItem_Player.link_identifier";
LABEL_45:
              unsigned int v22 = google::protobuf::internal::InlineGreedyStringParserUTF8(v24, v25, (uint64_t)v26, (google::protobuf::internal *)v27);
              goto LABEL_56;
            case 8u:
              if (v11 != 66) {
                goto LABEL_51;
              }
              uint64_t v20 = (SnippetUI::TextProperty *)*((void *)this + 11);
              if (v20) {
                goto LABEL_50;
              }
              uint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
              *((void *)this + 11) = v20;
LABEL_49:
              TagFallback = v30;
LABEL_50:
              unsigned int v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v20, TagFallback);
              goto LABEL_56;
            default:
LABEL_51:
              if (v11) {
                BOOL v28 = (v11 & 7) == 4;
              }
              else {
                BOOL v28 = 1;
              }
              if (v28)
              {
                *((_DWORD *)a3 + 20) = v11 - 1;
                return TagFallback;
              }
              unsigned int v22 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v8, TagFallback, a3, v9);
LABEL_56:
              unsigned int v30 = (google::protobuf::internal *)v22;
              if (v22) {
                continue;
              }
              return 0;
          }
          while (1)
          {
            unsigned int v13 = (google::protobuf::internal *)(v12 + 1);
            unsigned int v30 = (google::protobuf::internal *)(v12 + 1);
            unsigned int v14 = (int *)*((void *)this + 4);
            if (!v14) {
              break;
            }
            uint64_t v15 = *((int *)this + 6);
            int v16 = *v14;
            if ((int)v15 >= *v14)
            {
              if (v16 == *((_DWORD *)this + 7))
              {
LABEL_15:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v16 + 1);
                unsigned int v14 = (int *)*((void *)this + 4);
                int v16 = *v14;
              }
              int *v14 = v16 + 1;
              unsigned int v17 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Player>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                   + 2));
              uint64_t v18 = *((void *)this + 4);
              uint64_t v19 = *((int *)this + 6);
              *((_DWORD *)this + 6) = v19 + 1;
              *(void *)(v18 + 8 * v19 + 8) = v17;
              unsigned int v13 = v30;
              goto LABEL_17;
            }
            *((_DWORD *)this + 6) = v15 + 1;
            unsigned int v17 = *(SnippetUI::Player **)&v14[2 * v15 + 2];
LABEL_17:
            uint64_t v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Player>(a3, v17, v13);
            unsigned int v30 = (google::protobuf::internal *)v12;
            if (!v12) {
              return 0;
            }
            if (*(void *)a3 <= (unint64_t)v12 || *v12 != 10) {
              goto LABEL_2;
            }
          }
          int v16 = *((_DWORD *)this + 7);
          goto LABEL_15;
        }
        TagFallback = (google::protobuf::internal *)((char *)v30 + 2);
      }
      unsigned int v30 = TagFallback;
      goto LABEL_7;
    }
    return v30;
  }
}

uint64_t SnippetUI::SimpleItem_Player::GetCachedSize(SnippetUI::SimpleItem_Player *this)
{
  return *((unsigned int *)this + 24);
}

char *SnippetUI::SimpleItem_Player::ByteSizeLong(SnippetUI::SimpleItem_Player *this)
{
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    uint64_t v4 = (SnippetUI::Player **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * (void)v2;
    do
    {
      uint64_t v6 = *v4++;
      int v7 = SnippetUI::Player::ByteSizeLong(v6);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (void)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *((void *)this + 5);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_14;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v9;
  }
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  uint64_t v11 = *((void *)this + 6);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(void *)(v11 + 8)) {
      goto LABEL_19;
    }
  }
  else if (!*(unsigned char *)(v11 + 23))
  {
    goto LABEL_19;
  }
  uint64_t v13 = *(void *)(v11 + 8);
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = v12;
  }
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_19:
  if (this != (SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_)
  {
    unsigned int v14 = (SnippetUI::TextProperty *)*((void *)this + 7);
    if (v14)
    {
      uint64_t v15 = SnippetUI::TextProperty::ByteSizeLong(v14);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)&v15[(void)v2
                                                         + 1
                                                         + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6)];
    }
    int v16 = (SnippetUI::TextProperty *)*((void *)this + 8);
    if (v16)
    {
      unsigned int v17 = SnippetUI::TextProperty::ByteSizeLong(v16);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)&v17[(void)v2
                                                         + 1
                                                         + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v18 = (SnippetUI::MultilineTextProperty *)*((void *)this + 9);
    if (v18)
    {
      uint64_t v19 = SnippetUI::MultilineTextProperty::ByteSizeLong(v18);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)&v19[(void)v2
                                                         + 1
                                                         + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v20 = (SnippetUI::ActionProperty *)*((void *)this + 10);
    if (v20)
    {
      unsigned int v21 = SnippetUI::ActionProperty::ByteSizeLong(v20);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)&v21[(void)v2
                                                         + 1
                                                         + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v22 = (SnippetUI::TextProperty *)*((void *)this + 11);
    if (v22)
    {
      unsigned int v23 = SnippetUI::TextProperty::ByteSizeLong(v22);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)&v23[(void)v2
                                                         + 1
                                                         + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SimpleItem_Player *)((char *)this + 8), v2, (_DWORD *)this + 24);
  }
  else
  {
    *((_DWORD *)this + 24) = v2;
    return (char *)v2;
  }
}

uint64_t SnippetUI::SimpleItem_Player::IsInitialized(SnippetUI::SimpleItem_Player *this)
{
  return 1;
}

SnippetUI::SimpleItem_Player *SnippetUI::SimpleItem_Player::New(SnippetUI::SimpleItem_Player *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Player>(a2);
}

SnippetUI::SimpleItem_Player *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Player>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::SimpleItem_Player *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x68uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Player>);
  }
  SnippetUI::SimpleItem_Player::SimpleItem_Player(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5E3F52C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40E5E897A7);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Player>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::SimpleItem_Player *SnippetUI::SimpleItem_Player::New(SnippetUI::SimpleItem_Player *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Player>(0);
}

void SnippetUI::SimpleItem_Player::~SimpleItem_Player(SnippetUI::SimpleItem_Player *this)
{
  SnippetUI::SimpleItem_Player::~SimpleItem_Player(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(void *)this = &unk_1F211E838;
  uint64_t v2 = *((void *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 6);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_)
  {
    uint64_t v6 = *((void *)this + 7);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    int v7 = *((void *)this + 8);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 9);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = *((void *)this + 10);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = *((void *)this + 11);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::SimpleItem_Player *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::SimpleItem_Standard::InitAsDefaultInstance(SnippetUI::SimpleItem_Standard *this)
{
  qword_1EB690C58 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690C60 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB690C68 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB690C70 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1EB690C78 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB690C80 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB690C88 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::SimpleItem_Standard::_Internal::text_1(SnippetUI::SimpleItem_Standard::_Internal *this, const SnippetUI::SimpleItem_Standard *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::SimpleItem_Standard::_Internal::text_2(SnippetUI::SimpleItem_Standard::_Internal *this, const SnippetUI::SimpleItem_Standard *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::SimpleItem_Standard::_Internal::text_3(SnippetUI::SimpleItem_Standard::_Internal *this, const SnippetUI::SimpleItem_Standard *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::SimpleItem_Standard::_Internal::text_4(SnippetUI::SimpleItem_Standard::_Internal *this, const SnippetUI::SimpleItem_Standard *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::SimpleItem_Standard::_Internal::action(SnippetUI::SimpleItem_Standard::_Internal *this, const SnippetUI::SimpleItem_Standard *a2)
{
  return *((void *)this + 8);
}

uint64_t SnippetUI::SimpleItem_Standard::_Internal::text_5(SnippetUI::SimpleItem_Standard::_Internal *this, const SnippetUI::SimpleItem_Standard *a2)
{
  return *((void *)this + 9);
}

uint64_t SnippetUI::SimpleItem_Standard::_Internal::text_6(SnippetUI::SimpleItem_Standard::_Internal *this, const SnippetUI::SimpleItem_Standard *a2)
{
  return *((void *)this + 10);
}

uint64_t SnippetUI::SimpleItem_Standard::clear_text_1(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Standard::clear_text_2(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Standard::clear_text_3(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Standard::clear_text_4(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Standard::clear_action(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Standard::clear_text_5(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Standard::clear_text_6(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t result = *((void *)this + 10);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 10) = 0;
  return result;
}

SnippetUI::SimpleItem_Standard *SnippetUI::SimpleItem_Standard::SimpleItem_Standard(SnippetUI::SimpleItem_Standard *this, const SnippetUI::SimpleItem_Standard *a2)
{
  *(void *)this = &unk_1F211E538;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (a2 == (const SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_)
  {
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 2) = 0u;
  }
  else
  {
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
    *((void *)this + 6) = 0;
    if (*((void *)a2 + 7)) {
      operator new();
    }
    *((void *)this + 7) = 0;
    if (*((void *)a2 + 8)) {
      operator new();
    }
    *((void *)this + 8) = 0;
    if (*((void *)a2 + 9)) {
      operator new();
    }
    *((void *)this + 9) = 0;
    if (*((void *)a2 + 10)) {
      operator new();
    }
  }
  *((void *)this + 10) = 0;
  return this;
}

void sub_1C5E3FC94(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::SimpleItem_Standard::default_instance(SnippetUI::SimpleItem_Standard *this)
{
  if (atomic_load_explicit(scc_info_SimpleItem_Standard_SimpleItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Standard_SimpleItem_2eproto);
  }
  return &SnippetUI::_SimpleItem_Standard_default_instance_;
}

void SnippetUI::SimpleItem_Standard::CopyFrom(SnippetUI::SimpleItem_Standard *this, const SnippetUI::SimpleItem_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Standard::Clear(this);
    SnippetUI::SimpleItem_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Standard::InternalSwap(SnippetUI::SimpleItem_Standard *this, SnippetUI::SimpleItem_Standard *a2)
{
  uint64_t v4 = (SnippetUI::SimpleItem_Standard *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v26;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  int v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)int v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  uint64_t v13 = (uint64_t *)*((void *)this + 3);
  unsigned int v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v13 = (uint64_t *)*((void *)this + 3);
  }
  uint64_t v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)uint64_t v15 = v17;
  v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  uint64_t v21 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v21;
  uint64_t v22 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v22;
  uint64_t v23 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v23;
  uint64_t v24 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v24;
  uint64_t v25 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v25;
}

void SnippetUI::SimpleItem_Rich::InitAsDefaultInstance(SnippetUI::SimpleItem_Rich *this)
{
  qword_1EB68F870 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68F878 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68F880 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB68F888 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68F890 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB68F898 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EB68F8A0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB68F8A8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68F8B0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68F8B8 = &SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_1(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_2(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_3(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_4(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_5(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((void *)this + 8);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::thumbnail(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((void *)this + 9);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::action(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((void *)this + 10);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_6(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((void *)this + 11);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_7(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((void *)this + 12);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_8(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((void *)this + 13);
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_1(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_2(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_3(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_4(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_5(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_thumbnail(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_action(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result = *((void *)this + 10);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_6(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result = *((void *)this + 11);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 11) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_7(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result = *((void *)this + 12);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 12) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_8(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result = *((void *)this + 13);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 13) = 0;
  return result;
}

SnippetUI::SimpleItem_Rich *SnippetUI::SimpleItem_Rich::SimpleItem_Rich(SnippetUI::SimpleItem_Rich *this, const SnippetUI::SimpleItem_Rich *a2)
{
  *(void *)this = &unk_1F211E5F8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_Rich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (a2 == (const SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_)
  {
    *((void *)this + 12) = 0;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
    *((void *)this + 6) = 0;
    if (*((void *)a2 + 7)) {
      operator new();
    }
    *((void *)this + 7) = 0;
    if (*((void *)a2 + 8)) {
      operator new();
    }
    *((void *)this + 8) = 0;
    if (*((void *)a2 + 9)) {
      operator new();
    }
    *((void *)this + 9) = 0;
    if (*((void *)a2 + 10)) {
      operator new();
    }
    *((void *)this + 10) = 0;
    if (*((void *)a2 + 11)) {
      operator new();
    }
    *((void *)this + 11) = 0;
    if (*((void *)a2 + 12)) {
      operator new();
    }
    *((void *)this + 12) = 0;
    if (*((void *)a2 + 13)) {
      operator new();
    }
  }
  *((void *)this + 13) = 0;
  return this;
}

void sub_1C5E40640(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::SimpleItem_Rich::default_instance(SnippetUI::SimpleItem_Rich *this)
{
  if (atomic_load_explicit(scc_info_SimpleItem_Rich_SimpleItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Rich_SimpleItem_2eproto);
  }
  return &SnippetUI::_SimpleItem_Rich_default_instance_;
}

void SnippetUI::SimpleItem_Rich::CopyFrom(SnippetUI::SimpleItem_Rich *this, const SnippetUI::SimpleItem_Rich *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Rich::Clear(this);
    SnippetUI::SimpleItem_Rich::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Rich::InternalSwap(SnippetUI::SimpleItem_Rich *this, SnippetUI::SimpleItem_Rich *a2)
{
  uint64_t v4 = (SnippetUI::SimpleItem_Rich *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v29;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  int v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)int v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  uint64_t v13 = (uint64_t *)*((void *)this + 3);
  unsigned int v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v13 = (uint64_t *)*((void *)this + 3);
  }
  uint64_t v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)uint64_t v15 = v17;
  v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  uint64_t v21 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v21;
  uint64_t v22 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v22;
  uint64_t v23 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v23;
  uint64_t v24 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v24;
  uint64_t v25 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v25;
  uint64_t v26 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v26;
  uint64_t v27 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v27;
  uint64_t v28 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v28;
}

void SnippetUI::SimpleItem_ReverseRich::InitAsDefaultInstance(SnippetUI::SimpleItem_ReverseRich *this)
{
  qword_1EB68FF20 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68FF28 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68FF30 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB68FF38 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EB68FF40 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB68FF48 = &SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::SimpleItem_ReverseRich::_Internal::text_1(SnippetUI::SimpleItem_ReverseRich::_Internal *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::SimpleItem_ReverseRich::_Internal::text_2(SnippetUI::SimpleItem_ReverseRich::_Internal *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::SimpleItem_ReverseRich::_Internal::text_3(SnippetUI::SimpleItem_ReverseRich::_Internal *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::SimpleItem_ReverseRich::_Internal::thumbnail(SnippetUI::SimpleItem_ReverseRich::_Internal *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::SimpleItem_ReverseRich::_Internal::action(SnippetUI::SimpleItem_ReverseRich::_Internal *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  return *((void *)this + 8);
}

uint64_t SnippetUI::SimpleItem_ReverseRich::_Internal::text_4(SnippetUI::SimpleItem_ReverseRich::_Internal *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  return *((void *)this + 9);
}

uint64_t SnippetUI::SimpleItem_ReverseRich::clear_text_1(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_ReverseRich::clear_text_2(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_ReverseRich::clear_text_3(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_ReverseRich::clear_thumbnail(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_ReverseRich::clear_action(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_ReverseRich::clear_text_4(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 9) = 0;
  return result;
}

SnippetUI::SimpleItem_ReverseRich *SnippetUI::SimpleItem_ReverseRich::SimpleItem_ReverseRich(SnippetUI::SimpleItem_ReverseRich *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  *(void *)this = &unk_1F211E6B8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_ReverseRich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (a2 == (const SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_)
  {
    *((void *)this + 8) = 0;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
    *((void *)this + 6) = 0;
    if (*((void *)a2 + 7)) {
      operator new();
    }
    *((void *)this + 7) = 0;
    if (*((void *)a2 + 8)) {
      operator new();
    }
    *((void *)this + 8) = 0;
    if (*((void *)a2 + 9)) {
      operator new();
    }
  }
  *((void *)this + 9) = 0;
  return this;
}

void sub_1C5E40DDC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::SimpleItem_ReverseRich::default_instance(SnippetUI::SimpleItem_ReverseRich *this)
{
  if (atomic_load_explicit(scc_info_SimpleItem_ReverseRich_SimpleItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_ReverseRich_SimpleItem_2eproto);
  }
  return &SnippetUI::_SimpleItem_ReverseRich_default_instance_;
}

void SnippetUI::SimpleItem_ReverseRich::CopyFrom(SnippetUI::SimpleItem_ReverseRich *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_ReverseRich::Clear(this);
    SnippetUI::SimpleItem_ReverseRich::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_ReverseRich::InternalSwap(SnippetUI::SimpleItem_ReverseRich *this, SnippetUI::SimpleItem_ReverseRich *a2)
{
  uint64_t v4 = (SnippetUI::SimpleItem_ReverseRich *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v25;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  int v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)int v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  uint64_t v13 = (uint64_t *)*((void *)this + 3);
  unsigned int v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v13 = (uint64_t *)*((void *)this + 3);
  }
  uint64_t v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)uint64_t v15 = v17;
  v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  uint64_t v21 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v21;
  uint64_t v22 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v22;
  uint64_t v23 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v23;
  uint64_t v24 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v24;
}

void SnippetUI::SimpleItem_Visual::InitAsDefaultInstance(SnippetUI::SimpleItem_Visual *this)
{
  qword_1EB68FAF0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB68FAF8 = &SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::SimpleItem_Visual::_Internal::action(SnippetUI::SimpleItem_Visual::_Internal *this, const SnippetUI::SimpleItem_Visual *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::SimpleItem_Visual::_Internal::text_1(SnippetUI::SimpleItem_Visual::_Internal *this, const SnippetUI::SimpleItem_Visual *a2)
{
  return *((void *)this + 8);
}

void SnippetUI::SimpleItem_Visual::clear_thumbnails(SnippetUI::SimpleItem_Visual *this)
{
}

uint64_t SnippetUI::SimpleItem_Visual::clear_action(SnippetUI::SimpleItem_Visual *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Visual::clear_text_1(SnippetUI::SimpleItem_Visual *this)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 8) = 0;
  return result;
}

SnippetUI::SimpleItem_Visual *SnippetUI::SimpleItem_Visual::SimpleItem_Visual(SnippetUI::SimpleItem_Visual *this, const SnippetUI::SimpleItem_Visual *a2)
{
  *(void *)this = &unk_1F211E778;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (SnippetUI::SimpleItem_Visual *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::VisualProperty>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 18) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v6 = *((void *)a2 + 5);
  if (*(char *)(v6 + 23) < 0) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  }
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, v6);
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v9 = *((void *)a2 + 6);
  if (*(char *)(v9 + 23) < 0) {
    uint64_t v10 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  }
  if ((uint64_t *)v9 != &google::protobuf::internal::fixed_address_empty_string && v10) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, v9);
  }
  if (a2 == (const SnippetUI::SimpleItem_Visual *)&SnippetUI::_SimpleItem_Visual_default_instance_)
  {
    *((void *)this + 7) = 0;
  }
  else
  {
    if (*((void *)a2 + 7)) {
      operator new();
    }
    *((void *)this + 7) = 0;
    if (*((void *)a2 + 8)) {
      operator new();
    }
  }
  *((void *)this + 8) = 0;
  return this;
}

void sub_1C5E412F0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v3, 0x10A1C40BEC01B52);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::SimpleItem_Visual::default_instance(SnippetUI::SimpleItem_Visual *this)
{
  if (atomic_load_explicit(scc_info_SimpleItem_Visual_SimpleItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Visual_SimpleItem_2eproto);
  }
  return &SnippetUI::_SimpleItem_Visual_default_instance_;
}

void SnippetUI::SimpleItem_Visual::CopyFrom(SnippetUI::SimpleItem_Visual *this, const SnippetUI::SimpleItem_Visual *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Visual::Clear(this);
    SnippetUI::SimpleItem_Visual::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Visual::InternalSwap(SnippetUI::SimpleItem_Visual *this, SnippetUI::SimpleItem_Visual *a2)
{
  uint64_t v4 = (SnippetUI::SimpleItem_Visual *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v21;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::SimpleItem_Visual *)((char *)this + 16), (SnippetUI::SimpleItem_Visual *)((char *)a2 + 16));
  uint64_t v7 = (uint64_t *)*((void *)this + 5);
  uint64_t v8 = (uint64_t **)((char *)a2 + 40);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 5);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  uint64_t v13 = (uint64_t *)*((void *)this + 6);
  unsigned int v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v13 = (uint64_t *)*((void *)this + 6);
  }
  uint64_t v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)uint64_t v15 = v17;
  v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v19;
  uint64_t v20 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v20;
}

void SnippetUI::SimpleItem_Player::InitAsDefaultInstance(SnippetUI::SimpleItem_Player *this)
{
  qword_1EB68FA88 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68FA90 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68FA98 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB68FAA0 = &SnippetUI::_ActionProperty_default_instance_;
  qword_1EB68FAA8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::SimpleItem_Player::_Internal::text_1(SnippetUI::SimpleItem_Player::_Internal *this, const SnippetUI::SimpleItem_Player *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::SimpleItem_Player::_Internal::text_2(SnippetUI::SimpleItem_Player::_Internal *this, const SnippetUI::SimpleItem_Player *a2)
{
  return *((void *)this + 8);
}

uint64_t SnippetUI::SimpleItem_Player::_Internal::text_3(SnippetUI::SimpleItem_Player::_Internal *this, const SnippetUI::SimpleItem_Player *a2)
{
  return *((void *)this + 9);
}

uint64_t SnippetUI::SimpleItem_Player::_Internal::action(SnippetUI::SimpleItem_Player::_Internal *this, const SnippetUI::SimpleItem_Player *a2)
{
  return *((void *)this + 10);
}

uint64_t SnippetUI::SimpleItem_Player::_Internal::text_4(SnippetUI::SimpleItem_Player::_Internal *this, const SnippetUI::SimpleItem_Player *a2)
{
  return *((void *)this + 11);
}

void SnippetUI::SimpleItem_Player::clear_player(SnippetUI::SimpleItem_Player *this)
{
}

uint64_t SnippetUI::SimpleItem_Player::clear_text_1(SnippetUI::SimpleItem_Player *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Player::clear_text_2(SnippetUI::SimpleItem_Player *this)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Player::clear_text_3(SnippetUI::SimpleItem_Player *this)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Player::clear_action(SnippetUI::SimpleItem_Player *this)
{
  uint64_t result = *((void *)this + 10);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Player::clear_text_4(SnippetUI::SimpleItem_Player *this)
{
  uint64_t result = *((void *)this + 11);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 11) = 0;
  return result;
}

SnippetUI::SimpleItem_Player *SnippetUI::SimpleItem_Player::SimpleItem_Player(SnippetUI::SimpleItem_Player *this, const SnippetUI::SimpleItem_Player *a2)
{
  *(void *)this = &unk_1F211E838;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (SnippetUI::SimpleItem_Player *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 24) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v6 = *((void *)a2 + 5);
  if (*(char *)(v6 + 23) < 0) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  }
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, v6);
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v9 = *((void *)a2 + 6);
  if (*(char *)(v9 + 23) < 0) {
    uint64_t v10 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  }
  if ((uint64_t *)v9 != &google::protobuf::internal::fixed_address_empty_string && v10) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, v9);
  }
  if (a2 == (const SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_)
  {
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  else
  {
    if (*((void *)a2 + 7)) {
      operator new();
    }
    *((void *)this + 7) = 0;
    if (*((void *)a2 + 8)) {
      operator new();
    }
    *((void *)this + 8) = 0;
    if (*((void *)a2 + 9)) {
      operator new();
    }
    *((void *)this + 9) = 0;
    if (*((void *)a2 + 10)) {
      operator new();
    }
    *((void *)this + 10) = 0;
    if (*((void *)a2 + 11)) {
      operator new();
    }
  }
  *((void *)this + 11) = 0;
  return this;
}

void sub_1C5E419A0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v3, 0x10A1C40BEC01B52);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::SimpleItem_Player::default_instance(SnippetUI::SimpleItem_Player *this)
{
  if (atomic_load_explicit(scc_info_SimpleItem_Player_SimpleItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Player_SimpleItem_2eproto);
  }
  return &SnippetUI::_SimpleItem_Player_default_instance_;
}

void SnippetUI::SimpleItem_Player::CopyFrom(SnippetUI::SimpleItem_Player *this, const SnippetUI::SimpleItem_Player *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Player::Clear(this);
    SnippetUI::SimpleItem_Player::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Player::InternalSwap(SnippetUI::SimpleItem_Player *this, SnippetUI::SimpleItem_Player *a2)
{
  uint64_t v4 = (SnippetUI::SimpleItem_Player *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v24;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::SimpleItem_Player *)((char *)this + 16), (SnippetUI::SimpleItem_Player *)((char *)a2 + 16));
  uint64_t v7 = (uint64_t *)*((void *)this + 5);
  uint64_t v8 = (uint64_t **)((char *)a2 + 40);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 5);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  uint64_t v13 = (uint64_t *)*((void *)this + 6);
  unsigned int v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v13 = (uint64_t *)*((void *)this + 6);
  }
  uint64_t v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)uint64_t v15 = v17;
  v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v19;
  uint64_t v20 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v20;
  uint64_t v21 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v21;
  uint64_t v22 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v22;
  uint64_t v23 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v23;
}

void SnippetUI::SimpleItem_RichSearchResult::InitAsDefaultInstance(SnippetUI::SimpleItem_RichSearchResult *this)
{
  qword_1EA3DB290 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EA3DB298 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EA3DB2A0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EA3DB2A8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EA3DB2B0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EA3DB2B8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EA3DB2C0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EA3DB2C8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EA3DB2D0 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EA3DB2D8 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_1(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_2(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_3(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_4(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_5(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((void *)this + 8);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_6(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((void *)this + 9);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_7(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((void *)this + 10);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_8(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((void *)this + 11);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::thumbnail(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((void *)this + 12);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::action(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((void *)this + 13);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_1(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_2(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_3(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_4(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_5(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_6(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_7(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result = *((void *)this + 10);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_8(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result = *((void *)this + 11);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 11) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_thumbnail(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result = *((void *)this + 12);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 12) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_action(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result = *((void *)this + 13);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 13) = 0;
  return result;
}

SnippetUI::SimpleItem_RichSearchResult *SnippetUI::SimpleItem_RichSearchResult::SimpleItem_RichSearchResult(SnippetUI::SimpleItem_RichSearchResult *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  *(void *)this = &unk_1F211E8F8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_RichSearchResult *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (a2 == (const SnippetUI::SimpleItem_RichSearchResult *)&SnippetUI::_SimpleItem_RichSearchResult_default_instance_)
  {
    *((void *)this + 12) = 0;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
    *((void *)this + 6) = 0;
    if (*((void *)a2 + 7)) {
      operator new();
    }
    *((void *)this + 7) = 0;
    if (*((void *)a2 + 8)) {
      operator new();
    }
    *((void *)this + 8) = 0;
    if (*((void *)a2 + 9)) {
      operator new();
    }
    *((void *)this + 9) = 0;
    if (*((void *)a2 + 10)) {
      operator new();
    }
    *((void *)this + 10) = 0;
    if (*((void *)a2 + 11)) {
      operator new();
    }
    *((void *)this + 11) = 0;
    if (*((void *)a2 + 12)) {
      operator new();
    }
    *((void *)this + 12) = 0;
    if (*((void *)a2 + 13)) {
      operator new();
    }
  }
  *((void *)this + 13) = 0;
  return this;
}

void sub_1C5E42348(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::SimpleItem_RichSearchResult::default_instance(SnippetUI::SimpleItem_RichSearchResult *this)
{
  if (atomic_load_explicit(scc_info_SimpleItem_RichSearchResult_SimpleItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_RichSearchResult_SimpleItem_2eproto);
  }
  return &SnippetUI::_SimpleItem_RichSearchResult_default_instance_;
}

void SnippetUI::SimpleItem_RichSearchResult::CopyFrom(SnippetUI::SimpleItem_RichSearchResult *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_RichSearchResult::Clear(this);
    SnippetUI::SimpleItem_RichSearchResult::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_RichSearchResult::InternalSwap(SnippetUI::SimpleItem_RichSearchResult *this, SnippetUI::SimpleItem_RichSearchResult *a2)
{
  uint64_t v4 = (SnippetUI::SimpleItem_RichSearchResult *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v29;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  uint64_t v13 = (uint64_t *)*((void *)this + 3);
  unsigned int v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v13 = (uint64_t *)*((void *)this + 3);
  }
  uint64_t v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)uint64_t v15 = v17;
  v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  uint64_t v21 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v21;
  uint64_t v22 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v22;
  uint64_t v23 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v23;
  uint64_t v24 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v24;
  uint64_t v25 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v25;
  uint64_t v26 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v26;
  uint64_t v27 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v27;
  uint64_t v28 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v28;
}

void siri::dialogengine::DialogSpeed::toString(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::FormatSpeed(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredNumberuint64_t Parameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  uint64_t v4 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v4)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(&__p, "units");
      OptionalStringuint64_t Parameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
      uint64_t v6 = OptionalStringParameter;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v6)
        {
LABEL_5:
          if (v6[95] < 0) {
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
          }
          else {
            std::string __p = *(std::string *)(v6 + 3);
          }
LABEL_12:
          siri::dialogengine::ParseUnitLabel<siri::dialogengine::Speed>();
        }
      }
      else if (OptionalStringParameter)
      {
        goto LABEL_5;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      goto LABEL_12;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5E42D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (a66 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(&a39);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogSpeed::compactDecimalLong(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogSpeed::compactDecimalShort(uint64_t this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogSpeed::units(siri::dialogengine::DialogSpeed *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C5E43048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v21, 0x10B3C40D3060B95);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogSpeed::value(siri::dialogengine::DialogSpeed *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v6, "value");
  RequiredNumberuint64_t Parameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&v6, (uint64_t)a2);
  uint64_t v5 = RequiredNumberParameter;
  if (v7 < 0)
  {
    operator delete(v6);
    if (v5) {
LABEL_3:
    }
      siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Speed>();
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5E431CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v24, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkPhrase::Expand(siri::dialogengine::ChunkPhrase *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  siri::dialogengine::ChunkPhrase::ExpandPtr(this, a2, &v4);
  if (v4)
  {
    siri::dialogengine::SpeakableString::SpeakableString((std::string *)a3, v4);
  }
  else
  {
    *(void *)(a3 + 160) = 0;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0u;
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5E432D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ChunkPhrase::ExpandPtr(siri::dialogengine::ChunkPhrase *this@<X0>, siri::dialogengine::Context *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)this + 200;
  std::operator+<char>();
  uint64_t v6 = std::string::append(&v51, "'...");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v51.__r_.__value_.__l.__data_);
    if (!a2)
    {
LABEL_15:
      *a3 = 0;
      a3[1] = 0;
      return;
    }
  }
  else if (!a2)
  {
    goto LABEL_15;
  }
  uint64_t v9 = *((void *)a2 + 63);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a2 + 64);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (!v9) {
    goto LABEL_15;
  }
  uint64_t v10 = (uint64_t *)*((void *)a2 + 114);
  long long v11 = (std::__shared_weak_count *)*((void *)a2 + 115);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10 && siri::dialogengine::ExecutionState::IsInfiniteLoop(v10, (long long *)v5))
  {
    std::operator+<char>();
    uint64_t v12 = std::string::append(&v51, "'. Unwinding...");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
  }
  else
  {
    uint64_t v14 = *((void *)a2 + 63);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)a2 + 64);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Phrase = siri::dialogengine::GroupPhrases::GetPhrase(v14 + 312, v5);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (Phrase)
    {
      (*(void (**)(std::string *__return_ptr, char *, siri::dialogengine::Context *))(*(void *)Phrase + 40))(&v51, Phrase, a2);
      if (v51.__r_.__value_.__r.__words[0] == v51.__r_.__value_.__l.__size_)
      {
        std::operator+<char>();
        char v31 = std::string::append(&v50, "'");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
      }
      else
      {
        if (*(void *)v51.__r_.__value_.__l.__data_)
        {
          if (v17)
          {
            uint64_t v18 = v17;
            std::operator+<char>();
            uint64_t v19 = std::string::append(&v47, "' expanded to: '");
            long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
            v48.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
            v19->__r_.__value_.__l.__size_ = 0;
            v19->__r_.__value_.__r.__words[2] = 0;
            v19->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::SpeakableString::SpeakableString(&__p, (const siri::dialogengine::SpeakableString *)(v18 + 208));
            siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&__p, &v46);
            if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v21 = &v46;
            }
            else {
              uint64_t v21 = (std::string *)v46.__r_.__value_.__r.__words[0];
            }
            if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v46.__r_.__value_.__l.__size_;
            }
            uint64_t v23 = std::string::append(&v48, (const std::string::value_type *)v21, size);
            long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            v49.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v24;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            uint64_t v25 = std::string::append(&v49, "'");
            long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
            v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
            v25->__r_.__value_.__l.__size_ = 0;
            v25->__r_.__value_.__r.__words[2] = 0;
            v25->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Log::Debug((siri::dialogengine *)&v50);
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v50.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v49.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v46.__r_.__value_.__l.__data_);
            }
            if (v45 < 0) {
              operator delete(v44);
            }
            if (v43 < 0) {
              operator delete(v42);
            }
            if (v41 < 0) {
              operator delete(v40);
            }
            if (v39 < 0) {
              operator delete(v38);
            }
            if (v37 < 0) {
              operator delete(v36);
            }
            if (v35 < 0) {
              operator delete(v34);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v48.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v47.__r_.__value_.__l.__data_);
            }
            operator new();
          }
        }
        std::operator+<char>();
        uint64_t v29 = std::string::append(&v50, "' - not supported.");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
      *a3 = 0;
      a3[1] = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v11) {
        goto LABEL_61;
      }
      return;
    }
    std::operator+<char>();
    uint64_t v27 = std::string::append(&v51, "'");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  *a3 = 0;
  a3[1] = 0;
  if (v11) {
LABEL_61:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
}

void sub_1C5E437FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  MEMORY[0x1C8796D70](v46, 0x1012C4059F2399FLL);
  a9 = (void *)(v47 - 88);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  _Unwind_Resume(a1);
}

void std::shared_ptr<siri::dialogengine::SpeakableString>::shared_ptr[abi:ne180100]<siri::dialogengine::SpeakableString,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5E43A10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<siri::dialogengine::SpeakableString>::reset[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void **std::unique_ptr<siri::dialogengine::SpeakableString>::reset[abi:ne180100](void ***a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    siri::dialogengine::SpeakableString::~SpeakableString(result);
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::SpeakableString *,std::shared_ptr<siri::dialogengine::SpeakableString>::__shared_ptr_default_delete<siri::dialogengine::SpeakableString,siri::dialogengine::SpeakableString>,std::allocator<siri::dialogengine::SpeakableString>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void **std::__shared_ptr_pointer<siri::dialogengine::SpeakableString *,std::shared_ptr<siri::dialogengine::SpeakableString>::__shared_ptr_default_delete<siri::dialogengine::SpeakableString,siri::dialogengine::SpeakableString>,std::allocator<siri::dialogengine::SpeakableString>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void ***)(a1 + 24);
  if (result)
  {
    siri::dialogengine::SpeakableString::~SpeakableString(result);
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::SpeakableString *,std::shared_ptr<siri::dialogengine::SpeakableString>::__shared_ptr_default_delete<siri::dialogengine::SpeakableString,siri::dialogengine::SpeakableString>,std::allocator<siri::dialogengine::SpeakableString>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t siri::dialogengine::ChunkPhrase::Validate(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a2) {
    goto LABEL_13;
  }
  uint64_t v7 = a2[63];
  uint64_t v6 = (std::__shared_weak_count *)a2[64];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (!v7)
  {
LABEL_13:
    char v11 = 0;
    return v11 & 1;
  }
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 223)) {
      goto LABEL_7;
    }
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(&__p, "Phrase with no name attribute found.");
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, a3);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      char v11 = 0;
      goto LABEL_23;
    }
    uint64_t v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_21:
    operator delete(v12);
    goto LABEL_22;
  }
  if (!*(void *)(a1 + 208)) {
    goto LABEL_15;
  }
LABEL_7:
  uint64_t v8 = a2[63];
  uint64_t v9 = (std::__shared_weak_count *)a2[64];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phrase = siri::dialogengine::GroupPhrases::GetPhrase(v8 + 312, (unsigned __int8 *)(a1 + 200));
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (!Phrase)
  {
    std::operator+<char>();
    long long v13 = std::string::append(&v29, "'");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    uint64_t v12 = (void *)v29.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
  char v11 = 1;
LABEL_23:
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v29, (const void ***)(a1 + 176));
  std::string::size_type v15 = v29.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v29.__r_.__value_.__l.__data_ != &v29.__r_.__value_.__r.__words[1])
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&__p, (long long *)(v15 + 32));
      std::string::basic_string[abi:ne180100]<0>(v22, "phrase");
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)v22, (uint64_t)&__p, v24);
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      unint64_t v16 = v25;
      unsigned __int8 v17 = v25;
      if ((v25 & 0x80u) != 0) {
        unint64_t v16 = (unint64_t)v24[1];
      }
      if (v16)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)v24, 0);
        char v11 = 0;
        unsigned __int8 v17 = v25;
      }
      if ((v17 & 0x80) != 0) {
        operator delete(v24[0]);
      }
      if (v28 < 0) {
        operator delete(v27);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v18 = *(std::string **)(v15 + 8);
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (std::string *)v18->__r_.__value_.__r.__words[0];
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = *(std::string **)(v15 + 16);
          BOOL v20 = v19->__r_.__value_.__r.__words[0] == v15;
          std::string::size_type v15 = (std::string::size_type)v19;
        }
        while (!v20);
      }
      std::string::size_type v15 = (std::string::size_type)v19;
    }
    while (v19 != (std::string *)&v29.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v29.__r_.__value_.__l.__size_);
  return v11 & 1;
}

void sub_1C5E43DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 49) < 0) {
    operator delete(*(void **)(v26 - 72));
  }
  _Unwind_Resume(exception_object);
}

double siri::dialogengine::ChunkPhrase::ChunkPhrase(siri::dialogengine::ChunkPhrase *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 24) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = (char *)this + 184;
  *(void *)this = &unk_1F211EA48;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((unsigned char *)this + 248) = 0;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 24) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = (char *)this + 184;
  *(void *)this = &unk_1F211EA48;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((unsigned char *)this + 248) = 0;
  return result;
}

uint64_t siri::dialogengine::ChunkPhrase::ChunkPhrase(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = siri::dialogengine::ChunkText::ChunkText(a1, a2);
  *(void *)uint64_t v4 = &unk_1F211EA48;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(unsigned char *)(v4 + 248) = 0;
  siri::dialogengine::ChunkText::SetText(v4, a2);
  return a1;
}

void sub_1C5E4403C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 247) < 0) {
    operator delete(*(void **)(v1 + 224));
  }
  if (*(char *)(v1 + 223) < 0) {
    operator delete(*v2);
  }
  siri::dialogengine::ChunkText::~ChunkText((siri::dialogengine::ChunkText *)v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkPhrase::GetName(siri::dialogengine::ChunkPhrase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 223) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 25), *((void *)this + 26));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 27);
  }
}

double siri::dialogengine::ChunkPhrase::SetName(uint64_t a1, const std::string *a2)
{
  siri::dialogengine::StringTrim(" \t\n\r", a2, &v5);
  uint64_t v3 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*v3);
  }
  double result = *(double *)&v5.__r_.__value_.__l.__data_;
  *(_OWORD *)uint64_t v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(void *)(a1 + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = *((void *)&v5.__r_.__value_.__l + 2);
  return result;
}

void siri::dialogengine::ChunkPhrase::GetId(siri::dialogengine::ChunkPhrase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 247) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 28), *((void *)this + 29));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 14);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 30);
  }
}

std::string *siri::dialogengine::ChunkPhrase::SetId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 224), a2);
}

uint64_t siri::dialogengine::ChunkPhrase::IsOptional(siri::dialogengine::ChunkPhrase *this)
{
  return *((unsigned __int8 *)this + 248);
}

uint64_t siri::dialogengine::ChunkPhrase::SetOptional(uint64_t this, char a2)
{
  *(unsigned char *)(this + 248) = a2;
  return this;
}

BOOL YAML::IsNullString(unsigned char *a1)
{
  if ((char)a1[23] < 0)
  {
    uint64_t v2 = *((void *)a1 + 1);
    if (v2)
    {
      if (v2 != 1)
      {
        if (v2 == 4)
        {
          a1 = *(unsigned char **)a1;
          if (*(_DWORD *)a1 == 1819047278 || *(_DWORD *)a1 == 1819047246) {
            return 1;
          }
          return *(_DWORD *)a1 == 1280070990;
        }
        return 0;
      }
      if (**(unsigned char **)a1 != 126) {
        return 0;
      }
    }
    return 1;
  }
  int v1 = a1[23];
  if (!a1[23]) {
    return 1;
  }
  if (v1 != 1)
  {
    if (v1 == 4)
    {
      if ((*(_DWORD *)a1 & 0xFFFFFFDF) == 0x6C6C754E) {
        return 1;
      }
      return *(_DWORD *)a1 == 1280070990;
    }
    return 0;
  }
  return *a1 == 126;
}

void sub_1C5E44344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void sub_1C5E44450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C5E444E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *__assign_helper_atomic_property__4335(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (a1 != a2) {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)(a1 + 8), *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  return std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
}

char *std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      std::string v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = std::vector<double>::__vallocate[abi:ne180100](v7, v11);
    long long v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

void __copy_helper_atomic_property__4337(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(a1 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v4 = (std::string *)(a1 + 4);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    a1[6] = *(void *)(a2 + 48);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C5E44790(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5E44898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5E44A00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  siri::dialogengine::GroundingInfo::~GroundingInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5E44CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  siri::dialogengine::GroundingInfo::~GroundingInfo(&a19);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v37)
  {
    a36 = (uint64_t)v37;
    operator delete(v37);
  }

  _Unwind_Resume(a1);
}

void sub_1C5E45044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)&a28);
  _Unwind_Resume(a1);
}

void sub_1C5E45300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (v29) {
    operator delete(v29);
  }
  siri::dialogengine::GroundingInfo::~GroundingInfo(&a21);
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)&a28);

  _Unwind_Resume(a1);
}

void sub_1C5E454C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, char a12)
{
}

void sub_1C5E455CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)&a15);

  _Unwind_Resume(a1);
}

void sub_1C5E45728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, char a12)
{
}

uint64_t siri::dialogengine::GetPatternUsageFromString(uint64_t a1)
{
  siri::dialogengine::StringToLower(a1, (uint64_t)&v13);
  if (v15 < 0)
  {
    switch(v14)
    {
      case 8:
        if (*(void *)v13 == 0x6465726975716572)
        {
          uint64_t v9 = 1;
LABEL_48:
          operator delete(v13);
          return v9;
        }
        break;
      case 9:
        if (*(void *)v13 == 0x6F746C7561666564 && *((unsigned char *)v13 + 8) == 110)
        {
          uint64_t v9 = 2;
          goto LABEL_48;
        }
        break;
      case 10:
        if (*(void *)v13 == 0x6F746C7561666564 && v13[4] == 26214)
        {
          uint64_t v9 = 3;
        }
        else
        {
          unint64_t v6 = 0x646973616C6C6F77;
          unint64_t v7 = bswap64(*(void *)v13);
          if (v7 == 0x646973616C6C6F77 && (unint64_t v7 = bswap32(v13[4]) >> 16, v6 = 25956, v7 == 25956))
          {
            int v8 = 0;
          }
          else if (v7 < v6)
          {
            int v8 = -1;
          }
          else
          {
            int v8 = 1;
          }
          uint64_t v9 = 4 * (v8 == 0);
        }
        goto LABEL_48;
    }
    uint64_t v9 = 0;
    goto LABEL_48;
  }
  if (v15 == 8) {
    return v13 == (unsigned __int16 *)0x6465726975716572;
  }
  if (v15 == 9)
  {
    if (v13 == (unsigned __int16 *)0x6F746C7561666564 && v14 == 110) {
      return 2;
    }
    return 0;
  }
  if (v15 != 10) {
    return 0;
  }
  if (v13 == (unsigned __int16 *)0x6F746C7561666564 && (unsigned __int16)v14 == 26214) {
    return 3;
  }
  unint64_t v2 = 0x646973616C6C6F77;
  unint64_t v3 = bswap64((unint64_t)v13);
  if (v3 == 0x646973616C6C6F77 && (v3 = bswap32((unsigned __int16)v14) >> 16, unint64_t v2 = 25956, v3 == 25956))
  {
    int v4 = 0;
  }
  else if (v3 < v2)
  {
    int v4 = -1;
  }
  else
  {
    int v4 = 1;
  }
  return 4 * (v4 == 0);
}

void *siri::dialogengine::GetStringFromPatternUsage@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if ((a1 - 1) > 3) {
    unint64_t v2 = "";
  }
  else {
    unint64_t v2 = off_1E651E400[a1 - 1];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t siri::dialogengine::PatternSchemaUsage::PatternSchemaUsage(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

{
  *(_DWORD *)this = 0;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

uint64_t siri::dialogengine::PatternSchemaUsage::GetUsage(siri::dialogengine::PatternSchemaUsage *this)
{
  return *(unsigned int *)this;
}

_DWORD *siri::dialogengine::PatternSchemaUsage::SetUsage(_DWORD *result, int a2)
{
  *double result = a2;
  return result;
}

void siri::dialogengine::PatternSchemaUsage::GetCondition(siri::dialogengine::PatternSchemaUsage *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

std::string *siri::dialogengine::PatternSchemaUsage::SetCondition(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

uint64_t siri::dialogengine::SemanticModelCache::Entry::Entry(uint64_t result, long long *a2, uint64_t a3)
{
  long long v3 = *a2;
  *(void *)(result + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = *((void *)a2 + 2);
  *(_OWORD *)double result = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)(result + 24) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(result + 40) = *(void *)(a3 + 16);
  int v4 = (void *)(a3 + 24);
  uint64_t v5 = *(void *)(a3 + 24);
  *(void *)(result + 48) = v5;
  uint64_t v6 = result + 48;
  uint64_t v7 = *(void *)(a3 + 32);
  *(void *)(result + 56) = v7;
  if (v7)
  {
    *(void *)(v5 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = v6;
    *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = v4;
    *int v4 = 0;
    *(void *)(a3 + 32) = 0;
  }
  else
  {
    *(void *)(result + 40) = v6;
  }
  *(unsigned char *)(result + 64) = *(unsigned char *)(a3 + 40);
  return result;
}

void siri::dialogengine::SemanticModelCache::Entry::GetFilePathOrTag(siri::dialogengine::SemanticModelCache::Entry *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

uint64_t siri::dialogengine::SemanticModelCache::Entry::GetModel(siri::dialogengine::SemanticModelCache::Entry *this)
{
  return (uint64_t)this + 24;
}

double siri::dialogengine::SemanticModelCache::SemanticModelCache(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = 850045863;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  return result;
}

{
  long long v2;
  double result;

  long long v2 = *a2;
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = 850045863;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  return result;
}

void siri::dialogengine::SemanticModelCache::GetDescription(siri::dialogengine::SemanticModelCache *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void siri::dialogengine::SemanticModelCache::Find(uint64_t a1@<X0>, void *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v9 = *(void **)(a1 + 96);
  uint64_t v7 = (void *)(a1 + 96);
  int v8 = v9;
  if (!v9) {
    goto LABEL_8;
  }
  uint64_t v10 = v7;
  do
  {
    BOOL v11 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v8 + 4, a2);
    uint64_t v12 = v8 + 1;
    if (!v11)
    {
      uint64_t v12 = v8;
      uint64_t v10 = v8;
    }
    int v8 = (void *)*v12;
  }
  while (*v12);
  if (v10 == v7 || std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, v10 + 4))
  {
LABEL_8:
    char v13 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (*((char *)v10 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v10[7], v10[8]);
    }
    else
    {
      long long v14 = *(_OWORD *)(v10 + 7);
      a3->__r_.__value_.__r.__words[2] = v10[9];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v14;
    }
    std::string::size_type v15 = v10[11];
    a3[1].__r_.__value_.__r.__words[0] = v10[10];
    a3[1].__r_.__value_.__l.__size_ = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&a3[1].__r_.__value_.__r.__words[2], (const void ***)v10 + 12);
    a3[2].__r_.__value_.__s.__data_[16] = *((unsigned char *)v10 + 120);
    char v13 = 1;
  }
  a3[3].__r_.__value_.__s.__data_[0] = v13;
  std::mutex::unlock(v6);
}

void sub_1C5E45D4C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::SemanticModelCache::Insert(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  uint64_t v7 = (uint64_t *)v5[12];
  int v8 = (uint64_t **)(v5 + 12);
  uint64_t v9 = (uint64_t **)(v5 + 12);
  if (!v7)
  {
LABEL_13:
    unint64_t v16 = (char *)operator new(0x80uLL);
    v29[0] = v16;
    v29[1] = v5 + 12;
    char v30 = 0;
    size_t v17 = (std::string *)(v16 + 32);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((void *)v16 + 6) = *(void *)(a2 + 16);
    }
    *(_OWORD *)(v16 + 88) = 0u;
    *((void *)v16 + 15) = 0;
    *(_OWORD *)(v16 + 72) = 0u;
    *(_OWORD *)(v16 + 56) = 0u;
    *(_OWORD *)(v16 + 104) = 0u;
    *((void *)v16 + 12) = v16 + 104;
    char v30 = 1;
    *(void *)unint64_t v16 = 0;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = v8;
    void *v9 = (uint64_t *)v16;
    uint64_t v18 = *(void *)v5[11];
    uint64_t v19 = (uint64_t *)v16;
    if (v18)
    {
      v5[11] = v18;
      uint64_t v19 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[12], v19);
    ++v5[13];
    v29[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
LABEL_19:
    std::string::operator=((std::string *)(v16 + 56), (const std::string *)a3);
    uint64_t v22 = *(void *)(a3 + 24);
    uint64_t v21 = *(void *)(a3 + 32);
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    char v23 = (std::__shared_weak_count *)*((void *)v16 + 11);
    *((void *)v16 + 10) = v22;
    *((void *)v16 + 11) = v21;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v16 + 56 != (char *)a3) {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)(v16 + 96), *(long long **)(a3 + 40), (long long *)(a3 + 48));
    }
    v16[120] = *(unsigned char *)(a3 + 64);
    long long v24 = v5;
    if (*((char *)v5 + 23) < 0) {
      long long v24 = (uint64_t *)*v5;
    }
    if (*(char *)(a2 + 23) >= 0) {
      unsigned __int8 v25 = (const std::string::value_type *)a2;
    }
    else {
      unsigned __int8 v25 = *(const std::string::value_type **)a2;
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"SemanticModelCache: Added entry to %s cache with key \"%s\" (New cache size: %zu)", v20, v24, v25, v5[13]);
    uint64_t v26 = 1;
    goto LABEL_31;
  }
  uint64_t v10 = v5 + 12;
  BOOL v11 = (void *)v5[12];
  do
  {
    BOOL v12 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v11 + 4, (void *)a2);
    char v13 = v11 + 1;
    if (!v12)
    {
      char v13 = v11;
      uint64_t v10 = v11;
    }
    BOOL v11 = (void *)*v13;
  }
  while (*v13);
  if (v10 == v5 + 12
    || std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((void *)a2, v10 + 4))
  {
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v7;
        std::string::size_type v15 = v7 + 4;
        if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((void *)a2, v15)) {
          break;
        }
        uint64_t v7 = *v8;
        uint64_t v9 = v8;
        if (!*v8) {
          goto LABEL_13;
        }
      }
      if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v15, (void *)a2)) {
        break;
      }
      uint64_t v9 = v8 + 1;
      uint64_t v7 = v8[1];
      if (!v7) {
        goto LABEL_13;
      }
    }
    unint64_t v16 = (char *)v8;
    goto LABEL_19;
  }
  if (*((char *)v5 + 23) < 0) {
    uint64_t v5 = (uint64_t *)*v5;
  }
  if (*(char *)(a2 + 23) >= 0) {
    char v28 = (const std::string::value_type *)a2;
  }
  else {
    char v28 = *(const std::string::value_type **)a2;
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"SemanticModelCache: The %s cache already contains an entry with key \"%s\"", v14, v5, v28);
  uint64_t v26 = 0;
LABEL_31:
  std::mutex::unlock(v6);
  return v26;
}

void sub_1C5E46000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::SemanticModelCache::Entry>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t siri::dialogengine::SemanticModelCache::size(siri::dialogengine::SemanticModelCache *this)
{
  long long v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  uint64_t v3 = *((void *)this + 13);
  std::mutex::unlock(v2);
  return v3;
}

void siri::dialogengine::SemanticModelCache::clear(siri::dialogengine::SemanticModelCache *this)
{
  uint64_t v1 = this;
  long long v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  uint64_t v3 = (void *)*((void *)v1 + 12);
  uint64_t v1 = (siri::dialogengine::SemanticModelCache *)((char *)v1 + 96);
  std::__tree<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::less<void>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>>>::destroy(v3);
  *((void *)v1 - 1) = v1;
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  std::mutex::unlock(v2);
}

void siri::dialogengine::SemanticModelCache::CreateKey(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v9, a1, 35);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v6 = *(const std::string::value_type **)a2;
  }
  if (v5 >= 0) {
    std::string::size_type v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v7 = *(void *)(a2 + 8);
  }
  int v8 = std::string::append(&v9, v6, v7);
  *a3 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1C5E4618C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, const void **a2, char a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a1, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    std::string::size_type v7 = (char *)result;
  }
  else {
    std::string::size_type v7 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v7, v8, v5);
  }
  std::string v9 = &v7[v5];
  char *v9 = a3;
  v9[1] = 0;
  return result;
}

double siri::dialogengine::PatternGroup::PatternGroup(uint64_t a1, uint64_t a2, const std::string *a3)
{
  uint64_t v3 = siri::dialogengine::LineNumberBase::LineNumberBase(a1, a2, a3);
  *(void *)uint64_t v3 = &unk_1F211EA78;
  double result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  return result;
}

{
  uint64_t v3;
  double result;

  uint64_t v3 = siri::dialogengine::LineNumberBase::LineNumberBase(a1, a2, a3);
  *(void *)uint64_t v3 = &unk_1F211EA78;
  double result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  return result;
}

uint64_t siri::dialogengine::PatternGroup::PatternGroup(uint64_t a1, long long *a2, long long *a3, long long *a4)
{
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1F211EA78;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + 80) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 64) = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 104) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 88) = v8;
  }
  std::string v9 = (std::string *)(a1 + 112);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v10 = *a4;
    *(void *)(a1 + 128) = *((void *)a4 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return a1;
}

void sub_1C5E463D8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternGroup::GetName(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 8), *((void *)this + 9));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 4);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 10);
  }
}

std::string *siri::dialogengine::PatternGroup::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 64), a2);
}

void siri::dialogengine::PatternGroup::GetDialogId(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((void *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 13);
  }
}

std::string *siri::dialogengine::PatternGroup::SetDialogId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 88), a2);
}

void siri::dialogengine::PatternGroup::SetDialogIdWithComponent(uint64_t a1, std::string *a2)
{
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    int v4 = a2;
  }
  else {
    int v4 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_12;
  }
  unint64_t v5 = 0;
  do
  {
    int v6 = v4->__r_.__value_.__s.__data_[0];
    int v4 = (std::string *)((char *)v4 + 1);
    if (v6 == 35) {
      ++v5;
    }
    --size;
  }
  while (size);
  if (v5 <= 1)
  {
LABEL_12:
    std::string::operator=((std::string *)(a1 + 88), a2);
    JUMPOUT(0x1C8796900);
  }
  siri::dialogengine::StringSplit((unsigned __int8 *)a2, "#", &v13);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)v14 - 1);
  long long v7 = v14 - 3;
  if (*((char *)v14 - 1) < 0) {
    operator delete(*v7);
  }
  long long v14 = v7;
  std::string::basic_string[abi:ne180100]<0>(__p, "#");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v11, v13, (uint64_t)v14, (uint64_t)__p);
  long long v8 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)long long v8 = v11;
  *(void *)(a1 + 104) = v12;
  HIBYTE(v12) = 0;
  LOBYTE(v11) = 0;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v11 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
}

void sub_1C5E465D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  a16 = v16 - 40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternGroup::GetDialogIdWithComponent(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 183) < 0)
  {
    if (*((void *)this + 21)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 183))
  {
LABEL_3:
    if (*((char *)this + 111) >= 0) {
      size_t v4 = *((unsigned __int8 *)this + 111);
    }
    else {
      size_t v4 = *((void *)this + 12);
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v4)
    {
      if (*((char *)this + 111) >= 0) {
        int v6 = (char *)this + 88;
      }
      else {
        int v6 = (char *)*((void *)this + 11);
      }
      memmove(p_p, v6, v4);
    }
    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v4) = 35;
    int v7 = *((char *)this + 183);
    if (v7 >= 0) {
      long long v8 = (char *)this + 160;
    }
    else {
      long long v8 = (const std::string::value_type *)*((void *)this + 20);
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *((unsigned __int8 *)this + 183);
    }
    else {
      std::string::size_type v9 = *((void *)this + 21);
    }
    char v10 = std::string::append(&__p, v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (*((char *)this + 111) < 0)
  {
    uint64_t v12 = (const std::string::value_type *)*((void *)this + 11);
    std::string::size_type v13 = *((void *)this + 12);
    std::string::__init_copy_ctor_external(a2, v12, v13);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 13);
  }
}

void sub_1C5E4675C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::PatternGroup::GetVisualId(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 135) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 14), *((void *)this + 15));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 7);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 16);
  }
}

std::string *siri::dialogengine::PatternGroup::SetVisualId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 112), a2);
}

void siri::dialogengine::PatternGroup::SetVisualIdWithComponent(uint64_t a1, std::string *a2)
{
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    size_t v4 = a2;
  }
  else {
    size_t v4 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_12;
  }
  unint64_t v5 = 0;
  do
  {
    int v6 = v4->__r_.__value_.__s.__data_[0];
    size_t v4 = (std::string *)((char *)v4 + 1);
    if (v6 == 35) {
      ++v5;
    }
    --size;
  }
  while (size);
  if (v5 <= 1)
  {
LABEL_12:
    std::string::operator=((std::string *)(a1 + 112), a2);
    JUMPOUT(0x1C8796900);
  }
  siri::dialogengine::StringSplit((unsigned __int8 *)a2, "#", &v13);
  std::string::operator=((std::string *)(a1 + 184), (const std::string *)v14 - 1);
  int v7 = v14 - 3;
  if (*((char *)v14 - 1) < 0) {
    operator delete(*v7);
  }
  long long v14 = v7;
  std::string::basic_string[abi:ne180100]<0>(__p, "#");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v11, v13, (uint64_t)v14, (uint64_t)__p);
  long long v8 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)long long v8 = v11;
  *(void *)(a1 + 128) = v12;
  HIBYTE(v12) = 0;
  LOBYTE(v11) = 0;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v11 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
}

void sub_1C5E468F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  a16 = v16 - 40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternGroup::GetVisualIdWithComponent(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 207) < 0)
  {
    if (*((void *)this + 24)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 207))
  {
LABEL_3:
    if (*((char *)this + 135) >= 0) {
      size_t v4 = *((unsigned __int8 *)this + 135);
    }
    else {
      size_t v4 = *((void *)this + 15);
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v4)
    {
      if (*((char *)this + 135) >= 0) {
        int v6 = (char *)this + 112;
      }
      else {
        int v6 = (char *)*((void *)this + 14);
      }
      memmove(p_p, v6, v4);
    }
    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v4) = 35;
    int v7 = *((char *)this + 207);
    if (v7 >= 0) {
      long long v8 = (char *)this + 184;
    }
    else {
      long long v8 = (const std::string::value_type *)*((void *)this + 23);
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *((unsigned __int8 *)this + 207);
    }
    else {
      std::string::size_type v9 = *((void *)this + 24);
    }
    char v10 = std::string::append(&__p, v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (*((char *)this + 135) < 0)
  {
    uint64_t v12 = (const std::string::value_type *)*((void *)this + 14);
    std::string::size_type v13 = *((void *)this + 15);
    std::string::__init_copy_ctor_external(a2, v12, v13);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 7);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 16);
  }
}

void sub_1C5E46A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::PatternGroup::GetDialogComponent(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 183) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 20), *((void *)this + 21));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 10);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 22);
  }
}

std::string *siri::dialogengine::PatternGroup::SetDialogComponent(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 160), a2);
}

void siri::dialogengine::PatternGroup::GetVisualComponent(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 207) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 23), *((void *)this + 24));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 184);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 25);
  }
}

std::string *siri::dialogengine::PatternGroup::SetVisualComponent(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 184), a2);
}

void siri::dialogengine::PatternGroup::GetNestedPattern(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 159) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 17), *((void *)this + 18));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 136);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 19);
  }
}

std::string *siri::dialogengine::PatternGroup::SetNestedPattern(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 136), a2);
}

uint64_t siri::dialogengine::ChunkTag::Validate(uint64_t a1, siri::dialogengine::Context *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  long long v8 = (const void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0)
  {
    uint64_t v11 = *(void *)(a1 + 208);
    if (v11 != 3)
    {
      if (v11 != 4)
      {
        if (v11 != 8) {
          goto LABEL_78;
        }
        char v10 = *(void **)*v8;
LABEL_10:
        if (v10 == (void *)0x797469746E617571)
        {
          {
            operator new();
          }
          uint64_t v12 = (std::once_flag::_State_type *)siri::dialogengine::ChunkTag::Validate(siri::dialogengine::Context *,siri::dialogengine::LineNumberBase const*,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)const::flag;
          if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::ChunkTag::Validate(siri::dialogengine::Context *,siri::dialogengine::LineNumberBase const*,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)const::flag, memory_order_acquire) != -1)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1;
            v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::__call_once(v12, &v66, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ChunkTag::Validate(siri::dialogengine::Context *,siri::dialogengine::LineNumberBase const*,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::$_0 &&>>);
          }
          uint64_t v57 = v7;
          std::string::size_type v13 = *(uint64_t **)a4;
          if (*(void *)(a4 + 8) != *(void *)a4)
          {
            unint64_t v14 = 0;
            int v15 = 0;
            int v16 = 0;
            int v58 = 0;
            while (1)
            {
              size_t v17 = &v13[2 * v14];
              uint64_t v18 = (const void *)*v17;
              uint64_t v19 = (std::__shared_weak_count *)v17[1];
              if (v19) {
                atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v18
              {
                if (v19) {
                  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (v20[223] < 0) {
                  std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v20 + 25), *((void *)v20 + 26));
                }
                else {
                  std::string __p = *(std::string *)(v20 + 200);
                }
                uint64_t v21 = v19;
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "");
                uint64_t v21 = 0;
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                if (!__p.__r_.__value_.__l.__size_) {
                  goto LABEL_36;
                }
                if (__p.__r_.__value_.__l.__size_ != 4) {
                  goto LABEL_34;
                }
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
                  goto LABEL_37;
                }
                if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 4)
                {
LABEL_34:
                  uint64_t v23 = std::__tree<std::string>::find<std::string>(siri::dialogengine::ChunkTag::Validate(siri::dialogengine::Context *,siri::dialogengine::LineNumberBase const*,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)const::sNumberTags, (const void **)&__p.__r_.__value_.__l.__data_);
                  v16 |= siri::dialogengine::ChunkTag::Validate(siri::dialogengine::Context *,siri::dialogengine::LineNumberBase const*,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)const::sNumberTags
                       + 8 != v23;
                  v15 |= siri::dialogengine::ChunkTag::Validate(siri::dialogengine::Context *,siri::dialogengine::LineNumberBase const*,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)const::sNumberTags
                       + 8 == v23;
                  goto LABEL_35;
                }
                p_p = &__p;
              }
              if (LODWORD(p_p->__r_.__value_.__l.__data_) != 1851879539) {
                goto LABEL_34;
              }
              int v58 = 1;
LABEL_35:
              siri::dialogengine::ChunkList::ChunkList((uint64_t *)&__s1, (uint64_t **)a4);
              siri::dialogengine::ChunkList::GetInnerChunks((siri::dialogengine::ChunkList *)&__s1, v14, (uint64_t)&v66);
              v14 += ((uint64_t)(v66.__r_.__value_.__l.__size_ - v66.__r_.__value_.__r.__words[0]) >> 4) + 1;
              v63[0] = &v66;
              std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
              v63[0] = &__s1;
              std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_36:
              }
                operator delete(__p.__r_.__value_.__l.__data_);
LABEL_37:
              if (v21) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v21);
              }
              if (v19) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v19);
              }
              ++v14;
              std::string::size_type v13 = *(uint64_t **)a4;
              if (v14 >= (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4) {
                goto LABEL_126;
              }
            }
          }
          int v58 = 0;
          int v16 = 0;
          int v15 = 0;
LABEL_126:
          std::string::basic_string[abi:ne180100]<0>(&v66, "includevalue");
          uint64_t v7 = v57;
          siri::dialogengine::ChunkText::GetAttribute(v57, (uint64_t)&v66, &__p);
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          if (size && !siri::dialogengine::StringToBool(&__p))
          {
            if ((v58 | v15))
            {
              std::string::basic_string[abi:ne180100]<0>(&v66, "<quantity> element with includeValue=\"false\" should only contain elements like <one>, <other>, etc.");
              siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v66, a3);
              goto LABEL_146;
            }
          }
          else if ((v16 | v15))
          {
            std::string::basic_string[abi:ne180100]<0>(&v66, "<quantity> element with includeValue=\"true\" should only contain a <span> element");
            siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v66, a3);
LABEL_146:
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v66.__r_.__value_.__l.__data_);
            }
            char i = 0;
            goto LABEL_150;
          }
          char i = 1;
LABEL_150:
          std::string::basic_string[abi:ne180100]<0>(&__s1, "inflect");
          siri::dialogengine::ChunkText::GetAttribute(v57, (uint64_t)&__s1, &v66);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s1.__r_.__value_.__l.__data_);
          }
          siri::dialogengine::SemanticFeatureConstraint::ValidateString(a2, (unsigned __int8 *)&v66, (uint64_t)&__s1);
          std::string::size_type v53 = __s1.__r_.__value_.__l.__size_;
          unsigned int v54 = (long long *)__s1.__r_.__value_.__r.__words[0];
          if (__s1.__r_.__value_.__r.__words[0] != __s1.__r_.__value_.__l.__size_)
          {
            do
            {
              siri::dialogengine::Context::AddValidationError((uint64_t)a2, v54, a3);
              unsigned int v54 = (long long *)((char *)v54 + 24);
            }
            while (v54 != (long long *)v53);
            char i = 0;
          }
          v63[0] = &__s1;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
LABEL_157:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_79;
        }
LABEL_78:
        char i = 1;
        goto LABEL_79;
      }
      unsigned __int8 v25 = *v8;
      int v24 = *(_DWORD *)*v8;
LABEL_53:
      if (v24 == 1851879539)
      {
        std::string::basic_string[abi:ne180100]<0>(&v66, "inflect");
        siri::dialogengine::ChunkText::GetAttribute(v7, (uint64_t)&v66, &__p);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::SemanticFeatureConstraint::ValidateString(a2, (unsigned __int8 *)&__p, (uint64_t)&v66);
        std::string::size_type v33 = v66.__r_.__value_.__l.__size_;
        unsigned int v34 = (long long *)v66.__r_.__value_.__r.__words[0];
        for (char i = v66.__r_.__value_.__r.__words[0] == v66.__r_.__value_.__l.__size_;
              v34 != (long long *)v33;
              unsigned int v34 = (long long *)((char *)v34 + 24))
        {
          siri::dialogengine::Context::AddValidationError((uint64_t)a2, v34, a3);
        }
        __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
        goto LABEL_157;
      }
      if (*(_DWORD *)v25 != 1802658157) {
        goto LABEL_78;
      }
      std::string::basic_string[abi:ne180100]<0>(&v66, "name");
      siri::dialogengine::ChunkText::GetAttribute(v7, (uint64_t)&v66, &__p);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&__s1, "value");
      siri::dialogengine::ChunkText::GetAttribute(v7, (uint64_t)&__s1, &v66);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      char v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v29 = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
      }
      if (!v30) {
        goto LABEL_118;
      }
      std::string::size_type v31 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v31 = v66.__r_.__value_.__l.__size_;
      }
      if (v31)
      {
        std::string::basic_string[abi:ne180100]<0>(&__s1, "\"mark\" element has both attributes \"name\" and \"value\"; The \"value\" value will be ignored");
        siri::dialogengine::Context::AddValidationWarning((uint64_t)a2, (long long *)&__s1, a3);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        int v32 = 0;
        std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        std::string::size_type v29 = __p.__r_.__value_.__l.__size_;
        char v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else
      {
LABEL_118:
        int v32 = 1;
      }
      if (v28 < 0) {
        std::string::size_type v27 = v29;
      }
      if (!v27) {
        goto LABEL_171;
      }
      uint64_t v47 = v7;
      siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)&__p, 1, (uint64_t)&__s1);
      size_t v48 = strlen(siri::dialogengine::TYPE_STRING);
      size_t v49 = v48;
      char v50 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v48 != __s1.__r_.__value_.__l.__size_) {
          goto LABEL_163;
        }
        if (v48 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (v48 != HIBYTE(__s1.__r_.__value_.__r.__words[2])) {
          goto LABEL_163;
        }
        p_s1 = &__s1;
      }
      if (!memcmp(p_s1, siri::dialogengine::TYPE_STRING, v49))
      {
LABEL_168:
        if (v50 < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        uint64_t v7 = v47;
LABEL_171:
        if (*(void *)a4 != *(void *)(a4 + 8))
        {
          std::string::basic_string[abi:ne180100]<0>(&__s1, "\"mark\" element should not have any content; behavior will be as if the content follows the element");
          siri::dialogengine::Context::AddValidationWarning((uint64_t)a2, (long long *)&__s1, a3);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s1.__r_.__value_.__l.__data_);
          }
          int v32 = 0;
        }
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        char i = v32 != 0;
        goto LABEL_79;
      }
LABEL_163:
      std::operator+<char>();
      unsigned int v55 = std::string::append(&v62, "'");
      long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      int64_t v64 = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)unsigned int v63 = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)v63, a3);
      if (SHIBYTE(v64) < 0) {
        operator delete(v63[0]);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      int v32 = 0;
      char v50 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      goto LABEL_168;
    }
    if (*(_WORD *)*v8 != 29812 || *((unsigned char *)*v8 + 2) != 115) {
      goto LABEL_78;
    }
  }
  else
  {
    int v9 = *(unsigned __int8 *)(a1 + 223);
    if (v9 != 3)
    {
      if (v9 != 4)
      {
        if (v9 != 8) {
          goto LABEL_78;
        }
        char v10 = *v8;
        goto LABEL_10;
      }
      int v24 = *(_DWORD *)v8;
      unsigned __int8 v25 = (void *)(a1 + 200);
      goto LABEL_53;
    }
    BOOL v26 = *(_WORD *)v8 == 29812 && *(unsigned char *)(a1 + 202) == 115;
    if (!v26) {
      goto LABEL_78;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v66, "play");
  siri::dialogengine::ChunkText::GetAttribute(v7, (uint64_t)&v66, &__p);
  std::string::size_type v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v44 = __p.__r_.__value_.__l.__size_;
  }
  if (v44)
  {
    std::string::basic_string[abi:ne180100]<0>(v63, "sirifamily");
    siri::dialogengine::ChunkText::GetAttribute(v7, (uint64_t)v63, &__s1);
    std::string::size_type v45 = __s1.__r_.__value_.__l.__size_;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v45 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    BOOL v46 = v45 != 0;
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v64) < 0) {
      operator delete(v63[0]);
    }
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_114;
    }
  }
  else
  {
    BOOL v46 = 0;
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_114:
    }
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v66.__r_.__value_.__l.__data_);
    if (!v46) {
      goto LABEL_139;
    }
LABEL_137:
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tts\" element has both attributes \"play\" and \"sirifamily\"; The \"sirifamily\" value will be ignored");
    siri::dialogengine::Context::AddValidationWarning((uint64_t)a2, (long long *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_139;
  }
  if (v46) {
    goto LABEL_137;
  }
LABEL_139:
  if (*(void *)a4 == *(void *)(a4 + 8))
  {
    char i = !v46;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tts\" element should not have any content; behavior will be as if the content follows the element");
    siri::dialogengine::Context::AddValidationWarning((uint64_t)a2, (long long *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    char i = 0;
  }
LABEL_79:
  siri::dialogengine::ValidateXmlElementVersion((uint64_t)a2, (uint64_t)v8, &v66);
  std::string::size_type v37 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v37 = v66.__r_.__value_.__l.__size_;
  }
  if (v37)
  {
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v66, a3);
    char i = 0;
  }
  else
  {
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&__s1, (const void ***)(v7 + 176));
    std::string::size_type v38 = __s1.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)__s1.__r_.__value_.__l.__data_ != &__s1.__r_.__value_.__r.__words[1])
    {
      do
      {
        std::pair<std::string const,std::string>::pair[abi:ne180100](&__p, (long long *)(v38 + 32));
        siri::dialogengine::ValidateXmlAttributeVersion(a2, v8, (uint64_t)&__p, v63);
        char v39 = (void *)HIBYTE(v64);
        char v40 = HIBYTE(v64);
        if (v64 < 0) {
          char v39 = v63[1];
        }
        if (v39)
        {
          siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)v63, a3);
          char i = 0;
          char v40 = HIBYTE(v64);
        }
        if (v40 < 0) {
          operator delete(v63[0]);
        }
        if (v61 < 0) {
          operator delete(v60);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        char v41 = *(std::string **)(v38 + 8);
        if (v41)
        {
          do
          {
            unsigned int v42 = v41;
            char v41 = (std::string *)v41->__r_.__value_.__r.__words[0];
          }
          while (v41);
        }
        else
        {
          do
          {
            unsigned int v42 = *(std::string **)(v38 + 16);
            BOOL v26 = v42->__r_.__value_.__r.__words[0] == v38;
            std::string::size_type v38 = (std::string::size_type)v42;
          }
          while (!v26);
        }
        std::string::size_type v38 = (std::string::size_type)v42;
      }
      while (v42 != (std::string *)&__s1.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)__s1.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  return i & 1;
}

void sub_1C5E475B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ChunkTag::Validate(siri::dialogengine::Context *,siri::dialogengine::LineNumberBase const*,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5E47910(_Unwind_Exception *a1)
{
  uint64_t v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 167) < 0) {
      operator delete(*(void **)(v2 + v4 + 144));
    }
    v4 -= 24;
    if (v4 == -168)
    {
      MEMORY[0x1C8796D70](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

void siri::dialogengine::ChunkTag::~ChunkTag(void **this)
{
  *this = &unk_1F211EAB0;
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  *this = &unk_1F21244A0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(this[23]);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 1);
  JUMPOUT(0x1C8796D70);
}

{
  *this = &unk_1F211EAB0;
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  *this = &unk_1F21244A0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(this[23]);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 1);
}

double siri::dialogengine::ChunkTag::ChunkTag(siri::dialogengine::ChunkTag *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = (char *)this + 184;
  *(void *)this = &unk_1F211EAB0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((_WORD *)this + 112) = 0;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = (char *)this + 184;
  *(void *)this = &unk_1F211EAB0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((_WORD *)this + 112) = 0;
  return result;
}

uint64_t siri::dialogengine::ChunkTag::ChunkTag(uint64_t a1, uint64_t a2)
{
  uint64_t result = siri::dialogengine::ChunkText::ChunkText(a1, a2);
  *(void *)uint64_t result = &unk_1F211EAB0;
  *(void *)(result + 208) = 0;
  *(void *)(result + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(result + 200) = 0;
  *(_WORD *)(result + 224) = 0;
  return result;
}

{
  uint64_t result;

  uint64_t result = siri::dialogengine::ChunkText::ChunkText(a1, a2);
  *(void *)uint64_t result = &unk_1F211EAB0;
  *(void *)(result + 208) = 0;
  *(void *)(result + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(result + 200) = 0;
  *(_WORD *)(result + 224) = 0;
  return result;
}

void siri::dialogengine::ChunkTag::GetName(siri::dialogengine::ChunkTag *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 223) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 25), *((void *)this + 26));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 27);
  }
}

std::string *siri::dialogengine::ChunkTag::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 200), a2);
}

uint64_t siri::dialogengine::ChunkTag::IsOpenTag(siri::dialogengine::ChunkTag *this)
{
  return *((unsigned __int8 *)this + 224);
}

uint64_t siri::dialogengine::ChunkTag::SetOpenTag(uint64_t this, char a2)
{
  *(unsigned char *)(this + 224) = a2;
  return this;
}

uint64_t siri::dialogengine::ChunkTag::IsCloseTag(siri::dialogengine::ChunkTag *this)
{
  return *((unsigned __int8 *)this + 225);
}

uint64_t siri::dialogengine::ChunkTag::SetCloseTag(uint64_t this, char a2)
{
  *(unsigned char *)(this + 225) = a2;
  return this;
}

void siri::dialogengine::DialogMetadataReader::DialogMetadataReader(siri::dialogengine::DialogMetadataReader *this)
{
}

void sub_1C5E47CA4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10B2C4090B26B8FLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogMetadataReader::~DialogMetadataReader(siri::dialogengine::DialogMetadataReader *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    std::default_delete<siri::dialogengine::DialogMetadataReader::Impl>::operator()[abi:ne180100](v2);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    std::default_delete<siri::dialogengine::DialogMetadataReader::Impl>::operator()[abi:ne180100](v2);
  }
}

void std::default_delete<siri::dialogengine::DialogMetadataReader::Impl>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  uint64_t v2 = (void **)(a1 + 104);
  std::vector<siri::dialogengine::DialogMetadataDisplayValue>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_1F2119120;
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)(a1 + 8));
  JUMPOUT(0x1C8796D70);
}

void std::vector<siri::dialogengine::DialogMetadataDisplayValue>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::destroy[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void siri::dialogengine::DialogMetadataReader::GetSemanticConcept(siri::dialogengine::DialogMetadataReader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 151) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 128), *(void *)(v2 + 136));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 128);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 144);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t siri::dialogengine::DialogMetadataReader::GetNextSemanticValue(siri::dialogengine::DialogMetadataReader *this)
{
  uint64_t v1 = *(void *)this;
  int v2 = *(_DWORD *)(*(void *)this + 152);
  if (v2 >= *(_DWORD *)(*(void *)this + 32)) {
    return 0;
  }
  long long v3 = this;
  *(_DWORD *)(v1 + 152) = v2 + 1;
  uint64_t v4 = (const siri::dialogengine::DialogMetadata::SemanticValue *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::DialogMetadata::SemanticValue>::TypeHandler>(v1 + 24, v2);
  siri::dialogengine::DialogMetadata::SemanticValue::SemanticValue((siri::dialogengine::DialogMetadata::SemanticValue *)v63, v4);
  std::string v62 = 0;
  int64x2_t v61 = 0u;
  memset(v60, 0, sizeof(v60));
  std::string::operator=(v60, (const std::string *)(*(void *)v3 + 128));
  siri::dialogengine::StringToLower(v66, (uint64_t)&v56);
  if (SHIBYTE(v60[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60[1].__r_.__value_.__l.__data_);
  }
  v60[1] = v56;
  int v5 = v65;
  if (v65 >= 1)
  {
    int v6 = 0;
    do
    {
      uint64_t v7 = (const siri::dialogengine::DialogMetadata::DisplayValue *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::DialogMetadata::DisplayValue>::TypeHandler>((uint64_t)&v64, v6);
      siri::dialogengine::DialogMetadata::DisplayValue::DisplayValue((siri::dialogengine::DialogMetadata::DisplayValue *)&v56, v7);
      long long v8 = v3;
      memset(&v53, 0, sizeof(v53));
      v55[0] = 0;
      v55[1] = 0;
      unsigned int v54 = (uint64_t *)v55;
      std::string::operator=(&v53, __str);
      int v9 = v58;
      if (v58 >= 1)
      {
        int v10 = 0;
        do
        {
          uint64_t v11 = (const siri::dialogengine::DialogMetadata::Constraint *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::DialogMetadata::Constraint>::TypeHandler>((uint64_t)&v57, v10);
          siri::dialogengine::DialogMetadata::Constraint::Constraint((siri::dialogengine::DialogMetadata::Constraint *)&v68, v11);
          siri::dialogengine::StringTrim("\"", (const std::string *)v71, &v52);
          unsigned int v67 = (long long *)v70;
          uint64_t v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v54, v70, &v67);
          std::string::operator=((std::string *)(v12 + 7), &v52);
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v52.__r_.__value_.__l.__data_);
          }
          siri::dialogengine::DialogMetadata::Constraint::~Constraint((siri::dialogengine::DialogMetadata::Constraint *)&v68);
          ++v10;
        }
        while (v9 != v10);
      }
      uint64_t v13 = v61.i64[1];
      if (v61.i64[1] >= (unint64_t)v62)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v61.i64[1] - v61.i64[0]) >> 4);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0x555555555555555) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        long long v3 = v8;
        if (0x5555555555555556 * (((uint64_t)v62 - v61.i64[0]) >> 4) > v16) {
          unint64_t v16 = 0x5555555555555556 * (((uint64_t)v62 - v61.i64[0]) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v62 - v61.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v17 = 0x555555555555555;
        }
        else {
          unint64_t v17 = v16;
        }
        unsigned int v71 = &v62;
        if (v17) {
          unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::DatabaseField>>(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        unint64_t v68 = v17;
        v69.i64[0] = v17 + 48 * v15;
        v69.i64[1] = v69.i64[0];
        uint64_t v70 = (const void **)(v17 + 48 * v18);
        std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::construct[abi:ne180100]<siri::dialogengine::DialogMetadataDisplayValue,siri::dialogengine::DialogMetadataDisplayValue const&>((std::string *)v69.i64[0], (long long *)&v53);
        uint64_t v19 = v69.i64[0];
        uint64_t v14 = v69.i64[1] + 48;
        v69.i64[1] += 48;
        int64x2_t v20 = v61;
        if (v61.i64[1] == v61.i64[0])
        {
          int64x2_t v29 = vdupq_n_s64(v61.u64[1]);
        }
        else
        {
          uint64_t v21 = 0;
          do
          {
            uint64_t v22 = v19 + v21;
            uint64_t v23 = v20.i64[1] + v21;
            long long v24 = *(_OWORD *)(v20.i64[1] + v21 - 48);
            *(void *)(v22 - 32) = *(void *)(v20.i64[1] + v21 - 32);
            *(_OWORD *)(v22 - 48) = v24;
            *(void *)(v23 - 40) = 0;
            *(void *)(v23 - 32) = 0;
            *(void *)(v23 - 48) = 0;
            *(void *)(v22 - 24) = *(void *)(v20.i64[1] + v21 - 24);
            unsigned __int8 v25 = (uint64_t *)(v20.i64[1] + v21 - 16);
            uint64_t v26 = *v25;
            *(void *)(v19 + v21 - google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = *v25;
            uint64_t v27 = v19 + v21 - 16;
            uint64_t v28 = *(void *)(v20.i64[1] + v21 - 8);
            *(void *)(v22 - 8) = v28;
            if (v28)
            {
              *(void *)(v26 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = v27;
              *(void *)(v23 - 24) = v25;
              uint64_t *v25 = 0;
              *(void *)(v20.i64[1] + v21 - 8) = 0;
            }
            else
            {
              *(void *)(v22 - 24) = v27;
            }
            v21 -= 48;
          }
          while (v20.i64[1] + v21 != v20.i64[0]);
          v19 += v21;
          int64x2_t v29 = v61;
          uint64_t v14 = v69.i64[1];
        }
        v61.i64[0] = v19;
        v61.i64[1] = v14;
        int64x2_t v69 = v29;
        std::string::size_type v30 = v62;
        std::string v62 = v70;
        uint64_t v70 = v30;
        unint64_t v68 = v29.i64[0];
        std::__split_buffer<siri::dialogengine::DialogMetadataDisplayValue>::~__split_buffer((uint64_t)&v68);
      }
      else
      {
        std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::construct[abi:ne180100]<siri::dialogengine::DialogMetadataDisplayValue,siri::dialogengine::DialogMetadataDisplayValue const&>((std::string *)v61.i64[1], (long long *)&v53);
        long long v3 = v8;
        uint64_t v14 = v13 + 48;
      }
      v61.i64[1] = v14;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v55[0]);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::DialogMetadata::DisplayValue::~DisplayValue((siri::dialogengine::DialogMetadata::DisplayValue *)&v56);
      ++v6;
    }
    while (v6 != v5);
  }
  uint64_t v31 = *(void *)v3;
  int v32 = (std::string *)(*(void *)v3 + 56);
  std::string::operator=(v32, v60);
  std::string::operator=((std::string *)(v31 + 80), &v60[1]);
  if (v32 != v60)
  {
    uint64_t v33 = *(void *)(v31 + 120);
    char v35 = (void **)(v31 + 104);
    uint64_t v34 = *(void *)(v31 + 104);
    int64x2_t v36 = v61;
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v61.i64[1] - v61.i64[0]) >> 4);
    if (0xAAAAAAAAAAAAAAABLL * ((v33 - v34) >> 4) >= v37)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 112) - v34) >> 4) >= v37)
      {
        size_t v48 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::dialogengine::DialogMetadataDisplayValue *,siri::dialogengine::DialogMetadataDisplayValue *,siri::dialogengine::DialogMetadataDisplayValue *>((std::string *)v61.i64[0], (std::string *)v61.i64[1], *(std::string **)(v31 + 104));
        for (uint64_t i = *(void *)(v31 + 112);
              (std::string *)i != v48;
              std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::destroy[abi:ne180100](i))
        {
          i -= 48;
        }
        *(void *)(v31 + 112) = v48;
        goto LABEL_57;
      }
      uint64_t v47 = (std::string *)(v61.i64[0] + 16 * ((*(void *)(v31 + 112) - v34) >> 4));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::dialogengine::DialogMetadataDisplayValue *,siri::dialogengine::DialogMetadataDisplayValue *,siri::dialogengine::DialogMetadataDisplayValue *>((std::string *)v61.i64[0], v47, *(std::string **)(v31 + 104));
      uint64_t v45 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::DialogMetadataDisplayValue>,siri::dialogengine::DialogMetadataDisplayValue*,siri::dialogengine::DialogMetadataDisplayValue*,siri::dialogengine::DialogMetadataDisplayValue*>(v31 + 120, (uint64_t)v47, v36.i64[1], *(void *)(v31 + 112));
    }
    else
    {
      if (v34)
      {
        uint64_t v38 = *(void *)(v31 + 112);
        char v39 = *(void **)(v31 + 104);
        if (v38 != v34)
        {
          do
          {
            v38 -= 48;
            std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::destroy[abi:ne180100](v38);
          }
          while (v38 != v34);
          char v39 = *v35;
        }
        *(void *)(v31 + 112) = v34;
        operator delete(v39);
        uint64_t v33 = 0;
        std::string *v35 = 0;
        *(void *)(v31 + 112) = 0;
        *(void *)(v31 + 120) = 0;
      }
      if (v37 > 0x555555555555555) {
        goto LABEL_64;
      }
      unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (v33 >> 4);
      uint64_t v41 = 2 * v40;
      if (2 * v40 <= v37) {
        uint64_t v41 = v37;
      }
      unint64_t v42 = v40 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v41;
      if (v42 > 0x555555555555555) {
LABEL_64:
      }
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      char v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::DatabaseField>>(v42);
      *(void *)(v31 + 104) = v43;
      *(void *)(v31 + 112) = v43;
      *(void *)(v31 + 120) = &v43[48 * v44];
      uint64_t v45 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::DialogMetadataDisplayValue>,siri::dialogengine::DialogMetadataDisplayValue*,siri::dialogengine::DialogMetadataDisplayValue*,siri::dialogengine::DialogMetadataDisplayValue*>(v31 + 120, v36.i64[0], v36.i64[1], (uint64_t)v43);
    }
    *(void *)(v31 + 112) = v45;
  }
LABEL_57:
  uint64_t v50 = *(void *)v3;
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  std::vector<siri::dialogengine::DialogMetadataDisplayValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  if (SHIBYTE(v60[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60[1].__r_.__value_.__l.__data_);
  }
  uint64_t v46 = v50 + 56;
  if (SHIBYTE(v60[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60[0].__r_.__value_.__l.__data_);
  }
  siri::dialogengine::DialogMetadata::SemanticValue::~SemanticValue((siri::dialogengine::DialogMetadata::SemanticValue *)v63);
  return v46;
}

void sub_1C5E4844C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  *(void *)(v38 + 112) = v37;
  siri::dialogengine::DialogMetadataSemanticValue::~DialogMetadataSemanticValue(&a30);
  siri::dialogengine::DialogMetadata::SemanticValue::~SemanticValue((siri::dialogengine::DialogMetadata::SemanticValue *)(v39 - 200));
  _Unwind_Resume(a1);
}

uint64_t std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::construct[abi:ne180100]<siri::dialogengine::DialogMetadataDisplayValue,siri::dialogengine::DialogMetadataDisplayValue const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  return std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&this[1], (const void ***)a2 + 3);
}

void sub_1C5E4854C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogMetadataDisplayValue::~DialogMetadataDisplayValue(siri::dialogengine::DialogMetadataDisplayValue *this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void siri::dialogengine::DialogMetadataSemanticValue::~DialogMetadataSemanticValue(void **this)
{
  int v2 = this + 6;
  std::vector<siri::dialogengine::DialogMetadataDisplayValue>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t std::__split_buffer<siri::dialogengine::DialogMetadataDisplayValue>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = i - 48;
    std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::destroy[abi:ne180100](i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::dialogengine::DialogMetadataDisplayValue *,siri::dialogengine::DialogMetadataDisplayValue *,siri::dialogengine::DialogMetadataDisplayValue *>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    int v5 = __str;
    int v6 = (long long *)&__str[1].__r_.__value_.__r.__words[1];
    do
    {
      std::string::operator=(this, v5);
      if (v5 != this) {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&this[1], (long long *)v5[1].__r_.__value_.__l.__data_, v6);
      }
      v5 += 2;
      this += 2;
      v6 += 3;
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::DialogMetadataDisplayValue>,siri::dialogengine::DialogMetadataDisplayValue*,siri::dialogengine::DialogMetadataDisplayValue*,siri::dialogengine::DialogMetadataDisplayValue*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      int v9 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7), *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v10 = *v9;
        *(void *)(v8 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = *((void *)v9 + 2);
        *(_OWORD *)uint64_t v8 = v10;
      }
      std::map<std::string,std::string>::map[abi:ne180100](a4 + v7 + 24, (const void ***)(a2 + v7 + 24));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C5E48768(_Unwind_Exception *exception_object)
{
  while (v2 != v1)
  {
    v2 -= 48;
    std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::destroy[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogMetadataReader::GetAllowUnbounded(siri::dialogengine::DialogMetadataReader *this)
{
  return *(unsigned __int8 *)(*(void *)this + 48);
}

BOOL siri::dialogengine::DialogMetadataReader::Load(siri::dialogengine::DialogMetadata::File **a1, const std::string *a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v7 = *(std::string *)a3;
  }
  uint64_t v8 = &unk_1F211EAE0;
  std::string __p = v7;
  memset(&v7, 0, sizeof(v7));
  BOOL v5 = siri::dialogengine::DialogMetadataReader::Load(a1, a2, (uint64_t)&v8);
  uint64_t v8 = &unk_1F211EAE0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

{
  siri::dialogengine::DialogMetadata::File *v6;
  int v7;
  siri::dialogengine::DialogMetadata::File *v8;
  const char *v9;
  void **v10;
  void *__p[2];
  char v13;
  void *v14;
  uint64_t v15[2];
  unsigned char v16[32];
  unsigned __int8 v17;

  siri::dialogengine::DialogMetadata::File::File((siri::dialogengine::DialogMetadata::File *)&v14);
  if (*a1 != (siri::dialogengine::DialogMetadata::File *)&v14) {
    siri::dialogengine::DialogMetadata::File::InternalSwap(*a1, (siri::dialogengine::DialogMetadata::File *)&v14);
  }
  uint64_t v14 = &unk_1F2119120;
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)v16);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v15);
  int v6 = *a1;
  *((_DWORD *)v6 + 38) = 0;
  std::string::operator=((std::string *)((char *)v6 + 128), a2);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a3 + 16))(&v14, a3);
  std::string v7 = v17;
  if (v17)
  {
    uint64_t v8 = *a1;
    if (&v14 == (void **)*a1)
    {
LABEL_12:
      uint64_t v14 = &unk_1F2119120;
      google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)v16);
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v15);
      return v7 != 0;
    }
    siri::dialogengine::DialogMetadata::File::Clear(*a1);
    siri::dialogengine::DialogMetadata::File::MergeFrom(v8, (const siri::dialogengine::DialogMetadata::File *)&v14);
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a3 + 24))(__p, a3);
    if (v13 >= 0) {
      long long v10 = __p;
    }
    else {
      long long v10 = (void **)__p[0];
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to parse dialog metadata from %s", v9, v10);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v17) {
    goto LABEL_12;
  }
  return v7 != 0;
}

void sub_1C5E48874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5E48A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a23) {
    siri::dialogengine::DialogMetadata::File::~File((siri::dialogengine::DialogMetadata::File *)&a16);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::SiriKitDeviceState::isDialogDriven(siri::dialogengine::SiriKitDeviceState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C5E48B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  MEMORY[0x1C8796D70](v20, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetInteractionType(siri::dialogengine *this, const siri::dialogengine::VariableObject *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "interactionType");
  OptionalStringuint64_t Parameter = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  BOOL v5 = OptionalStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5) {
      goto LABEL_3;
    }
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(this, "");
    return;
  }
  if (!OptionalStringParameter) {
    goto LABEL_6;
  }
LABEL_3:
  (*(void (**)(std::string *__return_ptr, void *))(*(void *)v5 + 48))(&__p, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v19 = __p;
  }
  siri::dialogengine::StringToLower((uint64_t)&v19, (uint64_t)this);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5E48CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void siri::dialogengine::SiriKitDeviceState::isDisplayDriven(siri::dialogengine::SiriKitDeviceState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C5E48E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  MEMORY[0x1C8796D70](v20, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::SiriKitDeviceState::isMultiUser(siri::dialogengine::SiriKitDeviceState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C5E49094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a22);
  if (a21 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v27, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::SiriKitDeviceState::isVoiceGenderMale(siri::dialogengine::SiriKitDeviceState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C5E491A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetVoiceGender(siri::dialogengine *this, const siri::dialogengine::VariableObject *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "voiceGender");
  OptionalStringuint64_t Parameter = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this);
  long long v4 = OptionalStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v4) {
      goto LABEL_3;
    }
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(&v27, "");
    goto LABEL_24;
  }
  if (!OptionalStringParameter) {
    goto LABEL_6;
  }
LABEL_3:
  (*(void (**)(std::string *__return_ptr, void *))(*(void *)v4 + 48))(&__p, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v26 = __p;
  }
  siri::dialogengine::StringToLower((uint64_t)&v26, (uint64_t)&v27);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_24:
  if (v29 < 0)
  {
    if (v28 == 4)
    {
      if (*v27 == 1701601645)
      {
        uint64_t v11 = 0;
        goto LABEL_52;
      }
    }
    else if (v28 == 6)
    {
      unsigned int v8 = 1717923169;
      unsigned int v9 = bswap32(*v27);
      if (v9 == 1717923169 && (unsigned int v9 = bswap32(*((unsigned __int16 *)v27 + 2)) >> 16, v8 = 27749, v9 == 27749))
      {
        int v10 = 0;
      }
      else if (v9 < v8)
      {
        int v10 = -1;
      }
      else
      {
        int v10 = 1;
      }
      if (v10) {
        uint64_t v11 = 2;
      }
      else {
        uint64_t v11 = 1;
      }
      goto LABEL_52;
    }
    uint64_t v11 = 2;
LABEL_52:
    operator delete(v27);
    return v11;
  }
  if (v29 == 4) {
    return 2 * (v27 != 1701601645);
  }
  if (v29 != 6) {
    return 2;
  }
  unsigned int v5 = 1717923169;
  unsigned int v6 = bswap32(v27);
  if (v6 == 1717923169 && (v6 = bswap32(WORD2(v27)) >> 16, unsigned int v5 = 27749, v6 == 27749))
  {
    int v7 = 0;
  }
  else if (v6 < v5)
  {
    int v7 = -1;
  }
  else
  {
    int v7 = 1;
  }
  if (v7) {
    return 2;
  }
  else {
    return 1;
  }
}

void sub_1C5E4945C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void siri::dialogengine::SiriKitDeviceState::isVoiceGenderFemale(siri::dialogengine::SiriKitDeviceState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C5E4952C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::SiriKitDeviceState::isVoiceGenderUnknown(siri::dialogengine::SiriKitDeviceState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C5E495EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C8796D70](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::SiriKitDeviceState::pronoun(siri::dialogengine::SiriKitDeviceState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  int VoiceGender = siri::dialogengine::GetVoiceGender(a2, a2);
  memset(v5, 0, sizeof(v5));
  if (VoiceGender == 1)
  {
    long long v4 = "feminine";
  }
  else
  {
    if (VoiceGender) {
      goto LABEL_6;
    }
    long long v4 = "masculine";
  }
  MEMORY[0x1C8796900](v5, v4);
LABEL_6:
  operator new();
}

void sub_1C5E49758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t YAML::RegEx::RegEx(uint64_t result, int a2)
{
  *(_DWORD *)uint64_t result = a2;
  *(_WORD *)(result + 4) = 0;
  *(void *)(result + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 8) = 0;
  return result;
}

{
  *(_DWORD *)uint64_t result = a2;
  *(_WORD *)(result + 4) = 0;
  *(void *)(result + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 8) = 0;
  return result;
}

uint64_t YAML::RegEx::RegEx(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(_WORD *)(this + 4) = 0;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

{
  *(_DWORD *)this = 0;
  *(_WORD *)(this + 4) = 0;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

uint64_t YAML::RegEx::RegEx(uint64_t this, char a2)
{
  *(_DWORD *)this = 1;
  *(unsigned char *)(this + 4) = a2;
  *(unsigned char *)(this + 5) = 0;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

{
  *(_DWORD *)this = 1;
  *(unsigned char *)(this + 4) = a2;
  *(unsigned char *)(this + 5) = 0;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

uint64_t YAML::RegEx::RegEx(uint64_t this, char a2, char a3)
{
  *(_DWORD *)this = 2;
  *(unsigned char *)(this + 4) = a2;
  *(unsigned char *)(this + 5) = a3;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

{
  *(_DWORD *)this = 2;
  *(unsigned char *)(this + 4) = a2;
  *(unsigned char *)(this + 5) = a3;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

uint64_t YAML::RegEx::RegEx(uint64_t a1, char *a2, int a3)
{
  *(_DWORD *)a1 = a3;
  *(_WORD *)(a1 + 4) = 0;
  unint64_t v4 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    unint64_t v5 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    unint64_t v5 = v4;
  }
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((void *)(a1 + 8), a2, &a2[v5], v5);
  return a1;
}

{
  unint64_t v4;
  unint64_t v5;

  *(_DWORD *)a1 = a3;
  *(_WORD *)(a1 + 4) = 0;
  unint64_t v4 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    unint64_t v5 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    unint64_t v5 = v4;
  }
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((void *)(a1 + 8), a2, &a2[v5], v5);
  return a1;
}

void *std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(void *result, char *a2, char *a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = result;
    std::vector<YAML::RegEx>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v12 = v7;
    uint64_t v11 = v7;
    v9[0] = v6 + 2;
    v9[1] = &v11;
    v9[2] = &v12;
    if (a2 != a3)
    {
      do
      {
        char v8 = *a2++;
        *(_DWORD *)uint64_t v7 = 1;
        *(unsigned char *)(v7 + 4) = v8;
        *(unsigned char *)(v7 + 5) = 0;
        *(void *)(v7 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
        *(void *)(v7 + 24) = 0;
        *(void *)(v7 + 8) = 0;
        v7 += 32;
      }
      while (a2 != a3);
      uint64_t v12 = v7;
    }
    char v10 = 1;
    uint64_t result = (void *)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<YAML::RegEx>,YAML::RegEx*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
    v6[1] = v7;
  }
  return result;
}

void sub_1C5E4999C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t YAML::operator!@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 5;
  *(_WORD *)(a2 + 4) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t result = std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>((uint64_t *)(a2 + 8), a1);
  *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = result;
  return result;
}

void sub_1C5E49A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>(uint64_t *a1, int *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59) {
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  unsigned int v6 = a1 + 2;
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 4 > v3) {
    unint64_t v3 = v7 >> 4;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v3;
  }
  char v25 = v6;
  if (v8) {
    unint64_t v8 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::RegEx>>(v8);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = v8 + 32 * v2;
  unint64_t v23 = v8;
  *(void *)long long v24 = v10;
  *(void *)&v24[8] = v10;
  *(void *)&v24[16] = v8 + 32 * v9;
  int v11 = *a2;
  *(_WORD *)(v10 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)unint64_t v10 = v11;
  *(void *)(v10 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 8) = 0;
  std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>((void *)(v10 + 8), *((int **)a2 + 1), *((int **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 5);
  uint64_t v12 = *(void *)v24;
  *(void *)&v24[8] += 32;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  *(void *)&long long v29 = *(void *)v24;
  *((void *)&v29 + 1) = *(void *)v24;
  long long v28 = v29;
  v26[0] = v6;
  v26[1] = &v28;
  std::string v26[2] = &v29;
  char v27 = 0;
  while (v13 != v14)
  {
    int v15 = *(_DWORD *)(v13 - 32);
    v13 -= 32;
    __int16 v16 = *(_WORD *)(v13 + 4);
    *(void *)(v12 - 24) = 0;
    char v17 = (void *)(v12 - 24);
    *((_WORD *)v17 - 2) = v16;
    *((_DWORD *)v17 - 2) = v15;
    v17[1] = 0;
    std::string v17[2] = 0;
    std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(v17, *(int **)(v13 + 8), *(int **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 5);
    uint64_t v12 = *((void *)&v29 + 1) - 32;
    *((void *)&v29 + 1) -= 32;
  }
  char v27 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<YAML::RegEx>,std::reverse_iterator<YAML::RegEx*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v26);
  uint64_t v18 = a1[2];
  long long v19 = *(_OWORD *)&v24[8];
  uint64_t v22 = *(void *)&v24[8];
  long long v20 = *(_OWORD *)a1;
  *a1 = v12;
  *(_OWORD *)long long v24 = v20;
  *(_OWORD *)(a1 + 1) = v19;
  *(void *)&v24[16] = v18;
  unint64_t v23 = v20;
  std::__split_buffer<YAML::RegEx>::~__split_buffer((uint64_t)&v23);
  return v22;
}

void sub_1C5E49BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<YAML::RegEx>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<YAML::RegEx>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = i - 32;
    unint64_t v5 = (void **)(i - 24);
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<YAML::RegEx>,std::reverse_iterator<YAML::RegEx*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      unint64_t v5 = (void **)(v3 + 8);
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v5);
      v3 += 32;
    }
  }
  return a1;
}

uint64_t YAML::operator|@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 3;
  *(_WORD *)(a3 + 4) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(a3 + 24) = 0;
  unint64_t v5 = std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>((uint64_t *)(a3 + 8), a1);
  unint64_t v6 = *(void *)(a3 + 24);
  *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = v5;
  if (v5 >= v6)
  {
    uint64_t result = std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>((uint64_t *)(a3 + 8), a2);
  }
  else
  {
    std::vector<YAML::RegEx>::__construct_one_at_end[abi:ne180100]<YAML::RegEx const&>(a3 + 8, a2);
    uint64_t result = v5 + 32;
  }
  *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = result;
  return result;
}

void sub_1C5E49D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<YAML::RegEx>::__construct_one_at_end[abi:ne180100]<YAML::RegEx const&>(uint64_t a1, int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *a2;
  *(_WORD *)(v3 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t v3 = v4;
  *(void *)(v3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t result = std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>((void *)(v3 + 8), *((int **)a2 + 1), *((int **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 5);
  *(void *)(a1 + 8) = v3 + 32;
  return result;
}

void sub_1C5E49DE8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t YAML::operator&@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 4;
  *(_WORD *)(a3 + 4) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(a3 + 24) = 0;
  unint64_t v5 = std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>((uint64_t *)(a3 + 8), a1);
  unint64_t v6 = *(void *)(a3 + 24);
  *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = v5;
  if (v5 >= v6)
  {
    uint64_t result = std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>((uint64_t *)(a3 + 8), a2);
  }
  else
  {
    std::vector<YAML::RegEx>::__construct_one_at_end[abi:ne180100]<YAML::RegEx const&>(a3 + 8, a2);
    uint64_t result = v5 + 32;
  }
  *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = result;
  return result;
}

void sub_1C5E49E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::operator+@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 6;
  *(_WORD *)(a3 + 4) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(a3 + 24) = 0;
  unint64_t v5 = std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>((uint64_t *)(a3 + 8), a1);
  unint64_t v6 = *(void *)(a3 + 24);
  *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = v5;
  if (v5 >= v6)
  {
    uint64_t result = std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>((uint64_t *)(a3 + 8), a2);
  }
  else
  {
    std::vector<YAML::RegEx>::__construct_one_at_end[abi:ne180100]<YAML::RegEx const&>(a3 + 8, a2);
    uint64_t result = v5 + 32;
  }
  *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = result;
  return result;
}

void sub_1C5E49F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::IsDisplayMode(int a1)
{
  return (a1 - 3) < 2;
}

void *siri::dialogengine::ResponseModeToString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if ((a1 - 1) > 3) {
    uint64_t v2 = "";
  }
  else {
    uint64_t v2 = off_1E651E420[a1 - 1];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t siri::dialogengine::ParseResponseModeString(unint64_t a1)
{
  unint64_t v1 = a1;
  int v2 = *(char *)(a1 + 23);
  if (v2 < 0)
  {
    uint64_t result = 0;
    switch(*(void *)(v1 + 8))
    {
      case 9:
        unint64_t v1 = *(void *)v1;
LABEL_5:
        unint64_t v4 = bswap64(*(void *)v1);
        if (v4 == 0x766F6963654F6E6CLL)
        {
          int v5 = *(unsigned __int8 *)(v1 + 8) - 121;
        }
        else if (v4 < 0x766F6963654F6E6CLL)
        {
          int v5 = -1;
        }
        else
        {
          int v5 = 1;
        }
        uint64_t result = v5 == 0;
        break;
      case 0xBLL:
        unint64_t v1 = *(void *)v1;
LABEL_12:
        unint64_t v6 = *(void *)v1;
        uint64_t v7 = *(void *)(v1 + 3);
        BOOL v9 = v6 == 0x4F79616C70736964 && v7 == 0x796C6E4F79616C70;
        uint64_t result = (4 * v9);
        break;
      case 0xCLL:
        unint64_t v1 = *(void *)v1;
LABEL_20:
        unint64_t v10 = *(void *)v1;
        int v11 = *(_DWORD *)(v1 + 8);
        BOOL v13 = v10 == 0x726F466563696F76 && v11 == 1685217655;
        uint64_t result = (2 * v13);
        break;
      case 0xELL:
        unint64_t v1 = *(void *)v1;
LABEL_28:
        if (*(void *)v1 ^ 0x4679616C70736964 | *(void *)(v1 + 6) ^ 0x64726177726F4679) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = 3;
        }
        break;
      default:
        return result;
    }
  }
  else
  {
    uint64_t result = 0;
    switch((char)v2)
    {
      case 9:
        goto LABEL_5;
      case 11:
        goto LABEL_12;
      case 12:
        goto LABEL_20;
      case 14:
        goto LABEL_28;
      default:
        return result;
    }
  }
  return result;
}

siri::dialogengine::RequestInfo *siri::dialogengine::RequestInfo::RequestInfo(siri::dialogengine::RequestInfo *this)
{
  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 19) = 0;
  int v2 = (const void ***)siri::dialogengine::DefaultUserSettings(this);
  uint64_t v3 = (siri::dialogengine *)std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)this + 160, v2);
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(void *)((char *)this + 278) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0u;
  if (siri::dialogengine::PreferSSML(v3)) {
    int v4 = 0;
  }
  else {
    int v4 = 2;
  }
  *((_DWORD *)this + 72) = v4;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 37) = (char *)this + 304;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *(_OWORD *)((char *)this + 473) = 0u;
  return this;
}

void sub_1C5E4A20C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 279) < 0) {
    operator delete(*(void **)(v2 + 256));
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 231) < 0) {
    operator delete(*(void **)(v2 + 208));
  }
  if (*(char *)(v2 + 207) < 0) {
    operator delete(*v3);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(v2 + 168));
  if (*(char *)(v2 + 151) < 0) {
    operator delete(*(void **)(v2 + 128));
  }
  if (*(char *)(v2 + 127) < 0) {
    operator delete(*(void **)(v2 + 104));
  }
  if (*(char *)(v2 + 103) < 0) {
    operator delete(*(void **)(v2 + 80));
  }
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*(void **)(v2 + 56));
  }
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*(void **)(v2 + 32));
  }
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::RequestInfo::GetRequestType(siri::dialogengine::RequestInfo *this)
{
  return *(unsigned int *)this;
}

void *siri::dialogengine::RequestInfo::GetRequestTypeString@<X0>(siri::dialogengine::RequestInfo *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = "";
  if (*(_DWORD *)this == 1) {
    uint64_t v2 = "visual";
  }
  if (*(_DWORD *)this) {
    uint64_t v3 = (char *)v2;
  }
  else {
    uint64_t v3 = "dialog";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

_DWORD *siri::dialogengine::RequestInfo::SetRequestType(_DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *siri::dialogengine::RequestInfo::GetTemplateDirs@<X0>(siri::dialogengine::RequestInfo *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(a2, *((void *)this + 1), *((void *)this + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 5));
}

void *std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<siri::dialogengine::UpdatableDir>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>,siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C5E4A39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::RequestInfo::SetTemplateDirs(uint64_t a1, std::string **a2)
{
  uint64_t v2 = a1 + 8;
  if ((std::string **)v2 != a2) {
    std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 5));
  }
}

void siri::dialogengine::RequestInfo::GetCatId(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 6);
  }
}

std::string *siri::dialogengine::RequestInfo::SetCatId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

void siri::dialogengine::RequestInfo::GetParamsPath(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 103) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 10), *((void *)this + 11));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 5);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 12);
  }
}

std::string *siri::dialogengine::RequestInfo::SetParamsPath(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 80), a2);
}

void siri::dialogengine::RequestInfo::GetParamsString(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((void *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 9);
  }
}

std::string *siri::dialogengine::RequestInfo::SetParamsString(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 56), a2);
}

void siri::dialogengine::RequestInfo::GetRequestParamString(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 127) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 13), *((void *)this + 14));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 104);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 15);
  }
}

std::string *siri::dialogengine::RequestInfo::SetRequestParamsString(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 104), a2);
}

void siri::dialogengine::RequestInfo::GetPatternId(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 151) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 16), *((void *)this + 17));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 18);
  }
}

std::string *siri::dialogengine::RequestInfo::SetPatternId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 128), a2);
}

uint64_t siri::dialogengine::RequestInfo::GetResponseMode(siri::dialogengine::RequestInfo *this)
{
  return *((unsigned int *)this + 38);
}

uint64_t siri::dialogengine::RequestInfo::SetResponseMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 152) = a2;
  return result;
}

void siri::dialogengine::RequestInfo::SetResponseMode(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v5 = siri::dialogengine::ParseResponseModeString(a2);
  if (!v5)
  {
    if ((*(char *)(v2 + 23) & 0x80000000) == 0)
    {
      if (!*(unsigned char *)(v2 + 23)) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    if (*(void *)(v2 + 8))
    {
      unint64_t v2 = *(void *)v2;
LABEL_7:
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Unrecognized response mode string '%s'", v4, v2);
    }
  }
LABEL_8:
  *(_DWORD *)(a1 + 152) = v5;
}

uint64_t siri::dialogengine::RequestInfo::GetRandomSeed(siri::dialogengine::RequestInfo *this)
{
  return *((unsigned int *)this + 39);
}

uint64_t siri::dialogengine::RequestInfo::SetRandomSeed(uint64_t this, int a2)
{
  *(_DWORD *)(this + 156) = a2;
  return this;
}

uint64_t siri::dialogengine::RequestInfo::GetUserSettings@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, this + 20);
}

void siri::dialogengine::RequestInfo::GetUserSetting(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = std::__tree<std::string>::find<std::string>(a1 + 160, a2);
  if (a1 + 168 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v5 + 79) < 0)
  {
    uint64_t v7 = *(const std::string::value_type **)(v5 + 56);
    std::string::size_type v8 = *(void *)(v5 + 64);
    std::string::__init_copy_ctor_external(a3, v7, v8);
  }
  else
  {
    long long v6 = *(_OWORD *)(v5 + 56);
    a3->__r_.__value_.__r.__words[2] = *(void *)(v5 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

BOOL siri::dialogengine::RequestInfo::HasUserSetting(uint64_t a1, const void **a2)
{
  return a1 + 168 != std::__tree<std::string>::find<std::string>(a1 + 160, a2);
}

void siri::dialogengine::RequestInfo::SetUserSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 160;
  if (v2 != a2) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v2, *(long long **)a2, (long long *)(a2 + 8));
  }
}

std::string *siri::dialogengine::RequestInfo::SetUserSetting(uint64_t **a1, const void **a2, const std::string *a3)
{
  uint64_t v6 = siri::dialogengine::DefaultUserSettings((siri::dialogengine *)a1);
  uint64_t result = (std::string *)std::__tree<std::string>::find<std::string>(v6, a2);
  if ((std::string *)(v6 + 8) != result)
  {
    uint64_t v9 = a2;
    std::string::size_type v8 = (std::string *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 20, a2, (long long **)&v9)+ 7);
    return std::string::operator=(v8, a3);
  }
  return result;
}

void siri::dialogengine::RequestInfo::GetRequestedLocale(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 231) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 26), *((void *)this + 27));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 13);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 28);
  }
}

std::string *siri::dialogengine::RequestInfo::SetRequestedLocale(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 208), a2);
}

std::string *siri::dialogengine::RequestInfo::GetLocales@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[29], this[30], 0xAAAAAAAAAAAAAAABLL * (((char *)this[30] - (char *)this[29]) >> 3));
}

void siri::dialogengine::RequestInfo::SetLocales(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::vector<std::string> *)(a1 + 232);
  if (v2 != (std::vector<std::string> *)a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
}

void siri::dialogengine::RequestInfo::GetLocalePath(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 279) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 32), *((void *)this + 33));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 16);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 34);
  }
}

std::string *siri::dialogengine::RequestInfo::SetLocalePath(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 256), a2);
}

void siri::dialogengine::RequestInfo::GetLocaleString(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 207) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 23), *((void *)this + 24));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 184);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 25);
  }
}

std::string *siri::dialogengine::RequestInfo::SetLocaleString(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 184), a2);
}

void siri::dialogengine::RequestInfo::GetVisualPath(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 415) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 49), *((void *)this + 50));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 392);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 51);
  }
}

std::string *siri::dialogengine::RequestInfo::SetVisualPath(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 392), a2);
}

void siri::dialogengine::RequestInfo::GetVisualString(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 391) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 46), *((void *)this + 47));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 23);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 48);
  }
}

std::string *siri::dialogengine::RequestInfo::SetVisualString(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 368), a2);
}

uint64_t siri::dialogengine::RequestInfo::GetOptions(siri::dialogengine::RequestInfo *this)
{
  return *((unsigned int *)this + 70);
}

BOOL siri::dialogengine::RequestInfo::HasOption(siri::dialogengine::RequestInfo *this, int a2)
{
  return (a2 & ~*((_DWORD *)this + 70)) == 0;
}

uint64_t siri::dialogengine::RequestInfo::SetOptions(uint64_t this, int a2)
{
  *(_DWORD *)(this + 280) = a2;
  return this;
}

uint64_t siri::dialogengine::RequestInfo::AddOption(uint64_t this, int a2)
{
  *(_DWORD *)(this + 280) |= a2;
  return this;
}

uint64_t siri::dialogengine::RequestInfo::IsMultiUser(siri::dialogengine::RequestInfo *this)
{
  return *((unsigned __int8 *)this + 284);
}

uint64_t siri::dialogengine::RequestInfo::SetMultiUser(uint64_t this, char a2)
{
  *(unsigned char *)(this + 284) = a2;
  return this;
}

uint64_t siri::dialogengine::RequestInfo::GetGrounding(siri::dialogengine::RequestInfo *this)
{
  return *((unsigned __int8 *)this + 285);
}

uint64_t siri::dialogengine::RequestInfo::SetGrounding(uint64_t this, char a2)
{
  *(unsigned char *)(this + 285) = a2;
  return this;
}

void siri::dialogengine::RequestInfo::GetUseCaseState(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 463) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 55), *((void *)this + 56));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 440);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 57);
  }
}

std::string *siri::dialogengine::RequestInfo::SetUseCaseState(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 440), a2);
}

void siri::dialogengine::RequestInfo::GetFamilyState(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 487) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 58), *((void *)this + 59));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 29);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 60);
  }
}

std::string *siri::dialogengine::RequestInfo::SetFamilyState(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 464), a2);
}

uint64_t siri::dialogengine::RequestInfo::GetSSMLMode(siri::dialogengine::RequestInfo *this)
{
  return *((unsigned int *)this + 72);
}

uint64_t siri::dialogengine::RequestInfo::SetSSMLMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 288) = a2;
  return result;
}

std::string *siri::dialogengine::RequestInfo::SetDialogMetadata(uint64_t a1, long long *a2, const std::string *a3)
{
  uint64_t v6 = a2;
  int v4 = (std::string *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)a2, &v6)+ 7);
  return std::string::operator=(v4, a3);
}

void siri::dialogengine::RequestInfo::GetDialogMetadata(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = std::__tree<std::string>::find<std::string>(a1 + 296, a2);
  if (a1 + 304 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v5 + 79) < 0)
  {
    uint64_t v7 = *(const std::string::value_type **)(v5 + 56);
    std::string::size_type v8 = *(void *)(v5 + 64);
    std::string::__init_copy_ctor_external(a3, v7, v8);
  }
  else
  {
    long long v6 = *(_OWORD *)(v5 + 56);
    a3->__r_.__value_.__r.__words[2] = *(void *)(v5 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

void siri::dialogengine::RequestInfo::SetDialogMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 296;
  if (v2 != a2) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v2, *(long long **)a2, (long long *)(a2 + 8));
  }
}

uint64_t siri::dialogengine::RequestInfo::GetDialogMetadata@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, this + 37);
}

void siri::dialogengine::RequestInfo::GetInteractionId(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 343) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 40), *((void *)this + 41));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 20);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 42);
  }
}

std::string *siri::dialogengine::RequestInfo::SetInteractionId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 320), a2);
}

void siri::dialogengine::RequestInfo::GetExecutionRequestId(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 367) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 43), *((void *)this + 44));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 344);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 45);
  }
}

std::string *siri::dialogengine::RequestInfo::SetExecutionRequestId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 344), a2);
}

void *siri::dialogengine::RequestInfo::GetCustomPronunciations@<X0>(siri::dialogengine::RequestInfo *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a2, *((void *)this + 52), *((void *)this + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 53) - *((void *)this + 52)) >> 4));
}

void *std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<siri::dialogengine::DatabaseField>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C5E4AB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1C5E4AC78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::RequestInfo::SetCustomProunciations(uint64_t a1, std::string **a2)
{
  uint64_t v2 = (std::vector<std::pair<std::string, std::string>> *)(a1 + 416);
  if (v2 != (std::vector<std::pair<std::string, std::string>> *)a2) {
    std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 4));
  }
}

void std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(std::vector<std::pair<std::string, std::string>> *this, std::string *__str, std::string *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::vector<std::pair<std::string, std::string>>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) < a4)
  {
    std::vector<siri::dialogengine::DatabaseField>::__vdeallocate(this);
    if (a4 > 0x555555555555555) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<siri::dialogengine::DatabaseField>::__vallocate[abi:ne180100](this, v11);
    uint64_t v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, (uint64_t)__str, (uint64_t)a3, (uint64_t)this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 4) < a4)
  {
    BOOL v13 = (std::string *)((char *)__str + 16 * (((char *)this->__end_ - (char *)begin) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::dialogengine::DatabaseField *,siri::dialogengine::DatabaseField *,siri::dialogengine::DatabaseField *>(__str, v13, &begin->first);
    uint64_t v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, (uint64_t)v13, (uint64_t)a3, (uint64_t)this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  uint64_t v14 = (std::pair<std::string, std::string> *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::dialogengine::DatabaseField *,siri::dialogengine::DatabaseField *,siri::dialogengine::DatabaseField *>(__str, a3, &begin->first);
  for (std::vector<std::pair<std::string, std::string>>::pointer i = this->__end_; i != v14; std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)i))
    --i;
  this->__end_ = v14;
}

void sub_1C5E4AE20(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C5E4AE28(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::RequestInfo::IsBuiltinCAT(siri::dialogengine::RequestInfo *this)
{
  return *((unsigned __int8 *)this + 488);
}

uint64_t siri::dialogengine::RequestInfo::SetBuiltinCAT(uint64_t this, char a2)
{
  *(unsigned char *)(this + 488) = a2;
  return this;
}

void sub_1C5E4B040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5E4B170(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

void sub_1C5E4B28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C5E4B368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5E4B440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void siri::dialogengine::Trace::GeneratePathForTrace(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  GenerateAllTracesPath((uint64_t)v29);
  if (a3 == 0.0)
  {
    gettimeofday(&v20, 0);
    a3 = (double)v20.tv_usec / 1000000.0 + (double)v20.tv_sec;
  }
  time_t v28 = (uint64_t)a3;
  gmtime_r(&v28, &v27);
  strftime(__s, 0x10uLL, "%Y%m%d_%H%M%S", &v27);
  FormatDecimalDigits(a3, v25, 3u);
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::size_type v6 = *(void *)(a1 + 8);
    if (v6)
    {
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a1, v6);
      goto LABEL_9;
    }
  }
  else if (*(unsigned char *)(a1 + 23))
  {
    std::string v24 = *(std::string *)a1;
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(&v24, "None");
LABEL_9:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v20);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"DialogEngine_", 13);
  size_t v8 = strlen(__s);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)__s, v8);
  LOBYTE(__p[0]) = 95;
  unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)__p, 1);
  if ((v26 & 0x80u) == 0) {
    unint64_t v11 = v25;
  }
  else {
    unint64_t v11 = (void **)v25[0];
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v12 = v26;
  }
  else {
    uint64_t v12 = (uint64_t)v25[1];
  }
  BOOL v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  LOBYTE(__p[0]) = 95;
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 1);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v15 = &v24;
  }
  else {
    int v15 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v24.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, size);
  std::stringbuf::str();
  siri::dialogengine::JoinPath((uint64_t)v29, (uint64_t)__p, a2);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  v20.tv_sec = *MEMORY[0x1E4FBA408];
  uint64_t v17 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(__darwin_time_t *)((char *)&v20.tv_sec + *(void *)(v20.tv_sec - 2std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v21[0] = v17;
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0](&v23);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if ((char)v26 < 0) {
    operator delete(v25[0]);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
}

void sub_1C5E4B7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (*(char *)(v15 - 177) < 0) {
    operator delete(*(void **)(v15 - 200));
  }
  if (*(char *)(v15 - 89) < 0) {
    operator delete(*(void **)(v15 - 112));
  }
  _Unwind_Resume(exception_object);
}

void GenerateAllTracesPath(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "/tmp");
  std::string::basic_string[abi:ne180100]<0>(__p, "DialogEngine_traces");
  siri::dialogengine::JoinPath((uint64_t)v4, (uint64_t)__p, a1);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1C5E4B8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FormatDecimalDigits(double a1, unsigned int a2, unsigned int a3)
{
  __exp10((double)a3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
  *(void *)((char *)&v8[3] + *(void *)(v8[0] - 2std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 4)) = a3;
  char v6 = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, &v6);
  std::ostream::operator<<();
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v7 + *(void *)(v7[0] - 2std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v8[0] = v4;
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8796CC0](&v10);
}

void sub_1C5E4BACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::Trace::Trace(std::string *this, long long *a2, int a3, double a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = 0u;
  p_std::string::size_type size = (void **)&this[1].__r_.__value_.__l.__size_;
  *(double *)&this[1].__r_.__value_.__l.__data_ = a4;
  size_t v8 = (void **)&this[2].__r_.__value_.__l.__size_;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = 0u;
  char v21 = (void **)&this[4].__r_.__value_.__l.__size_;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  char v9 = (void **)&this[7].__r_.__value_.__l.__size_;
  uint64_t v10 = MEMORY[0x1E4FBA468] + 64;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)((char *)&this[7].__r_.__value_.__r.__words[2] + 2) = 0u;
  this[26].__r_.__value_.__r.__words[0] = v10;
  std::string::size_type v11 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  std::string::size_type v12 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  this[8].__r_.__value_.__r.__words[2] = v12;
  *(std::string::size_type *)((char *)&this[8].__r_.__value_.__r.__words[2] + *(void *)(v12 - 2std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 4)) = v11;
  BOOL v13 = (std::ios_base *)((char *)&this[8].__r_.__value_.__r.__words[2]
                        + *(void *)(this[8].__r_.__value_.__r.__words[2] - 24));
  std::ios_base::init(v13, &this[9]);
  uint64_t v14 = MEMORY[0x1E4FBA468] + 24;
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  this[8].__r_.__value_.__r.__words[2] = v14;
  this[26].__r_.__value_.__r.__words[0] = v10;
  MEMORY[0x1C8796A00](&this[9]);
  double v15 = *(double *)&this[1].__r_.__value_.__l.__data_;
  uint64_t v17 = (void **)&this[5].__r_.__value_.__l.__size_;
  __int16 v16 = (void **)&this[3].__r_.__value_.__l.__size_;
  if (v15 == 0.0)
  {
    gettimeofday(&v24, 0);
    double v15 = (double)v24.tv_usec / 1000000.0 + (double)v24.tv_sec;
    *(double *)&this[1].__r_.__value_.__l.__data_ = v15;
  }
  siri::dialogengine::Trace::GeneratePathForTrace((uint64_t)this, (uint64_t)&v24, v15);
  if (this[2].__r_.__value_.__s.__data_[7] < 0) {
    operator delete(*p_size);
  }
  *(timeval *)p_std::string::size_type size = v24;
  this[2].__r_.__value_.__r.__words[0] = v25;
  std::string::basic_string[abi:ne180100]<0>(__p, "Templates");
  siri::dialogengine::JoinPath((uint64_t)&this[1].__r_.__value_.__l.__size_, (uint64_t)__p, (uint64_t)&v24);
  if (this[3].__r_.__value_.__s.__data_[7] < 0) {
    operator delete(*v8);
  }
  *(timeval *)size_t v8 = v24;
  this[3].__r_.__value_.__r.__words[0] = v25;
  HIBYTE(v25) = 0;
  LOBYTE(v24.tv_sec) = 0;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dialog");
  siri::dialogengine::JoinPath((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)__p, (uint64_t)&v24);
  if (this[4].__r_.__value_.__s.__data_[7] < 0) {
    operator delete(*v16);
  }
  *(timeval *)__int16 v16 = v24;
  this[4].__r_.__value_.__r.__words[0] = v25;
  HIBYTE(v25) = 0;
  LOBYTE(v24.tv_sec) = 0;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "metadata");
  siri::dialogengine::JoinPath((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)__p, (uint64_t)&v24);
  if (this[6].__r_.__value_.__s.__data_[7] < 0) {
    operator delete(*v17);
  }
  *(timeval *)uint64_t v17 = v24;
  this[6].__r_.__value_.__r.__words[0] = v25;
  HIBYTE(v25) = 0;
  LOBYTE(v24.tv_sec) = 0;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  timeval v20 = (void **)&this[6].__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]<0>(__p, "schema");
  siri::dialogengine::JoinPath((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)__p, (uint64_t)&v24);
  if (this[7].__r_.__value_.__s.__data_[7] < 0) {
    operator delete(*v20);
  }
  *(timeval *)timeval v20 = v24;
  this[7].__r_.__value_.__r.__words[0] = v25;
  HIBYTE(v25) = 0;
  LOBYTE(v24.tv_sec) = 0;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "visual");
  siri::dialogengine::JoinPath((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)__p, (uint64_t)&v24);
  if (this[5].__r_.__value_.__s.__data_[7] < 0) {
    operator delete(*v21);
  }
  *(timeval *)char v21 = v24;
  this[5].__r_.__value_.__r.__words[0] = v25;
  HIBYTE(v25) = 0;
  LOBYTE(v24.tv_sec) = 0;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  siri::dialogengine::CatIdToPath((uint64_t)this, __p);
  siri::dialogengine::JoinPath((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)__p, (uint64_t)&v24);
  if (this[8].__r_.__value_.__s.__data_[7] < 0) {
    operator delete(*v9);
  }
  *(timeval *)char v9 = v24;
  this[8].__r_.__value_.__r.__words[0] = v25;
  HIBYTE(v25) = 0;
  LOBYTE(v24.tv_sec) = 0;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (a3) {
    siri::dialogengine::Trace::InitLogging((uint64_t)this);
  }
  return this;
}

void sub_1C5E4BF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void **a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::ofstream::~ofstream(v23);
  if (*(char *)(v20 + 199) < 0) {
    operator delete(*v24);
  }
  if (*(char *)(v20 + 175) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v20 + 151) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v20 + 127) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v20 + 103) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v20 + 79) < 0) {
    operator delete(*v22);
  }
  if (*(char *)(v20 + 55) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(a1);
}

void sub_1C5E4C048()
{
  std::ostream::~ostream();
  MEMORY[0x1C8796CC0](v0);
  JUMPOUT(0x1C5E4BFB0);
}

uint64_t siri::dialogengine::Trace::InitLogging(uint64_t this)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(this + 201))
  {
    uint64_t v1 = this;
    this = siri::dialogengine::Trace::CreateFolders((siri::dialogengine::Trace *)this);
    if (this)
    {
      std::string::basic_string[abi:ne180100]<0>(v3, "log.txt");
      siri::dialogengine::JoinPath(v1 + 32, (uint64_t)v3, (uint64_t)&__p);
      std::ofstream::open();
      if (v6 < 0) {
        operator delete(__p);
      }
      if (v4 < 0) {
        operator delete(v3[0]);
      }
      uint64_t v2 = operator new(0x20uLL);
      *uint64_t v2 = &unk_1F211EB10;
      v2[1] = siri::dialogengine::Trace::Log;
      v2[2] = 0;
      v2[3] = v1;
      v7[3] = v2;
      siri::dialogengine::Log::SetLoggerCallback((siri::dialogengine *)v7);
      this = (uint64_t)std::__function::__value_func<void ()(siri::dialogengine::LogEntry const&)>::~__value_func[abi:ne180100](v7);
      *(unsigned char *)(v1 + 201) = 1;
    }
  }
  return this;
}

void sub_1C5E4C17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
}

BOOL siri::dialogengine::Trace::CreateFolders(siri::dialogengine::Trace *this)
{
  if (*((unsigned char *)this + 200)) {
    return 1;
  }
  GenerateAllTracesPath((uint64_t)&__p);
  if (!siri::dialogengine::DirExists((uint64_t *)&__p))
  {
    siri::dialogengine::CreateDir(&__p, 504);
    siri::dialogengine::AddPermissions((const char *)&__p, 511);
  }
  *((unsigned char *)this + 200) = siri::dialogengine::CreateDir((std::string *)((char *)this + 80), 504);
  char Dir = siri::dialogengine::CreateDir((std::string *)((char *)this + 128), 504);
  if (*((unsigned char *)this + 200)) {
    char v4 = Dir;
  }
  else {
    char v4 = 0;
  }
  *((unsigned char *)this + 200) = v4;
  char v5 = siri::dialogengine::CreateDir((std::string *)((char *)this + 152), 504);
  if (*((unsigned char *)this + 200)) {
    char v6 = v5;
  }
  else {
    char v6 = 0;
  }
  *((unsigned char *)this + 200) = v6;
  char v7 = siri::dialogengine::CreateDir((std::string *)((char *)this + 176), 504);
  if (*((unsigned char *)this + 200)) {
    char v8 = v7;
  }
  else {
    char v8 = 0;
  }
  *((unsigned char *)this + 200) = v8;
  char v9 = siri::dialogengine::CreateDir((std::string *)((char *)this + 104), 504);
  if (*((unsigned char *)this + 200)) {
    char v11 = v9;
  }
  else {
    char v11 = 0;
  }
  *((unsigned char *)this + 200) = v11;
  if (v11)
  {
    BOOL v1 = 1;
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to create folders for trace", v10);
    BOOL v1 = *((unsigned char *)this + 200) != 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v1;
}

void sub_1C5E4C2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::Log(siri::dialogengine::Trace *this, const siri::dialogengine::LogEntry *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 201))
  {
    char v4 = (double *)((char *)a2 + 32);
    time_t v19 = (uint64_t)*((double *)a2 + 4);
    gmtime_r(&v19, &v18);
    strftime(__s, 0x14uLL, "%Y-%m-%d %H:%M:%S", &v18);
    FormatDecimalDigits(*v4, v16, 6u);
    size_t v5 = strlen(__s);
    char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 26, (uint64_t)__s, v5);
    __p.__r_.__value_.__s.__data_[0] = 46;
    char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&__p, 1);
    if ((v17 & 0x80u) == 0) {
      char v8 = v16;
    }
    else {
      char v8 = (void **)v16[0];
    }
    if ((v17 & 0x80u) == 0) {
      uint64_t v9 = v17;
    }
    else {
      uint64_t v9 = (uint64_t)v16[1];
    }
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    __p.__r_.__value_.__s.__data_[0] = 32;
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&__p, 1);
    siri::dialogengine::LogEntry::AsString(a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, size);
    char v20 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v20, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((char)v17 < 0) {
      operator delete(v16[0]);
    }
  }
  else
  {
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Trace::Log() was called but logging has not been initialized.", (const char *)a2);
  }
}

void sub_1C5E4C4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>>,void ()(siri::dialogengine::LogEntry const&)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>>,void ()(siri::dialogengine::LogEntry const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>>,void ()(siri::dialogengine::LogEntry const&)>::operator()(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  char v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

__n128 std::__function::__func<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>>,void ()(siri::dialogengine::LogEntry const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F211EB10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>>,void ()(siri::dialogengine::LogEntry const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F211EB10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>>,void ()(siri::dialogengine::LogEntry const&)>::~__func()
{
}

void siri::dialogengine::Trace::~Trace(siri::dialogengine::Trace *this)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 201))
  {
    void v4[3] = 0;
    siri::dialogengine::Log::SetLoggerCallback((siri::dialogengine *)v4);
    std::__function::__value_func<void ()(siri::dialogengine::LogEntry const&)>::~__value_func[abi:ne180100](v4);
  }
  uint64_t v2 = MEMORY[0x1E4FBA400];
  uint64_t v3 = *MEMORY[0x1E4FBA400];
  *((void *)this + 26) = *MEMORY[0x1E4FBA400];
  *(void *)((char *)this + *(void *)(v3 - 24) + 208) = *(void *)(v2 + 24);
  MEMORY[0x1C8796A10]((char *)this + 216);
  std::ostream::~ostream();
  MEMORY[0x1C8796CC0]((char *)this + 624);
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void sub_1C5E4C7C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void siri::dialogengine::Trace::GetCatId(siri::dialogengine::Trace *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

double siri::dialogengine::Trace::GetUtcTime(siri::dialogengine::Trace *this)
{
  return *((double *)this + 3);
}

void siri::dialogengine::Trace::GetPath(siri::dialogengine::Trace *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 6);
  }
}

void siri::dialogengine::Trace::WriteExpandedParams(siri::dialogengine::Trace *this, siri::dialogengine::Context *a2)
{
  v24[61] = *(void **)MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __int16 v16 = "No context found during parameter expansion in trace";
LABEL_41:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v16, (const char *)a2);
    return;
  }
  uint64_t v4 = *((void *)a2 + 63);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 64);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (!v4)
  {
    __int16 v16 = "No file object found during parameter expansion in trace";
    goto LABEL_41;
  }
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v23, (siri::dialogengine::Context *)((char *)a2 + 8));
  int v5 = (int)v23;
  siri::dialogengine::RequestInfo::~RequestInfo(&v23);
  if (v5 != 1)
  {
    v22[0] = 0;
    v22[1] = 0;
    v21[1] = 0;
    v21[2] = v22;
    char v20 = v21;
    v21[0] = 0;
    std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100]((uint64_t)&v23, (const void ***)a2 + 65);
    char v6 = (char *)v23;
    if (v23 == v24)
    {
LABEL_44:
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v24[0]);
      siri::dialogengine::CreateJSONObjectVal();
    }
    while (1)
    {
      if (v6[55] < 0) {
        std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)v6 + 4), *((void *)v6 + 5));
      }
      else {
        std::string v19 = *(std::string *)(v6 + 32);
      }
      char v7 = (std::__shared_weak_count *)*((void *)v6 + 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)&v19, 0, (uint64_t)v17);
      if (v18 < 0)
      {
        if (v17[1] != (void *)19) {
          goto LABEL_24;
        }
        char v8 = (void **)v17[0];
      }
      else
      {
        if (v18 != 19) {
          goto LABEL_24;
        }
        char v8 = v17;
      }
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      uint64_t v11 = *(uint64_t *)((char *)v8 + 11);
      BOOL v12 = v9 == (void *)0x2E74696B69726973 && v10 == (void *)0x7453656369766544;
      if (!v12 || v11 != 0x6574617453656369) {
LABEL_24:
      }
        siri::dialogengine::CreateJSONStringVal();
      if (v18 < 0) {
        break;
      }
      if (v7) {
        goto LABEL_27;
      }
LABEL_28:
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      uint64_t v14 = (char *)*((void *)v6 + 1);
      if (v14)
      {
        do
        {
          double v15 = v14;
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          double v15 = (char *)*((void *)v6 + 2);
          BOOL v12 = *(void *)v15 == (void)v6;
          char v6 = v15;
        }
        while (!v12);
      }
      char v6 = v15;
      if (v15 == (char *)v24) {
        goto LABEL_44;
      }
    }
    operator delete(v17[0]);
    if (!v7) {
      goto LABEL_28;
    }
LABEL_27:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    goto LABEL_28;
  }
}

void sub_1C5E4CD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a39);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a42);
  _Unwind_Resume(a1);
}

void sub_1C5E4CEE8()
{
  if (!v0) {
    JUMPOUT(0x1C5E4CEB8);
  }
  JUMPOUT(0x1C5E4CEB0);
}

void siri::dialogengine::ExpandParameters(uint64_t a1, const void **a2, const void **a3)
{
  if (*a2) {
  else
  }
    char v6 = 0;
  DefaultPropertyMap();
  uint64_t v7 = qword_1EA3D8BC8;
  if (!qword_1EA3D8BC8)
  {
LABEL_9:
    (*(void (**)(std::string *__return_ptr))(*(void *)*a2 + 56))(&v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v32, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    }
    else {
      std::string v32 = v19;
    }
    if (v30 < 0) {
      operator delete(__p);
    }
    if (v28 < 0) {
      operator delete(v27);
    }
    if (v26 < 0) {
      operator delete(v25);
    }
    if (v24 < 0) {
      operator delete(v23);
    }
    if (v22 < 0) {
      operator delete(v21);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)*a2 + 56))(&v19);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v31, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    }
    else {
      std::string v31 = v20;
    }
    if (v30 < 0) {
      operator delete(__p);
    }
    if (v28 < 0) {
      operator delete(v27);
    }
    if (v26 < 0) {
      operator delete(v25);
    }
    if (v24 < 0) {
      operator delete(v23);
    }
    if (v22 < 0) {
      operator delete(v21);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v32.__r_.__value_.__l.__size_ == 8)
      {
        char v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
LABEL_48:
        if (v8->__r_.__value_.__r.__words[0] == 0x5D7463656A624F5BLL) {
          goto LABEL_56;
        }
      }
    }
    else if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) == 8)
    {
      char v8 = &v32;
      goto LABEL_48;
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v31.__r_.__value_.__l.__size_ != 8) {
        goto LABEL_55;
      }
      uint64_t v9 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) != 8) {
        goto LABEL_55;
      }
      uint64_t v9 = &v31;
    }
    if (v9->__r_.__value_.__r.__words[0] != 0x5D7463656A624F5BLL) {
LABEL_55:
    }
      siri::dialogengine::CreateJSONStringVal();
LABEL_56:
    std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100]((uint64_t)&v19, v6 + 9);
    std::string::size_type v10 = v19.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v19.__r_.__value_.__l.__data_ != &v19.__r_.__value_.__r.__words[1])
    {
      v17[1] = 0;
      uint64_t v18 = 0;
      v17[0] = &v17[1];
      if (*(char *)(v19.__r_.__value_.__r.__words[0] + 55) < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v19.__r_.__value_.__r.__words[0] + 32), *(void *)(v19.__r_.__value_.__r.__words[0] + 40));
      }
      else {
        std::string v16 = *(std::string *)(v19.__r_.__value_.__r.__words[0] + 32);
      }
      siri::dialogengine::Variable::GetFullName(*(siri::dialogengine::Variable **)(v10 + 56), (uint64_t)v13);
      siri::dialogengine::ResolveType(0, a1, (uint64_t)v13, 0, (uint64_t)v15);
      if (v14 < 0) {
        operator delete(v13[0]);
      }
      siri::dialogengine::CreateJSONStringVal();
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)v19.__r_.__value_.__l.__size_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    goto LABEL_78;
  }
  while (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&unk_1EA3D8BD0, a3, (const void **)(v7 + 32)))
  {
LABEL_8:
    uint64_t v7 = *(void *)v7;
    if (!v7) {
      goto LABEL_9;
    }
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&unk_1EA3D8BD0, (const void **)(v7 + 32), a3))
  {
    v7 += 8;
    goto LABEL_8;
  }
  DefaultPropertyMap();
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  uint64_t v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&DefaultPropertyMap(void)::sDefaultPropertyMap, a3, (long long **)&v19);
  if (*((char *)v11 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)v11[7], v11[8]);
  }
  else {
    std::string v32 = *(std::string *)(v11 + 7);
  }
  std::operator+<char>();
  siri::dialogengine::ConceptCallbacks::InvokeCallback(a1, (uint64_t)a3, (uint64_t)&v32, (uint64_t)v6, (uint64_t)&v19, &v16);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (v16.__r_.__value_.__r.__words[0])
  {
    if (v12)
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)v12 + 48))(&v19);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v31, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
      }
      else {
        std::string v31 = v19;
      }
      siri::dialogengine::CreateJSONStringVal();
    }
  }
  if (v16.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16.__r_.__value_.__l.__size_);
  }
LABEL_78:
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_1C5E4D810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,std::__shared_weak_count *a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a40);
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (*(char *)(v45 - 105) < 0) {
    operator delete(*(void **)(v45 - 128));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::Trace::WriteStringToFile(siri::dialogengine::Trace *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[19] = *MEMORY[0x1E4F143B8];
  if (!siri::dialogengine::Trace::CreateFolders(a1)) {
    return;
  }
  siri::dialogengine::JoinPath(a3, a4, (uint64_t)v16);
  if (v17 >= 0) {
    char v8 = v16;
  }
  else {
    char v8 = (void **)v16[0];
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Write file to trace: %s", v7, v8);
  std::ofstream::basic_ofstream(&v18);
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(void *)a2;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, v10, v11);
  std::string::basic_string[abi:ne180100]<0>(__p, "\n");
  BOOL v12 = siri::dialogengine::StringEndsWith((std::string *)a2, (unsigned __int8 *)__p);
  BOOL v13 = v12;
  if ((v15 & 0x80000000) == 0)
  {
    if (v12) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (!v13)
  {
LABEL_15:
    LOBYTE(__p[0]) = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)__p, 1);
  }
LABEL_16:
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&v19[*(void *)(v18 - 24) - 8], *(_DWORD *)&v19[*(void *)(v18 - 24) + 24] | 4);
  }
  uint64_t v18 = *MEMORY[0x1E4FBA400];
  *(void *)&v19[*(void *)(v18 - 24) - 8] = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x1C8796A10](v19);
  std::ostream::~ostream();
  MEMORY[0x1C8796CC0](v20);
  if (v17 < 0) {
    operator delete(v16[0]);
  }
}

void sub_1C5E4DC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::ofstream::~ofstream(&a23);
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

void DefaultPropertyMap(void)
{
  v6[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[20],0>(v1);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[18],0>(v2);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[6],0>(v3);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[5],0>(v4);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v5);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[12],0>(v6);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&DefaultPropertyMap(void)::sDefaultPropertyMap, v1, 6);
    for (uint64_t i = 30; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v1[i]);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &DefaultPropertyMap(void)::sDefaultPropertyMap, &dword_1C5C1E000);
  }
}

void sub_1C5E4DD88(_Unwind_Exception *a1)
{
  for (uint64_t i = 240; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[20],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "dialog.Calendar");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dateTimeDescriptive");
  return a1;
}

void sub_1C5E4DE20(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[18],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "dialog.CalendarRange");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dateTimeRangeLong");
  return a1;
}

void sub_1C5E4DE7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[6],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "dialog.ConvertibleMeasurement");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "value");
  return a1;
}

void sub_1C5E4DED8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[5],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "dialog.LocationAddress");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "name");
  return a1;
}

void sub_1C5E4DF34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "dialog.State");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "usageCount");
  return a1;
}

void sub_1C5E4DF90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[12],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "dialog.TimeZone");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "formatShort");
  return a1;
}

void sub_1C5E4DFEC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::WriteRequestInfo(std::string *this, const siri::dialogengine::Context *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v8, (const siri::dialogengine::Context *)((char *)a2 + 8));
  memset(v7, 0, 24);
  std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(v7, v9, v10, 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 5));
  siri::dialogengine::GetBaseDir((long long **)v7, &v5);
  char v6 = v7;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100](&v6);
  siri::dialogengine::RequestInfo::~RequestInfo(&v8);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    if (size)
    {
      std::string::__init_copy_ctor_external(&v4, this->__r_.__value_.__l.__data_, size);
      goto LABEL_7;
    }
  }
  else if (*((unsigned char *)&this->__r_.__value_.__s + 23))
  {
    std::string v4 = *this;
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
LABEL_7:
  siri::dialogengine::CreateJSONStringVal();
}

void sub_1C5E4E668(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::Trace::WriteRequestJson(siri::dialogengine::Trace *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + 32;
  std::string::basic_string[abi:ne180100]<0>(__p, "request.json");
  siri::dialogengine::Trace::WriteStringToFile(a1, a2, v4, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5E4EAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::CopyParamsFile(siri::dialogengine::Trace *a1, uint64_t a2)
{
}

void siri::dialogengine::Trace::CopyFile(siri::dialogengine::Trace *a1, uint64_t a2, uint64_t a3)
{
  if (siri::dialogengine::Trace::CreateFolders(a1))
  {
    siri::dialogengine::BaseName(a2, &__p);
    siri::dialogengine::JoinPath(a3, (uint64_t)&__p, (uint64_t)&v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *(void *)a2;
    }
    uint64_t v7 = &v9;
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)v9.__r_.__value_.__r.__words[0];
    }
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Copy file to trace: [%s] -> [%s]", v5, v6, v7);
    siri::dialogengine::CopyFile((uint64_t *)a2, &v9);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5E4EBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::CopyLocaleFile(siri::dialogengine::Trace *a1, uint64_t a2)
{
}

void siri::dialogengine::Trace::WriteParamsXmlFile(siri::dialogengine::Trace *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + 80;
  std::string::basic_string[abi:ne180100]<0>(__p, "_params.cat.xml");
  siri::dialogengine::Trace::WriteStringToFile(a1, a2, v4, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5E4EC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::WriteLocaleXmlFile(siri::dialogengine::Trace *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + 80;
  std::string::basic_string[abi:ne180100]<0>(__p, "locale.cat.xml");
  siri::dialogengine::Trace::WriteStringToFile(a1, a2, v4, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5E4ECF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::WriteVisualXmlFile(siri::dialogengine::Trace *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + 104;
  std::string::basic_string[abi:ne180100]<0>(__p, "visualcat.vcatxml");
  siri::dialogengine::Trace::WriteStringToFile(a1, a2, v4, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5E4ED7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::CopySchemaFile(siri::dialogengine::Trace *a1, uint64_t a2)
{
}

void siri::dialogengine::Trace::CopyMetadataFile(siri::dialogengine::Trace *a1, const std::string *a2)
{
  memset(&__str, 0, sizeof(__str));
  std::string::basic_string[abi:ne180100]<0>(__p, "metadata");
  siri::dialogengine::RelativePathFromFolder((uint64_t)a2, (unsigned __int8 **)__p, (uint64_t)v8);
  int v5 = v8[0];
  std::string __str = *(std::string *)&v8[8];
  v8[31] = 0;
  v8[8] = 0;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
      goto LABEL_6;
    }
  }
  else if (v8[0])
  {
    goto LABEL_6;
  }
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Loading a metadata file from a path that doesn't include 'metadata'", v4);
  std::string::operator=(&__str, a2);
LABEL_6:
  siri::dialogengine::DirName(&__str, (uint64_t)__p);
  siri::dialogengine::JoinPath((uint64_t)a1 + 128, (uint64_t)__p, (uint64_t)v8);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = *(std::string *)v8;
  v8[23] = 0;
  v8[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  siri::dialogengine::Trace::CopyFile(a1, (uint64_t)a2, (uint64_t)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C5E4EEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::WriteDialogStateToFile(siri::dialogengine::Trace *a1, const void ***a2, int a3)
{
  if (siri::dialogengine::Trace::CreateFolders(a1))
  {
    if (a3) {
      char v6 = "-after";
    }
    else {
      char v6 = "-before";
    }
    std::string::basic_string[abi:ne180100]<0>(&v22, v6);
    std::operator+<char>();
    char v7 = std::string::append(&v17, ".xml");
    uint64_t v8 = (uint64_t)a1 + 32;
    long long v9 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    int64_t v19 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v9;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::JoinPath(v8, (uint64_t)__p, (uint64_t)v20);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    uint64_t v11 = v20;
    if (v21 < 0) {
      uint64_t v11 = (void **)v20[0];
    }
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Write DialogStateUseCase to trace: %s", v10, v11);
    siri::dialogengine::WriteDialogStateUseCaseToFile(a2, (const char *)v20);
    std::operator+<char>();
    BOOL v12 = std::string::append(&v16, ".xml");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::JoinPath(v8, (uint64_t)&v17, (uint64_t)__p);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    char v15 = __p;
    if (v19 < 0) {
      char v15 = (void **)__p[0];
    }
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Write DialogStateFamily to trace: %s", v14, v15);
    siri::dialogengine::WriteDialogStateFamilyToFile((siri::dialogengine::Context *)a2, (const char *)__p);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
  }
}

void sub_1C5E4F0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::WriteResponseJson(siri::dialogengine::Trace *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + 32;
  std::string::basic_string[abi:ne180100]<0>(__p, "response.json");
  siri::dialogengine::Trace::WriteStringToFile(a1, a2, v4, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5E4F1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::WriteRunScript(siri::dialogengine::Trace *this, const siri::dialogengine::Context *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v9, "#!/bin/bash\ntrace_dir=\"$( cd \"$( dirname \"$0\")\" >/dev/null 2>&1 && pwd)\"\nexport PATH=${PATH}:/System/Library/PrivateFrameworks/DialogEngine.framework\ncmd=\"catutil execute --json ${trace_dir}/request.json --templateDir ${trace_dir}/Templates --randomSeed RANDOMSEED\"\necho $cmd\n$cmd\n");
  std::string::basic_string[abi:ne180100]<0>(__p, "RANDOMSEED");
  if (a2) {
    unsigned int v4 = *((_DWORD *)a2 + 234);
  }
  else {
    unsigned int v4 = 0;
  }
  std::to_string(&v5, v4);
  siri::dialogengine::StringReplace((uint64_t)&v9, (char *)__p, (uint64_t)&v5, 0, &v8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string v9 = v8;
  *((unsigned char *)&v8.__r_.__value_.__s + 23) = 0;
  v8.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v8, "run.sh");
  siri::dialogengine::Trace::WriteStringToFile(this, (uint64_t)&v9, (uint64_t)this + 32, (uint64_t)&v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "run.sh");
  siri::dialogengine::JoinPath((uint64_t)this + 32, (uint64_t)__p, (uint64_t)&v8);
  siri::dialogengine::AddPermissions((const char *)&v8, 73);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1C5E4F354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v27 - 25) < 0) {
    operator delete(*(void **)(v27 - 48));
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::WriteParametersBinary(siri::dialogengine::File *this, uint64_t a2, siri::dialogengine::File *a3)
{
  if (!this)
  {
    char v7 = "File cannot be null, not writing.";
LABEL_9:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v7, (const char *)a2);
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (!v4)
  {
    char v7 = "Path cannot be empty, not writing.";
    goto LABEL_9;
  }
  if (*((char *)this + 55) < 0) {
    std::string::__init_copy_ctor_external(__p, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else {
    __p[0] = *(std::string *)((char *)this + 32);
  }
  std::string::size_type size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
  }
  if (size)
  {
    BOOL v10 = 0;
    if ((*((unsigned char *)&__p[0].__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_15;
    }
LABEL_23:
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v10) {
      goto LABEL_16;
    }
    goto LABEL_24;
  }
  siri::dialogengine::File::GetMetadata(this, (uint64_t)&v23);
  if (v23.__r_.__value_.__r.__words[2])
  {
    BOOL v10 = 0;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(&v19, *((void *)this + 22), *((void *)this + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 4));
    BOOL v10 = v19 == v20;
    char v22 = (void **)&v19;
    std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100](&v22);
  }
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((void *)v23.__r_.__value_.__l.__size_);
  if ((*((unsigned char *)&__p[0].__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_23;
  }
LABEL_15:
  if (v10)
  {
LABEL_16:
    std::operator+<char>();
    siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    return 1;
  }
LABEL_24:
  uint64_t v11 = google::protobuf::SetLogHandler((uint64_t (*)())siri::dialogengine::ScopedLogHandler::logHandler);
  siri::dialogengine::CatBinary::cat::cat((siri::dialogengine::CatBinary::cat *)__p);
  LODWORD(__p[0].__r_.__value_.__r.__words[2]) |= 1u;
  std::string::basic_string[abi:ne180100]<0>(&v23, "CATPB");
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v16, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (*((char *)this + 175) < 0) {
    std::string::__init_copy_ctor_external(&v23, *((const std::string::value_type **)this + 19), *((void *)this + 20));
  }
  else {
    std::string v23 = *(std::string *)((char *)this + 152);
  }
  LODWORD(__p[0].__r_.__value_.__r.__words[2]) |= 2u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v17, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (*((char *)this + 127) < 0) {
    std::string::__init_copy_ctor_external(&v23, *((const std::string::value_type **)this + 13), *((void *)this + 14));
  }
  else {
    std::string v23 = *(std::string *)((char *)this + 104);
  }
  LODWORD(__p[0].__r_.__value_.__r.__words[2]) |= 4u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(v18, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (siri::dialogengine::AddMetaAndParameters((siri::dialogengine *)__p, this, a3))
  {
    if (*(char *)(a2 + 23) >= 0) {
      long long v13 = (const siri::dialogengine::CatBinary::cat *)a2;
    }
    else {
      long long v13 = *(const siri::dialogengine::CatBinary::cat **)a2;
    }
    BOOL v8 = siri::dialogengine::SaveProtobuf((siri::dialogengine *)__p, v13, v12);
  }
  else
  {
    BOOL v8 = 0;
  }
  siri::dialogengine::CatBinary::cat::~cat((siri::dialogengine::CatBinary::cat *)__p);
  google::protobuf::SetLogHandler(v11);
  return v8;
}

void sub_1C5E4F6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*(void **)(v14 - 72));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::AddMetaAndParameters(siri::dialogengine *this, siri::dialogengine::CatBinary::cat *a2, siri::dialogengine::File *a3)
{
  int v3 = (int)a3;
  unsigned int v78 = a2;
  siri::dialogengine::File::GetMetadata(a2, (uint64_t)&v86);
  char v6 = v86;
  if (v86 != v87)
  {
    while (1)
    {
      char v7 = v6[7];
      if (v7 != v6 + 8) {
        break;
      }
LABEL_79:
      unint64_t v42 = v6[1];
      if (v42)
      {
        do
        {
          char v43 = (void **)v42;
          unint64_t v42 = (void *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          char v43 = (void **)v6[2];
          BOOL v41 = *v43 == v6;
          char v6 = v43;
        }
        while (!v41);
      }
      char v6 = v43;
      if (v43 == v87) {
        goto LABEL_85;
      }
    }
    BOOL v8 = (const void **)(v6 + 4);
    while (1)
    {
      if (!v3)
      {
LABEL_56:
        uint64_t v28 = (int *)*((void *)this + 5);
        if (v28)
        {
          uint64_t v29 = *((int *)this + 8);
          int v30 = *v28;
          if ((int)v29 < *v28)
          {
            *((_DWORD *)this + 8) = v29 + 1;
            std::string v31 = *(siri::dialogengine::CatBinary::metadata **)&v28[2 * v29 + 2];
            if (!v31) {
              goto LABEL_182;
            }
LABEL_64:
            uint64_t v34 = (std::string *)*((void *)v31 + 3);
            *((_DWORD *)v31 + 4) |= 1u;
            if (v34 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v31 + 24, (uint64_t)(v6 + 4));
            }
            std::string::operator=(v34, (const std::string *)(v6 + 4));
            char v35 = (const std::string *)(v7 + 4);
            uint64_t v38 = (uint64_t *)*((void *)v31 + 4);
            uint64_t v37 = (uint64_t)v31 + 32;
            int64x2_t v36 = (std::string *)v38;
            *(_DWORD *)(v37 - 16) |= 2u;
            if (v38 == &google::protobuf::internal::fixed_address_empty_string) {
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v37, (uint64_t)v35);
            }
            std::string::operator=(v36, v35);
            goto LABEL_70;
          }
          if (v30 == *((_DWORD *)this + 9))
          {
LABEL_62:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 6, v30 + 1);
            uint64_t v28 = (int *)*((void *)this + 5);
            int v30 = *v28;
          }
          *uint64_t v28 = v30 + 1;
          std::string v31 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::metadata>(*((google::protobuf::internal::ArenaImpl **)this + 3));
          uint64_t v32 = *((void *)this + 5);
          uint64_t v33 = *((int *)this + 8);
          *((_DWORD *)this + 8) = v33 + 1;
          *(void *)(v32 + 8 * v33 + 8) = v31;
          if (!v31)
          {
LABEL_182:
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create metadata buffer.", (const char *)v5);
            std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v87[0]);
            return 0;
          }
          goto LABEL_64;
        }
        int v30 = *((_DWORD *)this + 9);
        goto LABEL_62;
      }
      std::string::basic_string[abi:ne180100]<0>(v83, "description");
      siri::dialogengine::StringToLower((uint64_t)v83, (uint64_t)&v85);
      uint64_t v9 = *((unsigned __int8 *)v6 + 55);
      if ((v9 & 0x80u) == 0) {
        BOOL v10 = (void *)*((unsigned __int8 *)v6 + 55);
      }
      else {
        BOOL v10 = v6[5];
      }
      std::string::size_type size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      char v12 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v85.__r_.__value_.__l.__size_;
      }
      if (v10 == (void *)size)
      {
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v5 = &v85;
        }
        else {
          std::string v5 = (std::string *)v85.__r_.__value_.__r.__words[0];
        }
        if ((v9 & 0x80) != 0)
        {
          if (!memcmp(*v8, v5, (size_t)v6[5]))
          {
LABEL_41:
            BOOL v26 = 1;
            if ((v12 & 0x80) == 0) {
              goto LABEL_50;
            }
LABEL_49:
            operator delete(v85.__r_.__value_.__l.__data_);
            goto LABEL_50;
          }
        }
        else
        {
          if (!*((unsigned char *)v6 + 55)) {
            goto LABEL_41;
          }
          long long v13 = (unsigned __int8 *)(v6 + 4);
          while (*v13 == v5->__r_.__value_.__s.__data_[0])
          {
            ++v13;
            std::string v5 = (std::string *)((char *)v5 + 1);
            if (!--v9) {
              goto LABEL_41;
            }
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v79, "excludeIfSet");
      siri::dialogengine::StringToLower((uint64_t)v79, (uint64_t)__p);
      uint64_t v14 = *((unsigned __int8 *)v6 + 55);
      if ((v14 & 0x80u) == 0) {
        char v15 = (void *)*((unsigned __int8 *)v6 + 55);
      }
      else {
        char v15 = v6[5];
      }
      unint64_t v16 = v82;
      int v17 = (char)v82;
      if ((v82 & 0x80u) != 0) {
        unint64_t v16 = (unint64_t)__p[1];
      }
      if (v15 != (void *)v16) {
        break;
      }
      if ((v82 & 0x80u) == 0) {
        std::string v5 = (std::string *)__p;
      }
      else {
        std::string v5 = (std::string *)__p[0];
      }
      if ((v14 & 0x80) != 0)
      {
        BOOL v26 = memcmp(*v8, v5, (size_t)v6[5]) == 0;
LABEL_44:
        if ((v17 & 0x80000000) == 0) {
          goto LABEL_46;
        }
LABEL_45:
        operator delete(__p[0]);
        goto LABEL_46;
      }
      if (*((unsigned char *)v6 + 55))
      {
        uint64_t v18 = v14 - 1;
        uint64_t v19 = (unsigned __int8 *)(v6 + 4);
        do
        {
          int v21 = *v19++;
          int v20 = v21;
          int v23 = v5->__r_.__value_.__s.__data_[0];
          std::string v5 = (std::string *)((char *)v5 + 1);
          int v22 = v23;
          BOOL v25 = v18-- != 0;
          BOOL v26 = v20 == v22;
        }
        while (v20 == v22 && v25);
        goto LABEL_44;
      }
      BOOL v26 = 1;
      if ((char)v82 < 0) {
        goto LABEL_45;
      }
LABEL_46:
      if (v80 < 0) {
        operator delete(v79[0]);
      }
      if ((*((unsigned char *)&v85.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_49;
      }
LABEL_50:
      if (v84 < 0)
      {
        operator delete(v83[0]);
        if (!v26) {
          goto LABEL_56;
        }
      }
      else if (!v26)
      {
        goto LABEL_56;
      }
      uint64_t v27 = v6 + 4;
      if (*((char *)v6 + 55) < 0) {
        uint64_t v27 = *v8;
      }
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Omitting meta element(s) with name '%s'", (const char *)v5, v27, v78);
LABEL_70:
      uint64_t v39 = (void *)v7[1];
      if (v39)
      {
        do
        {
          unint64_t v40 = v39;
          uint64_t v39 = (void *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          unint64_t v40 = (void *)v7[2];
          BOOL v41 = *v40 == (void)v7;
          char v7 = v40;
        }
        while (!v41);
      }
      char v7 = v40;
      if (v40 == v6 + 8) {
        goto LABEL_79;
      }
    }
    BOOL v26 = 0;
    if (((char)v82 & 0x80000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
LABEL_85:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v87[0]);
  unsigned int v86 = 0;
  v87[0] = 0;
  v87[1] = 0;
  std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(&v86, *((void *)v78 + 22), *((void *)v78 + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)v78 + 23) - *((void *)v78 + 22)) >> 4));
  uint64_t v45 = (char *)v87[0];
  uint64_t v46 = 1;
  if (v86 == v87[0]) {
    goto LABEL_184;
  }
  uint64_t v47 = (char *)v86 + 207;
  while (1)
  {
    size_t v48 = (int *)*((void *)this + 8);
    if (!v48)
    {
      int v50 = *((_DWORD *)this + 15);
      goto LABEL_93;
    }
    uint64_t v49 = *((int *)this + 14);
    int v50 = *v48;
    if ((int)v49 >= *v48) {
      break;
    }
    *((_DWORD *)this + 14) = v49 + 1;
    std::string v51 = *(siri::dialogengine::CatBinary::parameter **)&v48[2 * v49 + 2];
    if (!v51) {
      goto LABEL_183;
    }
LABEL_95:
    if (*(v47 - 176) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 199), *(void *)(v47 - 191));
    }
    else
    {
      long long v54 = *(_OWORD *)(v47 - 199);
      v85.__r_.__value_.__r.__words[2] = *(void *)(v47 - 183);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v54;
    }
    *((_DWORD *)v51 + 4) |= 1u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v51 + 3, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    if (*(v47 - 152) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 175), *(void *)(v47 - 167));
    }
    else
    {
      long long v55 = *(_OWORD *)(v47 - 175);
      v85.__r_.__value_.__r.__words[2] = *(void *)(v47 - 159);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v55;
    }
    *((_DWORD *)v51 + 4) |= 2u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v51 + 4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    std::string v56 = v47 - 151;
    if (*(v47 - 128) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 151), *(void *)(v47 - 143));
    }
    else
    {
      long long v57 = *(_OWORD *)v56;
      v85.__r_.__value_.__r.__words[2] = *(void *)(v47 - 135);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v57;
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v58 = v85.__r_.__value_.__l.__size_;
      operator delete(v85.__r_.__value_.__l.__data_);
      if (!v58) {
        goto LABEL_117;
      }
    }
    else if (!*((unsigned char *)&v85.__r_.__value_.__s + 23))
    {
      goto LABEL_117;
    }
    if (*(v47 - 128) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 151), *(void *)(v47 - 143));
    }
    else
    {
      long long v59 = *(_OWORD *)v56;
      v85.__r_.__value_.__r.__words[2] = *(void *)(v47 - 135);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v59;
    }
    *((_DWORD *)v51 + 4) |= 4u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v51 + 5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
LABEL_117:
    unsigned int v60 = v47 - 47;
    if (*(v47 - 24) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 47), *(void *)(v47 - 39));
    }
    else
    {
      long long v61 = *(_OWORD *)v60;
      v85.__r_.__value_.__r.__words[2] = *(void *)(v47 - 31);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v61;
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v62 = v85.__r_.__value_.__l.__size_;
      operator delete(v85.__r_.__value_.__l.__data_);
      if (!v62) {
        goto LABEL_128;
      }
    }
    else if (!*((unsigned char *)&v85.__r_.__value_.__s + 23))
    {
      goto LABEL_128;
    }
    if (*(v47 - 24) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 47), *(void *)(v47 - 39));
    }
    else
    {
      long long v63 = *(_OWORD *)v60;
      v85.__r_.__value_.__r.__words[2] = *(void *)(v47 - 31);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v63;
    }
    *((_DWORD *)v51 + 4) |= 8u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v51 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v85);
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_128:
      if (v3) {
        goto LABEL_161;
      }
      goto LABEL_129;
    }
    operator delete(v85.__r_.__value_.__l.__data_);
    if (v3) {
      goto LABEL_161;
    }
LABEL_129:
    uint64_t v64 = v47 - 127;
    if (*(v47 - 104) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 127), *(void *)(v47 - 119));
    }
    else
    {
      long long v65 = *(_OWORD *)v64;
      v85.__r_.__value_.__r.__words[2] = *(void *)(v47 - 111);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v65;
    }
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v66 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v66 = v85.__r_.__value_.__l.__size_;
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v85.__r_.__value_.__l.__data_);
      if (!v66) {
        goto LABEL_146;
      }
    }
    else if (!v66)
    {
      goto LABEL_146;
    }
    if (*(v47 - 104) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 127), *(void *)(v47 - 119));
    }
    else
    {
      long long v67 = *(_OWORD *)v64;
      v85.__r_.__value_.__r.__words[2] = *(void *)(v47 - 111);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v67;
    }
    *((_DWORD *)v51 + 4) |= 0x10u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v51 + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
LABEL_146:
    unint64_t v68 = v47 - 79;
    if (*(v47 - 56) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 79), *(void *)(v47 - 71));
    }
    else
    {
      long long v69 = *(_OWORD *)v68;
      v85.__r_.__value_.__r.__words[2] = *(void *)(v47 - 63);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v69;
    }
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v70 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v70 = v85.__r_.__value_.__l.__size_;
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v85.__r_.__value_.__l.__data_);
      if (!v70) {
        goto LABEL_161;
      }
    }
    else if (!v70)
    {
      goto LABEL_161;
    }
    if (*(v47 - 56) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 79), *(void *)(v47 - 71));
    }
    else
    {
      long long v71 = *(_OWORD *)v68;
      v85.__r_.__value_.__r.__words[2] = *(void *)(v47 - 63);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v71;
    }
    *((_DWORD *)v51 + 4) |= 0x20u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v51 + 8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
LABEL_161:
    unsigned int v72 = v47 - 23;
    if (*v47 < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 23), *(void *)(v47 - 15));
    }
    else
    {
      long long v73 = *(_OWORD *)v72;
      v85.__r_.__value_.__r.__words[2] = *(void *)(v47 - 7);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v73;
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v74 = v85.__r_.__value_.__l.__size_;
      operator delete(v85.__r_.__value_.__l.__data_);
      if (!v74) {
        goto LABEL_172;
      }
    }
    else if (!*((unsigned char *)&v85.__r_.__value_.__s + 23))
    {
      goto LABEL_172;
    }
    if (*v47 < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 23), *(void *)(v47 - 15));
    }
    else
    {
      long long v75 = *(_OWORD *)v72;
      v85.__r_.__value_.__r.__words[2] = *(void *)(v47 - 7);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v75;
    }
    *((_DWORD *)v51 + 4) |= 0x40u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v51 + 9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v85);
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_172:
      if ((v3 & 1) == 0) {
        goto LABEL_173;
      }
      goto LABEL_176;
    }
    operator delete(v85.__r_.__value_.__l.__data_);
    if ((v3 & 1) == 0)
    {
LABEL_173:
      if (!*(v47 - 54))
      {
        *((_DWORD *)v51 + 4) |= 0x100u;
        *((unsigned char *)v51 + 81) = 0;
      }
    }
LABEL_176:
    if (*(v47 - 55))
    {
      *((_DWORD *)v51 + 4) |= 0x80u;
      *((unsigned char *)v51 + 80) = 1;
    }
    if (!*(v47 - 53))
    {
      *((_DWORD *)v51 + 4) |= 0x200u;
      *((unsigned char *)v51 + 82) = 0;
    }
    char v76 = v47 + 129;
    v47 += 336;
    if (v76 == v45)
    {
      uint64_t v46 = 1;
      goto LABEL_184;
    }
  }
  if (v50 != *((_DWORD *)this + 15)) {
    goto LABEL_94;
  }
LABEL_93:
  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 12, v50 + 1);
  size_t v48 = (int *)*((void *)this + 8);
  int v50 = *v48;
LABEL_94:
  *size_t v48 = v50 + 1;
  std::string v51 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::parameter>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                              + 6));
  uint64_t v52 = *((void *)this + 8);
  uint64_t v53 = *((int *)this + 14);
  *((_DWORD *)this + 14) = v53 + 1;
  *(void *)(v52 + 8 * v53 + 8) = v51;
  if (v51) {
    goto LABEL_95;
  }
LABEL_183:
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create parameter buffer.", v44);
  uint64_t v46 = 0;
LABEL_184:
  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
  return v46;
}

void sub_1C5E500B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::string __p = (void *)(v32 - 104);
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::SaveProtobuf(siri::dialogengine *this, const siri::dialogengine::CatBinary::cat *a2, const char *a3)
{
  memset(&v8, 0, sizeof(v8));
  if (google::protobuf::MessageLite::SerializeToString((const char *)this, &v8))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)a2);
    BOOL v5 = siri::dialogengine::WriteGzippedFile(&__p, (const void **)&v8.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error while serializing cat data.", v4);
    BOOL v5 = 0;
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1C5E5022C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::WriteCatBinary(uint64_t a1, uint64_t a2, siri::dialogengine::CatBinary::condition_entry *a3)
{
  if (!a1)
  {
    char v7 = "File cannot be null, not writing.";
LABEL_11:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v7, (const char *)a2);
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (!v4)
  {
    char v7 = "Path cannot be empty, not writing.";
    goto LABEL_11;
  }
  long long v69 = google::protobuf::SetLogHandler((uint64_t (*)())siri::dialogengine::ScopedLogHandler::logHandler);
  siri::dialogengine::CatBinary::cat::cat((siri::dialogengine::CatBinary::cat *)v71);
  v72 |= 1u;
  std::string::basic_string[abi:ne180100]<0>(&v94, "CATPB");
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v89, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v94);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 175) < 0) {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)(a1 + 152), *(void *)(a1 + 160));
  }
  else {
    std::string v94 = *(std::string *)(a1 + 152);
  }
  v72 |= 2u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v90, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v94);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = (_OWORD *)(a1 + 104);
  if (*(char *)(a1 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)(a1 + 104), *(void *)(a1 + 112));
  }
  else
  {
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v9;
    v94.__r_.__value_.__r.__words[2] = *(void *)(a1 + 120);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v94.__r_.__value_.__l.__size_;
    operator delete(v94.__r_.__value_.__l.__data_);
    if (!size) {
      goto LABEL_27;
    }
  }
  else if (!*((unsigned char *)&v94.__r_.__value_.__s + 23))
  {
    goto LABEL_27;
  }
  if (*(char *)(a1 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)(a1 + 104), *(void *)(a1 + 112));
  }
  else
  {
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v9;
    v94.__r_.__value_.__r.__words[2] = *(void *)(a1 + 120);
  }
  v72 |= 4u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v91, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v94);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
LABEL_27:
  uint64_t v11 = (_OWORD *)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)(a1 + 128), *(void *)(a1 + 136));
  }
  else
  {
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v11;
    v94.__r_.__value_.__r.__words[2] = *(void *)(a1 + 144);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v12 = v94.__r_.__value_.__l.__size_;
    operator delete(v94.__r_.__value_.__l.__data_);
    if (!v12) {
      goto LABEL_39;
    }
  }
  else if (!*((unsigned char *)&v94.__r_.__value_.__s + 23))
  {
    goto LABEL_39;
  }
  if (*(char *)(a1 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)(a1 + 128), *(void *)(a1 + 136));
  }
  else
  {
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v11;
    v94.__r_.__value_.__r.__words[2] = *(void *)(a1 + 144);
  }
  v72 |= 8u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v92, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v94);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
LABEL_39:
  siri::dialogengine::File::GetConditions(a1, &v94);
  std::string::size_type v15 = v94.__r_.__value_.__l.__size_;
  std::string::size_type v14 = v94.__r_.__value_.__r.__words[0];
  if (v94.__r_.__value_.__r.__words[0] != v94.__r_.__value_.__l.__size_)
  {
    unint64_t v68 = &v73;
    while (1)
    {
      unint64_t v16 = v76;
      if (!v76) {
        break;
      }
      uint64_t v17 = v74;
      int v18 = *v76;
      if (v74 < *v76)
      {
        ++v74;
        uint64_t v19 = *(siri::dialogengine::CatBinary::condition **)&v76[2 * v17 + 2];
        goto LABEL_48;
      }
      if (v18 == v75) {
        goto LABEL_46;
      }
LABEL_47:
      _DWORD *v16 = v18 + 1;
      uint64_t v19 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition>(v73);
      uint64_t v20 = v74++;
      *(void *)&v76[2 * v20 + 2] = v19;
LABEL_48:
      if (!v19)
      {
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create condition buffer.", v13);
        goto LABEL_123;
      }
      int v21 = *(std::string **)v14;
      if (*(char *)(*(void *)v14 + 119) < 0) {
        std::string::__init_copy_ctor_external(&v70, v21[4].__r_.__value_.__l.__data_, v21[4].__r_.__value_.__l.__size_);
      }
      else {
        std::string v70 = v21[4];
      }
      *((_DWORD *)v19 + 4) |= 1u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v19 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v70);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v70.__r_.__value_.__l.__data_);
        if (a3) {
          goto LABEL_71;
        }
      }
      else if (a3)
      {
        goto LABEL_71;
      }
      int v22 = *(std::string **)v14;
      if (*(char *)(*(void *)v14 + 143) < 0) {
        std::string::__init_copy_ctor_external(&v70, v22[5].__r_.__value_.__l.__data_, v22[5].__r_.__value_.__l.__size_);
      }
      else {
        std::string v70 = v22[5];
      }
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v23 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v23 = v70.__r_.__value_.__l.__size_;
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v70.__r_.__value_.__l.__data_);
        if (v23)
        {
LABEL_66:
          char v24 = *(std::string **)v14;
          if (*(char *)(*(void *)v14 + 143) < 0) {
            std::string::__init_copy_ctor_external(&v70, v24[5].__r_.__value_.__l.__data_, v24[5].__r_.__value_.__l.__size_);
          }
          else {
            std::string v70 = v24[5];
          }
          *((_DWORD *)v19 + 4) |= 2u;
          google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v19 + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v70);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
        }
      }
      else if (v23)
      {
        goto LABEL_66;
      }
LABEL_71:
      BOOL v25 = *(std::string **)v14;
      memset(&v70, 0, sizeof(v70));
      std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(&v70, (void *)v25[6].__r_.__value_.__l.__data_, (void *)v25[6].__r_.__value_.__l.__size_, (uint64_t)(v25[6].__r_.__value_.__l.__size_ - v25[6].__r_.__value_.__r.__words[0]) >> 4);
      std::string::size_type v27 = v70.__r_.__value_.__l.__size_;
      BOOL v26 = (siri::dialogengine **)v70.__r_.__value_.__r.__words[0];
      if (v70.__r_.__value_.__r.__words[0] != v70.__r_.__value_.__l.__size_)
      {
        while (1)
        {
          uint64_t v28 = (int *)*((void *)v19 + 5);
          if (!v28) {
            break;
          }
          uint64_t v29 = *((int *)v19 + 8);
          int v30 = *v28;
          if ((int)v29 < *v28)
          {
            *((_DWORD *)v19 + 8) = v29 + 1;
            std::string v31 = *(siri::dialogengine::CatBinary::condition_entry **)&v28[2 * v29 + 2];
            if (!v31) {
              goto LABEL_121;
            }
            goto LABEL_80;
          }
          if (v30 == *((_DWORD *)v19 + 9)) {
            goto LABEL_78;
          }
LABEL_79:
          *uint64_t v28 = v30 + 1;
          std::string v31 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition_entry>(*((google::protobuf::internal::ArenaImpl **)v19 + 3));
          uint64_t v32 = *((void *)v19 + 5);
          uint64_t v33 = *((int *)v19 + 8);
          *((_DWORD *)v19 + 8) = v33 + 1;
          *(void *)(v32 + 8 * v33 + 8) = v31;
          if (!v31)
          {
LABEL_121:
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create condition entry buffer.", (const char *)v31, &v73, v69);
LABEL_122:
            v95[0] = (void **)&v70;
            std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](v95);
LABEL_123:
            v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
            std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
            goto LABEL_146;
          }
LABEL_80:
          if ((siri::dialogengine::FillConditionEntryMsg(*v26, v31, a3) & 1) == 0) {
            goto LABEL_122;
          }
          v26 += 2;
          if (v26 == (siri::dialogengine **)v27) {
            goto LABEL_82;
          }
        }
        int v30 = *((_DWORD *)v19 + 9);
LABEL_78:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v19 + 6, v30 + 1);
        uint64_t v28 = (int *)*((void *)v19 + 5);
        int v30 = *v28;
        goto LABEL_79;
      }
LABEL_82:
      v95[0] = (void **)&v70;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](v95);
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_83;
      }
    }
    int v18 = v75;
LABEL_46:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v73, v18 + 1);
    unint64_t v16 = v76;
    int v18 = *v76;
    goto LABEL_47;
  }
LABEL_83:
  v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  siri::dialogengine::GroupPhrases::GetPhrases((siri::dialogengine::GroupPhrases *)(a1 + 312), &v94);
  std::string::size_type v35 = v94.__r_.__value_.__l.__size_;
  uint64_t v34 = (siri::dialogengine **)v94.__r_.__value_.__r.__words[0];
  if (v94.__r_.__value_.__r.__words[0] != v94.__r_.__value_.__l.__size_)
  {
    while (1)
    {
      int64x2_t v36 = v80;
      if (!v80) {
        break;
      }
      uint64_t v37 = v78;
      int v38 = *v80;
      if (v78 < *v80)
      {
        ++v78;
        uint64_t v39 = *(siri::dialogengine::CatBinary::node **)&v80[2 * v37 + 2];
        goto LABEL_91;
      }
      if (v38 == v79) {
        goto LABEL_89;
      }
LABEL_90:
      _DWORD *v36 = v38 + 1;
      uint64_t v39 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(v77);
      uint64_t v40 = v78++;
      *(void *)&v80[2 * v40 + 2] = v39;
LABEL_91:
      if (!v39)
      {
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create phrase buffer.", 0);
        goto LABEL_123;
      }
      if (!siri::dialogengine::FillNodeMsg(*v34, v39, a3)) {
        goto LABEL_123;
      }
      v34 += 2;
      if (v34 == (siri::dialogengine **)v35) {
        goto LABEL_94;
      }
    }
    int v38 = v79;
LABEL_89:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v77, v38 + 1);
    int64x2_t v36 = v80;
    int v38 = *v80;
    goto LABEL_90;
  }
LABEL_94:
  v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  char v43 = *(siri::dialogengine **)(a1 + 224);
  unint64_t v42 = *(std::__shared_weak_count **)(a1 + 232);
  if (v42)
  {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v43)
  {
    v72 |= 0x20u;
    uint64_t v44 = v93;
    if (!v93)
    {
      uint64_t v44 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(0);
      std::string v93 = v44;
      if (!v44)
      {
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create root group buffer.", 0);
        goto LABEL_146;
      }
    }
    if (!siri::dialogengine::FillNodeMsg(v43, v44, a3)) {
      goto LABEL_146;
    }
  }
  uint64_t v45 = *(void *)(a1 + 296);
  if (!v45)
  {
LABEL_115:
    long long v57 = *(siri::dialogengine **)(a1 + 240);
    std::string v56 = *(std::__shared_weak_count **)(a1 + 248);
    if (v56)
    {
      atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    }
    if (!v57) {
      goto LABEL_135;
    }
    std::string::size_type v58 = v88;
    if (v88)
    {
      uint64_t v59 = v86;
      int v60 = *v88;
      if (v86 < *v88)
      {
        ++v86;
        long long v61 = *(siri::dialogengine::CatBinary::node **)&v88[2 * v59 + 2];
LABEL_133:
        if (!v61)
        {
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create visual reference node", 0);
          goto LABEL_146;
        }
        if (!siri::dialogengine::FillNodeMsg(v57, v61, a3)) {
          goto LABEL_146;
        }
LABEL_135:
        uint64_t v63 = *(void *)(a1 + 256);
        uint64_t v64 = *(std::__shared_weak_count **)(a1 + 264);
        if (v64) {
          atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v63) {
          goto LABEL_153;
        }
        if ((siri::dialogengine::AddMetaAndParameters((siri::dialogengine *)v71, (siri::dialogengine::CatBinary::cat *)a1, a3) & 1) == 0)
        {
          BOOL v8 = 0;
LABEL_157:
          if (v64) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v64);
          }
          goto LABEL_147;
        }
        google::protobuf::MessageLite::SerializeAsString((google::protobuf::MessageLite *)(v63 + 208), (uint64_t)&v94);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        {
          size_t v41 = v94.__r_.__value_.__l.__size_;
          if (!v94.__r_.__value_.__l.__size_)
          {
LABEL_152:
            operator delete(v94.__r_.__value_.__l.__data_);
            goto LABEL_153;
          }
          long long v65 = (std::string *)v94.__r_.__value_.__r.__words[0];
        }
        else
        {
          size_t v41 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
          if (!*((unsigned char *)&v94.__r_.__value_.__s + 23)) {
            goto LABEL_153;
          }
          long long v65 = &v94;
        }
        siri::dialogengine::CatBinary::cat::set_visual_response((siri::dialogengine::CatBinary::cat *)v71, v65, v41);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_152;
        }
LABEL_153:
        if (*(char *)(a2 + 23) >= 0) {
          long long v67 = (const siri::dialogengine::CatBinary::cat *)a2;
        }
        else {
          long long v67 = *(const siri::dialogengine::CatBinary::cat **)a2;
        }
        BOOL v8 = siri::dialogengine::SaveProtobuf((siri::dialogengine *)v71, v67, (const char *)v41);
        goto LABEL_157;
      }
      if (v60 != v87)
      {
LABEL_132:
        *std::string::size_type v58 = v60 + 1;
        long long v61 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(v85);
        uint64_t v62 = v86++;
        *(void *)&v88[2 * v62 + 2] = v61;
        goto LABEL_133;
      }
    }
    else
    {
      int v60 = v87;
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v85, v60 + 1);
    std::string::size_type v58 = v88;
    int v60 = *v88;
    goto LABEL_132;
  }
  memset(&v94, 0, sizeof(v94));
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(&v94, *(void **)(v45 + 208), *(void **)(v45 + 216), (uint64_t)(*(void *)(v45 + 216) - *(void *)(v45 + 208)) >> 4);
  std::string::size_type v48 = v94.__r_.__value_.__l.__size_;
  uint64_t v47 = (const void **)v94.__r_.__value_.__r.__words[0];
  if (v94.__r_.__value_.__r.__words[0] == v94.__r_.__value_.__l.__size_)
  {
LABEL_114:
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    goto LABEL_115;
  }
  while (1)
  {
    if (!*v47
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unexpected type for fallback dialog.", v46, v68, v69);
      goto LABEL_145;
    }
    int v50 = v49;
    std::string v51 = v84;
    if (!v84)
    {
      int v53 = v83;
LABEL_109:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v81, v53 + 1);
      std::string v51 = v84;
      int v53 = *v84;
      goto LABEL_110;
    }
    uint64_t v52 = v82;
    int v53 = *v84;
    if (v82 < *v84)
    {
      ++v82;
      long long v54 = *(siri::dialogengine::CatBinary::node **)&v84[2 * v52 + 2];
      goto LABEL_111;
    }
    if (v53 == v83) {
      goto LABEL_109;
    }
LABEL_110:
    _DWORD *v51 = v53 + 1;
    long long v54 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(v81);
    uint64_t v55 = v82++;
    *(void *)&v84[2 * v55 + 2] = v54;
LABEL_111:
    if (!v54) {
      break;
    }
    if (!siri::dialogengine::FillNodeMsg(v50, v54, a3)) {
      goto LABEL_145;
    }
    v47 += 2;
    if (v47 == (const void **)v48) {
      goto LABEL_114;
    }
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create fallback dialog buffer.", 0);
LABEL_145:
  v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
LABEL_146:
  BOOL v8 = 0;
LABEL_147:
  siri::dialogengine::CatBinary::cat::~cat((siri::dialogengine::CatBinary::cat *)v71);
  google::protobuf::SetLogHandler(v69);
  return v8;
}

void sub_1C5E50C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t (*a10)(), void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (*(char *)(v18 - 105) < 0) {
    operator delete(*(void **)(v18 - 128));
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  siri::dialogengine::CatBinary::cat::~cat((siri::dialogengine::CatBinary::cat *)&a17);
  google::protobuf::SetLogHandler(a10);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::FillConditionEntryMsg(siri::dialogengine *this, const siri::dialogengine::ConditionEntry *a2, siri::dialogengine::CatBinary::condition_entry *a3)
{
  switch(*((_DWORD *)this + 8))
  {
    case 0:
      *((_DWORD *)a2 + 4) |= 0x10u;
      *((_DWORD *)a2 + 20) = 0;
      goto LABEL_41;
    case 1:
      *((_DWORD *)a2 + 4) |= 0x10u;
      int v7 = 1;
      goto LABEL_6;
    case 2:
      *((_DWORD *)a2 + 4) |= 0x10u;
      int v7 = 2;
LABEL_6:
      *((_DWORD *)a2 + 20) = v7;
      goto LABEL_41;
    case 3:
      int v8 = *((_DWORD *)a2 + 4) | 0x10;
      *((_DWORD *)a2 + 4) = v8;
      *((_DWORD *)a2 + 20) = 3;
      if (*((char *)this + 175) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 19), *((void *)this + 20));
        int v8 = *((_DWORD *)a2 + 4);
      }
      else
      {
        std::string v28 = *(std::string *)((char *)this + 152);
      }
      *((_DWORD *)a2 + 4) = v8 | 1;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v28);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      BOOL v10 = (_OWORD *)((char *)this + 176);
      if (*((char *)this + 199) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 22), *((void *)this + 23));
      }
      else
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v10;
        v28.__r_.__value_.__r.__words[2] = *((void *)this + 24);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = v28.__r_.__value_.__l.__size_;
        operator delete(v28.__r_.__value_.__l.__data_);
        if (!size) {
          goto LABEL_28;
        }
      }
      else if (!*((unsigned char *)&v28.__r_.__value_.__s + 23))
      {
        goto LABEL_28;
      }
      if (*((char *)this + 199) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 22), *((void *)this + 23));
      }
      else
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v10;
        v28.__r_.__value_.__r.__words[2] = *((void *)this + 24);
      }
      *((_DWORD *)a2 + 4) |= 2u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v28);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
LABEL_28:
      std::string::size_type v12 = (_OWORD *)((char *)this + 200);
      if (*((char *)this + 223) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 25), *((void *)this + 26));
      }
      else
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v12;
        v28.__r_.__value_.__r.__words[2] = *((void *)this + 27);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v13 = v28.__r_.__value_.__l.__size_;
        operator delete(v28.__r_.__value_.__l.__data_);
        if (!v13) {
          goto LABEL_41;
        }
      }
      else if (!*((unsigned char *)&v28.__r_.__value_.__s + 23))
      {
        goto LABEL_41;
      }
      if (*((char *)this + 223) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 25), *((void *)this + 26));
      }
      else
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v12;
        v28.__r_.__value_.__r.__words[2] = *((void *)this + 27);
      }
      *((_DWORD *)a2 + 4) |= 4u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v28);
LABEL_39:
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
LABEL_41:
      memset(&v28, 0, sizeof(v28));
      std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(&v28, *((void **)this + 8), *((void **)this + 9), (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 4);
      std::string::size_type v15 = v28.__r_.__value_.__l.__size_;
      if (v28.__r_.__value_.__r.__words[0] != v28.__r_.__value_.__l.__size_)
      {
        std::string::size_type v16 = v28.__r_.__value_.__r.__words[0] + 16;
        while (1)
        {
          uint64_t v17 = (int *)*((void *)a2 + 5);
          if (!v17) {
            break;
          }
          uint64_t v18 = *((int *)a2 + 8);
          int v19 = *v17;
          if ((int)v18 >= *v17)
          {
            if (v19 == *((_DWORD *)a2 + 9))
            {
LABEL_48:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 6, v19 + 1);
              uint64_t v17 = (int *)*((void *)a2 + 5);
              int v19 = *v17;
            }
            *uint64_t v17 = v19 + 1;
            uint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition_entry>(*((google::protobuf::internal::ArenaImpl **)a2 + 3));
            uint64_t v21 = *((void *)a2 + 5);
            uint64_t v22 = *((int *)a2 + 8);
            *((_DWORD *)a2 + 8) = v22 + 1;
            *(void *)(v21 + 8 * v22 + 8) = v20;
            goto LABEL_50;
          }
          *((_DWORD *)a2 + 8) = v18 + 1;
          uint64_t v20 = *(siri::dialogengine::CatBinary::condition_entry **)&v17[2 * v18 + 2];
LABEL_50:
          int v23 = siri::dialogengine::FillConditionEntryMsg(*(siri::dialogengine **)(v16 - 16), v20, a3, v14);
          if (v16 == v15) {
            char v24 = 0;
          }
          else {
            char v24 = v23;
          }
          v16 += 16;
          if ((v24 & 1) == 0)
          {
            int v25 = v23 ^ 1;
            goto LABEL_56;
          }
        }
        int v19 = *((_DWORD *)a2 + 9);
        goto LABEL_48;
      }
      int v25 = 0;
LABEL_56:
      uint64_t v29 = &v28;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      uint64_t result = v25 ^ 1u;
      if (v25 & 1) != 0 || (a3) {
        return result;
      }
      BOOL v26 = (_OWORD *)((char *)this + 40);
      if (*((char *)this + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 5), *((void *)this + 6));
      }
      else
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v26;
        v28.__r_.__value_.__r.__words[2] = *((void *)this + 7);
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v27 = v28.__r_.__value_.__l.__size_;
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v28.__r_.__value_.__l.__data_);
        if (!v27) {
          return 1;
        }
      }
      else if (!v27)
      {
        return 1;
      }
      if (*((char *)this + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 5), *((void *)this + 6));
      }
      else
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v26;
        v28.__r_.__value_.__r.__words[2] = *((void *)this + 7);
      }
      *((_DWORD *)a2 + 4) |= 8u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v28);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      return 1;
    case 4:
      int v9 = *((_DWORD *)a2 + 4) | 0x10;
      *((_DWORD *)a2 + 4) = v9;
      *((_DWORD *)a2 + 20) = 4;
      if (*((char *)this + 175) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 19), *((void *)this + 20));
        int v9 = *((_DWORD *)a2 + 4);
      }
      else
      {
        std::string v28 = *(std::string *)((char *)this + 152);
      }
      *((_DWORD *)a2 + 4) = v9 | 1;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v28);
      goto LABEL_39;
    default:
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unrecognized condition entry type: %d", (const char *)a2, *((unsigned int *)this + 8));
      return 0;
  }
}

void sub_1C5E51218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::FillNodeMsg(siri::dialogengine *this, const siri::dialogengine::Node *a2, siri::dialogengine::CatBinary::node *a3)
{
  char v6 = (std::string *)((char *)this + 96);
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 12), *((void *)this + 13));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = *((void *)this + 14);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!size) {
      goto LABEL_13;
    }
  }
  else if (!*((unsigned char *)&__str.__r_.__value_.__s + 23))
  {
    goto LABEL_13;
  }
  if (*((char *)this + 119) < 0) {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 12), *((void *)this + 13));
  }
  else {
    std::string __str = *v6;
  }
  *((_DWORD *)a2 + 4) |= 1u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_13:
  int v8 = (_OWORD *)((char *)this + 120);
  if (*((char *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 15), *((void *)this + 16));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v8;
    __str.__r_.__value_.__r.__words[2] = *((void *)this + 17);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v9 = __str.__r_.__value_.__l.__size_;
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v9) {
      goto LABEL_25;
    }
  }
  else if (!*((unsigned char *)&__str.__r_.__value_.__s + 23))
  {
    goto LABEL_25;
  }
  if (*((char *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 15), *((void *)this + 16));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v8;
    __str.__r_.__value_.__r.__words[2] = *((void *)this + 17);
  }
  *((_DWORD *)a2 + 4) |= 2u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 10, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_25:
  BOOL v10 = (_OWORD *)((char *)this + 144);
  if (*((char *)this + 167) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 18), *((void *)this + 19));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v10;
    __str.__r_.__value_.__r.__words[2] = *((void *)this + 20);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v11 = __str.__r_.__value_.__l.__size_;
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v11) {
      goto LABEL_37;
    }
  }
  else if (!*((unsigned char *)&__str.__r_.__value_.__s + 23))
  {
    goto LABEL_37;
  }
  if (*((char *)this + 167) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 18), *((void *)this + 19));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v10;
    __str.__r_.__value_.__r.__words[2] = *((void *)this + 20);
  }
  *((_DWORD *)a2 + 4) |= 0x100u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 17, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_37:
  float v12 = *((float *)this + 48);
  if (v12 != 1.0)
  {
    *((_DWORD *)a2 + 4) |= 0x8000u;
    *((float *)a2 + 44) = v12;
  }
  if ((a3 & 1) == 0)
  {
    std::string::size_type v13 = (_OWORD *)((char *)this + 168);
    if (*((char *)this + 191) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 21), *((void *)this + 22));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v13;
      __str.__r_.__value_.__r.__words[2] = *((void *)this + 23);
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v14 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v14 = __str.__r_.__value_.__l.__size_;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (!v14) {
        goto LABEL_55;
      }
    }
    else if (!v14)
    {
      goto LABEL_55;
    }
    if (*((char *)this + 191) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 21), *((void *)this + 22));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v13;
      __str.__r_.__value_.__r.__words[2] = *((void *)this + 23);
    }
    *((_DWORD *)a2 + 4) |= 4u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 11, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
LABEL_55:
  if (v15)
  {
    *((_DWORD *)a2 + 4) |= 0x1000u;
    *((_DWORD *)a2 + 42) = 4;
    std::string::size_type v16 = (const siri::dialogengine::SpeakableString *)(v15 + 208);
    siri::dialogengine::SpeakableString::SpeakableString(&__str, (const siri::dialogengine::SpeakableString *)(v15 + 208));
    std::string::size_type v17 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v17 = v78.__r_.__value_.__l.__size_;
    }
    if (v17)
    {
      BOOL v18 = 0;
    }
    else
    {
      std::string::size_type v24 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v24 = __str.__r_.__value_.__l.__size_;
      }
      BOOL v18 = v24 == 0;
    }
    if (v88 < 0) {
      operator delete(__p);
    }
    if (v86 < 0) {
      operator delete(v85);
    }
    if (v84 < 0) {
      operator delete(v83);
    }
    if (v82 < 0) {
      operator delete(v81);
    }
    if (v80 < 0) {
      operator delete(v79);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v18) {
        return 1;
      }
      goto LABEL_84;
    }
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v18)
    {
LABEL_84:
      siri::dialogengine::SpeakableString::SpeakableString(&__str, v16);
      siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&__str, &v76);
      *((_DWORD *)a2 + 4) |= 0x40u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 15, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v76);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (v88 < 0) {
        operator delete(__p);
      }
      if (v86 < 0) {
        operator delete(v85);
      }
      if (v84 < 0) {
        operator delete(v83);
      }
      if (v82 < 0) {
        operator delete(v81);
      }
      if (v80 < 0) {
        operator delete(v79);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      goto LABEL_232;
    }
    return 1;
  }
  if (v19)
  {
    uint64_t v20 = v19;
    *((_DWORD *)a2 + 4) |= 0x1000u;
    *((_DWORD *)a2 + 42) = 3;
    uint64_t v21 = (const siri::dialogengine::SpeakableString *)(v19 + 208);
    siri::dialogengine::SpeakableString::SpeakableString(&__str, (const siri::dialogengine::SpeakableString *)(v19 + 208));
    std::string::size_type v22 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v22 = v78.__r_.__value_.__l.__size_;
    }
    if (v22)
    {
      BOOL v23 = 0;
    }
    else
    {
      std::string::size_type v41 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v41 = __str.__r_.__value_.__l.__size_;
      }
      BOOL v23 = v41 == 0;
    }
    if (v88 < 0) {
      operator delete(__p);
    }
    if (v86 < 0) {
      operator delete(v85);
    }
    if (v84 < 0) {
      operator delete(v83);
    }
    if (v82 < 0) {
      operator delete(v81);
    }
    if (v80 < 0) {
      operator delete(v79);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v23) {
        goto LABEL_166;
      }
    }
    else if (v23)
    {
      goto LABEL_166;
    }
    siri::dialogengine::SpeakableString::SpeakableString(&__str, v21);
    siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&__str, &v76);
    *((_DWORD *)a2 + 4) |= 0x10u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 13, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v76);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    if (v88 < 0) {
      operator delete(__p);
    }
    if (v86 < 0) {
      operator delete(v85);
    }
    if (v84 < 0) {
      operator delete(v83);
    }
    if (v82 < 0) {
      operator delete(v81);
    }
    if (v80 < 0) {
      operator delete(v79);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_166:
    siri::dialogengine::SpeakableString::SpeakableString(&__str, (const siri::dialogengine::SpeakableString *)(v20 + 376));
    std::string::size_type v42 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v42 = v78.__r_.__value_.__l.__size_;
    }
    if (v42)
    {
      BOOL v43 = 0;
    }
    else
    {
      std::string::size_type v44 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v44 = __str.__r_.__value_.__l.__size_;
      }
      BOOL v43 = v44 == 0;
    }
    if (v88 < 0) {
      operator delete(__p);
    }
    if (v86 < 0) {
      operator delete(v85);
    }
    if (v84 < 0) {
      operator delete(v83);
    }
    if (v82 < 0) {
      operator delete(v81);
    }
    if (v80 < 0) {
      operator delete(v79);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v43) {
        goto LABEL_205;
      }
    }
    else if (v43)
    {
      goto LABEL_205;
    }
    siri::dialogengine::SpeakableString::SpeakableString(&__str, (const siri::dialogengine::SpeakableString *)(v20 + 376));
    siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&__str, &v76);
    *((_DWORD *)a2 + 4) |= 0x20u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 14, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v76);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    if (v88 < 0) {
      operator delete(__p);
    }
    if (v86 < 0) {
      operator delete(v85);
    }
    if (v84 < 0) {
      operator delete(v83);
    }
    if (v82 < 0) {
      operator delete(v81);
    }
    if (v80 < 0) {
      operator delete(v79);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_205:
    if (v20[547])
    {
      char v45 = v20[546];
      *((_DWORD *)a2 + 4) |= 0x2000u;
      *((unsigned char *)a2 + 172) = v45;
    }
    if (v20[545])
    {
      char v46 = v20[544];
      *((_DWORD *)a2 + 4) |= 0x4000u;
      *((unsigned char *)a2 + 173) = v46;
    }
    uint64_t v47 = v20 + 552;
    if (v20[575] < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v20 + 69), *((void *)v20 + 70));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v47;
      __str.__r_.__value_.__r.__words[2] = *((void *)v20 + 71);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v48 = __str.__r_.__value_.__l.__size_;
      operator delete(__str.__r_.__value_.__l.__data_);
      if (!v48) {
        goto LABEL_221;
      }
    }
    else if (!*((unsigned char *)&__str.__r_.__value_.__s + 23))
    {
      goto LABEL_221;
    }
    if (v20[575] < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v20 + 69), *((void *)v20 + 70));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v47;
      __str.__r_.__value_.__r.__words[2] = *((void *)v20 + 71);
    }
    *((_DWORD *)a2 + 4) |= 0x400u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 19, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_221:
    uint64_t v49 = v20 + 576;
    if (v20[599] < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v20 + 72), *((void *)v20 + 73));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v49;
      __str.__r_.__value_.__r.__words[2] = *((void *)v20 + 74);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v50 = __str.__r_.__value_.__l.__size_;
      operator delete(__str.__r_.__value_.__l.__data_);
      if (!v50) {
        return 1;
      }
    }
    else if (!*((unsigned char *)&__str.__r_.__value_.__s + 23))
    {
      return 1;
    }
    if (v20[599] < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v20 + 72), *((void *)v20 + 73));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v49;
      __str.__r_.__value_.__r.__words[2] = *((void *)v20 + 74);
    }
    *((_DWORD *)a2 + 4) |= 0x800u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 20, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
LABEL_232:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    return 1;
  }
  if (!v25)
  {
    std::string::size_type v58 = v56;
    if (v53)
    {
      int v59 = 2;
    }
    else if (v54)
    {
      int v59 = 1;
    }
    else if (v55)
    {
      int v59 = 0;
    }
    else
    {
      if (!v56)
      {
        if (*((char *)this + 119) < 0) {
          std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 12), *((void *)this + 13));
        }
        else {
          std::string __str = *v6;
        }
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unrecognized Group node type for '%s'.", v57, p_str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        return 0;
      }
      int v59 = 5;
    }
    *((_DWORD *)a2 + 4) |= 0x1000u;
    *((_DWORD *)a2 + 42) = v59;
    if (v52)
    {
      int v60 = v52 + 232;
      if (v52[255] < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v52 + 29), *((void *)v52 + 30));
      }
      else
      {
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v60;
        __str.__r_.__value_.__r.__words[2] = *((void *)v52 + 31);
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v61 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v61 = __str.__r_.__value_.__l.__size_;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v61)
      {
        if (v52[255] < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v52 + 29), *((void *)v52 + 30));
        }
        else
        {
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v60;
          __str.__r_.__value_.__r.__words[2] = *((void *)v52 + 31);
        }
        *((_DWORD *)a2 + 4) |= 8u;
        google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 12, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v58)
    {
      uint64_t v62 = v58 + 256;
      if (v58[279] < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v58 + 32), *((void *)v58 + 33));
      }
      else
      {
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v62;
        __str.__r_.__value_.__r.__words[2] = *((void *)v58 + 34);
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v63 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v63 = __str.__r_.__value_.__l.__size_;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v63)
      {
        if (v58[279] < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v58 + 32), *((void *)v58 + 33));
        }
        else
        {
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v62;
          __str.__r_.__value_.__r.__words[2] = *((void *)v58 + 34);
        }
        *((_DWORD *)a2 + 4) |= 0x80u;
        google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 16, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
    }
    memset(&__str, 0, sizeof(__str));
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(&__str, *((void **)v52 + 26), *((void **)v52 + 27), (uint64_t)(*((void *)v52 + 27) - *((void *)v52 + 26)) >> 4);
    std::string::size_type v65 = __str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__r.__words[0] == __str.__r_.__value_.__l.__size_)
    {
      BOOL v34 = 1;
LABEL_289:
      v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
      return v34;
    }
    std::string::size_type v66 = __str.__r_.__value_.__r.__words[0] + 16;
    while (1)
    {
      long long v67 = (int *)*((void *)a2 + 5);
      if (!v67) {
        break;
      }
      uint64_t v68 = *((int *)a2 + 8);
      int v69 = *v67;
      if ((int)v68 >= *v67)
      {
        if (v69 == *((_DWORD *)a2 + 9))
        {
LABEL_281:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 6, v69 + 1);
          long long v67 = (int *)*((void *)a2 + 5);
          int v69 = *v67;
        }
        int *v67 = v69 + 1;
        std::string v70 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(*((google::protobuf::internal::ArenaImpl **)a2
                                                                                               + 3));
        uint64_t v71 = *((void *)a2 + 5);
        uint64_t v72 = *((int *)a2 + 8);
        *((_DWORD *)a2 + 8) = v72 + 1;
        *(void *)(v71 + 8 * v72 + 8) = v70;
        goto LABEL_283;
      }
      *((_DWORD *)a2 + 8) = v68 + 1;
      std::string v70 = *(siri::dialogengine::CatBinary::node **)&v67[2 * v68 + 2];
LABEL_283:
      uint64_t v73 = siri::dialogengine::FillNodeMsg(*(siri::dialogengine **)(v66 - 16), v70, a3, v64);
      BOOL v34 = v73;
      if (v66 == v65) {
        char v74 = 0;
      }
      else {
        char v74 = v73;
      }
      v66 += 16;
      if ((v74 & 1) == 0) {
        goto LABEL_289;
      }
    }
    int v69 = *((_DWORD *)a2 + 9);
    goto LABEL_281;
  }
  *((_DWORD *)a2 + 4) |= 0x1000u;
  *((_DWORD *)a2 + 42) = 6;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v76, v25 + 26);
  std::string::size_type v26 = v76.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v76.__r_.__value_.__l.__data_ != &v76.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&__str, (long long *)(v26 + 32));
      std::string v28 = (int *)*((void *)a2 + 8);
      if (!v28) {
        break;
      }
      uint64_t v29 = *((int *)a2 + 14);
      int v30 = *v28;
      if ((int)v29 < *v28)
      {
        *((_DWORD *)a2 + 14) = v29 + 1;
        std::string v31 = *(siri::dialogengine::CatBinary::visual_parameter **)&v28[2 * v29 + 2];
        goto LABEL_107;
      }
      if (v30 == *((_DWORD *)a2 + 15)) {
        goto LABEL_105;
      }
LABEL_106:
      *std::string v28 = v30 + 1;
      std::string v31 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::visual_parameter>(*((google::protobuf::internal::ArenaImpl **)a2 + 6));
      uint64_t v32 = *((void *)a2 + 8);
      uint64_t v33 = *((int *)a2 + 14);
      *((_DWORD *)a2 + 14) = v33 + 1;
      *(void *)(v32 + 8 * v33 + 8) = v31;
LABEL_107:
      BOOL v34 = v31 != 0;
      if (v31)
      {
        std::string::size_type v35 = (std::string *)*((void *)v31 + 3);
        *((_DWORD *)v31 + 4) |= 1u;
        if (v35 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v31 + 24, (uint64_t)&__str);
        }
        std::string::operator=(v35, &__str);
        uint64_t v37 = (std::string *)*((void *)v31 + 4);
        *((_DWORD *)v31 + 4) |= 2u;
        if (v37 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v31 + 32, (uint64_t)&v78);
        }
        std::string::operator=(v37, &v78);
      }
      else
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64x2_t v36 = &__str;
        }
        else {
          int64x2_t v36 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create parameter \"%s\" in visual reference", v27, v36);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (!v31) {
        goto LABEL_130;
      }
      int v38 = *(std::string **)(v26 + 8);
      if (v38)
      {
        do
        {
          uint64_t v39 = v38;
          int v38 = (std::string *)v38->__r_.__value_.__r.__words[0];
        }
        while (v38);
      }
      else
      {
        do
        {
          uint64_t v39 = *(std::string **)(v26 + 16);
          BOOL v40 = v39->__r_.__value_.__r.__words[0] == v26;
          std::string::size_type v26 = (std::string::size_type)v39;
        }
        while (!v40);
      }
      std::string::size_type v26 = (std::string::size_type)v39;
      if (v39 == (std::string *)&v76.__r_.__value_.__r.__words[1]) {
        goto LABEL_129;
      }
    }
    int v30 = *((_DWORD *)a2 + 15);
LABEL_105:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 12, v30 + 1);
    std::string v28 = (int *)*((void *)a2 + 8);
    int v30 = *v28;
    goto LABEL_106;
  }
LABEL_129:
  BOOL v34 = 1;
LABEL_130:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v76.__r_.__value_.__l.__size_);
  return v34;
}

void sub_1C5E521A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::CatBinary::cat::set_visual_response(siri::dialogengine::CatBinary::cat *this, void *a2, size_t a3)
{
  *((_DWORD *)this + 4) |= 0x10u;
  int v3 = (uint64_t *)((char *)this + 200);
  std::string::basic_string[abi:ne180100](&__p, a2, a3);
  google::protobuf::internal::ArenaStringPtr::SetNoArena(v3, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, &__p);
  if (v5 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1C5E522AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5E52338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E52414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C5E52514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E525C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E52688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DEFileReader;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C5E527C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E528CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E52968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E52AD0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C5E52C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E52D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DERewindableReader;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C5E52E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E52F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DEFileWriter;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C5E5313C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E532EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E533FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E534A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'siri::dialogengine::Text::Validate(const void ***this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::Text::Validate(this - 8, a2);
}

uint64_t siri::dialogengine::Text::Validate(const void ***this, siri::dialogengine::Context *a2)
{
  char v4 = siri::dialogengine::Node::Validate((siri::dialogengine::Node *)this, a2);
  siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::SpeakableString *)(this + 26), v5, (uint64_t *)&v21);
  char v6 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)&v21, a2, (const siri::dialogengine::LineNumberBase *)this);
  std::string::size_type v24 = &v21;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v6)
  {
    siri::dialogengine::SpeakableString::GetPrintChunks((siri::dialogengine::SpeakableString *)(this + 26), v7, (uint64_t *)&v21);
    char v8 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)&v21, a2, (const siri::dialogengine::LineNumberBase *)this);
    std::string::size_type v24 = &v21;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
    char v9 = v8 & v4;
  }
  else
  {
    char v9 = 0;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v24, this + 9);
  p_int data = (void **)&v24->__r_.__value_.__l.__data_;
  if (v24 != (std::string *)v25)
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v21, (long long *)p_data + 2);
      std::string::basic_string[abi:ne180100]<0>(__p, "text");
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)__p, (uint64_t)&v21, v19);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v11 = v20;
      unsigned __int8 v12 = v20;
      if ((v20 & 0x80u) != 0) {
        unint64_t v11 = (unint64_t)v19[1];
      }
      if (v11)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)v19, 0);
        char v9 = 0;
        unsigned __int8 v12 = v20;
      }
      if ((v12 & 0x80) != 0) {
        operator delete(v19[0]);
      }
      if (v23 < 0) {
        operator delete(v22);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      std::string::size_type v13 = (void **)p_data[1];
      if (v13)
      {
        do
        {
          std::string::size_type v14 = v13;
          std::string::size_type v13 = (void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          std::string::size_type v14 = (void **)p_data[2];
          BOOL v15 = *v14 == p_data;
          p_int data = v14;
        }
        while (!v15);
      }
      p_int data = v14;
    }
    while (v14 != (void **)v25);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v25[0]);
  return v9 & 1;
}

void sub_1C5E53714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  *(void *)(v23 - 72) = v22;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 72));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'siri::dialogengine::Text::~Text(siri::dialogengine::Text *this)
{
  siri::dialogengine::Text::~Text((siri::dialogengine::Text *)((char *)this - 64));
  JUMPOUT(0x1C8796D70);
}

{
  siri::dialogengine::Text::~Text((siri::dialogengine::Text *)((char *)this - 64));
}

void siri::dialogengine::Text::~Text(siri::dialogengine::Text *this)
{
  *(void *)this = &unk_1F2121998;
  *((void *)this + 8) = &unk_1F21219F0;
  siri::dialogengine::SpeakableString::~SpeakableString((void **)this + 26);
  *(void *)this = &unk_1F2126C60;
  *((void *)this + 8) = &unk_1F2126CB8;
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  *((void *)this + 8) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

{
  uint64_t vars8;

  siri::dialogengine::Text::~Text(this);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::Text::Execute(siri::dialogengine::Text *this@<X0>, siri::dialogengine::Context *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  siri::dialogengine::SpeakableString::GetExpanded((siri::dialogengine::Text *)((char *)this + 208), a2, &v3);
  if (v3) {
    operator new();
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C5E53AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, std::__shared_weak_count *a11)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::Text::SetValue(siri::dialogengine::Text *this, const std::string *a2)
{
  std::string::operator=((std::string *)((char *)this + 208), a2);
  std::string::operator=((std::string *)((char *)this + 232), a2 + 1);
  std::string::operator=((std::string *)((char *)this + 256), a2 + 2);
  std::string::operator=((std::string *)((char *)this + 280), a2 + 3);
  std::string::operator=((std::string *)((char *)this + 304), a2 + 4);
  std::string::operator=((std::string *)((char *)this + 328), a2 + 5);
  return std::string::operator=((std::string *)((char *)this + 352), a2 + 6);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Text *,std::shared_ptr<siri::dialogengine::Text>::__shared_ptr_default_delete<siri::dialogengine::Text,siri::dialogengine::Text>,std::allocator<siri::dialogengine::Text>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Text *,std::shared_ptr<siri::dialogengine::Text>::__shared_ptr_default_delete<siri::dialogengine::Text,siri::dialogengine::Text>,std::allocator<siri::dialogengine::Text>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::Text *,std::shared_ptr<siri::dialogengine::Text>::__shared_ptr_default_delete<siri::dialogengine::Text,siri::dialogengine::Text>,std::allocator<siri::dialogengine::Text>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t siri::dialogengine::Text::Accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a1);
}

std::string *siri::dialogengine::Text::GetValue@<X0>(siri::dialogengine::Text *this@<X0>, std::string *a2@<X8>)
{
  return siri::dialogengine::SpeakableString::SpeakableString(a2, (siri::dialogengine::Text *)((char *)this + 208));
}

uint64_t siri::dialogengine::Text::HasRequiredVariablesOrPhrases(siri::dialogengine::Text *this, siri::dialogengine::Context *a2)
{
  uint64_t v2 = (siri::dialogengine::Text *)((char *)this + 208);
  siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::Text *)((char *)this + 208), (const char *)a2, v7);
  if (siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)v7))
  {
    uint64_t HasRequiredVariablesOrPhrases = 1;
  }
  else if (siri::dialogengine::SpeakableString::SpeakEqualsPrint(v2))
  {
    uint64_t HasRequiredVariablesOrPhrases = 0;
  }
  else
  {
    siri::dialogengine::SpeakableString::GetPrintChunks(v2, v4, (uint64_t *)v6);
    uint64_t HasRequiredVariablesOrPhrases = siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)v6);
    char v8 = v6;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  }
  v6[0] = (void **)v7;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](v6);
  return HasRequiredVariablesOrPhrases;
}

void sub_1C5E53DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Text::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = siri::dialogengine::Node::operator==(a1, a2);
  if (result)
  {
    return siri::dialogengine::SpeakableString::operator==((unsigned __int8 *)(a1 + 208), (unsigned __int8 *)(a2 + 208));
  }
  return result;
}

uint64_t siri::dialogengine::Text::operator!=(uint64_t a1, uint64_t a2)
{
  if (siri::dialogengine::Node::operator==(a1, a2)) {
    return siri::dialogengine::SpeakableString::operator==((unsigned __int8 *)(a1 + 208), (unsigned __int8 *)(a2 + 208)) ^ 1;
  }
  else {
    return 1;
  }
}

void sub_1C5E53F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E540AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E54124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DECryptor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C5E5429C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5E54330(_Unwind_Exception *a1)
{
  int v3 = v2;

  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternFactory::Create(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&long long v74 = *MEMORY[0x1E4F143B8];
  siri::dialogengine::StringToLower(a1, (uint64_t)&__s1);
  int v3 = v67[15];
  if ((v67[15] & 0x80000000) == 0)
  {
    p_s1 = (uint64_t *)&__s1;
    switch(v67[15])
    {
      case 0x10:
        if (__s1 != (void *)0x2E6E726574746170 || *(void *)v67 != 0x746573656C626174) {
          goto LABEL_190;
        }
        goto LABEL_15;
      case 0x11:
        if (__s1 != (void *)0x2E6E726574746170 || *(void *)v67 != 0x6573746C75736572 || v67[8] != 116) {
          goto LABEL_190;
        }
        goto LABEL_63;
      case 0x12:
      case 0x18:
      case 0x19:
      case 0x1B:
      case 0x1C:
      case 0x1D:
        goto LABEL_190;
      case 0x13:
        uint64_t v12 = *(void *)v67;
        uint64_t v13 = *(void *)&v67[3];
        uint64_t v14 = 0x737574617473726FLL;
        BOOL v15 = __s1 == (void *)0x2E6E726574746170;
        uint64_t v16 = 0x617473726F727265;
        break;
      case 0x14:
        if (__s1 != (void *)0x2E6E726574746170
          || *(void *)v67 != 0x6572656C706D6973
          || *(_DWORD *)&v67[8] != 1953265011)
        {
          goto LABEL_190;
        }
        goto LABEL_81;
      case 0x15:
        uint64_t v19 = *(void *)v67;
        uint64_t v20 = *(void *)&v67[5];
        BOOL v21 = __s1 == (void *)0x2E6E726574746170;
        uint64_t v22 = 0x736563637573;
        goto LABEL_114;
      case 0x16:
        if (__s1 != (void *)0x2E6E726574746170
          || *(void *)v67 != 0x64656C6961746564
          || *(void *)&v67[6] != 0x746C757365726465)
        {
          goto LABEL_113;
        }
        goto LABEL_157;
      case 0x17:
        uint64_t v12 = *(void *)v67;
        uint64_t v13 = *(void *)&v67[7];
        uint64_t v14 = 0x7375746174736465;
        BOOL v15 = __s1 == (void *)0x2E6E726574746170;
        uint64_t v16 = 0x656C6C65636E6163;
        break;
      case 0x1A:
        goto LABEL_160;
      case 0x1E:
        goto LABEL_180;
      default:
        goto LABEL_173;
    }
    if (!v15 || v12 != v16 || v13 != v14) {
      goto LABEL_190;
    }
LABEL_138:
    std::string::basic_string[abi:ne180100]<0>(&v68, "Sash");
    std::string::basic_string[abi:ne180100]<0>(v69, "Preview");
    std::string::basic_string[abi:ne180100]<0>(v70, "Attribution");
    std::string::basic_string[abi:ne180100]<0>(v71, "Reference");
    std::string::basic_string[abi:ne180100]<0>(v72, "Status");
    std::string::basic_string[abi:ne180100]<0>(v73, "Prompt");
    uint64_t v62 = 0;
    std::string::size_type v63 = 0;
    BOOL v64 = 0;
    *(void *)&v67[16] = &v62;
    v67[24] = 0;
    uint64_t v62 = (std::string *)operator new(0x90uLL);
    std::string::size_type v63 = v62;
    BOOL v64 = (long long *)&v62[6];
    std::string::size_type v63 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v64, &v68, &v74, v62);
    std::allocate_shared[abi:ne180100]<siri::dialogengine::ExecutePatternSimple,std::allocator<siri::dialogengine::ExecutePatternSimple>,std::vector<std::string>,void>((uint64_t *)&v65, (long long **)&v62);
    *(_OWORD *)a2 = v65;
    *(void *)&v67[16] = &v62;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67[16]);
    for (uint64_t i = 0; i != -18; i -= 3)
    {
      if (SHIBYTE(v73[i + 2]) < 0) {
        operator delete((void *)v73[i]);
      }
    }
    goto LABEL_197;
  }
  switch(*(void *)v67)
  {
    case 0x10:
      if (*(void *)__s1 != 0x2E6E726574746170 || *((void *)__s1 + 1) != 0x746573656C626174) {
        goto LABEL_102;
      }
LABEL_15:
      int v7 = operator new(0x80uLL);
      v7[1] = 0;
      void v7[2] = 0;
      *int v7 = &unk_1F211ECF0;
      char v8 = (char *)(v7 + 3);
      char v9 = &unk_1F2120CA8;
      goto LABEL_196;
    case 0x11:
      if (*(void *)__s1 != 0x2E6E726574746170
        || *((void *)__s1 + 1) != 0x6573746C75736572
        || *((unsigned char *)__s1 + 16) != 116)
      {
        goto LABEL_102;
      }
LABEL_63:
      int v7 = operator new(0x80uLL);
      v7[1] = 0;
      void v7[2] = 0;
      *int v7 = &unk_1F211EC78;
      char v8 = (char *)(v7 + 3);
      char v9 = &unk_1F211ECC8;
      goto LABEL_196;
    case 0x13:
      if (*(void *)__s1 == 0x2E6E726574746170
        && *((void *)__s1 + 1) == 0x617473726F727265
        && *(void *)((char *)__s1 + 11) == 0x737574617473726FLL)
      {
        goto LABEL_138;
      }
      if ((v67[15] & 0x80) == 0) {
        goto LABEL_190;
      }
      goto LABEL_102;
    case 0x14:
      if (*(void *)__s1 != 0x2E6E726574746170
        || *((void *)__s1 + 1) != 0x6572656C706D6973
        || *((_DWORD *)__s1 + 4) != 1953265011)
      {
        goto LABEL_102;
      }
LABEL_81:
      std::string::basic_string[abi:ne180100]<0>(&v68, "Sash");
      std::string::basic_string[abi:ne180100]<0>(v69, "Item");
      std::string::basic_string[abi:ne180100]<0>(v70, "Attribution");
      std::string::basic_string[abi:ne180100]<0>(v71, "Reference");
      std::string::basic_string[abi:ne180100]<0>(v72, "Prompt");
      uint64_t v62 = 0;
      std::string::size_type v63 = 0;
      BOOL v64 = 0;
      *(void *)&v67[16] = &v62;
      v67[24] = 0;
      uint64_t v62 = (std::string *)operator new(0x78uLL);
      std::string::size_type v63 = v62;
      BOOL v64 = (long long *)&v62[5];
      std::string::size_type v63 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v64, &v68, (long long *)v73, v62);
      std::allocate_shared[abi:ne180100]<siri::dialogengine::ExecutePatternSimple,std::allocator<siri::dialogengine::ExecutePatternSimple>,std::vector<std::string>,void>((uint64_t *)&v65, (long long **)&v62);
      *(_OWORD *)a2 = v65;
      *(void *)&v67[16] = &v62;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67[16]);
      for (uint64_t j = 0; j != -15; j -= 3)
      {
        if (SHIBYTE(v72[j + 2]) < 0) {
          operator delete((void *)v72[j]);
        }
      }
      goto LABEL_197;
    case 0x15:
      if (*(void *)__s1 == 0x2E6E726574746170
        && *((void *)__s1 + 1) == 0x7373736563637573
        && *(void *)((char *)__s1 + 13) == 0x7375746174737373)
      {
        goto LABEL_138;
      }
      goto LABEL_102;
    case 0x16:
      if (*(void *)__s1 != 0x2E6E726574746170
        || *((void *)__s1 + 1) != 0x64656C6961746564
        || *(void *)((char *)__s1 + 14) != 0x746C757365726465)
      {
        goto LABEL_102;
      }
LABEL_157:
      int v7 = operator new(0x80uLL);
      v7[1] = 0;
      void v7[2] = 0;
      *int v7 = &unk_1F211ED90;
      char v8 = (char *)(v7 + 3);
      char v9 = &unk_1F21216D8;
      goto LABEL_196;
    default:
LABEL_102:
      if (*(void *)v67 != 23) {
        goto LABEL_123;
      }
      if (*(void *)__s1 == 0x2E6E726574746170
        && *((void *)__s1 + 1) == 0x656C6C65636E6163
        && *(void *)((char *)__s1 + 15) == 0x7375746174736465)
      {
        goto LABEL_138;
      }
      if ((v67[15] & 0x80) != 0)
      {
LABEL_123:
        if (*(void *)v67 == 22)
        {
          if (*(void *)__s1 == 0x2E6E726574746170
            && *((void *)__s1 + 1) == 0x73736572676F7270
            && *(void *)((char *)__s1 + 14) == 0x7375746174737373)
          {
            goto LABEL_138;
          }
          if ((v67[15] & 0x80) == 0) {
            goto LABEL_190;
          }
        }
        if (*(void *)v67 == 41)
        {
          if (!memcmp(__s1, "pattern.simpledisambiguationclarification", 0x29uLL)) {
            goto LABEL_175;
          }
          if ((v3 & 0x80) == 0)
          {
            if (v3 == 26)
            {
LABEL_156:
              p_s1 = (uint64_t *)&__s1;
              goto LABEL_160;
            }
            if (v3 != 30) {
              goto LABEL_190;
            }
            goto LABEL_180;
          }
        }
        if (*(void *)v67 != 30) {
          goto LABEL_158;
        }
        if (*(void *)__s1 != 0x2E6E726574746170
          || *((void *)__s1 + 1) != 0x65646E656E65706FLL
          || *((void *)__s1 + 2) != 0x69666972616C6364
          || *(void *)((char *)__s1 + 22) != 0x6E6F697461636966)
        {
          if ((v3 & 0x80) == 0)
          {
LABEL_155:
            if (v3 != 26) {
              goto LABEL_190;
            }
            goto LABEL_156;
          }
LABEL_158:
          if (*(void *)v67 != 26) {
            goto LABEL_190;
          }
          p_s1 = (uint64_t *)__s1;
LABEL_160:
          uint64_t v49 = *p_s1;
          uint64_t v50 = p_s1[1];
          uint64_t v51 = p_s1[2];
          int v52 = *((unsigned __int16 *)p_s1 + 12);
          if (v49 != 0x2E6E726574746170 || v50 != 0x616C636F6E736579 || v51 != 0x6974616369666972 || v52 != 28271) {
            goto LABEL_190;
          }
        }
LABEL_175:
        std::string::basic_string[abi:ne180100]<0>(&v68, "Sash");
        std::string::basic_string[abi:ne180100]<0>(v69, "Preview");
        std::string::basic_string[abi:ne180100]<0>(v70, "Attribution");
        std::string::basic_string[abi:ne180100]<0>(v71, "Reference");
        std::string::basic_string[abi:ne180100]<0>(v72, "Prompt");
        uint64_t v62 = 0;
        std::string::size_type v63 = 0;
        BOOL v64 = 0;
        *(void *)&v67[16] = &v62;
        v67[24] = 0;
        uint64_t v62 = (std::string *)operator new(0x78uLL);
        std::string::size_type v63 = v62;
        BOOL v64 = (long long *)&v62[5];
        std::string::size_type v63 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v64, &v68, (long long *)v73, v62);
        std::allocate_shared[abi:ne180100]<siri::dialogengine::ExecutePatternSimple,std::allocator<siri::dialogengine::ExecutePatternSimple>,std::vector<std::string>,void>((uint64_t *)&v65, (long long **)&v62);
        *(_OWORD *)a2 = v65;
        *(void *)&v67[16] = &v62;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67[16]);
        for (uint64_t k = 0; k != -15; k -= 3)
        {
          if (SHIBYTE(v72[k + 2]) < 0) {
            operator delete((void *)v72[k]);
          }
        }
        goto LABEL_197;
      }
      if (v67[15] > 0x1Du)
      {
        if (v67[15] != 30)
        {
LABEL_173:
          if (v67[15] != 41 || memcmp(&__s1, "pattern.simpledisambiguationclarification", 0x29uLL)) {
            goto LABEL_190;
          }
          goto LABEL_175;
        }
LABEL_180:
        if (__s1 != (void *)0x2E6E726574746170
          || *(void *)v67 != 0x65646E656E65706FLL
          || *(void *)&v67[8] != 0x69666972616C6364
          || *(void *)&v67[14] != 0x6E6F697461636966)
        {
          goto LABEL_190;
        }
        goto LABEL_175;
      }
      if (v67[15] != 22) {
        goto LABEL_155;
      }
LABEL_113:
      uint64_t v19 = *(void *)v67;
      uint64_t v20 = *(void *)&v67[6];
      BOOL v21 = __s1 == (void *)0x2E6E726574746170;
      uint64_t v22 = 0x6572676F7270;
LABEL_114:
      uint64_t v40 = v22 & 0xFFFFFFFFFFFFLL | 0x7373000000000000;
      if (v21 && v19 == v40 && v20 == 0x7375746174737373) {
        goto LABEL_138;
      }
LABEL_190:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s1, "pattern.detaileddisambiguationclarification"))
      {
        int v7 = operator new(0x80uLL);
        v7[1] = 0;
        void v7[2] = 0;
        *int v7 = &unk_1F211EDE0;
        char v8 = (char *)(v7 + 3);
        char v9 = &unk_1F211EE30;
LABEL_196:
        *((_OWORD *)v7 + 2) = 0u;
        *((_OWORD *)v7 + 3) = 0u;
        *((_OWORD *)v7 + 4) = 0u;
        *((_OWORD *)v7 + 5) = 0u;
        *((_OWORD *)v7 + 6) = 0u;
        *((_OWORD *)v7 + 7) = 0u;
        uint64_t v7[3] = v9;
        *(void *)a2 = v8;
        *(void *)(a2 + 8) = v7;
        goto LABEL_197;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s1, "pattern.multilevelresultset"))
      {
        int v7 = operator new(0x80uLL);
        v7[1] = 0;
        void v7[2] = 0;
        *int v7 = &unk_1F211EE58;
        char v8 = (char *)(v7 + 3);
        char v9 = &unk_1F21220F8;
        goto LABEL_196;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s1, "prompt.detaileddisambiguationprompt"))
      {
        int v7 = operator new(0x80uLL);
        v7[1] = 0;
        void v7[2] = 0;
        *int v7 = &unk_1F211EEA8;
        char v8 = (char *)(v7 + 3);
        char v9 = &unk_1F21237E0;
        goto LABEL_196;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s1, "prompt.simpledisambiguationprompt")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s1, "prompt.openendedprompt")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s1, "prompt.yesnoprompt"))
      {
        std::string::basic_string[abi:ne180100]<0>(&v68, "Sash");
        std::string::basic_string[abi:ne180100]<0>(v69, "Prompt");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v62, &v68, 2uLL);
        std::allocate_shared[abi:ne180100]<siri::dialogengine::ExecutePatternSimple,std::allocator<siri::dialogengine::ExecutePatternSimple>,std::vector<std::string>,void>((uint64_t *)&v67[16], (long long **)&v62);
        *(_OWORD *)a2 = *(_OWORD *)&v67[16];
        *(void *)&long long v65 = &v62;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
        for (uint64_t m = 0; m != -6; m -= 3)
        {
          if (SHIBYTE(v69[m + 2]) < 0) {
            operator delete((void *)v69[m]);
          }
        }
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s1, "pattern.disambiguationclarification"))
      {
        std::string::basic_string[abi:ne180100]<0>(&v68, "Sash");
        std::string::basic_string[abi:ne180100]<0>(v69, "Preview");
        std::string::basic_string[abi:ne180100]<0>(v70, "Attribution");
        std::string::basic_string[abi:ne180100]<0>(v71, "Prompt");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v62, &v68, 4uLL);
        std::allocate_shared[abi:ne180100]<siri::dialogengine::ExecutePatternSimple,std::allocator<siri::dialogengine::ExecutePatternSimple>,std::vector<std::string>,void>((uint64_t *)&v67[16], (long long **)&v62);
        *(_OWORD *)a2 = *(_OWORD *)&v67[16];
        *(void *)&long long v65 = &v62;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
        for (uint64_t n = 0; n != -12; n -= 3)
        {
          if (SHIBYTE(v71[n + 2]) < 0) {
            operator delete((void *)v71[n]);
          }
        }
      }
      else
      {
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
      }
LABEL_197:
      if ((v67[15] & 0x80000000) != 0) {
        operator delete(__s1);
      }
      return;
  }
}

void sub_1C5E550A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  uint64_t v43 = 0;
  while (1)
  {
    if (*(&a42 + v43) < 0) {
      operator delete(*(void **)((char *)&a37 + v43));
    }
    v43 -= 24;
    if (v43 == -96)
    {
      if (a21 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::allocate_shared[abi:ne180100]<siri::dialogengine::ExecutePatternSimple,std::allocator<siri::dialogengine::ExecutePatternSimple>,std::vector<std::string>,void>(uint64_t *a1, long long **a2)
{
  char v4 = operator new(0x98uLL);
  v4[1] = 0;
  v4[2] = 0;
  *char v4 = &unk_1F211ED40;
  uint64_t result = siri::dialogengine::ExecutePatternSimple::ExecutePatternSimple((uint64_t)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_1C5E553E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, long long *a2, unint64_t a3)
{
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, a3);
    *(void *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (long long *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1C5E55478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedDisambiguationPrompt>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedDisambiguationPrompt>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211EEA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedDisambiguationPrompt>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211EEA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ExecuteMultiLevelResultSet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteMultiLevelResultSet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211EE58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteMultiLevelResultSet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211EE58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedDisambiguationClarification>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedDisambiguationClarification>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211EDE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedDisambiguationClarification>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211EDE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedResult>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedResult>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211ED90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedResult>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211ED90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ExecutePatternSimple>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecutePatternSimple>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211ED40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecutePatternSimple>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211ED40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ExecuteTableSet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteTableSet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211ECF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteTableSet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211ECF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ExecuteResultSet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteResultSet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211EC78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteResultSet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211EC78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t GetProfanityFilter(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v2 = (void *)v1;
  uint64_t v4 = v3;
  v276[6] = *MEMORY[0x1E4F143B8];
  int v5 = *(unsigned __int8 *)(v1 + 23);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    if (v5 != 2)
    {
      if (v5 != 3)
      {
        if (v5 != 5) {
          goto LABEL_57;
        }
        if (*(_DWORD *)v1 != 1230992489 || *(unsigned char *)(v1 + 4) != 84)
        {
          if (*(_DWORD *)v1 != 1348433008 || *(unsigned char *)(v1 + 4) != 84)
          {
            if (*(_DWORD *)v1 != 1113551984 || *(unsigned char *)(v1 + 4) != 82)
            {
              if (*(_DWORD *)v1 != 1214212218 || *(unsigned char *)(v1 + 4) != 75) {
                goto LABEL_21;
              }
LABEL_159:
              return (uint64_t)GetProfanityFilter_zh_HK((uint64_t)v4);
            }
LABEL_152:
            {
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v45, "xoxotonas", "x*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v46, "xoxotona", "x******a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v47, "xoxotinhas", "x********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v48, "xoxotas", "x*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v49, "xoxotões", "x******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "xoxhotas", "x******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v51, "xotinhas", "x******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v52, "xotas", "x***s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v53, "xotões", "x****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v54, "xiricas", "x*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v55, "xirica", "x****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v56, "xibungos", "x******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v57, "xibungo", "x*****o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v58, "xibius", "x****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v59, "xexecas", "x*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v60, "xererecas", "x*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v61, "xecas", "x***s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v62, "xavascas", "x******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v63, "xaninhas", "x******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v64, "xanas", "x***s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v65, "viadagens", "v*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v66, "viadagem", "v******m");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v67, "vagabas", "v*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v68, "vagaba", "v****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v69, "travecos", "t******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v70, "traveco", "t*****o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "traveca", "t*****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v72, "transei", "t*****i");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v73, "transe", "t****e");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v74, "transar", "t*****r");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v75, "transa", "t****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v76, "tobona", "t****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v77, "tobinha", "t*****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v78, "tobão", "t***o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v79, "tetinhas", "t******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v80, "tetões", "t****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "tesudos", "t*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v82, "tesudas", "t*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v83, "tesoes", "t****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v84, "tesões", "t****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v85, "surubas", "s*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v86, "siriricas", "s*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v87, "putos", "p***s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "putonas", "p*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v89, "putinhas", "p******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v90, "putinha", "p*****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v91, "puteiros", "p******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v92, "puteiro", "p*****o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "putanas", "p*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v94, "putão", "p***o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v95, "punheteiro", "p********o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v96, "prexerecas", "p********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v97, "prexecas", "p******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v98, "prechecas", "p*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v99, "pixiricas", "p*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "pirocos", "p*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v101, "pirocas", "p*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v102, "pirocao", "p*****o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v103, "piroca", "p****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v104, "pirocões", "p******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v105, "pirocão", "p*****o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v106, "picões", "p****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v107, "piçou", "p***u");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v108, "piços", "p***s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v109, "piço", "p**o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v110, "piçadas", "P*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v111, "piçada", "p****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v112, "pexerecas", "p*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v113, "pentelhudos", "p*********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v114, "pentelhudo", "p********o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v115, "pentelhudas", "p*********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v116, "pentelhuda", "p********a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v117, "pentelho", "p******o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v118, "pentelha", "p******a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v119, "olhotas", "o*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v120, "merdosos", "m******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v121, "merdosas", "m******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v122, "merdosa", "m*****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v123, "grelos", "g****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v124, "grelo", "g***o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v125, "grelinhos", "g*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v126, "grelinho", "g******o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v127, "grelões", "g*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v128, "grelão", "g****o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v129, "furnicou", "f******u");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v130, "funicou", "f*****u");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v131, "fudida", "f****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v132, "fudi", "f**i");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v133, "fudeu", "f***u");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v134, "fuderam", "f*****m");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v135, "fuder", "f***r");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v136, "fudedor", "f*****r");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v137, "fornicou", "f******u");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v138, "fornicar", "f******r");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v139, "fodi", "f**i");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v140, "fodeu", "f***u");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v141, "foderam", "f*****m");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v142, "fodecao", "f*****o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v143, "fodeção", "f*****o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v144, "fodões", "f****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v145, "fodão", "f***o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v146, "fiofós", "f****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v147, "fiofó", "f***ó");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v148, "esporrou", "e******u");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v149, "esporrados", "e********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v150, "esporradas", "e********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v151, "escrotos", "e******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v152, "escrotas", "e******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v153, "escrotíssimos", "e***********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v154, "enrabei", "e*****i");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v155, "embocetados", "e*********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v156, "embocetado", "e********o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v157, "embocetadas", "e*********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v158, "embocetada", "e********a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v159, "cuzudos", "c*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v160, "cuzudas", "c*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v161, "cuzinhos", "c******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v162, "cuzões", "c****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v163, "cus", "c*s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v164, "curras", "c****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v165, "curradas", "c******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v166, "curalhos", "c******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v167, "cunilingus", "c********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v168, "cunilingua", "c********a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v169, "ciriricas", "c*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v170, "chotas", "c****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v171, "chochotonas", "c*********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v172, "chochotona", "c********a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v173, "chochotas", "c*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v174, "chibungos", "c*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v175, "chibungo", "c******o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v176, "chibumbos", "c*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v177, "chibumbas", "c*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v178, "cherecas", "c******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v179, "chechecas", "c*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v180, "chavascas", "c*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v181, "chavasca", "c******a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v182, "chaninhas", "c*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v183, "chaninha", "c******a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v184, "chanas", "c****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v185, "caralhudos", "c********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v186, "caralhos", "c******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v187, "caralhões", "c*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v188, "cagonas", "c*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v189, "cagona", "c****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v190, "cagados", "c*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v191, "cagadores", "c*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v192, "cagador", "c*****r");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v193, "cagaço", "c****o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v194, "cagões", "c****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v195, "cabaçudos", "c*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v196, "cabaçudas", "c*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v197, "cabaços", "c*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v198, "buzanfas", "b******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v199, "buzanfa", "b*****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v200, "bussetas", "b******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v201, "bucetinhas", "b********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v202, "bucetas", "b*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v203, "bucetões", "b******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v204, "buças", "b***s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v205, "broxou", "b****u");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v206, "broxei", "b****i");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v207, "broxasse", "b******e");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v208, "broxados", "b******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v209, "broxado", "b*****o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v210, "broxadas", "b******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v211, "broxada", "b*****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v212, "brochou", "b*****u");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v213, "brochei", "b*****i");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v214, "brochados", "b*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v215, "brochado", "b******o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v216, "brochadas", "b*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v217, "brochada", "b******a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v218, "brioquinhos", "b*********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v219, "brioquinho", "b********o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v220, "briocuzinhos", "b**********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v221, "briocuzinho", "b*********o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v222, "briocozinhos", "b**********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v223, "briocozinho", "b*********o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v224, "briocos", "b*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v225, "briocões", "b******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v226, "briocão", "b*****o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v227, "bostonas", "b******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v228, "bostona", "b*****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v229, "bosteiros", "b*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v230, "bostas", "b****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v231, "bostadas", "b******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v232, "bostada", "b*****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v233, "bostões", "b*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v234, "bostão", "b****o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v235, "boquetes", "b******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v236, "boquete", "b*****e");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v237, "boiolas", "b*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v238, "boioladas", "b*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v239, "boiolada", "b******a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v240, "bocetinhas", "b********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v241, "bocetinha", "b*******a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v242, "bocetas", "b*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v243, "boceta", "b****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v244, "bocetões", "b******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v245, "bocetão", "b*****o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v246, "boazudas", "b******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v247, "boazuda", "b*****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v248, "bixonas", "b*****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v249, "bixona", "b****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v250, "bixas", "b***s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v251, "bimbas", "b****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v252, "bimbadas", "b******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v253, "bimba", "b***a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v254, "bilauzinhos", "b*********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v255, "bilauzinho", "b********o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v256, "bilauzões", "b*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v257, "bilauzão", "b******o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v258, "bilaus", "b****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v259, "bichonas", "b******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v260, "bichona", "b*****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v261, "bichinhas", "b*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v262, "bichinha", "b******a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v263, "bichas", "b****s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v264, "baranguinhas", "b**********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v265, "baranguinha", "b*********a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v266, "barangonas", "b********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v267, "barangona", "b*******a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v268, "barangas", "b******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v269, "baranga", "b*****a");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v270, "baitolas", "b******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v271, "aviadados", "a*******s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v272, "aviadado", "a******o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v273, "autofelações", "a**********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v274, "autofelação", "a*********o");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v275, "abaitolados", "a*********s");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v276, "abaitolado", "a********o");
              std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_pt_BR(void)::sProfanityData_pt_BR, (uint64_t)v45, 0xE8uLL);
              for (uint64_t i = 0; i != -1392; i -= 6)
                std::pair<std::string const,std::string>::~pair((uint64_t)&v276[i]);
              __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_pt_BR(void)::sProfanityData_pt_BR, &dword_1C5C1E000);
            }
            *uint64_t v4 = 0;
            v4[1] = 0;
            v4[2] = 0;
            return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_pt_BR(void)::sProfanityData_pt_BR[0], unk_1EA3D9008, 0xAAAAAAAAAAAAAAABLL* ((unk_1EA3D9008 - GetProfanityFilter_pt_BR(void)::sProfanityData_pt_BR[0]) >> 4));
          }
LABEL_132:
          {
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v45, "xanax", "x***x");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v46, "viadao", "v****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v47, "viada", "v***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v48, "veadao", "v****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v49, "veada", "v***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v50, "veadão", "v****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v51, "vagabunda", "v*******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v52, "vadia", "v***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v53, "trolha", "t****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v54, "transe-me", "t*******e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v55, "transa-la", "t*******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v56, "tomar no cu", "t*********u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v57, "sapatao", "s*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v58, "sapatão", "s*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v59, "rabudona", "r******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v60, "rabudo", "r****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v61, "rabudao", "r*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v62, "rabuda", "r****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v63, "rabudão", "r*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v64, "porra", "p***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v65, "pixereca", "p******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v66, "pemba", "p***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v67, "mariquinhas", "m*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v68, "mariquinha", "m********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v69, "maricas", "m*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v70, "marica", "m****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v71, "fodo", "f**o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v72, "fodido", "f****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v73, "fodemos", "f*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v74, "fodam", "f***m");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v75, "foda-se", "f*****e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v76, "foda", "f**a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v77, "fodê", "f**ê");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v78, "filho da puta", "f***********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v79, "fdp", "f*p");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v80, "escroto", "e*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v81, "ejaculei-me", "e*********e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v82, "corrê", "c***ê");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v83, "cornuda", "c*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v84, "corno", "c***o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v85, "corna", "c***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v86, "cona", "c**a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v87, "colhões", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v88, "cocô", "c**ô");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v89, "cacete", "c****e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v90, "cabronas", "c******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v91, "cabrona", "c*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v92, "cabrões", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v93, "cabrão", "c****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v94, "broxou-me", "b*******e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v95, "bostana", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v96, "bosseta", "b*****a");
            std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_pt_PT(void)::sProfanityData_pt_PT, (uint64_t)v45, 0x34uLL);
            for (uint64_t j = 306; j != -6; j -= 6)
              std::pair<std::string const,std::string>::~pair((uint64_t)&v45[j]);
            __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_pt_PT(void)::sProfanityData_pt_PT, &dword_1C5C1E000);
          }
          *uint64_t v4 = 0;
          v4[1] = 0;
          v4[2] = 0;
          return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_pt_PT(void)::sProfanityData_pt_PT[0], unk_1EA3D8FE8, 0xAAAAAAAAAAAAAAABLL* ((unk_1EA3D8FE8 - GetProfanityFilter_pt_PT(void)::sProfanityData_pt_PT[0]) >> 4));
        }
LABEL_110:
        {
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[23],0>(v45, "vai a fare in culo", "v********************o");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[19],0>(v46, "testa di minchia", "t****************a");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v47, "porco dio", "p********o");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v48, "porca puttana", "p************a");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[23],0>(v49, "mannaggia la madonna", "m********************a");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[18],0>(v50, "mannaggia cristo", "m***************o");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v51, "madonna troia", "m************a");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(v52, "madonna maiala", "m*************a");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v53, "madonna impestata", "m***************a");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[18],0>(v54, "figlio di troia", "f***************a");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[20],0>(v55, "figlio di puttana", "f*****************a");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[18],0>(v56, "figlia di troia", "f***************a");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[20],0>(v57, "figlia di puttana", "f*****************a");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v58, "dio stronzo", "d**********o");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v59, "dio porco", "d********o");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v60, "dio ladro", "d********o");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v61, "dio fa", "d*****a");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(v62, "brutta stronza", "b*************a");
          std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_it_IT(void)::sProfanityData_it_IT, (uint64_t)v45, 0x12uLL);
          for (uint64_t k = 102; k != -6; k -= 6)
            std::pair<std::string const,std::string>::~pair((uint64_t)&v45[k]);
          __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_it_IT(void)::sProfanityData_it_IT, &dword_1C5C1E000);
        }
        *uint64_t v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
        return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_it_IT(void)::sProfanityData_it_IT[0], unk_1EA3D8FA8, 0xAAAAAAAAAAAAAAABLL* ((unk_1EA3D8FA8 - GetProfanityFilter_it_IT(void)::sProfanityData_it_IT[0]) >> 4));
      }
      if (*(_WORD *)v1 != 30073 || *(unsigned char *)(v1 + 2) != 101)
      {
LABEL_57:
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v1, "de_CH"))
        {
          return (uint64_t)GetProfanityFilter_de_CH(v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "de_AT"))
        {
          return (uint64_t)GetProfanityFilter_de_AT(v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "de_DE"))
        {
          return (uint64_t)GetProfanityFilter_de_DE(v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "fr_BE"))
        {
          return (uint64_t)GetProfanityFilter_fr_BE((uint64_t)v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "fr_CA"))
        {
          return (uint64_t)GetProfanityFilter_fr_CA(v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "es_US"))
        {
          return (uint64_t)GetProfanityFilter_es_US((uint64_t)v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "es_MX"))
        {
          return (uint64_t)GetProfanityFilter_es_MX((uint64_t)v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "es_ES"))
        {
          return (uint64_t)GetProfanityFilter_es_ES((uint64_t)v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "es_CL"))
        {
          return (uint64_t)GetProfanityFilter_es_CL((uint64_t)v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_US"))
        {
          return (uint64_t)GetProfanityFilter_en_US(v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_NZ"))
        {
          return (uint64_t)GetProfanityFilter_en_NZ(v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_IN"))
        {
          return (uint64_t)GetProfanityFilter_en_IN(v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_CA"))
        {
          return (uint64_t)GetProfanityFilter_en_CA(v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_ZA"))
        {
          return (uint64_t)GetProfanityFilter_en_ZA((uint64_t)v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_SG"))
        {
          return (uint64_t)GetProfanityFilter_en_SG(v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_GB"))
        {
          return (uint64_t)GetProfanityFilter_en_GB(v4);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_AU"))
        {
          return (uint64_t)GetProfanityFilter_en_AU(v4);
        }
        uint64_t result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_IE");
        if (result)
        {
          return (uint64_t)GetProfanityFilter_en_IE(v4);
        }
LABEL_368:
        *uint64_t v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
        return result;
      }
LABEL_98:
      {
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[4],0>(v45, "up乜春", "***");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v46, "on9", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v47, "黑鬼", "黑*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v48, "黐脷筋", "**筋");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v49, "黐筋", "*筋");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v50, "黐孖筋", "**筋");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v51, "麻甩佬", "**佬");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v52, "鸠", "*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v53, "食撚屎", "食**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v54, "食屎", "食*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v55, "颜射", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v56, "顶你个肺", "****");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v57, "霎昂", "*昂");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v58, "閪头", "*头");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v59, "閪", "*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v60, "躝瘫", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v61, "躝坦", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v62, "足交", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v63, "贱精", "*精");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v64, "贱种", "*种");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v65, "贱格", "*格");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v66, "贱", "*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v67, "西头", "*头");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v68, "茂里", "*里");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v69, "臭閪", "臭*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v70, "臭西", "臭*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v71, "臭屄", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v72, "脚交", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v73, "肛交", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v74, "肏", "*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v75, "粉肠", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v76, "粉皮", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v77, "笨柒", "笨*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v78, "碌柒", "碌*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v79, "白鬼", "白*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v80, "痴鸠线", "**线");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v81, "痴线", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v82, "痴撚线", "**线");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v83, "生仔无屎窟", "生仔***");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v84, "生仔无屎忽", "生仔***");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v85, "生仔冇屎忽", "生仔***");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v86, "玩撚完", "玩*完");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v87, "猪閪", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v88, "猪兜", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v89, "猪乸", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v90, "死柒头", "**头");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v91, "柒头", "*头");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v92, "柒", "*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v93, "条条揈", "**揈");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v94, "杂种", "*种");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v95, "晏昼屌你屎忽窿", "晏昼*****");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v96, "晏昼屌你屎忽", "晏昼****");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v97, "晏昼叼你屎忽窿", "晏昼*****");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v98, "晏昼叼你屎忽", "晏昼****");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v99, "是撚但", "是*但");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v100, "是尻但", "是*但");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v101, "春袋", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v102, "昂居", "昂*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v103, "收皮啦", "**啦");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v104, "收皮", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v105, "收皮", "收*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v106, "收爹", "收*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v107, "操你妈", "**妈");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v108, "撚野", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v109, "撚样", "*样");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v110, "撚屌", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v111, "撚", "*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v112, "搅嘢", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v113, "援交妹", "**妹");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v114, "援交", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v115, "指交", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v116, "拾下拾下", "*下*下");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v117, "把撚", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v118, "扯旗", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v119, "打飞机", "打**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v120, "打靶仔", "**仔");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v121, "打潜艇", "打**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v122, "打柒佢", "**佢");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v123, "打手枪", "打**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v124, "扑野", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v125, "扑街女", "**女");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v126, "扑街仔", "**仔");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v127, "扑街", "*街");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v128, "扑晒街", "**街");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v129, "成嚿叉烧咁", "成嚿*烧咁");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v130, "戆鸠鸠", "***");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v131, "戆鸠", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v132, "戆胶", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v133, "戆撚鸠", "***");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v134, "戆居", "戆*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v135, "懵盛盛", "懵**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v136, "废柴", "*柴");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v137, "干你娘", "**娘");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v138, "屎忽鬼", "***");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v139, "屌那星", "**星");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v140, "屌那妈", "***");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v141, "屌柒", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v142, "屌揾你", "**你");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v143, "屌屌揈", "**揈");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v144, "屌屄", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v145, "屌尻爆你", "***你");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v146, "屌尻你", "**你");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v147, "屌尻", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v148, "屌佢", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v149, "屌你老母閪", "*你***");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v150, "屌你老母臭閪", "*你****");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v151, "屌你老母", "*你**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v152, "屌你老味閪", "*你***");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v153, "屌你老味", "*你**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v154, "屌你老味", "*你**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v155, "屌你", "*你");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v156, "屌", "*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v157, "屄", "*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v158, "尻", "*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v159, "小喇叭", "小**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v160, "射精", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v161, "孤鸠寒", "孤*寒");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v162, "妖", "*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v163, "好on9", "好**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v164, "好撚on9", "好****");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v165, "好撚柒", "好**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v166, "好撚", "好*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v167, "契弟", "*弟");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v168, "大鸠镬", "大**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v169, "大波", "大*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v170, "大撚镬", "大*镬");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v171, "多鸠余", "多*余");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v172, "含撚", "含*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v173, "叼那妈", "***");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v174, "叼柒", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v175, "叼揾你", "**你");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v176, "叼屄", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v177, "叼尻", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v178, "叼叼揈", "**揈");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v179, "叼你老母", "*你**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v180, "叼你", "*你");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v181, "叼", "*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v182, "叫鸭", "叫*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v183, "叫鸡", "叫*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v184, "口爆", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v185, "口交", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v186, "冚家铲", "***");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v187, "冚家铲", "**铲");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v188, "冚家拎", "**拎");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v189, "冚家富贵", "**富贵");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v190, "兽交", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v191, "八婆", "*婆");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v192, "八公", "*公");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v193, "做咩撚", "做咩*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v194, "做乜撚野", "做乜**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v195, "做乜撚嘢", "做乜**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v196, "做乜撚", "做乜*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v197, "你老母", "你**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v198, "你老尾", "你**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v199, "你老味", "你**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v200, "你好on9", "你好**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v201, "你卤味", "你**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v202, "低B", "低*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v203, "他妈的", "他*的");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v204, "今朝拮你箩柚", "今朝****");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v205, "仆街女", "**女");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v206, "仆街仔", "**仔");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v207, "仆街", "*街");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v208, "仆晒街", "**街");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v209, "仆你个街", "**个*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v210, "仆你个臭街", "**个**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v211, "乸型", "*型");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v212, "乳交", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v213, "乜鸠", "乜*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v214, "一楼一凤", "一*一*");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v215, "一楼一", "一*一");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v216, "SM", "**");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v217, "3P", "3*");
        std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_yue(void)::sProfanityData_yue, (uint64_t)v45, 0xADuLL);
        for (uint64_t m = 0; m != -1038; m -= 6)
          std::pair<std::string const,std::string>::~pair((uint64_t)&v217[m]);
        __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_yue(void)::sProfanityData_yue, &dword_1C5C1E000);
      }
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_yue(void)::sProfanityData_yue[0], unk_1EA3D8FC8, 0xAAAAAAAAAAAAAAABLL* ((unk_1EA3D8FC8 - GetProfanityFilter_yue(void)::sProfanityData_yue[0]) >> 4));
    }
    if (*(_WORD *)v1 != 27507)
    {
      if (*(_WORD *)v1 != 27760)
      {
        if (*(_WORD *)v1 != 26998)
        {
          if (*(_WORD *)v1 != 30323)
          {
            if (*(_WORD *)v1 != 25960) {
              goto LABEL_70;
            }
            goto LABEL_171;
          }
          goto LABEL_156;
        }
        goto LABEL_150;
      }
      goto LABEL_129;
    }
    goto LABEL_108;
  }
  uint64_t v12 = *(void *)(v1 + 8);
  switch(v12)
  {
    case 2:
      uint64_t v29 = *(_WORD **)v1;
      if (**(_WORD **)v1 != 27507)
      {
        if (*v29 != 27760)
        {
          if (*v29 != 26998)
          {
            if (*v29 != 30323)
            {
              if (*v29 != 25960)
              {
                if ((v5 & 0x80) != 0)
                {
                  if (*(void *)(v1 + 8) == 2 && **(_WORD **)v1 == 29549) {
                    goto LABEL_191;
                  }
                  if (*(void *)(v1 + 8) == 2)
                  {
                    uint64_t v22 = *(_WORD **)v1;
LABEL_186:
                    if (*v22 == 24932)
                    {
                      return (uint64_t)GetProfanityFilter_da((uint64_t)v4);
                    }
                  }
                }
                else if (v5 == 2)
                {
LABEL_70:
                  if (*(_WORD *)v1 != 29549)
                  {
                    uint64_t v22 = (_WORD *)v1;
                    goto LABEL_186;
                  }
LABEL_191:
                  {
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v45, "tetek senget", "t***k senget");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v46, "tetek menglebeh", "t***k menglebeh");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v47, "tetek", "t***k");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v48, "telur loyot", "t***r l***t");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v49, "sundal", "s****l");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v50, "sial", "s**l");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v51, "puting lendir", "p****g lendir");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v52, "pundek", "p****k");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v53, "pukimak", "p*****k");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v54, "puki mak", "p*** **k");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v55, "puki busuk", "p*** busuk");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v56, "puki basi", "p*** basi");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v57, "puki babi", "p*** b**i");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v58, "puki anjing", "p*** anjing");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v59, "puki", "p***");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v60, "pergi mampus", "pergi m****s");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v61, "pepek daki", "p***k d**i");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v62, "pepek", "p***k");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v63, "pelir mamak", "p***r m***k");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v64, "pelir", "p***r");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v65, "peler", "p***r");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v66, "pantat berserabai", "p****t b********i");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v67, "pantat", "p****t");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v68, "palat", "p***t");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v69, "nonok", "n***k");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v70, "ne-nen", "n****n");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v71, "melancap", "m******p");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v72, "mangkuk hayun", "mangkuk h***n");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v73, "mangkuk hanyun", "mangkuk h****n");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v74, "lanchiau", "l******u");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v75, "lancap", "l****p");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v76, "lahanat", "l*****t");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v77, "kulum kote", "k***m k**e");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v78, "kulum", "k***m");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v79, "kote neraka", "k**e n****a");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v80, "kote", "k**e");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "kongkek", "k*****k");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v82, "konek gajus", "k***k g***s");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v83, "konek babi", "k***k b**i");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v84, "konek", "k***k");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v85, "keting", "k****g");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v86, "kepala butto", "kepala b***o");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v87, "kepala butoh", "kepala b***h");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v88, "kepala bana", "kepala b**a");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v89, "kelentit", "k******t");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v90, "jilat totok", "j***t t***k");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v91, "jilat tonton", "j***t t****n");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v92, "jilat puki", "j***t p***");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v93, "jilat nonok", "j***t n***k");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v94, "jilat lubang puki", "j***t l****g p***");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v95, "jilat jubur", "j***t j***r");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v96, "jantan sial", "j****n s**l");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v97, "jalang", "j****g");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v98, "isap kote kuda", "i**p k**e kuda");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v99, "isap kote anjing", "i**p k**e anjing");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v100, "hisap telur", "h***p t***r");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v101, "hisap konek", "h***p k***k");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v102, "haram jadah", "h***m j***h");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v103, "gatal burit", "g***l b***t");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v104, "cipap", "c***p");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v105, "cibai", "c***i");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v106, "butuh tua", "b***h tua");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v107, "butuh", "b***h");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v108, "butu buruk", "b**u buruk");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v109, "butoh pak hang", "b***h pak hang");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v110, "butoh", "b***h");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v111, "burit lebeh", "b***t l***h");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v112, "burit", "b***t");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v113, "bijik tersentil", "b***k t*******l");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v114, "bijik panjang", "b***k p*****g");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v115, "bijik kelentit", "b***k k******t");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v116, "bijik hang", "b***k h**g");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v117, "bijik gatal", "b***k g***l");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v118, "barua", "b****");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(v119, "bapakmu telur kecut", "bapakmu t***r k***t");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v120, "bapak telur kecut", "bapak t***r k***t");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v121, "bahlul", "b****l");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v122, "anak luar nikah", "anak l**r n***h");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v123, "anak haram", "anak h***m");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v124, "anak gampang", "anak g*****g");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v125, "aku henjut mak", "aku h****t mak");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[22],0>(v126, "Bapak kau telur kecut", "bapak kau t***r k***t");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(v127, "Bapak kamu telur kecut", "bapak kamu t***r k***t");
                    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(v128, "Bapak awak telur kecut", "bapak awak t***r k***t");
                    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ms(void)::sProfanityData_ms, (uint64_t)v45, 0x54uLL);
                    for (uint64_t n = 498; n != -6; n -= 6)
                      std::pair<std::string const,std::string>::~pair((uint64_t)&v45[n]);
                    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ms(void)::sProfanityData_ms, &dword_1C5C1E000);
                  }
                  *uint64_t v4 = 0;
                  v4[1] = 0;
                  v4[2] = 0;
                  return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_ms(void)::sProfanityData_ms[0], unk_1EA3D8C88, 0xAAAAAAAAAAAAAAABLL* ((unk_1EA3D8C88 - GetProfanityFilter_ms(void)::sProfanityData_ms[0]) >> 4));
                }
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v1, "ja"))
                {
                  return (uint64_t)GetProfanityFilter_ja((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "el"))
                {
                  return (uint64_t)GetProfanityFilter_el((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "it"))
                {
                  return (uint64_t)GetProfanityFilter_it((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "ca"))
                {
                  return (uint64_t)GetProfanityFilter_ca(v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "cs"))
                {
                  return (uint64_t)GetProfanityFilter_cs((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "ru"))
                {
                  return (uint64_t)GetProfanityFilter_ru((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "ro"))
                {
                  return (uint64_t)GetProfanityFilter_ro((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "pt"))
                {
                  return (uint64_t)GetProfanityFilter_pt((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "uk"))
                {
                  return (uint64_t)GetProfanityFilter_uk((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "ar"))
                {
                  return (uint64_t)GetProfanityFilter_ar((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "hr"))
                {
                  return (uint64_t)GetProfanityFilter_hr((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "hu"))
                {
                  return (uint64_t)GetProfanityFilter_hu((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "nl"))
                {
                  return GetProfanityFilter_nl();
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "nb"))
                {
                  return (uint64_t)GetProfanityFilter_nb(v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "hi"))
                {
                  return (uint64_t)GetProfanityFilter_hi((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "de"))
                {
                  return (uint64_t)GetProfanityFilter_de((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "ko"))
                {
                  return (uint64_t)GetProfanityFilter_ko((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "fi"))
                {
                  return (uint64_t)GetProfanityFilter_fi((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "id"))
                {
                  return (uint64_t)GetProfanityFilter_id(v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "fr"))
                {
                  return (uint64_t)GetProfanityFilter_fr((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en"))
                {
                  return (uint64_t)GetProfanityFilter_en((uint64_t)v4);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "th"))
                {
                  return (uint64_t)GetProfanityFilter_th((uint64_t)v4);
                }
                else
                {
                  uint64_t result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "tr");
                  if (!result) {
                    goto LABEL_368;
                  }
                  return (uint64_t)GetProfanityFilter_tr((uint64_t)v4);
                }
              }
LABEL_171:
              return (uint64_t)GetProfanityFilter_he(v4);
            }
LABEL_156:
            return (uint64_t)GetProfanityFilter_sv((uint64_t)v4);
          }
LABEL_150:
          {
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v45, "nứng", "n**g");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v46, "lồn", "l*n");
            std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_vi(void)::sProfanityData_vi, (uint64_t)v45, 2uLL);
            for (iuint64_t i = 6; ii != -6; ii -= 6)
              std::pair<std::string const,std::string>::~pair((uint64_t)&v45[ii]);
            __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_vi(void)::sProfanityData_vi, &dword_1C5C1E000);
          }
          *uint64_t v4 = 0;
          v4[1] = 0;
          v4[2] = 0;
          return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_vi(void)::sProfanityData_vi[0], unk_1EA3D8C28, 0xAAAAAAAAAAAAAAABLL* ((unk_1EA3D8C28 - GetProfanityFilter_vi(void)::sProfanityData_vi[0]) >> 4));
        }
LABEL_129:
        return (uint64_t)GetProfanityFilter_pl((uint64_t)v4);
      }
LABEL_108:
      {
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v45, "šukanie", "š*****e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v46, "čurák", "č***k");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v47, "zmrdi", "z***i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v48, "zmrda", "z***a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v49, "zmrd", "z**d");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v50, "zhovadilosti", "z**********i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v51, "zdebilieva", "z********a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v52, "zblbol", "z****l");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v53, "zasranov", "z******v");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v54, "zasrani", "z*****i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v55, "zaprdenom", "z*******m");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v56, "vysral", "v****l");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v57, "vyserte", "v*****e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v58, "vyseriem", "v******m");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v59, "vyserie", "v*****e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v60, "vyjeb", "v***b");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v61, "vydrbe", "v****e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v62, "vydrbali", "v******i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v63, "tupcov", "t****v");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v64, "tupcom", "t****m");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v65, "trtkať", "t****ť");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v66, "trtkačka", "t******a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v67, "svinstvách", "s********h");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v68, "svinstvá", "s******á");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v69, "svinstve", "s******e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v70, "svinstva", "s******a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v71, "svinstiev", "s*******v");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v72, "sviniar", "s*****r");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v73, "superblbec", "s********c");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v74, "suky", "s**y");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v75, "suka", "s**a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v76, "sráčmi", "s****i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v77, "srať", "s**ť");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v78, "sračkách", "s******h");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v79, "sračky", "s****y");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v80, "sračku", "s****u");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v81, "sračiek", "s*****k");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v82, "sranie", "s****e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v83, "srací", "s***í");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v84, "sprostú", "s*****ú");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v85, "sprostí", "s*****í");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v86, "sprostého", "s*******o");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v87, "sprostou", "s******u");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v88, "sprostota", "s*******a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v89, "sprostosti", "s********i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v90, "sprosto", "s*****o");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v91, "sprostejšie", "s*********e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v92, "sprostej", "s******j");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "sproste", "s*****e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v94, "skurveny", "s******y");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "skurvene", "s******e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v96, "skurvena", "s******a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v97, "seriem", "s****m");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v98, "serete", "s****e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v99, "serem", "s***m");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v100, "rozjebal", "r******l");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v101, "rozjeb", "r****b");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v102, "riť", "r*ť");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v103, "ritiek", "r****k");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v104, "prďúsov", "p*****v");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v105, "prďúsi", "p****i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v106, "prúseroch", "p*******h");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v107, "prúser", "p****r");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "pruser", "p****r");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v109, "priblbo", "p*****o");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v110, "priblblých", "p********h");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v111, "priblblé", "p******é");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v112, "presrali", "p******i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v113, "presral", "p*****l");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v114, "posrať", "p****ť");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v115, "posralo", "p*****o");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v116, "posrala", "p*****a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v117, "poserieš", "p******š");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v118, "poser", "p***r");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v119, "pojeb", "p***b");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v120, "pičovina", "p******a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v121, "pičný", "p***ý");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v122, "pičisko", "p*****o");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v123, "piča", "p**a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v124, "osraným", "o*****m");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v125, "ojeb", "o**b");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v126, "odrbávať", "o******ť");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v127, "odrbáva", "o*****a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v128, "odrbe", "o***e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v129, "odrbať", "o****ť");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v130, "odrbal", "o****l");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v131, "odjeb", "o***b");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v132, "nesralo", "n*****o");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v133, "nesrali", "n*****i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v134, "neserú", "n****ú");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v135, "neser", "n***r");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v136, "neposer", "n*****r");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v137, "neodrbeš", "n******š");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v138, "neodrbe", "n*****e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v139, "nenasral", "n******l");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v140, "nekurvím", "n******m");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v141, "negrov", "n****v");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v142, "negrom", "n****m");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v143, "nasrať", "n****ť");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v144, "nasratý", "n*****ý");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v145, "nasraté", "n*****é");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v146, "nasratosti", "n********i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v147, "nasraný", "n*****ý");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v148, "nasrané", "n*****é");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v149, "nasralo", "n*****o");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v150, "nasrali", "n*****i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v151, "nasral", "n****l");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v152, "nasieral", "n******l");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v153, "naserie", "n*****e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v154, "naprd", "n***d");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v155, "nahovno", "n*****o");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v156, "mrdnutím", "m******m");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v157, "lesieb", "l****b");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v158, "lesba", "l***a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v159, "kurvy", "k***y");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v160, "kurva", "k***a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v161, "kurevsky", "k******y");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v162, "kravín", "k****n");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v163, "kraviny", "k*****y");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v164, "kokotsky", "k******y");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v165, "kokotiny", "k******y");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v166, "kokotina", "k******a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v167, "kokot", "k***t");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v168, "jebák", "j***k");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v169, "jebo", "j**o");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v170, "jebnutom", "j******m");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v171, "jeblina", "j*****a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v172, "jebe", "j**e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v173, "jebať", "j***ť");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v174, "jebačka", "j*****a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v175, "jebal", "j***l");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v176, "jeb", "j*b");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v177, "hovná", "h***á");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v178, "hovnová", "h*****á");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v179, "hovno", "h***o");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v180, "hovna", "h***a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v181, "hovienko", "h******o");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v182, "hovadinku", "h*******u");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v183, "hovadine", "h******e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v184, "hovadina", "h******a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v185, "hajzlíky", "h******y");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v186, "hajzlík", "h*****k");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v187, "hajzlom", "h*****m");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v188, "hajzli", "h****i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v189, "hajzle", "h****e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v190, "hajzel", "h****l");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v191, "drbnúť", "d****ť");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v192, "dodrbávanie", "d*********e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v193, "dodrbe", "d****e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v194, "dodrbal", "d*****l");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v195, "dilino", "d****o");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v196, "dilinko", "d*****o");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v197, "dementovi", "d*******i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v198, "dementov", "d******v");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v199, "dementný", "d******ý");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v200, "dementne", "d******e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v201, "dementi", "d*****i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v202, "dementa", "d*****a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v203, "degeši", "d****i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v204, "degeš", "d***š");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v205, "debilov", "d*****v");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v206, "debilom", "d*****m");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v207, "debilný", "d*****ý");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v208, "debilné", "d*****é");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v209, "debilne", "d*****e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v210, "debilku", "d*****u");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v211, "debilkov", "d******v");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v212, "debilko", "d*****o");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v213, "debilitou", "d*******u");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v214, "debili", "d****i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v215, "debil", "d***l");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v216, "chujovina", "c*******a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v217, "chujovi", "c*****i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v218, "chuji", "c***i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v219, "buzna", "b***a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v220, "buzerantovi", "b*********i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v221, "buzerantov", "b********v");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v222, "buzerantom", "b********m");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v223, "buzerant", "b******t");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v224, "blbými", "b****i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v225, "blbý", "b**ý");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v226, "blbú", "b**ú");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v227, "blbí", "b**í");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v228, "blbé", "b**é");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v229, "blbosťou", "b******u");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v230, "blbom", "b***m");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v231, "blbne", "b***e");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v232, "blbiny", "b****y");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v233, "blbej", "b***j");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v234, "blbcoch", "b*****h");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v235, "blbcami", "b*****i");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v236, "bastardoch", "b********h");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v237, "bastarda", "b******a");
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v238, "bastard", "b*****d");
        std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_sk(void)::sProfanityData_sk, (uint64_t)v45, 0xC2uLL);
        for (juint64_t j = 0; jj != -1164; jj -= 6)
          std::pair<std::string const,std::string>::~pair((uint64_t)&v238[jj]);
        __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_sk(void)::sProfanityData_sk, &dword_1C5C1E000);
      }
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_sk(void)::sProfanityData_sk[0], unk_1EA3D8BE8, 0xAAAAAAAAAAAAAAABLL* ((unk_1EA3D8BE8 - GetProfanityFilter_sk(void)::sProfanityData_sk[0]) >> 4));
    case 3:
      if (**(_WORD **)v1 == 30073 && *(unsigned char *)(*(void *)v1 + 2) == 101) {
        goto LABEL_98;
      }
      break;
    case 5:
      uint64_t v13 = *(int **)v1;
      if (**(_DWORD **)v1 == 1230992489 && *(unsigned char *)(*(void *)v1 + 4) == 84) {
        goto LABEL_110;
      }
      if (*v13 == 1348433008 && *((unsigned char *)v13 + 4) == 84) {
        goto LABEL_132;
      }
      if (*v13 == 1113551984 && *((unsigned char *)v13 + 4) == 82) {
        goto LABEL_152;
      }
      int v17 = *v13;
      int v18 = *((unsigned __int8 *)v13 + 4);
      if (v17 == 1214212218 && v18 == 75) {
        goto LABEL_159;
      }
      if ((v5 & 0x80) == 0)
      {
        if (v5 != 5) {
          goto LABEL_57;
        }
LABEL_21:
        if (*(_DWORD *)v1 != 1130326138 || *(unsigned char *)(v1 + 4) != 78)
        {
          if (*(_DWORD *)v1 != 1415538810 || *(unsigned char *)(v1 + 4) != 87) {
            goto LABEL_88;
          }
LABEL_154:
          {
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v45, "shit", "s**t");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v46, "motherfucking", "m*********ing");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v47, "motherfucker", "m*********er");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v48, "motherfuck", "m********k");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v49, "fucks", "f**ks");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v50, "fucking", "f***ing");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v51, "fuckin", "f****n");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v52, "fuck", "f**k");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v53, "bullshit", "b******t");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v54, "blowjob", "b*****b");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v55, "bitch", "b***h");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v56, "asshole", "a*****e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v57, "龜公", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v58, "龜兒子", "龜**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v59, "黑鬼", "黑*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v60, "鬼子", "*子");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v61, "駛恁娘", "駛**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v62, "馬的", "*的");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v63, "顏射", "顏*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v64, "韓狗", "韓*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v65, "靠腰", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v66, "靠背", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v67, "靠夭", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v68, "靠卑", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v69, "靠北", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v70, "雞歪", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v71, "雞掰", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v72, "雞巴", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v73, "雞八", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v74, "趕羚羊", "趕**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v75, "賽羚羊", "賽**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v76, "賤人", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v77, "該死", "該*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v78, "草枝擺", "草**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v79, "臭雞掰", "臭**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v80, "肚爛", "肚*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v81, "老雞排", "老**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v82, "老目", "老*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v83, "老母", "老*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v84, "老木", "老*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v85, "破麻", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v86, "白鬼", "白*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v87, "畜生", "*生");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v88, "王八蛋", "王**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v89, "王八", "王*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v90, "狗屎", "狗*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v91, "狗屁", "狗*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v92, "狗娘", "狗*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v93, "混蛋", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v94, "混帳", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v95, "洋鬼子", "洋**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v96, "母狗", "*狗");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v97, "死泡菜", "**菜");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v98, "機掰", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v99, "機巴", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v100, "機八", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v101, "日本鬼子", "日本**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v102, "操俗揦", "操**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[7],0>(v103, "操你媽的B", "操***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v104, "操你", "*你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v105, "打飛機", "打**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v106, "打炮", "打*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v107, "打泡", "打*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v108, "打手槍", "打**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v109, "我靠", "我*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v110, "我操", "我*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v111, "懶趴", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v112, "懶叫", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v113, "恁娘卡好", "恁***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v114, "幹林", "*林");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v115, "幹恁老母", "幹***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v116, "幹恁老師", "幹***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v117, "幹恁娘", "幹**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v118, "幹你老師", "幹***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v119, "幹你娘", "幹**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v120, "幹你", "*你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v121, "幹他", "*他");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v122, "屌", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v123, "屄", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v124, "屁眼", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v125, "尻", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v126, "射精", "射*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v127, "媽的", "*的");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v128, "婊子", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v129, "嘰歪", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v130, "唧唧歪歪", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v131, "哭爸", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v132, "哭夭", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v133, "吹簫", "吹*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v134, "吞精", "吞*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[2],0>(v135, "吃屎", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[2],0>(v136, "吃屌", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v137, "吃大便", "吃**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v138, "口爆", "口*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v139, "口交", "口*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v140, "去死", "去*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v141, "去你的", "去**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v142, "北嘛", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v143, "北七", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v144, "內射", "內*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v145, "你老母", "你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v146, "他馬的", "他*的");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v147, "他祖宗", "他**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v148, "他媽的", "他**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v149, "他媽的", "他*的");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v150, "他姥姥", "他**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v151, "他奶奶的", "他***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v152, "他奶奶", "他**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v153, "下賤", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v154, "下地獄", "下**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v155, "三小", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v156, "㩕老師", "*老師");
            std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_zh_TW(void)::sProfanityData_zh_TW, (uint64_t)v45, 0x70uLL);
            for (kuint64_t k = 0; kk != -672; kk -= 6)
              std::pair<std::string const,std::string>::~pair((uint64_t)&v156[kk]);
            __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_zh_TW(void)::sProfanityData_zh_TW, &dword_1C5C1E000);
          }
          *uint64_t v4 = 0;
          v4[1] = 0;
          v4[2] = 0;
          return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_zh_TW(void)::sProfanityData_zh_TW[0], unk_1EA3D9068, 0xAAAAAAAAAAAAAAABLL* ((unk_1EA3D9068 - GetProfanityFilter_zh_TW(void)::sProfanityData_zh_TW[0]) >> 4));
        }
LABEL_148:
        {
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v45, "鸡巴蛋", "***");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v46, "鸡巴", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v47, "鸡巴", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v48, "骚逼", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v49, "阴道", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v50, "阴道", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v51, "阴茎", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v52, "阴茎", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v53, "阳萎", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v54, "阳具", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(v55, "长成个逼样", "*****");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v56, "迷奸", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v57, "轮奸", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v58, "贱B", "*");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v59, "蠢货", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v60, "臭婊子", "***");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v61, "肥尻", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v62, "肛交", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v63, "肏", "*");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v64, "肉洞", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v65, "肉棒", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v66, "肉棍", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v67, "粪便", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v68, "秃屌", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v69, "狗日的", "***");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v70, "狗娘养的", "狗***");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v71, "狗交", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v72, "狗B", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v73, "爆菊花", "***");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v74, "混蛋", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(v75, "滚你娘的逼", "*****");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v76, "深喉", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(v77, "日你龟儿子", "*****");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v78, "日你妈的", "***的");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v79, "日你妈", "***");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v80, "日你", "*你");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v81, "操逼", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v82, "操死", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v83, "操我", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v84, "操你屁眼", "****");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[7],0>(v85, "操你娘老鸡巴", "******");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v86, "操你娘", "***");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v87, "操你姥姥", "****");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v88, "操你妹", "***");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(v89, "操你妈的逼", "*****");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[8],0>(v90, "操你妈的大鸡巴", "*******");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[5],0>(v91, "操你妈的B", "****");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v92, "操你妈", "***");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v93, "操你大爷", "****");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v94, "操你", "*你");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v95, "操他妈", "***");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v96, "操B", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v97, "操", "*");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v98, "插死你", "***");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v99, "插我", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v100, "插她", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v101, "插你", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v102, "插他", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v103, "捅我", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v104, "捅你", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v105, "我靠你老娘", "我****");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v106, "我靠", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v107, "我日", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v108, "我操", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v109, "性奴", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v110, "幼交", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v111, "干你娘的", "****");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v112, "干你妈", "***");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v113, "屌你老妈", "****");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v114, "屌", "*");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v115, "屄缝", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v116, "屄", "*");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v117, "屁眼", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v118, "射精", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v119, "嫩逼", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v120, "婊子", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v121, "姦童", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v122, "妓女", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v123, "奸虐", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v124, "奸尸", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v125, "吮吸阴茎", "****");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v126, "后背体位", "****");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[8],0>(v127, "叼你妈的小屁屁", "*******");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v128, "口交", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v129, "勃起", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v130, "兽交", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v131, "傻逼", "傻*");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v132, "傻屄", "傻*");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v133, "傻B", "傻*");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v134, "你妈逼", "你**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v135, "你妈的逼", "你***");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v136, "你妈的屄", "你***");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v137, "他媽", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v138, "他妈的", "***");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v139, "他妈", "**");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v140, "乳房性交", "****");
          std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_zh_CN(void)::sProfanityData_zh_CN, (uint64_t)v45, 0x60uLL);
          for (muint64_t m = 0; mm != -576; mm -= 6)
            std::pair<std::string const,std::string>::~pair((uint64_t)&v140[mm]);
          __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_zh_CN(void)::sProfanityData_zh_CN, &dword_1C5C1E000);
        }
        *uint64_t v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
        return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_zh_CN(void)::sProfanityData_zh_CN[0], unk_1EA3D9048, 0xAAAAAAAAAAAAAAABLL* ((unk_1EA3D9048 - GetProfanityFilter_zh_CN(void)::sProfanityData_zh_CN[0]) >> 4));
      }
      break;
  }
  if (*(void *)(v1 + 8) == 5 && **(_DWORD **)v1 == 1130326138 && *(unsigned char *)(*(void *)v1 + 4) == 78) {
    goto LABEL_148;
  }
  if (*(void *)(v1 + 8) != 5) {
    goto LABEL_116;
  }
  if (**(_DWORD **)v1 == 1415538810 && *(unsigned char *)(*(void *)v1 + 4) == 87) {
    goto LABEL_154;
  }
  if ((v5 & 0x80) != 0)
  {
LABEL_116:
    if (*(void *)(v1 + 8) != 5
      || (**(_DWORD **)v1 == 1096774241 ? (BOOL v30 = *(unsigned char *)(*(void *)v1 + 4) == 69) : (BOOL v30 = 0), !v30))
    {
      if (*(void *)(v1 + 8) == 5)
      {
        if (**(_DWORD **)v1 == 1113549934 && *(unsigned char *)(*(void *)v1 + 4) == 69) {
          goto LABEL_169;
        }
        if ((v5 & 0x80) == 0)
        {
          uint64_t v28 = v1;
          if (v5 != 5) {
            goto LABEL_57;
          }
          goto LABEL_136;
        }
      }
      if (*(void *)(v1 + 8) != 5) {
        goto LABEL_57;
      }
      uint64_t v28 = *(void *)v1;
      goto LABEL_136;
    }
LABEL_162:
    return (uint64_t)GetProfanityFilter_ar_AE((uint64_t)v4);
  }
  if (v5 != 5) {
    goto LABEL_57;
  }
LABEL_88:
  if (*(_DWORD *)v1 == 1096774241 && *(unsigned char *)(v1 + 4) == 69) {
    goto LABEL_162;
  }
  BOOL v27 = *(_DWORD *)v1 == 1113549934 && *(unsigned char *)(v1 + 4) == 69;
  uint64_t v28 = v1;
  if (v27)
  {
LABEL_169:
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v45, "zweetreten", "z********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v46, "zweetreetjes", "z**********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v47, "zweetreetje", "z*********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v48, "zweetreet", "z*******t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v49, "zweefteven", "z********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v50, "zweefteefjes", "z**********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v51, "zweefteefje", "z*********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v52, "zweefteef", "z*******f");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v53, "zuigzeugjes", "z*********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v54, "zuigzeugje", "z********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v55, "zuigzeugen", "z********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v56, "zuigzeug", "z******g");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v57, "zeikwijven", "z********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v58, "zeikwijf", "z******f");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v59, "zeiker", "z****r");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v60, "wippen", "w****n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v61, "wipkippetjes", "w**********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v62, "wipkippetje", "w*********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v63, "wipkippen", "w*******n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v64, "wipkip", "w****p");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v65, "websletten", "w********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v66, "websletjes", "w********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v67, "websletje", "w*******e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v68, "webslet", "w*****t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v69, "vortzakskes", "v**********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v70, "vortzakske", "v*********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v71, "vortzakken", "v********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v72, "vortzakjes", "v********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v73, "vortzakje", "v*******e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v74, "vortzak", "v*****k");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v75, "turbotrutten", "t**********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v76, "turbotrutjes", "t**********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v77, "turbotrutje", "t*********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v78, "turbotrut", "t*******t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v79, "turboteven", "t********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v80, "turboteefjes", "t**********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v81, "turboteefje", "t*********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v82, "turboteef", "t*******f");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v83, "turbokutten", "t*********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v84, "turbokutjes", "t*********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v85, "turbokutje", "t********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v86, "turbokut", "t******t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v87, "torenpoepsters", "t************s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v88, "torenpoepster", "t***********r");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v89, "torenpoepers", "t**********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v90, "torenpoeper", "t*********r");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v91, "tieten", "t****n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v92, "teven", "t***n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v93, "tettenkoppen", "t**********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v94, "tettenkopjes", "t**********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v95, "tettenkopje", "t*********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v96, "tettenkop", "t*******p");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v97, "tetten", "t****n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v98, "tettekoppen", "t*********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v99, "tettekopjes", "t*********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v100, "tettekopje", "t********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v101, "tettekop", "t******p");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v102, "tetjes", "t****s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v103, "tetje", "t***e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v104, "tet", "t*t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v105, "teringtubby’s", "t***********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v106, "teringtubby", "t*********y");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v107, "teringtubbietjes", "t**************s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v108, "teringtubbietje", "t*************e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v109, "tentsletten", "t*********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v110, "tentsletjes", "t*********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v111, "tentsletje", "t********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v112, "tentslet", "t******t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v113, "takkewijven", "t*********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v114, "strandjanetten", "s************n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v115, "strandjanetjes", "s************s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v116, "strandjanetje", "s***********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v117, "strandjanet", "s*********t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v118, "sopkutten", "s*******n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v119, "sopkutjes", "s*******s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v120, "sopkutje", "s******e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v121, "sopkut", "s****t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v122, "sloeries", "s******s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v123, "slobberkutten", "s***********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v124, "slobberkutjes", "s***********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v125, "slobberkutje", "s**********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v126, "slobberkut", "s********t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v127, "schimmelfoefjes", "s*************s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v128, "schimmelfoefje", "s************e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v129, "schimmelfoefen", "s************n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v130, "schimmelfoef", "s**********f");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v131, "schijtluizen", "s**********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v132, "schijtluis", "s********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v133, "schijterij", "s********j");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v134, "scheefpoepers", "s***********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v135, "scheefpoeperij", "s************j");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v136, "scheefpoeper", "s**********r");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v137, "scheefpoepen", "s**********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v138, "scheefgepoepte", "s************e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v139, "scheefgepoept", "s***********t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v140, "scheefgeneukte", "s************e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v141, "scheefgeneukt", "s***********t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v142, "rotzakskes", "r********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v143, "rotzakske", "r*******e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v144, "rotzakken", "r*******n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v145, "rotzakjes", "r*******s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v146, "rotzakje", "r*****e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v147, "rotzak", "r****k");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v148, "rondpoepen", "r********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v149, "rondgepoept", "r*********t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v150, "reteskevertjes", "r***********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v151, "retekevertje", "r**********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v152, "retekevers", "r********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v153, "retekever", "r*******r");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v154, "reetkevertjes", "r***********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v155, "reetkevertje", "r**********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v156, "reetkevers", "r********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v157, "reetkever", "r*******r");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v158, "puddinglulletjes", "p**************s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v159, "puddinglulletje", "p*************e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v160, "puddinglullen", "p***********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v161, "puddinglul", "p********l");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v162, "pruttelkutten", "p***********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v163, "pruttelkutjes", "p***********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v164, "pruttelkutje", "p**********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v165, "pruttelkut", "p********t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v166, "ponylulletjes", "p***********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v167, "ponylulletje", "p**********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v168, "ponylullen", "p********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v169, "ponylul", "p*****l");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v170, "pijpmuiltjes", "p**********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v171, "pijpmuiltje", "p*********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v172, "pijpmuilen", "p********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v173, "pijpmuil", "p******l");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v174, "mierenneukertjes", "m**************s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v175, "mierenneukertje", "m*************e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v176, "mierenneuker", "m**********r");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v177, "miereneukers", "m***********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v178, "makakken", "m******n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v179, "makakjes", "m******s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v180, "makakje", "m*****e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v181, "makak", "m***k");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v182, "loezen", "l****n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v183, "kuttenkoppen", "k*********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v184, "kuttenkopjes", "k*********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v185, "kuttenkopje", "k*********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v186, "kuttenkop", "k*******p");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v187, "kuttekoppen", "k********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v188, "kuttekopjes", "k*********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v189, "kuttekopje", "k********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v190, "kuttekop", "k******p");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v191, "kutkopjes", "k*******s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v192, "kutkopje", "k******e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v193, "kutkop", "k****p");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v194, "klotewijven", "k*********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v195, "klotewijf", "k*******f");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v196, "kloteventjes", "k**********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v197, "kloteventje", "k*********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v198, "kloteventen", "k*********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v199, "klotevent", "k*******t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v200, "kinderporno", "k*********o");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(v201, "kakmadammetjes", "k*************s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v202, "kakmadammetje", "k***********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v203, "kakmadammen", "k*********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v204, "kakmadammekes", "k***********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v205, "kakmadammeke", "k**********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v206, "kakmadam", "k******m");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v207, "kakkers", "k*****s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v208, "kakker", "k****r");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v209, "hoererij", "h******j");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v210, "hoererige", "h*******e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v211, "hoererig", "h******g");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v212, "gepoepte", "g******e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v213, "gepoept", "g*****t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v214, "gepoep", "g****p");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v215, "foorwijven", "f********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v216, "foorwijf", "f******f");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v217, "foefkoppen", "f********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v218, "foefkop", "f****p");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v219, "foefen", "f****n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v220, "foef", "f**f");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v221, "droogneukertjes", "d*************s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v222, "droogneukertje", "d************e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v223, "droogneukers", "d**********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v224, "droogneukerij", "d***********j");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v225, "droogneuker", "d*********r");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v226, "droogneuken", "d*********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v227, "droogkloten", "d*********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v228, "droogkloot", "d********t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v229, "drooggeneukt", "d**********t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v230, "darmtoeristjes", "d************s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v231, "darmtoeristje", "d***********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v232, "darmtoeristen", "d***********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v233, "darmtoerist", "d*********t");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v234, "bospoepers", "b********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v235, "bospoeperkes", "b**********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v236, "bospoeperke", "b*********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v237, "bospoeper", "b*******r");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v238, "boskakkertjes", "b***********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v239, "boskakkertje", "b**********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v240, "boskakkers", "b********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v241, "boskakker", "b*******r");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v242, "boshoertjes", "b*********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v243, "boshoertje", "b********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v244, "boshoeren", "b*******n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v245, "boshoer", "b*****r");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v246, "befkonijntjes", "b***********s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v247, "befkonijntje", "b**********e");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v248, "befkonijnen", "b*********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v249, "befkonijn", "b*******n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v250, "assenpoepsters", "a************s");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v251, "assenpoepster", "a***********r");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v252, "aarsgeweien", "a*********n");
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v253, "aarsgewei", "a*******i");
      std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_nl_BE(void)::sProfanityData_nl_BE, (uint64_t)v45, 0xD1uLL);
      for (nuint64_t n = 0; nn != -1254; nn -= 6)
        std::pair<std::string const,std::string>::~pair((uint64_t)&v253[nn]);
      __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_nl_BE(void)::sProfanityData_nl_BE, &dword_1C5C1E000);
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_nl_BE(void)::sProfanityData_nl_BE[0], unk_1EA3D90A8, 0xAAAAAAAAAAAAAAABLL* ((unk_1EA3D90A8 - GetProfanityFilter_nl_BE(void)::sProfanityData_nl_BE[0]) >> 4));
  }
LABEL_136:
  int v32 = *(_DWORD *)v28;
  int v33 = *(unsigned __int8 *)(v28 + 4);
  if (v32 != 1314876526 || v33 != 76) {
    goto LABEL_57;
  }
  return (uint64_t)GetProfanityFilter_nl_NL(v4);
}

void sub_1C5E606F4(_Unwind_Exception *a1)
{
  for (uint64_t i = 3984; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60A64(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60AB8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60B0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60B60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60BB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60C08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60C5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60CB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60D04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60D58(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60DAC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60E00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60E54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60EA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60EFC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60F50(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60FA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E60FF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E6104C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E610A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E610F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    std::vector<siri::dialogengine::DatabaseField>::__vallocate[abi:ne180100](a1, a3);
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>(v4, a2, a2 + 48 * a3, a1[1]);
  }
  return a1;
}

void sub_1C5E61190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_pl(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  v418[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v4, "zjebie", "z****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v5, "zjebany", "z*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v6, "zjeb", "z**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v7, "zesrasz", "z*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v8, "zesrali", "z*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v9, "zesrają", "z*****ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v10, "zesrały", "z*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v11, "zesrało", "z*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v12, "zesrałbyś", "z*******ś");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v13, "zesrała", "z*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v14, "zesrał", "z****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v15, "zasranymi", "z*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v16, "zasranych", "z*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v17, "zasrany", "z*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "zasrani", "z*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v19, "zasranej", "z******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v20, "zasranego", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v21, "zasrane", "z*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v22, "zasraną", "z*****ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v23, "zasrańcu", "z******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v24, "zasrańcom", "z*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v25, "zasrańce", "z******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v26, "zasrańca", "z******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v27, "zasra", "z***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v28, "zapierniczać", "z**********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v29, "zapierdzielaj", "z***********j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v30, "zapierdzielać", "z***********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v31, "zapierdziel", "z*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v32, "zapierdoli", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v33, "zapierdol", "z*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v34, "zapierdalaj", "z*********j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v35, "zapierdala", "z********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v36, "zapieprzasz", "z*********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v37, "zapieprzają", "z*********ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v38, "zapieprzać", "z********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v39, "zapieprza", "z*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v40, "zajebistym", "z********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v41, "zajebisty", "z*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v42, "zajebistość", "z*********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v43, "zajebistego", "z*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v44, "zajebiste", "z*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v45, "zajebista", "z*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v46, "zajebiesz", "z*******z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v47, "zajebiście", "z********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v48, "zajebałem", "z*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v49, "zajebał", "z*****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "zajebać", "z*****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v51, "zajeb", "z***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v52, "wysrać", "w****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v53, "wyruchana", "w*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v54, "wyrucham", "w******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v55, "wyruchali", "w*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v56, "wyruchałby", "w********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v57, "wyruchał", "w******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v58, "wyrucha", "w*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v59, "wypierdzielone", "w************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v60, "wypierdolona", "w**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v61, "wypierdolili", "w**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v62, "wypierdolił", "w*********ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v63, "wypierdol", "w*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v64, "wypierdalania", "w***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v65, "wypierdalam", "w*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v66, "wypierdalaj", "w*********j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v67, "wypierdalać", "w*********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v68, "wypieprzyć", "w********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v69, "wypieprzeniu", "w**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "wypieprza", "w*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v71, "wyjebane", "w******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "wyjebać", "w*****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "wydymany", "w******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v74, "wydymaniu", "w*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v75, "wydymanie", "w*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v76, "wydymana", "w******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v77, "wydymać", "w*****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v78, "wpiernicz", "w*******z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v79, "wpierdzieli", "w*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v80, "wpierdziela", "w*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v81, "wpierdol", "w******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v82, "wpierdalają", "w*********ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v83, "wpierdala", "w*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v84, "wpieprzył", "w*******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v85, "wpieprzyć", "w*******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v86, "wpieprzają", "w********ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v87, "wkurwiony", "w*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v88, "wkurwionego", "w*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v89, "wkurwili", "w******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v90, "wkurwienie", "w********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v91, "wkurwiam", "w******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v92, "wkurwiali", "w*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v93, "wkurwiającego", "w***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v94, "wkurwiacie", "w********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v95, "wkurwia", "w*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v96, "wkurwiłem", "w*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v97, "wkurwić", "w*****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v98, "wkurw", "w***w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "wjebany", "w*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "wjebał", "w****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v101, "upierdolony", "u*********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v102, "szczy", "s***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v103, "szczochach", "s********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v104, "szczochów", "s*******w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v105, "szczanie", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v106, "szczam", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v107, "szczała", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v108, "szczał", "s****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v109, "szczać", "s****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v110, "szcza", "s***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v111, "szczące", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v112, "szczą", "s***ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v113, "srasz", "s***z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v114, "sraniem", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v115, "sranie", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v116, "srania", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v117, "sranego", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v118, "sram", "s**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v119, "srali", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v120, "sraki", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v121, "srakę", "s***ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v122, "srak", "s**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v123, "srajtaśma", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v124, "srających", "s*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v125, "srający", "s*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v126, "srające", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v127, "srają", "s***ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v128, "sraczy", "s****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v129, "sracze", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v130, "sraczce", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v131, "sraczach", "s******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v132, "sracza", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v133, "sracz", "s***z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v134, "sracie", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v135, "srał", "s**ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v136, "srać", "s**ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v137, "sra", "s*a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v138, "spierdzielaj", "s**********j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v139, "spierdział", "s********ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v140, "spierdol", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v141, "spierdalaliście", "s*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v142, "spierdalaj", "s********j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v143, "spierdala", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v144, "spieprzaj", "s*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v145, "skurwysyny", "s********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v146, "skurwysynu", "s********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v147, "skurwysynom", "s*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v148, "skurwysynie", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v149, "skurwysynem", "s*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v150, "skurwysynami", "s**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v151, "skurwysyna", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v152, "skurwysynów", "s*********w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v153, "skurwysyn", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v154, "skurwieni", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v155, "skurwił", "s*****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v156, "skurwi", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v157, "ruchasz", "r*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v158, "ruchanie", "r******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v159, "ruchania", "r******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v160, "rucham", "r****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v161, "ruchali", "r*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v162, "ruchacz", "r*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v163, "ruchało", "r*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v164, "ruchałem", "r******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v165, "ruchać", "r****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v166, "rucha", "r***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v167, "rozpierdolę", "r*********ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v168, "rozpieprzyli", "r**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v169, "rozpieprzy", "r********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v170, "rozjebania", "r********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v171, "rozjebał", "r******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v172, "rozdupcył", "r*******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v173, "przypierdolił", "p***********ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v174, "przypierdolić", "p***********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v175, "przypierdol", "p*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v176, "przypierdalać", "p***********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v177, "przypieprzajmy", "p************y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v178, "przyjebali", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v179, "przesrany", "p*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v180, "przesrane", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v181, "przejebane", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v182, "przejebać", "p*******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v183, "przejeb", "p*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v184, "posrywający", "p*********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v185, "posrasz", "p*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v186, "posranych", "p*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v187, "posrany", "p*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v188, "posraniec", "p*******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v189, "posrani", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v190, "posranego", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v191, "posrana", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v192, "posraną", "p*****ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v193, "posrali", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v194, "posracie", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v195, "posrańcami", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v196, "poruchamy", "p*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v197, "poruchał", "p******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v198, "popierdzielone", "p************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v199, "popierdzielania", "p*************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v200, "popierdywanie", "p***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v201, "popierdolonych", "p************h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v202, "popierdolone", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v203, "popierdolilo", "p**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v204, "pojeby", "p****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v205, "pojebie", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v206, "pojebanym", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v207, "pojebany", "p******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v208, "pojebane", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v209, "pojebańcy", "p*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v210, "pojebańcu", "p*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v211, "pojebało", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v212, "pojeba", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v213, "pojebów", "p*****w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v214, "pojeb", "p***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v215, "podupczą", "p******ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v216, "podsrywaniu", "p*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v217, "podpierdolono", "p***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v218, "podpierdolili", "p***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v219, "pizgać", "p****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v220, "pizga", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v221, "pizdy", "p***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v222, "pizdu", "p***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v223, "pizda", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v224, "pizdę", "p***ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v225, "pizd", "p**d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v226, "pindy", "p***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v227, "pindo", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v228, "pinda", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v229, "pindą", "p***ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v230, "pierdziut", "p*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v231, "pierdziucha", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v232, "pierdzistołek", "p***********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v233, "pierdzielone", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v234, "pierdzielić", "p*********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v235, "pierdzieli", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v236, "pierdzielenie", "p***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v237, "pierdzielenia", "p***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v238, "pierdziele", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v239, "pierdziela", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v240, "pierdzielę", "p********ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v241, "pierdziel", "p*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v242, "pierdzieć", "p*******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v243, "pierdzie", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v244, "pierdziała", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v245, "pierdział", "p*******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v246, "pierdzi", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v247, "pierdzeniu", "p********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v248, "pierdzenie", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v249, "pierdzenia", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v250, "pierdzących", "p*********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v251, "pierdzące", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v252, "pierdzą", "p*****ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v253, "pierdyknął", "p********ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v254, "pierdykam", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v255, "pierdu", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v256, "pierdolonym", "p*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v257, "pierdolone", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v258, "pierdolnie", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v259, "pierdolnięty", "p**********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v260, "pierdolnięte", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v261, "pierdolnięta", "p**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v262, "pierdolnięci", "p**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v263, "pierdolił", "p*******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v264, "pierdolić", "p*******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v265, "pierdoli", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v266, "pierdolenie", "p*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v267, "pierdolenia", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v268, "pierdolca", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v269, "pierdolę", "p******ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v270, "pierdolą", "p******ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v271, "pieprzyła", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v272, "pieprzony", "p*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v273, "pieprznięta", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v274, "pieprzenie", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v275, "pieprzę", "p*****ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v276, "piczki", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v277, "piczkę", "p****ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v278, "piździec", "p******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v279, "piździ", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v280, "osranej", "o*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v281, "osrać", "o***ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v282, "opierdzielić", "o**********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v283, "opierdalanie", "o**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v284, "opierdalania", "o**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v285, "opierdalajcie", "o***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v286, "opierdala", "o*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v287, "opieprzył", "o*******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v288, "opieprzy", "o******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v289, "opieprzasz", "o********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v290, "opieprzanie", "o*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v291, "opieprzają", "o********ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v292, "opieprzą", "o******ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v293, "odpierdzielony", "o************y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v294, "odpierdoli", "o********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v295, "odpierdalasz", "o**********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v296, "odpierdala", "o********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v297, "odpieprzy", "o*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v298, "odpieprzcie", "o*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v299, "obsrywać", "o******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v300, "obsrany", "o*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v301, "obsrane", "o*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v302, "obsrana", "o*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v303, "obsrały", "o*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v304, "obsrała", "o*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v305, "nieskurwienie", "n***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v306, "nasrane", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v307, "nasrał", "n****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v308, "nasra", "n***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v309, "napierdzielanie", "n*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v310, "napierdalacie", "n***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v311, "napierdalać", "n*********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v312, "napierdala", "n********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v313, "najebany", "n******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v314, "kurwy", "k***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v315, "kurwował", "k******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v316, "kurwom", "k****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v317, "kurwo", "k***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v318, "kurwiszony", "k********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v319, "kurwiszonie", "k*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v320, "kurwiszonami", "k**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v321, "kurwiszon", "k*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v322, "kurwie", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v323, "kurwidole", "k*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v324, "kurwidołek", "k********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v325, "kurwidół", "k******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v326, "kurwi", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v327, "kurwami", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v328, "kurwach", "k*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v329, "kurwa", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v330, "kurwę", "k***ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v331, "kurwą", "k***ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v332, "kurw", "k**w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v333, "kurewstwie", "k********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v334, "kurewsko", "k******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v335, "kurewska", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v336, "kurewka", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v337, "kurew", "k***w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v338, "jebnij", "j****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v339, "jebnięty", "j******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v340, "jebnąłby", "j******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v341, "jebnąć", "j****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v342, "jebliwa", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v343, "jebie", "j***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v344, "jebany", "j****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v345, "jebania", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v346, "jebani", "j****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v347, "jebanego", "j******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v348, "jebane", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v349, "jebana", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v350, "jebaną", "j****ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v351, "jebaki", "j****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v352, "jebaka", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v353, "jebak", "j***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v354, "jebałem", "j*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v355, "jebał", "j***ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v356, "jebać", "j***ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v357, "jeba", "j**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v358, "jebło", "j***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v359, "jeb", "j*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v360, "hwdp", "h**p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v361, "huje", "h**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v362, "gównozjady", "g********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v363, "gównozjadem", "g*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v364, "gównojady", "g*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v365, "gówno", "g***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v366, "gównie", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v367, "gównianym", "g*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v368, "gówniany", "g******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v369, "gównianej", "g*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v370, "gówniane", "g******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v371, "gówniana", "g******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v372, "gównem", "g****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v373, "gównami", "g*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v374, "gównach", "g*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v375, "gówna", "g***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v376, "fiuty", "f***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v377, "fiutem", "f****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v378, "fiutami", "f*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v379, "fiuta", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v380, "fiutów", "f****w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v381, "fiut", "f**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v382, "dymanku", "d*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v383, "dymaniem", "d******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v384, "dymania", "d*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v385, "dymani", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v386, "dymana", "d****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v387, "dymali", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v388, "dymał", "d***ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v389, "dymać", "d***ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v390, "dupy", "d**y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v391, "dupo", "d**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v392, "dupczy", "d****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v393, "dupczenia", "d*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v394, "dupcz", "d***z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v395, "dupami", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v396, "dupach", "d****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v397, "dosrajcie", "d*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v398, "dosrać", "d****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v399, "dopierdolić", "d*********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v400, "dopieprzenie", "d**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v401, "cweluchu", "c******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v402, "cwelu", "c***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v403, "cwelem", "c****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v404, "cwele", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v405, "cwela", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v406, "cwel", "c**l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v407, "ciulu", "c***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v408, "ciula", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v409, "ciul", "c**l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v410, "cipo", "c**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v411, "cipa", "c**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v412, "cip", "c*p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v413, "chuju", "c***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v414, "chujowe", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v415, "chujem", "c****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v416, "chuje", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v417, "chuja", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v418, "chuj", "c**j");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_pl(void)::sProfanityData_pl, (uint64_t)v4, 0x19FuLL);
    for (uint64_t i = 0; i != -2490; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v418[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_pl(void)::sProfanityData_pl, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_pl(void)::sProfanityData_pl[0], unk_1EA3D8C08, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8C08 - GetProfanityFilter_pl(void)::sProfanityData_pl[0]) >> 4));
}

void sub_1C5E648B0(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 19872;
  uint64_t v4 = -19920;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E6494C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5E649A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *GetProfanityFilter_sv(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v407[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v4, "zigenarstuk", "z*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v5, "zigenare", "z******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v6, "vildknull", "v*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[19],0>(v7, "vibrationslösfitta", "v****************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v8, "tjockis", "t*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v9, "tjackluder", "t********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v10, "tjackhora", "t*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v11, "tattarna", "t******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v12, "tattarjänta", "t*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v13, "tattare", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "tamejfan", "t******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v15, "tölp", "t**p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v16, "svennehora", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v17, "svartskalle", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v18, "svartskallarna", "s************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v19, "svartskallar", "s**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v20, "svartingen", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v21, "svartingarna", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v22, "svartingar", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v23, "svarting", "s******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v24, "stridspittar", "s**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(v25, "stockholmsjävlar", "s**************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v26, "spermaharen", "s*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "spagge", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v28, "spaggarna", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v29, "snorunge", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v30, "småjävlig", "s*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v31, "slyngel", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v32, "slyna", "s***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v33, "slampa", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v34, "skitvillkor", "s*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v35, "skitviktigt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v36, "skitviktig", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v37, "skittufft", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v38, "skittråkigt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v39, "skittråkig", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v40, "skitträff", "s*******f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v41, "skittjock", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v42, "skittaskiga", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v43, "skittaskig", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v44, "skitsystem", "s********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v45, "skitsvårt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v46, "skitsura", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v47, "skitstressad", "s**********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v48, "skitstark", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v49, "skitstövlarna", "s***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v50, "skitstövlar", "s*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v51, "skitstöveln", "s*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v52, "skitstövel", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v53, "skitställe", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v54, "skitsnygga", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v55, "skitsnygg", "s*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v56, "skitsnacksmejl", "s************l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v57, "skitsnackare", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v58, "skitsmarta", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v59, "skitskyttar", "s*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v60, "skitsida", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v61, "skitsaker", "s*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v62, "skitsak", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v63, "skitsäsong", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v64, "skitroligt", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v65, "skitroliga", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v66, "skitprylar", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v67, "skitprogrammet", "s************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v68, "skitprat", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v69, "skitpappa", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v70, "skitont", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v71, "skitobehagligt", "s************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v72, "skitnervös", "s********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v73, "skitnöjda", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v74, "skitnöjd", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v75, "skitnödigt", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v76, "skitnödig", "s*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v77, "skitmusik", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v78, "skitmedicin", "s*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v79, "skitmatchen", "s*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v80, "skitmatch", "s*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "skitmat", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v82, "skitmål", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v83, "skitlukten", "s********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "skitliv", "s*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v85, "skitligan", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v86, "skitliberal", "s*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v87, "skitland", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "skitlag", "s*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v89, "skitlöner", "s*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v90, "skitlön", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v91, "skitlöjligt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v92, "skitlöjliga", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v93, "skitlätt", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v94, "skitläckert", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v95, "skitkonstigt", "s**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v96, "skitkonstiga", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v97, "skitkass", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v98, "skitkallt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v99, "skitkåt", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v100, "skitjobbiga", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v101, "skitjobbig", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v102, "skitjobbet", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v103, "skitit", "s****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v104, "skitirriterad", "s***********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v105, "skithockey", "s********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v106, "skithemskt", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v107, "skithelg", "s******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v108, "skithögt", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v109, "skithögen", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v110, "skithäftigt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v111, "skitgoda", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v112, "skitgnäll", "s*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v113, "skitglada", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v114, "skitglad", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v115, "skitgörat", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v116, "skitgöra", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v117, "skitful", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v118, "skitfränt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v119, "skitfilmer", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v120, "skitförbannade", "s************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v121, "skitfärdig", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v122, "skitenkelt", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v123, "skitdagis", "s*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v124, "skitdag", "s*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v125, "skitdåligt", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v126, "skitdålig", "s*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v127, "skitcoolt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v128, "skitbränsle", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v129, "skitblaska", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v130, "skitbilligt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v131, "skitband", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v132, "skitballt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v133, "skitavtal", "s*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v134, "skitarga", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v135, "skitäckligt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v136, "skit-tV", "s*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v137, "skit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v138, "skadehelvete", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v139, "sjuhelvetes", "s*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v140, "sjuhelsikes", "s*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v141, "sjözigenarfolk", "s************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v142, "shit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v143, "schlagerbögarna", "s*************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v144, "satan", "s***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v145, "sandneger", "s******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v146, "salthelvete", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v147, "sär", "s*r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v148, "runkobjekt", "r********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v149, "runkat", "r****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v150, "runkar", "r****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v151, "runkade", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v152, "runkad", "r****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v153, "runka", "r***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v154, "rövunge", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v155, "rövknullare", "r*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v156, "rövknullade", "r*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v157, "rövknull", "r******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v158, "rövhatt", "r*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v159, "rövhål", "r****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v160, "röv", "r**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v161, "röding", "r****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v162, "råttpiss", "r******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v163, "punkjävlar", "p********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v164, "pundhuvud", "p*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v165, "pundhuve", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v166, "pucko", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v167, "praktarsel", "p********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v168, "pitten", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v169, "pitt", "p**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v170, "pissvädret", "p********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v171, "pisstidningar", "p***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v172, "pissråttan", "p********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v173, "pisslata", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v174, "pissland", "p******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v175, "pattar", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v176, "pajjas", "p****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v177, "pajas", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v178, "orre", "o**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v179, "operabögar", "o********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v180, "niggrerna", "n*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v181, "niggern", "n*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v182, "nigger", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v183, "negrer", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v184, "negerpojkar", "n*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v185, "negerbollar", "n*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v186, "negerboll", "n*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v187, "neger", "n***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v188, "muhammedhundar", "m************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v189, "muhammedhund", "m**********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v190, "mongo", "m***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v191, "mes", "m*s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v192, "masjävlar", "m*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v193, "mammaknullare", "m***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v194, "mainstream-skiten", "m***************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v195, "mainstream-skit", "m*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v196, "mög", "m*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v197, "lyxrunka", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v198, "luder", "l***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v199, "lebb", "l**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v200, "lassemajas", "l********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v201, "lappjävlar", "l********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v202, "lappjäveln", "l********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v203, "lappjävel", "l*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v204, "lapphelvetet", "l**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v205, "läbb", "l**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v206, "kuksugerska", "k*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v207, "kuksugareskan", "k**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v208, "kuksugaren", "k******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v209, "kuksugare", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v210, "kukkunskap", "k********p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v211, "kukjävel", "k******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v212, "kukhuvud", "k******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v213, "kuken", "k***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v214, "kukbruk", "k*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v215, "kukat", "k***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v216, "kukarna", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v217, "kukar", "k***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v218, "kuk", "k*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v219, "koskit", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[19],0>(v220, "kommunistkärringen", "k****************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v221, "knullmara", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v222, "knullkompisar", "k***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v223, "knullkompis", "k*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[18],0>(v224, "knullborgarmärket", "k***************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v225, "knullat", "k*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v226, "knullas", "k*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v227, "knullare", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v228, "knullar", "k*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v229, "knullade", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v230, "knulla", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v231, "klyktattare", "k*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v232, "klitta", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v233, "klantarsel", "k********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v234, "kanadickerna", "k**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v235, "kanadicken", "k********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v236, "kanadick", "k******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v237, "kötthuvud", "k*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v238, "kärring", "k*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v239, "juggen", "j****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v240, "juggemaffian", "j**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v241, "juggejävel", "j********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v242, "juggedisco", "j********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v243, "jugge", "j***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v244, "juggar", "j****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v245, "jävulsk", "j*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v246, "jävligaste", "j********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v247, "jävligare", "j*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v248, "jävliga", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v249, "jävlig", "j****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v250, "jävlats", "j*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v251, "jävlarna", "j******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v252, "jävlar", "j****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v253, "jävlad", "j****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v254, "jävla", "j***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v255, "jävelskap", "j*******p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v256, "jäveln", "j****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v257, "jävel", "j***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v258, "jäklar", "j***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v259, "idiot", "i***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v260, "husneger", "h******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v261, "hundskiten", "h********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v262, "hundskit", "h******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v263, "horunge", "h*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v264, "horbock", "h*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v265, "horan", "h***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v266, "hora", "h**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v267, "hondjävulen", "h*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v268, "homos", "h***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v269, "homoresorna", "h*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v270, "homomän", "h*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v271, "homolobbyns", "h*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v272, "homo", "h**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v273, "herrejävlar", "h*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v274, "helvetes", "h******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v275, "helvete", "h*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v276, "hönshjärna", "h********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v277, "hästskiten", "h********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v278, "hästskit", "h******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v279, "hästkuk", "h*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v280, "hängtuttar", "h********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v281, "hängröv", "h*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v282, "hängbröst", "h*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v283, "gulingen", "g*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v284, "gulingarna", "g********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v285, "guling", "g****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v286, "gubbslemmet", "g*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v287, "gubbjävlar", "g********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v288, "gubbjävel", "g*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v289, "gubbfan", "g*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v290, "groggluder", "g********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v291, "grönjävligt", "g*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v292, "golfidioter", "g*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v293, "gnällkärringar", "g************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v294, "gnällkärring", "g**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v295, "göka", "g**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v296, "fucking", "f*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v297, "fuckar", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v298, "frilanshelvetet", "f*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v299, "flugskit", "f******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v300, "flinfitta", "f*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v301, "flatorna", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v302, "flata", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v303, "fjolla", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v304, "fjant", "f****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v305, "fittstim", "f******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v306, "fittslickare", "f**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v307, "fittorna", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v308, "fittor", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v309, "fittjävel", "f*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v310, "fitthora", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v311, "fittfis", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v312, "fittfakta", "f*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v313, "fittan", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v314, "fitta", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v315, "finndjävul", "f********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v316, "fikus", "f***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v317, "fetto", "f***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v318, "fanstygen", "f*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v319, "fanskapet", "f*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v320, "fanken", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v321, "fan", "f*n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v322, "förbannat", "f*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v323, "förbannade", "f********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v324, "förbövelen", "f********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v325, "fåntratt", "f******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v326, "dummerjöns", "d********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v327, "dumjävel", "d******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v328, "dumhuvud", "d******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v329, "dumhuve", "d*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v330, "dumfan", "d****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v331, "djävulusiska", "d**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v332, "djävligt", "d******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v333, "djävlarna", "d*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v334, "djävlar", "d*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v335, "djävelskap", "d********p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v336, "djäveln", "d*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v337, "djävel", "d****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v338, "djäkla", "d****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v339, "datorrunkande", "d***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v340, "datajävel", "d*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v341, "danskjävlar", "d*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v342, "cp", "c*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v343, "butchflator", "b*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v344, "bullshit-filsosof", "b***************f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v345, "breeders", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v346, "brakskit", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v347, "bonnläppar", "b********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v348, "bonnjävlar", "b********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v349, "bondläpp", "b******p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v350, "bollibompasex", "b***********x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v351, "bokhora-sidan", "b***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v352, "bokhora", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v353, "blodsugarjävlar", "b*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v354, "blattesvenska", "b***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v355, "blattesnack", "b*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v356, "blatten", "b*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v357, "blattehumor", "b*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v358, "blatte", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v359, "blattarna", "b*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v360, "blattar", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v361, "bitterfittan", "b**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v362, "bitterfittalappen", "b***************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v363, "bitterfitta", "b*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v364, "betongröv", "b*******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v365, "betonghäck", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v366, "balle", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v367, "ballar", "b****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v368, "badjävlar", "b*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v369, "badhelvetet", "b*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v370, "babbe", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v371, "bögskräcken", "b*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v372, "bögskräck", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v373, "bögskämt", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v374, "bögporr", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v375, "bögparlör", "b*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v376, "bögpar", "b****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v377, "bögmagasin", "b********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v378, "bögjävlarna", "b*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v379, "bögjävel", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v380, "böghora", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v381, "böghatare", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v382, "böghög", "b****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v383, "bögfaktor", "b*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v384, "bögen", "b***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v385, "bögdjävel", "b*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v386, "bögbomb", "b*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v387, "bögbingo", "b******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v388, "bögarnas", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v389, "bögarna", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v390, "bögar", "b***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v391, "böga", "b**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v392, "bög", "b*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v393, "avsugning", "a*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v394, "avskum", "a****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v395, "attackflator", "a**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v396, "as", "a*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v397, "arslen", "a****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v398, "arsle", "a***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v399, "arselet", "a*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v400, "arsel", "a***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v401, "arschel", "a*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v402, "analt", "a***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v403, "analsex", "a*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v404, "analporr", "a******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v405, "analplugg", "a*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v406, "analkulor", "a*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v407, "a-hole", "a****e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_sv(void)::sProfanityData_sv, (uint64_t)v4, 0x194uLL);
    for (uint64_t i = 0; i != -2424; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v407[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_sv(void)::sProfanityData_sv, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_sv(void)::sProfanityData_sv[0], unk_1EA3D8C48, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8C48 - GetProfanityFilter_sv(void)::sProfanityData_sv[0]) >> 4));
}

void sub_1C5E67F44(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 19344;
  uint64_t v4 = -19392;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_he(void *a1)
{
  void v15[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v4, "שרמוטה", "ש***ה");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v5, "צ׳חצ׳ח", "צ׳**ח");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v6, "צ׳וח", "צ׳*ח");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v7, "פרענק", "פ***ק");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v8, "פרחולה", "פ****ה");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v9, "ערסוואט", "ע*****ט");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v10, "ערבוש", "ע****ש");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v11, "מזדיין", "מ****ן");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v12, "לזיין", "ל***ן");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v13, "כושון", "כ***ן");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v14, "יהודון", "י****ן");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v15, "זונה", "ז***ה");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_he(void)::sProfanityData_he, (uint64_t)v4, 0xCuLL);
    for (uint64_t i = 66; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v4[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_he(void)::sProfanityData_he, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_he(void)::sProfanityData_he[0], unk_1EA3D8C68, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8C68 - GetProfanityFilter_he(void)::sProfanityData_he[0]) >> 4));
}

void sub_1C5E6821C(_Unwind_Exception *a1)
{
  for (uint64_t i = 528; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_da(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  v449[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v4, "voldtægtsporno", "v************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v5, "underklassetosser", "u***************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[22],0>(v6, "underkastelseskælling", "u*******************g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v7, "tyndskid", "t******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v8, "tuneserpjok", "t*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v9, "toiletsex", "t*******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v10, "svagpisser", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v11, "stikkersvin", "s*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v12, "spassere", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v13, "spasser", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v14, "sortsmudskede", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v15, "smatso", "s****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v16, "sladderkælling", "s************g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v17, "skidefornuftig", "s************g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v18, "skidefarligt", "s**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v19, "skidefalsk", "s********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v20, "skidebange", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v21, "skideærgerligt", "s************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v22, "skamlæberne", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v23, "skabsmuslimer", "s***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(v24, "skabsmandschauvinister", "s********************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v25, "skøge", "s***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v26, "sigøjnertøser", "s***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v27, "shemale", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v28, "sgu", "s*u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v29, "sexslaveri", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v30, "sexslaver", "s*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v31, "sexslave", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v32, "sexobjekt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "sexfreak", "s******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v34, "seniorsex", "s*******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[25],0>(v35, "selvudslettelsesreligion", "s**********************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v36, "sateme", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v37, "rygersvin", "r*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v38, "rumpehul", "r******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v39, "roetyskerne", "r*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v40, "racist-pia", "r********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v41, "racismekortet", "r***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v42, "racetænkning", "r**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v43, "racerent", "r******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v44, "røvsygt", "r*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v45, "røvsyge", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v46, "røvsyg", "r****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v47, "røvkedelige", "r*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v48, "røvhul", "r****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v49, "røvgode", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(v50, "røverkapitalisme", "r**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v51, "røværgerligt", "r**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v52, "rødfascist", "r********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v53, "pulet", "p***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v54, "pules", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v55, "puler", "p***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v56, "puledes", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v57, "pulede", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v58, "pule", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v59, "pul", "p*l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(v60, "pisseuretfærdigt", "p**************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v61, "pissets", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v62, "pissetræt", "p*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v63, "pisset", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v64, "pissesur", "p******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v65, "pisses", "p****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v66, "pisserig", "p******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v67, "pisser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v68, "pissende", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v69, "pissen", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v70, "pissegrådige", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v71, "pissedes", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v72, "pissede", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v73, "pissebarnlig", "p**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v74, "pissebange", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v75, "pisse", "p***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v76, "pisnings", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v77, "pisningers", "p********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v78, "pisninger", "p*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v79, "pisningen", "p*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v80, "pisning", "p*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v81, "pis", "p*s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v82, "piks", "p**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v83, "piknings", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v84, "pikløshed", "p*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v85, "pikløse", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v86, "pikløs", "p****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "pikkets", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v88, "pikket", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v89, "pikkes", "p****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v90, "pikker", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v91, "pikkens", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v92, "pikkenes", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "pikkene", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v94, "pikken", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "pikkedes", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v96, "pikkede", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v97, "pikke", "p***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v98, "pikhoved", "p******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v99, "pik", "p*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "pigesex", "p*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v101, "pigerøve", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v102, "perkersvin", "p********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v103, "perkere", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v104, "perkerdansk", "p*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v105, "perker", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v106, "penetrering", "p*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v107, "patters", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v108, "patterne", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v109, "patter", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v110, "pat", "p*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v111, "parvoldtægt", "p*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v112, "panserkælling", "p***********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v113, "overpisset", "o********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v114, "orgiets", "o*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v115, "orgiet", "o****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v116, "orgies", "o****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v117, "orgiers", "o*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v118, "orgiernes", "o*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v119, "orgierne", "o******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v120, "orgier", "o****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v121, "ordvoldtægt", "o*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v122, "oralsex", "o*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v123, "orale", "o***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v124, "onanists", "o******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v125, "onanisters", "o********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v126, "onanister", "o*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v127, "onanist", "o*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v128, "onanis", "o****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v129, "onaniens", "o******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v130, "onanien", "o*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v131, "onaneret", "o******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v132, "onanerer", "o******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v133, "onanerende", "o********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v134, "onaneredes", "o********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v135, "onanerede", "o*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v136, "onanere", "o*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v137, "onaner", "o****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v138, "omgangsluder", "o**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v139, "nynazistiske", "n**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v140, "nynazistisk", "n*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v141, "nynazist", "n******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v142, "nyfascistiske", "n***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v143, "nyfascistisk", "n**********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v144, "nyfascisterne", "n***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v145, "numsemanden", "n*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v146, "numsehuls", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v147, "numsehuller", "n*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v148, "numsehul", "n******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v149, "nosses", "n****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v150, "nossers", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v151, "nossernes", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v152, "nosserne", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v153, "nossens", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v154, "nossen", "n****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v155, "nosseløse", "n*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v156, "nosse", "n***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v157, "niggers", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v158, "niggernes", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v159, "niggerne", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v160, "niggeres", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v161, "niggerens", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v162, "niggeren", "n******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v163, "niggere", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v164, "nigger", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v165, "nervevrag", "n*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v166, "neosvin", "n*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[21],0>(v167, "neonazistgrupperings", "n******************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v168, "neonazisters", "n**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v169, "neofascists", "n*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v170, "neofascistiske", "n************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v171, "neofascistisk", "n***********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v172, "neofascisters", "n***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v173, "neofascister", "n**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v174, "neofascistens", "n***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v175, "neofascisten", "n**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v176, "neofascist", "n********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v177, "neo-fascistisk", "n************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v178, "negres", "n****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v179, "negrenes", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v180, "negrene", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v181, "negre", "n***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v182, "negers", "n****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v183, "negerpikke", "n********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v184, "negernes", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v185, "negerne", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v186, "negeres", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v187, "negerens", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v188, "negeren", "n*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v189, "negerdrengen", "n**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v190, "negerdreng", "n********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v191, "neger", "n***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v192, "nasserøve", "n*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v193, "nasserøv", "n******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v194, "narrøve", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v195, "narkoluderne", "n**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v196, "narkoluderen", "n**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v197, "narkoludere", "n*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v198, "narkoluder", "n********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v199, "narhoveder", "n********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v200, "muslimhadere", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v201, "muslimhader", "m*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v202, "muslimfrit", "m********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v203, "mundsex", "m*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v204, "mundlort", "m******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v205, "mundgalde", "m*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v206, "muhammedbog", "m*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v207, "muhammedanske", "m***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v208, "muhammedanernes", "m*************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v209, "muhammedanerne", "m************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v210, "muhammed-reaktion", "m***************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v211, "muhammed-bamse", "m************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v212, "muhamedanske", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v213, "muhamedansk", "m*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v214, "muhamedanismens", "m*************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v215, "muhamedanerne", "m***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v216, "muhamedaneres", "m***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v217, "muhamedanerens", "m************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v218, "muhamedaneren", "m***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v219, "muhamedanere", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v220, "motherfucker", "m**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v221, "morgensex", "m*******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v222, "morgenbolledamer", "m**************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v223, "moone", "m***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v224, "medieliderlig", "m***********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v225, "masturberet", "m*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v226, "masturberede", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v227, "masturbere", "m********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v228, "masturber", "m*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v229, "møgunge", "m*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v230, "møgsvinets", "m********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v231, "møgsvinet", "m*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v232, "møgsvin", "m*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v233, "møgsos", "m****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v234, "møgsoer", "m*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v235, "møgsoens", "m******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v236, "møgsoen", "m*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v237, "møgso", "m***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v238, "møgkælling", "m********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v239, "møggrisens", "m********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v240, "møggris", "m*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v241, "møgfeminister", "m***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v242, "mæres", "m***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v243, "mærens", "m****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v244, "mærenes", "m*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v245, "mæren", "m***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v246, "mære", "m**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v247, "mær", "m*r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v248, "måsen", "m***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v249, "luksusluder", "l*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v250, "luders", "l****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v251, "ludernes", "l******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v252, "luderne", "l*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v253, "luderkræft", "l********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v254, "luderes", "l*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v255, "luderen", "l*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v256, "ludere", "l****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v257, "luderagtigt", "l*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v258, "luderagtige", "l*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v259, "ludders", "l*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v260, "luddernes", "l*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v261, "ludderne", "l******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v262, "ludderes", "l******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v263, "ludderens", "l*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v264, "ludderen", "l******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v265, "luddere", "l*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v266, "ludder", "l****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v267, "lorts", "l***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v268, "lortespanden", "l**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v269, "lortesituation", "l************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v270, "lortesag", "l******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v271, "lortes", "l****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v272, "lorteregering", "l***********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v273, "lorteposen", "l********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v274, "lorten", "l****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v275, "lortelandet", "l*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v276, "lortejobs", "l*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v277, "lortefilm", "l*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v278, "lortede", "l*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v279, "lortebrune", "l********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v280, "lorteartikler", "l***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v281, "lorteargument", "l***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v282, "lortearbejde", "l**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v283, "lokumsaftalen", "l***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v284, "lokumsaftale", "l**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v285, "listepik", "l******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v286, "liderligheden", "l***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v287, "liderlige", "l*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v288, "lebbe", "l***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v289, "langpisseri", "l*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v290, "læderbøsser", "l*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v291, "læderbøsse", "l********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v292, "kvindfolk", "k*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v293, "kvinderøv", "k*******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v294, "kusses", "k****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v295, "kusserne", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v296, "kussens", "k*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v297, "kussekarl", "k*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v298, "kussegalleri", "k**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v299, "kraftværks-svin", "k*************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v300, "kraftedeme", "k********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v301, "kommunistsvin", "k***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[21],0>(v302, "kommunist-fascismens", "k******************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v303, "kneppen", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v304, "klimasvin", "k*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v305, "klidmostre", "k********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v306, "kartoffeltyskere", "k**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(v307, "kartoffelpolakkerne", "k*****************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v308, "kamelklapper", "k**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v309, "kønsdele", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v310, "købesex", "k*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[20],0>(v311, "københavnerasiatisk", "k*****************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v312, "kærlighedssovs", "k************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v313, "kæmpevagina", "k*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v314, "jødeso", "j****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v315, "jøderent", "j******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v316, "jødekost", "j******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v317, "jødeblodet", "j********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v318, "islam-hadende", "i***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v319, "horkarle", "h******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v320, "horeunge", "h******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v321, "hoer", "h**r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v322, "hjernelamme", "h*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v323, "hitlers", "h*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v324, "hitler-lignende", "h*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v325, "hitler-kortet", "h***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v326, "hitler", "h****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v327, "hipsterlebbe", "h**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v328, "hippiefis", "h*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v329, "himpegimpes", "h*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v330, "himpegimpers", "h**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v331, "himpegimpernes", "h************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v332, "himpegimperne", "h***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v333, "himpegimper", "h*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v334, "himpegimpens", "h**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v335, "himpegimpen", "h*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v336, "himpegimpe", "h********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v337, "hesteluder", "h********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v338, "halvhjerner", "h*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v339, "halenegerne", "h*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v340, "halalhysteriet", "h************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v341, "gruppesex", "g*******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v342, "gruppeknald", "g*********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v343, "gramsedes", "g*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v344, "grønlænderstiv", "g************v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v345, "goddammit", "g*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v346, "fucking", "f*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v347, "fuckfinger", "f********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v348, "fucker", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v349, "fucked-up", "f*******p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v350, "fucked", "f****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v351, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v352, "forpulet", "f******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v353, "forpulede", "f*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v354, "forhud", "f****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(v355, "forfatnings-striptease", "f********************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v356, "fluelort", "f******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v357, "fluekneppe", "f********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[16],0>(v358, "fløjlshængerøve", "f*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[19],0>(v359, "flæskestegsdansker", "f****************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[18],0>(v360, "flæskestegsædende", "f***************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v361, "fist-fucking", "f**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v362, "fisses", "f****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v363, "fissers", "f*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v364, "fissernes", "f*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v365, "fisserne", "f******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v366, "fisser", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v367, "fissens", "f*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v368, "fissen", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v369, "fisse", "f***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v370, "festivalsex", "f*********x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v371, "fes", "f*s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v372, "engangsknald", "e**********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v373, "ejakulering", "e*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v374, "dyresex", "d*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v375, "dyrepornografi", "d************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v376, "duskes", "d****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v377, "duskens", "d*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v378, "dusk", "d**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v379, "dumb", "d**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v380, "drypperts", "d*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v381, "drypperters", "d*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v382, "drypperten", "d********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v383, "dryppert", "d******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v384, "dopehead", "d******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v385, "dick", "d**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v386, "diarréen", "d******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v387, "danselebbe", "d********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v388, "damned", "d****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v389, "dæmon-moderen", "d***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v390, "dåsesnak", "d******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v391, "cojones", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v392, "burlesk-freaks", "b************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v393, "bunkepul", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v394, "bullshitter", "b*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v395, "bongopatter", "b*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v396, "bondeislamisme", "b************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v397, "bollerummet", "b*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v398, "bollerum", "b******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v399, "bolleri", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v400, "bogluder", "b******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v401, "boblepatter", "b*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v402, "blowjobbets", "b*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v403, "blowjob", "b*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v404, "blegfede", "b******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v405, "bj", "b*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v406, "bj", "b*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v407, "bitterfisser", "b**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v408, "bitterfissens", "b***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v409, "bitterfissen", "b**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v410, "bitterfisse", "b*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v411, "bitche", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v412, "bitch", "b***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v413, "betonsocialisten", "b**************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v414, "betonsocialist", "b************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(v415, "betonsocialdemokratisk", "b********************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v416, "betonmarxister", "b************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v417, "betonliberalister", "b***************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v418, "betonliberalist", "b*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v419, "betonlebbe", "b********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v420, "betonkommunister", "b**************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v421, "betonkommunist", "b************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v422, "betonfeministisk", "b**************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v423, "betonfeministerne", "b***************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v424, "betonfeminister", "b*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v425, "betonfeminist", "b***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v426, "betonfeminisme", "b************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(v427, "betonchauvinistiske", "b*****************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v428, "beton-feminisme", "b*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v429, "begramsede", "b********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v430, "barrøvet", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v431, "bananrepublikanere", "b****************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v432, "bananplukkerne", "b************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v433, "bøssestening", "b**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v434, "bøssesexfester", "b************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v435, "bøsserøve", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v436, "børnevold", "b*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v437, "børnesex", "b******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v438, "børnepornosider", "b*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v439, "børnepornografi", "b*************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v440, "børneporno", "b********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v441, "børnekrænkere", "b***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v442, "bæerne", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v443, "analt", "a***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v444, "analsex", "a*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v445, "analkløe", "a******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v446, "afføringssex", "a**********x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v447, "abekasteriet", "a**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v448, "åndsforsnottede", "å*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v449, "åndsamøber", "å********r");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_da(void)::sProfanityData_da, (uint64_t)v4, 0x1BEuLL);
    for (uint64_t i = 0; i != -2676; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v449[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_da(void)::sProfanityData_da, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_da(void)::sProfanityData_da[0], unk_1EA3D8CA8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8CA8 - GetProfanityFilter_da(void)::sProfanityData_da[0]) >> 4));
}

void sub_1C5E6BD98(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 21360;
  uint64_t v4 = -21408;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_ja(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v118[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v4, "fuck", "f***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[6],0>(v5, "鼻フック", "鼻**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v6, "黒ん坊", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v7, "黒んぼ", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v8, "顔射", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v9, "露助", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v10, "電マ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v11, "間の子", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v12, "金玉野郎", "金***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v13, "金玉", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v14, "輪姦", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v15, "腐れマンコ", "腐***コ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v16, "腐れまんこ", "腐***こ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v17, "肉便器", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v18, "盲", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v19, "痴女", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v20, "生ハメ", "生**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v21, "手マン", "手**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v22, "手コキ", "手**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v23, "巨乳", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v24, "土人", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v25, "口内発射", "口***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v26, "口内射精", "口***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v27, "即ハメ", "即**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v28, "便器女", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v29, "乱交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v30, "中出し", "中**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v31, "ワレメ", "ワ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v32, "ヤリマン", "ヤ**ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v33, "ヤリチン", "ヤ**ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v34, "マンコ", "マ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v35, "ブス", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v36, "フニャチン野郎", "フ*****郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[13],0>(v37, "フニャチンやろう", "フ******う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v38, "フェラチオ", "フ***オ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v39, "フェラゴックン", "フ*****ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v40, "フェラごっくん", "フ*****ん");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v41, "フェラ", "フ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[13],0>(v42, "ファックユー", "フ***ユー");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v43, "ファック", "フ**ク");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v44, "パイパン", "パ**ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v45, "パイズリ", "パ**リ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[13],0>(v46, "バキュームフェラ", "バ******ラ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v47, "バカチョン", "バ***ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v48, "ハメ撮り", "ハ**り");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v49, "ハメまくり", "ハ***り");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v50, "ハゲ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v51, "ニグロ", "ニ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v52, "ニガー", "ニ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v53, "デブ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v54, "デカチン", "デ**ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v55, "デカちん", "デ**ん");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v56, "チンポ", "チ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v57, "チンチン", "チ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v58, "チンコ", "チ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v59, "チンカス野郎", "チ****郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v60, "チンカス", "チ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v61, "チョン公", "チ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v62, "チョン", "チ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v63, "チョッパリ", "チ***リ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v64, "チャンコロ", "チ***ロ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v65, "チビ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v66, "センズリ", "セ**リ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v67, "セックス", "セ**ス");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v68, "クロンボ", "ク**ボ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v69, "クソ野郎", "く***う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v70, "クソ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v71, "キ印", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v72, "キンタマ野郎", "キ****郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v73, "キンタマ", "キ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v74, "キジルシ", "キ**シ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v75, "オメコ", "オ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v76, "オマンコ", "オ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v77, "オナホール", "オ***ル");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v78, "オナホ", "オ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v79, "オッパイ", "オ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v80, "オチンチン", "オ***ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v81, "エロ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v82, "イラマチオ", "イ***オ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v83, "イタ公", "イ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v84, "イキまくり", "イ***り");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v85, "アメ公", "ア**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v86, "アナル調教", "ア***教");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v87, "アナルセックス", "ア*****ス");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v88, "めくら", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v89, "まんこ野郎", "ま***郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v90, "まんこやろう", "ま****う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v91, "まんこ", "ま**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v92, "ふにゃちん野郎", "ふ*****郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[13],0>(v93, "ふにゃちんやろう", "ふ******う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v94, "びっこ", "び**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v95, "はげ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v96, "つんぼ", "つ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v97, "ちんぽ", "ち**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v98, "ちんば", "ち**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v99, "ちんちん", "ち***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v100, "ちんこ", "ち**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v101, "くろんぼ", "く**ぼ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v102, "くそ野郎", "く***う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v103, "くそやろう", "く***う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v104, "くそ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v105, "おチンチン", "お***ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v106, "おめこ", "お**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v107, "おまんこ野郎", "お****郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v108, "おまんこやろう", "お*****う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v109, "おまんこ", "お***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v110, "おっぱい", "お***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v111, "おちんちん", "お***ん");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v112, "うんち", "う**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v113, "うんこ野郎", "う***郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v114, "うんこやろう", "う****う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v115, "うんこたれ", "う***れ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v116, "うんこ", "う**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v117, "SEX", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v118, "3P", "**");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ja(void)::sProfanityData_ja, (uint64_t)v4, 0x73uLL);
    for (uint64_t i = 0; i != -690; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v118[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ja(void)::sProfanityData_ja, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_ja(void)::sProfanityData_ja[0], unk_1EA3D8CC8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8CC8 - GetProfanityFilter_ja(void)::sProfanityData_ja[0]) >> 4));
}

void sub_1C5E6CD28(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 5472;
  uint64_t v4 = -5520;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_el(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  v518[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v4, "ψώλος", "ψ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v5, "ψόφα", "ψ**α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v6, "ψωνιστήρι", "ψ*******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v7, "ψωλή", "ψ**ή");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v8, "ψωλές", "ψ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v9, "ψοφοδεή", "ψ*****ή");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v10, "ψοφιμιών", "ψ******ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v11, "ψοφάτε", "ψ****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v12, "χοντροφτιαγμένα", "χ*************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[37],char const(&)[21],0>(v13, "χοντροσαραντάρηδες", "χ****************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v14, "χοντρομπαλάς", "χ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v15, "χοντρομπαλά", "χ*********ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v16, "χοντροκέφαλοι", "χ***********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v17, "χοντρέλω", "χ******ω");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v18, "χοντρέλες", "χ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v19, "χεστεί", "χ****ί");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v20, "χεστήκατε", "χ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v21, "χεστήκανε", "χ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v22, "χεστήκαμε", "χ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v23, "χεσμένος", "χ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v24, "χεσμένο", "χ*****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v25, "χεσμένες", "χ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v26, "χαφιεδότσουρμου", "χ*************υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v27, "χαφιεδότσουρμο", "χ************ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v28, "χασισάκια", "χ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v29, "χασικλίδες", "χ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v30, "χασικλήδες", "χ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v31, "χασικλή", "χ*****ή");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v32, "χασίσια", "χ*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v33, "χασίς", "χ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v34, "χαζογκόμενες", "χ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v35, "χαζογκόμενα", "χ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v36, "χαζογκομενίστικα", "χ**************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v37, "χέστρες", "χ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v38, "χέστης", "χ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v39, "χέστηκες", "χ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v40, "χέστηκα", "χ*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v41, "χέστηδες", "χ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v42, "χέστη", "χ***η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v43, "χέστες", "χ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v44, "χέστα", "χ***α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v45, "χέσιμο", "χ****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v46, "χέσεις", "χ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v47, "χέσει", "χ***ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v48, "χέσε", "χ**ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v49, "χέζω", "χ**ω");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v50, "χέζουνε", "χ*****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v51, "χέζονται", "χ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v52, "χέζεις", "χ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v53, "χέζει", "χ***ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v54, "χάχας", "χ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v55, "φλώρους", "φ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v56, "φλώρος", "φ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v57, "φλώρε", "φ***ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v58, "φλόκους", "φ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v59, "φλωράκια", "φ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v60, "φλούφληδων", "φ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v61, "φλούφλη", "φ*****η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v62, "φασιστόμουτρων", "φ************ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v63, "φασιστόμουτρο", "φ***********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v64, "φασιστόμουτρα", "φ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v65, "τσόγλανος", "τ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v66, "τσόγλανο", "τ******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v67, "τσούλα", "τ****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v68, "τσουτσούνια", "τ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v69, "τσουτσούνι", "τ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v70, "τσουτσουνάκια", "τ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v71, "τσουτσουνάκι", "τ**********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v72, "τσουλιά", "τ*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v73, "τσουλί", "τ****ί");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v74, "τσουλάκια", "τ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v75, "τσουλάκι", "τ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v76, "τσογλανοπαρέα", "τ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v77, "τσογλανιών", "τ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v78, "τσογλανισμοί", "τ**********ί");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v79, "τσογλαναρίας", "τ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v80, "τσογλανάκια", "τ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v81, "τσογλάνια", "τ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v82, "τσογλάνι", "τ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v83, "τσιμπούκια", "τ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v84, "τσιμπουκιού", "τ*********ύ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v85, "τουρκόσπορων", "τ**********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v86, "τουρκόσπορους", "τ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v87, "τουρκόσπορο", "τ*********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v88, "τουρκόγυφτους", "τ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v89, "τουρκοφαγία", "τ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v90, "τουρκοφάγους", "τ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v91, "τουρκομπαρόκ", "τ**********κ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v92, "τουρκολιγούρηδες", "τ**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v93, "τουρκιά", "τ*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v94, "τουρκαλβανό", "τ*********ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v95, "τουρκαλάδες", "τ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v96, "τεντιμπόης", "τ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v97, "τεμπελχανείο", "τ**********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v98, "τεμπελχανάδες", "τ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v99, "τεμπελχανάς", "τ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v100, "τεμπελχανάδες", "τ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v101, "τεμπελχανά", "τ********ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v102, "στραβοχυμένος", "σ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[35],char const(&)[20],0>(v103, "στραβοκατουρήσατε", "σ***************ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v104, "στούρνους", "σ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v105, "στούρνοι", "σ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v106, "στούρνο", "σ*****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v107, "στούρνε", "σ*****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v108, "σπερματοθήκη", "σ**********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v109, "σλαβόσπορων", "σ*********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v110, "σλαβόσποροι", "σ*********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v111, "σκυλαδικορόκ", "σ**********κ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v112, "σκυλίλα", "σ*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v113, "σκυλάραπα", "σ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v114, "σκυλάδικο", "σ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v115, "σκυλάδικη", "σ*******η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v116, "σκρόφα", "σ****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v117, "σκατώσατε", "σ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v118, "σκατώνεις", "σ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v119, "σκατόψυχος", "σ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v120, "σκατόψυχοι", "σ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v121, "σκατόψυχο", "σ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v122, "σκατόφατσες", "σ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v123, "σκατόπαιδων", "σ*********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v124, "σκατόπαιδο", "σ********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v125, "σκατόπαιδα", "σ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v126, "σκατόκοσμος", "σ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v127, "σκατό", "σ***ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v128, "σκατωμένο", "σ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v129, "σκατοχώρα", "σ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v130, "σκατουλάκι", "σ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v131, "σκατολογίες", "σ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v132, "σκατοκέφαλα", "σ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v133, "σκατογερνάς", "σ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v134, "σκατοαλβανό", "σ*********ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v135, "σκατιάρης", "σ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v136, "σκατιάρηδες", "σ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v137, "σκατιάρες", "σ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v138, "σκατιάρα", "σ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v139, "σκατένιες", "σ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v140, "σκατά", "σ***ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v141, "σκάτωσες", "σ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v142, "σκάτωσε", "σ*****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v143, "σιχτιρίσω", "σ*******ω");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v144, "σιχτιρίσει", "σ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v145, "σιχτιρίζουν", "σ*********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v146, "σιχτιρήσουν", "σ*********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v147, "σιχτίρισμα", "σ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v148, "σιχτίριζαν", "σ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v149, "σιχτίρ", "σ****ρ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v150, "σικτίρ", "σ****ρ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v151, "σεξουαλίζεσαι", "σ***********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v152, "σεξουάλα", "σ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v153, "σεξομάγαζου", "σ*********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v154, "σεξομάγαζα", "σ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v155, "σεξοεπιχειρήσεων", "σ**************ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v156, "σατανομπάσταρδοι", "σ**************ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v157, "ρεντίκολο", "ρ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v158, "ρεντίκολα", "ρ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v159, "πρεζόνια", "π******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v160, "πρεζού", "π****ύ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v161, "πρεζεμπόριο", "π*********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v162, "πρεζέμπορος", "π*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v163, "πρεζέμποροι", "π*********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v164, "πρεζάκια", "π******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v165, "πρεζάκι", "π*****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v166, "πούτσος", "π*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v167, "πούτσο", "π****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v168, "πούτανος", "π******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v169, "πούστικο", "π******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v170, "πούστικες", "π*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v171, "πούστης", "π*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v172, "πουτσάκι", "π******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v173, "πουτανιά", "π******ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v174, "πουτανάδικα", "π*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v175, "πουτάνας", "π******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v176, "πουτάνα", "π*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v177, "πουστόγερος", "π*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v178, "πουστράκια", "π********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v179, "πουστιές", "π******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v180, "πουστιάς", "π******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v181, "πουστιά", "π*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v182, "πουστάρα", "π******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v183, "πορνόγερος", "π********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v184, "πορνοσινεμά", "π*********ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v185, "πορνολάγνου", "π*********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v186, "πορνοκρατία", "π*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v187, "πορνοεπισκεπτών", "π*************ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v188, "πορνοεκδότης", "π**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[35],char const(&)[20],0>(v189, "πορνοδιαγωνισμούς", "π***************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v190, "πορνοβοσκός", "π*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v191, "πορδής", "π****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v192, "πορδή", "π***ή");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v193, "πορδές", "π****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v194, "πισωγλέντης", "π*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v195, "πισωγλέντηδες", "π***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v196, "πιθηκάνθρωπος", "π***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v197, "πηδήχτηκα", "π*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v198, "παρτούζες", "π*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v199, "παρτούζα", "π******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v200, "παρτουζών", "π*******ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v201, "παρλαπίπες", "π********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v202, "παραχέσει", "π*******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v203, "παπαρολόγος", "π*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v204, "παπαρολόγοι", "π*********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v205, "παπαρολόγε", "π********ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v206, "παπαρολογίες", "π**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v207, "παπαρολογίας", "π**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v208, "παπαριές", "π******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v209, "παπαριά", "π*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v210, "παπάρας", "π*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v211, "πανηλιθίων", "π********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v212, "πανηλίθιων", "π********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v213, "πανηλίθιου", "π********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v214, "πανηλίθιοι", "π********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v215, "πανηλίθιο", "π*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v216, "πανηλίθιε", "π*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v217, "πανηλίθια", "π*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v218, "πανίβλακα", "π*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v219, "παλιοπούστης", "π**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v220, "παλιοπούστηδων", "π************ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v221, "παλιοπούστηδες", "π************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v222, "παλιομετανάστη", "π************η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v223, "παλιομαλάκα", "π*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v224, "παλιολουμπίνα", "π***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v225, "παλιολινάτσες", "π***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v226, "παλιολινάτσα", "π**********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v227, "παλιοκομμούνι", "π***********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v228, "πέη", "π*η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v229, "ξώπετση", "ξ*****η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v230, "ξώβυζη", "ξ****η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v231, "ξενογάμησε", "ξ********ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v232, "ξεκώλιασμα", "ξ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v233, "ξέκωλο", "ξ****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v234, "ξέκωλα", "ξ****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v235, "ξέκολων", "ξ*****ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v236, "νέγρων", "ν****ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v237, "νέγρου", "ν****υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v238, "νέγρος", "ν****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v239, "νέγροι", "ν****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v240, "νέγρικο", "ν*****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v241, "νέγρικα", "ν*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v242, "νέγρες", "ν****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v243, "νέγρα", "ν***α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v244, "μπουχέσες", "μ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v245, "μπουχέσας", "μ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v246, "μπουφονεοέλληνας", "μ**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v247, "μπουρτζόβλαχους", "μ*************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v248, "μπουρτζόβλαχος", "μ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v249, "μπουρτζόβλαχοι", "μ************ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v250, "μπουρδέλων", "μ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v251, "μπουρδέλου", "μ********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v252, "μπουρδέλο", "μ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v253, "μπουρδέλα", "μ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v254, "μπορντέλου", "μ********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v255, "μπορδέλου", "μ*******υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v256, "μπινέδες", "μ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v257, "μπινέ", "μ***έ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v258, "μπετόβλακας", "μ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v259, "μπετόβλακα", "μ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v260, "μπαστουνόβλαχοι", "μ*************ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v261, "μπασταρδεύει", "μ**********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v262, "μπασταρδεμένος", "μ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v263, "μπασταρδεμένο", "μ***********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v264, "μπαρουφολόγους", "μ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v265, "μπάφους", "μ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v266, "μπάσταρδους", "μ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v267, "μπάσταρδου", "μ********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v268, "μπάσταρδοι", "μ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v269, "μπάσταρδε", "μ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v270, "μπάσταρδα", "μ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v271, "μούλος", "μ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v272, "μουνόπανο", "μ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v273, "μουνόπανα", "μ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v274, "μουνιά", "μ****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v275, "μουνί", "μ***ί");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v276, "μουνάκι", "μ*****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v277, "μογγολοτόμαρα", "μ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v278, "μαστούρια", "μ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v279, "μαμίσιοι", "μ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v280, "μαλαπέρδα", "μ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v281, "μαλακοπίτουρες", "μ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v282, "μαλακισμένα", "μ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v283, "μαλακιζόμαστε", "μ***********ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v284, "μαλακίες", "μ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v285, "μαλακίας", "μ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v286, "μαλακία", "μ*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v287, "μαλακάκο", "μ******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v288, "μαλάκες", "μ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v289, "μαλάκας", "μ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v290, "μαλάκα", "μ****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v291, "λούληδες", "λ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v292, "λούγκρες", "λ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v293, "λουλάκι", "λ*****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v294, "λελές", "λ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v295, "κώλωσαν", "κ*****ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v296, "κώλους", "κ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v297, "κώλου", "κ***υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v298, "κώλος", "κ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v299, "κώλοι", "κ***ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v300, "κώλο", "κ**ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v301, "κόπανου", "κ*****υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v302, "κόπανος", "κ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v303, "κόπανε", "κ****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v304, "κωλώσουν", "κ******ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v305, "κωλώσεις", "κ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v306, "κωλώνανε", "κ******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v307, "κωλόχαρτο", "κ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v308, "κωλόσπιτο", "κ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v309, "κωλόσπιτα", "κ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v310, "κωλόπανο", "κ******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v311, "κωλόπαιδο", "κ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v312, "κωλόπαιδα", "κ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v313, "κωλόμπαρα", "κ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v314, "κωλόγρια", "κ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v315, "κωλοχώρι", "κ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v316, "κωλοχώρα", "κ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v317, "κωλοχαρακτήρας", "κ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v318, "κωλοχαρακτήρα", "κ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v319, "κωλοχανείο", "κ********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v320, "κωλοφυλλάδα", "κ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v321, "κωλοφάναρο", "κ********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v322, "κωλοτρυπίδα", "κ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v323, "κωλοπαιδαρισμού", "κ*************ύ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v324, "κωλομπαράς", "κ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v325, "κωλομπαράδων", "κ**********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v326, "κωλομπαράδες", "κ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v327, "κωλομέρια", "κ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v328, "κωλοκυβέρνηση", "κ***********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v329, "κωλοκατάσταση", "κ***********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v330, "κωλοβυσμάτων", "κ**********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v331, "κωλοβαράνε", "κ********ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v332, "κωλοαπόφαση", "κ*********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v333, "κωλοαλβανός", "κ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v334, "κωλαράκι", "κ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v335, "κρυόκωλοι", "κ*******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v336, "κρυφοπηδηχτούλης", "κ**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v337, "κουραδόμαγκες", "κ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v338, "κουράδες", "κ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v339, "κουράδα", "κ*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v340, "κουνουπιδόμαγκα", "κ*************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v341, "κουλομαρία", "κ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v342, "κουλή", "κ***ή");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v343, "κλαπαρχίδης", "κ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v344, "κλανιές", "κ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v345, "κλανιάρης", "κ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v346, "κλανιά", "κ****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v347, "κλάσιμο", "κ*****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v348, "κλάσει", "κ****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v349, "κλάνουν", "κ*****ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v350, "κενυαπίθηκος", "κ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v351, "καύλωσε", "κ*****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v352, "καύλα", "κ***α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v353, "καυλωμένη", "κ*******η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v354, "κατσίφλωροι", "κ*********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v355, "κατουρλού", "κ*******ύ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v356, "κατουρλήδες", "κ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v357, "καριόλες", "κ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v358, "καργιόλης", "κ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v359, "καργιόληδες", "κ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v360, "καργιόλες", "κ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v361, "καργιόλα", "κ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v362, "καρατσουλάρας", "κ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v363, "καραπουτανάρες", "κ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v364, "καραγκιοζαρίας", "κ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v365, "καραγκιοζάκου", "κ***********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v366, "καραβανάς", "κ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v367, "καράβλαχων", "κ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v368, "καράβλαχους", "κ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v369, "καράβλαχοι", "κ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v370, "καπότες", "κ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v371, "καπότας", "κ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v372, "ζιγκολολεβέντες", "ζ*************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v373, "ευρωλιγούρη", "ε*********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v374, "ευρωλιγουριάς", "ε***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v375, "δούλε", "δ***ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v376, "δούλας", "δ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v377, "δουλικό", "δ*****ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v378, "δουλικά", "δ*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v379, "δουλάκι", "δ*****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v380, "γύφτων", "γ****ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v381, "γύφτους", "γ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v382, "γύφτουλες", "γ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v383, "γύφτου", "γ****υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v384, "γύφτοι", "γ****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v385, "γύφτικου", "γ******υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v386, "γύφτε", "γ***ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v387, "γυφτόπουλα", "γ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v388, "γυφτοσκοπιανών", "γ************ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v389, "γυφτοσκοπιανό", "γ***********ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v390, "γυφτοσκοπιανικής", "γ**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v391, "γυφτιάς", "γ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v392, "γυφτάκια", "γ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v393, "γυαλαμπούκες", "γ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v394, "γρόθο", "γ***ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v395, "γλύφτης", "γ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v396, "γκομενούλες", "γ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v397, "γκομενούλα", "γ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v398, "γκομενιλίκια", "γ**********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v399, "γκομενιλίκι", "γ*********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v400, "γκομενίτσες", "γ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v401, "γκομενάρα", "γ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v402, "γκομενάκια", "γ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v403, "γιδαραίοι", "γ*******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v404, "γεροσάψαλα", "γ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[35],char const(&)[20],0>(v405, "γαϊδουροκαβαλαρία", "γ***************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v406, "γαμώτο", "γ****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v407, "γαμώ", "γ**ώ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v408, "γαμωσταυρίδια", "γ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v409, "γαμούσαμε", "γ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v410, "γαμοτράγουδα", "γ**********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v411, "γαμοσταυρίδια", "γ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v412, "γαμοσταυρίδι", "γ**********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v413, "γαμημένο", "γ******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v414, "γαμημένη", "γ******η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v415, "γαμηθώ", "γ****ώ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v416, "γαμηθούν", "γ******ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v417, "γαμηθείτε", "γ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v418, "γαμείς", "γ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v419, "γαμήσω", "γ****ω");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v420, "γαμήσουμε", "γ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v421, "γαμήσου", "γ*****υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v422, "γαμήσι", "γ****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v423, "γαμήσει", "γ*****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v424, "γαμήσαμε", "γ******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v425, "γαμάτο", "γ****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v426, "γαμάς", "γ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v427, "γαμάει", "γ****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v428, "γάμησε", "γ****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v429, "βυζιά", "β***ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v430, "βυζί", "β**ί");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v431, "βρωμόπουστες", "β**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v432, "βρωμόπουστας", "β**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v433, "βλαχοπορνό", "β********ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v434, "βλαχομπαρόκ", "β*********κ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v435, "βλαχοδήμαρχος", "β***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v436, "βλαχοαμερικάνους", "β**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v437, "βλαχαδερό", "β*******ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v438, "βλαχαδερά", "β*******ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v439, "βλαχάρες", "β******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v440, "βλαχάρα", "β*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v441, "βλαμμένους", "β********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v442, "βλαμμένοι", "β*******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v443, "βλαμμένη", "β******η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v444, "βλακόφατσα", "β********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v445, "βιζιτούδες", "β********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v446, "αυτοχασισώνεται", "α*************ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v447, "αυνάνες", "α*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v448, "αρχιδιακό", "α*******ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v449, "αρχίδια", "α*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v450, "αρχίδι", "α****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v451, "αραπάκος", "α******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v452, "αραπάδες", "α******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v453, "αράπικο", "α*****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v454, "αράπικη", "α*****η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v455, "αράπης", "α****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v456, "αράπηδες", "α******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v457, "αράπη", "α***η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v458, "απάρθενος", "α*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v459, "αντιμπατσικός", "α***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v460, "αναρχοτραμπούκοι", "α**************ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v461, "αναρχοσκούληκα", "α************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v462, "αναρχοκάφρους", "α***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v463, "αναρχοβλαμμένα", "α************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v464, "αναρχοάπλυτα", "α**********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v465, "αλλαξοκωλιές", "α**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v466, "αλητόβιε", "α******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v467, "αλητοτουρίστες", "α************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v468, "αλητονεολαία", "α**********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v469, "αληταριά", "α******ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v470, "αιμοπότη", "α******η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v471, "αιματορούφηδες", "α************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v472, "αερογαμίας", "α********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v473, "αερογάμηδες", "α*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v474, "αδερφάρες", "α*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v475, "αδερφάρα", "α******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v476, "αγάμητες", "α******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v477, "έχεσε", "έ***ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v478, "έχεσα", "έ***α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v479, "έχεζες", "έ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v480, "έκλασε", "έ****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v481, "Χεστήκαμε", "Χ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v482, "Χέσε", "Χ**ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v483, "Τσογλαναραίοι", "Τ***********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v484, "Τσογλανίτσα", "Τ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v485, "Τουρκόφιλη", "Τ********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v486, "Τουρκόσπορους", "Τ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v487, "Τουρκόσποροι", "Τ**********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v488, "Τουρκόγυφτοι", "Τ**********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v489, "Τουρκιστάν", "Τ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v490, "Τουρκιά", "Τ*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v491, "Τουρκαλάδες", "Τ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v492, "Σούφρας", "Σ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v493, "Σεξογλάστρες", "Σ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v494, "Νέγρος", "Ν****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v495, "Νέγροι", "Ν****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v496, "Νέγρικης", "Ν******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v497, "Μπαρουφολόγοι", "Μ***********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v498, "Μπαράς", "Μ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v499, "Μπαλουχιστάν", "Μ**********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v500, "Μούλα", "Μ***α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v501, "Μαλάκα", "Μ****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v502, "Μάπα", "Μ**α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v503, "Λουλού", "Λ****ύ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v504, "Λελέδες", "Λ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v505, "Κουράδες", "Κ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v506, "Κουνίστρας", "Κ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v507, "Κλάσε", "Κ***ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v508, "Κατουρήθηκα", "Κ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v509, "Ευρωλιγούρηδες", "Ε************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v510, "Γύφτοι", "Γ****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v511, "Γερμανοτσολιάδες", "Γ**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v512, "Γερμαναράδων", "Γ**********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v513, "Γερμαναράδες", "Γ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v514, "Γαμήστε", "Γ*****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v515, "Βυζάκια", "Β*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v516, "Αρκουδόγυφτων", "Α***********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v517, "Αλογοσκουφίτσα", "Α************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v518, "Αλβανόγυφτοι", "Α**********ι");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_el(void)::sProfanityData_el, (uint64_t)v4, 0x203uLL);
    for (uint64_t i = 0; i != -3090; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v518[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_el(void)::sProfanityData_el, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_el(void)::sProfanityData_el[0], unk_1EA3D8CE8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8CE8 - GetProfanityFilter_el(void)::sProfanityData_el[0]) >> 4));
}

void sub_1C5E711D0(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 24672;
  uint64_t v4 = -24720;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_it(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  v620[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v4, "zoccolavo", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v5, "zoccolavi", "z*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v6, "zoccolavate", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v7, "zoccolavano", "z*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v8, "zoccolavamo", "z*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v9, "zoccolava", "z*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v10, "zoccolature", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v11, "zoccolatura", "z*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v12, "zoccolato", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v13, "zoccolati", "z*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v14, "zoccolate", "z*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v15, "zoccolata", "z*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v16, "zoccolasti", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v17, "zoccolaste", "z********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v18, "zoccolassimo", "z**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v19, "zoccolassi", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v20, "zoccolassero", "z**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v21, "zoccolasse", "z********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v22, "zoccolarono", "z*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v23, "zoccolare", "z*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v24, "zoccolar", "z******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v25, "zoccolanti", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v26, "zoccolante", "z********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v27, "zoccolano", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v28, "zoccolando", "z********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v29, "zoccolammo", "z********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v30, "zoccolaio", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v31, "zoccolai", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v32, "zoccola", "z*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v33, "zizze", "z***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v34, "zizza", "z***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v35, "zinne", "z***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v36, "zinna", "z***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v37, "vaffanculo", "v********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v38, "trombò", "t****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v39, "trombino", "t******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v40, "trombiate", "t*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v41, "trombiamo", "t*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "tromberò", "t******ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "tromberà", "t******à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v44, "tromberete", "t********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v45, "tromberesti", "t*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v46, "trombereste", "t*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v47, "tromberemo", "t********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v48, "tromberemmo", "t*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v49, "tromberei", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v50, "tromberebbero", "t***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v51, "tromberebbe", "t*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v52, "tromberanno", "t*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v53, "tromberai", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v54, "trombavo", "t******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v55, "trombavi", "t******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v56, "trombavate", "t********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v57, "trombavano", "t********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v58, "trombavamo", "t********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v59, "trombava", "t******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v60, "trombato", "t******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "trombati", "t******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v62, "trombate", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v63, "trombata", "t******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v64, "trombasti", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v65, "trombaste", "t*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v66, "trombassimo", "t*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v67, "trombassi", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v68, "trombassero", "t*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v69, "trombasse", "t*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v70, "trombarono", "t********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v71, "trombare", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v72, "trombar", "t*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v73, "trombanti", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v74, "trombante", "t*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v75, "trombano", "t******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v76, "trombando", "t*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v77, "trombammo", "t*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v78, "trombai", "t*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v79, "troioni", "t*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v80, "troione", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "troiona", "t*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v82, "troiaio", "t*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v83, "troiai", "t****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v84, "troia", "t***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v85, "travoni", "t*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v86, "travone", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "terroni", "t*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "terrone", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v89, "terrona", "t*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v90, "succhiacazzo", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v91, "succhiacazzi", "s**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v92, "stronzo", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "stronzi", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v94, "stronza", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v95, "sputtanò", "s******ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v96, "sputtano", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v97, "sputtanino", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v98, "sputtaniate", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v99, "sputtaniamo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v100, "sputtani", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v101, "sputtanerò", "s********ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v102, "sputtanerà", "s********à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v103, "sputtanerete", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v104, "sputtaneresti", "s***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v105, "sputtanereste", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v106, "sputtaneremo", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v107, "sputtaneremmo", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v108, "sputtanerei", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v109, "sputtanerebbero", "s*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v110, "sputtanerebbe", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v111, "sputtaneranno", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v112, "sputtanerai", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v113, "sputtanavo", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v114, "sputtanavi", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v115, "sputtanavate", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v116, "sputtanavano", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v117, "sputtanavamo", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v118, "sputtanava", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v119, "sputtanato", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v120, "sputtanati", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v121, "sputtanate", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v122, "sputtanata", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v123, "sputtanasti", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v124, "sputtanaste", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v125, "sputtanassimo", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v126, "sputtanassi", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v127, "sputtanassero", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v128, "sputtanasse", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v129, "sputtanarono", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v130, "sputtanare", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v131, "sputtanar", "s*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v132, "sputtananti", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v133, "sputtanante", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v134, "sputtanano", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v135, "sputtanando", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v136, "sputtanammo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v137, "sputtanai", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v138, "sputtana", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v139, "sporco negro", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v140, "sporca negra", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v141, "scoreggiai", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v142, "scoreggia", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v143, "scoreggi", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v144, "scoreggerò", "s********ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v145, "scoreggerà", "s********à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v146, "scoreggerete", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v147, "scoreggeresti", "s***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v148, "scoreggereste", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v149, "scoreggeremo", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v150, "scoreggeremmo", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v151, "scoreggerei", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v152, "scoreggerebbero", "s*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v153, "scoreggerebbe", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v154, "scoreggeranno", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v155, "scoreggerai", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v156, "scoregge", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v157, "scopata", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v158, "scopalo", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v159, "scopale", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v160, "scopala", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v161, "scazzavi", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v162, "scazzatone", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v163, "scazzati", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v164, "scazzatevi", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v165, "scazzatemi", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v166, "scazzarvi", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v167, "scazzarti", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v168, "scazzarsi", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v169, "scazzarmi", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v170, "scassacazzo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v171, "sborro", "s****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v172, "sborrino", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v173, "sborriate", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v174, "sborriamo", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v175, "sborri", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v176, "sborrerete", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v177, "sborreresti", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v178, "sborrereste", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v179, "sborreremo", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v180, "sborreremmo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v181, "sborrerei", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v182, "sborrerebbero", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v183, "sborrerebbe", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v184, "sborreranno", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v185, "sborrerai", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v186, "sborrer", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v187, "sborre", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v188, "sborravo", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v189, "sborravi", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v190, "sborravate", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v191, "sborravano", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v192, "sborravamo", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v193, "sborrava", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v194, "sborrato", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v195, "sborrati", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v196, "sborrate", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v197, "sborrata", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v198, "sborrasti", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v199, "sborraste", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v200, "sborrassimo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v201, "sborrassi", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v202, "sborrassero", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v203, "sborrasse", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v204, "sborrarti", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v205, "sborrarono", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v206, "sborrare", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v207, "sborrarci", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v208, "sborranti", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v209, "sborrante", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v210, "sborrano", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v211, "sborrando", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v212, "sborrammo", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v213, "sborrai", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v214, "sborra", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v215, "sborr", "s***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v216, "rottoinculo", "r*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v217, "rottinculo", "r********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v218, "rompipalle", "r********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v219, "rompicazzo", "r********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v220, "rincoglionì", "r*********ì");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v221, "rincoglionivo", "r***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v222, "rincoglionivi", "r***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v223, "rincoglionivate", "r*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v224, "rincoglionivano", "r*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v225, "rincoglionivamo", "r*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v226, "rincoglioniva", "r***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v227, "rincoglionito", "r***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v228, "rincoglioniti", "r***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v229, "rincoglionite", "r***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v230, "rincoglionita", "r***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v231, "rincoglionisti", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v232, "rincoglioniste", "r************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v233, "rincoglionissimo", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v234, "rincoglionissi", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v235, "rincoglionissero", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v236, "rincoglionisse", "r************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v237, "rincoglioniscono", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v238, "rincoglionisco", "r************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v239, "rincoglionisci", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v240, "rincoglionisce", "r************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v241, "rincoglioniscano", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v242, "rincoglionisca", "r************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v243, "rincoglionirò", "r***********ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v244, "rincoglionirà", "r***********à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v245, "rincoglionirono", "r*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v246, "rincoglionirete", "r*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v247, "rincoglioniresti", "r**************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v248, "rincoglionireste", "r**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v249, "rincoglioniremo", "r*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v250, "rincoglioniremmo", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v251, "rincoglionirei", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v252, "rincoglionirebbero", "r****************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v253, "rincoglionirebbe", "r**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v254, "rincoglionire", "r***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v255, "rincoglioniranno", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v256, "rincoglionirai", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v257, "rincoglionir", "r**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v258, "rincoglionimmo", "r************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v259, "rincoglionii", "r**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v260, "rincoglioniate", "r************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v261, "rincoglioniamo", "r************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v262, "rincoglionenti", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v263, "rincoglionente", "r************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v264, "rincoglionendo", "r************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v265, "puttane", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v266, "puttana", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v267, "pompino", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v268, "pisciò", "p****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v269, "piscio", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v270, "piscino", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v271, "pisciavo", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v272, "pisciavi", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v273, "pisciavate", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v274, "pisciavano", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v275, "pisciavamo", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v276, "pisciava", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v277, "pisciatoio", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v278, "pisciatoi", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v279, "pisciato", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v280, "pisciate", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v281, "pisciata", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v282, "pisciasti", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v283, "pisciaste", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v284, "pisciassimo", "p*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v285, "pisciassi", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v286, "pisciassero", "p*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v287, "pisciasse", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v288, "pisciarono", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v289, "pisciare", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v290, "pisciar", "p*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v291, "piscianti", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v292, "pisciante", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v293, "pisciano", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v294, "pisciando", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v295, "pisciamo", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v296, "pisciammo", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v297, "pisciai", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v298, "piscia", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v299, "pisci", "p***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v300, "piscerò", "p*****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v301, "piscerà", "p*****à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v302, "piscerete", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v303, "pisceresti", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v304, "piscereste", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v305, "pisceremo", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v306, "pisceremmo", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v307, "piscerei", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v308, "piscerebbero", "p**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v309, "piscerebbe", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v310, "pisceranno", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v311, "piscerai", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v312, "pisce", "p***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v313, "pecorine", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v314, "pecorina", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v315, "negro", "n***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v316, "negra", "n***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v317, "mortacci", "m******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v318, "minchionò", "m*******ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v319, "minchiono", "m*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v320, "minchionino", "m*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v321, "minchioniate", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v322, "minchioniamo", "m**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v323, "minchioni", "m*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v324, "minchionerò", "m*********ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v325, "minchionerà", "m*********à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v326, "minchionerete", "m***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v327, "minchioneresti", "m************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v328, "minchionereste", "m************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v329, "minchioneremo", "m***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v330, "minchioneremmo", "m************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v331, "minchionerei", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v332, "minchionerebbero", "m**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v333, "minchionerebbe", "m************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v334, "minchioneranno", "m************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v335, "minchionerai", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v336, "minchione", "m*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v337, "minchionavo", "m*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v338, "minchionavi", "m*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v339, "minchionavate", "m***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v340, "minchionavano", "m***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v341, "minchionavamo", "m***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v342, "minchionava", "m*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v343, "minchionato", "m*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v344, "minchionati", "m*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v345, "minchionate", "m*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v346, "minchionata", "m*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v347, "minchionasti", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v348, "minchionaste", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v349, "minchionassimo", "m************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v350, "minchionassi", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v351, "minchionassero", "m************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v352, "minchionasse", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v353, "minchionarono", "m***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v354, "minchionare", "m*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v355, "minchionar", "m********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v356, "minchionanti", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v357, "minchionante", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v358, "minchionano", "m*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v359, "minchionando", "m**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v360, "minchionammo", "m**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v361, "minchionai", "m********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v362, "minchionaggini", "m************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v363, "minchionaggine", "m************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v364, "minchiona", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v365, "minchiata", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v366, "minchia", "m*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v367, "mignotte", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v368, "mignotta", "m******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v369, "merdoso", "m*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v370, "merdosissimo", "m**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v371, "merdosissimi", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v372, "merdosissime", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v373, "merdosissima", "m**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v374, "merdosamente", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v375, "merdosa", "m*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v376, "merde", "m***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v377, "merdaccia", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v378, "merda", "m***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v379, "magnaccia", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v380, "inculerà", "i******à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v381, "inculerei", "i*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v382, "inculato", "i******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v383, "inculata", "i******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v384, "inculare", "i******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v385, "incazzò", "i*****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v386, "incazzo", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v387, "incazzino", "i*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v388, "incazziate", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v389, "incazziamoci", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v390, "incazziamo", "i********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v391, "incazzi", "i*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v392, "incazzerò", "i*******ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v393, "incazzerà", "i*******à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v394, "incazzerete", "i*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v395, "incazzeresti", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v396, "incazzereste", "i**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v397, "incazzeremo", "i*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v398, "incazzeremmo", "i**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v399, "incazzerei", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v400, "incazzerebbero", "i************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v401, "incazzerebbe", "i**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v402, "incazzeranno", "i**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v403, "incazzerai", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v404, "incazzer", "i******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v405, "incazzavo", "i*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v406, "incazzavi", "i*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v407, "incazzavate", "i*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v408, "incazzavano", "i*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v409, "incazzavamo", "i*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v410, "incazzava", "i*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v411, "incazzato", "i*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v412, "incazzatici", "i*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v413, "incazzati", "i*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v414, "incazzatevi", "i*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v415, "incazzatemi", "i*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v416, "incazzate", "i*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v417, "incazzata", "i*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v418, "incazzasti", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v419, "incazzaste", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v420, "incazzassimo", "i**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v421, "incazzassi", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v422, "incazzassero", "i**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v423, "incazzasse", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v424, "incazzarvi", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v425, "incazzarti", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v426, "incazzarsi", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v427, "incazzarono", "i*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v428, "incazzarmi", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v429, "incazzare", "i*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v430, "incazzarci", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v431, "incazzar", "i******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v432, "incazzanti", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v433, "incazzante", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v434, "incazzano", "i*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v435, "incazzandovi", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v436, "incazzandoti", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v437, "incazzandomi", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v438, "incazzandoci", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v439, "incazzando", "i********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v440, "incazzammo", "i********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v441, "incazzai", "i******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v442, "incazza", "i*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v443, "incazz", "i****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v444, "frocio", "f****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v445, "froci", "f***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v446, "fottuto", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v447, "fottiti", "f*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v448, "fottere", "f*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v449, "fotter", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v450, "figa", "f**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v451, "fica", "f**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v452, "fatti una sega", "f***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v453, "farti una sega", "f***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v454, "farsi una sega", "f***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v455, "farci una sega", "f***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v456, "fanculo", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v457, "fancazzisti", "f*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v458, "fancazziste", "f*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v459, "fancazzista", "f*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v460, "fammi una sega", "f***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v461, "ditalino", "d******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v462, "ditalini", "d******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v463, "culo", "c**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v464, "culi", "c**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v465, "culattoni", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v466, "culattone", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v467, "cornuto", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v468, "coglioni", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v469, "coglione", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v470, "chiavò", "c****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v471, "chiavo", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v472, "chiavino", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v473, "chiaviate", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v474, "chiaviamo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v475, "chiaverò", "c******ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v476, "chiaverà", "c******à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v477, "chiaverete", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v478, "chiaveresti", "c*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v479, "chiavereste", "c*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v480, "chiaveremo", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v481, "chiaveremmo", "c*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v482, "chiaverei", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v483, "chiaverebbero", "c***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v484, "chiaverebbe", "c*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v485, "chiaveranno", "c*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v486, "chiaverai", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v487, "chiavavo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v488, "chiavavi", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v489, "chiavavate", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v490, "chiavavano", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v491, "chiavavamo", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v492, "chiavava", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v493, "chiavato", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v494, "chiavati", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v495, "chiavate", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v496, "chiavata", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v497, "chiavasti", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v498, "chiavaste", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v499, "chiavassimo", "c*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v500, "chiavassi", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v501, "chiavassero", "c*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v502, "chiavasse", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v503, "chiavarono", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v504, "chiavare", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v505, "chiavar", "c*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v506, "chiavanti", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v507, "chiavante", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v508, "chiavano", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v509, "chiavando", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v510, "chiavammo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v511, "chiavai", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v512, "chiava", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v513, "checche", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v514, "checca", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v515, "cesso", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v516, "cazzuto", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v517, "cazzuti", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v518, "cazzute", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v519, "cazzuta", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v520, "cazzoni", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v521, "cazzone", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v522, "cazzo", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v523, "cazziatoni", "c********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v524, "cazziatone", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v525, "cazzi", "c***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v526, "cazzate", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v527, "cazzata", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v528, "cazza", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v529, "cagò", "c**ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v530, "cago", "c**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v531, "caghino", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v532, "caghiate", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v533, "caghiamo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v534, "caghi", "c***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v535, "cagherò", "c*****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v536, "cagherà", "c*****à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v537, "cagherete", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v538, "cagheresti", "c********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v539, "caghereste", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v540, "cagheremo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v541, "cagheremmo", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v542, "cagherei", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v543, "cagherebbero", "c**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v544, "cagherebbe", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v545, "cagheranno", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v546, "cagherai", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v547, "cagavo", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v548, "cagavi", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v549, "cagavate", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v550, "cagavano", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v551, "cagavamo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v552, "cagava", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v553, "cagato", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v554, "cagati", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v555, "cagate", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v556, "cagata", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v557, "cagasti", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v558, "cagaste", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v559, "cagassimo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v560, "cagassi", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v561, "cagassero", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v562, "cagasse", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v563, "cagarono", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v564, "cagare", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v565, "cagar", "c***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v566, "caganti", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v567, "cagante", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v568, "cagano", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v569, "cagando", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v570, "cagammo", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v571, "cagai", "c***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v572, "cagacazzo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v573, "caga", "c**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v574, "cacò", "c**ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v575, "cachino", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v576, "cachiate", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v577, "cachiamo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v578, "cacherò", "c*****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v579, "cacherà", "c*****à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v580, "cacherete", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v581, "cacheresti", "c********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v582, "cachereste", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v583, "cacheremo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v584, "cacheremmo", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v585, "cacherei", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v586, "cacherebbero", "c**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v587, "cacherebbe", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v588, "cacheranno", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v589, "cacherai", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v590, "cacca", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v591, "cacavo", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v592, "cacavi", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v593, "cacavate", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v594, "cacavano", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v595, "cacavamo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v596, "cacava", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v597, "cacatoio", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v598, "cacatoi", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v599, "cacato", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v600, "cacati", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v601, "cacate", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v602, "cacata", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v603, "cacasti", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v604, "cacaste", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v605, "cacassimo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v606, "cacassi", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v607, "cacassero", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v608, "cacasse", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v609, "cacarono", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v610, "cacare", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v611, "cacar", "c***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v612, "cacanti", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v613, "cacante", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v614, "cacano", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v615, "cacando", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v616, "cacammo", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v617, "cacai", "c***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v618, "cacacazzo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v619, "bastardo", "b******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v620, "bastarda", "b******a");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_it(void)::sProfanityData_it, (uint64_t)v4, 0x269uLL);
    for (uint64_t i = 0; i != -3702; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v620[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_it(void)::sProfanityData_it, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_it(void)::sProfanityData_it[0], unk_1EA3D8D08, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8D08 - GetProfanityFilter_it(void)::sProfanityData_it[0]) >> 4));
}

void sub_1C5E76404(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 29568;
  uint64_t v4 = -29616;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_ca(void *a1)
{
  void v84[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v4, "xoxo", "x**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v5, "tortilleres", "t*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v6, "torrapebrots", "t**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v7, "tonto", "t***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v8, "tonta", "t***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v9, "superxarnegu", "s**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v10, "subnormal", "s*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v11, "reputíssima", "r*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v12, "rehòstia", "r******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v13, "recony", "r****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[18],0>(v14, "recontraputíssima", "r***************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v15, "recollons", "r*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v16, "putu", "p**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v17, "putot", "p***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v18, "puto", "p**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v19, "putiferi", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "puteta", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v21, "puteria", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v22, "putejat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v23, "putejar", "p*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v24, "putejant", "p******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v25, "putassa", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v26, "putada", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v27, "puta", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v28, "porca", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v29, "polla", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v30, "poca-vergonya", "p***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v31, "poca-solta", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v32, "pardala", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v33, "pardal", "p****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v34, "panoli", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v35, "pakis", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v36, "pècora", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v37, "negrates", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v38, "negrata", "n*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v39, "merdos", "m****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v40, "merda", "m***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v41, "megapolla", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v42, "maricons", "m******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v43, "mariconades", "m*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v44, "maricóna", "m******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v45, "maricón", "m*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v46, "malparits", "m*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v47, "malparit", "m******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v48, "malparides", "m********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v49, "malparida", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v50, "malfollades", "m*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v51, "malcarat", "m******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v52, "malcarada", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v53, "llepaculs", "l*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v54, "jilipolles", "j********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v55, "imbècil", "i*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v56, "idiota", "i****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v57, "gitanada", "g******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v58, "gilipollisme", "g**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v59, "gilipolles", "g********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v60, "gilipolla", "g*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v61, "garrepa", "g*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v62, "filldeputisme", "f***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v63, "esconyat", "e******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v64, "esconyar", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v65, "descollono", "d********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v66, "descollonar", "d*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v67, "conyàs", "c****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v68, "cony", "c**y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v69, "collons", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v70, "collonades", "c********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v71, "colló", "c***ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "catalufo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v73, "catalufes", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v74, "cagondéu", "c******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v75, "cabrons", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v76, "cabrones", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v77, "cabrona", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v78, "cabronàs", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v79, "cabró", "c***ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v80, "botiflera", "b*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v81, "botifler", "b******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v82, "borinota", "b******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v83, "borinot", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v84, "bleda", "b***a");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ca(void)::sProfanityData_ca, (uint64_t)v4, 0x51uLL);
    for (uint64_t i = 480; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v4[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ca(void)::sProfanityData_ca, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_ca(void)::sProfanityData_ca[0], unk_1EA3D8D28, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8D28 - GetProfanityFilter_ca(void)::sProfanityData_ca[0]) >> 4));
}

void sub_1C5E76EF4(_Unwind_Exception *a1)
{
  for (uint64_t i = 3840; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_cs(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v223[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v4, "šulina", "š****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v5, "šukat", "š***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v6, "šoustají", "š******í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v7, "řiťolezectví", "ř**********í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v8, "řiťlezkové", "ř********é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "řitě", "ř**ě");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "řití", "ř**í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v11, "řitního", "ř*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v12, "čuráci", "č****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v13, "černoprdelníky", "č************y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v14, "černoprdelníka", "č************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v15, "zmrdu", "z***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v16, "zmrdi", "z***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v17, "zmrde", "z***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "zkurví", "z****í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v19, "zkurvená", "z******á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v20, "zkurvenou", "z*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v21, "zkurvenej", "z*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "zesrat", "z****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v23, "zblitky", "z*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v24, "zblblý", "z****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v25, "zblblíků", "z******ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v26, "zblblíci", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v27, "zblblá", "z****á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v28, "zasraný", "z*****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v29, "zasraném", "z******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v30, "zasranou", "z******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v31, "vyčůránků", "v*******ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v32, "vyčůraný", "v******ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v33, "vyčuraností", "v*********í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v34, "vysrat", "v****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v35, "vyserte", "v*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v36, "vyser", "v***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v37, "vyprdnou", "v******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v38, "vypatlanců", "v********ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v39, "vyjebávat", "v*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v40, "vyfakoval", "v*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v41, "vychcánkové", "v*********é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "vychcané", "v******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v43, "vychcanosti", "v*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v44, "vychcanost", "v********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v45, "vožraly", "v*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v46, "vožralej", "v******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v47, "vojebe", "v****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v48, "ultrahovadech", "u***********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v49, "tupounu", "t*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "tupounku", "t******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v51, "trotlovsky", "t********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v52, "trotla", "t****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v53, "teploušská", "t********á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v54, "teplouš", "t*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v55, "sračkách", "s******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v56, "sračky", "s****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v57, "socky", "s***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v58, "sockou", "s****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v59, "socka", "s***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v60, "shit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v61, "seru", "s**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v62, "serou", "s***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v63, "sereš", "s***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v64, "sereme", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v65, "sere", "s**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v66, "ser", "s*r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v67, "senzidebila", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v68, "rozumprdi", "r*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v69, "rozesralo", "r*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v70, "rozesere", "r******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "retarde", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v72, "retard", "r****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[12],0>(v73, "přiožralých", "p*********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v74, "přiblblých", "p********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v75, "přiblblý", "p******ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v76, "přiblblíkem", "p*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v77, "přiblblíka", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v78, "přiblblé", "p******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v79, "přiblblou", "p*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v80, "přečůrat", "p******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v81, "přečuráme", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[13],0>(v82, "přechcávání", "p*********í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v83, "píči", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v84, "píča", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v85, "průseru", "p*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v86, "průserem", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v87, "průser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v88, "prďolu", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v89, "prdi", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v90, "prdelky", "p*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v91, "prdeli", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v92, "prdele", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v93, "prdel", "p***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v94, "prde", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v95, "prcičky", "p*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v96, "posrat", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v97, "posraných", "p*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v98, "posraný", "p*****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "posrali", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v100, "posral", "p****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v101, "poserů", "p****ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v102, "poseru", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v103, "poserou", "p*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v104, "poser", "p***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v105, "pičovina", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v106, "pička", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v107, "pindíka", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v108, "pakem", "p***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v109, "pablbek", "p*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v110, "ožralý", "o****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v111, "ožerou", "o****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v112, "ošoustat", "o******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v113, "osrati", "o****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v114, "ojebávat", "o******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v115, "nepochčijou", "n*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v116, "nepochčiješ", "n*********š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v117, "nechcačky", "n*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v118, "nasrání", "n*****í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v119, "nasrat", "n****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v120, "nasraný", "n*****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v121, "nasral", "n****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v122, "naserete", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v123, "naser", "n***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v124, "mrdákov", "m*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v125, "mrdkou", "m****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v126, "mrdka", "m***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v127, "mrdat", "m***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v128, "mamrdi", "m****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v129, "magora", "m****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v130, "lesbicky", "l******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v131, "kurvy", "k***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v132, "kurvou", "k****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v133, "kurvo", "k***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v134, "kurva", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v135, "kuruovců", "k******ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v136, "kurevsky", "k******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v137, "kurev", "k***v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v138, "kundy", "k***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v139, "krávovina", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v140, "kreténi", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v141, "kravině", "k*****ě");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v142, "kravinami", "k*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v143, "kravina", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v144, "kravin", "k****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v145, "kokoty", "k****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v146, "kokotský", "k******ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v147, "kokotiny", "k******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v148, "kokotek", "k*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v149, "kokote", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v150, "kokot", "k***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v151, "jebne", "j***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v152, "hovno", "h***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v153, "hovna", "h***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v154, "hoven", "h***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v155, "homoušům", "h******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v156, "heteráci", "h******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v157, "hajzlů", "h****ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v158, "hajzlu", "h****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v159, "hajzlpapír", "h********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v160, "hajzlové", "h******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v161, "hajzle", "h****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v162, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v163, "frnda", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v164, "feťáků", "f****ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v165, "feťáky", "f****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v166, "feťáci", "f****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v167, "feťačka", "f*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v168, "feťačce", "f*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v169, "děvkách", "d*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v170, "děvky", "d***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v171, "děvkař", "d****ř");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v172, "děvka", "d***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v173, "dementů", "d*****ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v174, "dementy", "d*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v175, "dementem", "d******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v176, "demente", "d*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v177, "dementat", "d******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v178, "dementa", "d*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v179, "dement", "d****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v180, "debílek", "d*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v181, "debile", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v182, "cigošům", "c*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v183, "cigoše", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v184, "cigoš", "c***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v185, "chčijou", "c*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v186, "chcačky", "c*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v187, "chcanky", "c*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v188, "buzioblečku", "b*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v189, "buziku", "b****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v190, "buzerantů", "b*******ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v191, "buzerant", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v192, "blbů", "b**ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v193, "blbý", "b**ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v194, "blbínku", "b*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v195, "blbí", "b**í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v196, "blbého", "b****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v197, "blbé", "b**é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v198, "blbá", "b**á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v199, "blby", "b**y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v200, "blbu", "b**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v201, "blbovi", "b****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v202, "blboučtí", "b******í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v203, "blbouny", "b*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v204, "blbou", "b***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v205, "blbostí", "b*****í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v206, "blbosti", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v207, "blbost", "b****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v208, "blbnout", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v209, "blbne", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v210, "blbka", "b***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v211, "blbino", "b****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v212, "blbi", "b**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v213, "blbečky", "b*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v214, "blbečku", "b*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v215, "blbečkové", "b*******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v216, "blbečci", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v217, "blbejch", "b*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v218, "blbe", "b**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v219, "blbců", "b***ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v220, "blbci", "b***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v221, "blbce", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v222, "blba", "b**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v223, "blb", "b*b");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_cs(void)::sProfanityData_cs, (uint64_t)v4, 0xDCuLL);
    for (uint64_t i = 0; i != -1320; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v223[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_cs(void)::sProfanityData_cs, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_cs(void)::sProfanityData_cs[0], unk_1EA3D8D48, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8D48 - GetProfanityFilter_cs(void)::sProfanityData_cs[0]) >> 4));
}

void sub_1C5E78C70(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 10512;
  uint64_t v4 = -10560;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_ru(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  v1213[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v4, "ёбля", "ё**я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v5, "ёбат", "ё**т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v6, "ёбарь", "ё***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v7, "ёбаный", "ё****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v8, "ёбаную", "ё****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v9, "ёбанный", "ё*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v10, "ёбаная", "ё****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v11, "ёбан", "ё**н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v12, "шлюха", "ш***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v13, "хуёвый", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v14, "хуёвое", "х****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v15, "хуёвая", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v16, "хуя", "х*я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v17, "хуйям", "х***м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v18, "хуйчик", "х****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v19, "хуйцы", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v20, "хуйцу", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v21, "хуйцом", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v22, "хуйцов", "х****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v23, "хуйцо", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v24, "хуйце", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v25, "хуйцах", "х****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v26, "хуйцам", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v27, "хуйца", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v28, "хуйхуй", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v29, "хуйхаа", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v30, "хуйфон", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v31, "хуйтэн", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v32, "хуйты", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v33, "хуйту", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v34, "хуйто", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v35, "хуйте", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v36, "хуйтам", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v37, "хуйта", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v38, "хуйски", "х****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v39, "хуйрик", "х****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v40, "хуйота", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v41, "хуйовый", "х*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v42, "хуйовые", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v43, "хуйовое", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v44, "хуйово", "х****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v45, "хуйовая", "х*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v46, "хуйова", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v47, "хуйнёт", "х****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v48, "хуйнём", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v49, "хуйнёй", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v50, "хуйняя", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v51, "хуйняшка", "х******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v52, "хуйнях", "х****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v53, "хуйняс", "х****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v54, "хуйняно", "х*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v55, "хуйняне", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v56, "хуйнями", "х*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v57, "хуйняи", "х****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v58, "хуйняв", "х****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v59, "хуйняа", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v60, "хуйня", "х***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v61, "хуйнюя", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v62, "хуйнюю", "х****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v63, "хуйнюшку", "х******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v64, "хуйнюшки", "х******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v65, "хуйнюшка", "х******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v66, "хуйнюша", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v67, "хуйнюну", "х*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v68, "хуйню", "х***ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v69, "хуйнуть", "х*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v70, "хуйнулся", "х******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v71, "хуйнуло", "х*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v72, "хуйнули", "х*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v73, "хуйнула", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v74, "хуйнул", "х****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v75, "хуйну", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v76, "хуйной", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v77, "хуйно", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v78, "хуйнища", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v79, "хуйните", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v80, "хуйни", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v81, "хуйнеё", "х****ё");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v82, "хуйнею", "х****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v83, "хуйнет", "х****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v84, "хуйнем", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v85, "хуйней", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v86, "хуйнее", "х****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v87, "хуйне", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v88, "хуйная", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v89, "хуйнаны", "х*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v90, "хуйнана", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v91, "хуйна", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v92, "хуйль", "х***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v93, "хуйлыга", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v94, "хуйлы", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v95, "хуйлу", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v96, "хуйлоша", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v97, "хуйлом", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v98, "хуйло", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v99, "хуйлище", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v100, "хуйлион", "х*****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v101, "хуйли", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v102, "хуйле", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v103, "хуйланы", "х*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v104, "хуйлана", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v105, "хуйлан", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v106, "хуйла", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v107, "хуйком", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v108, "хуйки", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v109, "хуйка", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v110, "хуйи", "х**и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v111, "хуйево", "х****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v112, "хуйда", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v113, "хуйво", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v114, "хуйвей", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v115, "хуй-чего", "х******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v116, "хуй", "х*й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v117, "хуисос", "х****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v118, "хуилы", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v119, "хуилу", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v120, "хуило", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v121, "хуесос", "х****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v122, "хуевый", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v123, "хуевое", "х****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v124, "хуевая", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v125, "хуебля", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v126, "хитровыебанный", "х************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v127, "хер", "х*р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v128, "уёбок", "у***к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v129, "уёбище", "у****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v130, "упиздить", "у******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v131, "уебок", "у***к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v132, "уебище", "у****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v133, "уебать", "у****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v134, "уебаны", "у****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v135, "уебан", "у***н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v136, "трахнуть", "т******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v137, "трахаёб", "т*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v138, "трахать", "т*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v139, "трахатель", "т*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v140, "трахаеб", "т*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(v141, "трахае6", "т*****6");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v142, "съебаться", "с*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v143, "съебать", "с*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v144, "сука", "с**а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v145, "страхопиздище", "с***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v146, "спиздиться", "с********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v147, "спиздить", "с******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v148, "спиздит", "с*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v149, "спиздили", "с******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v150, "спиздила", "с******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v151, "спиздил", "с*****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v152, "спиздеть", "с******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v153, "спиздел", "с*****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v154, "распиздяйство", "р***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v155, "распиздяйка", "р*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v156, "распиздяй", "р*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v157, "распиздон", "р*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v158, "распиздеться", "р**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v159, "распиздай", "р*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v160, "разёбанный", "р********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v161, "разъебаться", "р*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v162, "разъебать", "р*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v163, "разебанный", "р********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v164, "пропиздячить", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v165, "пропиздить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v166, "пропиздеть", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v167, "пропизделся", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v168, "проебаться", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v169, "проебать", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v170, "проебанка", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v171, "проблядь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v172, "припиздюлина", "п**********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v173, "припизднутый", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v174, "припиздить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v175, "припиздень", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v176, "приебаться", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v177, "похуй", "п***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v178, "потрахаться", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v179, "попиздовать", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v180, "попиздили", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v181, "попизди", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v182, "попиздеть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v183, "попиздели", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v184, "поебать", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v185, "подъебать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v186, "пиздёшь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v187, "пиздёш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v188, "пиздёныш", "п******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v189, "пиздёнку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v190, "пиздёнкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v191, "пиздёнки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v192, "пиздёнке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v193, "пиздёнка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v194, "пиздёжь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v195, "пиздёжи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v196, "пиздёжа", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v197, "пиздёж", "п****ж");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v198, "пиздящих", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v199, "пиздящим", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v200, "пиздящий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v201, "пиздящие", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v202, "пиздящее", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v203, "пиздящая", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v204, "пиздяшек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v205, "пиздячу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v206, "пиздячку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v207, "пиздячки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v208, "пиздячить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v209, "пиздячит", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v210, "пиздячил", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v211, "пиздячик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v212, "пиздячек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v213, "пиздячат", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v214, "пиздяться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v215, "пиздять", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v216, "пиздятся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v217, "пиздятну", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v218, "пиздятины", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v219, "пиздятиной", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v220, "пиздятинки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v221, "пиздятинка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v222, "пиздятина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v223, "пиздят", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v224, "пиздярить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v225, "пиздянок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v226, "пиздян", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v227, "пиздяк", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v228, "пиздяй", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v229, "пиздя", "п***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v230, "пиздюшонок", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v231, "пиздюшок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v232, "пиздюшня", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v233, "пиздюшный", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v234, "пиздюшник", "п*******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v235, "пиздюшку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v236, "пиздюшкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v237, "пиздюшки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v238, "пиздюшке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v239, "пиздюшка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v240, "пиздюшечка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v241, "пиздюшек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v242, "пиздюша", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v243, "пиздючье", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v244, "пиздючку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v245, "пиздючкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v246, "пиздючки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v247, "пиздючка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v248, "пиздючий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v249, "пиздючие", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v250, "пиздючек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v251, "пиздюху", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v252, "пиздюхой", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v253, "пиздюхи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v254, "пиздюхе", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v255, "пиздюхать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v256, "пиздюха", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v257, "пиздюрить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v258, "пиздюляшек", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v259, "пиздюлях", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v260, "пиздюляторов", "п**********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v261, "пиздюлями", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v262, "пиздюлям", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v263, "пиздюля", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v264, "пиздюлю", "п*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v265, "пиздюльки", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v266, "пиздюлька", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v267, "пиздюль", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v268, "пиздюлины", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v269, "пиздюлину", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v270, "пиздюлинку", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v271, "пиздюлинки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v272, "пиздюлинка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v273, "пиздюлине", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v274, "пиздюлинами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v275, "пиздюлина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v276, "пиздюлин", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v277, "пиздюликов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v278, "пиздюли", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v279, "пиздюлек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v280, "пиздюлей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v281, "пиздюлеи", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v282, "пиздюлеей", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v283, "пиздюку", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v284, "пиздюком", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v285, "пиздюков", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v286, "пиздюки", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v287, "пиздюками", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v288, "пиздюкам", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v289, "пиздюка", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v290, "пиздюк", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v291, "пиздюдей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v292, "пиздюга", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v293, "пиздю", "п***ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v294, "пиздэйшн", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v295, "пиздэйшен", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v296, "пиздь", "п***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v297, "пиздыя", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v298, "пиздыц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v299, "пиздытый", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v300, "пиздык", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v301, "пизды", "п***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v302, "пиздца", "п****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v303, "пиздуя", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v304, "пиздуют", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v305, "пиздую", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v306, "пиздушку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v307, "пиздушка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v308, "пиздуц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v309, "пиздуховные", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v310, "пиздуу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v311, "пиздунья", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v312, "пиздуны", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v313, "пиздуном", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v314, "пиздунов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v315, "пиздуна", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v316, "пиздун", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v317, "пиздуля", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v318, "пиздулей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v319, "пиздула", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v320, "пиздуйте", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v321, "пиздуйка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v322, "пиздуй", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v323, "пиздуешь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v324, "пиздуете", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v325, "пиздует", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v326, "пиздуем", "п*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v327, "пизду", "п***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v328, "пиздтый", "п*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v329, "пиздрячить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v330, "пиздруй", "п*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v331, "пиздравляю", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v332, "пиздою", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v333, "пиздошу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v334, "пиздошить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v335, "пиздошит", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v336, "пиздохаю", "п******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v337, "пиздохаханьки", "п***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v338, "пиздохать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v339, "пиздохай", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v340, "пиздоу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v341, "пиздоты", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v342, "пиздотина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v343, "пиздота", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v344, "пиздося", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v345, "пиздосья", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v346, "пиздострадашки", "п************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v347, "пиздострадашек", "п************к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v348, "пиздострадатель", "п*************ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v349, "пиздостраданиях", "п*************х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v350, "пиздостраданиями", "п**************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v351, "пиздостраданиям", "п*************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v352, "пиздострадания", "п************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v353, "пиздостраданий", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v354, "пиздострадание", "п************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[39],char const(&)[22],0>(v355, "пиздострадальческий", "п*****************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[39],char const(&)[22],0>(v356, "пиздострадальческие", "п*****************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v357, "пиздострадальцы", "п*************ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v358, "пиздострадальцам", "п**************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v359, "пиздострадалицы", "п*************ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v360, "пиздострадалец", "п************ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v361, "пиздосс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v362, "пиздосов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v363, "пиздосина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v364, "пиздосики", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v365, "пиздосик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v366, "пиздоси", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v367, "пиздосей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v368, "пиздоса", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v369, "пиздос", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v370, "пиздорукий", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v371, "пиздорукая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v372, "пиздорич", "п******ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v373, "пиздорить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v374, "пиздорез", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v375, "пиздорванки", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v376, "пиздорванка", "п*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v377, "пиздорванец", "п*********ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v378, "пиздор", "п****р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v379, "пиздопроёбина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v380, "пиздопроушина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v381, "пиздопротивный", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v382, "пиздопроебины", "п***********ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v383, "пиздопроебина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v384, "пиздоос", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v385, "пиздонуть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v386, "пиздонутые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v387, "пиздони", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v388, "пиздон", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v389, "пиздолить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v390, "пиздолизы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v391, "пиздолизом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v392, "пиздолизов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v393, "пиздолизка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v394, "пиздолизами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v395, "пиздолиза", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v396, "пиздолиз", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v397, "пиздолет", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v398, "пиздокрылая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v399, "пиздокрыл", "п*******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v400, "пиздок", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v401, "пиздой", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v402, "пиздоеб", "п*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v403, "пиздодень", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v404, "пиздодельный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v405, "пиздодельные", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v406, "пиздодельная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v407, "пиздоглазых", "п*********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v408, "пиздоглазыми", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v409, "пиздоглазый", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v410, "пиздоглазые", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v411, "пиздоглазой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v412, "пиздоглазое", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v413, "пиздоглазие", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v414, "пиздоглазая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v415, "пиздоглаз", "п*******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v416, "пиздоган", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v417, "пиздоворот", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v418, "пиздовать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v419, "пиздоватый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v420, "пиздоватые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v421, "пиздоватой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v422, "пиздоватое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v423, "пиздоватая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v424, "пиздовали", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v425, "пиздовала", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v426, "пиздовал", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v427, "пиздов", "п****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v428, "пиздобратия", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v429, "пиздобратию", "п*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v430, "пиздобратии", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v431, "пиздобольством", "п************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v432, "пиздобольство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v433, "пиздобольства", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v434, "пиздоболы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v435, "пиздоболом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v436, "пиздоболов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v437, "пиздоболкой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v438, "пиздоболка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v439, "пиздоболия", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v440, "пиздоболию", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v441, "пиздоболить", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v442, "пиздоболии", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v443, "пиздоболие", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v444, "пиздоболами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v445, "пиздобола", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v446, "пиздобол", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v447, "пиздоблядство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v448, "пиздоблядский", "п***********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v449, "пиздоблядская", "п***********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v450, "пиздоблядина", "п**********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v451, "пиздо", "п***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v452, "пизднц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v453, "пиздлявых", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v454, "пиздлявый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v455, "пиздлявые", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v456, "пиздлявой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v457, "пиздлявая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v458, "пиздлом", "п*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v459, "пиздло", "п****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v460, "пиздливых", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v461, "пиздливым", "п*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v462, "пиздливый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v463, "пиздливые", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v464, "пиздливы", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v465, "пиздливое", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v466, "пиздливая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v467, "пиздлив", "п*****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v468, "пиздия", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v469, "пиздиют", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v470, "пиздию", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v471, "пиздищи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v472, "пиздище", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v473, "пиздища", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v474, "пиздишься", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v475, "пиздишь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v476, "пиздиш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v477, "пиздица", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v478, "пиздиц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v479, "пиздиться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v480, "пиздить", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v481, "пиздится", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v482, "пиздити", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v483, "пиздитесь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v484, "пиздите", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v485, "пиздит", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v486, "пиздис", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v487, "пиздиной", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v488, "пиздинг", "п*****г");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v489, "пиздина", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v490, "пиздимся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v491, "пиздим", "п****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v492, "пиздился", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v493, "пиздилок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v494, "пиздилово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v495, "пиздиловки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v496, "пиздиловка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v497, "пиздилку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v498, "пиздилки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v499, "пиздилка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v500, "пиздились", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v501, "пиздили", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v502, "пиздилась", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v503, "пиздила", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v504, "пиздил", "п****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v505, "пиздикулус", "п********с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v506, "пиздика", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v507, "пиздий", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v508, "пиздиишь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v509, "пиздии", "п****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v510, "пиздиет", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v511, "пизди", "п***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v512, "пизджу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v513, "пиздешь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v514, "пиздешн", "п*****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v515, "пиздеш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v516, "пиздечик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v517, "пиздеця", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v518, "пиздецю", "п*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v519, "пиздець", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v520, "пиздецы", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v521, "пиздецъ", "п*****ъ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v522, "пиздецхочу", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v523, "пиздецу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v524, "пиздецты", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v525, "пиздецсижу", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v526, "пиздецс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v527, "пиздецпо", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v528, "пиздецочек", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v529, "пиздецом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v530, "пиздецок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v531, "пиздецовых", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v532, "пиздецовым", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v533, "пиздецовый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v534, "пиздецовые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v535, "пиздецовую", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v536, "пиздецовский", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v537, "пиздецовость", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v538, "пиздецовой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v539, "пиздецовое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v540, "пиздецово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v541, "пиздецович", "п********ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v542, "пиздецовее", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v543, "пиздецовая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v544, "пиздецов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v545, "пиздецный", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v546, "пиздецнадо", "п********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v547, "пиздецмне", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v548, "пиздецменя", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v549, "пиздецкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v550, "пиздецкое", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v551, "пиздецкого", "п********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v552, "пиздецко", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v553, "пиздецких", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v554, "пиздецким", "п*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v555, "пиздецкий", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v556, "пиздецкие", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v557, "пиздецки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v558, "пиздецкая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v559, "пиздеци", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v560, "пиздецесли", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v561, "пиздеце", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v562, "пиздецдаже", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v563, "пиздецда", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v564, "пиздецв", "п*****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v565, "пиздецахах", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v566, "пиздецах", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v567, "пиздецами", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v568, "пиздецам", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v569, "пиздеца", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v570, "пиздец", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v571, "пиздеуц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v572, "пиздеться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v573, "пиздеть", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v574, "пиздетц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v575, "пиздетски", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v576, "пиздетс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v577, "пиздет", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v578, "пиздесь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v579, "пиздес", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v580, "пиздень", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v581, "пизденышь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v582, "пизденыши", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v583, "пизденыш", "п******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v584, "пизденочка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v585, "пизденок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v586, "пизденку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v587, "пизденкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v588, "пизденки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v589, "пизденке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v590, "пизденка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v591, "пиздени", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v592, "пиздельники", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v593, "пиздельник", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v594, "пизделся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v595, "пизделово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v596, "пизделовка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v597, "пиздело", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v598, "пизделку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v599, "пизделки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v600, "пизделка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v601, "пизделись", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v602, "пиздели", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v603, "пизделей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v604, "пиздела", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v605, "пиздел", "п****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v606, "пиздек", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v607, "пиздейшн", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v608, "пиздейшин", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v609, "пиздейшен", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v610, "пиздейц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v611, "пиздейро", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v612, "пиздей", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v613, "пиздез", "п****з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v614, "пиздежь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v615, "пиздежу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v616, "пиздежом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v617, "пиздежи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v618, "пиздежем", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v619, "пиздеже", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v620, "пиздежа", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v621, "пиздеж", "п****ж");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v622, "пиздеецц", "п******ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v623, "пиздеец", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v624, "пизде", "п***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v625, "пиздая", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v626, "пиздаче", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v627, "пиздач", "п****ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v628, "пиздация", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v629, "пиздахаханьки", "п***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v630, "пиздахана", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v631, "пиздаускас", "п********с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v632, "пиздать", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v633, "пиздатыый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v634, "пиздатых", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v635, "пиздатыми", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v636, "пиздатым", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v637, "пиздатый", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v638, "пиздатые", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v639, "пиздаты", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v640, "пиздатую", "п******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v641, "пиздатостью", "п*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v642, "пиздатость", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v643, "пиздатости", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v644, "пиздатоо", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v645, "пиздатому", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v646, "пиздатом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v647, "пиздатой", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v648, "пиздатое", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v649, "пиздатого", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v650, "пиздато", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v651, "пиздатни", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v652, "пиздатий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v653, "пиздатенькое", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v654, "пиздатенького", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v655, "пиздатенько", "п*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v656, "пиздатеньких", "п**********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v657, "пиздатенький", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v658, "пиздатенькие", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v659, "пиздатенькая", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v660, "пиздатейший", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v661, "пиздатейшие", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v662, "пиздатейшее", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v663, "пиздатейше", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v664, "пиздатейшая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v665, "пиздатей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v666, "пиздатее", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v667, "пиздатая", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v668, "пиздата", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v669, "пиздат", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v670, "пиздастрадашки", "п************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v671, "пиздастрадания", "п************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v672, "пиздастраданий", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v673, "пиздастрадалец", "п************ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v674, "пиздас", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v675, "пиздарулю", "п*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v676, "пиздарики", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v677, "пиздари", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v678, "пиздарез", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v679, "пиздарваньчик", "п***********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v680, "пиздапроёбина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v681, "пиздапроебины", "п***********ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v682, "пиздапроебина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v683, "пиздапизда", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v684, "пизданёшь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v685, "пизданётся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v686, "пизданёт", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v687, "пизданём", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v688, "пиздануца", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v689, "пиздануться", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v690, "пиздануть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v691, "пизданутых", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v692, "пизданутыми", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v693, "пизданутым", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v694, "пизданутый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v695, "пизданутые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v696, "пизданутую", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v697, "пизданутся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v698, "пизданутость", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v699, "пизданутости", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v700, "пизданутой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v701, "пизданутое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v702, "пизданутого", "п*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v703, "пизданутей", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v704, "пизданутая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v705, "пизданут", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v706, "пизданусь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v707, "пизданулся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v708, "пизданулось", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v709, "пиздануло", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v710, "пизданулись", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v711, "пизданули", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v712, "пизданулась", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v713, "пизданула", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v714, "пизданул", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v715, "пиздану", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v716, "пизданога", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v717, "пиздано", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v718, "пизданите", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v719, "пизданись", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v720, "пиздани", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v721, "пизданешься", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v722, "пизданешь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v723, "пизданется", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v724, "пизданете", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v725, "пизданет", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v726, "пизданем", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v727, "пиздами", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v728, "пиздамба", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v729, "пиздам", "п****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v730, "пиздализ", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v731, "пиздакшионер", "п**********р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v732, "пиздак", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v733, "пиздаебы", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v734, "пиздаебина", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v735, "пиздаеб", "п*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v736, "пиздаджигурда", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v737, "пиздадельный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v738, "пиздадельные", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v739, "пиздадельная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v740, "пиздада", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v741, "пиздаган", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v742, "пиздавать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v743, "пиздаватый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v744, "пиздаватые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v745, "пиздаболят", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v746, "пиздаболю", "п*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v747, "пиздабольству", "п***********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v748, "пиздабольством", "п************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v749, "пиздабольство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v750, "пиздабольстве", "п***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v751, "пиздабольства", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v752, "пиздабольный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v753, "пиздабольная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v754, "пиздаболь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v755, "пиздаболы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v756, "пиздаболу", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v757, "пиздаболом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v758, "пиздаболок", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v759, "пиздаболов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v760, "пиздаболку", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v761, "пиздаболкой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v762, "пиздаболки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v763, "пиздаболке", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v764, "пиздаболками", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v765, "пиздаболка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v766, "пиздаболия", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v767, "пиздаболию", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v768, "пиздаболище", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v769, "пиздаболишь", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v770, "пиздаболить", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v771, "пиздаболит", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v772, "пиздаболина", "п*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v773, "пиздаболии", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v774, "пиздаболией", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v775, "пиздаболие", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v776, "пиздаболами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v777, "пиздаболам", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v778, "пиздабола", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v779, "пиздабол", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v780, "пиздаатыый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v781, "пизда", "п***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v782, "пизд", "п**д");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v783, "пидораска", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v784, "пидорасина", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v785, "пидорас", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v786, "пидор", "п***р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v787, "педрило", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v788, "педрила", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v789, "педик", "п***к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v790, "педерастина", "п*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v791, "педераст", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v792, "охуительный", "о*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v793, "охуительное", "о*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v794, "охуительная", "о*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v795, "охуеть", "о****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v796, "охуенный", "о*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v797, "охуенное", "о*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v798, "охуенная", "о*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v799, "охуел", "о***л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v800, "отъебаться", "о********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v801, "отпиздячить", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v802, "отпиздить", "о*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v803, "остопиздить", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v804, "остопиздеть", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v805, "опиздинительный", "о*************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v806, "опиздинительное", "о*************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v807, "опиздинительная", "о*************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v808, "опизденивающе", "о***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v809, "опизде", "о****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v810, "однохуйственно", "о************о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v811, "обьебать", "о******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v812, "объебать", "о******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v813, "нихуя", "н***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v814, "нехуйственно", "н**********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v815, "нехуй", "н***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v816, "нахуйник", "н******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v817, "нахуй", "н***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v818, "настопиздить", "н**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v819, "настоебать", "н********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v820, "напиздить", "н*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v821, "напиздили", "н*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v822, "напиздело", "н*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v823, "напиздели", "н*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v824, "напиздел", "н******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v825, "наебать", "н*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v826, "мудачка", "м*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v827, "мудак", "м***к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v828, "манда", "м***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v829, "испиздить", "и*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v830, "злоебучий", "з*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v831, "злоебучее", "з*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v832, "злоебучая", "з*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v833, "заёбанный", "з*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v834, "затрахивать", "з*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v835, "затрахать", "з*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v836, "затрахали", "з*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v837, "затрахала", "з*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v838, "запиздячить", "з*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v839, "запиздеть", "з*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v840, "залупа", "з****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v841, "заебись", "з*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v842, "заебаться", "з*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v843, "заебать", "з*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v844, "заебатый", "з******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v845, "заебатая", "з******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v846, "заебанец", "з******ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v847, "заебало", "з*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v848, "заебали", "з*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v849, "заебала", "з*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v850, "заебал", "з****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[12],0>(v851, "заeбанный", "з*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v852, "ебучий", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v853, "ебучее", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v854, "ебучая", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v855, "ебля", "е**я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v856, "ебло", "е**о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v857, "ебланка\n", "е*****\n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v858, "еблан\n", "е***\n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v859, "ебатюшки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v860, "ебатьялох", "е*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v861, "ебатья", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v862, "ебатьты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[18],0>(v863, "ебаться-сраться", "е*************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v864, "ебаться", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v865, "ебатьколотить", "е***********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[15],0>(v866, "ебать-копать", "е**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[17],0>(v867, "ебать-колотить", "е************ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v868, "ебать", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v869, "ебаты", "е***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v870, "ебату", "е***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v871, "ебатся", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v872, "ебатория", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v873, "ебаторию", "е******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v874, "ебаторий", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v875, "ебатня", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v876, "ебатню", "е****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v877, "ебатика", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v878, "ебати", "е***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v879, "ебатень", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v880, "ебате", "е***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v881, "ебата", "е***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v882, "ебат", "е**т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v883, "ебарь", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v884, "ебанёшься", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v885, "ебанёшь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v886, "ебанётся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v887, "ебанёте", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v888, "ебанёт", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v889, "ебанём", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v890, "ебанята", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v891, "ебаням", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v892, "ебаня", "е***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v893, "ебаньтяй", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v894, "ебанькоо", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v895, "ебаньком", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v896, "ебанько", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v897, "ебаньки", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v898, "ебань", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v899, "ебаныый", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v900, "ебаных", "е****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v901, "ебанырот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v902, "ебаными", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v903, "ебаным", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v904, "ебаныйрот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v905, "ебаныйврот", "е********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v906, "ебаный", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v907, "ебаныи", "е****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v908, "ебаные", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v909, "ебаныврот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v910, "ебаны", "е***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v911, "ебаную", "е****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v912, "ебанушку", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v913, "ебанушкой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v914, "ебанушки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v915, "ебанушками", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v916, "ебанушкам", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v917, "ебанушка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v918, "ебанушек", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v919, "ебануцца", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v920, "ебануцо", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v921, "ебануца", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v922, "ебануха", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v923, "ебанууться", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v924, "ебануутая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v925, "ебанутьсяя", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v926, "ебануться", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v927, "ебануть", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v928, "ебанутых", "е******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v929, "ебанутыми", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v930, "ебанутым", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v931, "ебанутый", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v932, "ебанутые", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v933, "ебануты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v934, "ебанутую", "е******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v935, "ебанутся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v936, "ебанутством", "е*********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v937, "ебанутство", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v938, "ебанутства", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v939, "ебанутсво", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v940, "ебанутось", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v941, "ебанутостью", "е*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v942, "ебанутость", "е********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v943, "ебанутости", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v944, "ебанутостей", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v945, "ебанутому", "е*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v946, "ебанутом", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v947, "ебанутой", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v948, "ебанутое", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v949, "ебанутого", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v950, "ебануто", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v951, "ебанутки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v952, "ебанутка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v953, "ебанутики", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v954, "ебанутика", "е*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v955, "ебанутик", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v956, "ебанутий", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v957, "ебанутейший", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v958, "ебанутейшие", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v959, "ебанутейшая", "е*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v960, "ебанутей", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v961, "ебанутее", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v962, "ебануте", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v963, "ебанутаяя", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v964, "ебанутая", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v965, "ебанутаая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v966, "ебанутаЯ", "е******Я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v967, "ебанута", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v968, "ебанут", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v969, "ебанусь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v970, "ебанулся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v971, "ебанулсь", "е******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v972, "ебанулсо", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v973, "ебанулс", "е*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v974, "ебанулось", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v975, "ебануло", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v976, "ебанулисья", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v977, "ебанулись", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v978, "ебанули", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v979, "ебанулась", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v980, "ебанула", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v981, "ебанул", "е****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v982, "ебануй", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v983, "ебану", "е***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v984, "ебантяями", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v985, "ебантяям", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v986, "ебантяя", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v987, "ебантяйство", "е*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v988, "ебантяйства", "е*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v989, "ебантяйское", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v990, "ебантяйские", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v991, "ебантяйки", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v992, "ебантяйка", "е*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v993, "ебантяй", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v994, "ебантяи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v995, "ебантяем", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v996, "ебантяев", "е******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v997, "ебантизм", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v998, "ебантеи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v999, "ебанство", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1000, "ебанско", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1001, "ебанский", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1002, "ебанрот", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1003, "ебаноё", "е****ё");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1004, "ебаному", "е*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1005, "ебаном", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1006, "ебанок", "е****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1007, "ебаной", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1008, "ебаное", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1009, "ебаного", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1010, "ебановрот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1011, "ебанов", "е****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1012, "ебано", "е***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1013, "ебанных", "е*****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1014, "ебанными", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1015, "ебанным", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1016, "ебанныйврот", "е*********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1017, "ебанный", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1018, "ебанныи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1019, "ебанные", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1020, "ебанную", "е*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1021, "ебаннутых", "е*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1022, "ебаннутый", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1023, "ебаннутые", "е*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1024, "ебаннутой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1025, "ебаннутое", "е*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1026, "ебаннутого", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1027, "ебаннутая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1028, "ебанному", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1029, "ебанном", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1030, "ебанной", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1031, "ебанное", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1032, "ебанного", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1033, "ебанно", "е****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1034, "ебанная", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1035, "ебанная", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1036, "ебанна", "е****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1037, "ебанка", "е****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1038, "ебания", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1039, "ебанический", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1040, "ебанические", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1041, "ебанически", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1042, "ебанитовая", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1043, "ебанитесь", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1044, "ебаните", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1045, "ебанись", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1046, "ебанистической", "е************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1047, "ебанистический", "е************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1048, "ебанистические", "е************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v1049, "ебанистически", "е***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1050, "ебанистическая", "е************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1051, "ебанистика", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1052, "ебанины", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1053, "ебанина", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1054, "ебаний", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1055, "ебании", "е****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1056, "ебанизмом", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1057, "ебанизма", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1058, "ебанизм", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1059, "ебание", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1060, "ебанешься", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1061, "ебанешь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1062, "ебанешся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1063, "ебанется", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1064, "ебанете", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1065, "ебанет", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1066, "ебаненько", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1067, "ебаненький", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1068, "ебанемся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1069, "ебанем", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1070, "ебанейший", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1071, "ебаней", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1072, "ебанее", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1073, "ебанврот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1074, "ебанаяя", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1075, "ебаная", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1076, "ебаная", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1077, "ебанашку", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1078, "ебанашкой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1079, "ебанашки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1080, "ебанашке", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1081, "ебанашками", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1082, "ебанашкам", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1083, "ебанашка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1084, "ебанаши", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1085, "ебанашечка", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1086, "ебанашек", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1087, "ебанафт", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1088, "ебанатый", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1089, "ебанаты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1090, "ебанату", "е*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1091, "ебанатство", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1092, "ебанатства", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1093, "ебанатской", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1094, "ебанатский", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1095, "ебанатские", "е********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1096, "ебанатская", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1097, "ебанаторы", "е*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1098, "ебанатор", "е******р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1099, "ебанатом", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1100, "ебанатов", "е******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1101, "ебанатки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1102, "ебанатка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1103, "ебанатиков", "е********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1104, "ебанатики", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1105, "ебанатик", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1106, "ебанатизм", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1107, "ебанатами", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1108, "ебанатам", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1109, "ебаната", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1110, "ебанат", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1111, "ебанарь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1112, "ебанарот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1113, "ебанан", "е****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1114, "ебанами", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1115, "ебанамать", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1116, "ебанай", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1117, "ебанавты", "е******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1118, "ебанавт", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1119, "ебана", "е***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1120, "ебан", "е**н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1121, "ебало", "е***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1122, "ебали", "е***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1123, "ебала", "е***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1124, "ебал", "е**л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1125, "еб твою мать", "е*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1126, "допиздеться", "д*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1127, "долбоёб", "д*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1128, "долбоеб", "д*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1129, "доебаться", "д*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v1130, "до-пизды", "д******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1131, "гребаных", "г******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1132, "гребаную", "г******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1133, "гребаного", "г*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1134, "гребанные", "г*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1135, "гребанную", "г*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1136, "выёбываются", "в*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[14],0>(v1137, "выёбываюсь", "в*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[15],0>(v1138, "выёбываться", "в**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1139, "выёбывайся", "в********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[16],0>(v1140, "выёбываешься", "в***********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[15],0>(v1141, "выёбывается", "в**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1142, "выёбывается", "в*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1143, "выпиздить", "в*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1144, "выпиздеться", "в*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1145, "выебут", "в****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1146, "выебу", "в***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1147, "выебешь", "в*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1148, "выебет", "в****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1149, "выебать", "в*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1150, "выблядыш", "в******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1151, "выблядок", "в******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1152, "въебаться", "в*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1153, "въебать", "в*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1154, "впиздячить", "в********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1155, "бляха", "б***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1156, "блять", "б***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1157, "блятство", "б******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1158, "блятский", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1159, "блятская", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1160, "блянадо", "б*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1161, "бляменя", "б*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1162, "блямба", "б****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1163, "блямб", "б***б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1164, "блякаешь", "б******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1165, "блядях", "б****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1166, "блядями", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1167, "блядюга", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1168, "блядьми", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1169, "блядь", "б***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1170, "блядуют", "б*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1171, "блядушки", "б******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1172, "блядунья", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1173, "блядуны", "б*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1174, "блядун", "б****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1175, "блядуешь", "б******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1176, "блядует", "б*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1177, "блядству", "б******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v1178, "блядствовать", "б**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1179, "блядство", "б******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1180, "блядстве", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1181, "блядства", "б******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1182, "блядскую", "б******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1183, "блядском", "б******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1184, "блядской", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1185, "блядское", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1186, "блядско", "б*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1187, "блядских", "б******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1188, "блядским", "б******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1189, "блядский", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1190, "блядские", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1191, "блядски", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1192, "блядская", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1193, "блядота", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1194, "блядовать", "б*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1195, "блядки", "б****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1196, "блядках", "б*****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1197, "блядищи", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1198, "блядище", "б*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1199, "блядища", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1200, "блядины", "б*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1201, "блядину", "б*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1202, "блядиной", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1203, "блядинка", "б******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1204, "блядине", "б*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1205, "блядина", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1206, "бляди", "б***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1207, "бляд", "б**д");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1208, "блябуду", "б*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1209, "блябу", "б***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1210, "бля", "б*я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1211, "ахуй", "а**й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1212, "архипиздрит", "а*********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v1213, "eбаный", "e****й");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ru(void)::sProfanityData_ru, (uint64_t)v4, 0x4BAuLL);
    for (uint64_t i = 0; i != -7260; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v1213[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ru(void)::sProfanityData_ru, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_ru(void)::sProfanityData_ru[0], unk_1EA3D8D68, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8D68 - GetProfanityFilter_ru(void)::sProfanityData_ru[0]) >> 4));
}

void sub_1C5E82D5C(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 58032;
  uint64_t v4 = -58080;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_ro(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v296[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v4, "﻿cACI", "﻿*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v5, "şobolanule", "ş**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v6, "youporn", "y*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v7, "youjizz", "y*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v8, "xvideos", "x*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v9, "xnxx", "x****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v10, "unguroiule", "u**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v11, "unguroilor", "u**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v12, "târfelor", "t********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "târfele", "t*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v14, "târfa", "t*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v15, "tâmpitule", "t*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v16, "tâmpito", "t*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v17, "tuciuriule", "t**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v18, "trogloditule", "t************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v19, "suge-mi-ai", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v20, "suge-m-ai", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v21, "suge-i-o", "s********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v22, "sifiliticule", "s************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v23, "shit", "s****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v24, "sextv", "s*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v25, "sextube", "s*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v26, "sexfree", "s*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v27, "sexbot", "s******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v28, "retarzilor", "r**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v29, "retarzii", "r********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v30, "retardule", "r*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v31, "retardelor", "r**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v32, "retardatule", "r***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v33, "ratatule", "r********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v34, "ratato", "r******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v35, "rahaţilor", "r*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v36, "putrezitule", "p***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v37, "putregaiule", "p***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v38, "putoareo", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v39, "pulă", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v40, "pulimii", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v41, "pulimea", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v42, "pulime", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v43, "pulii", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v44, "pulifriciule", "p************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v45, "pulifrici", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v46, "pulice", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v47, "pulica", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v48, "pulelor", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v49, "pulea", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v50, "pule", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v51, "pula-n", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v52, "pula", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v53, "prostane", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v54, "prostanacule", "p************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v55, "proasto", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v56, "proastelor", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v57, "porntube", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v58, "porno", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v59, "pornhub", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v60, "porn", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v61, "porcule", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v62, "poponaut", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v63, "poponarilor", "p***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v64, "poponarii", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v65, "poponari", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v66, "poponar", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v67, "pișe", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v68, "pișa-m-aș", "p*******ș");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v69, "piţipoancelor", "p*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v70, "pişăm", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v71, "pişi", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v72, "pişe", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "pişatul", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v74, "pişat", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v75, "piş", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v76, "pizdă", "p***ă");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v77, "pizdulici", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v78, "pizdologii", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v79, "pizdita", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v80, "pizdit", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v81, "pizdilici", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v82, "pizdele", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v83, "pizdeală", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v84, "pizda", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v85, "parazitule", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v86, "pANARAME", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v87, "onaniști", "o******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "onanist", "o*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v89, "oligofrenule", "o************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v90, "oligofrenilor", "o*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v91, "nesimţitule", "n***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v92, "nefutute", "n********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v93, "naşpetule", "n*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v94, "mătărânga", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v95, "mă-tii", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v96, "mă-ta", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v97, "mă-sii", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v98, "muistule", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v99, "muistul", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v100, "muistele", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v101, "muie", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v102, "muian", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v103, "muia", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v104, "mucifer", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v105, "milfhunter", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v106, "milf", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v107, "mUlE", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v108, "mILF", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v109, "linge-mi-ai", "l*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v110, "linge-m-ai", "l********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v111, "lindic", "l****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v112, "limbricule", "l**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v113, "limbistule", "l**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v114, "limbincurism", "l************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v115, "lepădăturilor", "l*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v116, "labă", "l**ă");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v117, "labagiule", "l*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v118, "labagiu", "l*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v119, "labagiilor", "l**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v120, "labagii", "l*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v121, "jizzhut", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v122, "jigodiile", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v123, "jidănesc", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v124, "jidanului", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v125, "jidanilor", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v126, "jidani", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v127, "jidanca", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v128, "jidan", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v129, "jegule", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v130, "jegosule", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v131, "javrelor", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v132, "japiță", "j****ă");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v133, "infectule", "i*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v134, "imbecilo", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v135, "idiotule", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v136, "idioato", "i*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v137, "hardcorsex", "h**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v138, "handicapaţilor", "h**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v139, "handicapatule", "h*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v140, "handicapato", "h***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v141, "hairysex", "h********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v142, "găozari", "g*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v143, "găozar", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v144, "găoaza", "g****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v145, "guramasii", "g*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v146, "gunoiule", "g********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v147, "garoiul", "g*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v148, "fuţi", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v149, "futuţii", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v150, "futută", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v151, "fututul", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v152, "futute", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v153, "futut-o", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v154, "futut", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v155, "futui", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v156, "futu-ţi", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v157, "futu-vă", "f*****ă");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v158, "futu-te", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v159, "futu-m-aș", "f*******ș");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v160, "futu-l", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v161, "futu-i", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v162, "futem", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v163, "futeau", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v164, "fute", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v165, "futaiuri", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v166, "fut", "f***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v167, "fucks", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v168, "fuck", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v169, "fraierilor", "f**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v170, "fraiere", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v171, "fascistule", "f**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v172, "escrocule", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v173, "dumnezăii", "d*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v174, "dobitocule", "d**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v175, "dobitocii", "d*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v176, "dobitoci", "d********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v177, "dobitoc", "d*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v178, "căcănărie", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v179, "căcănăria", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v180, "căcănarul", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v181, "căcănare", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v182, "căcănar", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v183, "căcăcioşi", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v184, "căcăcios", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v185, "căcăcioasă", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v186, "căcăcioase", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v187, "căcaţii", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v188, "căcaţi", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v189, "căcaturile", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v190, "căcatul", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v191, "căcata", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v192, "căcat", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v193, "căcarea", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v194, "căcam", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v195, "cârnăţar", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v196, "curvă", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v197, "curvuştine", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v198, "curvo", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v199, "curviştinele", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v200, "curveta", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v201, "curvet", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v202, "curvesc", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v203, "curvele", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v204, "curvei", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v205, "curvească", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v206, "curve", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v207, "curvarule", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v208, "curvarul", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v209, "curvari", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v210, "curvar", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v211, "curva", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v212, "curva", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v213, "cururilor", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v214, "cururile", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v215, "cururi", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v216, "curului", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v217, "curu-n", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v218, "curu", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v219, "curista", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v220, "cur", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v221, "cunt", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v222, "cumshot", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v223, "cretinule", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v224, "cretinoiule", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v225, "cretino", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v226, "cretinizatule", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v227, "cretinelule", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v228, "coițe", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v229, "coiul", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v230, "coi", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v231, "cocalarule", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v232, "coardo", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v233, "coaielor", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v234, "coaiele", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v235, "coaie", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v236, "ciumpalacului", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v237, "ciumpalacilor", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v238, "cioropinile", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v239, "cioroiule", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v240, "ciochist", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v241, "cacă", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v242, "cace", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v243, "cacau", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v244, "caca", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v245, "cac", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v246, "băşimea", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v247, "băga-ți-aș", "b********ș");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v248, "băga-ți-ai", "b********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v249, "bulangiule", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v250, "bulangiul", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v251, "bulangiu", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v252, "bulangist", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v253, "bulangioaica", "b************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v254, "bulangiilor", "b***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v255, "bulangiii", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v256, "bulangii", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v257, "buci", "b**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v258, "bozgorului", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v259, "bozgorul", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v260, "bozgoroica", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v261, "bozgoroaice", "b***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v262, "bozgoroaica", "b***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v263, "bozgorime", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v264, "bozgori", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v265, "bozgoresc", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v266, "bozgorel", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v267, "bozgorei", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v268, "bozgor", "b******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v269, "bouleanule", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v270, "boule", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v271, "boschetarule", "b************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v272, "borâţi", "b******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v273, "borfotinele", "b***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v274, "borfelină", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v275, "borfelina", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v276, "bijboaca", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v277, "belitule", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v278, "belite", "b******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v279, "belit-o", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v280, "belim", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v281, "belești", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v282, "bagabonți", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v283, "bagabonţii", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v284, "bagabontul", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v285, "bagabont", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v286, "bagaboante", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v287, "bagaboanta", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v288, "babuinule", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v289, "babuino", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v290, "avortonule", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v291, "aurolacule", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v292, "ampulea", "a*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v293, "alcooliştilor", "a*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v294, "alcoolicule", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v295, "agaricilor", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v296, "agarici", "a*******");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ro(void)::sProfanityData_ro, (uint64_t)v4, 0x125uLL);
    for (uint64_t i = 0; i != -1758; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v296[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ro(void)::sProfanityData_ro, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_ro(void)::sProfanityData_ro[0], unk_1EA3D8D88, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8D88 - GetProfanityFilter_ro(void)::sProfanityData_ro[0]) >> 4));
}

void sub_1C5E8548C(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 14016;
  uint64_t v4 = -14064;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_pt(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v123[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v4, "xoxotão", "x*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v5, "xoxotinha", "x*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v6, "xoxota", "x****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v7, "xotão", "x***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v8, "xotinha", "x*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v9, "xota", "x**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v10, "xochota", "x*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v11, "xibiu", "x***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v12, "xexeca", "x****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "xerereca", "x******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v14, "xeca", "x**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "xavasca", "x*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "xaninha", "x*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v17, "xana", "x**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v18, "toba", "t**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v19, "tetão", "t***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v20, "tetinha", "t*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v21, "teta", "t**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v22, "tesão", "t***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "tesudo", "t****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v24, "tesuda", "t****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v25, "tesao", "t***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v26, "suruba", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v27, "siririca", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "putona", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v29, "puto", "p**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v30, "putana", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v31, "putamerda", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v32, "puta", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v33, "punhetão", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v34, "punhetas", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v35, "punhetao", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "punheta", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v37, "prexereca", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v38, "prexeca", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v39, "precheca", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v40, "pixirica", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v41, "piroco", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v42, "picão", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v43, "picao", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v44, "pexereca", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v45, "olhota", "o****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v46, "merdoso", "m*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v47, "merdas", "m****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v48, "merda", "m***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v49, "machorra", "m******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v50, "iscroto", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v51, "iscrota", "i*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v52, "furnicar", "f******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v53, "furnica", "f*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v54, "fudeção", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v55, "fudendo", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v56, "fudecao", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v57, "fornica", "f*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v58, "fodida", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v59, "foder", "f***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v60, "fodelança", "f*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v61, "fodedor", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v62, "fode", "f**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v63, "fodao", "f***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v64, "felação", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v65, "felacao", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v66, "esporrear", "e*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v67, "esporrar", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v68, "esporrado", "e*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v69, "esporrada", "e*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v70, "escrota", "e*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "enrabar", "e*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "enrabada", "e******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v73, "desgraçado", "d********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v74, "desgraçada", "d********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v75, "cuzão", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v76, "cuzudo", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v77, "cuzuda", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v78, "cuzinho", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v79, "cuzao", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v80, "currar", "c****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "currada", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v82, "curalho", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v83, "culhões", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v84, "culhão", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v85, "culhao", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v86, "cu", "c*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v87, "colhão", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v88, "ciririca", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v89, "chota", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v90, "chochota", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v91, "chibumbo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v92, "chibumba", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "chereca", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v94, "checheca", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v95, "chana", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v96, "caralhão", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v97, "caralhudo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v98, "caralho", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v99, "cagão", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v100, "cagalhão", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v101, "cagado", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v102, "cabação", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v103, "cabaçudo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v104, "cabaçuda", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v105, "cabaço", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v106, "buça", "b**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v107, "busseta", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v108, "bucetão", "b*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v109, "bucetinha", "b*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v110, "buceta", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v111, "brioco", "b****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v112, "bosteiro", "b******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v113, "bosta", "b***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v114, "bolcat", "b****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v115, "bolagato", "b******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v116, "boiola", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v117, "bixa", "b**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v118, "bimbar", "b****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v119, "bimbada", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v120, "bilau", "b***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v121, "bicha", "b***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v122, "bastardo", "b******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v123, "baitola", "b*****a");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_pt(void)::sProfanityData_pt, (uint64_t)v4, 0x78uLL);
    for (uint64_t i = 0; i != -720; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v123[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_pt(void)::sProfanityData_pt, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_pt(void)::sProfanityData_pt[0], unk_1EA3D8DA8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8DA8 - GetProfanityFilter_pt(void)::sProfanityData_pt[0]) >> 4));
}

void sub_1C5E864C4(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 5712;
  uint64_t v4 = -5760;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_uk(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v1153[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v4, "їбе", "ї*е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v5, "ёбля", "ё**я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v6, "ёбат", "ё**т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v7, "ёбарь", "ё***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v8, "ёбаный", "ё****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v9, "ёбаную", "ё****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v10, "ёбанный", "ё*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v11, "ёбаная", "ё****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v12, "ёбан", "ё**н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v13, "хєр", "х*р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v14, "хуйям", "х***м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v15, "хуйчик", "х****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v16, "хуйцы", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v17, "хуйцу", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v18, "хуйцом", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v19, "хуйцов", "х****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v20, "хуйцо", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v21, "хуйце", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v22, "хуйцах", "х****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v23, "хуйцам", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v24, "хуйца", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v25, "хуйхуй", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v26, "хуйхаа", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v27, "хуйфон", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v28, "хуйтэн", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v29, "хуйты", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v30, "хуйту", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v31, "хуйто", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v32, "хуйте", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v33, "хуйтам", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v34, "хуйта", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v35, "хуйски", "х****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v36, "хуйрик", "х****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v37, "хуйота", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v38, "хуйовый", "х*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v39, "хуйовые", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v40, "хуйовое", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v41, "хуйово", "х****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v42, "хуйовая", "х*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v43, "хуйова", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v44, "хуйнёт", "х****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v45, "хуйнём", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v46, "хуйнёй", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v47, "хуйняя", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v48, "хуйняшка", "х******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v49, "хуйнях", "х****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v50, "хуйняс", "х****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v51, "хуйняно", "х*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v52, "хуйняне", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v53, "хуйнями", "х*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v54, "хуйняи", "х****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v55, "хуйняв", "х****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v56, "хуйняа", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v57, "хуйня", "х***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v58, "хуйнюя", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v59, "хуйнюю", "х****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v60, "хуйнюшку", "х******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v61, "хуйнюшки", "х******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v62, "хуйнюшка", "х******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v63, "хуйнюша", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v64, "хуйнюну", "х*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v65, "хуйню", "х***ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v66, "хуйнуть", "х*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v67, "хуйнулся", "х******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v68, "хуйнуло", "х*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v69, "хуйнули", "х*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v70, "хуйнула", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v71, "хуйнул", "х****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v72, "хуйну", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v73, "хуйной", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v74, "хуйно", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v75, "хуйнища", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v76, "хуйните", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v77, "хуйни", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v78, "хуйнеё", "х****ё");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v79, "хуйнею", "х****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v80, "хуйнет", "х****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v81, "хуйнем", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v82, "хуйней", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v83, "хуйнее", "х****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v84, "хуйне", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v85, "хуйная", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v86, "хуйнаны", "х*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v87, "хуйнана", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v88, "хуйна", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v89, "хуйль", "х***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v90, "хуйлыга", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v91, "хуйлы", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v92, "хуйлу", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v93, "хуйлоша", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v94, "хуйлом", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v95, "хуйло", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v96, "хуйлище", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v97, "хуйлион", "х*****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v98, "хуйли", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v99, "хуйле", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v100, "хуйланы", "х*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v101, "хуйлана", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v102, "хуйлан", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v103, "хуйла", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v104, "хуйком", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v105, "хуйки", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v106, "хуйка", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v107, "хуйи", "х**и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v108, "хуйево", "х****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v109, "хуйда", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v110, "хуйво", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v111, "хуйвей", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v112, "хуй-чего", "х******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v113, "хуй", "х*й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v114, "хуебля", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v115, "хитровыебанный", "х************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v116, "хер", "х*р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v117, "уродів", "у****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v118, "упиздить", "у******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v119, "уебать", "у****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v120, "уебаны", "у****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v121, "уебан", "у***н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v122, "трахнуть", "т******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v123, "трахаёб", "т*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v124, "трахать", "т*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v125, "трахатель", "т*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v126, "трахаеб", "т*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(v127, "трахае6", "т*****6");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v128, "съебаться", "с*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v129, "съебать", "с*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v130, "страхопиздище", "с***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v131, "сраці", "с***і");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v132, "сракою", "с****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v133, "спиздиться", "с********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v134, "спиздить", "с******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v135, "спиздит", "с*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v136, "спиздили", "с******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v137, "спиздила", "с******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v138, "спиздил", "с*****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v139, "спиздеть", "с******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v140, "спиздел", "с*****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v141, "распиздяйство", "р***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v142, "распиздяйка", "р*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v143, "распиздяй", "р*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v144, "распиздон", "р*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v145, "распиздеться", "р**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v146, "распиздай", "р*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v147, "разёбанный", "р********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v148, "разъебаться", "р*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v149, "разъебать", "р*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v150, "разебанный", "р********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v151, "підрахуйство", "п**********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v152, "підарас", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v153, "пропиздячить", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v154, "пропиздить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v155, "пропиздеть", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v156, "пропизделся", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v157, "проебаться", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v158, "проебать", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v159, "проебанка", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v160, "проблядь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v161, "припиздюлина", "п**********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v162, "припизднутый", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v163, "припиздить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v164, "припиздень", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v165, "приебаться", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v166, "придурок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v167, "похуй", "п***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v168, "потрахаться", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v169, "попиздовать", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v170, "попиздили", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v171, "попиздеть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v172, "попиздели", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v173, "поебать", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v174, "подъебать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v175, "пиздёшь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v176, "пиздёш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v177, "пиздёныш", "п******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v178, "пиздёнку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v179, "пиздёнкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v180, "пиздёнки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v181, "пиздёнке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v182, "пиздёнка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v183, "пиздёжь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v184, "пиздёжи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v185, "пиздёжа", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v186, "пиздёж", "п****ж");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v187, "пиздящих", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v188, "пиздящим", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v189, "пиздящий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v190, "пиздящие", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v191, "пиздящее", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v192, "пиздящая", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v193, "пиздяшек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v194, "пиздячу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v195, "пиздячку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v196, "пиздячки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v197, "пиздячить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v198, "пиздячит", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v199, "пиздячил", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v200, "пиздячик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v201, "пиздячек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v202, "пиздячат", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v203, "пиздяться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v204, "пиздять", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v205, "пиздятся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v206, "пиздятну", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v207, "пиздятины", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v208, "пиздятиной", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v209, "пиздятинки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v210, "пиздятинка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v211, "пиздятина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v212, "пиздят", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v213, "пиздярить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v214, "пиздянок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v215, "пиздян", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v216, "пиздяк", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v217, "пиздяй", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v218, "пиздя", "п***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v219, "пиздюшонок", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v220, "пиздюшок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v221, "пиздюшня", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v222, "пиздюшный", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v223, "пиздюшник", "п*******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v224, "пиздюшку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v225, "пиздюшкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v226, "пиздюшки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v227, "пиздюшке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v228, "пиздюшка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v229, "пиздюшечка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v230, "пиздюшек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v231, "пиздюша", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v232, "пиздючье", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v233, "пиздючку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v234, "пиздючкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v235, "пиздючки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v236, "пиздючка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v237, "пиздючий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v238, "пиздючие", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v239, "пиздючек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v240, "пиздюху", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v241, "пиздюхой", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v242, "пиздюхи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v243, "пиздюхе", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v244, "пиздюхать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v245, "пиздюха", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v246, "пиздюрить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v247, "пиздюляшек", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v248, "пиздюлях", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v249, "пиздюляторов", "п**********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v250, "пиздюлями", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v251, "пиздюлям", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v252, "пиздюля", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v253, "пиздюлю", "п*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v254, "пиздюльки", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v255, "пиздюлька", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v256, "пиздюль", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v257, "пиздюлины", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v258, "пиздюлину", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v259, "пиздюлинку", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v260, "пиздюлинки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v261, "пиздюлинка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v262, "пиздюлине", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v263, "пиздюлинами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v264, "пиздюлина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v265, "пиздюлин", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v266, "пиздюликов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v267, "пиздюли", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v268, "пиздюлек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v269, "пиздюлей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v270, "пиздюлеи", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v271, "пиздюлеей", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v272, "пиздюку", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v273, "пиздюком", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v274, "пиздюков", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v275, "пиздюки", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v276, "пиздюками", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v277, "пиздюкам", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v278, "пиздюка", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v279, "пиздюк", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v280, "пиздюдей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v281, "пиздюга", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v282, "пиздю", "п***ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v283, "пиздэйшн", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v284, "пиздэйшен", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v285, "пиздь", "п***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v286, "пиздыя", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v287, "пиздыц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v288, "пиздытый", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v289, "пиздык", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v290, "пизды", "п***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v291, "пиздца", "п****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v292, "пиздуя", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v293, "пиздуют", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v294, "пиздую", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v295, "пиздушку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v296, "пиздушка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v297, "пиздуц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v298, "пиздуховные", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v299, "пиздуу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v300, "пиздунья", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v301, "пиздуны", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v302, "пиздуном", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v303, "пиздунов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v304, "пиздуна", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v305, "пиздун", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v306, "пиздуля", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v307, "пиздулей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v308, "пиздула", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v309, "пиздуйте", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v310, "пиздуйка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v311, "пиздуй", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v312, "пиздуешь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v313, "пиздуете", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v314, "пиздует", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v315, "пиздуем", "п*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v316, "пизду", "п***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v317, "пиздтый", "п*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v318, "пиздрячить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v319, "пиздруй", "п*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v320, "пиздравляю", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v321, "пиздою", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v322, "пиздошу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v323, "пиздошить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v324, "пиздошит", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v325, "пиздохаю", "п******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v326, "пиздохаханьки", "п***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v327, "пиздохать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v328, "пиздохай", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v329, "пиздоу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v330, "пиздоты", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v331, "пиздотина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v332, "пиздота", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v333, "пиздося", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v334, "пиздосья", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v335, "пиздострадашки", "п************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v336, "пиздострадашек", "п************к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v337, "пиздострадатель", "п*************ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v338, "пиздостраданиях", "п*************х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v339, "пиздостраданиями", "п**************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v340, "пиздостраданиям", "п*************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v341, "пиздострадания", "п************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v342, "пиздостраданий", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v343, "пиздострадание", "п************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[39],char const(&)[22],0>(v344, "пиздострадальческий", "п*****************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[39],char const(&)[22],0>(v345, "пиздострадальческие", "п*****************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v346, "пиздострадальцы", "п*************ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v347, "пиздострадальцам", "п**************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v348, "пиздострадалицы", "п*************ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v349, "пиздострадалец", "п************ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v350, "пиздосс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v351, "пиздосов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v352, "пиздосина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v353, "пиздосики", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v354, "пиздосик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v355, "пиздоси", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v356, "пиздосей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v357, "пиздоса", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v358, "пиздос", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v359, "пиздорукий", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v360, "пиздорукая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v361, "пиздорич", "п******ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v362, "пиздорить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v363, "пиздорез", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v364, "пиздорванки", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v365, "пиздорванка", "п*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v366, "пиздорванец", "п*********ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v367, "пиздор", "п****р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v368, "пиздопроёбина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v369, "пиздопроушина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v370, "пиздопротивный", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v371, "пиздопроебины", "п***********ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v372, "пиздопроебина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v373, "пиздоос", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v374, "пиздонуть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v375, "пиздонутые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v376, "пиздони", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v377, "пиздон", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v378, "пиздолить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v379, "пиздолизы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v380, "пиздолизом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v381, "пиздолизов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v382, "пиздолизка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v383, "пиздолизами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v384, "пиздолиза", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v385, "пиздолиз", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v386, "пиздолет", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v387, "пиздокрылая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v388, "пиздокрыл", "п*******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v389, "пиздок", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v390, "пиздой", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v391, "пиздоеб", "п*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v392, "пиздодень", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v393, "пиздодельный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v394, "пиздодельные", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v395, "пиздодельная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v396, "пиздоглазых", "п*********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v397, "пиздоглазыми", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v398, "пиздоглазый", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v399, "пиздоглазые", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v400, "пиздоглазой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v401, "пиздоглазое", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v402, "пиздоглазие", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v403, "пиздоглазая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v404, "пиздоглаз", "п*******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v405, "пиздоган", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v406, "пиздоворот", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v407, "пиздовать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v408, "пиздоватый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v409, "пиздоватые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v410, "пиздоватой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v411, "пиздоватое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v412, "пиздоватая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v413, "пиздовали", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v414, "пиздовала", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v415, "пиздовал", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v416, "пиздов", "п****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v417, "пиздобратия", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v418, "пиздобратию", "п*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v419, "пиздобратии", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v420, "пиздобольством", "п************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v421, "пиздобольство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v422, "пиздобольства", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v423, "пиздоболы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v424, "пиздоболом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v425, "пиздоболов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v426, "пиздоболкой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v427, "пиздоболка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v428, "пиздоболия", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v429, "пиздоболию", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v430, "пиздоболить", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v431, "пиздоболии", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v432, "пиздоболие", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v433, "пиздоболами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v434, "пиздобола", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v435, "пиздобол", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v436, "пиздоблядство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v437, "пиздоблядский", "п***********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v438, "пиздоблядская", "п***********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v439, "пиздоблядина", "п**********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v440, "пиздо", "п***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v441, "пизднц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v442, "пиздлявых", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v443, "пиздлявый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v444, "пиздлявые", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v445, "пиздлявой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v446, "пиздлявая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v447, "пиздлом", "п*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v448, "пиздло", "п****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v449, "пиздливых", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v450, "пиздливым", "п*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v451, "пиздливый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v452, "пиздливые", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v453, "пиздливы", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v454, "пиздливое", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v455, "пиздливая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v456, "пиздлив", "п*****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v457, "пиздия", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v458, "пиздиют", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v459, "пиздию", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v460, "пиздищи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v461, "пиздище", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v462, "пиздища", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v463, "пиздишься", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v464, "пиздишь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v465, "пиздиш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v466, "пиздица", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v467, "пиздиц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v468, "пиздиться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v469, "пиздить", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v470, "пиздится", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v471, "пиздити", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v472, "пиздитесь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v473, "пиздите", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v474, "пиздит", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v475, "пиздис", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v476, "пиздиной", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v477, "пиздинг", "п*****г");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v478, "пиздина", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v479, "пиздимся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v480, "пиздим", "п****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v481, "пиздился", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v482, "пиздилок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v483, "пиздилово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v484, "пиздиловки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v485, "пиздиловка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v486, "пиздилку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v487, "пиздилки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v488, "пиздилка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v489, "пиздились", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v490, "пиздили", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v491, "пиздилась", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v492, "пиздила", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v493, "пиздил", "п****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v494, "пиздикулус", "п********с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v495, "пиздика", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v496, "пиздий", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v497, "пиздиишь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v498, "пиздии", "п****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v499, "пиздиет", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v500, "пизди", "п***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v501, "пизджу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v502, "пиздешь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v503, "пиздешн", "п*****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v504, "пиздеш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v505, "пиздечик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v506, "пиздеця", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v507, "пиздецю", "п*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v508, "пиздець", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v509, "пиздецы", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v510, "пиздецъ", "п*****ъ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v511, "пиздецхочу", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v512, "пиздецу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v513, "пиздецты", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v514, "пиздецсижу", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v515, "пиздецс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v516, "пиздецпо", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v517, "пиздецочек", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v518, "пиздецом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v519, "пиздецок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v520, "пиздецовых", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v521, "пиздецовым", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v522, "пиздецовый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v523, "пиздецовые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v524, "пиздецовую", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v525, "пиздецовский", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v526, "пиздецовость", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v527, "пиздецовой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v528, "пиздецовое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v529, "пиздецово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v530, "пиздецович", "п********ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v531, "пиздецовее", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v532, "пиздецовая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v533, "пиздецов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v534, "пиздецный", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v535, "пиздецнадо", "п********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v536, "пиздецмне", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v537, "пиздецменя", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v538, "пиздецкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v539, "пиздецкое", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v540, "пиздецкого", "п********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v541, "пиздецко", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v542, "пиздецких", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v543, "пиздецким", "п*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v544, "пиздецкий", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v545, "пиздецкие", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v546, "пиздецки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v547, "пиздецкая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v548, "пиздеци", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v549, "пиздецесли", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v550, "пиздеце", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v551, "пиздецдаже", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v552, "пиздецда", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v553, "пиздецв", "п*****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v554, "пиздецахах", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v555, "пиздецах", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v556, "пиздецами", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v557, "пиздецам", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v558, "пиздеца", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v559, "пиздец", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v560, "пиздеуц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v561, "пиздеться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v562, "пиздеть", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v563, "пиздетц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v564, "пиздетски", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v565, "пиздетс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v566, "пиздет", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v567, "пиздесь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v568, "пиздес", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v569, "пиздень", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v570, "пизденышь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v571, "пизденыши", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v572, "пизденыш", "п******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v573, "пизденочка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v574, "пизденок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v575, "пизденку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v576, "пизденкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v577, "пизденки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v578, "пизденке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v579, "пизденка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v580, "пиздени", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v581, "пиздельники", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v582, "пиздельник", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v583, "пизделся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v584, "пизделово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v585, "пизделовка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v586, "пиздело", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v587, "пизделку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v588, "пизделки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v589, "пизделка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v590, "пизделись", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v591, "пиздели", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v592, "пизделей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v593, "пиздела", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v594, "пиздел", "п****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v595, "пиздек", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v596, "пиздейшн", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v597, "пиздейшин", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v598, "пиздейшен", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v599, "пиздейц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v600, "пиздейро", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v601, "пиздей", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v602, "пиздез", "п****з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v603, "пиздежь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v604, "пиздежу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v605, "пиздежом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v606, "пиздежи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v607, "пиздежем", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v608, "пиздеже", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v609, "пиздежа", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v610, "пиздеж", "п****ж");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v611, "пиздеецц", "п******ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v612, "пиздеец", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v613, "пизде", "п***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v614, "пиздая", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v615, "пиздаче", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v616, "пиздач", "п****ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v617, "пиздация", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v618, "пиздахаханьки", "п***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v619, "пиздахана", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v620, "пиздаускас", "п********с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v621, "пиздать", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v622, "пиздатыый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v623, "пиздатых", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v624, "пиздатыми", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v625, "пиздатым", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v626, "пиздатый", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v627, "пиздатые", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v628, "пиздаты", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v629, "пиздатую", "п******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v630, "пиздатостью", "п*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v631, "пиздатость", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v632, "пиздатости", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v633, "пиздатоо", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v634, "пиздатому", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v635, "пиздатом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v636, "пиздатой", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v637, "пиздатое", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v638, "пиздатого", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v639, "пиздато", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v640, "пиздатни", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v641, "пиздатий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v642, "пиздатенькое", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v643, "пиздатенького", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v644, "пиздатенько", "п*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v645, "пиздатеньких", "п**********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v646, "пиздатенький", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v647, "пиздатенькие", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v648, "пиздатенькая", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v649, "пиздатейший", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v650, "пиздатейшие", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v651, "пиздатейшее", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v652, "пиздатейше", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v653, "пиздатейшая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v654, "пиздатей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v655, "пиздатее", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v656, "пиздатая", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v657, "пиздата", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v658, "пиздат", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v659, "пиздастрадашки", "п************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v660, "пиздастрадания", "п************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v661, "пиздастраданий", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v662, "пиздастрадалец", "п************ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v663, "пиздас", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v664, "пиздарулю", "п*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v665, "пиздарики", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v666, "пиздари", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v667, "пиздарез", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v668, "пиздарваньчик", "п***********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v669, "пиздапроёбина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v670, "пиздапроебины", "п***********ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v671, "пиздапроебина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v672, "пиздапизда", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v673, "пизданёшь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v674, "пизданётся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v675, "пизданёт", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v676, "пизданём", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v677, "пиздануца", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v678, "пиздануться", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v679, "пиздануть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v680, "пизданутых", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v681, "пизданутыми", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v682, "пизданутым", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v683, "пизданутый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v684, "пизданутые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v685, "пизданутую", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v686, "пизданутся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v687, "пизданутость", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v688, "пизданутости", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v689, "пизданутой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v690, "пизданутое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v691, "пизданутого", "п*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v692, "пизданутей", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v693, "пизданутая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v694, "пизданут", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v695, "пизданусь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v696, "пизданулся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v697, "пизданулось", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v698, "пиздануло", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v699, "пизданулись", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v700, "пизданули", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v701, "пизданулась", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v702, "пизданула", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v703, "пизданул", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v704, "пиздану", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v705, "пизданога", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v706, "пиздано", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v707, "пизданите", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v708, "пизданись", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v709, "пиздани", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v710, "пизданешься", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v711, "пизданешь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v712, "пизданется", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v713, "пизданете", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v714, "пизданет", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v715, "пизданем", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v716, "пиздами", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v717, "пиздамба", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v718, "пиздам", "п****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v719, "пиздализ", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v720, "пиздакшионер", "п**********р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v721, "пиздак", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v722, "пиздаебы", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v723, "пиздаебина", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v724, "пиздаеб", "п*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v725, "пиздаджигурда", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v726, "пиздадельный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v727, "пиздадельные", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v728, "пиздадельная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v729, "пиздада", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v730, "пиздаган", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v731, "пиздавать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v732, "пиздаватый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v733, "пиздаватые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v734, "пиздаболят", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v735, "пиздаболю", "п*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v736, "пиздабольству", "п***********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v737, "пиздабольством", "п************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v738, "пиздабольство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v739, "пиздабольстве", "п***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v740, "пиздабольства", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v741, "пиздабольный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v742, "пиздабольная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v743, "пиздаболь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v744, "пиздаболы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v745, "пиздаболу", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v746, "пиздаболом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v747, "пиздаболок", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v748, "пиздаболов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v749, "пиздаболку", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v750, "пиздаболкой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v751, "пиздаболки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v752, "пиздаболке", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v753, "пиздаболками", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v754, "пиздаболка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v755, "пиздаболия", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v756, "пиздаболию", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v757, "пиздаболище", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v758, "пиздаболишь", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v759, "пиздаболить", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v760, "пиздаболит", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v761, "пиздаболина", "п*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v762, "пиздаболии", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v763, "пиздаболией", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v764, "пиздаболие", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v765, "пиздаболами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v766, "пиздаболам", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v767, "пиздабола", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v768, "пиздабол", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v769, "пиздаатыый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v770, "пизда", "п***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v771, "пизд", "п**д");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v772, "отъебаться", "о********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v773, "отпиздячить", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v774, "отпиздить", "о*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v775, "остопиздить", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v776, "остопиздеть", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v777, "опизденивающе", "о***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v778, "опизде", "о****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v779, "однохуйственно", "о************о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v780, "обьебать", "о******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v781, "объебать", "о******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v782, "нехуйственно", "н**********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v783, "нехуй", "н***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v784, "нахуйник", "н******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v785, "нахуй", "н***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v786, "настопиздить", "н**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v787, "настоебать", "н********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v788, "напиздить", "н*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v789, "напиздили", "н*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v790, "напиздело", "н*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v791, "напиздели", "н*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v792, "напиздел", "н******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v793, "наебать", "н*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v794, "мінет", "м***т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v795, "мудаків", "м*****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v796, "манда", "м***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v797, "лохотроном", "л********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v798, "лохами", "л****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v799, "испиздить", "и*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v800, "заёбанный", "з*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v801, "затрахивать", "з*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v802, "затрахать", "з*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v803, "затрахали", "з*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v804, "затрахала", "з*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v805, "запиздячить", "з*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v806, "запиздеть", "з*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v807, "залупа", "з****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v808, "заебаться", "з*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v809, "заебать", "з*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v810, "заебатый", "з******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v811, "заебатая", "з******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v812, "заебанец", "з******ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[12],0>(v813, "заeбанный", "з*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v814, "ебля", "е**я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v815, "ебатюшки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v816, "ебатьялох", "е*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v817, "ебатья", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v818, "ебатьты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[18],0>(v819, "ебаться-сраться", "е*************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v820, "ебаться", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v821, "ебатьколотить", "е***********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[15],0>(v822, "ебать-копать", "е**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[17],0>(v823, "ебать-колотить", "е************ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v824, "ебать", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v825, "ебаты", "е***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v826, "ебату", "е***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v827, "ебатся", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v828, "ебатория", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v829, "ебаторию", "е******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v830, "ебаторий", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v831, "ебатня", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v832, "ебатню", "е****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v833, "ебатика", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v834, "ебати", "е***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v835, "ебатень", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v836, "ебате", "е***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v837, "ебата", "е***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v838, "ебат", "е**т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v839, "ебарь", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v840, "ебанёшься", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v841, "ебанёшь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v842, "ебанётся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v843, "ебанёте", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v844, "ебанёт", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v845, "ебанём", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v846, "ебанята", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v847, "ебаням", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v848, "ебаня", "е***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v849, "ебаньтяй", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v850, "ебанькоо", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v851, "ебаньком", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v852, "ебанько", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v853, "ебаньки", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v854, "ебань", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v855, "ебаныый", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v856, "ебаных", "е****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v857, "ебанырот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v858, "ебаными", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v859, "ебаным", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v860, "ебаныйрот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v861, "ебаныйврот", "е********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v862, "ебаный", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v863, "ебаныи", "е****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v864, "ебаные", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v865, "ебаныврот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v866, "ебаны", "е***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v867, "ебаную", "е****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v868, "ебанушку", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v869, "ебанушкой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v870, "ебанушки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v871, "ебанушками", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v872, "ебанушкам", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v873, "ебанушка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v874, "ебанушек", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v875, "ебануцца", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v876, "ебануцо", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v877, "ебануца", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v878, "ебануха", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v879, "ебанууться", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v880, "ебануутая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v881, "ебанутьсяя", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v882, "ебануться", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v883, "ебануть", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v884, "ебанутых", "е******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v885, "ебанутыми", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v886, "ебанутым", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v887, "ебанутый", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v888, "ебанутые", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v889, "ебануты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v890, "ебанутую", "е******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v891, "ебанутся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v892, "ебанутством", "е*********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v893, "ебанутство", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v894, "ебанутства", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v895, "ебанутсво", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v896, "ебанутось", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v897, "ебанутостью", "е*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v898, "ебанутость", "е********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v899, "ебанутости", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v900, "ебанутостей", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v901, "ебанутому", "е*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v902, "ебанутом", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v903, "ебанутой", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v904, "ебанутое", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v905, "ебанутого", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v906, "ебануто", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v907, "ебанутки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v908, "ебанутка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v909, "ебанутики", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v910, "ебанутика", "е*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v911, "ебанутик", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v912, "ебанутий", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v913, "ебанутейший", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v914, "ебанутейшие", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v915, "ебанутейшая", "е*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v916, "ебанутей", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v917, "ебанутее", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v918, "ебануте", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v919, "ебанутаяя", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v920, "ебанутая", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v921, "ебанутаая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v922, "ебанутаЯ", "е******Я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v923, "ебанута", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v924, "ебанут", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v925, "ебанусь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v926, "ебанулся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v927, "ебанулсь", "е******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v928, "ебанулсо", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v929, "ебанулс", "е*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v930, "ебанулось", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v931, "ебануло", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v932, "ебанулисья", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v933, "ебанулись", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v934, "ебанули", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v935, "ебанулась", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v936, "ебанула", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v937, "ебанул", "е****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v938, "ебануй", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v939, "ебану", "е***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v940, "ебантяями", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v941, "ебантяям", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v942, "ебантяя", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v943, "ебантяйство", "е*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v944, "ебантяйства", "е*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v945, "ебантяйское", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v946, "ебантяйские", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v947, "ебантяйки", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v948, "ебантяйка", "е*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v949, "ебантяй", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v950, "ебантяи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v951, "ебантяем", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v952, "ебантяев", "е******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v953, "ебантизм", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v954, "ебантеи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v955, "ебанство", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v956, "ебанско", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v957, "ебанский", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v958, "ебанрот", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v959, "ебаноё", "е****ё");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v960, "ебаному", "е*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v961, "ебаном", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v962, "ебанок", "е****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v963, "ебаной", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v964, "ебаное", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v965, "ебаного", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v966, "ебановрот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v967, "ебанов", "е****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v968, "ебано", "е***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v969, "ебанных", "е*****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v970, "ебанными", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v971, "ебанным", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v972, "ебанныйврот", "е*********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v973, "ебанный", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v974, "ебанныи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v975, "ебанные", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v976, "ебанную", "е*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v977, "ебаннутых", "е*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v978, "ебаннутый", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v979, "ебаннутые", "е*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v980, "ебаннутой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v981, "ебаннутое", "е*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v982, "ебаннутого", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v983, "ебаннутая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v984, "ебанному", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v985, "ебанном", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v986, "ебанной", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v987, "ебанное", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v988, "ебанного", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v989, "ебанно", "е****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v990, "ебанная", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v991, "ебанна", "е****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v992, "ебанка", "е****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v993, "ебания", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v994, "ебанический", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v995, "ебанические", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v996, "ебанически", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v997, "ебанитовая", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v998, "ебанитесь", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v999, "ебаните", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1000, "ебанись", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1001, "ебанистической", "е************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1002, "ебанистический", "е************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1003, "ебанистические", "е************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v1004, "ебанистически", "е***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1005, "ебанистическая", "е************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1006, "ебанистика", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1007, "ебанины", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1008, "ебанина", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1009, "ебаний", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1010, "ебании", "е****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1011, "ебанизмом", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1012, "ебанизма", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1013, "ебанизм", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1014, "ебание", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1015, "ебанешься", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1016, "ебанешь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1017, "ебанешся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1018, "ебанется", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1019, "ебанете", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1020, "ебанет", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1021, "ебаненько", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1022, "ебаненький", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1023, "ебанемся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1024, "ебанем", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1025, "ебанейший", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1026, "ебаней", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1027, "ебанее", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1028, "ебанврот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1029, "ебанаяя", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1030, "ебаная", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1031, "ебанашку", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1032, "ебанашкой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1033, "ебанашки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1034, "ебанашке", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1035, "ебанашками", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1036, "ебанашкам", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1037, "ебанашка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1038, "ебанаши", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1039, "ебанашечка", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1040, "ебанашек", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1041, "ебанафт", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1042, "ебанатый", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1043, "ебанаты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1044, "ебанату", "е*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1045, "ебанатство", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1046, "ебанатства", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1047, "ебанатской", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1048, "ебанатский", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1049, "ебанатские", "е********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1050, "ебанатская", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1051, "ебанаторы", "е*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1052, "ебанатор", "е******р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1053, "ебанатом", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1054, "ебанатов", "е******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1055, "ебанатки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1056, "ебанатка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1057, "ебанатиков", "е********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1058, "ебанатики", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1059, "ебанатик", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1060, "ебанатизм", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1061, "ебанатами", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1062, "ебанатам", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1063, "ебаната", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1064, "ебанат", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1065, "ебанарь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1066, "ебанарот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1067, "ебанан", "е****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1068, "ебанами", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1069, "ебанамать", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1070, "ебанай", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1071, "ебанавты", "е******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1072, "ебанавт", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1073, "ебанаая", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1074, "ебана", "е***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1075, "ебан", "е**н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1076, "дрочити", "д*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1077, "допиздеться", "д*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1078, "доебаться", "д*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v1079, "до-пизды", "д******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1080, "гівнюк", "г****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1081, "гівно", "г***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1082, "гребаных", "г******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1083, "гребаную", "г******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1084, "гребаного", "г*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1085, "гребанные", "г*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1086, "гребанную", "г*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1087, "выпиздить", "в*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1088, "выпиздеться", "в*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1089, "выебать", "в*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1090, "выблядыш", "в******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1091, "выблядок", "в******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1092, "въебаться", "в*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1093, "въебать", "в*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1094, "всратися", "в******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1095, "всрались", "в******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1096, "впиздячить", "в********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1097, "блять", "б***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1098, "блятство", "б******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1099, "блятский", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1100, "блятская", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1101, "блянадо", "б*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1102, "бляменя", "б*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1103, "блямба", "б****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1104, "блямб", "б***б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1105, "блякаешь", "б******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1106, "блядях", "б****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1107, "блядями", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1108, "блядюга", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1109, "блядьми", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1110, "блядь", "б***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1111, "блядуют", "б*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1112, "блядушки", "б******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1113, "блядунья", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1114, "блядуны", "б*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1115, "блядун", "б****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1116, "блядуешь", "б******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1117, "блядует", "б*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1118, "блядству", "б******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v1119, "блядствовать", "б**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1120, "блядство", "б******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1121, "блядстве", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1122, "блядства", "б******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1123, "блядскую", "б******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1124, "блядском", "б******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1125, "блядской", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1126, "блядское", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1127, "блядско", "б*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1128, "блядских", "б******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1129, "блядским", "б******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1130, "блядский", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1131, "блядские", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1132, "блядски", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1133, "блядская", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1134, "блядота", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1135, "блядовать", "б*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1136, "блядки", "б****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1137, "блядках", "б*****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1138, "блядищи", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1139, "блядище", "б*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1140, "блядища", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1141, "блядины", "б*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1142, "блядину", "б*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1143, "блядиной", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1144, "блядинка", "б******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1145, "блядине", "б*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1146, "блядина", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1147, "бляди", "б***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1148, "бляд", "б**д");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1149, "блябуду", "б*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1150, "блябу", "б***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1151, "ахуй", "а**й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1152, "архипиздрит", "а*********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v1153, "eбаный", "e****й");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_uk(void)::sProfanityData_uk, (uint64_t)v4, 0x47EuLL);
    for (uint64_t i = 0; i != -6900; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v1153[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_uk(void)::sProfanityData_uk, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_uk(void)::sProfanityData_uk[0], unk_1EA3D8DC8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8DC8 - GetProfanityFilter_uk(void)::sProfanityData_uk[0]) >> 4));
}

void sub_1C5E8FDB8(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 55152;
  uint64_t v4 = -55200;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_ar(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  v1808[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v4, "\u200Fينتاك", "ي***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v5, "\u200Fوللكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v6, "\u200Fوللكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v7, "\u200Fوللكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v8, "\u200Fوللشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v9, "\u200Fوللشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v10, "\u200Fوللزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v11, "\u200Fوللزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v12, "\u200Fوللزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v13, "\u200Fوللخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v14, "\u200Fوللخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v15, "\u200Fولكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v16, "\u200Fولكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v17, "\u200Fولكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v18, "\u200Fولكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v19, "\u200Fولكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v20, "\u200Fولكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v21, "\u200Fولكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v22, "\u200Fولكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v23, "\u200Fولكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v24, "\u200Fولكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v25, "\u200Fولكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v26, "\u200Fولكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v27, "\u200Fولكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v28, "\u200Fولكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v29, "\u200Fولكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v30, "\u200Fولكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v31, "\u200Fولكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v32, "\u200Fولكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v33, "\u200Fولكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v34, "\u200Fولكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v35, "\u200Fولكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v36, "\u200Fولكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v37, "\u200Fولكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v38, "\u200Fولكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v39, "\u200Fولكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v40, "\u200Fولكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v41, "\u200Fولكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v42, "\u200Fولكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v43, "\u200Fولكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v44, "\u200Fولكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v45, "\u200Fولشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v46, "\u200Fولشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v47, "\u200Fولشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v48, "\u200Fولشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v49, "\u200Fولشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v50, "\u200Fولشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v51, "\u200Fولشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v52, "\u200Fولشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v53, "\u200Fولشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v54, "\u200Fولشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v55, "\u200Fولشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v56, "\u200Fولشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v57, "\u200Fولشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v58, "\u200Fولشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v59, "\u200Fولشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v60, "\u200Fولشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v61, "\u200Fولشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v62, "\u200Fولشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v63, "\u200Fولشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v64, "\u200Fولشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v65, "\u200Fولزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v66, "\u200Fولزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v67, "\u200Fولزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v68, "\u200Fولزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v69, "\u200Fولزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v70, "\u200Fولزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v71, "\u200Fولزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v72, "\u200Fولزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v73, "\u200Fولزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v74, "\u200Fولزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v75, "\u200Fولزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v76, "\u200Fولزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v77, "\u200Fولزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v78, "\u200Fولزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v79, "\u200Fولزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v80, "\u200Fولزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v81, "\u200Fولزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v82, "\u200Fولزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v83, "\u200Fولزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v84, "\u200Fولزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v85, "\u200Fولزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v86, "\u200Fولزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v87, "\u200Fولزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v88, "\u200Fولزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v89, "\u200Fولزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v90, "\u200Fولزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v91, "\u200Fولزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v92, "\u200Fولزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v93, "\u200Fولزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v94, "\u200Fولزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v95, "\u200Fولخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v96, "\u200Fولخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v97, "\u200Fولخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v98, "\u200Fولخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v99, "\u200Fولخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v100, "\u200Fولخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v101, "\u200Fولخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v102, "\u200Fولخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v103, "\u200Fولخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v104, "\u200Fولخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v105, "\u200Fولخرتي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v106, "\u200Fولخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v107, "\u200Fولخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v108, "\u200Fولخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v109, "\u200Fولخرته", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v110, "\u200Fولخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v111, "\u200Fولخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v112, "\u200Fولخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v113, "\u200Fولخرتك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v114, "\u200Fولخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v115, "\u200Fوككسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v116, "\u200Fوككسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v117, "\u200Fوككسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v118, "\u200Fوككسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v119, "\u200Fوككسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v120, "\u200Fوككسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v121, "\u200Fوككسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v122, "\u200Fوككسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v123, "\u200Fوككسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v124, "\u200Fوككسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v125, "\u200Fوككسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v126, "\u200Fوككسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v127, "\u200Fوككسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v128, "\u200Fوككسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v129, "\u200Fوككسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v130, "\u200Fوككسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v131, "\u200Fوككسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v132, "\u200Fوككسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v133, "\u200Fوككسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v134, "\u200Fوككساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v135, "\u200Fوككساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v136, "\u200Fوككساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v137, "\u200Fوككساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v138, "\u200Fوككساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v139, "\u200Fوككساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v140, "\u200Fوككساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v141, "\u200Fوككساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v142, "\u200Fوككساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v143, "\u200Fوككساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v144, "\u200Fوككس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v145, "\u200Fوكشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v146, "\u200Fوكشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v147, "\u200Fوكشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v148, "\u200Fوكشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v149, "\u200Fوكشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v150, "\u200Fوكشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v151, "\u200Fوكشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v152, "\u200Fوكشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v153, "\u200Fوكشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v154, "\u200Fوكشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v155, "\u200Fوكشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v156, "\u200Fوكشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v157, "\u200Fوكشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v158, "\u200Fوكشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v159, "\u200Fوكشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v160, "\u200Fوكشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v161, "\u200Fوكشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v162, "\u200Fوكشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v163, "\u200Fوكشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v164, "\u200Fوكشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v165, "\u200Fوكسي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v166, "\u200Fوكسهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v167, "\u200Fوكسهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v168, "\u200Fوكسها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v169, "\u200Fوكسه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v170, "\u200Fوكسنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v171, "\u200Fوكسكوسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v172, "\u200Fوكسكوسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v173, "\u200Fوكسكوسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v174, "\u200Fوكسكوسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v175, "\u200Fوكسكوسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v176, "\u200Fوكسكوسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v177, "\u200Fوكسكوسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v178, "\u200Fوكسكوسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v179, "\u200Fوكسكوسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v180, "\u200Fوكسكوس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v181, "\u200Fوكسكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v182, "\u200Fوكسكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v183, "\u200Fوكسك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v184, "\u200Fوكساسي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v185, "\u200Fوكساسهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v186, "\u200Fوكساسهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v187, "\u200Fوكساسها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v188, "\u200Fوكساسه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v189, "\u200Fوكساسنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v190, "\u200Fوكساسكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v191, "\u200Fوكساسكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v192, "\u200Fوكساسك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v193, "\u200Fوكساس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v194, "\u200Fوكس", "و*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v195, "\u200Fوكزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v196, "\u200Fوكزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v197, "\u200Fوكزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v198, "\u200Fوكزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v199, "\u200Fوكزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v200, "\u200Fوكزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v201, "\u200Fوكزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v202, "\u200Fوكزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v203, "\u200Fوكزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v204, "\u200Fوكزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v205, "\u200Fوكزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v206, "\u200Fوكزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v207, "\u200Fوكزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v208, "\u200Fوكزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v209, "\u200Fوكزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v210, "\u200Fوكزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v211, "\u200Fوكزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v212, "\u200Fوكزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v213, "\u200Fوكزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v214, "\u200Fوكزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v215, "\u200Fوكزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v216, "\u200Fوكزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v217, "\u200Fوكزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v218, "\u200Fوكزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v219, "\u200Fوكزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v220, "\u200Fوكزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v221, "\u200Fوكزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v222, "\u200Fوكزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v223, "\u200Fوكزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v224, "\u200Fوكزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v225, "\u200Fوكخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v226, "\u200Fوكخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v227, "\u200Fوكخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v228, "\u200Fوكخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v229, "\u200Fوكخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v230, "\u200Fوكخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v231, "\u200Fوكخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v232, "\u200Fوكخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v233, "\u200Fوكخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v234, "\u200Fوكخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v235, "\u200Fوكخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v236, "\u200Fوكخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v237, "\u200Fوكخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v238, "\u200Fوكخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v239, "\u200Fوكخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v240, "\u200Fوكخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v241, "\u200Fوكخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v242, "\u200Fوكالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v243, "\u200Fوكالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v244, "\u200Fوكالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v245, "\u200Fوكالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v246, "\u200Fوكالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v247, "\u200Fوكالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v248, "\u200Fوكالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v249, "\u200Fوكالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v250, "\u200Fوكالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v251, "\u200Fوكالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v252, "\u200Fوشرموطتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v253, "\u200Fوشرموطتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v254, "\u200Fوشرموطتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v255, "\u200Fوشرموطتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v256, "\u200Fوشرموطته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v257, "\u200Fوشرموطتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v258, "\u200Fوشرموطتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v259, "\u200Fوشرموطتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v260, "\u200Fوشرموطتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v261, "\u200Fوشرموطة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v262, "\u200Fوشرموطاتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v263, "\u200Fوشرموطاتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v264, "\u200Fوشرموطاتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v265, "\u200Fوشرموطاتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v266, "\u200Fوشرموطاته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v267, "\u200Fوشرموطاتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v268, "\u200Fوشرموطاتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v269, "\u200Fوشرموطاتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v270, "\u200Fوشرموطاتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v271, "\u200Fوشرموطات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v272, "\u200Fوزوبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v273, "\u200Fوزوبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v274, "\u200Fوزوبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v275, "\u200Fوزوبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v276, "\u200Fوزوبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v277, "\u200Fوزوبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v278, "\u200Fوزوبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v279, "\u200Fوزوبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v280, "\u200Fوزوبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v281, "\u200Fوزوب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v282, "\u200Fوزبي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v283, "\u200Fوزبهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v284, "\u200Fوزبهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v285, "\u200Fوزبها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v286, "\u200Fوزبه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v287, "\u200Fوزبنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v288, "\u200Fوزبكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v289, "\u200Fوزبكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v290, "\u200Fوزبك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v291, "\u200Fوزبابي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v292, "\u200Fوزبابهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v293, "\u200Fوزبابهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v294, "\u200Fوزبابها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v295, "\u200Fوزبابه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v296, "\u200Fوزبابنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v297, "\u200Fوزبابكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v298, "\u200Fوزبابكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v299, "\u200Fوزبابك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v300, "\u200Fوزباب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v301, "\u200Fوزب", "و*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v302, "\u200Fوخرواتي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v303, "\u200Fوخرواتهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v304, "\u200Fوخرواتهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v305, "\u200Fوخرواتها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v306, "\u200Fوخرواته", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v307, "\u200Fوخرواتنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v308, "\u200Fوخرواتكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v309, "\u200Fوخرواتكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v310, "\u200Fوخرواتك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v311, "\u200Fوخروات", "و****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v312, "\u200Fوخرتي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v313, "\u200Fوخرته", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v314, "\u200Fوخرتك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v315, "\u200Fوخرة", "و**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v316, "\u200Fوبكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v317, "\u200Fوبكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v318, "\u200Fوبكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v319, "\u200Fوبكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v320, "\u200Fوبكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v321, "\u200Fوبكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v322, "\u200Fوبكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v323, "\u200Fوبكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v324, "\u200Fوبكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v325, "\u200Fوبكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v326, "\u200Fوبكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v327, "\u200Fوبكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v328, "\u200Fوبكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v329, "\u200Fوبكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v330, "\u200Fوبكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v331, "\u200Fوبكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v332, "\u200Fوبكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v333, "\u200Fوبكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v334, "\u200Fوبكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v335, "\u200Fوبكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v336, "\u200Fوبكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v337, "\u200Fوبكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v338, "\u200Fوبكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v339, "\u200Fوبكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v340, "\u200Fوبكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v341, "\u200Fوبكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v342, "\u200Fوبكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v343, "\u200Fوبكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v344, "\u200Fوبكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v345, "\u200Fوبكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v346, "\u200Fوبشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v347, "\u200Fوبشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v348, "\u200Fوبشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v349, "\u200Fوبشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v350, "\u200Fوبشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v351, "\u200Fوبشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v352, "\u200Fوبشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v353, "\u200Fوبشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v354, "\u200Fوبشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v355, "\u200Fوبشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v356, "\u200Fوبشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v357, "\u200Fوبشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v358, "\u200Fوبشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v359, "\u200Fوبشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v360, "\u200Fوبشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v361, "\u200Fوبشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v362, "\u200Fوبشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v363, "\u200Fوبشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v364, "\u200Fوبشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v365, "\u200Fوبشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v366, "\u200Fوبزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v367, "\u200Fوبزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v368, "\u200Fوبزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v369, "\u200Fوبزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v370, "\u200Fوبزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v371, "\u200Fوبزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v372, "\u200Fوبزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v373, "\u200Fوبزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v374, "\u200Fوبزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v375, "\u200Fوبزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v376, "\u200Fوبزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v377, "\u200Fوبزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v378, "\u200Fوبزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v379, "\u200Fوبزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v380, "\u200Fوبزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v381, "\u200Fوبزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v382, "\u200Fوبزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v383, "\u200Fوبزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v384, "\u200Fوبزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v385, "\u200Fوبزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v386, "\u200Fوبزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v387, "\u200Fوبزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v388, "\u200Fوبزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v389, "\u200Fوبزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v390, "\u200Fوبزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v391, "\u200Fوبزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v392, "\u200Fوبزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v393, "\u200Fوبزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v394, "\u200Fوبزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v395, "\u200Fوبزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v396, "\u200Fوبخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v397, "\u200Fوبخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v398, "\u200Fوبخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v399, "\u200Fوبخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v400, "\u200Fوبخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v401, "\u200Fوبخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v402, "\u200Fوبخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v403, "\u200Fوبخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v404, "\u200Fوبخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v405, "\u200Fوبخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v406, "\u200Fوبخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v407, "\u200Fوبخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v408, "\u200Fوبالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v409, "\u200Fوبالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v410, "\u200Fوبالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v411, "\u200Fوبالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v412, "\u200Fوبالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v413, "\u200Fوبالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v414, "\u200Fوبالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v415, "\u200Fوبالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v416, "\u200Fوبالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v417, "\u200Fوبالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v418, "\u200Fوالكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v419, "\u200Fوالكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v420, "\u200Fوالكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v421, "\u200Fوالشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v422, "\u200Fوالشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v423, "\u200Fوالزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v424, "\u200Fوالزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v425, "\u200Fوالزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v426, "\u200Fوالخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v427, "\u200Fوالخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v428, "\u200Fنيكيني", "ن****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v429, "\u200Fنيكني", "ن***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v430, "\u200Fنيك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v431, "\u200Fنياكة", "ن***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v432, "\u200Fللكسكوس", "ل*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v433, "\u200Fللكساس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v434, "\u200Fللكس", "ل**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v435, "\u200Fللشرموطة", "ل******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v436, "\u200Fللشرموطات", "ل*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v437, "\u200Fللزوب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v438, "\u200Fللزباب", "ل****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v439, "\u200Fللزب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v440, "\u200Fللخروات", "ل*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v441, "\u200Fللخرة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v442, "\u200Fلكسي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v443, "\u200Fلكسهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v444, "\u200Fلكسهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v445, "\u200Fلكسها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v446, "\u200Fلكسه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v447, "\u200Fلكسنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v448, "\u200Fلكسكوسي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v449, "\u200Fلكسكوسهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v450, "\u200Fلكسكوسهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v451, "\u200Fلكسكوسها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v452, "\u200Fلكسكوسه", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v453, "\u200Fلكسكوسنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v454, "\u200Fلكسكوسكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v455, "\u200Fلكسكوسكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v456, "\u200Fلكسكوسك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v457, "\u200Fلكسكوس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v458, "\u200Fلكسكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v459, "\u200Fلكسكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v460, "\u200Fلكسك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v461, "\u200Fلكساسي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v462, "\u200Fلكساسهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v463, "\u200Fلكساسهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v464, "\u200Fلكساسها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v465, "\u200Fلكساسه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v466, "\u200Fلكساسنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v467, "\u200Fلكساسكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v468, "\u200Fلكساسكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v469, "\u200Fلكساسك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v470, "\u200Fلكساس", "ل***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v471, "\u200Fلكس", "ل*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v472, "\u200Fلشرموطتي", "ل******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v473, "\u200Fلشرموطتهن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v474, "\u200Fلشرموطتهم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v475, "\u200Fلشرموطتها", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v476, "\u200Fلشرموطته", "ل******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v477, "\u200Fلشرموطتنا", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v478, "\u200Fلشرموطتكن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v479, "\u200Fلشرموطتكم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v480, "\u200Fلشرموطتك", "ل******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v481, "\u200Fلشرموطة", "ل*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v482, "\u200Fلشرموطاتي", "ل*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v483, "\u200Fلشرموطاتهن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v484, "\u200Fلشرموطاتهم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v485, "\u200Fلشرموطاتها", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v486, "\u200Fلشرموطاته", "ل*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v487, "\u200Fلشرموطاتنا", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v488, "\u200Fلشرموطاتكن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v489, "\u200Fلشرموطاتكم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v490, "\u200Fلشرموطاتك", "ل*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v491, "\u200Fلشرموطات", "ل******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v492, "\u200Fلزوبي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v493, "\u200Fلزوبهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v494, "\u200Fلزوبهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v495, "\u200Fلزوبها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v496, "\u200Fلزوبه", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v497, "\u200Fلزوبنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v498, "\u200Fلزوبكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v499, "\u200Fلزوبكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v500, "\u200Fلزوبك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v501, "\u200Fلزوب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v502, "\u200Fلزبي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v503, "\u200Fلزبهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v504, "\u200Fلزبهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v505, "\u200Fلزبها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v506, "\u200Fلزبه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v507, "\u200Fلزبنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v508, "\u200Fلزبكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v509, "\u200Fلزبكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v510, "\u200Fلزبك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v511, "\u200Fلزبابي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v512, "\u200Fلزبابهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v513, "\u200Fلزبابهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v514, "\u200Fلزبابها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v515, "\u200Fلزبابه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v516, "\u200Fلزبابنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v517, "\u200Fلزبابكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v518, "\u200Fلزبابكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v519, "\u200Fلزبابك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v520, "\u200Fلزباب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v521, "\u200Fلزب", "ل*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v522, "\u200Fلخرواتي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v523, "\u200Fلخرواتهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v524, "\u200Fلخرواتهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v525, "\u200Fلخرواتها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v526, "\u200Fلخرواته", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v527, "\u200Fلخرواتنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v528, "\u200Fلخرواتكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v529, "\u200Fلخرواتكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v530, "\u200Fلخرواتك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v531, "\u200Fلخروات", "ل****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v532, "\u200Fلخرتي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v533, "\u200Fلخرتهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v534, "\u200Fلخرتهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v535, "\u200Fلخرتها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v536, "\u200Fلخرته", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v537, "\u200Fلخرتنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v538, "\u200Fلخرتكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v539, "\u200Fلخرتكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v540, "\u200Fلخرتك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v541, "\u200Fلخرة", "ل**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v542, "\u200Fككسي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v543, "\u200Fككسهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v544, "\u200Fككسهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v545, "\u200Fككسها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v546, "\u200Fككسه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v547, "\u200Fككسنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v548, "\u200Fككسكوسي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v549, "\u200Fككسكوسهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v550, "\u200Fككسكوسهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v551, "\u200Fككسكوسها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v552, "\u200Fككسكوسه", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v553, "\u200Fككسكوسنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v554, "\u200Fككسكوسكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v555, "\u200Fككسكوسكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v556, "\u200Fككسكوسك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v557, "\u200Fككسكوس", "ك****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v558, "\u200Fككسكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v559, "\u200Fككسكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v560, "\u200Fككسك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v561, "\u200Fككساسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v562, "\u200Fككساسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v563, "\u200Fككساسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v564, "\u200Fككساسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v565, "\u200Fككساسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v566, "\u200Fككساسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v567, "\u200Fككساسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v568, "\u200Fككساسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v569, "\u200Fككساسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v570, "\u200Fككساس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v571, "\u200Fككس", "ك*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v572, "\u200Fكشرموطتي", "ك******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v573, "\u200Fكشرموطتهن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v574, "\u200Fكشرموطتهم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v575, "\u200Fكشرموطتها", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v576, "\u200Fكشرموطته", "ك******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v577, "\u200Fكشرموطتنا", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v578, "\u200Fكشرموطتكن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v579, "\u200Fكشرموطتكم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v580, "\u200Fكشرموطتك", "ك******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v581, "\u200Fكشرموطة", "ك*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v582, "\u200Fكشرموطاتي", "ك*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v583, "\u200Fكشرموطاتهن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v584, "\u200Fكشرموطاتهم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v585, "\u200Fكشرموطاتها", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v586, "\u200Fكشرموطاته", "ك*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v587, "\u200Fكشرموطاتنا", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v588, "\u200Fكشرموطاتكن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v589, "\u200Fكشرموطاتكم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v590, "\u200Fكشرموطاتك", "ك*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v591, "\u200Fكشرموطات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v592, "\u200Fكسي", "ك*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v593, "\u200Fكسهن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v594, "\u200Fكسهم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v595, "\u200Fكسها", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v596, "\u200Fكسه", "ك*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v597, "\u200Fكسنا", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v598, "\u200Fكسكوسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v599, "\u200Fكسكوسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v600, "\u200Fكسكوسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v601, "\u200Fكسكوسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v602, "\u200Fكسكوسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v603, "\u200Fكسكوسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v604, "\u200Fكسكوسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v605, "\u200Fكسكوسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v606, "\u200Fكسكوسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v607, "\u200Fكسكوس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v608, "\u200Fكسكن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v609, "\u200Fكسكم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v610, "\u200Fكسك", "ك*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v611, "\u200Fكساسي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v612, "\u200Fكساسهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v613, "\u200Fكساسهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v614, "\u200Fكساسها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v615, "\u200Fكساسه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v616, "\u200Fكساسنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v617, "\u200Fكساسكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v618, "\u200Fكساسكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v619, "\u200Fكساسك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v620, "\u200Fكساس", "ك**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v621, "\u200Fكس", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v622, "\u200Fكزوبي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v623, "\u200Fكزوبهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v624, "\u200Fكزوبهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v625, "\u200Fكزوبها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v626, "\u200Fكزوبه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v627, "\u200Fكزوبنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v628, "\u200Fكزوبكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v629, "\u200Fكزوبكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v630, "\u200Fكزوبك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v631, "\u200Fكزوب", "ك**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v632, "\u200Fكزبي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v633, "\u200Fكزبهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v634, "\u200Fكزبهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v635, "\u200Fكزبها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v636, "\u200Fكزبه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v637, "\u200Fكزبنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v638, "\u200Fكزبكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v639, "\u200Fكزبكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v640, "\u200Fكزبك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v641, "\u200Fكزبابي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v642, "\u200Fكزبابهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v643, "\u200Fكزبابهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v644, "\u200Fكزبابها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v645, "\u200Fكزبابه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v646, "\u200Fكزبابنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v647, "\u200Fكزبابكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v648, "\u200Fكزبابكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v649, "\u200Fكزبابك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v650, "\u200Fكزباب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v651, "\u200Fكزب", "ك*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v652, "\u200Fكخرواتي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v653, "\u200Fكخرواتهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v654, "\u200Fكخرواتهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v655, "\u200Fكخرواتها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v656, "\u200Fكخرواته", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v657, "\u200Fكخرواتنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v658, "\u200Fكخرواتكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v659, "\u200Fكخرواتكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v660, "\u200Fكخرواتك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v661, "\u200Fكخروات", "ك****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v662, "\u200Fكخرتي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v663, "\u200Fكخرتهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v664, "\u200Fكخرتهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v665, "\u200Fكخرتها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v666, "\u200Fكخرته", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v667, "\u200Fكخرتنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v668, "\u200Fكخرتكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v669, "\u200Fكخرتكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v670, "\u200Fكخرتك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v671, "\u200Fكخرة", "ك**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v672, "\u200Fكالكسكوس", "ك******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v673, "\u200Fكالكساس", "ك*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v674, "\u200Fكالكس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v675, "\u200Fكالشرموطة", "ك*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v676, "\u200Fكالشرموطات", "ك********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v677, "\u200Fكالزوب", "ك****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v678, "\u200Fكالزباب", "ك*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v679, "\u200Fكالزب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v680, "\u200Fكالخروات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v681, "\u200Fكالخرة", "ك****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v682, "\u200Fقحبه", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v683, "\u200Fقحبة", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v684, "\u200Fقحبات", "ق***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v685, "\u200Fعرصه", "ع**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v686, "\u200Fعرصة", "ع**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v687, "\u200Fعرصات", "ع***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v688, "\u200Fعرص", "ع*ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v689, "\u200Fشلكه", "ش**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v690, "\u200Fشلكة", "ش**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v691, "\u200Fشلكات", "ش***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v692, "\u200Fشرموطه", "ش****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v693, "\u200Fشرموطتي", "ش*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v694, "\u200Fشرموطتهن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v695, "\u200Fشرموطتهم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v696, "\u200Fشرموطتها", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v697, "\u200Fشرموطته", "ش*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v698, "\u200Fشرموطتنا", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v699, "\u200Fشرموطتكن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v700, "\u200Fشرموطتكم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v701, "\u200Fشرموطتك", "ش*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v702, "\u200Fشرموطة", "ش****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v703, "\u200Fشرموطاتي", "ش******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v704, "\u200Fشرموطاتهن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v705, "\u200Fشرموطاتهم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v706, "\u200Fشرموطاتها", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v707, "\u200Fشرموطاته", "ش******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v708, "\u200Fشرموطاتنا", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v709, "\u200Fشرموطاتكن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v710, "\u200Fشرموطاتكم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v711, "\u200Fشرموطاتك", "ش******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v712, "\u200Fشرموطات", "ش*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v713, "\u200Fشرموط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v714, "\u200Fشرجي", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v715, "\u200Fشراميط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v716, "\u200Fشخيتي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v717, "\u200Fشخيت", "ش**ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v718, "\u200Fشخي", "ش*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v719, "\u200Fشخاخي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v720, "\u200Fشخاختي", "ش****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v721, "\u200Fشخاخ", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v722, "\u200Fشخ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v723, "\u200Fزوبي", "ز**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v724, "\u200Fزوبهن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v725, "\u200Fزوبهم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v726, "\u200Fزوبها", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v727, "\u200Fزوبه", "ز**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v728, "\u200Fزوبنا", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v729, "\u200Fزوبكن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v730, "\u200Fزوبكم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v731, "\u200Fزوبك", "ز**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v732, "\u200Fزوب", "ز*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v733, "\u200Fزبي", "ز*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v734, "\u200Fزبهن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v735, "\u200Fزبهم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v736, "\u200Fزبها", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v737, "\u200Fزبه", "ز*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v738, "\u200Fزبنا", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v739, "\u200Fزبكن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v740, "\u200Fزبكم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v741, "\u200Fزبك", "ز*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v742, "\u200Fزبابي", "ز***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v743, "\u200Fزبابهن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v744, "\u200Fزبابهم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v745, "\u200Fزبابها", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v746, "\u200Fزبابه", "ز***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v747, "\u200Fزبابنا", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v748, "\u200Fزبابكن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v749, "\u200Fزبابكم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v750, "\u200Fزبابك", "ز***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v751, "\u200Fزباب", "ز**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v752, "\u200Fزب", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v753, "\u200Fخرواتي", "خ****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v754, "\u200Fخرواتهن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v755, "\u200Fخرواتهم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v756, "\u200Fخرواتها", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v757, "\u200Fخرواته", "خ****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v758, "\u200Fخرواتنا", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v759, "\u200Fخرواتكن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v760, "\u200Fخرواتكم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v761, "\u200Fخرواتك", "خ****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v762, "\u200Fخروات", "خ***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v763, "\u200Fخرتهن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v764, "\u200Fخرتهم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v765, "\u200Fخرتها", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v766, "\u200Fخرتنا", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v767, "\u200Fخرتكن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v768, "\u200Fخرتكم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v769, "\u200Fخرة", "خ*ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v770, "\u200Fتنييك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v771, "\u200Fتنتاك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v772, "\u200Fبورنو", "ب***و");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v773, "\u200Fبكسي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v774, "\u200Fبكسهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v775, "\u200Fبكسهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v776, "\u200Fبكسها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v777, "\u200Fبكسه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v778, "\u200Fبكسنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v779, "\u200Fبكسكوسي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v780, "\u200Fبكسكوسهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v781, "\u200Fبكسكوسهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v782, "\u200Fبكسكوسها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v783, "\u200Fبكسكوسه", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v784, "\u200Fبكسكوسنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v785, "\u200Fبكسكوسكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v786, "\u200Fبكسكوسكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v787, "\u200Fبكسكوسك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v788, "\u200Fبكسكوس", "ب****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v789, "\u200Fبكسكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v790, "\u200Fبكسكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v791, "\u200Fبكسك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v792, "\u200Fبكساسي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v793, "\u200Fبكساسهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v794, "\u200Fبكساسهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v795, "\u200Fبكساسها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v796, "\u200Fبكساسه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v797, "\u200Fبكساسنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v798, "\u200Fبكساسكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v799, "\u200Fبكساسكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v800, "\u200Fبكساسك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v801, "\u200Fبكساس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v802, "\u200Fبكس", "ب*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v803, "\u200Fبشرموطتي", "ب******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v804, "\u200Fبشرموطتهن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v805, "\u200Fبشرموطتهم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v806, "\u200Fبشرموطتها", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v807, "\u200Fبشرموطته", "ب******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v808, "\u200Fبشرموطتنا", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v809, "\u200Fبشرموطتكن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v810, "\u200Fبشرموطتكم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v811, "\u200Fبشرموطتك", "ب******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v812, "\u200Fبشرموطة", "ب*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v813, "\u200Fبشرموطاتي", "ب*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v814, "\u200Fبشرموطاتهن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v815, "\u200Fبشرموطاتهم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v816, "\u200Fبشرموطاتها", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v817, "\u200Fبشرموطاته", "ب*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v818, "\u200Fبشرموطاتنا", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v819, "\u200Fبشرموطاتكن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v820, "\u200Fبشرموطاتكم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v821, "\u200Fبشرموطاتك", "ب*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v822, "\u200Fبشرموطات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v823, "\u200Fبزوبي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v824, "\u200Fبزوبهن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v825, "\u200Fبزوبهم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v826, "\u200Fبزوبها", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v827, "\u200Fبزوبه", "ب***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v828, "\u200Fبزوبنا", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v829, "\u200Fبزوبكن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v830, "\u200Fبزوبكم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v831, "\u200Fبزوبك", "ب***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v832, "\u200Fبزوب", "ب**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v833, "\u200Fبزبي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v834, "\u200Fبزبهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v835, "\u200Fبزبهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v836, "\u200Fبزبها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v837, "\u200Fبزبه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v838, "\u200Fبزبنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v839, "\u200Fبزبكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v840, "\u200Fبزبكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v841, "\u200Fبزبك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v842, "\u200Fبزبابي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v843, "\u200Fبزبابهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v844, "\u200Fبزبابهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v845, "\u200Fبزبابها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v846, "\u200Fبزبابه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v847, "\u200Fبزبابنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v848, "\u200Fبزبابكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v849, "\u200Fبزبابكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v850, "\u200Fبزبابك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v851, "\u200Fبزباب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v852, "\u200Fبزب", "ب*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v853, "\u200Fبزاز", "ب**ز");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v854, "\u200Fبز", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v855, "\u200Fبخرواتي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v856, "\u200Fبخرواتهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v857, "\u200Fبخرواتهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v858, "\u200Fبخرواتها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v859, "\u200Fبخرواته", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v860, "\u200Fبخرواتنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v861, "\u200Fبخرواتكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v862, "\u200Fبخرواتكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v863, "\u200Fبخرواتك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v864, "\u200Fبخروات", "ب****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v865, "\u200Fبخرتي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v866, "\u200Fبخرة", "ب**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v867, "\u200Fبالكسكوس", "ب******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v868, "\u200Fبالكساس", "ب*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v869, "\u200Fبالكس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v870, "\u200Fبالشرموطة", "ب*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v871, "\u200Fبالشرموطات", "ب********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v872, "\u200Fبالزوب", "ب****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v873, "\u200Fبالزباب", "ب*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v874, "\u200Fبالزب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v875, "\u200Fبالخروات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v876, "\u200Fبالخرة", "ب****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v877, "\u200Fايري", "ا**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v878, "\u200Fايرك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v879, "\u200Fاير", "ا*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v880, "\u200Fانيكك", "ا***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v881, "\u200Fانيك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v882, "\u200Fالكسكوس", "ا*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v883, "\u200Fالكساس", "ا****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v884, "\u200Fالكس", "ا**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v885, "\u200Fالشرموطة", "ا******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v886, "\u200Fالشرموطات", "ا*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v887, "\u200Fالزوب", "ا***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v888, "\u200Fالزباب", "ا****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v889, "\u200Fالزب", "ا**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v890, "\u200Fالخروات", "ا*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v891, "\u200Fالخرة", "ا***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v892, "\u200Fإيري", "إ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v893, "\u200Fإيرك", "إ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v894, "\u200Fإير", "إ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v895, "\u200Fأيري", "أ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v896, "\u200Fأيرك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v897, "\u200Fأير", "أ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v898, "\u200Fأنيكك", "أ***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v899, "\u200Fأنيك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v900, "ينتاك", "ي***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v901, "وللكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v902, "وللكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v903, "وللكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v904, "وللشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v905, "وللشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v906, "وللزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v907, "وللزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v908, "وللزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v909, "وللخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v910, "وللخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v911, "ولكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v912, "ولكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v913, "ولكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v914, "ولكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v915, "ولكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v916, "ولكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v917, "ولكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v918, "ولكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v919, "ولكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v920, "ولكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v921, "ولكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v922, "ولكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v923, "ولكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v924, "ولكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v925, "ولكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v926, "ولكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v927, "ولكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v928, "ولكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v929, "ولكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v930, "ولكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v931, "ولكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v932, "ولكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v933, "ولكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v934, "ولكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v935, "ولكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v936, "ولكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v937, "ولكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v938, "ولكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v939, "ولكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v940, "ولكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v941, "ولشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v942, "ولشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v943, "ولشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v944, "ولشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v945, "ولشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v946, "ولشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v947, "ولشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v948, "ولشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v949, "ولشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v950, "ولشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v951, "ولشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v952, "ولشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v953, "ولشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v954, "ولشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v955, "ولشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v956, "ولشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v957, "ولشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v958, "ولشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v959, "ولشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v960, "ولشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v961, "ولزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v962, "ولزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v963, "ولزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v964, "ولزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v965, "ولزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v966, "ولزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v967, "ولزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v968, "ولزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v969, "ولزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v970, "ولزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v971, "ولزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v972, "ولزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v973, "ولزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v974, "ولزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v975, "ولزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v976, "ولزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v977, "ولزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v978, "ولزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v979, "ولزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v980, "ولزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v981, "ولزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v982, "ولزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v983, "ولزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v984, "ولزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v985, "ولزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v986, "ولزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v987, "ولزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v988, "ولزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v989, "ولزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v990, "ولزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v991, "ولخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v992, "ولخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v993, "ولخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v994, "ولخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v995, "ولخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v996, "ولخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v997, "ولخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v998, "ولخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v999, "ولخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1000, "ولخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1001, "ولخرتي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1002, "ولخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1003, "ولخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1004, "ولخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1005, "ولخرته", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1006, "ولخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1007, "ولخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1008, "ولخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1009, "ولخرتك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1010, "ولخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1011, "وككسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1012, "وككسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1013, "وككسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1014, "وككسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1015, "وككسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1016, "وككسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1017, "وككسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1018, "وككسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1019, "وككسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1020, "وككسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1021, "وككسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1022, "وككسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1023, "وككسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1024, "وككسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1025, "وككسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1026, "وككسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1027, "وككسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1028, "وككسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1029, "وككسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1030, "وككساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1031, "وككساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1032, "وككساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1033, "وككساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1034, "وككساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1035, "وككساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1036, "وككساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1037, "وككساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1038, "وككساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1039, "وككساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1040, "وككس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1041, "وكشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1042, "وكشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1043, "وكشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1044, "وكشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1045, "وكشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1046, "وكشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1047, "وكشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1048, "وكشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1049, "وكشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1050, "وكشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1051, "وكشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1052, "وكشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1053, "وكشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1054, "وكشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1055, "وكشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1056, "وكشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1057, "وكشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1058, "وكشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1059, "وكشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1060, "وكشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1061, "وكسي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1062, "وكسهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1063, "وكسهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1064, "وكسها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1065, "وكسه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1066, "وكسنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1067, "وكسكوسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1068, "وكسكوسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1069, "وكسكوسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1070, "وكسكوسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1071, "وكسكوسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1072, "وكسكوسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1073, "وكسكوسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1074, "وكسكوسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1075, "وكسكوسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1076, "وكسكوس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1077, "وكسكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1078, "وكسكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1079, "وكسك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1080, "وكساسي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1081, "وكساسهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1082, "وكساسهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1083, "وكساسها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1084, "وكساسه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1085, "وكساسنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1086, "وكساسكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1087, "وكساسكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1088, "وكساسك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1089, "وكساس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1090, "وكس", "و*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1091, "وكزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1092, "وكزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1093, "وكزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1094, "وكزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1095, "وكزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1096, "وكزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1097, "وكزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1098, "وكزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1099, "وكزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1100, "وكزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1101, "وكزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1102, "وكزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1103, "وكزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1104, "وكزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1105, "وكزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1106, "وكزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1107, "وكزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1108, "وكزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1109, "وكزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1110, "وكزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1111, "وكزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1112, "وكزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1113, "وكزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1114, "وكزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1115, "وكزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1116, "وكزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1117, "وكزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1118, "وكزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1119, "وكزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1120, "وكزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1121, "وكخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1122, "وكخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1123, "وكخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1124, "وكخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1125, "وكخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1126, "وكخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1127, "وكخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1128, "وكخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1129, "وكخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1130, "وكخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1131, "وكخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1132, "وكخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1133, "وكخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1134, "وكخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1135, "وكخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1136, "وكخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1137, "وكخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1138, "وكالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1139, "وكالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1140, "وكالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1141, "وكالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1142, "وكالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1143, "وكالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1144, "وكالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1145, "وكالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1146, "وكالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1147, "وكالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1148, "وشرموطتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1149, "وشرموطتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1150, "وشرموطتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1151, "وشرموطتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1152, "وشرموطته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1153, "وشرموطتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1154, "وشرموطتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1155, "وشرموطتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1156, "وشرموطتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1157, "وشرموطة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1158, "وشرموطاتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1159, "وشرموطاتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1160, "وشرموطاتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1161, "وشرموطاتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1162, "وشرموطاته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1163, "وشرموطاتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1164, "وشرموطاتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1165, "وشرموطاتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1166, "وشرموطاتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1167, "وشرموطات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1168, "وزوبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1169, "وزوبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1170, "وزوبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1171, "وزوبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1172, "وزوبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1173, "وزوبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1174, "وزوبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1175, "وزوبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1176, "وزوبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1177, "وزوب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1178, "وزبي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1179, "وزبهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1180, "وزبهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1181, "وزبها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1182, "وزبه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1183, "وزبنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1184, "وزبكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1185, "وزبكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1186, "وزبك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1187, "وزبابي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1188, "وزبابهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1189, "وزبابهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1190, "وزبابها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1191, "وزبابه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1192, "وزبابنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1193, "وزبابكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1194, "وزبابكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1195, "وزبابك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1196, "وزباب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1197, "وزب", "و*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1198, "وخرواتي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1199, "وخرواتهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1200, "وخرواتهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1201, "وخرواتها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1202, "وخرواته", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1203, "وخرواتنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1204, "وخرواتكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1205, "وخرواتكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1206, "وخرواتك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1207, "وخروات", "و****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1208, "وخرتي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1209, "وخرته", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1210, "وخرتك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1211, "وخرة", "و**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1212, "وبكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1213, "وبكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1214, "وبكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1215, "وبكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1216, "وبكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1217, "وبكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1218, "وبكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1219, "وبكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1220, "وبكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1221, "وبكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1222, "وبكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1223, "وبكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1224, "وبكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1225, "وبكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1226, "وبكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1227, "وبكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1228, "وبكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1229, "وبكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1230, "وبكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1231, "وبكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1232, "وبكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1233, "وبكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1234, "وبكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1235, "وبكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1236, "وبكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1237, "وبكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1238, "وبكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1239, "وبكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1240, "وبكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1241, "وبكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1242, "وبشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1243, "وبشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1244, "وبشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1245, "وبشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1246, "وبشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1247, "وبشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1248, "وبشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1249, "وبشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1250, "وبشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1251, "وبشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1252, "وبشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1253, "وبشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1254, "وبشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1255, "وبشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1256, "وبشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1257, "وبشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1258, "وبشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1259, "وبشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1260, "وبشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1261, "وبشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1262, "وبزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1263, "وبزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1264, "وبزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1265, "وبزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1266, "وبزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1267, "وبزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1268, "وبزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1269, "وبزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1270, "وبزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1271, "وبزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1272, "وبزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1273, "وبزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1274, "وبزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1275, "وبزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1276, "وبزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1277, "وبزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1278, "وبزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1279, "وبزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1280, "وبزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1281, "وبزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1282, "وبزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1283, "وبزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1284, "وبزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1285, "وبزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1286, "وبزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1287, "وبزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1288, "وبزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1289, "وبزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1290, "وبزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1291, "وبزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1292, "وبخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1293, "وبخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1294, "وبخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1295, "وبخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1296, "وبخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1297, "وبخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1298, "وبخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1299, "وبخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1300, "وبخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1301, "وبخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1302, "وبخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1303, "وبخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1304, "وبالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1305, "وبالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1306, "وبالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1307, "وبالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1308, "وبالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1309, "وبالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1310, "وبالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1311, "وبالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1312, "وبالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1313, "وبالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1314, "والكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1315, "والكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1316, "والكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1317, "والشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1318, "والشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1319, "والزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1320, "والزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1321, "والزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1322, "والخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1323, "والخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1324, "نيكيني", "ن****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1325, "نيكني", "ن***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1326, "نيك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1327, "نياكة", "ن***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1328, "ناك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1329, "مومس", "م**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1330, "مهبل", "م**ل");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1331, "للكسكوس", "ل*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1332, "للكساس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1333, "للكس", "ل**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1334, "للعنة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1335, "للشرموطة", "ل******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1336, "للشرموطات", "ل*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1337, "للزوب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1338, "للزباب", "ل****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1339, "للزب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1340, "للخروات", "ل*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1341, "للخرة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1342, "لكسي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1343, "لكسهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1344, "لكسهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1345, "لكسها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1346, "لكسه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1347, "لكسنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1348, "لكسكوسي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1349, "لكسكوسهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1350, "لكسكوسهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1351, "لكسكوسها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1352, "لكسكوسه", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1353, "لكسكوسنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1354, "لكسكوسكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1355, "لكسكوسكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1356, "لكسكوسك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1357, "لكسكوس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1358, "لكسكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1359, "لكسكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1360, "لكسك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1361, "لكساسي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1362, "لكساسهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1363, "لكساسهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1364, "لكساسها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1365, "لكساسه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1366, "لكساسنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1367, "لكساسكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1368, "لكساسكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1369, "لكساسك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1370, "لكساس", "ل***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1371, "لكس", "ل*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1372, "لشرموطتي", "ل******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1373, "لشرموطتهن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1374, "لشرموطتهم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1375, "لشرموطتها", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1376, "لشرموطته", "ل******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1377, "لشرموطتنا", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1378, "لشرموطتكن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1379, "لشرموطتكم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1380, "لشرموطتك", "ل******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1381, "لشرموطة", "ل*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1382, "لشرموطاتي", "ل*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1383, "لشرموطاتهن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1384, "لشرموطاتهم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1385, "لشرموطاتها", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1386, "لشرموطاته", "ل*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1387, "لشرموطاتنا", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1388, "لشرموطاتكن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1389, "لشرموطاتكم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1390, "لشرموطاتك", "ل*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1391, "لشرموطات", "ل******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1392, "لزوبي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1393, "لزوبهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1394, "لزوبهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1395, "لزوبها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1396, "لزوبه", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1397, "لزوبنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1398, "لزوبكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1399, "لزوبكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1400, "لزوبك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1401, "لزوب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1402, "لزبي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1403, "لزبهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1404, "لزبهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1405, "لزبها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1406, "لزبه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1407, "لزبنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1408, "لزبكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1409, "لزبكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1410, "لزبك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1411, "لزبابي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1412, "لزبابهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1413, "لزبابهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1414, "لزبابها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1415, "لزبابه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1416, "لزبابنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1417, "لزبابكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1418, "لزبابكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1419, "لزبابك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1420, "لزباب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1421, "لزب", "ل*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1422, "لخرواتي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1423, "لخرواتهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1424, "لخرواتهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1425, "لخرواتها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1426, "لخرواته", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1427, "لخرواتنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1428, "لخرواتكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1429, "لخرواتكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1430, "لخرواتك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1431, "لخروات", "ل****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1432, "لخرتي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1433, "لخرتهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1434, "لخرتهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1435, "لخرتها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1436, "لخرته", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1437, "لخرتنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1438, "لخرتكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1439, "لخرتكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1440, "لخرتك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1441, "لخرة", "ل**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1442, "ككسي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1443, "ككسهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1444, "ككسهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1445, "ككسها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1446, "ككسه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1447, "ككسنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1448, "ككسكوسي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1449, "ككسكوسهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1450, "ككسكوسهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1451, "ككسكوسها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1452, "ككسكوسه", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1453, "ككسكوسنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1454, "ككسكوسكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1455, "ككسكوسكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1456, "ككسكوسك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1457, "ككسكوس", "ك****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1458, "ككسكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1459, "ككسكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1460, "ككسك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1461, "ككساسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1462, "ككساسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1463, "ككساسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1464, "ككساسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1465, "ككساسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1466, "ككساسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1467, "ككساسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1468, "ككساسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1469, "ككساسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1470, "ككساس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1471, "ككس", "ك*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1472, "كشرموطتي", "ك******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1473, "كشرموطتهن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1474, "كشرموطتهم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1475, "كشرموطتها", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1476, "كشرموطته", "ك******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1477, "كشرموطتنا", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1478, "كشرموطتكن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1479, "كشرموطتكم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1480, "كشرموطتك", "ك******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1481, "كشرموطة", "ك*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1482, "كشرموطاتي", "ك*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1483, "كشرموطاتهن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1484, "كشرموطاتهم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1485, "كشرموطاتها", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1486, "كشرموطاته", "ك*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1487, "كشرموطاتنا", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1488, "كشرموطاتكن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1489, "كشرموطاتكم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1490, "كشرموطاتك", "ك*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1491, "كشرموطات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1492, "كسي", "ك*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1493, "كسهن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1494, "كسهم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1495, "كسها", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1496, "كسه", "ك*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1497, "كسنا", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1498, "كسكوسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1499, "كسكوسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1500, "كسكوسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1501, "كسكوسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1502, "كسكوسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1503, "كسكوسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1504, "كسكوسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1505, "كسكوسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1506, "كسكوسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1507, "كسكوس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1508, "كسكن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1509, "كسكم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1510, "كسك", "ك*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1511, "كساسي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1512, "كساسهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1513, "كساسهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1514, "كساسها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1515, "كساسه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1516, "كساسنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1517, "كساسكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1518, "كساسكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1519, "كساسك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1520, "كساس", "ك**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1521, "كس", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1522, "كزوبي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1523, "كزوبهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1524, "كزوبهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1525, "كزوبها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1526, "كزوبه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1527, "كزوبنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1528, "كزوبكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1529, "كزوبكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1530, "كزوبك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1531, "كزوب", "ك**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1532, "كزبي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1533, "كزبهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1534, "كزبهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1535, "كزبها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1536, "كزبه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1537, "كزبنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1538, "كزبكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1539, "كزبكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1540, "كزبك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1541, "كزبابي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1542, "كزبابهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1543, "كزبابهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1544, "كزبابها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1545, "كزبابه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1546, "كزبابنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1547, "كزبابكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1548, "كزبابكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1549, "كزبابك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1550, "كزباب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1551, "كزب", "ك*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1552, "كخرواتي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1553, "كخرواتهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1554, "كخرواتهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1555, "كخرواتها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1556, "كخرواته", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1557, "كخرواتنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1558, "كخرواتكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1559, "كخرواتكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1560, "كخرواتك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1561, "كخروات", "ك****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1562, "كخرتي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1563, "كخرتهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1564, "كخرتهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1565, "كخرتها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1566, "كخرته", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1567, "كخرتنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1568, "كخرتكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1569, "كخرتكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1570, "كخرتك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1571, "كخرة", "ك**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1572, "كالكسكوس", "ك******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1573, "كالكساس", "ك*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1574, "كالكس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1575, "كالشرموطة", "ك*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1576, "كالشرموطات", "ك********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1577, "كالزوب", "ك****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1578, "كالزباب", "ك*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1579, "كالزب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1580, "كالخروات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1581, "كالخرة", "ك****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1582, "قحبه", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1583, "قحبة", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1584, "قحبات", "ق***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1585, "عيري", "ع**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1586, "عرصه", "ع**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1587, "عرصة", "ع**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1588, "عرصات", "ع***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1589, "عرص", "ع*ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1590, "عاهرة", "ع***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1591, "شلكه", "ش**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1592, "شلكة", "ش**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1593, "شلكات", "ش***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1594, "شرموطه", "ش****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1595, "شرموطتي", "ش*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1596, "شرموطتهن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1597, "شرموطتهم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1598, "شرموطتها", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1599, "شرموطته", "ش*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1600, "شرموطتنا", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1601, "شرموطتكن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1602, "شرموطتكم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1603, "شرموطتك", "ش*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1604, "شرموطة", "ش****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1605, "شرموطاتي", "ش******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1606, "شرموطاتهن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1607, "شرموطاتهم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1608, "شرموطاتها", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1609, "شرموطاته", "ش******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1610, "شرموطاتنا", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1611, "شرموطاتكن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1612, "شرموطاتكم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1613, "شرموطاتك", "ش******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1614, "شرموطات", "ش*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1615, "شرموط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1616, "شرجي", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v1617, "شراميط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1618, "شخيتي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1619, "شخيت", "ش**ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1620, "شخي", "ش*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1621, "شخاخي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1622, "شخاختي", "ش****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1623, "شخاخ", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1624, "شخ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1625, "ساقطة", "س***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1626, "سأضاجع", "س****ع");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1627, "زوبي", "ز**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1628, "زوبهن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1629, "زوبهم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1630, "زوبها", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1631, "زوبه", "ز**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1632, "زوبنا", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1633, "زوبكن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1634, "زوبكم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1635, "زوبك", "ز**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1636, "زوب", "ز*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1637, "زبي", "ز*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1638, "زبهن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1639, "زبهم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1640, "زبها", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1641, "زبه", "ز*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1642, "زبنا", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1643, "زبكن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1644, "زبكم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1645, "زبك", "ز*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1646, "زبابي", "ز***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1647, "زبابهن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1648, "زبابهم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1649, "زبابها", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1650, "زبابه", "ز***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1651, "زبابنا", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1652, "زبابكن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1653, "زبابكم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1654, "زبابك", "ز***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1655, "زباب", "ز**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1656, "زب", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1657, "تبا", "ت*ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1658, "خرواتي", "خ****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1659, "خرواتهن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1660, "خرواتهم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1661, "خرواتها", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1662, "خرواته", "خ****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1663, "خرواتنا", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1664, "خرواتكن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1665, "خرواتكم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1666, "خرواتك", "خ****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1667, "خروات", "خ***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1668, "خرتهن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1669, "خرتهم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1670, "خرتها", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1671, "خرتنا", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1672, "خرتكن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1673, "خرتكم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1674, "خرة", "خ*ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1675, "تنييك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1676, "تنتاك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1677, "بورنو", "ب***و");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1678, "بكسي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1679, "بكسهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1680, "بكسهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1681, "بكسها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1682, "بكسه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1683, "بكسنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1684, "بكسكوسي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1685, "بكسكوسهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1686, "بكسكوسهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1687, "بكسكوسها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1688, "بكسكوسه", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1689, "بكسكوسنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1690, "بكسكوسكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1691, "بكسكوسكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1692, "بكسكوسك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1693, "بكسكوس", "ب****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1694, "بكسكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1695, "بكسكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1696, "بكسك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1697, "بكساسي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1698, "بكساسهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1699, "بكساسهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1700, "بكساسها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1701, "بكساسه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1702, "بكساسنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1703, "بكساسكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1704, "بكساسكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1705, "بكساسك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1706, "بكساس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1707, "بكس", "ب*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1708, "بشرموطتي", "ب******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1709, "بشرموطتهن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1710, "بشرموطتهم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1711, "بشرموطتها", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1712, "بشرموطته", "ب******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1713, "بشرموطتنا", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1714, "بشرموطتكن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1715, "بشرموطتكم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1716, "بشرموطتك", "ب******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1717, "بشرموطة", "ب*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1718, "بشرموطاتي", "ب*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1719, "بشرموطاتهن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1720, "بشرموطاتهم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1721, "بشرموطاتها", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1722, "بشرموطاته", "ب*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1723, "بشرموطاتنا", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1724, "بشرموطاتكن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1725, "بشرموطاتكم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1726, "بشرموطاتك", "ب*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1727, "بشرموطات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1728, "بزوبي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1729, "بزوبهن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1730, "بزوبهم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1731, "بزوبها", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1732, "بزوبه", "ب***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1733, "بزوبنا", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1734, "بزوبكن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1735, "بزوبكم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1736, "بزوبك", "ب***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1737, "بزوب", "ب**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1738, "بزبي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1739, "بزبهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1740, "بزبهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1741, "بزبها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1742, "بزبه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1743, "بزبنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1744, "بزبكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1745, "بزبكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1746, "بزبك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1747, "بزبابي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1748, "بزبابهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1749, "بزبابهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1750, "بزبابها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1751, "بزبابه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1752, "بزبابنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1753, "بزبابكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1754, "بزبابكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1755, "بزبابك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1756, "بزباب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1757, "بزب", "ب*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1758, "بزاز", "ب**ز");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1759, "بز", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1760, "بخرواتي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1761, "بخرواتهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1762, "بخرواتهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1763, "بخرواتها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1764, "بخرواته", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1765, "بخرواتنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1766, "بخرواتكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1767, "بخرواتكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1768, "بخرواتك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1769, "بخروات", "ب****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1770, "بخرتي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1771, "بخرة", "ب**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1772, "بالكسكوس", "ب******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1773, "بالكساس", "ب*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1774, "بالكس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1775, "بالشرموطة", "ب*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1776, "بالشرموطات", "ب********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1777, "بالزوب", "ب****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1778, "بالزباب", "ب*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1779, "بالزب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1780, "بالخروات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1781, "بالخرة", "ب****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1782, "ايري", "ا**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1783, "ايرك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1784, "اير", "ا*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1785, "انيكك", "ا***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1786, "انيك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1787, "اللعين", "ا****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1788, "الكسكوس", "ا*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1789, "الكساس", "ا****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1790, "الكس", "ا**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1791, "العرص", "ا***ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1792, "العاهرة", "ا*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1793, "الشرموطة", "ا******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1794, "الشرموطات", "ا*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1795, "الزوب", "ا***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1796, "الزباب", "ا****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1797, "الزب", "ا**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1798, "الخروات", "ا*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1799, "الخرة", "ا***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1800, "الاستنماء", "ا*******ء");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1801, "إيري", "إ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1802, "إيرك", "إ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1803, "إير", "إ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1804, "أيري", "أ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1805, "أيرك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1806, "أير", "أ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1807, "أنيكك", "أ***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1808, "أنيك", "أ**ك");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ar(void)::sProfanityData_ar, (uint64_t)v4, 0x70DuLL);
    for (uint64_t i = 0; i != -10830; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v1808[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ar(void)::sProfanityData_ar, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_ar(void)::sProfanityData_ar[0], unk_1EA3D8DE8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8DE8 - GetProfanityFilter_ar(void)::sProfanityData_ar[0]) >> 4));
}

void sub_1C5E9EDA8(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 86592;
  uint64_t v4 = -86640;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_hr(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v839[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v4, "šupčinu", "š*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v5, "šupčino", "š*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v6, "šupčine", "š*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v7, "šupčina", "š*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v8, "šupčanom", "š******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "šupku", "š***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "šupke", "š***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v11, "šupka", "š***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v12, "šupak", "š***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v13, "šit", "š*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v14, "šiptarska", "š*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v15, "šiptari", "š*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v16, "šiptara", "š*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v17, "šiptar", "š****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v18, "šipci", "š***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v19, "ševiš", "š***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v20, "ševiti", "š****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "ševit", "š***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "ševio", "š***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v23, "ševili", "š****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v24, "ševica", "š****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v25, "ševi", "š**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v26, "ševca", "š***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "Šupci", "Š***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v28, "Šiptarima", "Š*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v29, "Šiptari", "Š*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v30, "Šiptar", "Š****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v31, "đubretarski", "đ*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "đubradi", "đ*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v33, "đubrad", "đ****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v34, "đankoze", "đ*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v35, "čifut", "č***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v36, "četnikušo", "č*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v37, "Čifuti", "Č****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v38, "ćuna", "ć**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v39, "zasro", "z***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v40, "zasrati", "z*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v41, "zasrao", "z****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v42, "zasranih", "z******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v43, "zasrana", "z*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v44, "zasran", "z****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v45, "zasrali", "z*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v46, "zasrala", "z*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v47, "zaseru", "z****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v48, "zasereš", "z*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v49, "zaseremo", "z******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v50, "zaseravanje", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v51, "zapišavanje", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v52, "zapišavanja", "z*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v53, "zapišavaju", "z********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v54, "zapišava", "z******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v55, "zapišati", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v56, "zapišanog", "z*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v57, "zapišani", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v58, "zapišan", "z*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v59, "zapišali", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v60, "zajebu", "z****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "zajebite", "z******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v62, "zajebi", "z****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v63, "zajebeš", "z*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v64, "zajebe", "z****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v65, "zajebavljati", "z**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v66, "zajebavaš", "z*******š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v67, "zajebavati", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v68, "zajebavate", "z********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v69, "zajebavat", "z*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "zajebavao", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v71, "zajebavanje", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v72, "zajebavamo", "z********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v73, "zajebavali", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v74, "zajebavajući", "z**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v75, "zajebavaju", "z********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v76, "zajebavajte", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v77, "zajebavaj", "z*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v78, "zajebava", "z******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v79, "zajebat", "z*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v80, "zajebantski", "z*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v81, "zajebantske", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v82, "zajebanti", "z*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v83, "zajebanta", "z*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v84, "zajebant", "z******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v85, "zajebanog", "z*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v86, "zajebanim", "z*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v87, "zajebaniji", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v88, "zajebanijeg", "z*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v89, "zajebanija", "z********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v90, "zajebanih", "z*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v91, "zajebani", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v92, "zajebancijom", "z**********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v93, "zajebanciji", "z*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v94, "zajebancije", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v95, "zajebancijama", "z***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v96, "zajebancija", "z*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v97, "zajeban", "z*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v98, "zajebali", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v99, "zajebale", "z******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v100, "zajebala", "z******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v101, "zajebajem", "z*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v102, "zajeb", "z***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v103, "vukojеbinu", "v********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v104, "vukojebinu", "v********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v105, "vukojebinom", "v*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v106, "vukojebini", "v********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v107, "vukojebine", "v********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v108, "vukojebinama", "v**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v109, "vukojebina", "v********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v110, "vrtiguza", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v111, "vritnjak", "v******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v112, "uzjebali", "u******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v113, "uzasrali", "u******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v114, "usrati", "u****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v115, "usrat", "u***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v116, "usrao", "u***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v117, "usranoj", "u*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v118, "usranog", "u*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v119, "usranko", "u*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v120, "usranim", "u*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v121, "usranih", "u*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v122, "usrani", "u****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v123, "usranci", "u*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v124, "usrana", "u****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v125, "usran", "u***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v126, "usrali", "u****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v127, "usrale", "u****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v128, "usrala", "u****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v129, "uskoguzaca", "u********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v130, "useru", "u***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v131, "usereš", "u****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v132, "userete", "u*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v133, "upišanih", "u******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v134, "upišana", "u*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v135, "upišala", "u*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v136, "uparađena", "u*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v137, "ukenjalo", "u******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v138, "ukenjaju", "u******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v139, "ukakila", "u*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v140, "ukakao", "u****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v141, "ukakanom", "u******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v142, "ukakanim", "u******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v143, "ukakane", "u*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v144, "ukakaju", "u*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v145, "uguziti", "u*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v146, "uguzit", "u****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v147, "uguzio", "u****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v148, "uguzili", "u*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v149, "tovarčići", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v150, "tovarčino", "t*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v151, "tariguz", "t*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v152, "starkeljom", "s********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v153, "starkelje", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v154, "srbadija", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v155, "sraćke", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v156, "srati", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v157, "srat", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v158, "srao", "s**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v159, "sranju", "s****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v160, "sranjima", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v161, "sranjem", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v162, "sranja", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v163, "sralo", "s***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v164, "srali", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v165, "sprdne", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v166, "sprdaš", "s****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v167, "sprdačini", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v168, "sprdačine", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v169, "sprdanja", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v170, "sprdancije", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v171, "spičkati", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v172, "spizdio", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v173, "spickat", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v174, "sotonjaru", "s*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v175, "sotonjare", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v176, "skotova", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v177, "skot", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v178, "skorojevići", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v179, "sjebu", "s***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v180, "sjebi", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v181, "sjebete", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v182, "sjebemo", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v183, "sjebe", "s***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v184, "sjebavao", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v185, "sjebati", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v186, "sjebat", "s****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v187, "sjebanosti", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v188, "sjebanom", "s******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v189, "sjebanoj", "s******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v190, "sjebanih", "s******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v191, "sjebani", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v192, "sjebana", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v193, "sjebali", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v194, "sjebala", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v195, "sjebal", "s****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v196, "sisom", "s***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v197, "sisica", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v198, "sise", "s**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v199, "sisatu", "s****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v200, "sisatome", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v201, "sisatom", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v202, "sisatoj", "s*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v203, "sisata", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v204, "sisat", "s***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v205, "sisa", "s**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v206, "shit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v207, "serući", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v208, "seruckati", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v209, "seruckate", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v210, "seruckanjima", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v211, "seruckanje", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v212, "seruckanja", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v213, "seruckalo", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v214, "seruckaj", "s******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v215, "seru", "s**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v216, "seronju", "s*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v217, "seronji", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v218, "seronjama", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v219, "seronja", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v220, "serite", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v221, "seri", "s**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v222, "sereš", "s***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v223, "serete", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v224, "seremo", "s****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v225, "serem", "s***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v226, "sere", "s**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v227, "seratore", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v228, "seljoberu", "s*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v229, "seljobera", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v230, "seljober", "s******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v231, "seljačića", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v232, "seljačinu", "s*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v233, "seljačino", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v234, "seljačine", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v235, "seksanju", "s******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v236, "seksanja", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v237, "seksam", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v238, "seksaj", "s****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v239, "retarda", "r*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v240, "redaljku", "r******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v241, "redaljci", "r******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v242, "razjebu", "r*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v243, "razjebe", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v244, "razjebati", "r*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v245, "razjebao", "r******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v246, "razjebali", "r*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v247, "razguzit", "r******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v248, "razguzio", "r******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v249, "razguzili", "r*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v250, "raspizdio", "r*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v251, "raspizdim", "r*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v252, "raspizdilo", "r********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v253, "raspizdi", "r******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v254, "radodajka", "r*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v255, "pušikuraca", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v256, "purgerčići", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v257, "prđenje", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v258, "prčimo", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v259, "prčimir", "p*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v260, "prčila", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v261, "prči", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v262, "prčevitim", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v263, "prčenje", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v264, "prćiju", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v265, "prosrat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v266, "prosrali", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v267, "proseravat", "p********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v268, "proseravanju", "p**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v269, "proseravanje", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v270, "proseravam", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v271, "proseravali", "p*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v272, "prisere", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v273, "pripišali", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v274, "pripizdini", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v275, "pripizdine", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v276, "pripizdina", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v277, "preseravaš", "p********š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v278, "preseravati", "p*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v279, "preseravanjem", "p***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v280, "preseravanja", "p**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v281, "preseravam", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v282, "preseravaju", "p*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v283, "preserava", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v284, "preseratorskih", "p************h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v285, "prejebeno", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v286, "prejebeni", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v287, "prejeben", "p******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v288, "prdu", "p**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v289, "prdonje", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v290, "prdonjama", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v291, "prdonja", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v292, "prdnuti", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v293, "prdnut", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v294, "prdnuo", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v295, "prdnula", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v296, "prdiš", "p***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v297, "prditi", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v298, "prdite", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v299, "prdit", "p***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v300, "prdio", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v301, "prdila", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v302, "prdi", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v303, "prdežom", "p*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v304, "prdež", "p***ž");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v305, "prdenja", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v306, "prdekani", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v307, "prdaca", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v308, "prcao", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v309, "prcala", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v310, "poševiti", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v311, "poševila", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v312, "poševi", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v313, "posrati", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v314, "posrat", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v315, "posrao", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v316, "posranu", "p*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v317, "posranom", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v318, "posranog", "p******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v319, "posrano", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v320, "posrani", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v321, "posrane", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v322, "posranci", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v323, "posrana", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v324, "posran", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v325, "posrali", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v326, "posrala", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v327, "poseru", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v328, "poserotinama", "p**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v329, "posereš", "p*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v330, "posere", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v331, "poseksaš", "p******š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v332, "poseksati", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v333, "poseksao", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v334, "poseksam", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v335, "poseksala", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v336, "poseksaju", "p*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v337, "poseksa", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v338, "pornjavu", "p******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v339, "pornjave", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v340, "pornjava", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v341, "poprcaju", "p******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v342, "popiškio", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v343, "popišaš", "p*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v344, "popišat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v345, "popišanije", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v346, "popišani", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v347, "popišana", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v348, "popišam", "p*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v349, "popišali", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v350, "popišale", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v351, "popiša", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v352, "popizditi", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v353, "popizdit", "p******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v354, "popizdio", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v355, "popizdim", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v356, "popizdila", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v357, "popizdi", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v358, "poluretardiranih", "p**************h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v359, "poluretardirani", "p*************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v360, "poluidiote", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v361, "poludebil", "p*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v362, "pokenjati", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v363, "pokenjao", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v364, "pokenja", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v365, "pokarale", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v366, "pokaka", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v367, "pojebo", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v368, "pojebi", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v369, "pojebeš", "p*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v370, "pojebe", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v371, "pojebati", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v372, "pojebat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v373, "pojebao", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v374, "pofukat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v375, "pofukao", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v376, "pofukaj", "p*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v377, "podjebavat", "p********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v378, "podjebavanju", "p**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v379, "podjebavanje", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v380, "podjebavanja", "p**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v381, "podjebavam", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v382, "podjebavali", "p*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v383, "podjebavaju", "p*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v384, "podjebava", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v385, "plačipičko", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v386, "plačipičkicu", "p**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v387, "plačipičke", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v388, "plačipička", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v389, "pišurija", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v390, "piškite", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v391, "pišati", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v392, "pišate", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v393, "pišanjem", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v394, "pišanje", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v395, "pišanja", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v396, "pišalinu", "p******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v397, "pišaka", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v398, "pišaju", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v399, "piša", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v400, "pičku", "p***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v401, "pičkom", "p****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v402, "pičko", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v403, "pičkice", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v404, "pički", "p***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v405, "pičketino", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v406, "pičketina", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v407, "pičke", "p***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v408, "pičkastog", "p*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v409, "pičkasti", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v410, "pička", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v411, "pičci", "p***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v412, "pičaka", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v413, "pizdunčić", "p*******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v414, "pizdunu", "p*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v415, "pizdunom", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v416, "pizdunima", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v417, "pizduni", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v418, "pizdune", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v419, "pizduna", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v420, "pizdun", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v421, "pizdiš", "p****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v422, "pizdite", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v423, "pizdio", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v424, "pizdica", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v425, "pizdi", "p***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v426, "pizdeku", "p*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v427, "pizdeke", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v428, "pizdeka", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v429, "pizdek", "p****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v430, "pizdarijom", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v431, "pizdarijica", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v432, "pizdarije", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v433, "pizdarijama", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v434, "pizdarija", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v435, "pizdama", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v436, "pizda", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v437, "pimpekom", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v438, "pimpeki", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v439, "pimpeka", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v440, "pimpek", "p****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v441, "picolovke", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v442, "pico", "p**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v443, "pice", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v444, "pica", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v445, "pedofilčinu", "p*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v446, "pedofilčinom", "p**********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v447, "pederčićima", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v448, "pederčići", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v449, "pederčićem", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v450, "pederčiće", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v451, "pederčića", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v452, "pederčić", "p******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v453, "pederčinu", "p*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v454, "pederčinom", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v455, "pederčino", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v456, "pederčine", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v457, "pederčina", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v458, "pederu", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v459, "pedersku", "p******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v460, "pederskom", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v461, "pederskoj", "p*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v462, "pederskog", "p*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v463, "pederskim", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v464, "pederski", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v465, "pederom", "p*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v466, "pederluku", "p*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v467, "pederluka", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v468, "pederluk", "p******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v469, "pederko", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v470, "pederizam", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v471, "pederima", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v472, "pederi", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v473, "pedere", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v474, "pederastog", "p********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v475, "pederastim", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v476, "pederastiju", "p*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v477, "pedera", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v478, "partizančine", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v479, "partizančinama", "p************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v480, "paksu", "p***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v481, "opizdilo", "o******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v482, "opizdii", "o*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v483, "opizdi", "o****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v484, "odjebo", "o****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v485, "odjebite", "o******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v486, "odjebi", "o****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v487, "odjebeš", "o*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v488, "odjebete", "o******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v489, "odjebemo", "o******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v490, "odjebe", "o****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v491, "odjebana", "o******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v492, "odjebali", "o******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v493, "odjebale", "o******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v494, "nepojebana", "n********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v495, "nenadjebivi", "n*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v496, "nejebici", "n******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v497, "nedojebani", "n********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v498, "nedojebana", "n********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v499, "nedojeban", "n*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v500, "nasrao", "n****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v501, "naserem", "n*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v502, "nasere", "n****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v503, "narajcane", "n*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v504, "nakurac", "n*****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v505, "najretardiraniji", "n**************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v506, "najnadrkaniji", "n***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v507, "najkurčevitije", "n************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v508, "najjebenijeg", "n**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v509, "najebo", "n****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v510, "najebeš", "n*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v511, "najebemo", "n******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v512, "najebe", "n****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v513, "najebati", "n******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v514, "najebat", "n*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v515, "najebao", "n*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v516, "najebah", "n*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v517, "najdebilniji", "n**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v518, "najdebilnije", "n**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v519, "naguženima", "n********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v520, "naguziš", "n*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v521, "naguzio", "n*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v522, "naguzimo", "n******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v523, "naguzim", "n*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v524, "naguzili", "n******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v525, "naguzi", "n****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v526, "nadrkao", "n*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v527, "nadrkano", "n******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v528, "nadrkani", "n******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v529, "nadrkana", "n******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v530, "nadjebavanje", "n**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v531, "muDa", "m**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v532, "morončinu", "m*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v533, "moronu", "m****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v534, "moronskom", "m*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v535, "moronima", "m******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v536, "moroni", "m****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v537, "moron", "m***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v538, "mikropenisom", "m**********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v539, "ljakse", "l****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v540, "lizoguzca", "l*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v541, "lezbu", "l***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v542, "lezbom", "l****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v543, "lezbo", "l***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v544, "lezbijska", "l*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v545, "lezbi", "l***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v546, "lezbejke", "l******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v547, "lezbe", "l***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v548, "lezbačenju", "l********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v549, "lezbačenjem", "l*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v550, "lezbačenja", "l********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v551, "lezbača", "l*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v552, "lezbama", "l*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v553, "kučko", "k***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v554, "kučkinih", "k******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v555, "kučkice", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v556, "kučki", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v557, "kučke", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v558, "kučkama", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v559, "kučka", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v560, "kurčiti", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v561, "kurčite", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v562, "kurčine", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v563, "kurčina", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v564, "kurčim", "k****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v565, "kurčili", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v566, "kurčenje", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v567, "kurvu", "k***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v568, "kurvom", "k****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v569, "kurviš", "k****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v570, "kurvinski", "k*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v571, "kurvinske", "k*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v572, "kurvinoga", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v573, "kurvinim", "k******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v574, "kurvinih", "k******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v575, "kurvini", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v576, "kurvin", "k****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v577, "kurvice", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v578, "kurvi", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v579, "kurveština", "k********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v580, "kurvetinom", "k********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v581, "kurvetino", "k*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v582, "kurvetini", "k*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v583, "kurvetine", "k*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v584, "kurvetina", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v585, "kurverajima", "k*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v586, "kurve", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v587, "kurvati", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v588, "kurvanjska", "k********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v589, "kurvama", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v590, "kurva", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v591, "kurcu", "k***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v592, "kurci", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v593, "kurcem", "k****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v594, "kurce", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v595, "kurca", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v596, "kurac", "k***c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v597, "kosookih", "k******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v598, "kosooke", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v599, "kopile", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v600, "kopilani", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v601, "kmice", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v602, "kmicama", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v603, "klimakteruše", "k**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v604, "kiturinu", "k******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v605, "kenjuckanje", "k*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v606, "kenjkaš", "k*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v607, "kenjkavih", "k*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v608, "kenjkati", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v609, "kenjka", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v610, "kenjci", "k****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v611, "kenjatori", "k*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v612, "kenjator", "k******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v613, "kenjati", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v614, "kenjat", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v615, "kenjao", "k****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v616, "kenjam", "k****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v617, "kenjali", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v618, "kenjala", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v619, "kenjajte", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v620, "kenjac", "k****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v621, "karina", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v622, "karani", "k****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v623, "karam", "k***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v624, "karaju", "k****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v625, "jеbеnа", "j****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v626, "junfera", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v627, "jebu", "j**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v628, "jebote", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v629, "jebo", "j**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v630, "jebivjetra", "j********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v631, "jebimo", "j****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v632, "jebiga", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v633, "jebi", "j**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v634, "jebeš", "j***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v635, "jebete", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v636, "jebenoj", "j*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v637, "jebenoga", "j******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v638, "jebeno", "j****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v639, "jebenim", "j*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v640, "jebenih", "j*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v641, "jebeni", "j****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v642, "jebene", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v643, "jebena", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v644, "jeben", "j***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v645, "jebemu", "j****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v646, "jebemo", "j****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v647, "jebem", "j***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v648, "jebe", "j**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v649, "jebaču", "j****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v650, "jebačku", "j*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v651, "jebači", "j****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v652, "jebače", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v653, "jebač", "j***č");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v654, "jebavati", "j******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v655, "jebavat", "j*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v656, "jebavao", "j*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v657, "jebavali", "j******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v658, "jebavala", "j******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v659, "jebava", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v660, "jebate", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v661, "jebat", "j***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v662, "jebao", "j***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v663, "jebanjem", "j******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v664, "jebanje", "j*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v665, "jebanja", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v666, "jebalo", "j****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v667, "jebali", "j****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v668, "jebale", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v669, "jebala", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v670, "jebal", "j***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v671, "jbg", "j*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v672, "izjebu", "i****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v673, "izjebo", "i****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v674, "izjebite", "i******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v675, "izjebem", "i*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v676, "izjebe", "i****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v677, "izjebao", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v678, "izjeban", "i*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v679, "izjebalo", "i******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v680, "izjebali", "i******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v681, "izdrkotine", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v682, "izdrkavanje", "i*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v683, "izdrkavanja", "i*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v684, "izdrkavaju", "i********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v685, "izdrkat", "i*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v686, "izdrkao", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v687, "izdrkan", "i*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v688, "izdrka", "i****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v689, "izasrao", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v690, "izasrala", "i******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v691, "isprdku", "i*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v692, "isprdiš", "i*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v693, "isprdio", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v694, "isprdili", "i******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v695, "isprdcima", "i*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v696, "isprdali", "i******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v697, "isprdaka", "i******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v698, "isprdak", "i*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v699, "ispišaš", "i*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v700, "homiću", "h****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v701, "homićima", "h******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v702, "homićem", "h*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v703, "homiće", "h****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v704, "homića", "h****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v705, "homić", "h***ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v706, "heil", "h**l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v707, "guženje", "g*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v708, "guzovima", "g******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v709, "guzonjice", "g*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v710, "guzonje", "g*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v711, "guzonjama", "g*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v712, "guzonja", "g*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v713, "guzom", "g***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v714, "guzoljublje", "g*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v715, "guzolizaca", "g********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v716, "guznih", "g****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v717, "guziš", "g***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v718, "guzičetini", "g********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v719, "guzičetine", "g********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v720, "guzičari", "g******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v721, "guzite", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v722, "guzimo", "g****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v723, "guzim", "g***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v724, "guzili", "g****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v725, "guzile", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v726, "guzila", "g****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v727, "guzicu", "g****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v728, "guzatu", "g****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v729, "guzatim", "g*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v730, "guzata", "g****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v731, "guz", "g*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v732, "govnu", "g***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v733, "govno", "g***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v734, "govnima", "g*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v735, "govneta", "g*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v736, "govnastog", "g*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v737, "govnaru", "g*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v738, "govnari", "g*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v739, "govnare", "g*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v740, "govnara", "g*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v741, "govna", "g***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v742, "govance", "g*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v743, "govana", "g****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v744, "gologuzim", "g*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v745, "gologuzi", "g******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v746, "fukare", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v747, "fukara", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v748, "fukao", "f***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v749, "fukam", "f***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v750, "fukajte", "f*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v751, "fufice", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v752, "fufica", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v753, "fucking", "f*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v754, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v755, "flundru", "f*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v756, "fificama", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v757, "fakeri", "f****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v758, "dupetu", "d****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v759, "dupeta", "d****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v760, "dupeljubac", "d********c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v761, "dupelizaca", "d********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v762, "dupeliscima", "d*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v763, "dupelisci", "d*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v764, "dupeglavca", "d********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v765, "dupeglavaca", "d*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v766, "dupeglavac", "d********c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v767, "dupe", "d**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v768, "drolju", "d****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v769, "droljo", "d****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v770, "droljicom", "d*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v771, "droljice", "d******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v772, "droljicama", "d********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v773, "droljica", "d******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v774, "droljetinu", "d********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v775, "droljetina", "d********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v776, "drolje", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v777, "droljastu", "d*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v778, "droljasti", "d*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v779, "droljama", "d******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v780, "drolja", "d****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v781, "drkice", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v782, "drkaš", "d***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v783, "drkati", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v784, "drkate", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v785, "drkao", "d***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v786, "drkanju", "d*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v787, "drkanjem", "d******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v788, "drkam", "d***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v789, "drkali", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v790, "drkaju", "d****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v791, "drkajte", "d*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v792, "drkaj", "d***j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v793, "drkadžije", "d*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v794, "drkadžija", "d*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v795, "drka", "d**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v796, "dreku", "d***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v797, "drekovi", "d*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v798, "drekec", "d****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v799, "drek", "d**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v800, "dovraga", "d*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v801, "dopizdio", "d******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v802, "dopizdili", "d*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v803, "dopizdi", "d*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v804, "degenom", "d*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v805, "debeloguzost", "d**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v806, "debeloguzih", "d*********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v807, "debeloguzi", "d********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v808, "debeloguze", "d********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v809, "debeloguzac", "d*********c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v810, "crnčugo", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v811, "crnčuge", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v812, "crnčuga", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v813, "crnjo", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v814, "cigu", "c**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v815, "cigo", "c**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v816, "cigići", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v817, "cigićem", "c*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v818, "cige", "c**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v819, "ciganu", "c****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v820, "cigansku", "c******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v821, "ciganskoj", "c*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v822, "ciganskih", "c*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v823, "ciganske", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v824, "ciganom", "c*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v825, "ciganluka", "c*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v826, "ciganluk", "c******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v827, "ciganko", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v828, "ciganke", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v829, "ciganka", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v830, "ciganinom", "c*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v831, "ciganin", "c*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v832, "ciganima", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v833, "cigani", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v834, "cigane", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v835, "cigana", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v836, "cice", "c**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v837, "bosančerosa", "b*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v838, "babunčino", "b*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v839, "ass", "a*s");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_hr(void)::sProfanityData_hr, (uint64_t)v4, 0x344uLL);
    for (uint64_t i = 0; i != -5016; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v839[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_hr(void)::sProfanityData_hr, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_hr(void)::sProfanityData_hr[0], unk_1EA3D8E08, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8E08 - GetProfanityFilter_hr(void)::sProfanityData_hr[0]) >> 4));
}

void sub_1C5EA5CF0(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 40080;
  uint64_t v4 = -40128;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_hu(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v554[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v4, "összeszarja", "ö*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v5, "összeokádott", "ö**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v6, "összehugyoz", "ö*********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v7, "átkúrták", "á******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v8, "átbaszás", "á******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v9, "átbaszta", "á******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v10, "átbaszott", "á*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v11, "átbaszni", "á******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v12, "átbaszarintva", "á***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v13, "átbasz", "á****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v14, "ánusza", "á****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v15, "álbuzikat", "á*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v16, "valagával", "v*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v17, "valagát", "v*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v18, "valagunkba", "v********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v19, "valaga", "v****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v20, "valag", "v***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v21, "teleszarnak", "t*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v22, "tehénszar", "t*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v23, "szófosást", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[12],0>(v24, "szófosásból", "s*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v25, "szófosásba", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v26, "szétkúrták", "s********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v27, "szétkúrni", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v28, "szétbaszott", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v29, "szétbaszni", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v30, "szétbasszuk", "s*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v31, "szájbabaszott", "s***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v32, "szopós", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v33, "szopó", "s***ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v34, "szopás", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v35, "szopunk", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "szoptam", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v37, "szopta", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v38, "szopok", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v39, "szopod", "s****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v40, "szopnánk", "s******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v41, "szopni", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "szopkodja", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v43, "szopjál", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v44, "szopják", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v45, "szopjak", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v46, "szophattok", "s********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v47, "szopatás", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v48, "szopatva", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v49, "szopatni", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v50, "szopatnak", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v51, "szarért", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v52, "szarát", "s****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v53, "szarás", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v54, "szarunk", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v55, "szarul", "s****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v56, "szartál-e", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v57, "szarták", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v58, "szartok", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v59, "szartam", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v60, "szartak", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v61, "szarta", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v62, "szart", "s***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v63, "szarságra", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v64, "szarságokra", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v65, "szarságokat", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v66, "szarsággal", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v67, "szarság", "s*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v68, "szarszag", "s******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v69, "szarsz", "s****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v70, "szarrágó", "s******ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "szarrá", "s****á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v72, "szarral", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v73, "szarrakás", "s*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v74, "szarra", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v75, "szaroztak", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v76, "szaroznak", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v77, "szarosoknál", "s*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v78, "szaros", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v79, "szaron", "s****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v80, "szarom", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v81, "szarokért", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v82, "szarokra", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v83, "szaroknál", "s*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v84, "szarokat", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v85, "szarok", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v86, "szarod", "s****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "szarná", "s****á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v88, "szarni", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v89, "szarkupac", "s*******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v90, "szarkeverés", "s*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v91, "szarjuk", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v92, "szarjak", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v93, "szarj", "s***j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v94, "szarintámadás", "s***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v95, "szarig", "s****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v96, "szarházit", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v97, "szarházinak", "s*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v98, "szarházi", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "szarhoz", "s*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v100, "szarhasson", "s********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v101, "szarhalmot", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v102, "szardobálással", "s************l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v103, "szardarab", "s*******b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v104, "szarcsimbókokat", "s*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v105, "szarból", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v106, "szarban", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "szarba", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v108, "szarató", "s*****ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v109, "szarakodásra", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v110, "szarakodás", "s********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v111, "szarakodtak", "s*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v112, "szarakodni", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v113, "szarakodnak", "s*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v114, "szarakodjunk", "s**********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v115, "szarabbul", "s*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v116, "szarabbat", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v117, "szarabb", "s*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v118, "szar", "s**r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v119, "sunázásról", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v120, "sunáznám", "s******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v121, "sunázhatna", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v122, "sunát", "s***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v123, "strihelni", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v124, "stricit", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v125, "stricinek", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v126, "strichelt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v127, "seggünket", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v128, "seggünkből", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v129, "seggükön", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v130, "seggüket", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v131, "seggükbe", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v132, "seggével", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v133, "seggénél", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v134, "seggének", "s******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v135, "seggén", "s****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v136, "seggéből", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v137, "seggében", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v138, "seggébe", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v139, "seggvakarását", "s***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v140, "seggtörlő", "s*******ő");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v141, "seggtörlésre", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v142, "seggtapogatás", "s***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v143, "seggrepacsi", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v144, "seggnyalónak", "s**********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v145, "seggnyalókra", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v146, "seggnyalókat", "s**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v147, "seggnyalók", "s********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v148, "seggnyalója", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v149, "seggnyalói", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v150, "seggnyaló", "s*******ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v151, "seggnyalás", "s********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v152, "segglyuka", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v153, "seggibe", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v154, "segghülye", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v155, "seggformájú", "s*********ú");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v156, "seggfejre", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v157, "seggfejjel", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v158, "seggfejezik", "s*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v159, "seggfejet", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v160, "seggfejek", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v161, "seggfejei", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v162, "seggfej", "s*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v163, "seggetekre", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v164, "segget", "s****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v165, "seggen", "s****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v166, "seggemet", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v167, "seggembe", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v168, "seggem", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v169, "seggel", "s****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v170, "seggek", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v171, "seggedet", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v172, "seggeden", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v173, "seggedben", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v174, "seggedbe", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v175, "segged", "s****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v176, "segge", "s***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v177, "seggberúgjátok", "s************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v178, "seggben", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v179, "seggbe", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v180, "segg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v181, "ringyó", "r****ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v182, "ribancrendszám", "r************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v183, "ribanckodik", "r*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v184, "ribanc", "r****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v185, "reklámbuzi", "r********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v186, "ratyik", "r****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v187, "pöcsöltem", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v188, "pöcsöknek", "p*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v189, "pöcsöket", "p******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v190, "pöcst", "p***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v191, "pöcsirigy", "p*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v192, "pöcsfejek", "p*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v193, "pöcsfej", "p*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v194, "pöcs", "p**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v195, "pöccsel", "p*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v196, "puncival", "p******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v197, "puncijuk", "p******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v198, "puncija", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v199, "punci", "p***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v200, "puhapöcs", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v201, "prostikról", "p********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v202, "prostik", "p*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v203, "porbafingó", "p********ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v204, "popóját", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v205, "popójába", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v206, "popódat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v207, "popó", "p**ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v208, "pináját", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v209, "pina", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v210, "picsázni", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v211, "picsának", "p******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v212, "picsáját", "p******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v213, "picsába", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v214, "picsa", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v215, "pederaszta", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v216, "orálszex", "o******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v217, "odabaszták", "o********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v218, "odabaszok", "o*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v219, "odabasznak", "o********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v220, "nyomoronc", "n*******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v221, "nyomi", "n***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v222, "nyasgem", "n*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v223, "niggerre", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v224, "niggerekkel", "n*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v225, "niggerek", "n******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v226, "nigger", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v227, "nagyseggű", "n*******ű");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v228, "mozibuzikkal", "m**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v229, "mozibuzik", "m*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v230, "mozibuzi", "m******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v231, "megkúrja", "m******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v232, "megfingatni", "m*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v233, "megdugják", "m*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v234, "megdughassa", "m*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v235, "megbaszott", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v236, "megbaszott", "m********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v237, "megbaszhatod", "m**********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v238, "megbasz", "m*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v239, "lószart", "l*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v240, "lószarral", "l*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v241, "lószarban", "l*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v242, "lószar", "l****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v243, "lófaszt", "l*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v244, "lófaszból", "l*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v245, "lófasz", "l****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v246, "lócsöcs", "l*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v247, "lóbaszó", "l*****ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v248, "leturházni", "l********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v249, "leszoptad", "l*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v250, "leszbi", "l****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v251, "leszaró", "l*****ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v252, "leszarásnak", "l*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v253, "leszarva", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v254, "leszartak", "l*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v255, "leszarta", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v256, "leszarom", "l******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v257, "leszarnám", "l*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v258, "leszarni", "l******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v259, "leszarna", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v260, "leszarlak", "l*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v261, "leszarják", "l*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v262, "leszarjuk", "l*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v263, "leszarja", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v264, "lepisál", "l*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v265, "lekurvázta", "l********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[16],0>(v266, "lehülyepicsázta", "l*************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v267, "lebaszás", "l******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v268, "lebaszta", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v269, "kúródott", "k******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v270, "kúró", "k**ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v271, "kúrom", "k***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v272, "kúrok", "k***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v273, "kúrni", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v274, "kúrnak", "k****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v275, "kúrna", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v276, "kúrjátok", "k******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v277, "köcsögség", "k*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v278, "kutyaszart", "k********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v279, "kutyaszarról", "k**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v280, "kutyaszaros", "k*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v281, "kutyaszar", "k*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v282, "kurvázó", "k*****ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v283, "kurvázott", "k*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v284, "kurvázik", "k******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v285, "kurvával", "k******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v286, "kurvát", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v287, "kurvás", "k****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v288, "kurvára", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v289, "kurvának", "k******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v290, "kurválkodás", "k*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v291, "kurvákat", "k******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v292, "kurvák", "k****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v293, "kurvája", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v294, "kurvult", "k*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v295, "kurvaszar", "k*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v296, "kurvaország", "k*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v297, "kurva", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v298, "kula", "k**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v299, "kisköcsög", "k*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v300, "kipicsáznám", "k*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v301, "kicsesztetek", "k**********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v302, "kicsesztek", "k********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v303, "kicseszni", "k*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v304, "kicseszett", "k********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v305, "kibaszta", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v306, "kibaszottul", "k*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v307, "kibaszott", "k*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v308, "kibasznék", "k*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v309, "kibaszni", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v310, "kibasznak", "k*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v311, "kibaszik", "k******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v312, "kibasszanak", "k*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v313, "keményfaszú", "k*********ú");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v314, "kakálásnál", "k********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v315, "kakából", "k*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v316, "kaksit", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v317, "kakiról", "k*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v318, "kakil", "k***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v319, "kaka", "k**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v320, "húgyozták", "h*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v321, "hangyafing", "h********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v322, "gólyafos", "g******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v323, "genyók", "g****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v324, "genyó", "g***ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v325, "genyának", "g******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v326, "genya", "g***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v327, "gennyláda", "g*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v328, "gecizésre", "g*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v329, "geciségnek", "g********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v330, "geciláda", "g******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v331, "geciknek", "g******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v332, "gecik", "g***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v333, "gecigránátot", "g**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v334, "gecifos", "g*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v335, "gecibe", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v336, "geci", "g**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v337, "fütyijük", "f******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v338, "fütyijének", "f********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v339, "fütyi", "f***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v340, "félrekúró", "f*******ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v341, "fosás", "f***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v342, "fosunk", "f****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v343, "fostalicska", "f*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v344, "fost", "f**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v345, "fosszínü", "f******ü");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v346, "fossanak", "f******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v347, "fossal", "f****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v348, "foss", "f**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v349, "fospumpa", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v350, "fosni", "f***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v351, "fosnak", "f****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v352, "fosik", "f***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v353, "fosfej", "f****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v354, "fosból", "f****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v355, "fosarcúak", "f*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v356, "fos", "f*s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v357, "fingós", "f****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v358, "fingásaidról", "f**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v359, "finguk", "f****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v360, "fingod", "f****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v361, "fingjuk", "f*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v362, "fingjam", "f*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v363, "fingja", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v364, "fingik", "f****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v365, "finghatnak", "f********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v366, "fingatni", "f******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v367, "fingania", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v368, "fing", "f**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v369, "filmbuzikkal", "f**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v370, "filmbuzi", "f******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v371, "fenéknyalása", "f**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v372, "felkúrják", "f*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v373, "fekák", "f***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v374, "feka", "f**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v375, "faszával", "f******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v376, "faszát", "f****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v377, "faszára", "f*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v378, "faszán", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v379, "fasztól", "f*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v380, "faszt", "f***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v381, "faszságukhoz", "f**********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v382, "faszságukat", "f*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v383, "faszságra", "f*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v384, "faszságot", "f*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v385, "faszságokra", "f*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v386, "faszságokkal", "f**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v387, "faszságokat", "f*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v388, "faszságodnál", "f**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v389, "faszságaik", "f********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v390, "faszság", "f*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v391, "faszszopó", "f*******ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v392, "faszról", "f*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v393, "faszparaszt", "f*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v394, "faszom", "f****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v395, "faszoknak", "f*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v396, "faszok", "f****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v397, "faszod", "f****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v398, "fasznak", "f*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v399, "faszkodás", "f*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v400, "faszkalappal", "f**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v401, "faszkalapok", "f*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v402, "faszkalap", "f*******p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v403, "faszfejű", "f******ű");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v404, "faszfej", "f*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v405, "faszból", "f*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v406, "faszban", "f*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v407, "faszba", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v408, "fasz", "f**z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v409, "fapinával", "f*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v410, "fapina", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v411, "elszarni", "e******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v412, "elqrva", "e****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v413, "elkúródott", "e********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v414, "elkúrásai", "e*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v415, "elkúrták", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v416, "elkúrtuk", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v417, "elkúrtam", "e******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v418, "elkúrtak", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v419, "elkúrtad", "e******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v420, "elkúrta", "e*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v421, "elkúrt", "e****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v422, "elkúrni", "e*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v423, "elkúrnak", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v424, "elkúrják", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v425, "elkúrjuk", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v426, "elkúrja", "e*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v427, "elkurvázza", "e********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v428, "elkurvulni", "e********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v429, "elkurva", "e*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v430, "elbaszása", "e*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v431, "elbasztátok", "e*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v432, "elbaszták", "e*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v433, "elbasztam", "e*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v434, "elbasztak", "e*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v435, "elbasztad", "e*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v436, "elbaszta", "e******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v437, "elbaszottak", "e*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v438, "elbaszott", "e*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v439, "elbaszni", "e******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v440, "egérszar", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v441, "divatbuzikról", "d***********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v442, "disznószar", "d********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v443, "csöcsöst", "c******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v444, "csöcsök", "c*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v445, "csöcsre", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v446, "csöcs", "c***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v447, "csokifaszt", "c********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v448, "cseszett", "c******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v449, "csesszétek", "c********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v450, "cigókat", "c*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v451, "cigók", "c***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v452, "cigó", "c**ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v453, "cicim", "c***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v454, "cicikkel", "c******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v455, "cicik", "c***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v456, "cicije", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v457, "cici", "c**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v458, "buzulást", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v459, "buzulni", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v460, "buzuljanak", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v461, "buzul", "b***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v462, "buzizós", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v463, "buzizás", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v464, "buzizott", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v465, "buzizni", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v466, "buziznak", "b******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v467, "buzizik", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v468, "buzivonulás", "b*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v469, "buzivonaglás", "b**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v470, "buziverő", "b******ő");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v471, "buziverést", "b********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v472, "buzit", "b***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v473, "buziság", "b*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v474, "buzisan", "b*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v475, "buzis", "b***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v476, "buziparádéra", "b**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v477, "buzinak", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v478, "buzikról", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v479, "buzikon", "b*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v480, "buziknak", "b******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v481, "buzikkal", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v482, "buzikat", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v483, "buzik", "b***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v484, "buzifesztivál", "b***********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v485, "buzifelvonulást", "b*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[18],0>(v486, "buzifelvonulásnak", "b***************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v487, "buzifelvonulás", "b************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v488, "buzibárról", "b********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v489, "buzibárként", "b*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v490, "buzi", "b**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v491, "buzeránsok", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v492, "buzeráns", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v493, "beszopása", "b*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v494, "beszoptuk", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v495, "beszopják", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v496, "beszopja", "b******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v497, "beszarás", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v498, "beszartam", "b*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v499, "beszartak", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v500, "beszart", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v501, "beszarsz", "b******z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v502, "beszarok", "b******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v503, "beszarni", "b******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v504, "beszarik", "b******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v505, "beszari", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v506, "beleszarva", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v507, "beleszarna", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v508, "becseszett", "b********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v509, "bebuzultok", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v510, "bebuzul", "b*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v511, "bebaszott", "b*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v512, "bazmeg", "b****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v513, "bazdmeg", "b*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v514, "baszáson", "b******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v515, "baszáshoz", "b*******z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v516, "baszva", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v517, "basztál", "b*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v518, "baszták", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v519, "basztatásból", "b**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v520, "basztatás", "b*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v521, "basztatni", "b*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v522, "basztatnak", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v523, "basztatják", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v524, "basztassuk", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v525, "basztak", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v526, "baszottul", "b*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v527, "baszott", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v528, "baszok", "b****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v529, "baszogatása", "b*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v530, "baszogattak", "b*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v531, "baszogatta", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v532, "baszogatni", "b********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v533, "baszogatja", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v534, "baszogassa", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v535, "basznák", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v536, "basznia", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v537, "baszni", "b****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v538, "basznak", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v539, "baszkodom", "b*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v540, "baszhatom", "b*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v541, "baszdmeg", "b******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v542, "baszd", "b***d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v543, "baszatlan", "b*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v544, "baszakszik", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v545, "baszakodnak", "b*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v546, "basz", "b**z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v547, "basszátok", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v548, "basszák", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v549, "bassza", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v550, "baromarcú", "b*******ú");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v551, "balfasz", "b*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v552, "anál", "a**l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v553, "anyádba", "a*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v554, "agyonbassza", "a*********a");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_hu(void)::sProfanityData_hu, (uint64_t)v4, 0x227uLL);
    for (uint64_t i = 0; i != -3306; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v554[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_hu(void)::sProfanityData_hu, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_hu(void)::sProfanityData_hu[0], unk_1EA3D8E28, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8E28 - GetProfanityFilter_hu(void)::sProfanityData_hu[0]) >> 4));
}

void sub_1C5EAA660(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 26400;
  uint64_t v4 = -26448;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

#error "1C5EAA6C4: too big function (funcsize=0)"

void sub_1C5ED2F94(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 234576;
  uint64_t v4 = -234624;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_nb(void *a1)
{
  void v57[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v4, "utpult", "u****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v5, "svartinger", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v6, "svartingene", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v7, "svarting", "s******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v8, "ståkuk", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "satans", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v10, "rasshøl", "r*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v11, "rævpult", "r*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v12, "rævkjørt", "r******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v13, "purkejævler", "p*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "pakkiser", "p******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "niggere", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v16, "nigger", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v17, "negerjævler", "n*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v18, "negerjævel", "n********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v19, "mongo", "m***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "ludder", "l****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "kukker", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v22, "kukk", "k**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v23, "kuker", "k***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v24, "kuk", "k*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v25, "knulles", "k*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v26, "knuller", "k*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "knulle", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "knulla", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v29, "jævlig", "j****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v30, "jævla", "j***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v31, "horunge", "h*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "horebukk", "h******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "helvetes", "h******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v34, "fuckings", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v35, "fucka", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v36, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v37, "fittetryne", "f********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v38, "fitter", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v39, "fitten", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v40, "fittelandet", "f*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v41, "fitte", "f***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v42, "fitta", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v43, "faens", "f***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v44, "faen", "f**n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v45, "føkkings", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v46, "føkker", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v47, "føkka", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v48, "føkk", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v49, "bitch", "b***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v50, "barnesexen", "b********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v51, "barnesex", "b******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v52, "barnepornoen", "b**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v53, "barneporno", "b********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v54, "babysexen", "b*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v55, "babysex", "b*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v56, "babypornoen", "b*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v57, "babyporno", "b*******o");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_nb(void)::sProfanityData_nb, (uint64_t)v4, 0x36uLL);
    for (uint64_t i = 318; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v4[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_nb(void)::sProfanityData_nb, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_nb(void)::sProfanityData_nb[0], unk_1EA3D8E68, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8E68 - GetProfanityFilter_nb(void)::sProfanityData_nb[0]) >> 4));
}

void sub_1C5ED375C(_Unwind_Exception *a1)
{
  for (uint64_t i = 2544; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_hi(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v361[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v4, "teri maa ki chut", "t************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v5, "teri maa ki chut", "t************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[14],0>(v6, "teri maa ki choot", "t************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[14],0>(v7, "teri maa ki choot", "t************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v8, "teri maa ki", "t********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v9, "teri maa ki", "t********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v10, "tattu", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v11, "tatte", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v12, "rundi", "r****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v13, "randi", "r****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v14, "rand", "r***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v15, "raandi", "r****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v16, "raand", "r***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v17, "porkistan", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v18, "mutth", "म***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(v19, "muth", "म***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v20, "motherchoot", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v21, "motherchod", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v22, "mother choot", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v23, "mother chhod", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v24, "mooth", "म***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v25, "mammey", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v26, "mamme", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v27, "madarchut", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v28, "madarchood", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v29, "madarchodd", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v30, "madarchod", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v31, "madar chut", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v32, "madar chod", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v33, "maa ki chut", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v34, "maa ki chut", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v35, "maa ki choot", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v36, "maa ki choot", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v37, "lund", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v38, "lun", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v39, "lulli", "l***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v40, "luli", "l***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v41, "loru", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v42, "lodu", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v43, "lode", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v44, "loda", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v45, "laudu", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v46, "laudey", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v47, "laude", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v48, "lauda", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v49, "jhatu", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v50, "jhat", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v51, "jhantu", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v52, "jhant", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v53, "jhaatu", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v54, "jhaat", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v55, "jhaantu", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v56, "jhaant", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v57, "gottey", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v58, "gotte", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v59, "gotey", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v60, "gote", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v61, "gasti", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v62, "gandu", "g****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v63, "gandfut", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v64, "gandfat", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v65, "gand", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v66, "gadhalund", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v67, "gadhalun", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v68, "gaandu", "g****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v69, "gaand", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v70, "fattu", "f***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v71, "dalley", "d***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v72, "dalle", "d***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v73, "chutiya", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v74, "chutia", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v75, "chut", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v76, "chudwane", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v77, "chudwana", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v78, "chudwaane", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v79, "chudwaana", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v80, "chudwaa", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v81, "chudwa", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v82, "chudvane", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v83, "chudvana", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v84, "chudvaane", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v85, "chudvaana", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v86, "chudvaa", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v87, "chudva", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v88, "chudney", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v89, "chudne", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v90, "chuchi", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v91, "chuche", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v92, "chootiya", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "chootia", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v94, "choot", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v95, "choochi", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v96, "chooche", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v97, "chodd", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v98, "chod", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v99, "chhod", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v100, "bubey", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v101, "bube", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v102, "bubbey", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v103, "bubbe", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v104, "bosdiwali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v105, "bosdiwale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v106, "bosdiwala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v107, "bosdivali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v108, "bosdivale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v109, "bosdivala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v110, "bosdiki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v111, "bosdike", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v112, "bosdika", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v113, "bosdi wali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v114, "bosdi wali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v115, "bosdi wale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v116, "bosdi wale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v117, "bosdi wala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v118, "bosdi wala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v119, "bosdi vali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v120, "bosdi vali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v121, "bosdi vale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v122, "bosdi vale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v123, "bosdi vala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v124, "bosdi vala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v125, "bosdi ki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v126, "bosdi ki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v127, "bosdi ke", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v128, "bosdi ke", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v129, "bosdi ka", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v130, "bosdi ka", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v131, "bosdi", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v132, "bosadiwali", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v133, "bosadiwale", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v134, "bosadiwala", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v135, "bosadivali", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v136, "bosadivale", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v137, "bosadivala", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v138, "bosadiki", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v139, "bosadike", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v140, "bosadika", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v141, "bosadi", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v142, "bhosdiwali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v143, "bhosdiwale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v144, "bhosdiwala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v145, "bhosdivali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v146, "bhosdivale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v147, "bhosdivala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v148, "bhosdiki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v149, "bhosdike", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v150, "bhosdika", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v151, "bhosdi", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v152, "bhosdaa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v153, "bhosda", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v154, "bhosadiwali", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v155, "bhosadiwale", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v156, "bhosadivali", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v157, "bhosadivale", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v158, "bhosadivala", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v159, "bhosadiki", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v160, "bhosadike", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v161, "bhosadika", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v162, "bhosadi", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v163, "bhosadaa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v164, "bhosada", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v165, "bhonsdiwali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v166, "bhonsdiwale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v167, "bhonsdiwala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v168, "bhonsdivali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v169, "bhonsdivale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v170, "bhonsdivala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v171, "bhonsdiki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v172, "bhonsdike", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v173, "bhonsdika", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v174, "bhonsdi wali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v175, "bhonsdi wale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v176, "bhonsdi wala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v177, "bhonsdi vali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v178, "bhonsdi vale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v179, "bhonsdi vala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v180, "bhonsdi ki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v181, "bhonsdi ke", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v182, "bhonsdi ka", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v183, "bhenchodd", "b****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v184, "bhenchod", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v185, "bhencho", "b****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[10],0>(v186, "bhen ke takke", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v187, "bhen ke take", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v188, "bhainchod", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v189, "bhain ke takke", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[10],0>(v190, "bhain ke take", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v191, "bhadwaa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v192, "bhadwa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v193, "bhadvaa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v194, "bhadva", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v195, "bhaduaa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v196, "bhadua", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v197, "betichodd", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v198, "betichod", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v199, "beti chodd", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v200, "beti chod", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v201, "behenchod", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v202, "behen ke takke", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[10],0>(v203, "behen ke take", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v204, "bbhosadiwala", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v205, "bakchodi", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v206, "bakchodd", "b****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v207, "bakchod", "b****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v208, "babbey", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v209, "babbe", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v210, "aand", "a***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v211, "लौडे", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v212, "लौडा", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v213, "लौड़े", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v214, "लौड़ा", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v215, "लोडे", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v216, "लोडा", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v217, "लोड़े", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v218, "लोड़ू", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v219, "लोड़ा", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[7],0>(v220, "लुल्ली", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v221, "लुली", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v222, "लन", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v223, "लण", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v224, "लंड", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v225, "राण्ड", "र****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v226, "रांड", "र****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v227, "राँड", "र****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v228, "रण्डी", "र****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v229, "रंडी", "र***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v230, "रँडी", "र****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v231, "मूठ", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v232, "मूट्ठ", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v233, "मुठ", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v234, "मुट्ठ", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[9],0>(v235, "मादरचोद", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[9],0>(v236, "मादरचूत", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[9],0>(v237, "मादरचुत", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[9],0>(v238, "मादर चोद", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[9],0>(v239, "मादर चूत", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[9],0>(v240, "मादर चुत", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[9],0>(v241, "मां की चूत", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[36],char const(&)[9],0>(v242, "मां का भोसड़ा", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[9],0>(v243, "माँ की चूत", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[36],char const(&)[9],0>(v244, "माँ का भोसड़ा", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v245, "मम्मे", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v246, "ममे", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v247, "भोसड़ीवाले", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v248, "भोसड़ीवाली", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v249, "भोसड़ीवाला", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v250, "भोसड़ीके", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v251, "भोसड़ीकी", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v252, "भोसड़ीका", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v253, "भोसड़ी वाले", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v254, "भोसड़ी वाली", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v255, "भोसड़ी वाला", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v256, "भोसड़ी के", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v257, "भोसड़ी की", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v258, "भोसड़ी का", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v259, "भोसड़ी", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v260, "भोसड़िवाले", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v261, "भोसड़िवाली", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v262, "भोसड़िवाला", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v263, "भोसड़िके", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v264, "भोसड़िकी", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v265, "भोसड़िका", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v266, "भोसड़ि", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v267, "भोसड़ा", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[8],0>(v268, "भेंचोड़", "भ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v269, "भाइनचोड़", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(v270, "भाइन के टके", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v271, "भड़ुआ", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v272, "भड़वा", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[9],0>(v273, "बोसाड़िके", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v274, "बोसड़ीवाले", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v275, "बोसड़ीवाली", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v276, "बोसड़ीवाला", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v277, "बोसड़ीके", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v278, "बोसड़ीका", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v279, "बोसड़ी वाले", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v280, "बोसड़ी वाली", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v281, "बोसड़ी वाला", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v282, "बोसड़ी के", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v283, "बोसड़ी की", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v284, "बोसड़ी का", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v285, "बोसड़ी", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v286, "बोसड़िवाले", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v287, "बोसड़िवाली", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v288, "बोसड़िवाला", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v289, "बोसड़िके", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v290, "बोसड़िकी", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v291, "बोसड़िका", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v292, "बोसड़ि", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[7],0>(v293, "बेहेनचोद", "ब***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[7],0>(v294, "बेहेन के टके", "ब***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[8],0>(v295, "बेटीचोद", "भ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[8],0>(v296, "बेटी चोद", "भ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v297, "बूब्बे", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v298, "बूबे", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v299, "बुब्बे", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v300, "बहनचोद", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[9],0>(v301, "बहन के टके", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v302, "बब्बे", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v303, "बकचोदी", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v304, "बकचोद", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v305, "फट्टू", "फ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[7],0>(v306, "पोरकिस्तान", "प***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v307, "दल्ले", "द***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v308, "दलले", "द***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[40],char const(&)[9],0>(v309, "तेरी मां की चूत", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(v310, "तेरी मां की", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[49],char const(&)[9],0>(v311, "तेरी मां का भोसड़ा", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(v312, "तेरी मां का", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[40],char const(&)[9],0>(v313, "तेरी माँ की चूत", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(v314, "तेरी माँ की", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[49],char const(&)[9],0>(v315, "तेरी माँ का भोसड़ा", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(v316, "तेरी माँ का", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v317, "टट्टे", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v318, "टट्टू", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v319, "टट्टु", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v320, "टटे", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v321, "टटू", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v322, "टटु", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v323, "झाटू", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v324, "झाटु", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v325, "झाट", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v326, "झांटू", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v327, "झांटु", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v328, "झाँटू", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v329, "झाँटु", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v330, "चोद", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v331, "चूतीया", "च*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v332, "चूतिया", "च*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v333, "चूत", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v334, "चूचे", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v335, "चूची", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[7],0>(v336, "चुदवाने", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[7],0>(v337, "चुदवाना", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v338, "चुदवा", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v339, "चुदने", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v340, "चुटीया", "च*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v341, "चुटिया", "च*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v342, "चुचे", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v343, "चुची", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[8],0>(v344, "गोट्टे", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v345, "गोटे", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v346, "गांडू", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v347, "गांडु", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[8],0>(v348, "गांडफट", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v349, "गांड", "ग***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v350, "गाँडू", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v351, "गाँडु", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[8],0>(v352, "गाँडफट", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v353, "गाँड", "ग***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v354, "गस्ती", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v355, "गसती", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v356, "गधालन", "ग***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[7],0>(v357, "गधालंड", "ग***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v358, "गंडफट", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v359, "गँडफट", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v360, "आंड", "आ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v361, "आँड", "आ*****");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_hi(void)::sProfanityData_hi, (uint64_t)v4, 0x166uLL);
    for (uint64_t i = 0; i != -2148; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v361[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_hi(void)::sProfanityData_hi, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_hi(void)::sProfanityData_hi[0], unk_1EA3D8E88, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8E88 - GetProfanityFilter_hi(void)::sProfanityData_hi[0]) >> 4));
}

void sub_1C5ED6728(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 17136;
  uint64_t v4 = -17184;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_de(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v158[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v4, "wixer", "w***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v5, "wixen", "w**en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v6, "wixe", "w**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v7, "wichser", "w*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v8, "wichsen", "w****en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "wichse", "w****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "votzen", "v***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v11, "votze", "v***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v12, "tittenlutscher", "t************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v13, "tittenheft", "t********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v14, "tittenfick", "t********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v15, "titten", "t***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v16, "titte", "t***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v17, "spermakehle", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v18, "spaghettifresser", "s**************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v19, "spagettifresser", "s*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v20, "schänden", "s*****en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v21, "schwuchtel", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v22, "schwanzlutscher", "s*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v23, "schluckluder", "s**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v24, "schlitzauge", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v25, "schlampe", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v26, "scheißen", "s******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v27, "scheiße", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v28, "scheiß", "s****ß");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v29, "scheissen", "s******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v30, "scheisse", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v31, "scheiss", "s*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v32, "schaenden", "s******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v33, "sacklutscher", "s**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v34, "sackgesicht", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v35, "russki", "r****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v36, "rosettenschlemmer", "r***************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v37, "rosettenhengst", "r************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "querfotze", "q*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v39, "pötern", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v40, "punani", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v41, "pollacke", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "pissnelke", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v43, "pissetrinker", "p**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v44, "pimmellutscher", "p************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v45, "pimmelkopf", "p********f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v46, "pimmel", "p****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v47, "onkelficker", "o*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v48, "ochsenficker", "o**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v49, "nutte", "n***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v50, "nillenkäse", "n********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v51, "nille", "n***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v52, "nigger", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v53, "niggas", "n***as");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v54, "neger", "n***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v55, "nabelficker", "n*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v56, "mösensaft", "m*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v57, "möse", "m**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v58, "moesensaft", "m********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v59, "moese", "m***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v60, "makkaronifresserin", "m**************rin");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v61, "makkaronifresser", "m**************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v62, "kümmeltürkin", "k***********in");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[11],0>(v63, "kümmeltürken", "k*******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v64, "kümmeltürke", "k*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v65, "kuemmeltuerken", "k***********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v66, "kuemmeltuerke", "k***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v67, "knieficker", "k********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v68, "knackarsch", "k********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v69, "klöten", "k***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v70, "kloeten", "k****en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v71, "kinderschändern", "k************rn");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v72, "kinderschänder", "k************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v73, "kinderschaender", "k*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v74, "kinderficker", "k**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v75, "kanake", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v76, "kacken", "k***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v77, "kacke", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v78, "judensäue", "j******ue");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v79, "judenschweine", "j**********ne");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v80, "judenschwein", "j**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v81, "judensau", "j******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v82, "judennutten", "j********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v83, "judennutte", "j********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v84, "judenhuren", "j*******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v85, "judenhure", "j*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v86, "judaverrecke", "j**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v87, "japsen", "j***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v88, "japse", "j***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v89, "itakerschweine", "i*********ne");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v90, "itakerschwein", "i*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v91, "itakernutten", "i*********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v92, "itakernutte", "i*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v93, "itakerhure", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v94, "itaker", "i****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v95, "hühnerficker", "h**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v96, "hurensöhne", "h******ne");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v97, "hurensohn", "h*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v98, "huren", "h**en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v99, "hure", "h**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v100, "huehnerficker", "h***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v101, "heilhitler", "h********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v102, "gebumst", "g*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v103, "fucksticks", "f*******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v104, "fuckstick", "f*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v105, "fucking", "f***ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v106, "fuckin", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v107, "fuckhead", "f******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "fuckem", "f****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v109, "fucked", "f***ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v110, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v111, "fotzensaft", "f********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v112, "fotzenlecker", "f**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v113, "fotzen", "f***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v114, "fotze", "f***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v115, "flachwichser", "f**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v116, "fisten", "f***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v117, "fickt", "f***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v118, "fickpisse", "f*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v119, "ficker", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v120, "ficken", "f***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v121, "fickdich", "f******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v122, "fick", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v123, "fettärsche", "f********he");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v124, "fettsäcke", "f*******ke");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v125, "fettsack", "f******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v126, "fettarsch", "f*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v127, "ferkelwämser", "f**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v128, "ferkelwaemser", "f***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v129, "ferkelficker", "f**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v130, "eselficker", "e********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v131, "durchgefickt", "d**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v132, "durchficken", "d********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v133, "bumsen", "b***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v134, "bullenklöten", "b*********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v135, "bullenkloeten", "b**********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v136, "beschissen", "b*******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v137, "bescheißt", "b*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v138, "bescheißen", "b*******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v139, "bescheissen", "b********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v140, "ausländervotzen", "a************en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v141, "ausländervotze", "a************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v142, "ausländerfotzen", "a************en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v143, "ausländerfotze", "a************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v144, "arschlöcher", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v145, "arschloecher", "a**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v146, "arschloch", "a*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v147, "arschlecker", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[17],0>(v148, "arschkriecherin", "a*************in");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v149, "arschkriecher", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v150, "arschkekse", "a*******se");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v151, "arschkeks", "a******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v152, "arschkatheter", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v153, "arschintruder", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v154, "arschficker", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v155, "arschficken", "a********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v156, "arsch", "a***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v157, "analschlampe", "a**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v158, "abgefuckt", "a*******t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_de(void)::sProfanityData_de, (uint64_t)v4, 0x9BuLL);
    for (uint64_t i = 0; i != -930; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v158[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_de(void)::sProfanityData_de, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_de(void)::sProfanityData_de[0], unk_1EA3D8EA8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8EA8 - GetProfanityFilter_de(void)::sProfanityData_de[0]) >> 4));
}

void sub_1C5ED7C08(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 7392;
  uint64_t v4 = -7440;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_ko(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v354[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v4, "후릴놈", "후**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v5, "후릴년", "후**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v6, "호모자식", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v7, "호모새끼", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v8, "호모놈", "호**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v9, "호모년", "호**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v10, "호로잡놈", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v11, "호로잡년", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v12, "호로잡것", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v13, "호로자식", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v14, "호로새끼", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v15, "호로개잡놈", "호****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v16, "호로개잡년", "호****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v17, "호로개자식", "호****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v18, "호구새끼", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v19, "허접새끼", "허***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v20, "허접들", "허**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v21, "코쟁이", "코**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v22, "쳐먹어", "쳐**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v23, "처먹어", "처**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v24, "창놈", "창*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v25, "창년", "창*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v26, "창녀", "창*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v27, "창남", "창*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v28, "쪽발이", "쪽**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v29, "쪽바리", "쪽**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v30, "짱깨", "짱*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v31, "지랄하네", "지***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v32, "지랄발광", "지***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v33, "지랄", "지*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v34, "즐쳐드셈", "즐***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v35, "쥐좆만한", "쥐***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v36, "쥐새끼", "쥐**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v37, "죽일새끼", "죽***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v38, "죽일놈", "죽**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v39, "죽일년", "죽**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v40, "좇까라", "좇**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v41, "좆빠지게", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v42, "좆빠구리", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v43, "좆밥", "좆*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v44, "좆맹구", "좆**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v45, "좆만한새끼", "좆****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v46, "좆만한놈", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v47, "좆만한년", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v48, "좆만한것", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v49, "좆만아", "좆**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v50, "좆됐다", "좆**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v51, "좆대가리", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v52, "좆나씨팔", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v53, "좆나", "*나");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v54, "좆까", "좆*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v55, "좆같은새끼", "좆****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v56, "좆같은놈", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v57, "좆같은년", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v58, "좆같다", "좆**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v59, "좆", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v60, "좃빠지게", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v61, "좃빠구리", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v62, "좃밥", "좃*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v63, "좃맹구", "좃**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v64, "좃만한새끼", "좃****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v65, "좃만한놈", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v66, "좃만한년", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v67, "좃만한것", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v68, "좃만아", "좃**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v69, "좃됐다", "좃**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v70, "좃대가리", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v71, "좃나씹팔", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v72, "좃나씨팔", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v73, "좃나씨발", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v74, "좃나십팔", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v75, "졸라게", "졸**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v76, "졸라", "졸*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v77, "존나게", "존**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v78, "존나", "존*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v79, "재수없는새끼", "재*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v80, "재수없는놈", "재****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v81, "재수없는년", "재****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v82, "잡새끼", "잡**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v83, "잡놈", "잡*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v84, "잡년", "잡*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v85, "잡것", "잡*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v86, "자지새끼", "자***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v87, "자지놈", "자**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v88, "자지년", "자**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v89, "육시럴", "육**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v90, "육시랄놈", "육***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v91, "육시랄년", "육***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v92, "육시랄", "육**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v93, "육봉대가리", "육****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v94, "우라질", "우**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v95, "엿먹어", "엿**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v96, "엿같은새끼", "엿****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v97, "엿같은놈", "엿***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v98, "엿같은년", "엿***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v99, "염병할새끼", "염****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v100, "염병할놈", "염***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v101, "염병할년", "염***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v102, "염병할것", "염***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v103, "염병할", "염**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v104, "염병", "염*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v105, "에미보지", "에***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v106, "양년", "양*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v107, "양공주", "양**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v108, "양갈보", "양**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v109, "아갈통", "아**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v110, "아갈빡", "아**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v111, "씹팔좆나", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v112, "씹팔좆", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v113, "씹팔놈의새끼", "씨*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v114, "씹팔놈", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v115, "씹팔년", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v116, "씹팔것", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v117, "씹팔개새끼", "씨****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v118, "씹팔", "씹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v119, "씹탱구리", "씹***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v120, "씹장생", "씹**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v121, "씹새야", "씹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v122, "씹새끼", "씹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v123, "씹놈", "씹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v124, "씹년", "씹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v125, "씹구멍", "씹**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v126, "씨팔좆나", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v127, "씨팔좆", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v128, "씨팔놈의새끼", "씨*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v129, "씨팔놈", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v130, "씨팔년", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v131, "씨팔것", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v132, "씨팔개새끼", "씨****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v133, "씨팔", "씨*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v134, "씨불탱", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v135, "씨부랄놈", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v136, "씨부랄년", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v137, "씨부랄", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v138, "씨방새끼", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v139, "씨방새", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v140, "씨발좆나", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v141, "씨발좆", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v142, "씨발새끼", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v143, "씨발놈의새끼", "씨*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v144, "씨발놈", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v145, "씨발년", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v146, "씨발것", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v147, "씨발개새끼", "씨****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v148, "씨발", "씨*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v149, "씨댕아", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v150, "씨댕새끼", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v151, "씨댕놈", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v152, "씨댕년", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v153, "씨댕", "씨*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v154, "쓰레기년", "쓰***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v155, "썩을놈의새끼", "썩*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v156, "썩을놈", "썩**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v157, "썩을년", "썩**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v158, "썅놈의새끼", "썅****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v159, "썅놈", "썅*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v160, "썅년", "썅*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v161, "썅", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v162, "쌍판", "쌍*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v163, "쌍놈의새끼", "쌍****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v164, "쌍놈", "쌍*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v165, "쌍년", "쌍*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v166, "쌍", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v167, "십팔", "십*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v168, "십딱", "십*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v169, "소새끼", "소**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v170, "섹파", "섹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v171, "섹마", "섹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v172, "섹녀", "섹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v173, "섹남", "섹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v174, "서양이쁜이", "서****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v175, "색마", "색*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v176, "색놈", "색*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v177, "색년", "색*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v178, "새대가리", "새***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v179, "상놈의새끼", "상****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v180, "상놈", "상*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v181, "상년", "상*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v182, "삽질", "삽*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v183, "사까시", "사**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v184, "빨통", "빨*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v185, "빨갱이", "빨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v186, "빠순이", "빠**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v187, "빠돌이", "빠**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v188, "빠구리", "빠**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v189, "빌어먹을새끼", "빌*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v190, "빌어먹을놈", "빌****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v191, "빌어먹을년", "빌****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v192, "불알", "불*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v193, "보지털", "보**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v194, "보지새끼", "보***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v195, "보지구멍", "보***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v196, "보지", "보*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v197, "병신씹새", "병***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v198, "병신새끼", "병***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v199, "병신개자식", "병****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v200, "병신같은놈", "병****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v201, "병신같은년", "병****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v202, "병신", "병*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v203, "변태새끼", "변***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v204, "변태", "변*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v205, "변섹", "변*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v206, "변녀", "변*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v207, "변남", "변*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v208, "반병신", "반**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v209, "미친씹새끼", "미****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v210, "미친썅놈", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v211, "미친썅년", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v212, "미친쌍놈", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v213, "미친쌍년", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v214, "미친새끼", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v215, "미친상놈", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v216, "미친상년", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v217, "미친놈", "미**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v218, "미친년", "미**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v219, "미친개잡", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v220, "미친개새끼", "미****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v221, "미친개보지", "미****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v222, "멍텅구리", "멍***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v223, "멍청한새끼", "멍****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v224, "멍청한놈", "멍***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v225, "멍청한년", "멍***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v226, "망할새끼", "망***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v227, "망할놈", "망**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v228, "망할년", "망**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v229, "맛간새끼", "맛***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v230, "맛간놈", "맛**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v231, "맛간년", "맛**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v232, "막간놈", "막**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v233, "막간년", "막**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v234, "뚱보새끼", "뚱***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v235, "똥대가리", "똥***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v236, "또라이새끼", "또****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v237, "또라이", "또**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v238, "딸딸이", "딸**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v239, "등신새끼", "등***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v240, "뒈질새끼", "뒈***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v241, "뒈질놈", "뒈**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v242, "뒈질년", "뒈**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v243, "뒈질", "뒈*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v244, "돌아이새끼", "돌****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v245, "돌아이", "돌**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v246, "돌대가리", "돌***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v247, "대갈빡", "대**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v248, "닥쳐", "닥*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v249, "니자지", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v250, "니보지", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v251, "니미좃", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v252, "니미애미", "니***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v253, "니미씹", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v254, "니미씨팔놈아", "니*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v255, "니미씨팔", "니***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v256, "니미럴새끼", "니****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v257, "니미럴", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v258, "니미", "니*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v259, "니기미씨댕", "니****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v260, "니기미", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v261, "니기리좆도", "닝****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v262, "남창", "남*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v263, "나쁜새끼", "나***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v264, "나쁜놈", "나**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v265, "나쁜년", "나**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v266, "꼴통새끼", "꼴***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v267, "껌둥이", "껌**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v268, "깜둥이", "깜**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v269, "까진년", "까**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v270, "그지좆밥", "그***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v271, "구멍질", "구**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v272, "고자새끼", "고***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v273, "고자놈", "고**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v274, "걸레놈", "걸**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v275, "걸레년", "걸**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v276, "걸레같은놈", "걸****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v277, "걸레같은년", "걸****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v278, "거지좃밥", "거***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v279, "거지새끼", "거***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v280, "거지발싸개", "거****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v281, "거지놈", "거**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v282, "거지년", "거**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v283, "개호로새끼", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v284, "개호로놈", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v285, "개호로년", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v286, "개호로", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v287, "개허접", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v288, "개찌질이", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v289, "개쪼다", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v290, "개지랄", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v291, "개좆만아", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v292, "개좆같은놈", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v293, "개좆같은년", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v294, "개좆같은것", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v295, "개좆같은", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v296, "개잡놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v297, "개잡년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v298, "개잡것", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v299, "개작살", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v300, "개자지", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v301, "개자식", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v302, "개염병", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v303, "개씹창", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v304, "개씹새끼", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v305, "개씹새", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v306, "개씹보지", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v307, "개씨팔좆밥", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[6],0>(v308, "개씨팔놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[6],0>(v309, "개씨팔년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v310, "개씨팔", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v311, "개씨부랄", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v312, "개쓰레기", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v313, "개썅놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v314, "개썅년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v315, "개쌍놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v316, "개쌍년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v317, "개싸이코", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v318, "개소리", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v319, "개새끼", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v320, "개상놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v321, "개상년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v322, "개뼈다귀", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v323, "개빠구리", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v324, "개불알", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v325, "개보지털", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v326, "개보지놈", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v327, "개보지년", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v328, "개보지", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v329, "개병신", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v330, "개발싸개", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v331, "개발새끼", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v332, "개발놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v333, "개발년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v334, "개망나니", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v335, "개또라이", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v336, "개돌아이", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v337, "개놈의새끼", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v338, "개놈아", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v339, "개놈", "개*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v340, "개년아", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v341, "개년", "개*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v342, "개걸레", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v343, "개같은자식", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v344, "개같은새끼", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v345, "개같은놈", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v346, "개같은년", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v347, "개같은", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v348, "개갈보", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v349, "갈보자식", "갈***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v350, "갈보새끼", "갈***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v351, "갈보놈", "갈**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v352, "갈보년", "갈**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v353, "갈보", "갈*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v354, "간나새끼", "간***");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ko(void)::sProfanityData_ko, (uint64_t)v4, 0x15FuLL);
    for (uint64_t i = 0; i != -2106; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v354[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ko(void)::sProfanityData_ko, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_ko(void)::sProfanityData_ko[0], unk_1EA3D8EC8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8EC8 - GetProfanityFilter_ko(void)::sProfanityData_ko[0]) >> 4));
}

void sub_1C5EDAAEC(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 16800;
  uint64_t v4 = -16848;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_fi(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v91[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v4, "vitut", "v***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v5, "vitusta", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v6, "vitussa", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v7, "vitun", "v***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v8, "vitulta", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "vitulle", "v*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v10, "vitulla", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "vituksi", "v*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v12, "vituista", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "vituissa", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "vituilta", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v15, "vituille", "v******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v16, "vituilla", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v17, "vituiksi", "v******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "vittuun", "v*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v19, "vittuna", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v20, "vittujen", "v******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v21, "vittuja", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v22, "vittuina", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v23, "vittuihin", "v*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v24, "vittua", "v****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v25, "vittu", "v***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v26, "pilluun", "p*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "pillut", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v28, "pillusta", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v29, "pillussa", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v30, "pilluna", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v31, "pillun", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "pillulta", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "pillulle", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v34, "pillulla", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v35, "pilluksi", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v36, "pillujen", "p******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v37, "pilluja", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "pilluista", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v39, "pilluissa", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v40, "pilluina", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v41, "pilluilta", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "pilluille", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "pilluilla", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v44, "pilluiksi", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v45, "pilluihin", "p*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v46, "pillua", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v47, "pillu", "p***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v48, "kyrvät", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v49, "kyrvästä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v50, "kyrvässä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v51, "kyrvän", "k****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v52, "kyrvältä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v53, "kyrvällä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v54, "kyrvälle", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v55, "kyrväksi", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v56, "kyrvistä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v57, "kyrvissä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v58, "kyrviltä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v59, "kyrvillä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v60, "kyrville", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "kyrviksi", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v62, "kyrpään", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v63, "kyrpää", "k****ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v64, "kyrpänä", "k*****ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v65, "kyrpä", "k***ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v66, "kyrpiä", "k****ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v67, "kyrpinä", "k*****ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v68, "kyrpiin", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v69, "kyrpien", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v70, "kullit", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v71, "kullista", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "kullissa", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v73, "kullina", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v74, "kullin", "k****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v75, "kullilta", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v76, "kullille", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v77, "kullilla", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v78, "kulliksi", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v79, "kulliin", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v80, "kullien", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v81, "kullia", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v82, "kulli", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v83, "kulleja", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v84, "kulleista", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v85, "kulleissa", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v86, "kulleina", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v87, "kulleilta", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v88, "kulleille", "k*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v89, "kulleilla", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v90, "kulleiksi", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v91, "kulleihin", "k*******n");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_fi(void)::sProfanityData_fi, (uint64_t)v4, 0x58uLL);
    for (uint64_t i = 0; i != -528; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v91[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_fi(void)::sProfanityData_fi, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_fi(void)::sProfanityData_fi[0], unk_1EA3D8EE8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8EE8 - GetProfanityFilter_fi(void)::sProfanityData_fi[0]) >> 4));
}

void sub_1C5EDB6E4(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 4176;
  uint64_t v4 = -4224;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_id(void *a1)
{
  void v8[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v4, "toket", "t***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v5, "keparat", "k*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v6, "dientot", "d*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v7, "binal", "b***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v8, "bangsat", "b*****t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_id(void)::sProfanityData_id, (uint64_t)v4, 5uLL);
    for (uint64_t i = 24; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v4[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_id(void)::sProfanityData_id, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_id(void)::sProfanityData_id[0], unk_1EA3D8F08, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8F08 - GetProfanityFilter_id(void)::sProfanityData_id[0]) >> 4));
}

void sub_1C5EDB8EC(_Unwind_Exception *a1)
{
  for (uint64_t i = 192; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_fr(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v288[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v4, "écouillé", "é******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v5, "éburné", "é****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "zob", "z*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v7, "zguègue", "z*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "zboube", "z****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v9, "zboob", "z***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v10, "weeaboo", "w*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v11, "vide-couilles", "v***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v12, "turluchon", "t*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v13, "troufignon", "t********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v14, "troufignoliser", "t************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v15, "troufignolerie", "t************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v16, "troufignoler", "t**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v17, "trouducune", "t********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "trouduc", "t*****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v19, "troncher", "t******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "tocard", "t****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v21, "tire-au-cul", "t*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "teucha", "t****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v23, "teuch", "t***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v24, "teubé", "t***é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v25, "teub", "t**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v26, "techa", "t***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v27, "tassepé", "t*****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "taspé", "t***é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v29, "taré", "t**é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v30, "tarlouze", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v31, "tarlouse", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "tantouze", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v33, "tantouserie", "t*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v34, "tafiole", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v35, "taffioles", "t*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v36, "taffiole", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v37, "tabarnak", "t******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v38, "tabarnac", "t******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v39, "sucer", "s***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v40, "suce-boules", "s*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v41, "sous-merde", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v42, "souchienne", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v43, "souchien", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v44, "shit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v45, "sent-la-pisse", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v46, "schnouf", "s*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v47, "schnoque", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v48, "schnock", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v49, "schnek", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v50, "schleus", "s*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v51, "schleuhs", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v52, "schleuh", "s*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v53, "schleues", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v54, "schleue", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v55, "schleu", "s****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v56, "scheiße", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v57, "sans-couilles", "s***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v58, "salopes", "s*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v59, "salope", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v60, "salopard", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v61, "salop", "s***p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v62, "salauds", "s*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v63, "salaud", "s****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "sagouin", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v65, "s'archifoutre", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v66, "réenculer", "r*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v67, "refucker", "r******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v68, "ras-les-fesses", "r************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v69, "ras-le-bonbon", "r***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v70, "ras-la-moule", "r**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v71, "pétasses", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v72, "pétasse", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v73, "péquenaud", "p*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v74, "pédés", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v75, "pédé", "p**é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v76, "putes", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v77, "pute", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v78, "putains", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v79, "putain", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v80, "poufiasses", "p********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v81, "poufiasse", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v82, "pouffiasse", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v83, "poivrot", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v84, "pogne-cul", "p*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v85, "pochtron", "p******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v86, "pochetron", "p*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "pochard", "p*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v88, "pissou", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v89, "pisseur", "p*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v90, "pisser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v91, "pisse-au-lit", "p**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v92, "papier-cul", "p********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v93, "pakis", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v94, "paki", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v95, "ostie", "o***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v96, "négros", "n****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v97, "négro", "n***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v98, "négresses", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v99, "négresse", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v100, "nègres", "n****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v101, "nègre", "n***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v102, "niquer", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v103, "nichons", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v104, "nichon", "n****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v105, "nibard", "n****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v106, "niaks", "n***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v107, "niak", "n**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v108, "merdouillard", "m**********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v109, "merdogène", "m*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v110, "merdique", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v111, "merdier", "m*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v112, "merdicité", "m*******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v113, "merdeux", "m*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v114, "merdes", "m****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v115, "merderie", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v116, "merder", "m****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v117, "merde", "m***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v118, "merdasse", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v119, "merdaillon", "m********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v120, "merdaille", "m*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v121, "mauviette", "m*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v122, "mange-merde", "m*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v123, "lèche-cul", "l*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v124, "lopette", "l*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v125, "jean-foutre", "j*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v126, "imbitable", "i*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v127, "imbitabilité", "i**********é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v128, "imbaisable", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v129, "gueuler", "g*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v130, "gouines", "g*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v131, "gouine", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v132, "gogol", "g***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v133, "glaoui", "g****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v134, "glandu", "g****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v135, "glandouillou", "g**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v136, "glandeuse", "g*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v137, "glandeur", "g******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v138, "garce", "g***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v139, "fucker", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v140, "foutriquer", "f********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v141, "foutre", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v142, "foutoir", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v143, "fouteur", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v144, "fouille-merde", "f***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v145, "foufounette", "f*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v146, "foufounes", "f*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v147, "foufoune", "f******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v148, "foufe", "f***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v149, "foirade", "f*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v150, "fister", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v151, "fiotte", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v152, "filsdeputerie", "f***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v153, "fils-de-puterie", "f*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v154, "enflure", "e*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v155, "enculés", "e*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v156, "enculées", "e******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v157, "enculée", "e*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v158, "enculé", "e****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v159, "enculeuse", "e*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v160, "enculeur", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v161, "enculette", "e*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v162, "enculerie", "e*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v163, "enculer", "e*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v164, "enculement", "e********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v165, "encule", "e****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v166, "enculatoire", "e*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v167, "enculailleur", "e**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v168, "enculage", "e******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v169, "enculagailler", "e***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v170, "enculade", "e******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v171, "enculable", "e*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v172, "emmerdé", "e*****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v173, "emmerdeuse", "e********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v174, "emmerdeur", "e*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v175, "emmerdes", "e******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v176, "emmerder", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v177, "emmerde", "e*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v178, "dégueulassement", "d*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v179, "déconnage", "d*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v180, "déconnade", "d*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v181, "débile", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v182, "duschnock", "d*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v183, "dugland", "d*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v184, "ducon", "d***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v185, "doigter", "d*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v186, "derche", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v187, "demi-molle", "d********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v188, "câlice", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v189, "crétins", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v190, "crétines", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v191, "crétine", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v192, "crétin", "c****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v193, "crotté", "c****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v194, "crisse", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v195, "crevure", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v196, "couillu", "c*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v197, "couilles", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v198, "couille", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v199, "cons", "c**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v200, "connes", "c****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v201, "conneries", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v202, "connerie", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v203, "conne", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v204, "connasse", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v205, "connards", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v206, "connarde", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v207, "connard", "c*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v208, "conchier", "c******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v209, "conasse", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v210, "cocu", "c**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v211, "clito", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v212, "claque-merde", "c**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v213, "chnoque", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v214, "chleuhs", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v215, "chleuh", "c****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v216, "chiée", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v217, "chiure", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v218, "chiottes", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v219, "chiotte", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v220, "chintok", "c*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v221, "chinetoque", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v222, "chinetok", "c******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v223, "chinetoc", "c******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v224, "chieur", "c****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v225, "chier", "c***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v226, "chiennasse", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v227, "chibre", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v228, "chiatique", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v229, "chiasser", "c******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v230, "chiasse", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v231, "chiant", "c****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v232, "cherche-merde", "c***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v233, "chaude-pisse", "c**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v234, "chat-bite", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v235, "catins", "c****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v236, "catin", "c***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v237, "casse-couilles", "c************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v238, "casse-couille", "c***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v239, "casse-burette", "c***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v240, "casse-bonbon", "c**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v241, "bâtards", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v242, "bâtarde", "b*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v243, "bâtard", "b****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v244, "bâtard", "b****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v245, "burnes", "b****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v246, "burne", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v247, "brêle", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v248, "broute-minou", "b**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v249, "brise-burnes", "b**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v250, "branlée", "b*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v251, "branlotter", "b********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v252, "branlo", "b****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v253, "branleurs", "b*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v254, "branleur", "b******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v255, "branlette", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v256, "branler", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v257, "branle-couille", "b************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v258, "bounioule", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v259, "bounioul", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v260, "boukaks", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v261, "boukak", "b****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v262, "bougnouliser", "b**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v263, "bougnoulisation", "b*************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v264, "bougnoules", "b********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v265, "bougnoule", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v266, "bougnoul", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v267, "bordel", "b****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v268, "bonnasse", "b******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v269, "bonasse", "b*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v270, "bitembois", "b*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v271, "bite", "b**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v272, "bitch", "b***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v273, "bifler", "b****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v274, "bifle", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v275, "biffler", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v276, "biffle", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v277, "bicots", "b****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v278, "bicot", "b***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v279, "bibite", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v280, "biatch", "b****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v281, "batards", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v282, "batard", "b****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v283, "baiseur", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v284, "baise", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v285, "baisable", "b******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v286, "archifoutre", "a*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v287, "alboches", "a******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v288, "alboche", "a*****e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_fr(void)::sProfanityData_fr, (uint64_t)v4, 0x11DuLL);
    for (uint64_t i = 0; i != -1710; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v288[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_fr(void)::sProfanityData_fr, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_fr(void)::sProfanityData_fr[0], unk_1EA3D8F28, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8F28 - GetProfanityFilter_fr(void)::sProfanityData_fr[0]) >> 4));
}

void sub_1C5EDDF08(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 13632;
  uint64_t v4 = -13680;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_en(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v352[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v4, "wops'", "w***'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v5, "wops", "w*ps");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v6, "wop's", "w**'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v7, "whore", "w**re");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v8, "whops", "w**ps");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v9, "whop", "w**p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v10, "whiteys", "w****ys");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v11, "whitey's", "w*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v12, "wetbacks'", "w*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "wetbacks", "w*****ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v14, "wetback's", "w******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "wetback", "w*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v16, "wanks", "w**ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v17, "wanking", "w***ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v18, "wankers'", "w******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v19, "wankers", "w***ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v20, "wanker's", "w*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "wanker", "w***er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "wanked", "w***ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v23, "wank", "w**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v24, "vags", "v*gs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v25, "vag", "v*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v26, "unfucking", "u*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v27, "unfucked", "u******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "unfuck", "u****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v29, "twats'", "t****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v30, "twats", "t**ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v31, "twat's", "t***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v32, "twat", "t**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v33, "thots'", "t**ts'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v34, "thots", "t**ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v35, "thot's", "t**t's");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v36, "thot", "t**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v37, "suck my dick", "s**********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v38, "spics'", "s****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v39, "spics", "s**cs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v40, "spic's", "s***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v41, "spic", "s**c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v42, "sluts", "s***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v43, "slut", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v44, "shitty", "s****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v45, "shitting", "s****ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v46, "shittiest", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v47, "shittier", "s*****er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v48, "shitters'", "s*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v49, "shitters", "s****ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v50, "shitter's", "s******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v51, "shitter", "s****er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v52, "shitted", "s****ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v53, "shitstorms'", "s*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v54, "shitstorms", "s*******ms");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v55, "shitstorm's", "s********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v56, "shitstorm", "s*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v57, "shits'", "s****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v58, "shits", "s**ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v59, "shitloads'", "s********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v60, "shitloads", "s******ds");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v61, "shitload's", "s*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v62, "shitload", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v63, "shitless", "s*****ss");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v64, "shitholes", "s******es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v65, "shithole", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v66, "shithead", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v67, "shitfuckers'", "s**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v68, "shitfuckers", "s*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v69, "shitfucker's", "s**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v70, "shitfucker", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v71, "shitfaced", "s******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "shitface", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v73, "shit's", "s***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v74, "shit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v75, "shat", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v76, "sambos'", "s*****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v77, "sambos", "s***os");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v78, "sambo's", "s****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v79, "sambo", "s***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v80, "rimjobs'", "r******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "rimjobs", "r****bs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v82, "rimjob's", "r*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v83, "rimjob", "r****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v84, "ragheads'", "r*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v85, "ragheads", "r*****ds");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v86, "raghead's", "r******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "raghead", "r*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v88, "queerfuckers'", "q***********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v89, "queerfuckers", "q**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v90, "queerfucker's", "q***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v91, "queerfucker", "q*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v92, "pussy's", "p****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v93, "pussy", "p***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v94, "pussies'", "p******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v95, "pussies", "p****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v96, "penises", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v97, "penis", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v98, "penes", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v99, "pakis'", "p****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v100, "pakis", "p**is");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v101, "paki's", "p***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v102, "paki", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v103, "niggers'", "n******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v104, "niggers", "n***ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v105, "nigger's", "n*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v106, "nigger", "n***er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v107, "nigga", "n***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v108, "motherfucks'", "m**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v109, "motherfucks", "m********ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v110, "motherfucking", "m*********ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v111, "motherfuckers'", "m************'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v112, "motherfuckers", "m*********ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v113, "motherfucker's", "m***********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v114, "motherfucker", "m*********er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v115, "motherfucked", "m*********ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v116, "motherfuck's", "m*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v117, "motherfuck", "m********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v118, "mother fucker", "m*********er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v119, "mofo", "m**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v120, "mindfucks'", "m********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v121, "mindfucks", "m******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v122, "mindfucking", "m*******ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v123, "mindfuckers'", "m**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v124, "mindfuckers", "m*******ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v125, "mindfucker's", "m*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v126, "mindfucker", "m*******er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v127, "mindfucked", "m*******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v128, "mindfuck's", "m*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v129, "mindfuck", "m******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v130, "lesbos'", "l*****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v131, "lesbos", "l***os");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v132, "lesbo's", "l****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v133, "lesbo", "l***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v134, "krauts", "k***ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v135, "kraut", "k***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v136, "kikes'", "k****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v137, "kikes", "k**es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v138, "kike's", "k***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v139, "kike", "k**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v140, "kaffirs'", "k******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v141, "kaffirs", "k****rs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v142, "kaffir's", "k*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v143, "kaffir", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v144, "jizz", "j**z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v145, "jerkoffs'", "j*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v146, "jerkoffs", "j*****fs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v147, "jerkoff's", "j******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v148, "jerkoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v149, "japs'", "j***'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v150, "japs", "j*ps");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v151, "jap's", "j**'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v152, "jap", "j*p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v153, "injuns'", "i*****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v154, "injuns", "i***ns");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v155, "injun's", "i****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v156, "injun", "i***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v157, "hymies'", "h*****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v158, "hymies", "h***es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v159, "hymie's", "h****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v160, "hymie", "h***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v161, "horseshits", "h*******ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v162, "horseshit's", "h********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v163, "horseshit", "h*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v164, "honky's", "h****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v165, "honkies", "h****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v166, "homos'", "h****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v167, "homos", "h**os");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v168, "homo's", "h***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v169, "handjobs'", "h*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v170, "handjobs", "h*****bs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v171, "handjob's", "h******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v172, "handjob", "h*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v173, "gringos", "g****os");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v174, "gringo", "g****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v175, "gooks'", "g****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v176, "gooks", "g**ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v177, "gook's", "g***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v178, "gook", "g**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v179, "goddamnit", "g*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v180, "goddamned", "g******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v181, "goddamn", "g*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v182, "goddammit", "g*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v183, "goddam", "g****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v184, "gangbangs'", "g********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v185, "gangbangs", "g******gs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v186, "gangbangers'", "g**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v187, "gangbangers", "g*******ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v188, "gangbanger's", "g*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v189, "gangbanger", "g*******er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v190, "gangbang's", "g*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v191, "gangbang", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v192, "fuckwad", "f*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v193, "fucks'", "f****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v194, "fucks", "f**ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v195, "fucking", "f***ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v196, "fuckin", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v197, "fuckfaces'", "f********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v198, "fuckfaces", "f******es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v199, "fuckface's", "f*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v200, "fuckface", "f******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v201, "fuckers", "f***ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v202, "fucker", "f***er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v203, "fucked", "f***ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v204, "fuckable", "f******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v205, "fuck's", "f***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v206, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v207, "fags", "f*gs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v208, "faggots'", "f******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v209, "faggots", "f****ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v210, "faggot's", "f*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v211, "faggot", "f****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v212, "fag", "f*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v213, "dicksuckers", "d*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v214, "dicksucker'", "d*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v215, "dicksucker", "d********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v216, "dickheads", "d*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v217, "dickhead", "d******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v218, "dickfuckers'", "d**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v219, "dickfuckers", "d*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v220, "dickfucker's", "d**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v221, "dickfucker", "d********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v222, "darky's", "d****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v223, "darky", "d***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v224, "darkies'", "d******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v225, "darkies", "d****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v226, "darkie's", "d*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v227, "darkie", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v228, "dagos'", "d****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v229, "dagos", "d**os");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v230, "dagoes", "d***es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v231, "dago's", "d***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v232, "dago", "d**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v233, "cunty", "c***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v234, "cunts'", "c****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v235, "cunts", "c**ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v236, "cunt's", "c***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v237, "cunt", "c**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v238, "cums'", "c***'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v239, "cums", "c*ms");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v240, "cumming", "c***ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v241, "cum's", "c**'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v242, "cum", "c*m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v243, "coons'", "c****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v244, "coons", "c**ns");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v245, "coon's", "c***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v246, "coon", "c**n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v247, "coolies'", "c******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v248, "coolies", "c****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v249, "coolie's", "c*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v250, "coolie", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v251, "cocksuckers'", "c**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v252, "cocksuckers", "c*******ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v253, "cocksucker's", "c*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v254, "cocksucker", "c*******er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v255, "cocks", "c***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v256, "cockfuckers'", "c**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v257, "cockfuckers", "c*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v258, "cockfucker's", "c**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v259, "cockfucker", "c********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v260, "cock suckers'", "c***********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v261, "cock suckers", "c********ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v262, "cock sucker's", "c**********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v263, "cock sucker", "c********er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v264, "cock", "c**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v265, "clusterfucks", "c**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v266, "clusterfuck", "c*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v267, "clits'", "c****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v268, "clits", "c**ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v269, "clit's", "c***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v270, "clit", "c**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v271, "chode", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v272, "choad", "c***d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v273, "chinky", "c****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v274, "chinks'", "c*****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v275, "chinks", "c***ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v276, "chink's", "c****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v277, "chink", "c***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v278, "chinamen", "c*****en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v279, "chinaman", "c******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v280, "chickenshits", "c*********ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v281, "chickenshit", "c*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v282, "buttfucks'", "b********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v283, "buttfucks", "b******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v284, "buttfucking", "b*******ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v285, "buttfuckers'", "b**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v286, "buttfuckers", "b*******ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v287, "buttfucker's", "b*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v288, "buttfucker", "b*******er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v289, "buttfucked", "b*******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v290, "buttfuck's", "b*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v291, "buttfuck", "b******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v292, "bullshitting", "b********ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v293, "bullshitted", "b********ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v294, "bullshits", "b******ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v295, "bullshit", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v296, "brainfucks'", "b*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v297, "brainfucks", "b*******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v298, "brainfucking", "b********ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v299, "brainfuckers'", "b***********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v300, "brainfuckers", "b********ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v301, "brainfucker's", "b**********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v302, "brainfucker", "b********er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v303, "brainfucked", "b********ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v304, "brainfuck's", "b********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v305, "brainfuck", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v306, "blowjobs'", "b*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v307, "blowjobs", "b*****bs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v308, "blowjob's", "b******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v309, "blowjob", "b*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v310, "blow job", "b*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v311, "bitches", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v312, "bitch", "b***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v313, "beefcurtains", "b**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v314, "beef curtains", "b**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v315, "beaners'", "b******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v316, "beaners", "b***ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v317, "beaner's", "b*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v318, "beaner", "b***er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v319, "batshits", "b*****ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v320, "batshit", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v321, "bastards", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v322, "bastard's", "b*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v323, "bastard", "b*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v324, "assholes'", "a*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v325, "assholes", "a*****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v326, "asshole's", "a******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v327, "asshole", "a*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v328, "assfucks'", "a*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v329, "assfucks", "a*****ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v330, "assfucking", "a******ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v331, "assfuckers'", "a*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v332, "assfuckers", "a******ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v333, "assfucker's", "a********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v334, "assfucker", "a******er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v335, "assfucked", "a******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v336, "assfuck's", "a******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v337, "assfuck", "a*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v338, "arseholes'", "a********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v339, "arseholes", "a*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v340, "arsehole's", "a*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v341, "arsehole", "a******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v342, "arsefucks'", "a********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v343, "arsefucks", "a*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v344, "arsefucking", "a*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v345, "arsefuckers'", "a**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v346, "arsefuckers", "a*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v347, "arsefucker's", "a*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v348, "arsefucker", "a********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v349, "arsefucked", "a********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v350, "arsefuck's", "a*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v351, "arsefuck", "a******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v352, "apeshit", "a*****t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en(void)::sProfanityData_en, (uint64_t)v4, 0x15DuLL);
    for (uint64_t i = 0; i != -2094; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v352[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en(void)::sProfanityData_en, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_en(void)::sProfanityData_en[0], unk_1EA3D8F48, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8F48 - GetProfanityFilter_en(void)::sProfanityData_en[0]) >> 4));
}

void sub_1C5EE0DA8(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 16704;
  uint64_t v4 = -16752;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_th(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v131[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v4, "ไอ้ไพร่", "ไ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v5, "ไอ้เห็ดสด", "ไ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v6, "ไอ้เหี้ย", "ไ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v7, "ไอ้เชี่ย", "ไ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v8, "ไอ้เชรี่ย", "ไ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v9, "ไอ้ห่า", "ไ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v10, "ไอ้สัตว์", "ไ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v11, "ไอ้สัด", "ไ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v12, "ไอ้ดอกทอง", "ไ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v13, "ไอ้จู๋", "ไ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v14, "ไอสัศ", "ไ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v15, "โม๊ก", "โ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v16, "โครตแม่ง", "โ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[43],char const(&)[17],0>(v17, "โครตพ่อโครตแม่", "โ*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v18, "โครตพ่อ", "โ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v19, "โคตรแม่", "โ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v20, "โคตรพ่อ", "โ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v21, "โคตร", "โ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v22, "โคดพ่อ", "โ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v23, "แย่เม็ด", "แ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v24, "แม่เมิงตาย", "แ*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v25, "แม่เมิง", "แ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v26, "แม่มึงตาย", "แ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v27, "แม่มรึงสิ", "แ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v28, "แม่มรึงตาย", "แ*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v29, "แม่งตาย", "แ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v30, "แม่ง", "แ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v31, "แตด", "แ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v32, "แดก", "แ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v33, "เหี้ยๆ", "เ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v34, "เหี้ย", "เ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v35, "เหียก", "เ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v36, "เสือก", "เ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v37, "เวรตะไล", "เ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v38, "เย๊ด", "เ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v39, "เย้ด", "เ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v40, "เย็ท", "เ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v41, "เย็ดโด้", "เ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v42, "เย็ดแม่ง", "เ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v43, "เย็ดแม่", "เ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v44, "เย็ดเด็ก", "เ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v45, "เย็ด", "เ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v46, "เชี่ยๆ", "เ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v47, "เชี่ย", "เ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v48, "เชรี่ยๆ", "เ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v49, "เชรี่ย", "เ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v50, "เงี่ยน", "เ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v51, "อีไพร่", "อ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v52, "อีเห็ดสด", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v53, "อีเวร", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v54, "อีเวน", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v55, "อีเลว", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v56, "อีห่าราก", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v57, "อีห่า", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v58, "อีสัส", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v59, "อีสัตว์", "อ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v60, "อีบ้า", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v61, "อีตุ๊ด", "อ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v62, "อีตัว", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v63, "อีดำ", "อ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v64, "อีดอกทอง", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v65, "อีดอก", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v66, "อีกะหรี่", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v67, "อิ่เหี้ย", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v68, "อิ่เชี่ย", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v69, "อิ่เชรี่ย", "อ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v70, "ห่าราก", "ห*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v71, "หีแตด", "ห****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v72, "หีระเบิด", "ห*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v73, "หีบาน", "ห****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v74, "หี", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v75, "หำ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v76, "หัวควย", "ห*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v77, "หอยรุงรัง", "ห********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v78, "หมาสี้แม่ง", "ห*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v79, "หมอย", "ห***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v80, "หน้าเหี้ย", "ห********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v81, "หน้าเหรี้ย", "ห*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v82, "หน้าเม็ด", "ห*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v83, "หน้าเชี่ย", "ห********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v84, "หน้าเชรี่ย", "ห*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v85, "หน้าหี", "ห*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v86, "หน้าหรี", "ห******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[34],char const(&)[14],0>(v87, "หน้าตัวเมีย", "ห**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[46],char const(&)[18],0>(v88, "หน้าควายตัวเมีย", "ห**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v89, "หงี่", "ห***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v90, "ส้นตีน", "ส*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v91, "สาดเอ๊ย", "ส******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v92, "สาดเอ้ย", "ส******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v93, "สาดหมา", "ส*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v94, "สัส", "ส**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v95, "สันดานไพร่", "ส*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v96, "สันดานหมา", "ส********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[50],char const(&)[20],0>(v97, "สมองหมา ปัญญาควาย", "ส****************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v98, "ยัดแม่", "ย*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v99, "ยักสุเน็ต", "ย********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v100, "มึง", "ม**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v101, "ฟักยู", "ฟ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v102, "พ่อเมิงตาย", "พ*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v103, "พ่อเมิง", "พ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v104, "พ่อมึงตาย", "พ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v105, "พ่อมรึงสิ", "พ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v106, "พ่อมรึงตาย", "พ*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v107, "พ่องตาย", "พ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v108, "พ่อง", "พ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v109, "ปี้", "ป**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v110, "ปิ๊", "ป**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v111, "ตัวเหี้ย", "ต*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v112, "ตัวเชี่ย", "ต*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v113, "ตัวเชรี่ย", "ต********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v114, "ดาก", "ด**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v115, "ชิบหาย", "ช*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v116, "ชิงหมาเกิด", "ช*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v117, "ชาติหมา", "ช******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v118, "ชาติชั่ว", "ช*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v119, "จู๋", "จ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v120, "จันไร", "จ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v121, "จัญไร", "จ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v122, "คุณตัว", "ค*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v123, "ควยถอก", "ค*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v124, "ควย", "ค**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v125, "ขี้ตีน", "ข*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v126, "ขี้ดากหมา", "ข********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v127, "กู", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v128, "กวย", "ก**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v129, "กวนส้นตีน", "ก********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v130, "กระเด้า", "ก******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[13],0>(v131, "กรรมของกู", "ก*********");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_th(void)::sProfanityData_th, (uint64_t)v4, 0x80uLL);
    for (uint64_t i = 0; i != -768; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v131[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_th(void)::sProfanityData_th, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_th(void)::sProfanityData_th[0], unk_1EA3D8F68, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8F68 - GetProfanityFilter_th(void)::sProfanityData_th[0]) >> 4));
}

void sub_1C5EE1EF0(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 6096;
  uint64_t v4 = -6144;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_tr(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v137[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v4, "yavşak", "y****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v5, "yarrak", "y****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v6, "yarak", "y***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v7, "siktir", "s****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "siktin", "s****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "siktim", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v10, "siktikleri", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v11, "siktik", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v12, "siktiğiniz", "s********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v13, "siktiğin", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v14, "siktiğimiz", "s********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v15, "siktiğimin", "s********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v16, "siktiğim", "s******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v17, "siktiği", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v18, "sikti", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v19, "siksin", "s****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v20, "sikiyim", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v21, "sikinin", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "sikini", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "sikine", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v24, "sikin", "s***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v25, "sikimin", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v26, "sikimi", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "sikime", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v28, "sikim", "s***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v29, "sikik", "s***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v30, "siki", "s**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v31, "sikeyim", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "sikersin", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "sikerler", "s******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v34, "sikeriz", "s*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v35, "sikerim", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v36, "siker", "s***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v37, "sike", "s**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v38, "sik", "s*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v39, "sıçtığımın", "s********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(v40, "sıçtığım", "s******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v41, "sıçayım", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v42, "sıçarım", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v43, "sürtük", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v44, "sürtüğü", "s*****ü");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v45, "puştu", "p***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v46, "puştsun", "p*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v47, "puştsan", "p*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v48, "puştluk", "p*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v49, "puşta", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v50, "puşt", "p**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v51, "piçsin", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v52, "piçsen", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v53, "piçlik", "p****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v54, "piçler", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v55, "piçi", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v56, "piçe", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v57, "piç", "p*ç");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v58, "pezevenk", "p******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v59, "orospu evladı", "o***********ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v60, "orospu çocuğu", "o***********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v61, "orospu", "o****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v62, "lavuk", "l***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v63, "kaltak", "k****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v64, "kaltağı", "k*****ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v65, "ibne", "i**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v66, "götveren", "g******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v67, "götsen", "g****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v68, "götsem", "g****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v69, "götsün", "g****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v70, "götüne", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[17],0>(v71, "götünden sikeyim", "g**************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v72, "götünüze", "g******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v73, "götünüzü", "g******ü");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v74, "götünüz", "g*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[15],0>(v75, "götünü sikeyim", "g************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[15],0>(v76, "götünü sikerim", "g************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v77, "götünü", "g****ü");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v78, "göt", "g*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v79, "ebeni sikeyim", "e***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v80, "ebeni sikerim", "e***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v81, "dübüründen", "d********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v82, "boku", "b**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v83, "bokta", "b***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v84, "boksun", "b****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v85, "boklardan", "b*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v86, "boklarda", "b******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "boklara", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v88, "boklarından", "b*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v89, "boklarında", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v90, "boklarınızı", "b*********ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v91, "boklarının", "b********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v92, "boklarını", "b*******ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v93, "bokların", "b******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v94, "boklarımızda", "b**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v95, "boklarımıza", "b*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[13],0>(v96, "boklarımızın", "b**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v97, "boklarımızı", "b*********ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v98, "boklarımız", "b********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v99, "bokları", "b*****ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v100, "boklar", "b****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v101, "bok ye", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v102, "bok", "b*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v103, "bacını sikeyim", "b************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v104, "bacını sikerim", "b************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[17],0>(v105, "avradını sikeyim", "a**************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[17],0>(v106, "avradını sikerim", "a**************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v107, "ananı sikeyim", "a***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v108, "ananı sikerim", "a***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[21],0>(v109, "ananı bacını sikeyim", "b******************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[21],0>(v110, "ananı bacını sikerim", "b******************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[23],0>(v111, "ananı avradını sikeyim", "a********************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[23],0>(v112, "ananı avradını sikerim", "a********************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[16],0>(v113, "ananı avradını", "a************ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v114, "amları", "a****ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v115, "amlar", "a***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v116, "amdan", "a***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v117, "amcık", "a***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v118, "amcığından", "a********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v119, "amcığında", "a*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v120, "amcığına", "a******ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v121, "amcığını", "a******ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v122, "amcığın", "a*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v123, "amcığı", "a****ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v124, "amından", "a*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v125, "amında", "a****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v126, "amına koyduğum", "a************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v127, "amına koyayım", "a***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v128, "amına koyarım", "a***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v129, "amına", "a***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v130, "amınıza", "a*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v131, "amınızı", "a*****ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v132, "amınız", "a****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v133, "amını", "a***ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v134, "amın", "a**n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v135, "amı", "a*ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v136, "am", "a*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[15],0>(v137, "ağzına sıçayım", "a************m");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_tr(void)::sProfanityData_tr, (uint64_t)v4, 0x86uLL);
    for (uint64_t i = 0; i != -804; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v137[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_tr(void)::sProfanityData_tr, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_tr(void)::sProfanityData_tr[0], unk_1EA3D8F88, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D8F88 - GetProfanityFilter_tr(void)::sProfanityData_tr[0]) >> 4));
}

void sub_1C5EE3104(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 6384;
  uint64_t v4 = -6432;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[23],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE31A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[19],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE31F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3248(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE329C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[23],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE32F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3344(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3398(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE33EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3440(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[20],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3494(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE34E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE353C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3590(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE35E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3638(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE368C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE36E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3734(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3788(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE37DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3830(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3884(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE38D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE392C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3980(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE39D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3A28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3A7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3AD0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3B24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3B78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5EE3BCC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *GetProfanityFilter_zh_HK(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v151[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[4],0>(v4, "up乜春", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v5, "on9", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v6, "黑鬼", "黑*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v7, "黐鰈筋", "**筋");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v8, "鳩", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v9, "食撚屎", "食**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v10, "食屎", "食*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v11, "顏射", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v12, "頂你個肺", "****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v13, "雜種", "*種");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v14, "閪頭", "*頭");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v15, "閪", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v16, "躝癱", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v17, "賤精", "*精");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v18, "賤種", "*種");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v19, "賤格", "*格");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v20, "賤", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v21, "豬閪", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v22, "豬兜", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v23, "豬乸", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v24, "西頭", "*頭");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v25, "臭閪", "臭*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v26, "臭西", "臭*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v27, "腳交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v28, "肛交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v29, "粉腸", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v30, "粉皮", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v31, "笨柒", "笨*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v32, "碌柒", "碌*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v33, "白鬼", "白*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v34, "痴鳩線", "**線");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v35, "痴撚線", "**線");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v36, "生仔無屎窟", "生仔***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v37, "生仔無屎忽", "生仔***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v38, "生仔冇屎忽", "生仔***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v39, "玩撚完", "玩*完");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v40, "死柒頭", "**頭");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v41, "條條揈", "**揈");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v42, "柒頭", "*頭");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v43, "晏晝屌你屎忽窿", "晏晝*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v44, "晏晝屌你屎忽", "晏晝****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v45, "晏晝叼你屎忽窿", "晏晝*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v46, "晏晝叼你屎忽", "晏晝****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v47, "是撚旦", "是**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v48, "是尻旦", "是**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v49, "春袋", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v50, "收皮啦", "**啦");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v51, "收皮", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v52, "收皮", "收*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v53, "攪嘢", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v54, "攔坦", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v55, "操你媽", "**媽");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v56, "撲街女", "**女");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v57, "撲街仔", "**仔");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v58, "撲街", "*街");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v59, "撲晒街", "**街");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v60, "撚樣", "*樣");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v61, "撚屌", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v62, "撚嘢", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v63, "撚", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v64, "援交妹", "援*妹");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v65, "援交", "援*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v66, "指交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v67, "把撚", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v68, "扯旗", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v69, "打飛機", "打**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v70, "打靶仔", "**仔");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v71, "打潛艇", "打**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v72, "打柒佢", "**佢");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v73, "打手槍", "打**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v74, "扑嘢", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v75, "戇鳩鳩", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v76, "戇鳩", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v77, "戇膠", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v78, "戇撚鳩", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v79, "戇居", "戇*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v80, "廢柴", "*柴");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v81, "幹你娘", "**娘");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v82, "屎忽鬼", "**鬼");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v83, "屌那星", "**星");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v84, "屌那媽", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v85, "屌柒", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v86, "屌搵你", "**你");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v87, "屌屌揈", "**揈");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v88, "屌尻你", "**你");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v89, "屌尻", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v90, "屌佢", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v91, "屌你老母閪", "*你***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v92, "屌你老母臭閪", "*你****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v93, "屌你老母", "*你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v94, "屌你老味閪", "*你***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v95, "屌你老味", "*你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v96, "屌你老味", "*你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v97, "屌你", "*你");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v98, "屌", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v99, "屄", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v100, "尻", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v101, "射精", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v102, "孤鳩寒", "孤*寒");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v103, "妖", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v104, "好on9", "好**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v105, "好撚柒", "好**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v106, "好撚 oN9", "好****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v107, "好撚", "好*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v108, "大鳩鑊", "大**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v109, "大波", "大*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v110, "大撚鑊", "大*鑊");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v111, "多鳩餘", "多*餘");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v112, "含撚", "含*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v113, "叼那媽", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v114, "叼柒", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v115, "叼搵你", "**你");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v116, "叼尻", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v117, "叼叼揈", "**揈");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v118, "叼你老母", "*你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v119, "叼你", "*你");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v120, "叼", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v121, "叫鴨", "叫*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v122, "叫雞", "叫*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v123, "口爆", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v124, "口交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v125, "冚家鏟", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v126, "冚家拎", "**拎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v127, "冚家富貴", "冚家**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v128, "冚家剷", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v129, "冚家剷", "**剷");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v130, "八婆", "*婆");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v131, "八公", "*公");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v132, "做咩撚", "做咩*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v133, "做乜撚嘢", "做乜**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v134, "做乜撚", "做乜*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v135, "你鹵味", "你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v136, "你老尾", "你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v137, "你老味", "你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v138, "你好on9", "你好**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v139, "他媽的", "他*的");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v140, "今朝拮你籮柚", "今朝****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v141, "仆街女", "**女");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v142, "仆街仔", "**仔");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v143, "仆街", "*街");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v144, "仆晒街", "**街");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v145, "仆你個街", "**個*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v146, "仆你個臭街", "**個**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v147, "乸型", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v148, "乳交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v149, "乜鳩", "乜*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v150, "一樓一", "一*一");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v151, "SM", "**");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_zh_HK(void)::sProfanityData_zh_HK, (uint64_t)v4, 0x94uLL);
    for (uint64_t i = 0; i != -888; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v151[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_zh_HK(void)::sProfanityData_zh_HK, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_zh_HK(void)::sProfanityData_zh_HK[0], unk_1EA3D9028, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D9028 - GetProfanityFilter_zh_HK(void)::sProfanityData_zh_HK[0]) >> 4));
}

void sub_1C5EE4F74(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 7056;
  uint64_t v4 = -7104;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_ar_AE(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  v1808[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v4, "\u200Fينتاك", "ي***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v5, "\u200Fوللكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v6, "\u200Fوللكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v7, "\u200Fوللكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v8, "\u200Fوللشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v9, "\u200Fوللشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v10, "\u200Fوللزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v11, "\u200Fوللزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v12, "\u200Fوللزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v13, "\u200Fوللخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v14, "\u200Fوللخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v15, "\u200Fولكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v16, "\u200Fولكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v17, "\u200Fولكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v18, "\u200Fولكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v19, "\u200Fولكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v20, "\u200Fولكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v21, "\u200Fولكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v22, "\u200Fولكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v23, "\u200Fولكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v24, "\u200Fولكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v25, "\u200Fولكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v26, "\u200Fولكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v27, "\u200Fولكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v28, "\u200Fولكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v29, "\u200Fولكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v30, "\u200Fولكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v31, "\u200Fولكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v32, "\u200Fولكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v33, "\u200Fولكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v34, "\u200Fولكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v35, "\u200Fولكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v36, "\u200Fولكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v37, "\u200Fولكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v38, "\u200Fولكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v39, "\u200Fولكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v40, "\u200Fولكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v41, "\u200Fولكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v42, "\u200Fولكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v43, "\u200Fولكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v44, "\u200Fولكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v45, "\u200Fولشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v46, "\u200Fولشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v47, "\u200Fولشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v48, "\u200Fولشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v49, "\u200Fولشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v50, "\u200Fولشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v51, "\u200Fولشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v52, "\u200Fولشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v53, "\u200Fولشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v54, "\u200Fولشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v55, "\u200Fولشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v56, "\u200Fولشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v57, "\u200Fولشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v58, "\u200Fولشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v59, "\u200Fولشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v60, "\u200Fولشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v61, "\u200Fولشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v62, "\u200Fولشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v63, "\u200Fولشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v64, "\u200Fولشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v65, "\u200Fولزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v66, "\u200Fولزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v67, "\u200Fولزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v68, "\u200Fولزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v69, "\u200Fولزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v70, "\u200Fولزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v71, "\u200Fولزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v72, "\u200Fولزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v73, "\u200Fولزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v74, "\u200Fولزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v75, "\u200Fولزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v76, "\u200Fولزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v77, "\u200Fولزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v78, "\u200Fولزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v79, "\u200Fولزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v80, "\u200Fولزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v81, "\u200Fولزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v82, "\u200Fولزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v83, "\u200Fولزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v84, "\u200Fولزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v85, "\u200Fولزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v86, "\u200Fولزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v87, "\u200Fولزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v88, "\u200Fولزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v89, "\u200Fولزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v90, "\u200Fولزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v91, "\u200Fولزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v92, "\u200Fولزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v93, "\u200Fولزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v94, "\u200Fولزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v95, "\u200Fولخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v96, "\u200Fولخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v97, "\u200Fولخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v98, "\u200Fولخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v99, "\u200Fولخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v100, "\u200Fولخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v101, "\u200Fولخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v102, "\u200Fولخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v103, "\u200Fولخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v104, "\u200Fولخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v105, "\u200Fولخرتي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v106, "\u200Fولخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v107, "\u200Fولخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v108, "\u200Fولخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v109, "\u200Fولخرته", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v110, "\u200Fولخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v111, "\u200Fولخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v112, "\u200Fولخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v113, "\u200Fولخرتك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v114, "\u200Fولخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v115, "\u200Fوككسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v116, "\u200Fوككسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v117, "\u200Fوككسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v118, "\u200Fوككسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v119, "\u200Fوككسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v120, "\u200Fوككسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v121, "\u200Fوككسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v122, "\u200Fوككسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v123, "\u200Fوككسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v124, "\u200Fوككسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v125, "\u200Fوككسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v126, "\u200Fوككسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v127, "\u200Fوككسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v128, "\u200Fوككسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v129, "\u200Fوككسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v130, "\u200Fوككسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v131, "\u200Fوككسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v132, "\u200Fوككسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v133, "\u200Fوككسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v134, "\u200Fوككساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v135, "\u200Fوككساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v136, "\u200Fوككساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v137, "\u200Fوككساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v138, "\u200Fوككساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v139, "\u200Fوككساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v140, "\u200Fوككساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v141, "\u200Fوككساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v142, "\u200Fوككساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v143, "\u200Fوككساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v144, "\u200Fوككس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v145, "\u200Fوكشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v146, "\u200Fوكشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v147, "\u200Fوكشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v148, "\u200Fوكشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v149, "\u200Fوكشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v150, "\u200Fوكشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v151, "\u200Fوكشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v152, "\u200Fوكشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v153, "\u200Fوكشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v154, "\u200Fوكشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v155, "\u200Fوكشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v156, "\u200Fوكشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v157, "\u200Fوكشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v158, "\u200Fوكشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v159, "\u200Fوكشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v160, "\u200Fوكشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v161, "\u200Fوكشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v162, "\u200Fوكشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v163, "\u200Fوكشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v164, "\u200Fوكشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v165, "\u200Fوكسي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v166, "\u200Fوكسهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v167, "\u200Fوكسهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v168, "\u200Fوكسها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v169, "\u200Fوكسه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v170, "\u200Fوكسنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v171, "\u200Fوكسكوسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v172, "\u200Fوكسكوسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v173, "\u200Fوكسكوسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v174, "\u200Fوكسكوسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v175, "\u200Fوكسكوسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v176, "\u200Fوكسكوسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v177, "\u200Fوكسكوسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v178, "\u200Fوكسكوسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v179, "\u200Fوكسكوسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v180, "\u200Fوكسكوس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v181, "\u200Fوكسكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v182, "\u200Fوكسكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v183, "\u200Fوكسك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v184, "\u200Fوكساسي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v185, "\u200Fوكساسهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v186, "\u200Fوكساسهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v187, "\u200Fوكساسها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v188, "\u200Fوكساسه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v189, "\u200Fوكساسنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v190, "\u200Fوكساسكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v191, "\u200Fوكساسكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v192, "\u200Fوكساسك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v193, "\u200Fوكساس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v194, "\u200Fوكس", "و*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v195, "\u200Fوكزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v196, "\u200Fوكزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v197, "\u200Fوكزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v198, "\u200Fوكزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v199, "\u200Fوكزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v200, "\u200Fوكزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v201, "\u200Fوكزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v202, "\u200Fوكزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v203, "\u200Fوكزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v204, "\u200Fوكزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v205, "\u200Fوكزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v206, "\u200Fوكزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v207, "\u200Fوكزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v208, "\u200Fوكزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v209, "\u200Fوكزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v210, "\u200Fوكزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v211, "\u200Fوكزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v212, "\u200Fوكزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v213, "\u200Fوكزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v214, "\u200Fوكزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v215, "\u200Fوكزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v216, "\u200Fوكزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v217, "\u200Fوكزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v218, "\u200Fوكزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v219, "\u200Fوكزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v220, "\u200Fوكزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v221, "\u200Fوكزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v222, "\u200Fوكزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v223, "\u200Fوكزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v224, "\u200Fوكزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v225, "\u200Fوكخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v226, "\u200Fوكخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v227, "\u200Fوكخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v228, "\u200Fوكخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v229, "\u200Fوكخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v230, "\u200Fوكخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v231, "\u200Fوكخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v232, "\u200Fوكخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v233, "\u200Fوكخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v234, "\u200Fوكخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v235, "\u200Fوكخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v236, "\u200Fوكخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v237, "\u200Fوكخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v238, "\u200Fوكخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v239, "\u200Fوكخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v240, "\u200Fوكخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v241, "\u200Fوكخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v242, "\u200Fوكالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v243, "\u200Fوكالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v244, "\u200Fوكالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v245, "\u200Fوكالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v246, "\u200Fوكالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v247, "\u200Fوكالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v248, "\u200Fوكالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v249, "\u200Fوكالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v250, "\u200Fوكالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v251, "\u200Fوكالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v252, "\u200Fوشرموطتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v253, "\u200Fوشرموطتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v254, "\u200Fوشرموطتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v255, "\u200Fوشرموطتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v256, "\u200Fوشرموطته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v257, "\u200Fوشرموطتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v258, "\u200Fوشرموطتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v259, "\u200Fوشرموطتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v260, "\u200Fوشرموطتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v261, "\u200Fوشرموطة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v262, "\u200Fوشرموطاتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v263, "\u200Fوشرموطاتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v264, "\u200Fوشرموطاتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v265, "\u200Fوشرموطاتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v266, "\u200Fوشرموطاته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v267, "\u200Fوشرموطاتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v268, "\u200Fوشرموطاتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v269, "\u200Fوشرموطاتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v270, "\u200Fوشرموطاتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v271, "\u200Fوشرموطات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v272, "\u200Fوزوبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v273, "\u200Fوزوبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v274, "\u200Fوزوبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v275, "\u200Fوزوبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v276, "\u200Fوزوبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v277, "\u200Fوزوبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v278, "\u200Fوزوبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v279, "\u200Fوزوبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v280, "\u200Fوزوبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v281, "\u200Fوزوب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v282, "\u200Fوزبي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v283, "\u200Fوزبهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v284, "\u200Fوزبهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v285, "\u200Fوزبها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v286, "\u200Fوزبه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v287, "\u200Fوزبنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v288, "\u200Fوزبكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v289, "\u200Fوزبكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v290, "\u200Fوزبك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v291, "\u200Fوزبابي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v292, "\u200Fوزبابهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v293, "\u200Fوزبابهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v294, "\u200Fوزبابها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v295, "\u200Fوزبابه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v296, "\u200Fوزبابنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v297, "\u200Fوزبابكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v298, "\u200Fوزبابكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v299, "\u200Fوزبابك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v300, "\u200Fوزباب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v301, "\u200Fوزب", "و*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v302, "\u200Fوخرواتي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v303, "\u200Fوخرواتهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v304, "\u200Fوخرواتهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v305, "\u200Fوخرواتها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v306, "\u200Fوخرواته", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v307, "\u200Fوخرواتنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v308, "\u200Fوخرواتكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v309, "\u200Fوخرواتكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v310, "\u200Fوخرواتك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v311, "\u200Fوخروات", "و****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v312, "\u200Fوخرتي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v313, "\u200Fوخرته", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v314, "\u200Fوخرتك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v315, "\u200Fوخرة", "و**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v316, "\u200Fوبكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v317, "\u200Fوبكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v318, "\u200Fوبكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v319, "\u200Fوبكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v320, "\u200Fوبكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v321, "\u200Fوبكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v322, "\u200Fوبكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v323, "\u200Fوبكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v324, "\u200Fوبكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v325, "\u200Fوبكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v326, "\u200Fوبكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v327, "\u200Fوبكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v328, "\u200Fوبكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v329, "\u200Fوبكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v330, "\u200Fوبكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v331, "\u200Fوبكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v332, "\u200Fوبكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v333, "\u200Fوبكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v334, "\u200Fوبكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v335, "\u200Fوبكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v336, "\u200Fوبكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v337, "\u200Fوبكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v338, "\u200Fوبكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v339, "\u200Fوبكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v340, "\u200Fوبكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v341, "\u200Fوبكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v342, "\u200Fوبكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v343, "\u200Fوبكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v344, "\u200Fوبكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v345, "\u200Fوبكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v346, "\u200Fوبشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v347, "\u200Fوبشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v348, "\u200Fوبشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v349, "\u200Fوبشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v350, "\u200Fوبشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v351, "\u200Fوبشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v352, "\u200Fوبشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v353, "\u200Fوبشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v354, "\u200Fوبشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v355, "\u200Fوبشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v356, "\u200Fوبشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v357, "\u200Fوبشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v358, "\u200Fوبشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v359, "\u200Fوبشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v360, "\u200Fوبشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v361, "\u200Fوبشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v362, "\u200Fوبشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v363, "\u200Fوبشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v364, "\u200Fوبشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v365, "\u200Fوبشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v366, "\u200Fوبزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v367, "\u200Fوبزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v368, "\u200Fوبزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v369, "\u200Fوبزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v370, "\u200Fوبزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v371, "\u200Fوبزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v372, "\u200Fوبزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v373, "\u200Fوبزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v374, "\u200Fوبزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v375, "\u200Fوبزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v376, "\u200Fوبزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v377, "\u200Fوبزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v378, "\u200Fوبزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v379, "\u200Fوبزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v380, "\u200Fوبزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v381, "\u200Fوبزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v382, "\u200Fوبزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v383, "\u200Fوبزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v384, "\u200Fوبزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v385, "\u200Fوبزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v386, "\u200Fوبزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v387, "\u200Fوبزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v388, "\u200Fوبزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v389, "\u200Fوبزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v390, "\u200Fوبزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v391, "\u200Fوبزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v392, "\u200Fوبزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v393, "\u200Fوبزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v394, "\u200Fوبزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v395, "\u200Fوبزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v396, "\u200Fوبخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v397, "\u200Fوبخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v398, "\u200Fوبخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v399, "\u200Fوبخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v400, "\u200Fوبخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v401, "\u200Fوبخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v402, "\u200Fوبخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v403, "\u200Fوبخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v404, "\u200Fوبخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v405, "\u200Fوبخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v406, "\u200Fوبخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v407, "\u200Fوبخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v408, "\u200Fوبالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v409, "\u200Fوبالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v410, "\u200Fوبالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v411, "\u200Fوبالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v412, "\u200Fوبالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v413, "\u200Fوبالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v414, "\u200Fوبالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v415, "\u200Fوبالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v416, "\u200Fوبالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v417, "\u200Fوبالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v418, "\u200Fوالكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v419, "\u200Fوالكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v420, "\u200Fوالكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v421, "\u200Fوالشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v422, "\u200Fوالشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v423, "\u200Fوالزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v424, "\u200Fوالزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v425, "\u200Fوالزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v426, "\u200Fوالخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v427, "\u200Fوالخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v428, "\u200Fنيكيني", "ن****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v429, "\u200Fنيكني", "ن***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v430, "\u200Fنيك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v431, "\u200Fنياكة", "ن***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v432, "\u200Fللكسكوس", "ل*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v433, "\u200Fللكساس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v434, "\u200Fللكس", "ل**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v435, "\u200Fللشرموطة", "ل******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v436, "\u200Fللشرموطات", "ل*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v437, "\u200Fللزوب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v438, "\u200Fللزباب", "ل****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v439, "\u200Fللزب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v440, "\u200Fللخروات", "ل*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v441, "\u200Fللخرة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v442, "\u200Fلكسي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v443, "\u200Fلكسهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v444, "\u200Fلكسهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v445, "\u200Fلكسها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v446, "\u200Fلكسه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v447, "\u200Fلكسنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v448, "\u200Fلكسكوسي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v449, "\u200Fلكسكوسهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v450, "\u200Fلكسكوسهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v451, "\u200Fلكسكوسها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v452, "\u200Fلكسكوسه", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v453, "\u200Fلكسكوسنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v454, "\u200Fلكسكوسكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v455, "\u200Fلكسكوسكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v456, "\u200Fلكسكوسك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v457, "\u200Fلكسكوس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v458, "\u200Fلكسكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v459, "\u200Fلكسكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v460, "\u200Fلكسك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v461, "\u200Fلكساسي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v462, "\u200Fلكساسهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v463, "\u200Fلكساسهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v464, "\u200Fلكساسها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v465, "\u200Fلكساسه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v466, "\u200Fلكساسنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v467, "\u200Fلكساسكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v468, "\u200Fلكساسكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v469, "\u200Fلكساسك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v470, "\u200Fلكساس", "ل***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v471, "\u200Fلكس", "ل*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v472, "\u200Fلشرموطتي", "ل******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v473, "\u200Fلشرموطتهن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v474, "\u200Fلشرموطتهم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v475, "\u200Fلشرموطتها", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v476, "\u200Fلشرموطته", "ل******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v477, "\u200Fلشرموطتنا", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v478, "\u200Fلشرموطتكن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v479, "\u200Fلشرموطتكم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v480, "\u200Fلشرموطتك", "ل******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v481, "\u200Fلشرموطة", "ل*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v482, "\u200Fلشرموطاتي", "ل*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v483, "\u200Fلشرموطاتهن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v484, "\u200Fلشرموطاتهم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v485, "\u200Fلشرموطاتها", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v486, "\u200Fلشرموطاته", "ل*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v487, "\u200Fلشرموطاتنا", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v488, "\u200Fلشرموطاتكن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v489, "\u200Fلشرموطاتكم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v490, "\u200Fلشرموطاتك", "ل*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v491, "\u200Fلشرموطات", "ل******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v492, "\u200Fلزوبي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v493, "\u200Fلزوبهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v494, "\u200Fلزوبهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v495, "\u200Fلزوبها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v496, "\u200Fلزوبه", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v497, "\u200Fلزوبنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v498, "\u200Fلزوبكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v499, "\u200Fلزوبكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v500, "\u200Fلزوبك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v501, "\u200Fلزوب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v502, "\u200Fلزبي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v503, "\u200Fلزبهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v504, "\u200Fلزبهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v505, "\u200Fلزبها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v506, "\u200Fلزبه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v507, "\u200Fلزبنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v508, "\u200Fلزبكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v509, "\u200Fلزبكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v510, "\u200Fلزبك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v511, "\u200Fلزبابي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v512, "\u200Fلزبابهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v513, "\u200Fلزبابهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v514, "\u200Fلزبابها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v515, "\u200Fلزبابه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v516, "\u200Fلزبابنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v517, "\u200Fلزبابكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v518, "\u200Fلزبابكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v519, "\u200Fلزبابك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v520, "\u200Fلزباب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v521, "\u200Fلزب", "ل*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v522, "\u200Fلخرواتي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v523, "\u200Fلخرواتهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v524, "\u200Fلخرواتهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v525, "\u200Fلخرواتها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v526, "\u200Fلخرواته", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v527, "\u200Fلخرواتنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v528, "\u200Fلخرواتكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v529, "\u200Fلخرواتكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v530, "\u200Fلخرواتك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v531, "\u200Fلخروات", "ل****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v532, "\u200Fلخرتي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v533, "\u200Fلخرتهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v534, "\u200Fلخرتهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v535, "\u200Fلخرتها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v536, "\u200Fلخرته", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v537, "\u200Fلخرتنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v538, "\u200Fلخرتكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v539, "\u200Fلخرتكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v540, "\u200Fلخرتك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v541, "\u200Fلخرة", "ل**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v542, "\u200Fككسي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v543, "\u200Fككسهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v544, "\u200Fككسهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v545, "\u200Fككسها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v546, "\u200Fككسه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v547, "\u200Fككسنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v548, "\u200Fككسكوسي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v549, "\u200Fككسكوسهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v550, "\u200Fككسكوسهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v551, "\u200Fككسكوسها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v552, "\u200Fككسكوسه", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v553, "\u200Fككسكوسنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v554, "\u200Fككسكوسكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v555, "\u200Fككسكوسكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v556, "\u200Fككسكوسك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v557, "\u200Fككسكوس", "ك****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v558, "\u200Fككسكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v559, "\u200Fككسكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v560, "\u200Fككسك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v561, "\u200Fككساسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v562, "\u200Fككساسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v563, "\u200Fككساسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v564, "\u200Fككساسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v565, "\u200Fككساسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v566, "\u200Fككساسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v567, "\u200Fككساسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v568, "\u200Fككساسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v569, "\u200Fككساسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v570, "\u200Fككساس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v571, "\u200Fككس", "ك*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v572, "\u200Fكشرموطتي", "ك******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v573, "\u200Fكشرموطتهن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v574, "\u200Fكشرموطتهم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v575, "\u200Fكشرموطتها", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v576, "\u200Fكشرموطته", "ك******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v577, "\u200Fكشرموطتنا", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v578, "\u200Fكشرموطتكن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v579, "\u200Fكشرموطتكم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v580, "\u200Fكشرموطتك", "ك******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v581, "\u200Fكشرموطة", "ك*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v582, "\u200Fكشرموطاتي", "ك*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v583, "\u200Fكشرموطاتهن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v584, "\u200Fكشرموطاتهم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v585, "\u200Fكشرموطاتها", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v586, "\u200Fكشرموطاته", "ك*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v587, "\u200Fكشرموطاتنا", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v588, "\u200Fكشرموطاتكن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v589, "\u200Fكشرموطاتكم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v590, "\u200Fكشرموطاتك", "ك*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v591, "\u200Fكشرموطات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v592, "\u200Fكسي", "ك*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v593, "\u200Fكسهن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v594, "\u200Fكسهم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v595, "\u200Fكسها", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v596, "\u200Fكسه", "ك*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v597, "\u200Fكسنا", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v598, "\u200Fكسكوسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v599, "\u200Fكسكوسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v600, "\u200Fكسكوسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v601, "\u200Fكسكوسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v602, "\u200Fكسكوسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v603, "\u200Fكسكوسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v604, "\u200Fكسكوسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v605, "\u200Fكسكوسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v606, "\u200Fكسكوسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v607, "\u200Fكسكوس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v608, "\u200Fكسكن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v609, "\u200Fكسكم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v610, "\u200Fكسك", "ك*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v611, "\u200Fكساسي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v612, "\u200Fكساسهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v613, "\u200Fكساسهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v614, "\u200Fكساسها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v615, "\u200Fكساسه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v616, "\u200Fكساسنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v617, "\u200Fكساسكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v618, "\u200Fكساسكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v619, "\u200Fكساسك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v620, "\u200Fكساس", "ك**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v621, "\u200Fكس", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v622, "\u200Fكزوبي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v623, "\u200Fكزوبهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v624, "\u200Fكزوبهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v625, "\u200Fكزوبها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v626, "\u200Fكزوبه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v627, "\u200Fكزوبنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v628, "\u200Fكزوبكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v629, "\u200Fكزوبكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v630, "\u200Fكزوبك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v631, "\u200Fكزوب", "ك**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v632, "\u200Fكزبي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v633, "\u200Fكزبهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v634, "\u200Fكزبهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v635, "\u200Fكزبها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v636, "\u200Fكزبه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v637, "\u200Fكزبنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v638, "\u200Fكزبكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v639, "\u200Fكزبكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v640, "\u200Fكزبك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v641, "\u200Fكزبابي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v642, "\u200Fكزبابهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v643, "\u200Fكزبابهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v644, "\u200Fكزبابها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v645, "\u200Fكزبابه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v646, "\u200Fكزبابنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v647, "\u200Fكزبابكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v648, "\u200Fكزبابكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v649, "\u200Fكزبابك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v650, "\u200Fكزباب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v651, "\u200Fكزب", "ك*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v652, "\u200Fكخرواتي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v653, "\u200Fكخرواتهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v654, "\u200Fكخرواتهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v655, "\u200Fكخرواتها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v656, "\u200Fكخرواته", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v657, "\u200Fكخرواتنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v658, "\u200Fكخرواتكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v659, "\u200Fكخرواتكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v660, "\u200Fكخرواتك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v661, "\u200Fكخروات", "ك****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v662, "\u200Fكخرتي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v663, "\u200Fكخرتهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v664, "\u200Fكخرتهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v665, "\u200Fكخرتها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v666, "\u200Fكخرته", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v667, "\u200Fكخرتنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v668, "\u200Fكخرتكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v669, "\u200Fكخرتكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v670, "\u200Fكخرتك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v671, "\u200Fكخرة", "ك**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v672, "\u200Fكالكسكوس", "ك******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v673, "\u200Fكالكساس", "ك*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v674, "\u200Fكالكس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v675, "\u200Fكالشرموطة", "ك*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v676, "\u200Fكالشرموطات", "ك********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v677, "\u200Fكالزوب", "ك****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v678, "\u200Fكالزباب", "ك*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v679, "\u200Fكالزب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v680, "\u200Fكالخروات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v681, "\u200Fكالخرة", "ك****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v682, "\u200Fقحبه", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v683, "\u200Fقحبة", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v684, "\u200Fقحبات", "ق***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v685, "\u200Fعرصه", "ع**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v686, "\u200Fعرصة", "ع**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v687, "\u200Fعرصات", "ع***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v688, "\u200Fعرص", "ع*ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v689, "\u200Fشلكه", "ش**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v690, "\u200Fشلكة", "ش**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v691, "\u200Fشلكات", "ش***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v692, "\u200Fشرموطه", "ش****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v693, "\u200Fشرموطتي", "ش*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v694, "\u200Fشرموطتهن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v695, "\u200Fشرموطتهم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v696, "\u200Fشرموطتها", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v697, "\u200Fشرموطته", "ش*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v698, "\u200Fشرموطتنا", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v699, "\u200Fشرموطتكن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v700, "\u200Fشرموطتكم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v701, "\u200Fشرموطتك", "ش*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v702, "\u200Fشرموطة", "ش****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v703, "\u200Fشرموطاتي", "ش******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v704, "\u200Fشرموطاتهن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v705, "\u200Fشرموطاتهم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v706, "\u200Fشرموطاتها", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v707, "\u200Fشرموطاته", "ش******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v708, "\u200Fشرموطاتنا", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v709, "\u200Fشرموطاتكن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v710, "\u200Fشرموطاتكم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v711, "\u200Fشرموطاتك", "ش******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v712, "\u200Fشرموطات", "ش*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v713, "\u200Fشرموط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v714, "\u200Fشرجي", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v715, "\u200Fشراميط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v716, "\u200Fشخيتي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v717, "\u200Fشخيت", "ش**ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v718, "\u200Fشخي", "ش*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v719, "\u200Fشخاخي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v720, "\u200Fشخاختي", "ش****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v721, "\u200Fشخاخ", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v722, "\u200Fشخ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v723, "\u200Fزوبي", "ز**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v724, "\u200Fزوبهن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v725, "\u200Fزوبهم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v726, "\u200Fزوبها", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v727, "\u200Fزوبه", "ز**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v728, "\u200Fزوبنا", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v729, "\u200Fزوبكن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v730, "\u200Fزوبكم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v731, "\u200Fزوبك", "ز**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v732, "\u200Fزوب", "ز*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v733, "\u200Fزبي", "ز*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v734, "\u200Fزبهن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v735, "\u200Fزبهم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v736, "\u200Fزبها", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v737, "\u200Fزبه", "ز*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v738, "\u200Fزبنا", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v739, "\u200Fزبكن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v740, "\u200Fزبكم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v741, "\u200Fزبك", "ز*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v742, "\u200Fزبابي", "ز***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v743, "\u200Fزبابهن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v744, "\u200Fزبابهم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v745, "\u200Fزبابها", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v746, "\u200Fزبابه", "ز***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v747, "\u200Fزبابنا", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v748, "\u200Fزبابكن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v749, "\u200Fزبابكم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v750, "\u200Fزبابك", "ز***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v751, "\u200Fزباب", "ز**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v752, "\u200Fزب", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v753, "\u200Fخرواتي", "خ****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v754, "\u200Fخرواتهن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v755, "\u200Fخرواتهم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v756, "\u200Fخرواتها", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v757, "\u200Fخرواته", "خ****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v758, "\u200Fخرواتنا", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v759, "\u200Fخرواتكن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v760, "\u200Fخرواتكم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v761, "\u200Fخرواتك", "خ****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v762, "\u200Fخروات", "خ***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v763, "\u200Fخرتهن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v764, "\u200Fخرتهم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v765, "\u200Fخرتها", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v766, "\u200Fخرتنا", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v767, "\u200Fخرتكن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v768, "\u200Fخرتكم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v769, "\u200Fخرة", "خ*ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v770, "\u200Fتنييك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v771, "\u200Fتنتاك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v772, "\u200Fبورنو", "ب***و");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v773, "\u200Fبكسي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v774, "\u200Fبكسهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v775, "\u200Fبكسهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v776, "\u200Fبكسها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v777, "\u200Fبكسه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v778, "\u200Fبكسنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v779, "\u200Fبكسكوسي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v780, "\u200Fبكسكوسهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v781, "\u200Fبكسكوسهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v782, "\u200Fبكسكوسها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v783, "\u200Fبكسكوسه", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v784, "\u200Fبكسكوسنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v785, "\u200Fبكسكوسكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v786, "\u200Fبكسكوسكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v787, "\u200Fبكسكوسك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v788, "\u200Fبكسكوس", "ب****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v789, "\u200Fبكسكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v790, "\u200Fبكسكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v791, "\u200Fبكسك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v792, "\u200Fبكساسي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v793, "\u200Fبكساسهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v794, "\u200Fبكساسهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v795, "\u200Fبكساسها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v796, "\u200Fبكساسه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v797, "\u200Fبكساسنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v798, "\u200Fبكساسكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v799, "\u200Fبكساسكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v800, "\u200Fبكساسك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v801, "\u200Fبكساس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v802, "\u200Fبكس", "ب*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v803, "\u200Fبشرموطتي", "ب******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v804, "\u200Fبشرموطتهن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v805, "\u200Fبشرموطتهم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v806, "\u200Fبشرموطتها", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v807, "\u200Fبشرموطته", "ب******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v808, "\u200Fبشرموطتنا", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v809, "\u200Fبشرموطتكن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v810, "\u200Fبشرموطتكم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v811, "\u200Fبشرموطتك", "ب******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v812, "\u200Fبشرموطة", "ب*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v813, "\u200Fبشرموطاتي", "ب*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v814, "\u200Fبشرموطاتهن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v815, "\u200Fبشرموطاتهم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v816, "\u200Fبشرموطاتها", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v817, "\u200Fبشرموطاته", "ب*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v818, "\u200Fبشرموطاتنا", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v819, "\u200Fبشرموطاتكن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v820, "\u200Fبشرموطاتكم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v821, "\u200Fبشرموطاتك", "ب*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v822, "\u200Fبشرموطات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v823, "\u200Fبزوبي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v824, "\u200Fبزوبهن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v825, "\u200Fبزوبهم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v826, "\u200Fبزوبها", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v827, "\u200Fبزوبه", "ب***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v828, "\u200Fبزوبنا", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v829, "\u200Fبزوبكن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v830, "\u200Fبزوبكم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v831, "\u200Fبزوبك", "ب***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v832, "\u200Fبزوب", "ب**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v833, "\u200Fبزبي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v834, "\u200Fبزبهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v835, "\u200Fبزبهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v836, "\u200Fبزبها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v837, "\u200Fبزبه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v838, "\u200Fبزبنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v839, "\u200Fبزبكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v840, "\u200Fبزبكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v841, "\u200Fبزبك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v842, "\u200Fبزبابي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v843, "\u200Fبزبابهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v844, "\u200Fبزبابهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v845, "\u200Fبزبابها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v846, "\u200Fبزبابه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v847, "\u200Fبزبابنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v848, "\u200Fبزبابكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v849, "\u200Fبزبابكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v850, "\u200Fبزبابك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v851, "\u200Fبزباب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v852, "\u200Fبزب", "ب*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v853, "\u200Fبزاز", "ب**ز");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v854, "\u200Fبز", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v855, "\u200Fبخرواتي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v856, "\u200Fبخرواتهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v857, "\u200Fبخرواتهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v858, "\u200Fبخرواتها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v859, "\u200Fبخرواته", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v860, "\u200Fبخرواتنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v861, "\u200Fبخرواتكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v862, "\u200Fبخرواتكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v863, "\u200Fبخرواتك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v864, "\u200Fبخروات", "ب****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v865, "\u200Fبخرتي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v866, "\u200Fبخرة", "ب**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v867, "\u200Fبالكسكوس", "ب******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v868, "\u200Fبالكساس", "ب*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v869, "\u200Fبالكس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v870, "\u200Fبالشرموطة", "ب*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v871, "\u200Fبالشرموطات", "ب********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v872, "\u200Fبالزوب", "ب****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v873, "\u200Fبالزباب", "ب*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v874, "\u200Fبالزب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v875, "\u200Fبالخروات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v876, "\u200Fبالخرة", "ب****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v877, "\u200Fايري", "ا**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v878, "\u200Fايرك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v879, "\u200Fاير", "ا*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v880, "\u200Fانيكك", "ا***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v881, "\u200Fانيك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v882, "\u200Fالكسكوس", "ا*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v883, "\u200Fالكساس", "ا****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v884, "\u200Fالكس", "ا**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v885, "\u200Fالشرموطة", "ا******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v886, "\u200Fالشرموطات", "ا*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v887, "\u200Fالزوب", "ا***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v888, "\u200Fالزباب", "ا****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v889, "\u200Fالزب", "ا**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v890, "\u200Fالخروات", "ا*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v891, "\u200Fالخرة", "ا***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v892, "\u200Fإيري", "إ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v893, "\u200Fإيرك", "إ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v894, "\u200Fإير", "إ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v895, "\u200Fأيري", "أ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v896, "\u200Fأيرك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v897, "\u200Fأير", "أ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v898, "\u200Fأنيكك", "أ***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v899, "\u200Fأنيك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v900, "ينتاك", "ي***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v901, "وللكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v902, "وللكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v903, "وللكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v904, "وللشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v905, "وللشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v906, "وللزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v907, "وللزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v908, "وللزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v909, "وللخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v910, "وللخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v911, "ولكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v912, "ولكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v913, "ولكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v914, "ولكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v915, "ولكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v916, "ولكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v917, "ولكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v918, "ولكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v919, "ولكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v920, "ولكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v921, "ولكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v922, "ولكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v923, "ولكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v924, "ولكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v925, "ولكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v926, "ولكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v927, "ولكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v928, "ولكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v929, "ولكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v930, "ولكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v931, "ولكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v932, "ولكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v933, "ولكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v934, "ولكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v935, "ولكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v936, "ولكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v937, "ولكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v938, "ولكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v939, "ولكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v940, "ولكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v941, "ولشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v942, "ولشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v943, "ولشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v944, "ولشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v945, "ولشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v946, "ولشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v947, "ولشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v948, "ولشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v949, "ولشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v950, "ولشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v951, "ولشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v952, "ولشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v953, "ولشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v954, "ولشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v955, "ولشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v956, "ولشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v957, "ولشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v958, "ولشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v959, "ولشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v960, "ولشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v961, "ولزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v962, "ولزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v963, "ولزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v964, "ولزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v965, "ولزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v966, "ولزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v967, "ولزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v968, "ولزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v969, "ولزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v970, "ولزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v971, "ولزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v972, "ولزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v973, "ولزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v974, "ولزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v975, "ولزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v976, "ولزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v977, "ولزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v978, "ولزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v979, "ولزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v980, "ولزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v981, "ولزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v982, "ولزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v983, "ولزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v984, "ولزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v985, "ولزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v986, "ولزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v987, "ولزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v988, "ولزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v989, "ولزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v990, "ولزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v991, "ولخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v992, "ولخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v993, "ولخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v994, "ولخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v995, "ولخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v996, "ولخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v997, "ولخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v998, "ولخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v999, "ولخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1000, "ولخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1001, "ولخرتي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1002, "ولخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1003, "ولخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1004, "ولخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1005, "ولخرته", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1006, "ولخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1007, "ولخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1008, "ولخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1009, "ولخرتك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1010, "ولخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1011, "وككسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1012, "وككسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1013, "وككسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1014, "وككسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1015, "وككسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1016, "وككسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1017, "وككسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1018, "وككسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1019, "وككسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1020, "وككسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1021, "وككسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1022, "وككسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1023, "وككسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1024, "وككسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1025, "وككسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1026, "وككسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1027, "وككسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1028, "وككسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1029, "وككسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1030, "وككساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1031, "وككساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1032, "وككساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1033, "وككساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1034, "وككساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1035, "وككساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1036, "وككساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1037, "وككساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1038, "وككساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1039, "وككساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1040, "وككس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1041, "وكشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1042, "وكشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1043, "وكشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1044, "وكشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1045, "وكشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1046, "وكشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1047, "وكشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1048, "وكشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1049, "وكشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1050, "وكشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1051, "وكشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1052, "وكشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1053, "وكشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1054, "وكشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1055, "وكشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1056, "وكشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1057, "وكشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1058, "وكشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1059, "وكشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1060, "وكشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1061, "وكسي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1062, "وكسهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1063, "وكسهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1064, "وكسها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1065, "وكسه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1066, "وكسنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1067, "وكسكوسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1068, "وكسكوسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1069, "وكسكوسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1070, "وكسكوسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1071, "وكسكوسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1072, "وكسكوسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1073, "وكسكوسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1074, "وكسكوسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1075, "وكسكوسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1076, "وكسكوس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1077, "وكسكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1078, "وكسكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1079, "وكسك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1080, "وكساسي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1081, "وكساسهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1082, "وكساسهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1083, "وكساسها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1084, "وكساسه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1085, "وكساسنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1086, "وكساسكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1087, "وكساسكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1088, "وكساسك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1089, "وكساس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1090, "وكس", "و*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1091, "وكزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1092, "وكزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1093, "وكزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1094, "وكزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1095, "وكزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1096, "وكزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1097, "وكزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1098, "وكزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1099, "وكزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1100, "وكزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1101, "وكزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1102, "وكزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1103, "وكزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1104, "وكزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1105, "وكزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1106, "وكزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1107, "وكزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1108, "وكزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1109, "وكزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1110, "وكزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1111, "وكزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1112, "وكزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1113, "وكزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1114, "وكزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1115, "وكزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1116, "وكزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1117, "وكزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1118, "وكزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1119, "وكزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1120, "وكزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1121, "وكخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1122, "وكخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1123, "وكخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1124, "وكخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1125, "وكخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1126, "وكخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1127, "وكخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1128, "وكخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1129, "وكخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1130, "وكخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1131, "وكخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1132, "وكخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1133, "وكخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1134, "وكخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1135, "وكخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1136, "وكخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1137, "وكخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1138, "وكالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1139, "وكالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1140, "وكالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1141, "وكالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1142, "وكالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1143, "وكالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1144, "وكالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1145, "وكالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1146, "وكالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1147, "وكالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1148, "وشرموطتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1149, "وشرموطتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1150, "وشرموطتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1151, "وشرموطتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1152, "وشرموطته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1153, "وشرموطتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1154, "وشرموطتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1155, "وشرموطتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1156, "وشرموطتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1157, "وشرموطة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1158, "وشرموطاتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1159, "وشرموطاتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1160, "وشرموطاتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1161, "وشرموطاتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1162, "وشرموطاته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1163, "وشرموطاتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1164, "وشرموطاتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1165, "وشرموطاتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1166, "وشرموطاتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1167, "وشرموطات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1168, "وزوبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1169, "وزوبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1170, "وزوبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1171, "وزوبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1172, "وزوبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1173, "وزوبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1174, "وزوبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1175, "وزوبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1176, "وزوبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1177, "وزوب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1178, "وزبي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1179, "وزبهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1180, "وزبهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1181, "وزبها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1182, "وزبه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1183, "وزبنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1184, "وزبكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1185, "وزبكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1186, "وزبك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1187, "وزبابي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1188, "وزبابهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1189, "وزبابهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1190, "وزبابها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1191, "وزبابه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1192, "وزبابنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1193, "وزبابكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1194, "وزبابكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1195, "وزبابك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1196, "وزباب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1197, "وزب", "و*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1198, "وخرواتي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1199, "وخرواتهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1200, "وخرواتهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1201, "وخرواتها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1202, "وخرواته", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1203, "وخرواتنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1204, "وخرواتكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1205, "وخرواتكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1206, "وخرواتك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1207, "وخروات", "و****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1208, "وخرتي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1209, "وخرته", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1210, "وخرتك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1211, "وخرة", "و**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1212, "وبكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1213, "وبكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1214, "وبكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1215, "وبكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1216, "وبكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1217, "وبكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1218, "وبكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1219, "وبكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1220, "وبكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1221, "وبكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1222, "وبكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1223, "وبكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1224, "وبكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1225, "وبكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1226, "وبكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1227, "وبكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1228, "وبكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1229, "وبكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1230, "وبكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1231, "وبكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1232, "وبكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1233, "وبكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1234, "وبكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1235, "وبكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1236, "وبكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1237, "وبكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1238, "وبكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1239, "وبكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1240, "وبكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1241, "وبكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1242, "وبشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1243, "وبشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1244, "وبشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1245, "وبشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1246, "وبشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1247, "وبشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1248, "وبشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1249, "وبشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1250, "وبشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1251, "وبشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1252, "وبشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1253, "وبشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1254, "وبشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1255, "وبشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1256, "وبشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1257, "وبشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1258, "وبشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1259, "وبشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1260, "وبشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1261, "وبشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1262, "وبزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1263, "وبزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1264, "وبزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1265, "وبزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1266, "وبزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1267, "وبزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1268, "وبزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1269, "وبزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1270, "وبزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1271, "وبزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1272, "وبزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1273, "وبزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1274, "وبزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1275, "وبزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1276, "وبزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1277, "وبزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1278, "وبزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1279, "وبزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1280, "وبزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1281, "وبزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1282, "وبزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1283, "وبزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1284, "وبزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1285, "وبزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1286, "وبزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1287, "وبزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1288, "وبزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1289, "وبزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1290, "وبزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1291, "وبزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1292, "وبخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1293, "وبخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1294, "وبخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1295, "وبخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1296, "وبخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1297, "وبخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1298, "وبخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1299, "وبخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1300, "وبخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1301, "وبخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1302, "وبخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1303, "وبخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1304, "وبالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1305, "وبالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1306, "وبالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1307, "وبالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1308, "وبالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1309, "وبالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1310, "وبالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1311, "وبالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1312, "وبالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1313, "وبالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1314, "والكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1315, "والكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1316, "والكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1317, "والشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1318, "والشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1319, "والزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1320, "والزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1321, "والزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1322, "والخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1323, "والخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1324, "نيكيني", "ن****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1325, "نيكني", "ن***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1326, "نيك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1327, "نياكة", "ن***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1328, "ناك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1329, "مومس", "م**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1330, "مهبل", "م**ل");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1331, "للكسكوس", "ل*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1332, "للكساس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1333, "للكس", "ل**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1334, "للعنة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1335, "للشرموطة", "ل******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1336, "للشرموطات", "ل*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1337, "للزوب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1338, "للزباب", "ل****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1339, "للزب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1340, "للخروات", "ل*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1341, "للخرة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1342, "لكسي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1343, "لكسهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1344, "لكسهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1345, "لكسها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1346, "لكسه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1347, "لكسنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1348, "لكسكوسي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1349, "لكسكوسهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1350, "لكسكوسهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1351, "لكسكوسها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1352, "لكسكوسه", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1353, "لكسكوسنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1354, "لكسكوسكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1355, "لكسكوسكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1356, "لكسكوسك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1357, "لكسكوس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1358, "لكسكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1359, "لكسكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1360, "لكسك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1361, "لكساسي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1362, "لكساسهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1363, "لكساسهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1364, "لكساسها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1365, "لكساسه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1366, "لكساسنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1367, "لكساسكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1368, "لكساسكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1369, "لكساسك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1370, "لكساس", "ل***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1371, "لكس", "ل*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1372, "لشرموطتي", "ل******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1373, "لشرموطتهن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1374, "لشرموطتهم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1375, "لشرموطتها", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1376, "لشرموطته", "ل******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1377, "لشرموطتنا", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1378, "لشرموطتكن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1379, "لشرموطتكم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1380, "لشرموطتك", "ل******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1381, "لشرموطة", "ل*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1382, "لشرموطاتي", "ل*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1383, "لشرموطاتهن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1384, "لشرموطاتهم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1385, "لشرموطاتها", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1386, "لشرموطاته", "ل*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1387, "لشرموطاتنا", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1388, "لشرموطاتكن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1389, "لشرموطاتكم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1390, "لشرموطاتك", "ل*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1391, "لشرموطات", "ل******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1392, "لزوبي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1393, "لزوبهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1394, "لزوبهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1395, "لزوبها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1396, "لزوبه", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1397, "لزوبنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1398, "لزوبكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1399, "لزوبكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1400, "لزوبك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1401, "لزوب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1402, "لزبي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1403, "لزبهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1404, "لزبهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1405, "لزبها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1406, "لزبه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1407, "لزبنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1408, "لزبكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1409, "لزبكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1410, "لزبك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1411, "لزبابي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1412, "لزبابهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1413, "لزبابهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1414, "لزبابها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1415, "لزبابه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1416, "لزبابنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1417, "لزبابكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1418, "لزبابكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1419, "لزبابك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1420, "لزباب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1421, "لزب", "ل*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1422, "لخرواتي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1423, "لخرواتهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1424, "لخرواتهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1425, "لخرواتها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1426, "لخرواته", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1427, "لخرواتنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1428, "لخرواتكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1429, "لخرواتكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1430, "لخرواتك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1431, "لخروات", "ل****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1432, "لخرتي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1433, "لخرتهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1434, "لخرتهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1435, "لخرتها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1436, "لخرته", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1437, "لخرتنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1438, "لخرتكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1439, "لخرتكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1440, "لخرتك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1441, "لخرة", "ل**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1442, "ككسي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1443, "ككسهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1444, "ككسهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1445, "ككسها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1446, "ككسه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1447, "ككسنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1448, "ككسكوسي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1449, "ككسكوسهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1450, "ككسكوسهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1451, "ككسكوسها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1452, "ككسكوسه", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1453, "ككسكوسنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1454, "ككسكوسكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1455, "ككسكوسكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1456, "ككسكوسك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1457, "ككسكوس", "ك****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1458, "ككسكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1459, "ككسكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1460, "ككسك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1461, "ككساسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1462, "ككساسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1463, "ككساسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1464, "ككساسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1465, "ككساسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1466, "ككساسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1467, "ككساسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1468, "ككساسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1469, "ككساسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1470, "ككساس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1471, "ككس", "ك*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1472, "كشرموطتي", "ك******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1473, "كشرموطتهن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1474, "كشرموطتهم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1475, "كشرموطتها", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1476, "كشرموطته", "ك******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1477, "كشرموطتنا", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1478, "كشرموطتكن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1479, "كشرموطتكم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1480, "كشرموطتك", "ك******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1481, "كشرموطة", "ك*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1482, "كشرموطاتي", "ك*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1483, "كشرموطاتهن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1484, "كشرموطاتهم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1485, "كشرموطاتها", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1486, "كشرموطاته", "ك*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1487, "كشرموطاتنا", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1488, "كشرموطاتكن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1489, "كشرموطاتكم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1490, "كشرموطاتك", "ك*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1491, "كشرموطات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1492, "كسي", "ك*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1493, "كسهن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1494, "كسهم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1495, "كسها", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1496, "كسه", "ك*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1497, "كسنا", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1498, "كسكوسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1499, "كسكوسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1500, "كسكوسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1501, "كسكوسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1502, "كسكوسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1503, "كسكوسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1504, "كسكوسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1505, "كسكوسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1506, "كسكوسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1507, "كسكوس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1508, "كسكن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1509, "كسكم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1510, "كسك", "ك*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1511, "كساسي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1512, "كساسهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1513, "كساسهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1514, "كساسها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1515, "كساسه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1516, "كساسنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1517, "كساسكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1518, "كساسكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1519, "كساسك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1520, "كساس", "ك**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1521, "كس", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1522, "كزوبي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1523, "كزوبهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1524, "كزوبهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1525, "كزوبها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1526, "كزوبه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1527, "كزوبنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1528, "كزوبكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1529, "كزوبكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1530, "كزوبك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1531, "كزوب", "ك**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1532, "كزبي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1533, "كزبهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1534, "كزبهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1535, "كزبها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1536, "كزبه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1537, "كزبنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1538, "كزبكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1539, "كزبكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1540, "كزبك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1541, "كزبابي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1542, "كزبابهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1543, "كزبابهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1544, "كزبابها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1545, "كزبابه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1546, "كزبابنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1547, "كزبابكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1548, "كزبابكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1549, "كزبابك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1550, "كزباب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1551, "كزب", "ك*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1552, "كخرواتي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1553, "كخرواتهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1554, "كخرواتهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1555, "كخرواتها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1556, "كخرواته", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1557, "كخرواتنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1558, "كخرواتكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1559, "كخرواتكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1560, "كخرواتك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1561, "كخروات", "ك****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1562, "كخرتي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1563, "كخرتهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1564, "كخرتهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1565, "كخرتها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1566, "كخرته", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1567, "كخرتنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1568, "كخرتكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1569, "كخرتكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1570, "كخرتك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1571, "كخرة", "ك**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1572, "كالكسكوس", "ك******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1573, "كالكساس", "ك*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1574, "كالكس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1575, "كالشرموطة", "ك*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1576, "كالشرموطات", "ك********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1577, "كالزوب", "ك****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1578, "كالزباب", "ك*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1579, "كالزب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1580, "كالخروات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1581, "كالخرة", "ك****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1582, "قحبه", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1583, "قحبة", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1584, "قحبات", "ق***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1585, "عيري", "ع**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1586, "عرصه", "ع**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1587, "عرصة", "ع**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1588, "عرصات", "ع***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1589, "عرص", "ع*ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1590, "عاهرة", "ع***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1591, "شلكه", "ش**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1592, "شلكة", "ش**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1593, "شلكات", "ش***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1594, "شرموطه", "ش****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1595, "شرموطتي", "ش*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1596, "شرموطتهن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1597, "شرموطتهم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1598, "شرموطتها", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1599, "شرموطته", "ش*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1600, "شرموطتنا", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1601, "شرموطتكن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1602, "شرموطتكم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1603, "شرموطتك", "ش*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1604, "شرموطة", "ش****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1605, "شرموطاتي", "ش******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1606, "شرموطاتهن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1607, "شرموطاتهم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1608, "شرموطاتها", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1609, "شرموطاته", "ش******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1610, "شرموطاتنا", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1611, "شرموطاتكن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1612, "شرموطاتكم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1613, "شرموطاتك", "ش******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1614, "شرموطات", "ش*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1615, "شرموط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1616, "شرجي", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v1617, "شراميط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1618, "شخيتي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1619, "شخيت", "ش**ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1620, "شخي", "ش*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1621, "شخاخي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1622, "شخاختي", "ش****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1623, "شخاخ", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1624, "شخ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1625, "ساقطة", "س***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1626, "سأضاجع", "س****ع");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1627, "زوبي", "ز**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1628, "زوبهن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1629, "زوبهم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1630, "زوبها", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1631, "زوبه", "ز**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1632, "زوبنا", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1633, "زوبكن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1634, "زوبكم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1635, "زوبك", "ز**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1636, "زوب", "ز*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1637, "زبي", "ز*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1638, "زبهن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1639, "زبهم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1640, "زبها", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1641, "زبه", "ز*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1642, "زبنا", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1643, "زبكن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1644, "زبكم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1645, "زبك", "ز*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1646, "زبابي", "ز***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1647, "زبابهن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1648, "زبابهم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1649, "زبابها", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1650, "زبابه", "ز***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1651, "زبابنا", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1652, "زبابكن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1653, "زبابكم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1654, "زبابك", "ز***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1655, "زباب", "ز**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1656, "زب", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1657, "تبا", "ت*ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1658, "خرواتي", "خ****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1659, "خرواتهن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1660, "خرواتهم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1661, "خرواتها", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1662, "خرواته", "خ****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1663, "خرواتنا", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1664, "خرواتكن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1665, "خرواتكم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1666, "خرواتك", "خ****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1667, "خروات", "خ***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1668, "خرتهن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1669, "خرتهم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1670, "خرتها", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1671, "خرتنا", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1672, "خرتكن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1673, "خرتكم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1674, "خرة", "خ*ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1675, "تنييك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1676, "تنتاك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1677, "بورنو", "ب***و");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1678, "بكسي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1679, "بكسهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1680, "بكسهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1681, "بكسها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1682, "بكسه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1683, "بكسنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1684, "بكسكوسي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1685, "بكسكوسهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1686, "بكسكوسهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1687, "بكسكوسها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1688, "بكسكوسه", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1689, "بكسكوسنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1690, "بكسكوسكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1691, "بكسكوسكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1692, "بكسكوسك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1693, "بكسكوس", "ب****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1694, "بكسكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1695, "بكسكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1696, "بكسك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1697, "بكساسي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1698, "بكساسهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1699, "بكساسهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1700, "بكساسها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1701, "بكساسه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1702, "بكساسنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1703, "بكساسكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1704, "بكساسكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1705, "بكساسك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1706, "بكساس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1707, "بكس", "ب*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1708, "بشرموطتي", "ب******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1709, "بشرموطتهن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1710, "بشرموطتهم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1711, "بشرموطتها", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1712, "بشرموطته", "ب******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1713, "بشرموطتنا", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1714, "بشرموطتكن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1715, "بشرموطتكم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1716, "بشرموطتك", "ب******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1717, "بشرموطة", "ب*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1718, "بشرموطاتي", "ب*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1719, "بشرموطاتهن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1720, "بشرموطاتهم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1721, "بشرموطاتها", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1722, "بشرموطاته", "ب*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1723, "بشرموطاتنا", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1724, "بشرموطاتكن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1725, "بشرموطاتكم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1726, "بشرموطاتك", "ب*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1727, "بشرموطات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1728, "بزوبي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1729, "بزوبهن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1730, "بزوبهم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1731, "بزوبها", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1732, "بزوبه", "ب***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1733, "بزوبنا", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1734, "بزوبكن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1735, "بزوبكم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1736, "بزوبك", "ب***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1737, "بزوب", "ب**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1738, "بزبي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1739, "بزبهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1740, "بزبهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1741, "بزبها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1742, "بزبه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1743, "بزبنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1744, "بزبكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1745, "بزبكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1746, "بزبك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1747, "بزبابي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1748, "بزبابهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1749, "بزبابهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1750, "بزبابها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1751, "بزبابه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1752, "بزبابنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1753, "بزبابكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1754, "بزبابكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1755, "بزبابك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1756, "بزباب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1757, "بزب", "ب*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1758, "بزاز", "ب**ز");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1759, "بز", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1760, "بخرواتي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1761, "بخرواتهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1762, "بخرواتهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1763, "بخرواتها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1764, "بخرواته", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1765, "بخرواتنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1766, "بخرواتكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1767, "بخرواتكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1768, "بخرواتك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1769, "بخروات", "ب****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1770, "بخرتي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1771, "بخرة", "ب**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1772, "بالكسكوس", "ب******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1773, "بالكساس", "ب*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1774, "بالكس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1775, "بالشرموطة", "ب*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1776, "بالشرموطات", "ب********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1777, "بالزوب", "ب****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1778, "بالزباب", "ب*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1779, "بالزب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1780, "بالخروات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1781, "بالخرة", "ب****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1782, "ايري", "ا**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1783, "ايرك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1784, "اير", "ا*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1785, "انيكك", "ا***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1786, "انيك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1787, "اللعين", "ا****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1788, "الكسكوس", "ا*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1789, "الكساس", "ا****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1790, "الكس", "ا**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1791, "العرص", "ا***ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1792, "العاهرة", "ا*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1793, "الشرموطة", "ا******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1794, "الشرموطات", "ا*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1795, "الزوب", "ا***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1796, "الزباب", "ا****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1797, "الزب", "ا**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1798, "الخروات", "ا*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1799, "الخرة", "ا***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1800, "الاستنماء", "ا*******ء");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1801, "إيري", "إ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1802, "إيرك", "إ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1803, "إير", "إ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1804, "أيري", "أ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1805, "أيرك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1806, "أير", "أ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1807, "أنيكك", "أ***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1808, "أنيك", "أ**ك");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ar_AE(void)::sProfanityData_ar_AE, (uint64_t)v4, 0x70DuLL);
    for (uint64_t i = 0; i != -10830; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v1808[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ar_AE(void)::sProfanityData_ar_AE, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_ar_AE(void)::sProfanityData_ar_AE[0], unk_1EA3D9088, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D9088 - GetProfanityFilter_ar_AE(void)::sProfanityData_ar_AE[0]) >> 4));
}

void sub_1C5EF3F64(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 86592;
  uint64_t v4 = -86640;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_nl_NL(void *a1)
{
  void v7[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v4, "darmtouristjes", "d************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v5, "darmtouristje", "d***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v6, "darmtouristen", "d***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v7, "darmtourist", "d*********t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_nl_NL(void)::sProfanityData_nl_NL, (uint64_t)v4, 4uLL);
    for (uint64_t i = 18; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v4[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_nl_NL(void)::sProfanityData_nl_NL, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_nl_NL(void)::sProfanityData_nl_NL[0], unk_1EA3D90C8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D90C8 - GetProfanityFilter_nl_NL(void)::sProfanityData_nl_NL[0]) >> 4));
}

void sub_1C5EF4150(_Unwind_Exception *a1)
{
  for (uint64_t i = 144; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_de_CH(void *a1)
{
  void v3[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v3, "arschtrompeter", "a************r");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_de_CH(void)::sProfanityData_de_CH, (uint64_t)v3, 1uLL);
    std::pair<std::string const,std::string>::~pair((uint64_t)v3);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_de_CH(void)::sProfanityData_de_CH, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_de_CH(void)::sProfanityData_de_CH[0], unk_1EA3D90E8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D90E8 - GetProfanityFilter_de_CH(void)::sProfanityData_de_CH[0]) >> 4));
}

void sub_1C5EF42BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_de_AT(void *a1)
{
  void v56[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v4, "tschuschenschlampe", "T****************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[17],0>(v5, "tschuschenfotze", "T**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v6, "tschuschenficker", "T*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v7, "tschusch", "t****sch");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v8, "tschurifetzen", "t**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v9, "tschuri", "t****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v10, "schnackseln", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v11, "scheisstürke", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v12, "scheissjugo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v13, "schancksln", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "saubeidl", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v15, "saubeidel", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[9],0>(v16, "pudern", "p******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[12],0>(v17, "puderant", "p*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v18, "polacke", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v19, "oaschloch", "o*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v20, "oaschficker", "o**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v21, "oasch", "o*sch");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v22, "oarschtrompeter", "a************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v23, "oarschpuderant", "o**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v24, "oarschpartie", "o**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v25, "oarschloecher", "a**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v26, "oarschloch", "a*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v27, "oarschlecker", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v28, "oarschlöcher", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v29, "oarschkriecherin", "a*************in");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v30, "oarschkriecher", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v31, "oarschkekse", "a*******se");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v32, "oarschkeks", "a******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v33, "oarschkatheter", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v34, "oarschintruder", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v35, "oarschficker", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v36, "oarschficken", "a********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v37, "oarschbeidl", "o**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v38, "oarsch", "o***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v39, "mongo", "m***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v40, "jugoschlampe", "j*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v41, "gschissener", "g********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "gschissen", "g*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v43, "futtlappen", "f*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v44, "futt", "f***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v45, "futlapperl", "f********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[13],0>(v46, "futlappen", "f**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v47, "fut", "f*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v48, "funsn", "f***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v49, "dutteln", "d****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v50, "brunzen", "b*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v51, "bimboschlampe", "b************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v52, "bimbo", "b***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v53, "beidl", "b****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v54, "beidel", "b****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v55, "arschpartie", "a*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v56, "arschbeidel", "a*********l");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_de_AT(void)::sProfanityData_de_AT, (uint64_t)v4, 0x35uLL);
    for (uint64_t i = 312; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v4[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_de_AT(void)::sProfanityData_de_AT, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_de_AT(void)::sProfanityData_de_AT[0], unk_1EA3D9108, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D9108 - GetProfanityFilter_de_AT(void)::sProfanityData_de_AT[0]) >> 4));
}

void sub_1C5EF4A30(_Unwind_Exception *a1)
{
  for (uint64_t i = 2496; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_de_DE(void *a1)
{
  void v3[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v3, "arschtrompeter", "a************r");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_de_DE(void)::sProfanityData_de_DE, (uint64_t)v3, 1uLL);
    std::pair<std::string const,std::string>::~pair((uint64_t)v3);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_de_DE(void)::sProfanityData_de_DE, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_de_DE(void)::sProfanityData_de_DE[0], unk_1EA3D9128, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D9128 - GetProfanityFilter_de_DE(void)::sProfanityData_de_DE[0]) >> 4));
}

void sub_1C5EF4B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_fr_BE(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v207[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v4, "zobs", "z**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v5, "zguegs", "z****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v6, "zgueg", "z***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v7, "zguègues", "z******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v8, "zguègue", "z*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v9, "zgegs", "z***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v10, "zgeg", "z**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "youpins", "y*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v12, "youpines", "y******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v13, "youpine", "y*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v14, "youpin", "y****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v15, "trouducs", "t******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "trouduc", "t*****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v17, "troncher", "t******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v18, "tichs", "t***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v19, "tiches", "t****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v20, "tiche", "t***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v21, "tich", "t**h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v22, "teubs", "t***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v23, "tarlouzes", "t*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v24, "tarlouses", "t*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v25, "tarés", "t***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v26, "tapioles", "t******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v27, "tapiole", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v28, "tantouzes", "t*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v29, "tantouze", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v30, "tantouses", "t*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v31, "tantouse", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v32, "têts", "t**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v33, "têt", "t*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v34, "tèts", "t**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v35, "tèt", "t*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v36, "strons", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v37, "stron", "s***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v38, "sinssis", "s*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v39, "sinssi", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v40, "sguegs", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v41, "sgueg", "s***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v42, "sguègues", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v43, "sguègue", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v44, "sgegs", "s***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v45, "sgeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v46, "salops", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v47, "salopards", "s*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v48, "salopard", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v49, "saligots", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v50, "saligot", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v51, "saisis", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v52, "saisi", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v53, "roustons", "r******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v54, "rouston", "r*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v55, "roupettes", "r*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v56, "roupette", "r******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v57, "ritals", "r****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v58, "rital", "r***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v59, "radasses", "r******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v60, "radasse", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v61, "quettes", "q*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v62, "quetter", "q*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v63, "quette", "q****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v64, "quéquettes", "q********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v65, "quéquette", "q*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v66, "putasses", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v67, "putasseries", "p*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v68, "putasserie", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v69, "putasse", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v70, "pourchas", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "pourcha", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "poivrots", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v73, "pochtrons", "p*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v74, "pochetrons", "p********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v75, "pochards", "p*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v76, "pisseurs", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v77, "pisseur", "p*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v78, "pisser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v79, "pines", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v80, "piner", "p***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v81, "pine", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v82, "peys", "p**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v83, "peyes", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v84, "peye", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v85, "pey", "p*s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v86, "peïs", "p**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v87, "peï", "p*ï");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "nibards", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v89, "mijolles", "m******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v90, "mijolle", "m*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v91, "mijoles", "m*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v92, "mijole", "m****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v93, "migeolles", "m*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v94, "migeolle", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "migeoles", "m******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v96, "migeole", "m*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v97, "merdiers", "m******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v98, "merdier", "m*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v99, "merdasses", "m*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v100, "merdasse", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v101, "lesbiches", "l*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v102, "lesbiche", "l******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v103, "klettes", "k*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v104, "klette", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v105, "klets", "k***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v106, "klet", "k**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "kettes", "k****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "ketter", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v109, "kette", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v110, "kets", "k**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v111, "ket", "k*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v112, "kakkes", "k****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v113, "kakker", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v114, "kakke", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v115, "kakes", "k***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v116, "kaker", "k***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v117, "kake", "k**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v118, "godiches", "g******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v119, "godiche", "g*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v120, "founes", "f****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v121, "foune", "f***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v122, "foufounettes", "f**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v123, "fouffes", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v124, "fouffe", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v125, "foufes", "f****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v126, "fister", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v127, "fiottes", "f*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v128, "fiotte", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v129, "fions", "f***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v130, "fion", "f**n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v131, "enfoirées", "e*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v132, "enfoirée", "e******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v133, "enculeurs", "e*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v134, "enculeur", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v135, "empaffer", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v136, "empaffés", "e*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v137, "empaffées", "e********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v138, "empaffée", "e******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v139, "empaffé", "e*****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v140, "emmerdeuses", "e*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v141, "emmerdeuse", "e********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v142, "emmerdeurs", "e********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v143, "emmerdeur", "e*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v144, "djondus", "d*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v145, "djondu", "d****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v146, "derches", "d*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v147, "culs", "c**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v148, "cul", "c*l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v149, "cucuches", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v150, "cucuche", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v151, "crailles", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v152, "craille", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v153, "couillons", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v154, "couillon", "c******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v155, "cougner", "c*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v156, "connasses", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v157, "connasse", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v158, "conasses", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v159, "conasse", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v160, "conards", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v161, "conard", "c****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v162, "clitos", "c****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v163, "chouannes", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v164, "chouanne", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v165, "chouanes", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v166, "chouane", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v167, "chintoks", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v168, "chinetoques", "c********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v169, "chinetoks", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v170, "chieurs", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v171, "chieur", "c****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v172, "chieries", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v173, "chierie", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v174, "chiennasses", "c*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v175, "chiennasse", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v176, "chiatique", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v177, "chiasses", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v178, "chiasser", "c******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v179, "chiées", "c****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v180, "chiée", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v181, "chagattes", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v182, "chagatte", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v183, "burne", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v184, "branlotter", "b********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v185, "branlettes", "b********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v186, "branler", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v187, "branlées", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v188, "branlée", "b*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v189, "bouniouls", "b*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v190, "bounioules", "b********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v191, "bounioule", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v192, "bounioul", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v193, "boches", "b****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v194, "boche", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v195, "bites", "b***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v196, "biesses", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v197, "biesse", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v198, "bauyards", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v199, "bauyard", "b*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v200, "baraquis", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v201, "baraqui", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v202, "baraquîs", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v203, "baraquî", "b*****î");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v204, "barakis", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v205, "baraki", "b****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v206, "barakîs", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v207, "barakî", "b****î");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_fr_BE(void)::sProfanityData_fr_BE, (uint64_t)v4, 0xCCuLL);
    for (uint64_t i = 0; i != -1224; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v207[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_fr_BE(void)::sProfanityData_fr_BE, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_fr_BE(void)::sProfanityData_fr_BE[0], unk_1EA3D9148, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D9148 - GetProfanityFilter_fr_BE(void)::sProfanityData_fr_BE[0]) >> 4));
}

void sub_1C5EF66C8(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 9744;
  uint64_t v4 = -9792;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_fr_CA(void *a1)
{
  void v31[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v4, "zouf", "z**f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v5, "twit", "t**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v6, "trou du cul", "t*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v7, "trou de cul", "t*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v8, "toton", "t***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "ti cul", "t****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "taouin", "t****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v11, "tabernak", "t******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v12, "téteux", "t****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v13, "quétaine", "q******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v14, "pogne-cul", "p*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v15, "plein de marde", "p************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v16, "pissou", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v17, "niochon", "n*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v18, "niaiseux", "n******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v19, "newfie", "n****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v20, "naiseuse", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v21, "moumoune", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v22, "moron", "m***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "mongol", "m****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v24, "mangeux de marde", "m**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v25, "lâcheux", "l*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v26, "gnochon", "g*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v27, "fif", "f*f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v28, "crotter", "c*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v29, "crotté", "c****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v30, "bloke", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[26],0>(v31, "épais dans le plus mince", "é**********************e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_fr_CA(void)::sProfanityData_fr_CA, (uint64_t)v4, 0x1CuLL);
    for (uint64_t i = 162; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v4[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_fr_CA(void)::sProfanityData_fr_CA, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_fr_CA(void)::sProfanityData_fr_CA[0], unk_1EA3D9168, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D9168 - GetProfanityFilter_fr_CA(void)::sProfanityData_fr_CA[0]) >> 4));
}

void sub_1C5EF6B80(_Unwind_Exception *a1)
{
  for (uint64_t i = 1296; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_es_US(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v157[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v4, "verguitas", "v********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v5, "verguita", "v*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v6, "vergudo", "v******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v7, "vergotas", "v*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v8, "vergota", "v******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "vergas", "v*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v10, "verga", "v****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v11, "tetas", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v12, "teta", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "rechinga", "r*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v14, "putos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "putones", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "putonas", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v17, "putona", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v18, "puto", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v19, "putito", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "putita", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "putero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v22, "putazos", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "putazo", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v24, "puta", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v25, "putón", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v26, "puñetas", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v27, "pitos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v28, "pito", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v29, "pitero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v30, "pinches", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v31, "pinche", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v32, "pepa", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v33, "pendejo", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v34, "pendejitos", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v35, "pendejito", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v36, "pendejitas", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v37, "pendejita", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v38, "pendejadita", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v39, "pendejadas", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v40, "pendejada", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v41, "pendeja", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "pelotudos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v43, "pelotudo", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v44, "pedos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v45, "pedo", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v46, "panochas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v47, "panocha", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v48, "ojetes", "o*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v49, "ojete", "o****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "mierdero", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v51, "mierda", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v52, "maricones", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v53, "maricona", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v54, "marica", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v55, "maricón", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v56, "mames", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v57, "mamar", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v58, "mamaditas", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v59, "mamadita", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v60, "mamadas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v61, "mamada", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v62, "mamón", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v63, "madriza", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "madrazo", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v65, "lamehuevos", "l*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v66, "joto", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v67, "jotito", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v68, "jotete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v69, "jotísimo", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v70, "jodimos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v71, "jodieron", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v72, "jodido", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v73, "jodidas", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v74, "jodida", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v75, "jodió", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v76, "jodes", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v77, "joder", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v78, "joda", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v79, "jodón", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v80, "jódete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v81, "imbéciles", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v82, "imbécil", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v83, "idiotas", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v84, "idiota", "i*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v85, "huevón", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v86, "güeyes", "gü****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v87, "güey", "gü**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v88, "estúpidos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v89, "estúpido", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v90, "estúpidas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v91, "estúpida", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v92, "encularse", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v93, "enculados", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v94, "enculado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v95, "encabronar", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v96, "encabronado", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v97, "encabronada", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v98, "emputas", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "emputar", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v100, "emputado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v101, "emputada", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v102, "emputadísimo", "e***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v103, "emputa", "e*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v104, "culote", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v105, "culo", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v106, "culito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "culero", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "culera", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v109, "cojones", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v110, "cojón", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v111, "coños", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v112, "coño", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v113, "coñitos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v114, "coñito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v115, "chingos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v116, "chingonería", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v117, "chingo", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v118, "chingarse", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v119, "chingaron", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v120, "chingar", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v121, "chingaquedito", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v122, "chingando", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v123, "chingan", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v124, "chingados", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v125, "chingado", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v126, "chingaderota", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v127, "chingaderita", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v128, "chingadera", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v129, "chingada", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v130, "chingón", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v131, "chaqueto", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v132, "chaqueta", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v133, "chúpamela", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v134, "calientahuevos", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v135, "cagotiza", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v136, "cagaron", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v137, "cagarla", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v138, "cagados", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v139, "cagado", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v140, "cagadas", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v141, "cagada", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v142, "cabronzuelo", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v143, "cabronzuela", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v144, "cabrones", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v145, "cabronazos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v146, "cabronazo", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v147, "cabronas", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v148, "cabrona", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v149, "cabrón", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v150, "boludo", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v151, "boluda", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v152, "bastardo", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v153, "bastarda", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v154, "amariconados", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v155, "amariconado", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v156, "amariconadas", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v157, "amariconada", "a**********");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_es_US(void)::sProfanityData_es_US, (uint64_t)v4, 0x9AuLL);
    for (uint64_t i = 0; i != -924; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v157[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_es_US(void)::sProfanityData_es_US, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_es_US(void)::sProfanityData_es_US[0], unk_1EA3D9188, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D9188 - GetProfanityFilter_es_US(void)::sProfanityData_es_US[0]) >> 4));
}

void sub_1C5EF8038(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 7344;
  uint64_t v4 = -7392;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_es_MX(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v157[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v4, "verguitas", "v********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v5, "verguita", "v*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v6, "vergudo", "v******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v7, "vergotas", "v*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v8, "vergota", "v******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "vergas", "v*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v10, "verga", "v****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v11, "tetas", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v12, "teta", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "rechinga", "r*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v14, "putos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "putones", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "putonas", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v17, "putona", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v18, "puto", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v19, "putito", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "putita", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "putero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v22, "putazos", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "putazo", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v24, "puta", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v25, "putón", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v26, "puñetas", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v27, "pitos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v28, "pito", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v29, "pitero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v30, "pinches", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v31, "pinche", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v32, "pepa", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v33, "pendejo", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v34, "pendejitos", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v35, "pendejito", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v36, "pendejitas", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v37, "pendejita", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v38, "pendejadita", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v39, "pendejadas", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v40, "pendejada", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v41, "pendeja", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "pelotudos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v43, "pelotudo", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v44, "pedos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v45, "pedo", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v46, "panochas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v47, "panocha", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v48, "ojetes", "o*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v49, "ojete", "o****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "mierdero", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v51, "mierda", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v52, "maricones", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v53, "maricona", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v54, "marica", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v55, "maricón", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v56, "mames", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v57, "mamar", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v58, "mamaditas", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v59, "mamadita", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v60, "mamadas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v61, "mamada", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v62, "mamón", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v63, "madriza", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "madrazo", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v65, "lamehuevos", "l*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v66, "joto", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v67, "jotito", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v68, "jotete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v69, "jotísimo", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v70, "jodimos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v71, "jodieron", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v72, "jodido", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v73, "jodidas", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v74, "jodida", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v75, "jodió", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v76, "jodes", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v77, "joder", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v78, "joda", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v79, "jodón", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v80, "jódete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v81, "imbéciles", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v82, "imbécil", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v83, "idiotas", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v84, "idiota", "i*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v85, "huevón", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v86, "güeyes", "gü****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v87, "güey", "gü**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v88, "estúpidos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v89, "estúpido", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v90, "estúpidas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v91, "estúpida", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v92, "encularse", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v93, "enculados", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v94, "enculado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v95, "encabronar", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v96, "encabronado", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v97, "encabronada", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v98, "emputas", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "emputar", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v100, "emputado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v101, "emputada", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v102, "emputadísimo", "e***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v103, "emputa", "e*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v104, "culote", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v105, "culo", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v106, "culito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "culero", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "culera", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v109, "cojones", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v110, "cojón", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v111, "coños", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v112, "coño", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v113, "coñitos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v114, "coñito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v115, "chingos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v116, "chingonería", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v117, "chingo", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v118, "chingarse", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v119, "chingaron", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v120, "chingar", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v121, "chingaquedito", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v122, "chingando", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v123, "chingan", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v124, "chingados", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v125, "chingado", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v126, "chingaderota", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v127, "chingaderita", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v128, "chingadera", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v129, "chingada", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v130, "chingón", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v131, "chaqueto", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v132, "chaqueta", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v133, "chúpamela", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v134, "calientahuevos", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v135, "cagotiza", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v136, "cagaron", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v137, "cagarla", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v138, "cagados", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v139, "cagado", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v140, "cagadas", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v141, "cagada", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v142, "cabronzuelo", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v143, "cabronzuela", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v144, "cabrones", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v145, "cabronazos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v146, "cabronazo", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v147, "cabronas", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v148, "cabrona", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v149, "cabrón", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v150, "boludo", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v151, "boluda", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v152, "bastardo", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v153, "bastarda", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v154, "amariconados", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v155, "amariconado", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v156, "amariconadas", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v157, "amariconada", "a**********");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_es_MX(void)::sProfanityData_es_MX, (uint64_t)v4, 0x9AuLL);
    for (uint64_t i = 0; i != -924; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v157[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_es_MX(void)::sProfanityData_es_MX, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_es_MX(void)::sProfanityData_es_MX[0], unk_1EA3D91A8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D91A8 - GetProfanityFilter_es_MX(void)::sProfanityData_es_MX[0]) >> 4));
}

void sub_1C5EF94F4(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 7344;
  uint64_t v4 = -7392;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_es_ES(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v333[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v4, "zorrones", "z*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v5, "zorronas", "z*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v6, "zorrona", "z******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v7, "zorras", "z*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v8, "zorra", "z****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v9, "zorrón", "z*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "vergas", "v*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v11, "verga", "v****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v12, "tragasables", "t**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v13, "tortilleras", "t**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v14, "tortillera", "t*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v15, "tonto", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v16, "tetas", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v17, "teta", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "sudacas", "s******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v19, "sudaca", "s*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v20, "subnormal", "s********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v21, "soplapollas", "s**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v22, "soplanucas", "s*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v23, "sodomitas", "s********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v24, "sodomita", "s*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v25, "rameras", "r******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v26, "ramera", "r*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v27, "putos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v28, "putonas", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v29, "putona", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v30, "puto", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v31, "putas", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v32, "puta", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v33, "putón", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v34, "porongas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v35, "poronga", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v36, "pollas", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v37, "polla", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v38, "pinche", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v39, "pijotero", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v40, "pijo", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v41, "pendejos", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v42, "pendejo", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v43, "pendejas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v44, "pendeja", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v45, "pendón", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v46, "pelotudos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v47, "pelotudo", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v48, "parrusa", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v49, "parrús", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v50, "pajilleros", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v51, "pajillero", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v52, "pajilleras", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v53, "pajillera", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v54, "pajearse", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v55, "pajearnos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v56, "pajear", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v57, "pajéame", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v58, "ojetes", "o*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v59, "ojete", "o****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v60, "negratas", "n*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v61, "negrata", "n******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v62, "negracos", "n******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v63, "negraco", "n*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v64, "mierdoso", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v65, "mierdosa", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v66, "mierdas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v67, "mierda", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v68, "marimacho", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v69, "marimacha", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "maricones", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v71, "mariconazos", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v72, "mariconazo", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v73, "mariconazas", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v74, "mariconaza", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v75, "mariconas", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v76, "maricona", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v77, "maricas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v78, "marica", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v79, "maricón", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v80, "maracos", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v81, "maraco", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v82, "manflora", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v83, "manflor", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v84, "mamavergas", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v85, "mamapollas", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v86, "mamapingas", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v87, "mamapinga", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v88, "mamabichos", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v89, "mamabicho", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v90, "malparidas", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v91, "malparida", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v92, "lefarte", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "lefarse", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v94, "lefaros", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "lefarnos", "l*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v96, "lefarme", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v97, "lefarles", "l*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v98, "lefarle", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "lefarla", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v100, "lefar", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v101, "lefada", "l*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v102, "lefa", "l***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v103, "lamepollas", "l*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v104, "lameculos", "l********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v105, "lameculo", "l*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v106, "jotos", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v107, "joto", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v108, "jodisteis", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v109, "jodiste", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v110, "jodimos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v111, "jodieses", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v112, "jodiesen", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v113, "jodiese", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v114, "jodieron", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v115, "jodieras", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v116, "jodierais", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v117, "jodiera", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v118, "jodiendo", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v119, "jodienda", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v120, "jodidos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v121, "jodido", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v122, "jodidas", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v123, "jodida", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v124, "jodió", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v125, "jodiésemos", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v126, "jodiéramos", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v127, "jodes", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v128, "joderme", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v129, "joderemos", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v130, "joderías", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v131, "joderían", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v132, "joderíamos", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v133, "joderíais", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v134, "jodería", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v135, "joderéis", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v136, "joderé", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v137, "joderás", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v138, "joderán", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v139, "joderá", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v140, "joder", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v141, "jodeos", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v142, "joden", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v143, "jodemos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v144, "jode", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v145, "jodas", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v146, "jodan", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v147, "jodamos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v148, "joda", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v149, "jodías", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v150, "jodían", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v151, "jodíamos", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v152, "jodíais", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v153, "jodía", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v154, "jodí", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v155, "jodéis", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v156, "jodáis", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v157, "jódete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v158, "imbéciles", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v159, "imbécil", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v160, "idiotas", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v161, "idiota", "i*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v162, "huevones", "h*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v163, "huevón", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v164, "hijoputas", "h********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v165, "hijoputa", "h*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v166, "hijaputas", "h********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v167, "hijaputa", "h*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v168, "guachupinos", "g**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v169, "guachupino", "g*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v170, "guachupinas", "g**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v171, "guachupina", "g*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v172, "golfo", "g****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v173, "golfa", "g****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v174, "gilipolleces", "g***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v175, "gilipollas", "g*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v176, "garchas", "g******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v177, "garcha", "g*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v178, "furcias", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v179, "furcia", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v180, "folleteo", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v181, "folles", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v182, "follen", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v183, "follemos", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v184, "folle", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v185, "follasteis", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v186, "follaste", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v187, "follases", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v188, "follasen", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v189, "follase", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v190, "follas", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v191, "follarte", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v192, "follarse", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v193, "follaros", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v194, "follaron", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v195, "follarnos", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v196, "follarme", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v197, "follarles", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v198, "follarle", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v199, "follarla", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v200, "follaremos", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v201, "follaras", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v202, "follaran", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v203, "follarais", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v204, "follara", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v205, "follarías", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v206, "follarían", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v207, "follaríamos", "f**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v208, "follaríais", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v209, "follaría", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v210, "follaréis", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v211, "follaré", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v212, "follarás", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v213, "follarán", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v214, "follará", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v215, "follar", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v216, "follando", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v217, "follan", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v218, "follamos", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v219, "follados", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v220, "follador", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v221, "follado", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v222, "folladas", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v223, "follada", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v224, "follad", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v225, "follabas", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v226, "follaban", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v227, "follabais", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v228, "follaba", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v229, "folléis", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v230, "follé", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v231, "follásemos", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v232, "folláramos", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v233, "folláis", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v234, "follábamos", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v235, "estúpidos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v236, "estúpido", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v237, "estúpidas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v238, "estúpida", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v239, "enculas", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v240, "encularte", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v241, "encularse", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v242, "encularos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v243, "encularon", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v244, "encularnos", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v245, "encularme", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v246, "encularles", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v247, "encularle", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v248, "encularla", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v249, "encularemos", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v250, "encularas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v251, "encularan", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v252, "encularais", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v253, "encularías", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v254, "encularían", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v255, "encularíamos", "e***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v256, "encularíais", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v257, "encularía", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v258, "encularéis", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v259, "encularé", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v260, "encularás", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v261, "encularán", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v262, "enculará", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v263, "encular", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v264, "enculando", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v265, "enculan", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v266, "enculamos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v267, "enculados", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v268, "enculadora", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v269, "enculador", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v270, "enculado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v271, "enculadas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v272, "enculada", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v273, "enculad", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v274, "enculabas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v275, "enculaban", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v276, "enculabais", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v277, "enculaba", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v278, "enculáramos", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v279, "enculáis", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v280, "enculábamos", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v281, "desgraciado", "d**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v282, "desgraciada", "d**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v283, "cometrancas", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v284, "comerrabos", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v285, "comepollas", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v286, "cojones", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v287, "cojón", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v288, "coños", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v289, "coño", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v290, "coñitos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v291, "coñito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v292, "cipote", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v293, "chupapollas", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v294, "chupapenes", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v295, "chupaculos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v296, "chuminos", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v297, "chumino", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v298, "chuminacos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v299, "chuminaco", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v300, "chocho", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v301, "chingada", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v302, "chinacos", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v303, "chinaco", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v304, "chinacas", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v305, "chinaca", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v306, "cascársela", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v307, "carapolla", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v308, "caramierda", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v309, "caraculo", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v310, "capullo", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v311, "calientarrabos", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v312, "calientapollas", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v313, "cabrones", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v314, "cabronazos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v315, "cabronazo", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v316, "cabronazas", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v317, "cabronaza", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v318, "cabronas", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v319, "cabrona", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v320, "cabrón", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v321, "cáscamela", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v322, "bujarra", "b******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v323, "bujarrón", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v324, "boludo", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v325, "boluda", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v326, "bocachancla", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v327, "bobo", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v328, "bastardo", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v329, "bastarda", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v330, "amariconados", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v331, "amariconado", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v332, "amariconadas", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v333, "amariconada", "a**********");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_es_ES(void)::sProfanityData_es_ES, (uint64_t)v4, 0x14AuLL);
    for (uint64_t i = 0; i != -1980; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v333[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_es_ES(void)::sProfanityData_es_ES, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_es_ES(void)::sProfanityData_es_ES[0], unk_1EA3D91C8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D91C8 - GetProfanityFilter_es_ES(void)::sProfanityData_es_ES[0]) >> 4));
}

void sub_1C5EFC10C(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 15792;
  uint64_t v4 = -15840;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_es_CL(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v300[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v4, "zorrones", "z*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v5, "zorronas", "z*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v6, "zorrona", "z******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v7, "zorras", "z*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v8, "zorra", "z****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "vergas", "v*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v10, "verga", "v****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v11, "valescallampa", "v************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v12, "valícallampa", "v***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v13, "unamierda", "u******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v14, "unahuea", "u******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v15, "tula", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v16, "tragasables", "t**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v17, "tortilleras", "t**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v18, "tortillera", "t*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v19, "tontos", "t*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v20, "tonto", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "tontas", "t*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v22, "tonta", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v23, "tetas", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v24, "teta", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v25, "sonrisavertical", "s**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v26, "sapoculiao", "s*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v27, "sapo", "s***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v28, "sapaculiá", "s********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v29, "sapa", "s***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v30, "sacohueas", "s********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v31, "sacohuea", "s*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "reculiao", "r*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v33, "reculiado", "r********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v34, "rechuchetumadre", "r**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v35, "rameras", "r******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v36, "ramera", "r*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v37, "rajas", "r****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v38, "raja", "r***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v39, "putos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v40, "putonas", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v41, "putona", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v42, "puto", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v43, "putito", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v44, "putita", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v45, "putero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v46, "putazos", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v47, "putazo", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v48, "puta", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v49, "putón", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v50, "porlamierda", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v51, "porlacresta", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v52, "porlachucha", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v53, "pinche", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v54, "picos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v55, "pico", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v56, "pichulas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v57, "pichula", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v58, "perroculiao", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v59, "perraculiá", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v60, "perra", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v61, "perkin", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v62, "pendejos", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v63, "pendejo", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v64, "pendejas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v65, "pendeja", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v66, "penétrame", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v67, "pelotudos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v68, "pelotudo", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v69, "paralahueá", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v70, "paradehuear", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "palpico", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v72, "palacallampa", "p***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v73, "pajero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v74, "pajera", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v75, "pajearse", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v76, "pajearnos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v77, "pajear", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v78, "pajéame", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v79, "pacos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v80, "paco", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v81, "paca", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v82, "monoculiao", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v83, "mongólico", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v84, "mongólica", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v85, "monaculiá", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v86, "mierda", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v87, "marimacho", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v88, "marimacha", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v89, "mariconesculeaos", "m***************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v90, "maricones", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v91, "mariconazos", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v92, "mariconazo", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v93, "mariconazas", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v94, "mariconaza", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "maricona", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v96, "marica", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v97, "maricónculeao", "m************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v98, "maricón", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v99, "maracoreculiao", "m*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v100, "maracoculiao", "m***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v101, "maraco", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v102, "maracas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v103, "maracareculiá", "m************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v104, "maracaculiá", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(v105, "maracaconchetumadre", "m******************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v106, "maraca", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v107, "manguaco", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v108, "mamasán", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v109, "mamar", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v110, "mamaditas", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v111, "mamadita", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v112, "mamadas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v113, "mamada", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v114, "mamón", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v115, "malparido", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v116, "malparida", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(v117, "méteteloenlaraja", "m***************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v118, "métemela", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v119, "lamepico", "l*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v120, "lameculos", "l********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v121, "lameculo", "l*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v122, "lámelo", "l*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v123, "lámela", "l*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v124, "joto", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v125, "jodimos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v126, "jodieron", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v127, "jodido", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v128, "jodidas", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v129, "jodida", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v130, "jodió", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v131, "jodes", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v132, "joder", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v133, "joda", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v134, "jódete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v135, "imbéciles", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v136, "imbécil", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v137, "idiotas", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v138, "idiota", "i*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v139, "huevona", "h******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v140, "huevear", "h******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v141, "huevada", "h******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v142, "huevóón", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v143, "huevá", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v144, "hueones", "h******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v145, "hueonas", "h*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v146, "hueona", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v147, "hueco", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v148, "hueca", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v149, "huear", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v150, "hueón", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v151, "hueás", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v152, "hueás", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v153, "hueá", "h***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v154, "hueá", "h***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v155, "hociconear", "h*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v156, "hociconeando", "h***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v157, "hocicona", "h*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v158, "hocico", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v159, "hocicón", "h******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v160, "hijosdeputa", "h**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v161, "hijodeputa", "h*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v162, "hijasdeputa", "h**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v163, "hijadeputa", "h*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(v164, "guachosculiaos", "g**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v165, "guachoculiao", "g***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v166, "guacho", "g*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v167, "guachasculiás", "g************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v168, "guachaculiá", "g**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v169, "guacha", "g*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v170, "giles", "g****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v171, "gila", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v172, "gil", "g**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v173, "follemos", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v174, "follas", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v175, "follarte", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v176, "follara", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v177, "follar", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v178, "follando", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v179, "follamos", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v180, "follaba", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v181, "follón", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v182, "follé", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v183, "flaites", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v184, "flaite", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v185, "feoculiao", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v186, "feaculiá", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v187, "fóllame", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v188, "estúpidos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v189, "estúpido", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v190, "estúpidas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v191, "estúpida", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v192, "encularse", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v193, "enculados", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v194, "enculado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v195, "desgraciado", "d**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v196, "desgraciada", "d**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v197, "culote", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v198, "culo", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v199, "culito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v200, "culiemos", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v201, "culiao", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v202, "culiado", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v203, "culiada", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v204, "culión", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v205, "culié", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v206, "culiá", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v207, "culear", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v208, "culéame", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v209, "ctm", "c**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v210, "csm", "c**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v211, "cresta", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v212, "conchetumadre", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v213, "conchesumadre", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v214, "conchemimare", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v215, "concha", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v216, "comolashuevas", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v217, "comolashueas", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v218, "comolapichula", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v219, "comolamierda", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v220, "comolacallampa", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v221, "comoelpico", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v222, "cojones", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v223, "cojón", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v224, "coños", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v225, "coño", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v226, "coñitos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v227, "coñito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v228, "chupapicos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v229, "chupapico", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v230, "chupapenes", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v231, "chupandopico", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v232, "chupamelsapo", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v233, "chupamelpico", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v234, "chupalaquecuelga", "c***************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v235, "chupaelpico", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v236, "chupaculos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v237, "chupa", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v238, "chucha", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v239, "chuchá", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v240, "chota", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v241, "choros", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v242, "choro", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v243, "choreo", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v244, "chorearon", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v245, "chorear", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v246, "chingada", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v247, "chetumare", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v248, "chapalapachala", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v249, "chúpamela", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v250, "chúpalo", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v251, "chúpala", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v252, "camboyanas", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v253, "camboyana", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v254, "callampa", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v255, "cagué", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v256, "cagaron", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v257, "cagarla", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v258, "cagar", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v259, "cagao", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v260, "cagados", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v261, "cagado", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v262, "cagadas", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v263, "cagada", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v264, "cagón", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v265, "cagás", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v266, "cagás", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v267, "cagá", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v268, "cachondo", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v269, "cachondeo", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v270, "cachonda", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v271, "cachita", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v272, "cacha", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v273, "cabrones", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v274, "cabronazos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v275, "cabronazo", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v276, "cabronas", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v277, "cabrona", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v278, "cabrear", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v279, "cabrón", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v280, "cabréate", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v281, "buenapalpico", "b***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v282, "boludo", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v283, "boluda", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v284, "bastardo", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v285, "bastarda", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v286, "amariconados", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v287, "amariconado", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v288, "amariconadas", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v289, "amariconada", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v290, "alamierda", "a********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v291, "alachucha", "a*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v292, "ahuevonado", "a*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v293, "ahueonao", "a*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v294, "ándatealamierda", "a**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v295, "ándatealacresta", "a*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v296, "ándatealachucha", "a**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v297, "Agilao", "a*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v298, "Agilados", "a*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v299, "Agilada", "a******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v300, "Agilá", "a****");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_es_CL(void)::sProfanityData_es_CL, (uint64_t)v4, 0x129uLL);
    for (uint64_t i = 0; i != -1782; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v300[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_es_CL(void)::sProfanityData_es_CL, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_es_CL(void)::sProfanityData_es_CL[0], unk_1EA3D91E8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D91E8 - GetProfanityFilter_es_CL(void)::sProfanityData_es_CL[0]) >> 4));
}

void sub_1C5EFE8C4(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 14208;
  uint64_t v4 = -14256;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_en_US(void *a1)
{
  void v3[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v3, "ape shit", "a*****t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_US(void)::sProfanityData_en_US, (uint64_t)v3, 1uLL);
    std::pair<std::string const,std::string>::~pair((uint64_t)v3);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_US(void)::sProfanityData_en_US, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_US(void)::sProfanityData_en_US[0], unk_1EA3D9208, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D9208 - GetProfanityFilter_en_US(void)::sProfanityData_en_US[0]) >> 4));
}

void sub_1C5EFEA34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_en_NZ(void *a1)
{
  void v21[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v4, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v5, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v7, "squits", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v8, "smeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v9, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v10, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v12, "horis", "h***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v13, "hories", "h***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v14, "hori", "h**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v15, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v16, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v17, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v18, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v19, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v20, "abo", "a*o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v21, "abbo", "a**o");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_NZ(void)::sProfanityData_en_NZ, (uint64_t)v4, 0x12uLL);
    for (uint64_t i = 102; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v4[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_NZ(void)::sProfanityData_en_NZ, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_NZ(void)::sProfanityData_en_NZ[0], unk_1EA3D9228, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D9228 - GetProfanityFilter_en_NZ(void)::sProfanityData_en_NZ[0]) >> 4));
}

void sub_1C5EFED8C(_Unwind_Exception *a1)
{
  for (uint64_t i = 816; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_en_IN(void *a1)
{
  void v3[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v3, "ape shit", "a*****t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_IN(void)::sProfanityData_en_IN, (uint64_t)v3, 1uLL);
    std::pair<std::string const,std::string>::~pair((uint64_t)v3);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_IN(void)::sProfanityData_en_IN, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_IN(void)::sProfanityData_en_IN[0], unk_1EA3D9248, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D9248 - GetProfanityFilter_en_IN(void)::sProfanityData_en_IN[0]) >> 4));
}

void sub_1C5EFEEF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_en_CA(void *a1)
{
  void v38[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v4, "stfo", "s**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v5, "skankasses", "s********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v6, "skankass's", "s********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v7, "skankass", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v8, "queer", "q***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v9, "queef", "q***f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v10, "peckerwood", "p********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v11, "nutsacks'", "n*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v12, "nutsacks", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v13, "nutsack's", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v14, "nutsack", "n*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v15, "muffdivers'", "m*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v16, "muffdivers", "m********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v17, "muffdiver's", "m*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v18, "muffdiver", "m*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v19, "koochie", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v20, "kooch", "k***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v21, "jackoffs'", "j*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v22, "jackoff's", "j*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v23, "hooha", "h***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v24, "hoochies", "h******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v25, "hoochie's", "h*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v26, "hoochie", "h*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v27, "douchebag", "d*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v28, "dbags", "d***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v29, "dbag's", "d****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v30, "dbag", "d**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v31, "bumholes", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v32, "bumhole's", "b*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v33, "bumhole", "b*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v34, "buggars", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v35, "buggar's", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v36, "bitchfaces'", "b*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v37, "bitchfaces", "b********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "bitchface", "b*******e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_CA(void)::sProfanityData_en_CA, (uint64_t)v4, 0x23uLL);
    for (uint64_t i = 204; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v4[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_CA(void)::sProfanityData_en_CA, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_CA(void)::sProfanityData_en_CA[0], unk_1EA3D9268, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D9268 - GetProfanityFilter_en_CA(void)::sProfanityData_en_CA[0]) >> 4));
}

void sub_1C5EFF450(_Unwind_Exception *a1)
{
  for (uint64_t i = 1632; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_en_ZA(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  void v133[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v4, "wog’s", "w**’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v5, "wogs’", "w***’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v6, "wogs", "w*gs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v7, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v8, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v9, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v10, "unfucking", "u*****ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v11, "unfuckable", "u********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v12, "skullfucked", "s********ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v13, "skullfuck", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v14, "shyster’s", "s******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v15, "shysters’", "s*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v16, "shysters", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v17, "shyster", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v18, "quim", "q**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "poes", "p**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v20, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v21, "naai", "n**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v22, "mong’s", "m***’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v23, "mongs’", "m****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v24, "mongs", "m***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v25, "mongoloid’s", "m********’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v26, "mongoloids’", "m*********’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v27, "mongoloids", "m*******ds");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v28, "mongoloid", "m*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v29, "mong", "m**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v30, "mofo’s", "m***’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v31, "mofos’", "m****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v32, "mofos", "m***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v33, "moffie’s", "m*****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v34, "moffies’", "m******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v35, "moffies", "m*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v36, "moffie", "m***ie");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v37, "kraut’s", "k****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "krauts’", "k*****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v39, "kak", "k*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v40, "kaffirs'", "k******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v41, "kaffirs", "k****rs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v42, "kaffir's", "k*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v43, "kaffir", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v44, "kaffers'", "k******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v45, "kaffers", "k****rs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v46, "kaffer's", "k*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v47, "kaffer", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v48, "jizzes", "j***es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v49, "jizzed", "j***ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v50, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v51, "jackoff’s", "j******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v52, "jackoffs’", "j*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v53, "jackoffs", "j******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v54, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v55, "honkies’", "h******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v56, "gringo’s", "g*****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v57, "gringos’", "g******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v58, "golliwog’s", "g*******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v59, "golliwogs’", "g********’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v60, "golliwogs", "g*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v62, "gicker’s", "g*****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v63, "gickers’", "g******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "gickers", "g*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v65, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v66, "fuckwit’s", "f******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v67, "fuckwits’", "f*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v68, "fuckwits", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v69, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v70, "fuckwad’s", "f******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v71, "fuckwads’", "f*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "fuckwads", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v73, "fucker’s", "f*****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v74, "fuckers’", "f******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v75, "foks", "f*ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v76, "fokken", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v77, "fok", "f*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v78, "felching", "f****ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v79, "felches", "f****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v80, "felcher’s", "f******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v81, "felchers’", "f*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v82, "felchers", "f*****rs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v83, "felcher", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "felched", "f****ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v85, "felch", "f***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v86, "fag’s", "f**’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "fags’", "f***’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v88, "facefucks", "f*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v89, "facefucking", "f*******ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v90, "facefucked", "f*******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v91, "facefuck", "f******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v92, "cunted", "c****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v93, "cock’s", "c***’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v94, "cocks’", "c****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v95, "cocks", "c***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v96, "cock", "c**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v97, "chinamen’s", "c*******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v98, "chinaman’s", "c*******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v99, "chickenshit’s", "c**********’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v100, "chickenshits’", "c***********’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v101, "boong’s", "b****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v102, "boongs’", "b*****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v103, "boongs", "b****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v104, "boonga’s", "b*****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v105, "boongas’", "b******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v106, "boongas", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "boonga", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v108, "boong", "b***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v109, "bollock’s", "b******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v110, "bollocks’", "b*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v111, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v112, "bollock", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v113, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v114, "blow job’s", "b******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v115, "blow jobs’", "b*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v116, "blow jobs", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v117, "bitch’s", "b****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v118, "bitches’", "b******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v119, "bitches", "b****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v120, "bitch", "b***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v121, "bellend’s", "b******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v122, "bellends’", "b*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v123, "bellends", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v124, "bellend", "b*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v125, "arsefucking", "a*******ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v126, "argie’s", "a****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v127, "argies’", "a*****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v128, "argies", "a****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v129, "argie", "a***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v130, "Hottentot’s", "H********’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v131, "Hottentots’", "H*********’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v132, "Hottentots", "H*******ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v133, "Hottentot", "H*******t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_ZA(void)::sProfanityData_en_ZA, (uint64_t)v4, 0x82uLL);
    for (uint64_t i = 0; i != -780; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v133[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_ZA(void)::sProfanityData_en_ZA, &dword_1C5C1E000);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_en_ZA(void)::sProfanityData_en_ZA[0], unk_1EA3D9288, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D9288 - GetProfanityFilter_en_ZA(void)::sProfanityData_en_ZA[0]) >> 4));
}

void sub_1C5F005D8(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 6192;
  uint64_t v4 = -6240;
  do
  {
    uint64_t v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_en_SG(void *a1)
{
  void v20[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v4, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v5, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v7, "squits", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v8, "smeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "shyster", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v10, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v11, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v12, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v14, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v16, "boonga", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v17, "boong", "b***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v18, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v19, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v20, "argie", "a***e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_SG(void)::sProfanityData_en_SG, (uint64_t)v4, 0x11uLL);
    for (uint64_t i = 96; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v4[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_SG(void)::sProfanityData_en_SG, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_SG(void)::sProfanityData_en_SG[0], unk_1EA3D92A8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D92A8 - GetProfanityFilter_en_SG(void)::sProfanityData_en_SG[0]) >> 4));
}

void sub_1C5F00948(_Unwind_Exception *a1)
{
  for (uint64_t i = 768; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_en_GB(void *a1)
{
  void v33[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v4, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v5, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v7, "squits", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v8, "smeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v9, "slag", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v10, "shyster", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v11, "quim", "q**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v12, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v13, "mongoloid", "m*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v14, "mong", "m**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v15, "minge", "m***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v16, "knobheads", "k******ds");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v17, "knobhead", "k******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v18, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v19, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v20, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v22, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v23, "felcher", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v24, "felch", "f***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v25, "fanny", "f***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v26, "cunted", "c****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "boonga", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v28, "boong", "b***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v29, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v30, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v31, "bint", "b**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v32, "bellend", "b*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v33, "argie", "a***e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_GB(void)::sProfanityData_en_GB, (uint64_t)v4, 0x1EuLL);
    for (uint64_t i = 174; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v4[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_GB(void)::sProfanityData_en_GB, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_GB(void)::sProfanityData_en_GB[0], unk_1EA3D92C8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D92C8 - GetProfanityFilter_en_GB(void)::sProfanityData_en_GB[0]) >> 4));
}

void sub_1C5F00E38(_Unwind_Exception *a1)
{
  for (uint64_t i = 1392; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_en_AU(void *a1)
{
  void v18[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v4, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v5, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v7, "squits", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v8, "smeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v9, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v10, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v12, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v13, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v14, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v15, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v16, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v17, "abo", "a*o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v18, "abbo", "a**o");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_AU(void)::sProfanityData_en_AU, (uint64_t)v4, 0xFuLL);
    for (uint64_t i = 84; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v4[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_AU(void)::sProfanityData_en_AU, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_AU(void)::sProfanityData_en_AU[0], unk_1EA3D92E8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D92E8 - GetProfanityFilter_en_AU(void)::sProfanityData_en_AU[0]) >> 4));
}

void sub_1C5F01168(_Unwind_Exception *a1)
{
  for (uint64_t i = 672; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void *GetProfanityFilter_en_IE(void *a1)
{
  void v44[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v4, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v5, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v7, "tosspot", "t*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "tosser", "t****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "squits", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v10, "spastic", "s*****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v11, "smeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v12, "shyster", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v13, "scrote", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v14, "quim", "q**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v15, "pox", "p*x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v16, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v17, "munter", "m****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v18, "mongoloid", "m*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "mong", "m**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v20, "mong", "m**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v21, "langered", "l******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "langer", "l****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v23, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v24, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v25, "gowl", "g**l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v26, "gombeen", "g*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v27, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v28, "gobshite", "g******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v29, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v30, "geebag", "g****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v31, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v32, "fucked", "f****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v33, "felcher", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v34, "felch", "f***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v35, "cuntish", "c*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v36, "cunted", "c****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v37, "boonga", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v38, "boong", "b***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v39, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v40, "bollocked", "b*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v41, "bollixed", "b******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v42, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v43, "bellend", "b*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v44, "argie", "a***e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_IE(void)::sProfanityData_en_IE, (uint64_t)v4, 0x29uLL);
    for (uint64_t i = 240; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v4[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_IE(void)::sProfanityData_en_IE, &dword_1C5C1E000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_IE(void)::sProfanityData_en_IE[0], unk_1EA3D9308, 0xAAAAAAAAAAAAAAABLL * ((unk_1EA3D9308 - GetProfanityFilter_en_IE(void)::sProfanityData_en_IE[0]) >> 4));
}

void sub_1C5F017A4(_Unwind_Exception *a1)
{
  for (uint64_t i = 1920; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0183C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01890(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F018E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01938(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0198C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F019E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01A34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01A88(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01ADC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01B30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[26],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01B84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01BD8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01C2C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01C80(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01CD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01D28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01D7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01DD0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01E24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01E78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01ECC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01F20(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01F74(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F01FC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0201C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02070(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F020C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02118(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0216C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F021C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02214(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02268(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F022BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02310(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02364(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F023B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0240C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02460(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F024B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02508(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0255C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F025B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[2],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02604(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02658(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F026AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02700(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02754(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F027A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F027FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02850(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F028A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[15],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F028F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0294C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F029A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F029F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[21],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02A48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[23],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02A9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02AF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[15],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02B44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02B98(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02BEC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02C40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02C94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[43],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02CE8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02D3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[34],char const(&)[14],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02D90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[46],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02DE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[50],char const(&)[20],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02E38(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02E8C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02EE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02F34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02F88(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[11],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F02FDC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03030(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[14],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03084(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F030D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0312C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03180(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F031D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03228(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0327C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F032D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03324(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03378(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F033CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03420(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[36],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03474(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F034C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0351C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03570(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F035C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03618(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0366C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F036C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03714(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03768(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F037BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[40],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03810(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[49],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03864(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F038B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0390C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[20],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03960(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[19],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F039B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[21],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03A08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[22],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03A5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[23],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03AB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[24],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03B04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[25],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03B58(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03BAC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03C00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03C54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03CA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03CFC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[15],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03D50(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[28],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03DA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[26],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03DF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[29],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03E4C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[27],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03EA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03EF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03F48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03F9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F03FF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F04044(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F04098(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F040EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F04140(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F04194(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F041E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[39],char const(&)[22],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0423C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F04290(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F042E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[15],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F04338(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0438C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F043E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[14],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F04434(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[15],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F04488(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F044DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[37],char const(&)[21],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F04530(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[35],char const(&)[20],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F04584(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F045D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0462C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[22],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F04680(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F046D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[25],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F04728(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[21],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0477C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[20],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F047D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F04824(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[19],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F04878(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F048CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[22],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F04920(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v3 = a1;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

uint64_t siri::dialogengine::FileInfoCache::FileInfoCache(uint64_t a1, long long *a2, double a3)
{
  *(void *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  int v5 = (std::string *)(a1 + 64);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(double *)(a1 + 88) = a3;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = a1 + 104;
  return a1;
}

void sub_1C5F04A98(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::FileInfoCache::FileExists(uint64_t a1, uint64_t a2)
{
  std::mutex::lock((std::mutex *)a1);
  uint64_t v4 = *(void *)(a1 + 104);
  if (!v4) {
    goto LABEL_8;
  }
  int v5 = (uint64_t *)(a1 + 104);
  do
  {
    BOOL v6 = std::less<std::string>::operator()[abi:ne180100](a1 + 112, (const void **)(v4 + 32), (const void **)a2);
    uint64_t v7 = (uint64_t *)(v4 + 8);
    if (!v6)
    {
      uint64_t v7 = (uint64_t *)v4;
      int v5 = (uint64_t *)v4;
    }
    uint64_t v4 = *v7;
  }
  while (*v7);
  if (v5 == (uint64_t *)(a1 + 104)
    || std::less<std::string>::operator()[abi:ne180100](a1 + 112, (const void **)a2, (const void **)v5 + 4))
  {
LABEL_8:
    siri::dialogengine::JoinPath(a2, a1 + 64, (uint64_t)&__p);
    char v8 = *(uint64_t **)(a1 + 104);
    uint64_t v9 = (uint64_t **)(a1 + 104);
    uint64_t v10 = (uint64_t **)(a1 + 104);
    if (!v8) {
      goto LABEL_17;
    }
    uint64_t v9 = (uint64_t **)(a1 + 104);
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (uint64_t **)v8;
        unint64_t v11 = (const void **)(v8 + 4);
        if (!std::less<std::string>::operator()[abi:ne180100](a1 + 112, (const void **)a2, (const void **)v8 + 4)) {
          break;
        }
        char v8 = *v10;
        uint64_t v9 = v10;
        if (!*v10) {
          goto LABEL_17;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](a1 + 112, v11, (const void **)a2)) {
        break;
      }
      uint64_t v9 = v10 + 1;
      char v8 = v10[1];
      if (!v8) {
        goto LABEL_17;
      }
    }
    int v5 = *v9;
    if (!*v9)
    {
LABEL_17:
      uint64_t v12 = (char *)operator new(0x68uLL);
      int v5 = (uint64_t *)v12;
      v31.tv_sec = (__darwin_time_t)v12;
      *(void *)&v31.tv_usec = a1 + 104;
      LOBYTE(v32) = 0;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v12 + 32), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *((_OWORD *)v12 + 2) = *(_OWORD *)a2;
        *((void *)v12 + 6) = *(void *)(a2 + 16);
      }
      uint64_t v13 = (std::string *)(v5 + 7);
      uint64_t v14 = *(void *)(a1 + 88);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v5[9] = __p.__r_.__value_.__r.__words[2];
      }
      v5[10] = v14;
      *((unsigned char *)v5 + 88) = 0;
      v5[12] = 0;
      LOBYTE(v32) = 1;
      uint64_t *v5 = 0;
      v5[1] = 0;
      unint64_t v5[2] = (uint64_t)v10;
      void *v9 = v5;
      uint64_t v15 = **(void **)(a1 + 96);
      uint64_t v16 = v5;
      if (v15)
      {
        *(void *)(a1 + 96) = v15;
        uint64_t v16 = *v9;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 104), v16);
      ++*(void *)(a1 + 112);
      v31.tv_sec = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v31);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  gettimeofday(&v31, 0);
  double v17 = (double)v31.tv_usec / 1000000.0 + (double)v31.tv_sec;
  if (*((double *)v5 + 12) >= v17 - *((double *)v5 + 10))
  {
    BOOL v18 = *((unsigned char *)v5 + 88) != 0;
  }
  else
  {
    *((double *)v5 + 12) = v17;
    BOOL v18 = siri::dialogengine::FileExists(v5 + 7);
    if (*((unsigned char *)v5 + 88) != v18)
    {
      std::operator+<char>();
      uint64_t v19 = std::string::append(&v29, "' exists: ");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (*((unsigned char *)v5 + 88)) {
        BOOL v21 = "true";
      }
      else {
        BOOL v21 = "false";
      }
      std::string::basic_string[abi:ne180100]<0>(v27, v21);
      if ((v28 & 0x80u) == 0) {
        uint64_t v22 = v27;
      }
      else {
        uint64_t v22 = (void **)v27[0];
      }
      if ((v28 & 0x80u) == 0) {
        std::string::size_type v23 = v28;
      }
      else {
        std::string::size_type v23 = (std::string::size_type)v27[1];
      }
      std::string::size_type v24 = std::string::append(&__p, (const std::string::value_type *)v22, v23);
      timeval v25 = *(timeval *)&v24->__r_.__value_.__l.__data_;
      std::string::size_type v32 = v24->__r_.__value_.__r.__words[2];
      timeval v31 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::Debug((siri::dialogengine *)&v31);
      if (SHIBYTE(v32) < 0) {
        operator delete((void *)v31.tv_sec);
      }
      if ((char)v28 < 0) {
        operator delete(v27[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      *((unsigned char *)v5 + 88) = v18;
    }
  }
  std::mutex::unlock((std::mutex *)a1);
  return v18;
}

void sub_1C5F04E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::mutex::unlock(v33);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FileInfoCache::Clear(std::mutex *this)
{
  std::mutex::lock(this);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)&this[1].__m_.__opaque[32]);
  *(void *)&this[1].__m_.__opaque[24] = (char *)this + 104;
  *(void *)&this[1].__m_.__opaque[40] = 0;
  *(void *)&this[1].__m_.__opaque[32] = 0;
  std::mutex::unlock(this);
}

void siri::dialogengine::ValidateXmlElementVersion(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!a1)
  {
LABEL_10:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    return;
  }
  uint64_t v7 = *(void *)(a1 + 504);
  BOOL v6 = *(std::__shared_weak_count **)(a1 + 512);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    BOOL v9 = v8 == 0;
    if (v6) {
      goto LABEL_8;
    }
  }
  else
  {
    BOOL v9 = 1;
    if (v6) {
LABEL_8:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v9) {
    goto LABEL_10;
  }
  {
    operator new();
  }
  uint64_t v10 = (std::once_flag::_State_type *)siri::dialogengine::GetXmlElementVersionsMap(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetXmlElementVersionsMap(void)::flag, memory_order_acquire) != -1)
  {
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    std::__call_once(v10, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetXmlElementVersionsMap(void)::$_0 &&>>);
  }
  uint64_t v11 = siri::dialogengine::GetXmlElementVersionsMap(void)::xmlElementVersionsMap;
  siri::dialogengine::StringToLower(a2, (uint64_t)&v32);
  uint64_t v12 = std::__tree<std::string>::find<std::string>(v11, (const void **)&v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (v11 + 8 == v12)
  {
LABEL_53:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    return;
  }
  uint64_t v13 = *(void *)(a1 + 504);
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 512);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(v13 + 175) < 0) {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(v13 + 152), *(void *)(v13 + 160));
  }
  else {
    std::string v32 = *(std::string *)(v13 + 152);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (!siri::dialogengine::IsFeatureVersionGreaterThanFileVersion(v12 + 56, (uint64_t)&v32))
  {
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    goto LABEL_53;
  }
  std::operator+<char>();
  uint64_t v15 = std::string::append(&v28, "' requires format version ");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  int v17 = *(char *)(v12 + 79);
  if (v17 >= 0) {
    BOOL v18 = (const std::string::value_type *)(v12 + 56);
  }
  else {
    BOOL v18 = *(const std::string::value_type **)(v12 + 56);
  }
  if (v17 >= 0) {
    std::string::size_type v19 = *(unsigned __int8 *)(v12 + 79);
  }
  else {
    std::string::size_type v19 = *(void *)(v12 + 64);
  }
  long long v20 = std::string::append(&v29, v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  uint64_t v22 = std::string::append(&v30, " but CAT file has version ");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v24 = &v32;
  }
  else {
    std::string::size_type v24 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  std::string::size_type v26 = std::string::append(&v31, (const std::string::value_type *)v24, size);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  a3[2] = *((void *)&v26->__r_.__value_.__l + 2);
  *(_OWORD *)a3 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F0524C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

uint64_t siri::dialogengine::IsFeatureVersionGreaterThanFileVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3) {
    return siri::dialogengine::VersionGreaterThan(a1, a2);
  }
  else {
    return 0;
  }
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetXmlElementVersionsMap(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5F054D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v51 = 336;
  while (1)
  {
    uint64_t v52 = v49 + v51;
    if (*(char *)(v49 + v51 - 1) < 0) {
      operator delete(*(void **)(v52 - 24));
    }
    if (*(char *)(v52 - 25) < 0) {
      operator delete(*(void **)(v52 - 48));
    }
    v51 -= 48;
    if (!v51)
    {
      MEMORY[0x1C8796D70](v48, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F055CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F05620(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[4],0>(void *a1, char *a2)
{
  uint64_t v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "2.0");
  return a1;
}

void sub_1C5F05674(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F056C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ValidateXmlAttributeVersion(void *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (a1)
  {
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v66, (const siri::dialogengine::RequestInfo *)(a1 + 1));
    char v8 = v67;
    siri::dialogengine::RequestInfo::~RequestInfo((void **)&v66.__r_.__value_.__l.__data_);
    if ((v8 & 0x80) == 0)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(a4, "");
      return;
    }
    uint64_t v10 = a1[63];
    BOOL v9 = (std::__shared_weak_count *)a1[64];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!v10)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        goto LABEL_3;
      }
      uint64_t v11 = (char *)a2 + 23;
      uint64_t v12 = (size_t *)(a2 + 1);
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = (const void *)*((unsigned __int8 *)a2 + 23);
      }
      else {
        uint64_t v13 = a2[1];
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      if (!v13) {
        goto LABEL_3;
      }
    }
    else
    {
      if (!v10) {
        goto LABEL_3;
      }
      uint64_t v11 = (char *)a2 + 23;
      uint64_t v14 = (const void *)*((unsigned __int8 *)a2 + 23);
      uint64_t v12 = (size_t *)(a2 + 1);
      if ((char)v14 < 0) {
        uint64_t v14 = a2[1];
      }
      if (!v14) {
        goto LABEL_3;
      }
    }
    {
      operator new();
    }
    uint64_t v15 = (std::once_flag::_State_type *)siri::dialogengine::GetXmlAttributeVersionsMap(void)::flag;
    if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetXmlAttributeVersionsMap(void)::flag, memory_order_acquire) != -1)
    {
      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
      v63[0] = &v66;
      std::__call_once(v15, v63, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetXmlAttributeVersionsMap(void)::$_0 &&>>);
    }
    long long v16 = (void *)siri::dialogengine::GetXmlAttributeVersionsMap(void)::xmlAttributeVersionsMap;
    if (*v11 >= 0) {
      size_t v17 = *v11;
    }
    else {
      size_t v17 = *v12;
    }
    BOOL v18 = &v66;
    std::string::basic_string[abi:ne180100]((uint64_t)&v66, v17 + 1);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      BOOL v18 = (std::string *)v66.__r_.__value_.__r.__words[0];
    }
    if (v17)
    {
      if (*((char *)a2 + 23) >= 0) {
        std::string::size_type v19 = a2;
      }
      else {
        std::string::size_type v19 = *a2;
      }
      memmove(v18, v19, v17);
    }
    *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 47;
    int v20 = *(char *)(a3 + 23);
    if (v20 >= 0) {
      long long v21 = (const std::string::value_type *)a3;
    }
    else {
      long long v21 = *(const std::string::value_type **)a3;
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v22 = *(void *)(a3 + 8);
    }
    long long v23 = std::string::append(&v66, v21, v22);
    std::string::size_type v24 = (std::string::value_type *)v23->__r_.__value_.__r.__words[0];
    std::string::size_type size = v23->__r_.__value_.__l.__size_;
    v65[0] = v23->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v65 + 3) = *(_DWORD *)((char *)&v23->__r_.__value_.__r.__words[2] + 3);
    int v26 = SHIBYTE(v23->__r_.__value_.__r.__words[2]);
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    std::string v29 = (void *)*v16;
    std::string v28 = v16 + 1;
    long long v27 = v29;
    if (v26 < 0)
    {
      std::string::__init_copy_ctor_external(&v64, v24, size);
    }
    else
    {
      v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
      v64.__r_.__value_.__l.__size_ = size;
      LODWORD(v64.__r_.__value_.__r.__words[2]) = v65[0];
      *(_DWORD *)((char *)&v64.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v65 + 3);
      *((unsigned char *)&v64.__r_.__value_.__s + 23) = v26;
    }
    if (v27 != v28)
    {
      while (!siri::dialogengine::StringsEqual((uint64_t)&v64, (uint64_t)(v27 + 4)))
      {
        std::string v30 = (void *)v27[1];
        if (v30)
        {
          do
          {
            std::string v31 = v30;
            std::string v30 = (void *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            std::string v31 = (void *)v27[2];
            BOOL v32 = *v31 == (void)v27;
            long long v27 = v31;
          }
          while (!v32);
        }
        long long v27 = v31;
        if (v31 == v28)
        {
          long long v27 = v28;
          break;
        }
      }
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (v27 != v28)
    {
      uint64_t v33 = a1[63];
      BOOL v34 = (std::__shared_weak_count *)a1[64];
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(char *)(v33 + 175) < 0) {
        std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(v33 + 152), *(void *)(v33 + 160));
      }
      else {
        std::string v66 = *(std::string *)(v33 + 152);
      }
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      if (siri::dialogengine::IsFeatureVersionGreaterThanFileVersion((uint64_t)(v27 + 7), (uint64_t)&v66))
      {
        siri::dialogengine::StringSplit((unsigned __int8 *)v27 + 32, "/", v63);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63[1] - v63[0]) >> 3) <= 1) {
          uint64_t v35 = a3;
        }
        else {
          uint64_t v35 = v63[0] + 24;
        }
        if (*(char *)(v35 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v35, *(void *)(v35 + 8));
        }
        else {
          std::string v62 = *(std::string *)v35;
        }
        std::operator+<char>();
        int64x2_t v36 = std::string::append(&v56, "' on element '");
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        int v38 = *((char *)a2 + 23);
        if (v38 >= 0) {
          uint64_t v39 = (const std::string::value_type *)a2;
        }
        else {
          uint64_t v39 = (const std::string::value_type *)*a2;
        }
        if (v38 >= 0) {
          std::string::size_type v40 = *((unsigned __int8 *)a2 + 23);
        }
        else {
          std::string::size_type v40 = (std::string::size_type)a2[1];
        }
        std::string::size_type v41 = std::string::append(&v57, v39, v40);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        uint64_t v43 = std::string::append(&v58, "' requires format version ");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        int v45 = *((char *)v27 + 79);
        if (v45 >= 0) {
          char v46 = (const std::string::value_type *)(v27 + 7);
        }
        else {
          char v46 = (const std::string::value_type *)v27[7];
        }
        if (v45 >= 0) {
          std::string::size_type v47 = *((unsigned __int8 *)v27 + 79);
        }
        else {
          std::string::size_type v47 = v27[8];
        }
        uint64_t v48 = std::string::append(&v59, v46, v47);
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        uint64_t v50 = std::string::append(&v60, " but CAT file has version ");
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v52 = &v66;
        }
        else {
          uint64_t v52 = (std::string *)v66.__r_.__value_.__r.__words[0];
        }
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v53 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v53 = v66.__r_.__value_.__l.__size_;
        }
        long long v54 = std::string::append(&v61, (const std::string::value_type *)v52, v53);
        long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        a4[2] = *((void *)&v54->__r_.__value_.__l + 2);
        *(_OWORD *)a4 = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        goto LABEL_107;
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(a4, "");
LABEL_107:
    if (v26 < 0) {
      operator delete(v24);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(a4, "");
}

void sub_1C5F05CB0(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetXmlAttributeVersionsMap(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5F06128(_Unwind_Exception *a1)
{
  uint64_t v4 = 1008;
  while (1)
  {
    uint64_t v5 = v2 + v4;
    if (*(char *)(v2 + v4 - 1) < 0) {
      operator delete(*(void **)(v5 - 24));
    }
    if (*(char *)(v5 - 25) < 0) {
      operator delete(*(void **)(v5 - 48));
    }
    v4 -= 48;
    if (!v4)
    {
      MEMORY[0x1C8796D70](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F06248(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F0629C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F062F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5F06344(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[4],0>(void *a1, char *a2)
{
  uint64_t v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "1.4");
  return a1;
}

void sub_1C5F06398(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ValidateVariableVersion(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!a1)
  {
LABEL_10:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    return;
  }
  uint64_t v7 = *(void *)(a1 + 504);
  BOOL v6 = *(std::__shared_weak_count **)(a1 + 512);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    BOOL v9 = v8 == 0;
    if (v6) {
      goto LABEL_8;
    }
  }
  else
  {
    BOOL v9 = 1;
    if (v6) {
LABEL_8:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v9) {
    goto LABEL_10;
  }
  siri::dialogengine::GetLiteralType((std::string *)a2, __s1);
  size_t v10 = strlen(siri::dialogengine::TYPE_UNKNOWN);
  if ((__s1[23] & 0x80000000) == 0)
  {
    if (v10 == __s1[23] && !memcmp(__s1, siri::dialogengine::TYPE_UNKNOWN, v10)) {
      goto LABEL_22;
    }
LABEL_88:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    return;
  }
  if (v10 != *(void *)&__s1[8])
  {
    operator delete(*(void **)__s1);
    goto LABEL_88;
  }
  if (v10 == -1) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v11 = *(void **)__s1;
  int v12 = memcmp(*(const void **)__s1, siri::dialogengine::TYPE_UNKNOWN, v10);
  operator delete(v11);
  if (v12) {
    goto LABEL_88;
  }
LABEL_22:
  siri::dialogengine::StringSplit((unsigned __int8 *)a2, ".", &v60);
  memset(&v59, 0, sizeof(v59));
  memset(&v58, 0, sizeof(v58));
  uint64_t v13 = v60;
  if (v61 != v60)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    char v47 = 0;
    while (1)
    {
      std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v59.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        std::string::append(&v59, ".");
        uint64_t v13 = v60;
      }
      uint64_t v17 = v13 + v14;
      int v18 = *(char *)(v17 + 23);
      if (v18 >= 0) {
        std::string::size_type v19 = (const std::string::value_type *)v17;
      }
      else {
        std::string::size_type v19 = *(const std::string::value_type **)v17;
      }
      if (v18 >= 0) {
        std::string::size_type v20 = *(unsigned __int8 *)(v17 + 23);
      }
      else {
        std::string::size_type v20 = *(void *)(v17 + 8);
      }
      std::string::append(&v59, v19, v20);
      __s1[0] = 0;
      char v57 = 0;
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v61 - v60) >> 3) - 1;
      siri::dialogengine::ResolveType((void **)__s1, a1, (uint64_t)&v59, v15 == v21, (uint64_t)&__p);
      if (v54 < 0) {
        operator delete(__p);
      }
      if (!v57) {
        goto LABEL_85;
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v52, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
      }
      else {
        std::string v52 = v56;
      }
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v22 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v22 = v52.__r_.__value_.__l.__size_;
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v52.__r_.__value_.__l.__data_);
        if (!v22) {
          goto LABEL_83;
        }
      }
      else if (!v22)
      {
        goto LABEL_83;
      }
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v23 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v23 = v58.__r_.__value_.__l.__size_;
      }
      char v24 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      if (!v23) {
        goto LABEL_59;
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v52, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
      }
      else {
        std::string v52 = v56;
      }
      int v25 = siri::dialogengine::VersionGreaterThan((uint64_t)&v52, (uint64_t)&v58);
      int v26 = v25;
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v52.__r_.__value_.__l.__data_);
        if (!v26) {
          goto LABEL_83;
        }
LABEL_58:
        char v24 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
LABEL_59:
        if (v24 < 0) {
          std::string::__init_copy_ctor_external(&v52, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
        }
        else {
          std::string v52 = v56;
        }
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        std::string v58 = v52;
        if (v15 != v21) {
          goto LABEL_71;
        }
        if ((__s1[31] & 0x80000000) != 0) {
          std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)&__s1[8], *(std::string::size_type *)&__s1[16]);
        }
        else {
          std::string v52 = *(std::string *)&__s1[8];
        }
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) == 8)
          {
            long long v27 = &v52;
            goto LABEL_73;
          }
LABEL_71:
          char v28 = 0;
LABEL_82:
          v47 |= v28;
          goto LABEL_83;
        }
        long long v27 = (std::string *)v52.__r_.__value_.__r.__words[0];
        if (v52.__r_.__value_.__l.__size_ == 8)
        {
LABEL_73:
          if (v27->__r_.__value_.__r.__words[0] == 0x676E697274536F74)
          {
            std::string::basic_string[abi:ne180100]<0>(&v51, "toString");
            char v29 = siri::dialogengine::StringContains((char **)a2, (char *)&v51);
            if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v51.__r_.__value_.__l.__data_);
            }
            char v28 = v29 ^ 1;
            if ((*((unsigned char *)&v52.__r_.__value_.__s + 23) & 0x80) == 0) {
              goto LABEL_82;
            }
          }
          else
          {
            char v28 = 0;
            if ((*((unsigned char *)&v52.__r_.__value_.__s + 23) & 0x80) == 0) {
              goto LABEL_82;
            }
          }
          long long v27 = (std::string *)v52.__r_.__value_.__r.__words[0];
        }
        else
        {
          char v28 = 0;
        }
        operator delete(v27);
        goto LABEL_82;
      }
      if (v25) {
        goto LABEL_58;
      }
LABEL_83:
      if (v57) {
        siri::dialogengine::ObjectProperty::~ObjectProperty((void **)__s1);
      }
LABEL_85:
      ++v15;
      uint64_t v13 = v60;
      v14 += 24;
      if (0xAAAAAAAAAAAAAAABLL * ((v61 - v60) >> 3) <= v15) {
        goto LABEL_90;
      }
    }
  }
  char v47 = 0;
LABEL_90:
  if (*(_DWORD *)(a1 + 8) != 1)
  {
    uint64_t v30 = *(void *)(a1 + 504);
    std::string v31 = *(std::__shared_weak_count **)(a1 + 512);
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(char *)(v30 + 175) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__s1, *(const std::string::value_type **)(v30 + 152), *(void *)(v30 + 160));
    }
    else
    {
      *(_OWORD *)std::string __s1 = *(_OWORD *)(v30 + 152);
      *(void *)&__s1[16] = *(void *)(v30 + 168);
    }
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    if (siri::dialogengine::IsFeatureVersionGreaterThanFileVersion((uint64_t)&v58, (uint64_t)__s1))
    {
      if (v47)
      {
        if (*(char *)(a2 + 23) >= 0) {
          size_t v32 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v32 = *(void *)(a2 + 8);
        }
        uint64_t v33 = &v52;
        std::string::basic_string[abi:ne180100]((uint64_t)&v52, v32 + 29);
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v33 = (std::string *)v52.__r_.__value_.__r.__words[0];
        }
        if (v32)
        {
          if (*(char *)(a2 + 23) >= 0) {
            BOOL v34 = (const void *)a2;
          }
          else {
            BOOL v34 = *(const void **)a2;
          }
          memmove(v33, v34, v32);
        }
        strcpy((char *)v33 + v32, " (toString called implicitly)");
      }
      else if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        std::string v52 = *(std::string *)a2;
      }
      std::operator+<char>();
      uint64_t v35 = std::string::append(&v48, "' requires format version ");
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v37 = &v58;
      }
      else {
        long long v37 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v58.__r_.__value_.__l.__size_;
      }
      uint64_t v39 = std::string::append(&v49, (const std::string::value_type *)v37, v38);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v41 = std::string::append(&v50, " but CAT file has version ");
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (__s1[23] >= 0) {
        uint64_t v43 = __s1;
      }
      else {
        uint64_t v43 = *(const std::string::value_type **)__s1;
      }
      if (__s1[23] >= 0) {
        std::string::size_type v44 = __s1[23];
      }
      else {
        std::string::size_type v44 = *(void *)&__s1[8];
      }
      int v45 = std::string::append(&v51, v43, v44);
      long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      a3[2] = *((void *)&v45->__r_.__value_.__l + 2);
      *(_OWORD *)a3 = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if ((__s1[23] & 0x80000000) != 0) {
        operator delete(*(void **)__s1);
      }
      goto LABEL_114;
    }
    if ((__s1[23] & 0x80000000) != 0) {
      operator delete(*(void **)__s1);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
LABEL_114:
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  *(void *)std::string __s1 = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s1);
}

void sub_1C5F06AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 153) < 0) {
    operator delete(*(void **)(v38 - 176));
  }
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  std::string __p = (void *)(v38 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CATExecutionDialogResult::CATExecutionDialogResult(siri::dialogengine::CATExecutionDialogResult *this)
{
}

{
  operator new();
}

void siri::dialogengine::CATExecutionDialogResult::CATExecutionDialogResult(siri::dialogengine::CATExecutionDialogResult *this, const siri::dialogengine::CATExecutionDialogResult *a2)
{
}

void sub_1C5F0703C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14)
{
  if (*(char *)(v14 + 311) < 0) {
    operator delete(*v18);
  }
  if (*(char *)(v14 + 287) < 0) {
    operator delete(*v17);
  }
  if (*(char *)(v14 + 263) < 0) {
    operator delete(*v16);
  }
  if (*(char *)(v14 + 239) < 0) {
    operator delete(*v15);
  }
  if (*(char *)(v14 + 215) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v14 + 191) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v14 + 167) < 0) {
    operator delete(*v19);
  }
  if (*(char *)(v14 + 143) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v14 + 119) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v14 + 95) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v14 + 71) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v14 + 47) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  MEMORY[0x1C8796D70](v14, 0x1012C401D9AEBE6);
  _Unwind_Resume(a1);
}

void sub_1C5F07184()
{
}

void sub_1C5F0718C()
{
}

void sub_1C5F07194()
{
}

void sub_1C5F0719C()
{
}

void sub_1C5F071A4()
{
}

void siri::dialogengine::CATExecutionDialogResult::~CATExecutionDialogResult(siri::dialogengine::CATExecutionDialogResult *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    if (*(char *)(v1 + 335) < 0) {
      operator delete(*(void **)(v1 + 312));
    }
    if (*(char *)(v1 + 311) < 0) {
      operator delete(*(void **)(v1 + 288));
    }
    if (*(char *)(v1 + 287) < 0) {
      operator delete(*(void **)(v1 + 264));
    }
    if (*(char *)(v1 + 263) < 0) {
      operator delete(*(void **)(v1 + 240));
    }
    if (*(char *)(v1 + 239) < 0) {
      operator delete(*(void **)(v1 + 216));
    }
    if (*(char *)(v1 + 215) < 0) {
      operator delete(*(void **)(v1 + 192));
    }
    if (*(char *)(v1 + 191) < 0) {
      operator delete(*(void **)(v1 + 168));
    }
    if (*(char *)(v1 + 167) < 0) {
      operator delete(*(void **)(v1 + 144));
    }
    if (*(char *)(v1 + 143) < 0) {
      operator delete(*(void **)(v1 + 120));
    }
    if (*(char *)(v1 + 119) < 0) {
      operator delete(*(void **)(v1 + 96));
    }
    if (*(char *)(v1 + 95) < 0) {
      operator delete(*(void **)(v1 + 72));
    }
    if (*(char *)(v1 + 71) < 0) {
      operator delete(*(void **)(v1 + 48));
    }
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    MEMORY[0x1C8796D70](v1, 0x1012C401D9AEBE6);
  }
}

uint64_t *siri::dialogengine::CATExecutionDialogResult::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2) {
    siri::dialogengine::CATExecutionDialogResult::Impl::operator=(*a1, *a2);
  }
  return a1;
}

uint64_t siri::dialogengine::CATExecutionDialogResult::Impl::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
  std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  std::string::operator=((std::string *)(a1 + 240), (const std::string *)(a2 + 240));
  std::string::operator=((std::string *)(a1 + 264), (const std::string *)(a2 + 264));
  std::string::operator=((std::string *)(a1 + 288), (const std::string *)(a2 + 288));
  std::string::operator=((std::string *)(a1 + 312), (const std::string *)(a2 + 312));
  char v4 = *(unsigned char *)(a2 + 338);
  *(_WORD *)(a1 + 336) = *(_WORD *)(a2 + 336);
  *(unsigned char *)(a1 + 338) = v4;
  return a1;
}

void siri::dialogengine::CATExecutionDialogResult::GetId(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(long long **)this;
  if (*(char *)(*(void *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetId(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetType(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 24), *(void *)(v2 + 32));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 24);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 40);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetType(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 1, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetFullPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 48), *(void *)(v2 + 56));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 48);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 64);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetFullPrint(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 2, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetRedactedFullPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 263) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 240), *(void *)(v2 + 248));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 240);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 256);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetRedactedFullPrint(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 10, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetFullSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 72), *(void *)(v2 + 80));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 72);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 88);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetFullSpeak(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 3, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetRedactedFullSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 287) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 264), *(void *)(v2 + 272));
  }
  else
  {
    long long v3 = (long long *)(v2 + 264);
    long long v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetRedactedFullSpeak(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 11, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetSupportingPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 96), *(void *)(v2 + 104));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 112);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetSupportingPrint(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 4, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetRedactedSupportingPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 311) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 288), *(void *)(v2 + 296));
  }
  else
  {
    long long v3 = (long long *)(v2 + 288);
    long long v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetRedactedSupportingPrint(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 12, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetSupportingSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 120), *(void *)(v2 + 128));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 120);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 136);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetSupportingSpeak(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 5, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetRedactedSupportingSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 335) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 312), *(void *)(v2 + 320));
  }
  else
  {
    long long v3 = (long long *)(v2 + 312);
    long long v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetRedactedSupportingSpeak(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 13, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetUnfilteredFullPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 167) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 144), *(void *)(v2 + 152));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 144);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 160);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetUnfilteredFullPrint(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 6, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetUnfilteredFullSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 191) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 168), *(void *)(v2 + 176));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 168);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 184);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetUnfilteredFullSpeak(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 7, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetUnfilteredSupportingPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 215) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 192), *(void *)(v2 + 200));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 192);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 208);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetUnfilteredSupportingPrint(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 8, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetUnfilteredSupportingSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 239) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 216), *(void *)(v2 + 224));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 216);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 232);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetUnfilteredSupportingSpeak(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 9, a2);
}

uint64_t siri::dialogengine::CATExecutionDialogResult::GetSpokenOnly(siri::dialogengine::CATExecutionDialogResult *this)
{
  return *(unsigned __int8 *)(*(void *)this + 336);
}

uint64_t siri::dialogengine::CATExecutionDialogResult::SetSpokenOnly(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)this + 336) = a2;
  return this;
}

uint64_t siri::dialogengine::CATExecutionDialogResult::GetPrintOnly(siri::dialogengine::CATExecutionDialogResult *this)
{
  return *(unsigned __int8 *)(*(void *)this + 337);
}

uint64_t siri::dialogengine::CATExecutionDialogResult::SetPrintOnly(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)this + 337) = a2;
  return this;
}

uint64_t siri::dialogengine::CATExecutionDialogResult::IsApprovedForGrading(siri::dialogengine::CATExecutionDialogResult *this)
{
  return *(unsigned __int8 *)(*(void *)this + 338);
}

uint64_t siri::dialogengine::CATExecutionDialogResult::SetApprovedForGrading(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)this + 338) = a2;
  return this;
}

void siri::dialogengine::CATExecutionDialogResult::GetContentPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"CATExecutionDialogResult::GetContentPrint() is deprecated. Use GetFullPrint() instead.", a2);
  uint64_t v5 = *(void **)this;
  if (*(char *)(*(void *)this + 71) < 0)
  {
    uint64_t v7 = (const std::string::value_type *)v5[6];
    std::string::size_type v8 = v5[7];
    std::string::__init_copy_ctor_external(a3, v7, v8);
  }
  else
  {
    long long v6 = *((_OWORD *)v5 + 3);
    a3->__r_.__value_.__r.__words[2] = v5[8];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

void siri::dialogengine::CATExecutionDialogResult::GetContentSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"CATExecutionDialogResult::GetContentSpeak() is deprecated. Use GetFullSpeak() instead.", a2);
  uint64_t v5 = *(void **)this;
  if (*(char *)(*(void *)this + 95) < 0)
  {
    uint64_t v7 = (const std::string::value_type *)v5[9];
    std::string::size_type v8 = v5[10];
    std::string::__init_copy_ctor_external(a3, v7, v8);
  }
  else
  {
    long long v6 = *(_OWORD *)(v5 + 9);
    a3->__r_.__value_.__r.__words[2] = v5[11];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

void siri::dialogengine::CATExecutionDialogResult::GetCaptionPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"CATExecutionDialogResult::GetCaptionPrint() is deprecated. Use GetSupportingPrint() instead.", a2);
  uint64_t v5 = *(void **)this;
  if (*(char *)(*(void *)this + 119) < 0)
  {
    uint64_t v7 = (const std::string::value_type *)v5[12];
    std::string::size_type v8 = v5[13];
    std::string::__init_copy_ctor_external(a3, v7, v8);
  }
  else
  {
    long long v6 = *((_OWORD *)v5 + 6);
    a3->__r_.__value_.__r.__words[2] = v5[14];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

void siri::dialogengine::CATExecutionDialogResult::GetCaptionSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"CATExecutionDialogResult::GetCaptionSpeak() is deprecated. Use GetSupportingSpeak() instead.", a2);
  uint64_t v5 = *(void **)this;
  if (*(char *)(*(void *)this + 143) < 0)
  {
    uint64_t v7 = (const std::string::value_type *)v5[15];
    std::string::size_type v8 = v5[16];
    std::string::__init_copy_ctor_external(a3, v7, v8);
  }
  else
  {
    long long v6 = *(_OWORD *)(v5 + 15);
    a3->__r_.__value_.__r.__words[2] = v5[17];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

void siri::dialogengine::CATExecutionResult::CATExecutionResult(siri::dialogengine::CATExecutionResult *this)
{
}

{
  operator new();
}

void siri::dialogengine::CATExecutionResult::CATExecutionResult()
{
}

void siri::dialogengine::CATExecutionResult::CATExecutionResult(siri::dialogengine::CATExecutionResult *this, const siri::dialogengine::CATExecutionResult *a2)
{
}

void sub_1C5F07BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(v2 + 104));
  std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  MEMORY[0x1C8796D70](v2, 0x1032C405EBDC386);
  _Unwind_Resume(a1);
}

siri::dialogengine::CATExecutionDialogResult *std::vector<siri::dialogengine::CATExecutionDialogResult>::__init_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(siri::dialogengine::CATExecutionDialogResult *result, const siri::dialogengine::CATExecutionDialogResult *a2, const siri::dialogengine::CATExecutionDialogResult *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::CATExecutionDialogResult>,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(a2, a3, *((siri::dialogengine::CATExecutionDialogResult **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_1C5F07CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

siri::dialogengine::CATExecutionDialogResult *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::CATExecutionDialogResult>,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(const siri::dialogengine::CATExecutionDialogResult *a1, const siri::dialogengine::CATExecutionDialogResult *a2, siri::dialogengine::CATExecutionDialogResult *a3)
{
  if (a1 != a2) {
    siri::dialogengine::CATExecutionDialogResult::CATExecutionDialogResult(a3, a1);
  }
  return a3;
}

void siri::dialogengine::CATExecutionResult::~CATExecutionResult(siri::dialogengine::CATExecutionResult *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    if (*(char *)(v1 + 143) < 0) {
      operator delete(*(void **)(v1 + 120));
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(v1 + 104));
    uint64_t v2 = (void **)(v1 + 72);
    std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (*(char *)(v1 + 71) < 0) {
      operator delete(*(void **)(v1 + 48));
    }
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    MEMORY[0x1C8796D70](v1, 0x1032C405EBDC386);
  }
}

std::string **siri::dialogengine::CATExecutionResult::operator=(std::string **a1, const std::string **a2)
{
  if (a1 != (std::string **)a2)
  {
    long long v3 = *a2;
    long long v4 = *a1;
    std::string::operator=(*a1, *a2);
    std::string::operator=(v4 + 1, v3 + 1);
    std::string::operator=(v4 + 2, v3 + 2);
    if (v4 != v3)
    {
      std::vector<siri::dialogengine::CATExecutionDialogResult>::__assign_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>((uint64_t)&v4[3], (const siri::dialogengine::CATExecutionDialogResult *)v3[3].__r_.__value_.__l.__data_, (const siri::dialogengine::CATExecutionDialogResult *)v3[3].__r_.__value_.__l.__size_, (uint64_t)(v3[3].__r_.__value_.__l.__size_ - v3[3].__r_.__value_.__r.__words[0]) >> 3);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&v4[4], (long long *)v3[4].__r_.__value_.__l.__data_, (long long *)&v3[4].__r_.__value_.__r.__words[1]);
    }
    std::string::operator=(v4 + 5, v3 + 5);
  }
  return a1;
}

void std::vector<siri::dialogengine::CATExecutionDialogResult>::__assign_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(uint64_t a1, const siri::dialogengine::CATExecutionDialogResult *a2, const siri::dialogengine::CATExecutionDialogResult *a3, unint64_t a4)
{
  long long v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(uint64_t **)a1;
  if (a4 > (v8 - *(void *)a1) >> 3)
  {
    if (v9)
    {
      uint64_t v10 = *(uint64_t **)(a1 + 8);
      uint64_t v11 = v9;
      if (v10 != v9)
      {
        do
          siri::dialogengine::CATExecutionDialogResult::~CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)(v10 - 1));
        while (v10 != v9);
        uint64_t v11 = *(uint64_t **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
    }
    if (a4 >> 61) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v12 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    std::vector<double>::__vallocate[abi:ne180100]((void *)a1, v13);
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::CATExecutionDialogResult>,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(v6, a3, *(siri::dialogengine::CATExecutionDialogResult **)(a1 + 8));
LABEL_22:
    *(void *)(a1 + 8) = v14;
    return;
  }
  unint64_t v15 = *(uint64_t **)(a1 + 8);
  unint64_t v16 = v15 - v9;
  if (v16 < a4)
  {
    uint64_t v17 = (const siri::dialogengine::CATExecutionDialogResult *)((char *)a2 + 8 * v16);
    if (v15 != v9)
    {
      uint64_t v18 = 8 * v16;
      do
      {
        if (v6 != (const siri::dialogengine::CATExecutionDialogResult *)v9) {
          siri::dialogengine::CATExecutionDialogResult::Impl::operator=(*v9, *(void *)v6);
        }
        long long v6 = (const siri::dialogengine::CATExecutionDialogResult *)((char *)v6 + 8);
        ++v9;
        v18 -= 8;
      }
      while (v18);
      uint64_t v9 = *(uint64_t **)(a1 + 8);
    }
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::CATExecutionDialogResult>,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(v17, a3, (siri::dialogengine::CATExecutionDialogResult *)v9);
    goto LABEL_22;
  }
  if (a2 != a3)
  {
    do
    {
      if (v6 != (const siri::dialogengine::CATExecutionDialogResult *)v9) {
        siri::dialogengine::CATExecutionDialogResult::Impl::operator=(*v9, *(void *)v6);
      }
      long long v6 = (const siri::dialogengine::CATExecutionDialogResult *)((char *)v6 + 8);
      ++v9;
    }
    while (v6 != a3);
    unint64_t v15 = *(uint64_t **)(a1 + 8);
  }
  while (v15 != v9)
    siri::dialogengine::CATExecutionDialogResult::~CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)(v15 - 1));
  *(void *)(a1 + 8) = v9;
}

void sub_1C5F08028(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void siri::dialogengine::CATExecutionResult::GetStatus(siri::dialogengine::CATExecutionResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(long long **)this;
  if (*(char *)(*(void *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionResult::SetStatus(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1, a2);
}

void siri::dialogengine::CATExecutionResult::GetError(siri::dialogengine::CATExecutionResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 24), *(void *)(v2 + 32));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 24);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 40);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionResult::SetError(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 1, a2);
}

void siri::dialogengine::CATExecutionResult::GetCatId(siri::dialogengine::CATExecutionResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 48), *(void *)(v2 + 56));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 48);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 64);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionResult::SetCatId(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 2, a2);
}

siri::dialogengine::CATExecutionDialogResult *siri::dialogengine::CATExecutionResult::GetResults@<X0>(siri::dialogengine::CATExecutionResult *this@<X0>, siri::dialogengine::CATExecutionDialogResult *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  return std::vector<siri::dialogengine::CATExecutionDialogResult>::__init_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(a2, *(const siri::dialogengine::CATExecutionDialogResult **)(v2 + 72), *(const siri::dialogengine::CATExecutionDialogResult **)(v2 + 80), (uint64_t)(*(void *)(v2 + 80) - *(void *)(v2 + 72)) >> 3);
}

void siri::dialogengine::CATExecutionResult::SetResults(void *a1, const siri::dialogengine::CATExecutionDialogResult **a2)
{
  uint64_t v2 = *a1 + 72;
  if ((const siri::dialogengine::CATExecutionDialogResult **)v2 != a2) {
    std::vector<siri::dialogengine::CATExecutionDialogResult>::__assign_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(v2, *a2, a2[1], (a2[1] - *a2) >> 3);
  }
}

uint64_t siri::dialogengine::CATExecutionResult::GetMetaElements@<X0>(siri::dialogengine::CATExecutionResult *this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, (const void ***)(*(void *)this + 96));
}

void siri::dialogengine::CATExecutionResult::SetMetaElements(void *a1, uint64_t a2)
{
  uint64_t v2 = *a1 + 96;
  if (v2 != a2) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v2, *(long long **)a2, (long long *)(a2 + 8));
  }
}

void siri::dialogengine::CATExecutionResult::GetVisual(siri::dialogengine::CATExecutionResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 120), *(void *)(v2 + 128));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 120);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 136);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionResult::SetVisual(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 5, a2);
}

void siri::dialogengine::CATExecutionResult::FromJSON()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5F090B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, siri::dialogengine::CATExecutionResult *a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::string __p = &a22;
  std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100](&__p);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&a30);
  siri::dialogengine::CATExecutionResult::~CATExecutionResult(a9);
  _Unwind_Resume(a1);
}

void std::vector<siri::dialogengine::CATExecutionDialogResult>::push_back[abi:ne180100](void *a1, siri::dialogengine::CATExecutionDialogResult *a2)
{
  long long v3 = a1 + 2;
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[1];
  if (v5 < v4) {
    siri::dialogengine::CATExecutionDialogResult::CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)a1[1], a2);
  }
  uint64_t v6 = (uint64_t)(v5 - *a1) >> 3;
  if (!((unint64_t)(v6 + 1) >> 61))
  {
    uint64_t v7 = v4 - *a1;
    uint64_t v8 = v7 >> 2;
    if (v7 >> 2 <= (unint64_t)(v6 + 1)) {
      uint64_t v8 = v6 + 1;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    unint64_t v15 = v3;
    if (v9) {
      unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v9);
    }
    else {
      uint64_t v10 = 0;
    }
    unint64_t v11 = v9;
    uint64_t v12 = (siri::dialogengine::CATExecutionDialogResult *)(v9 + 8 * v6);
    unint64_t v13 = v12;
    unint64_t v14 = v9 + 8 * v10;
    siri::dialogengine::CATExecutionDialogResult::CATExecutionDialogResult(v12, a2);
  }
  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
}

void sub_1C5F09474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<siri::dialogengine::CATExecutionDialogResult>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<siri::dialogengine::CATExecutionDialogResult>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = i - 8;
    siri::dialogengine::CATExecutionDialogResult::~CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *siri::dialogengine::Duration::Duration(void *this, const uint64_t *a2)
{
  *this = *a2;
  return this;
}

{
  *this = *a2;
  return this;
}

uint64_t siri::dialogengine::Duration::ToMinutes(siri::dialogengine::Duration *this)
{
  return *(void *)this / 60;
}

uint64_t siri::dialogengine::Duration::ToHours(siri::dialogengine::Duration *this)
{
  return *(void *)this / 3600;
}

uint64_t siri::dialogengine::Duration::ToDays(siri::dialogengine::Duration *this)
{
  return *(void *)this / 86400;
}

uint64_t siri::dialogengine::Duration::ToWeeks(siri::dialogengine::Duration *this)
{
  return *(void *)this / 604800;
}

uint64_t siri::dialogengine::Duration::ToMonths(siri::dialogengine::Duration *this)
{
  return *(void *)this / 2629746;
}

uint64_t siri::dialogengine::Duration::ToYears(siri::dialogengine::Duration *this)
{
  return *(void *)this / 31556952;
}

uint64_t siri::dialogengine::Duration::GetSeconds(siri::dialogengine::Duration *this)
{
  return *(void *)this;
}

void InitDefaultsscc_info_SystemText_ClarificationTitle_SystemText_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SystemText.pb.cc", a4);
  SnippetUI::SystemText_ClarificationTitle::SystemText_ClarificationTitle((SnippetUI::SystemText_ClarificationTitle *)&SnippetUI::_SystemText_ClarificationTitle_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SystemText_ClarificationTitle_default_instance_, v4);
  qword_1EB690128 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690130 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SystemText_ClarificationTitle *SnippetUI::SystemText_ClarificationTitle::SystemText_ClarificationTitle(SnippetUI::SystemText_ClarificationTitle *this)
{
  *(void *)this = &unk_1F211EEF8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load_explicit(scc_info_SystemText_ClarificationTitle_SystemText_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SystemText_ClarificationTitle_SystemText_2eproto);
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C5F096F0(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SystemText_ClarificationTitle::GetMetadata(SnippetUI::SystemText_ClarificationTitle *this)
{
  return file_level_metadata_SystemText_2eproto;
}

uint64_t SnippetUI::SystemText_ClarificationTitle::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void SnippetUI::SystemText_ClarificationTitle::MergeFrom(SnippetUI::SystemText_ClarificationTitle *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SystemText.pb.cc", 325);
    unint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::SystemText_ClarificationTitle::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5F0980C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SystemText_ClarificationTitle::MergeFrom(SnippetUI::SystemText_ClarificationTitle *this, const SnippetUI::SystemText_ClarificationTitle *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SystemText.pb.cc", 340);
    unint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SystemText_ClarificationTitle *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::SystemText_ClarificationTitle *)&SnippetUI::_SystemText_ClarificationTitle_default_instance_)
  {
    uint64_t v8 = (int **)*((void *)a2 + 3);
    if (v8)
    {
      unint64_t v9 = (int **)*((void *)this + 3);
      if (!v9)
      {
        unint64_t v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v9;
        uint64_t v8 = (int **)*((void *)a2 + 3);
      }
      if (v8) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    unint64_t v11 = (int **)*((void *)a2 + 4);
    if (v11)
    {
      uint64_t v12 = (int **)*((void *)this + 4);
      if (!v12)
      {
        uint64_t v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 4) = v12;
        unint64_t v11 = (int **)*((void *)a2 + 4);
      }
      if (v11) {
        unint64_t v13 = v11;
      }
      else {
        unint64_t v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
}

void sub_1C5F09968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SystemText_ClarificationTitle::CopyFrom(SnippetUI::SystemText_ClarificationTitle *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SystemText_ClarificationTitle::Clear(this);
    SnippetUI::SystemText_ClarificationTitle::MergeFrom(this, a2);
  }
}

void SnippetUI::SystemText_ClarificationTitle::Clear(SnippetUI::SystemText_ClarificationTitle *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  char v6 = *((unsigned char *)this + 8);
  uint64_t v5 = (SnippetUI::SystemText_ClarificationTitle *)((char *)this + 8);
  *((void *)v5 + 3) = 0;
  if (v6)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SystemText_ClarificationTitle::InternalSerializeWithCachedSizesToArray(SnippetUI::SystemText_ClarificationTitle *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::SystemText_ClarificationTitle *)&SnippetUI::_SystemText_ClarificationTitle_default_instance_) {
    goto LABEL_25;
  }
  char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v7 = (SnippetUI::TextProperty *)*((void *)this + 3);
    }
    char *v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v12 = v5 + 2;
        do
        {
          unint64_t v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        unint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        unsigned char *v12 = v14;
        goto LABEL_13;
      }
      unint64_t v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    unint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  unint64_t v16 = (SnippetUI::ActionProperty *)*((void *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unint64_t v16 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    }
    char *v5 = 18;
    unsigned int v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      unsigned int v19 = v17 >> 7;
      if (v17 >> 14)
      {
        std::string::size_type v20 = v5 + 2;
        do
        {
          unint64_t v21 = v20;
          *v20++ = v19 | 0x80;
          unsigned int v22 = v19 >> 7;
          unsigned int v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        uint64_t v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *std::string::size_type v20 = v22;
      }
      else
      {
        unint64_t v5[2] = v19;
        uint64_t v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      uint64_t v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  char v24 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    int v25 = (const char *)*((void *)v24 + 1);
    if (!v25) {
      goto LABEL_31;
    }
    char v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  int v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((unsigned char *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.SystemText_ClarificationTitle.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 2), v5);
  }
LABEL_31:
  uint64_t v26 = *((void *)this + 1);
  if ((v26 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::SystemText_ClarificationTitle::_InternalParse(SnippetUI::SystemText_ClarificationTitle *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v17 = a2;
  uint64_t v5 = (std::string **)((char *)this + 16);
  char v6 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23))) {
      return v17;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v17 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      unsigned int v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v9);
    unsigned int v17 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    unsigned int v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 == 26)
      {
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unint64_t v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.SystemText_ClarificationTitle.component_name");
        goto LABEL_29;
      }
    }
    else if (v10 == 2)
    {
      if (v9 == 18)
      {
        unsigned int v14 = (SnippetUI::ActionProperty *)*((void *)this + 4);
        if (!v14)
        {
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 4) = v14;
          TagFallbacuint64_t k = v17;
        }
        unint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_29;
      }
    }
    else if (v10 == 1 && v9 == 10)
    {
      unsigned int v15 = (SnippetUI::TextProperty *)*((void *)this + 3);
      if (!v15)
      {
        unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 3) = v15;
        TagFallbacuint64_t k = v17;
      }
      unint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v15, TagFallback);
      goto LABEL_29;
    }
    if (!v9 || (v9 & 7) == 4) {
      break;
    }
    unint64_t v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
    unsigned int v17 = (google::protobuf::internal *)v13;
    if (!v13) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v9 - 1;
  return TagFallback;
}

uint64_t SnippetUI::SystemText_ClarificationTitle::GetCachedSize(SnippetUI::SystemText_ClarificationTitle *this)
{
  return *((unsigned int *)this + 10);
}

char *SnippetUI::SystemText_ClarificationTitle::ByteSizeLong(SnippetUI::SystemText_ClarificationTitle *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::SystemText_ClarificationTitle *)&SnippetUI::_SystemText_ClarificationTitle_default_instance_)
  {
    char v6 = (SnippetUI::TextProperty *)*((void *)this + 3);
    if (v6)
    {
      char v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v7[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v8 = (SnippetUI::ActionProperty *)*((void *)this + 4);
    if (v8)
    {
      uint64_t v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v9[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SystemText_ClarificationTitle *)((char *)this + 8), v5, (_DWORD *)this + 10);
  }
  else
  {
    *((_DWORD *)this + 10) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::SystemText_ClarificationTitle::IsInitialized(SnippetUI::SystemText_ClarificationTitle *this)
{
  return 1;
}

SnippetUI::SystemText_ClarificationTitle *SnippetUI::SystemText_ClarificationTitle::New(SnippetUI::SystemText_ClarificationTitle *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SystemText_ClarificationTitle>(a2);
}

SnippetUI::SystemText_ClarificationTitle *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SystemText_ClarificationTitle>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::SystemText_ClarificationTitle *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SystemText_ClarificationTitle>);
  }
  SnippetUI::SystemText_ClarificationTitle::SystemText_ClarificationTitle(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5F0A034(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SystemText_ClarificationTitle>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::SystemText_ClarificationTitle *SnippetUI::SystemText_ClarificationTitle::New(SnippetUI::SystemText_ClarificationTitle *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SystemText_ClarificationTitle>(0);
}

void SnippetUI::SystemText_ClarificationTitle::~SystemText_ClarificationTitle(SnippetUI::SystemText_ClarificationTitle *this)
{
  SnippetUI::SystemText_ClarificationTitle::~SystemText_ClarificationTitle(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(void *)this = &unk_1F211EEF8;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SystemText_ClarificationTitle *)&SnippetUI::_SystemText_ClarificationTitle_default_instance_)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::SystemText_ClarificationTitle::InitAsDefaultInstance(SnippetUI::SystemText_ClarificationTitle *this)
{
  qword_1EB690128 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690130 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SystemText_ClarificationTitle::_Internal::text_1(SnippetUI::SystemText_ClarificationTitle::_Internal *this, const SnippetUI::SystemText_ClarificationTitle *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::SystemText_ClarificationTitle::_Internal::action(SnippetUI::SystemText_ClarificationTitle::_Internal *this, const SnippetUI::SystemText_ClarificationTitle *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::SystemText_ClarificationTitle::clear_text_1(SnippetUI::SystemText_ClarificationTitle *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::SystemText_ClarificationTitle::clear_action(SnippetUI::SystemText_ClarificationTitle *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

SnippetUI::SystemText_ClarificationTitle *SnippetUI::SystemText_ClarificationTitle::SystemText_ClarificationTitle(SnippetUI::SystemText_ClarificationTitle *this, const SnippetUI::SystemText_ClarificationTitle *a2)
{
  *(void *)this = &unk_1F211EEF8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SystemText_ClarificationTitle *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  if (a2 == (const SnippetUI::SystemText_ClarificationTitle *)&SnippetUI::_SystemText_ClarificationTitle_default_instance_)
  {
    *((void *)this + 3) = 0;
  }
  else
  {
    if (*((void *)a2 + 3)) {
      operator new();
    }
    *((void *)this + 3) = 0;
    if (*((void *)a2 + 4)) {
      operator new();
    }
  }
  *((void *)this + 4) = 0;
  return this;
}

void sub_1C5F0A3B4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::SystemText_ClarificationTitle::default_instance(SnippetUI::SystemText_ClarificationTitle *this)
{
  if (atomic_load_explicit(scc_info_SystemText_ClarificationTitle_SystemText_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SystemText_ClarificationTitle_SystemText_2eproto);
  }
  return &SnippetUI::_SystemText_ClarificationTitle_default_instance_;
}

void SnippetUI::SystemText_ClarificationTitle::CopyFrom(SnippetUI::SystemText_ClarificationTitle *this, const SnippetUI::SystemText_ClarificationTitle *a2)
{
  if (a2 != this)
  {
    SnippetUI::SystemText_ClarificationTitle::Clear(this);
    SnippetUI::SystemText_ClarificationTitle::MergeFrom(this, a2);
  }
}

void SnippetUI::SystemText_ClarificationTitle::InternalSwap(SnippetUI::SystemText_ClarificationTitle *this, SnippetUI::SystemText_ClarificationTitle *a2)
{
  uint64_t v4 = (SnippetUI::SystemText_ClarificationTitle *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  char v7 = (uint64_t *)*((void *)this + 2);
  unsigned int v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    char v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)char v7 = *(_OWORD *)v9;
  void v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
}

void siri::dialogengine::GetLocationComponentOrder(const std::string *a1@<X0>, uint64_t *a2@<X8>)
{
  v44[3] = *MEMORY[0x1E4F143B8];
  {
    if (v28)
    {
      siri::dialogengine::GetComponentOrderings(v28);
      siri::dialogengine::GetLocationComponentOrder(std::string const&)::componentOrderings = (uint64_t)&siri::dialogengine::GetComponentOrderings(void)::orderings;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  siri::dialogengine::GetCanonicalLocale(a1, 0, &v34);
  siri::dialogengine::GetDefaultOrder(v4);
  __dst = 0;
  size_t v32 = 0;
  uint64_t v33 = 0;
  std::vector<siri::dialogengine::LocationComponents>::__init_with_size[abi:ne180100]<siri::dialogengine::LocationComponents*,siri::dialogengine::LocationComponents*>(&__dst, (const void *)siri::dialogengine::GetDefaultOrder(void)::defaultOrder[0], unk_1EA3D9400, (unk_1EA3D9400 - siri::dialogengine::GetDefaultOrder(void)::defaultOrder[0]) >> 2);
  uint64_t v5 = siri::dialogengine::GetLocationComponentOrder(std::string const&)::componentOrderings;
  siri::dialogengine::StringToLower((uint64_t)&v34, (uint64_t)__p);
  uint64_t v6 = std::__tree<std::string>::find<std::string>(v5, (const void **)__p);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = siri::dialogengine::GetLocationComponentOrder(std::string const&)::componentOrderings;
  if (siri::dialogengine::GetLocationComponentOrder(std::string const&)::componentOrderings + 8 == v6)
  {
    siri::dialogengine::GetLocaleCountry(&v30);
    siri::dialogengine::StringToLower((uint64_t)&v30, (uint64_t)__p);
    uint64_t v6 = std::__tree<std::string>::find<std::string>(v7, (const void **)__p);
    if (v36 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = siri::dialogengine::GetLocationComponentOrder(std::string const&)::componentOrderings;
  }
  uint64_t v8 = v7 + 8;
  uint64_t v9 = (char *)__dst;
  if (v6 == v8)
  {
    unsigned int v17 = (char *)v32;
    goto LABEL_31;
  }
  uint64_t v10 = *(char **)(v6 + 56);
  long long v11 = *(unsigned char **)(v6 + 64);
  size_t v12 = v11 - v10;
  unint64_t v13 = (v11 - v10) >> 2;
  uint64_t v14 = v33;
  if (v13 <= (v33 - (uint64_t)__dst) >> 2)
  {
    uint64_t v18 = (char *)v32;
    unint64_t v19 = ((unsigned char *)v32 - (unsigned char *)__dst) >> 2;
    if (v19 < v13)
    {
      std::string::size_type v20 = &v10[4 * v19];
      if (v32 != __dst)
      {
        memmove(__dst, v10, (unsigned char *)v32 - (unsigned char *)__dst);
        uint64_t v9 = v18;
      }
      size_t v12 = v11 - v20;
      if (v11 == v20) {
        goto LABEL_30;
      }
      unint64_t v21 = v9;
      unsigned int v22 = v20;
      goto LABEL_29;
    }
  }
  else
  {
    if (__dst)
    {
      operator delete(__dst);
      uint64_t v14 = 0;
      __dst = 0;
      size_t v32 = 0;
      uint64_t v33 = 0;
    }
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v14 >> 1;
    if (v14 >> 1 <= v13) {
      uint64_t v15 = (v11 - v10) >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    std::vector<siri::dialogengine::LocationComponents>::__vallocate[abi:ne180100](&__dst, v16);
    uint64_t v9 = (char *)v32;
  }
  if (v11 != v10)
  {
    unint64_t v21 = v9;
    unsigned int v22 = v10;
LABEL_29:
    memmove(v21, v22, v12);
  }
LABEL_30:
  unsigned int v17 = &v9[v12];
  size_t v32 = v17;
  uint64_t v9 = (char *)__dst;
LABEL_31:
  if (v9 != v17)
  {
    do
    {
      unsigned int v23 = *(_DWORD *)v9;
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "fullThoroughfare");
        std::string::basic_string[abi:ne180100]<0>(v37, "subThoroughfare");
        std::string::basic_string[abi:ne180100]<0>(v38, "thoroughfare");
        std::string::basic_string[abi:ne180100]<0>(v39, "locality");
        std::string::basic_string[abi:ne180100]<0>(v40, "subAdministrativeArea");
        std::string::basic_string[abi:ne180100]<0>(v41, "administrativeArea");
        std::string::basic_string[abi:ne180100]<0>(v42, "postCode");
        std::string::basic_string[abi:ne180100]<0>(v43, "country");
        std::string::basic_string[abi:ne180100]<0>(v44, "LINE_SEPARATOR");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)&siri::dialogengine::GetLocationComponentNames(void)::names, (long long *)__p, 9uLL);
        for (uint64_t i = 0; i != -216; i -= 24)
        {
          if (*((char *)&v44[2] + i + 7) < 0)
          {
            uint64_t v29 = i;
            operator delete(*(void **)((char *)v44 + i));
            uint64_t i = v29;
          }
        }
        __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &siri::dialogengine::GetLocationComponentNames(void)::names, &dword_1C5C1E000);
      }
      char v24 = (long long *)(siri::dialogengine::GetLocationComponentNames(void)::names + 24 * v23);
      unint64_t v25 = a2[1];
      if (v25 >= a2[2])
      {
        uint64_t v26 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v24);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v24);
        uint64_t v26 = v25 + 24;
      }
      a2[1] = v26;
      v9 += 4;
    }
    while (v9 != v17);
    unsigned int v17 = (char *)__dst;
  }
  if (v17)
  {
    size_t v32 = v17;
    operator delete(v17);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F0A9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32)
{
}

void siri::dialogengine::GetComponentOrderings(siri::dialogengine *this)
{
  void v83[6] = *MEMORY[0x1E4F143B8];
  {
    if (v1)
    {
      siri::dialogengine::GetDefaultOrder(v1);
      uint64_t v2 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v58, "ar", (uint64_t)siri::dialogengine::GetDefaultOrder(void)::defaultOrder);
      siri::dialogengine::GetDefaultNorthernEuropeanOrder(v2);
      uint64_t v3 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v59, "da", (uint64_t)siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder);
      siri::dialogengine::GetDefaultNorthernEuropeanOrder(v3);
      uint64_t v4 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v60, "de", (uint64_t)siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder);
      siri::dialogengine::GetDefaultOrder(v4);
      uint64_t v5 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v61, "en", (uint64_t)siri::dialogengine::GetDefaultOrder(void)::defaultOrder);
      siri::dialogengine::GetDefaultOrder(v5);
      uint64_t v6 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[6],std::vector<siri::dialogengine::LocationComponents> const&,0>(v62, "es_US", (uint64_t)siri::dialogengine::GetDefaultOrder(void)::defaultOrder);
      siri::dialogengine::GetDefaultSouthernEuropeanOrder(v6);
      uint64_t v7 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v63, "es", (uint64_t)siri::dialogengine::GetDefaultSouthernEuropeanOrder(void)::defaultSoutherEurpeanOrder);
      siri::dialogengine::GetDefaultNorthernEuropeanOrder(v7);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v64, "fi", (uint64_t)siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder);
      std::string::basic_string[abi:ne180100]<0>(v42, "fr");
      v57[0] = xmmword_1C616DC68;
      v57[1] = unk_1C616DC78;
      v57[2] = xmmword_1C616DC88;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](v41, v57, 0xCuLL);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v65, (long long *)v42, (uint64_t)v41);
      std::string::basic_string[abi:ne180100]<0>(v39, "he");
      v55[0] = xmmword_1C616DC98;
      v55[1] = unk_1C616DCA8;
      v55[2] = xmmword_1C616DCB8;
      uint64_t v56 = 0x700000008;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](v38, v55, 0xEuLL);
      uint64_t v8 = std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v66, (long long *)v39, (uint64_t)v38);
      siri::dialogengine::GetDefaultOrder((siri::dialogengine *)v8);
      uint64_t v9 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v67, "hi", (uint64_t)siri::dialogengine::GetDefaultOrder(void)::defaultOrder);
      siri::dialogengine::GetDefaultSouthernEuropeanOrder(v9);
      uint64_t v10 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v68, "it", (uint64_t)siri::dialogengine::GetDefaultSouthernEuropeanOrder(void)::defaultSoutherEurpeanOrder);
      siri::dialogengine::GetDefaultAsianOrder(v10);
      long long v11 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v69, "ja", (uint64_t)siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder);
      siri::dialogengine::GetDefaultAsianOrder(v11);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v70, "ko", (uint64_t)siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder);
      std::string::basic_string[abi:ne180100]<0>(v36, "ms");
      long long v53 = xmmword_1C616DCD0;
      v54[0] = unk_1C616DCE0;
      *(_OWORD *)((char *)v54 + 12) = unk_1C616DCEC;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](v35, &v53, 0xBuLL);
      size_t v12 = std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v71, (long long *)v36, (uint64_t)v35);
      siri::dialogengine::GetDefaultNorthernEuropeanOrder((siri::dialogengine *)v12);
      unint64_t v13 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v72, "nb", (uint64_t)siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder);
      siri::dialogengine::GetDefaultNorthernEuropeanOrder(v13);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v73, "nl", (uint64_t)siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder);
      std::string::basic_string[abi:ne180100]<0>(v33, "pt");
      v51[0] = xmmword_1C616DDFC;
      v51[1] = *(_OWORD *)algn_1C616DE0C;
      v51[2] = xmmword_1C616DE1C;
      uint64_t v52 = 0x700000008;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](v32, v51, 0xEuLL);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v74, (long long *)v33, (uint64_t)v32);
      std::string::basic_string[abi:ne180100]<0>(v30, "ru");
      v49[0] = xmmword_1C616DCFC;
      v49[1] = unk_1C616DD0C;
      v49[2] = xmmword_1C616DD1C;
      uint64_t v50 = 0x700000008;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](v29, v49, 0xEuLL);
      uint64_t v14 = std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v75, (long long *)v30, (uint64_t)v29);
      siri::dialogengine::GetDefaultNorthernEuropeanOrder((siri::dialogengine *)v14);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v76, "sv", (uint64_t)siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder);
      std::string::basic_string[abi:ne180100]<0>(v27, "th");
      v47[0] = xmmword_1C616DD34;
      v47[1] = *(_OWORD *)algn_1C616DD44;
      v48[0] = xmmword_1C616DD54;
      *(_OWORD *)((char *)v48 + 12) = *(long long *)((char *)&xmmword_1C616DD54 + 12);
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](v26, v47, 0xFuLL);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v77, (long long *)v27, (uint64_t)v26);
      std::string::basic_string[abi:ne180100]<0>(v24, "tr");
      long long v45 = xmmword_1C616DD70;
      v46[0] = unk_1C616DD80;
      *(_OWORD *)((char *)v46 + 12) = unk_1C616DD8C;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](v23, &v45, 0xBuLL);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v78, (long long *)v24, (uint64_t)v23);
      std::string::basic_string[abi:ne180100]<0>(v21, "vi");
      v44[0] = xmmword_1C616DD9C;
      v44[1] = unk_1C616DDAC;
      v44[2] = xmmword_1C616DDBC;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](__p, v44, 0xCuLL);
      uint64_t v15 = std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v79, (long long *)v21, (uint64_t)__p);
      siri::dialogengine::GetDefaultAsianOrder((siri::dialogengine *)v15);
      unint64_t v16 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[4],std::vector<siri::dialogengine::LocationComponents> const&,0>(v80);
      siri::dialogengine::GetDefaultAsianOrder(v16);
      unsigned int v17 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v81, "zh", (uint64_t)siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder);
      siri::dialogengine::GetDefaultAsianOrder(v17);
      uint64_t v18 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[6],std::vector<siri::dialogengine::LocationComponents> const&,0>(v82, "zh_cn", (uint64_t)siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder);
      siri::dialogengine::GetDefaultAsianOrder(v18);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[6],std::vector<siri::dialogengine::LocationComponents> const&,0>(v83, "zh_tw", (uint64_t)siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder);
      std::map<std::string,std::vector<siri::dialogengine::LocationComponents>>::map[abi:ne180100](v58, 26);
      for (uint64_t i = 75; i != -3; i -= 3)
        std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::~pair((uint64_t)&v58[i]);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
      if (v23[0])
      {
        v23[1] = v23[0];
        operator delete(v23[0]);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      if (v26[0])
      {
        v26[1] = v26[0];
        operator delete(v26[0]);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v29[0])
      {
        v29[1] = v29[0];
        operator delete(v29[0]);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
      if (v32[0])
      {
        v32[1] = v32[0];
        operator delete(v32[0]);
      }
      if (v34 < 0) {
        operator delete(v33[0]);
      }
      if (v35[0])
      {
        v35[1] = v35[0];
        operator delete(v35[0]);
      }
      if (v37 < 0) {
        operator delete(v36[0]);
      }
      if (v38[0])
      {
        v38[1] = v38[0];
        operator delete(v38[0]);
      }
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      if (v41[0])
      {
        v41[1] = v41[0];
        operator delete(v41[0]);
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      __cxa_atexit((void (*)(void *))std::map<std::string,std::vector<siri::dialogengine::LocationComponents>>::~map[abi:ne180100], &siri::dialogengine::GetComponentOrderings(void)::orderings, &dword_1C5C1E000);
    }
  }
}

void sub_1C5F0B1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  for (uint64_t i = 1200; i != -48; i -= 48)
    std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::~pair(v74 + i);
  if (__p) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a36) {
    operator delete(a36);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a45) {
    operator delete(a45);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a54) {
    operator delete(a54);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a63) {
    operator delete(a63);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a72) {
    operator delete(a72);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetDefaultOrder(siri::dialogengine *this)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  {
    {
      long long v1 = xmmword_1C616DE5C;
      v2[0] = unk_1C616DE6C;
      *(_OWORD *)((char *)v2 + 12) = unk_1C616DE78;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](siri::dialogengine::GetDefaultOrder(void)::defaultOrder, &v1, 0xBuLL);
      __cxa_atexit((void (*)(void *))std::vector<siri::dialogengine::LocationComponents>::~vector[abi:ne180100], siri::dialogengine::GetDefaultOrder(void)::defaultOrder, &dword_1C5C1E000);
    }
  }
}

void sub_1C5F0B508(_Unwind_Exception *a1)
{
}

void *std::vector<siri::dialogengine::LocationComponents>::__init_with_size[abi:ne180100]<siri::dialogengine::LocationComponents*,siri::dialogengine::LocationComponents*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<siri::dialogengine::LocationComponents>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C5F0B580(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  uint64_t v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

char *std::vector<siri::dialogengine::LocationComponents>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(4 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * a2];
  return result;
}

void *std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<siri::dialogengine::LocationComponents>::__vallocate[abi:ne180100](a1, a3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_1C5F0B680(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<siri::dialogengine::LocationComponents>::~vector[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void *std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(void *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  void v5[3] = 0;
  v5[4] = 0;
  v5 += 3;
  unint64_t v5[2] = 0;
  std::vector<siri::dialogengine::LocationComponents>::__init_with_size[abi:ne180100]<siri::dialogengine::LocationComponents*,siri::dialogengine::LocationComponents*>(v5, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  return a1;
}

void sub_1C5F0B714(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetDefaultNorthernEuropeanOrder(siri::dialogengine *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    {
      v1[0] = xmmword_1C616DDCC;
      v1[1] = unk_1C616DDDC;
      v1[2] = xmmword_1C616DDEC;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder, v1, 0xCuLL);
      __cxa_atexit((void (*)(void *))std::vector<siri::dialogengine::LocationComponents>::~vector[abi:ne180100], siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder, &dword_1C5C1E000);
    }
  }
}

void sub_1C5F0B800(_Unwind_Exception *a1)
{
}

void *std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[6],std::vector<siri::dialogengine::LocationComponents> const&,0>(void *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  void v5[3] = 0;
  v5[4] = 0;
  v5 += 3;
  unint64_t v5[2] = 0;
  std::vector<siri::dialogengine::LocationComponents>::__init_with_size[abi:ne180100]<siri::dialogengine::LocationComponents*,siri::dialogengine::LocationComponents*>(v5, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  return a1;
}

void sub_1C5F0B85C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetDefaultSouthernEuropeanOrder(siri::dialogengine *this)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  {
    {
      uint64_t v2 = 0x700000008;
      v1[0] = xmmword_1C616DDFC;
      v1[1] = *(_OWORD *)algn_1C616DE0C;
      v1[2] = xmmword_1C616DE1C;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](siri::dialogengine::GetDefaultSouthernEuropeanOrder(void)::defaultSoutherEurpeanOrder, v1, 0xEuLL);
      __cxa_atexit((void (*)(void *))std::vector<siri::dialogengine::LocationComponents>::~vector[abi:ne180100], siri::dialogengine::GetDefaultSouthernEuropeanOrder(void)::defaultSoutherEurpeanOrder, &dword_1C5C1E000);
    }
  }
}

void sub_1C5F0B954(_Unwind_Exception *a1)
{
}

std::string *std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<siri::dialogengine::LocationComponents>::__init_with_size[abi:ne180100]<siri::dialogengine::LocationComponents*,siri::dialogengine::LocationComponents*>(this[1].__r_.__value_.__r.__words, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  return this;
}

void sub_1C5F0B9DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetDefaultAsianOrder(siri::dialogengine *this)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  {
    {
      v1[0] = xmmword_1C616DE34;
      v1[1] = unk_1C616DE44;
      uint64_t v2 = 1;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder, v1, 0xAuLL);
      __cxa_atexit((void (*)(void *))std::vector<siri::dialogengine::LocationComponents>::~vector[abi:ne180100], siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder, &dword_1C5C1E000);
    }
  }
}

void sub_1C5F0BAC8(_Unwind_Exception *a1)
{
}

void *std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[4],std::vector<siri::dialogengine::LocationComponents> const&,0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "yue");
  v2[3] = 0;
  v2[4] = 0;
  v2 += 3;
  _OWORD v2[2] = 0;
  std::vector<siri::dialogengine::LocationComponents>::__init_with_size[abi:ne180100]<siri::dialogengine::LocationComponents*,siri::dialogengine::LocationComponents*>(v2, (const void *)siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder[0], unk_1EA3D93E0, (unk_1EA3D93E0 - siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder[0]) >> 2);
  return a1;
}

void sub_1C5F0BB30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::map<std::string,std::vector<siri::dialogengine::LocationComponents>>::map[abi:ne180100](long long *a1, uint64_t a2)
{
  qword_1EA3D9388 = 0;
  qword_1EA3D9380 = 0;
  siri::dialogengine::GetComponentOrderings(void)::orderings = (uint64_t)&qword_1EA3D9380;
  if (a2)
  {
    uint64_t v2 = a1;
    uint64_t v3 = 0;
    uint64_t v4 = &a1[3 * a2];
    long long v5 = &qword_1EA3D9380;
    while (v5 != &qword_1EA3D9380)
    {
      if (v3)
      {
        do
        {
          uint64_t v6 = (uint64_t *)v3;
          uint64_t v3 = *(void *)(v3 + 8);
        }
        while (v3);
      }
      else
      {
        uint64_t v7 = &qword_1EA3D9380;
        do
        {
          uint64_t v6 = (uint64_t *)v7[2];
          BOOL v8 = *v6 == (void)v7;
          uint64_t v7 = v6;
        }
        while (v8);
      }
      BOOL v9 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EA3D9388, (const void **)v6 + 4, (const void **)v2);
      uint64_t v3 = qword_1EA3D9380;
      if (v9) {
        goto LABEL_11;
      }
      if (qword_1EA3D9380)
      {
        uint64_t v10 = &qword_1EA3D9380;
        while (1)
        {
          while (1)
          {
            uint64_t v6 = (uint64_t *)v3;
            long long v11 = (const void **)(v3 + 32);
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EA3D9388, (const void **)v2, (const void **)(v3 + 32)))break; {
            uint64_t v3 = *v6;
            }
            uint64_t v10 = v6;
            if (!*v6) {
              goto LABEL_24;
            }
          }
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EA3D9388, v11, (const void **)v2)) {
            break;
          }
          uint64_t v10 = v6 + 1;
          uint64_t v3 = v6[1];
          if (!v3) {
            goto LABEL_24;
          }
        }
LABEL_13:
        if (*v10) {
          goto LABEL_30;
        }
        goto LABEL_24;
      }
LABEL_23:
      uint64_t v6 = &qword_1EA3D9380;
      uint64_t v10 = &qword_1EA3D9380;
LABEL_24:
      size_t v12 = (char *)operator new(0x50uLL);
      unint64_t v13 = (uint64_t *)v12;
      v15[0] = v12;
      v15[1] = &qword_1EA3D9380;
      char v16 = 0;
      if (*((char *)v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v12 + 32), *(const std::string::value_type **)v2, *((void *)v2 + 1));
      }
      else
      {
        long long v14 = *v2;
        *((void *)v12 + 6) = *((void *)v2 + 2);
        *((_OWORD *)v12 + 2) = v14;
      }
      v13[7] = 0;
      v13[8] = 0;
      v13[9] = 0;
      std::vector<siri::dialogengine::LocationComponents>::__init_with_size[abi:ne180100]<siri::dialogengine::LocationComponents*,siri::dialogengine::LocationComponents*>(v13 + 7, *((const void **)v2 + 3), *((void *)v2 + 4), (uint64_t)(*((void *)v2 + 4) - *((void *)v2 + 3)) >> 2);
      char v16 = 1;
      uint64_t *v13 = 0;
      v13[1] = 0;
      std::string v13[2] = (uint64_t)v6;
      uint64_t *v10 = (uint64_t)v13;
      if (*(void *)siri::dialogengine::GetComponentOrderings(void)::orderings)
      {
        siri::dialogengine::GetComponentOrderings(void)::orderings = *(void *)siri::dialogengine::GetComponentOrderings(void)::orderings;
        unint64_t v13 = (uint64_t *)*v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EA3D9380, v13);
      ++qword_1EA3D9388;
      v15[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
LABEL_30:
      v2 += 3;
      if (v2 == v4) {
        return;
      }
      long long v5 = (uint64_t *)siri::dialogengine::GetComponentOrderings(void)::orderings;
      uint64_t v3 = qword_1EA3D9380;
    }
    uint64_t v6 = &qword_1EA3D9380;
LABEL_11:
    if (v3)
    {
      uint64_t v10 = v6 + 1;
      goto LABEL_13;
    }
    goto LABEL_23;
  }
}

void sub_1C5F0BD58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__tree<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>>>::destroy((void *)qword_1EA3D9380);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::map<std::string,std::vector<siri::dialogengine::LocationComponents>>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void std::__tree<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_1C5F0C0B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F0C2C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F0C4C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F0C5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F0CA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C5F0CC0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F0CDF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F0D204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_1C5F0D370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F0D3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F0D4A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F0D52C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F0D7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C5F0D8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5F0DA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C5F0DAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CATPatternExecute()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v5, "success");
  __p[1] = 0;
  __p[0] = 0;
  uint64_t v4 = 0;
  __sz[1] = 0;
  __sz[0] = 0;
  uint64_t v2 = 0;
  *(_DWORD *)((char *)v0 + 3) = 0;
  v0[0] = 0;
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)v6);
}

void sub_1C5F0EF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, int a16, void *a17, int a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&STACK[0x210], 8);

  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(v51 - 208);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a17);
  }
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete((void *)STACK[0x288]);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21999(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22000(uint64_t a1)
{
}

void __CATPatternExecute_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F1CB10];
  uint64_t v3 = (void *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    uint64_t v3 = (void *)*v3;
  }
  uint64_t v4 = [NSString stringWithUTF8String:v3];
  long long v5 = [v2 fileURLWithPath:v4];
  uint64_t v6 = (void *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    uint64_t v6 = (void *)*v6;
  }
  uint64_t v7 = [NSString stringWithUTF8String:v6];
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __CATPatternExecute_block_invoke_2;
  v12[3] = &unk_1E651E490;
  uint64_t v14 = *(void *)(a1 + 64);
  long long v11 = *(_OWORD *)(a1 + 48);
  id v10 = (id)v11;
  long long v13 = v11;
  +[CATPattern execute:0 templateDir:v5 patternId:v7 parameters:v8 globals:v9 options:0 completion:v12];
}

void sub_1C5F0F44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 72);
    operator delete(v2);
  }
}

void __copy_helper_block_ea8_72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 3, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(void *)(a2 + 88);
    *(_OWORD *)&a1[3].__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = a1 + 4;
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 96);
    a1[4].__r_.__value_.__r.__words[2] = *(void *)(a2 + 112);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1C5F0F55C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 95) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __CATPatternExecute_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void siri::dialogengine::Context::~Context(siri::dialogengine::Context *this)
{
  siri::dialogengine::Context::~Context(this);
  JUMPOUT(0x1C8796D70);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void **v7;

  *(void *)this = &unk_1F211F008;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 438);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 434);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 432);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  id v5 = (std::__shared_weak_count *)*((void *)this + 115);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(*((void **)this + 109));
  std::__tree<std::string>::destroy((uint64_t)this + 840, *((char **)this + 106));
  std::__tree<std::string>::destroy((uint64_t)this + 816, *((char **)this + 103));
  if (*((char *)this + 735) < 0) {
    operator delete(*((void **)this + 89));
  }
  if (*((char *)this + 711) < 0) {
    operator delete(*((void **)this + 86));
  }
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(*((void **)this + 84));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 81));
  uint64_t v7 = (void **)((char *)this + 616);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 592);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy(*((void **)this + 72));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((void **)this + 69));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((void **)this + 66));
  id v6 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  siri::dialogengine::RequestInfo::~RequestInfo((void **)this + 1);
}

siri::dialogengine::Context *siri::dialogengine::Context::Context(siri::dialogengine::Context *this)
{
  *(void *)this = &unk_1F211F008;
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::Context *)((char *)this + 8));
  *((void *)this + 63) = 0;
  *((void *)this + 64) = 0;
  *((void *)this + 67) = 0;
  *((void *)this + 66) = 0;
  *((void *)this + 65) = (char *)this + 528;
  *((void *)this + 70) = 0;
  *((void *)this + 69) = 0;
  *((void *)this + 68) = (char *)this + 552;
  *((void *)this + 73) = 0;
  *((void *)this + 72) = 0;
  *((void *)this + 71) = (char *)this + 576;
  *((void *)this + 82) = 0;
  *((void *)this + 81) = 0;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((void *)this + 80) = (char *)this + 648;
  *((void *)this + 84) = 0;
  *((void *)this + 83) = (char *)this + 672;
  *((void *)this + 85) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 86, "not-loaded");
  *((unsigned char *)this + 736) = 0;
  *((void *)this + 91) = 0;
  *(_OWORD *)((char *)this + 712) = 0u;
  *((unsigned char *)this + 784) = 0;
  *((void *)this + 93) = 0;
  *((_OWORD *)this + 47) = 0u;
  *((unsigned char *)this + 768) = 0;
  siri::dialogengine::ElapsedTimer::Reset((siri::dialogengine::Context *)((char *)this + 744));
  *(_OWORD *)((char *)this + 824) = 0u;
  *((void *)this + 99) = 0;
  *((_OWORD *)this + 50) = 0u;
  *((void *)this + 102) = (char *)this + 824;
  *((_OWORD *)this + 53) = 0u;
  *((void *)this + 105) = (char *)this + 848;
  *(_OWORD *)((char *)this + 872) = 0u;
  *((void *)this + 108) = (char *)this + 872;
  *((_OWORD *)this + 57) = 0u;
  *((unsigned char *)this + 928) = 0;
  *(_DWORD *)((char *)this + 903) = 0;
  *(_OWORD *)((char *)this + 888) = 0u;
  siri::dialogengine::RandomNumberGenerator::RandomNumberGenerator((siri::dialogengine::Context *)((char *)this + 936), 0);
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  v2[24] = 0;
  *(void *)uint64_t v2 = &unk_1F211F038;
  *((_OWORD *)v2 + 2) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *((void *)v2 + 6) = v2 + 56;
  *((void *)this + 431) = v2 + 24;
  *((void *)this + 432) = v2;
  *(_OWORD *)((char *)this + 3464) = 0u;
  *(_OWORD *)((char *)this + 3480) = 0u;
  std::allocate_shared[abi:ne180100]<siri::dialogengine::SemanticModelCache,std::allocator<siri::dialogengine::SemanticModelCache>,char const(&)[8],void>((void *)this + 437);
  siri::dialogengine::Context::CheckTemplateDirs(this);
  siri::dialogengine::Context::AddCatGlobalVariables(this);
  return this;
}

void sub_1C5F0F928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  char v16 = *(std::__shared_weak_count **)(v11 + 3472);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  unsigned int v17 = *(std::__shared_weak_count **)(v11 + 3456);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v11 + 920);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase(v13);
  if (*(char *)(v11 + 735) < 0) {
    operator delete(*v14);
  }
  if (*(char *)(v11 + 711) < 0) {
    operator delete(*v12);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(*(void **)(v11 + 672));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(v11 + 648));
  a10 = v11 + 616;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v11 + 592;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy(*(void **)(v11 + 576));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(void **)(v11 + 552));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(void **)(v11 + 528));
  unint64_t v19 = *(std::__shared_weak_count **)(v11 + 512);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  siri::dialogengine::RequestInfo::~RequestInfo(v10);
  _Unwind_Resume(a1);
}

double std::allocate_shared[abi:ne180100]<siri::dialogengine::SemanticModelCache,std::allocator<siri::dialogengine::SemanticModelCache>,char const(&)[8],void>(void *a1)
{
  uint64_t v2 = (char *)operator new(0x88uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1F211F088;
  std::string::basic_string[abi:ne180100]<0>(&v4, "context");
  *(_OWORD *)(v2 + 24) = v4;
  *((void *)v2 + 5) = v5;
  *((void *)v2 + 6) = 850045863;
  double result = 0.0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((void *)v2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *((void *)v2 + 15) = 0;
  *((void *)v2 + 13) = 0;
  *((void *)v2 + 14) = v2 + 120;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1C5F0FAAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Context::CheckTemplateDirs(siri::dialogengine::Context *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = (std::string **)((char *)this + 16);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v8, v1, v2, 0xAAAAAAAAAAAAAAABLL * ((v2 - v1) >> 5));
  uint64_t v5 = v8;
  long long v4 = v9;
  __p[0] = &v8;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v4 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    siri::dialogengine::GetTemplateDirs((uint64_t)__p, 0, (uint64_t)&v8);
    if (v3 != &v8) {
      std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)v3, v8, v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 5));
    }
    uint64_t v11 = &v8;
    std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C5F0FBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  *(void *)(v16 - 40) = &a16;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 40));
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::Context::AddCatGlobalVariables(siri::dialogengine::Context *this)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x78uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2123A90;
  std::string::basic_string[abi:ne180100]<0>(__p, "device");
  siri::dialogengine::VariableObject::VariableObject(&v2[1].__vftable, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  v31[0] = v2 + 1;
  v31[1] = v2;
  siri::dialogengine::Context::AddVariable((uint64_t)this, v31);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::string::basic_string[abi:ne180100]<0>(&v32, "device");
  std::string::basic_string[abi:ne180100]<0>(&v26, "sirikit.DeviceState");
  std::string::basic_string[abi:ne180100]<0>(&v25, "");
  std::string::basic_string[abi:ne180100]<0>(&v24, "");
  std::string::basic_string[abi:ne180100]<0>(&v23, "");
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::Parameter::Parameter((uint64_t)__p, &v32, &v26, &v25, &v24, &v23, &v22, &v21, &__str, 1, 0, 0, 1);
  siri::dialogengine::Context::AddGlobalParameter(this, (const siri::dialogengine::Parameter *)__p);
  uint64_t v29 = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v30);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v28);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  uint64_t v3 = (std::__shared_weak_count *)operator new(0x78uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2123A90;
  std::string::basic_string[abi:ne180100]<0>(__p, "user");
  siri::dialogengine::VariableObject::VariableObject(&v3[1].__vftable, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  v19[0] = v3 + 1;
  v19[1] = v3;
  siri::dialogengine::Context::AddVariable((uint64_t)this, v19);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  std::string::basic_string[abi:ne180100]<0>(&v32, "user");
  std::string::basic_string[abi:ne180100]<0>(&v26, "dialog.User");
  std::string::basic_string[abi:ne180100]<0>(&v25, "");
  std::string::basic_string[abi:ne180100]<0>(&v24, "");
  std::string::basic_string[abi:ne180100]<0>(&v23, "");
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::Parameter::Parameter((uint64_t)__p, &v32, &v26, &v25, &v24, &v23, &v22, &v21, &__str, 1, 0, 0, 1);
  siri::dialogengine::Context::AddGlobalParameter(this, (const siri::dialogengine::Parameter *)__p);
  uint64_t v29 = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v30);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v28);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  {
    if (v12)
    {
      siri::dialogengine::GetDialogEngineVersionMajorMinor(v12);
      __cxa_atexit(MEMORY[0x1E4FBA210], &siri::dialogengine::Context::AddCatGlobalVariables(void)::versionMajorMinor, &dword_1C5C1E000);
    }
  }
  long long v4 = (std::__shared_weak_count *)operator new(0x108uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2126AF0;
  std::string::basic_string[abi:ne180100]<0>(__p, "version_dialogengine");
  siri::dialogengine::VariableString::VariableString((uint64_t)&v4[1], __p, (uint64_t)&siri::dialogengine::Context::AddCatGlobalVariables(void)::versionMajorMinor);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  v18[0] = v4 + 1;
  v18[1] = v4;
  siri::dialogengine::Context::AddVariable((uint64_t)this, v18);
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  std::string::basic_string[abi:ne180100]<0>(&v32, "version_dialogengine");
  std::string::basic_string[abi:ne180100]<0>(&v26, "dialog.String");
  std::string::basic_string[abi:ne180100]<0>(&v25, "");
  std::string::basic_string[abi:ne180100]<0>(&v24, "");
  std::string::basic_string[abi:ne180100]<0>(&v23, "");
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::Parameter::Parameter((uint64_t)__p, &v32, &v26, &v25, &v24, &v23, &v22, &v21, &__str, 1, 0, 0, 1);
  siri::dialogengine::Context::AddGlobalParameter(this, (const siri::dialogengine::Parameter *)__p);
  uint64_t v29 = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v30);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v28);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x78uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2123A90;
  std::string::basic_string[abi:ne180100]<0>(__p, "dialogState");
  siri::dialogengine::VariableObject::VariableObject(&v5[1].__vftable, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  v17[0] = v5 + 1;
  v17[1] = v5;
  siri::dialogengine::Context::AddVariable((uint64_t)this, v17);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  std::string::basic_string[abi:ne180100]<0>(&v32, "dialogState");
  std::string::basic_string[abi:ne180100]<0>(&v26, "dialog.State");
  std::string::basic_string[abi:ne180100]<0>(&v25, "");
  std::string::basic_string[abi:ne180100]<0>(&v24, "");
  std::string::basic_string[abi:ne180100]<0>(&v23, "");
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::Parameter::Parameter((uint64_t)__p, &v32, &v26, &v25, &v24, &v23, &v22, &v21, &__str, 1, 0, 0, 1);
  siri::dialogengine::Context::AddGlobalParameter(this, (const siri::dialogengine::Parameter *)__p);
  uint64_t v29 = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v30);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v28);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  id v6 = (std::__shared_weak_count *)operator new(0x108uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2126AF0;
  std::string::basic_string[abi:ne180100]<0>(__p, "deviceLocale");
  std::string::basic_string[abi:ne180100]<0>(&v32, "");
  siri::dialogengine::VariableString::VariableString((uint64_t)&v6[1], __p, (uint64_t)&v32);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  v16[0] = v6 + 1;
  v16[1] = v6;
  siri::dialogengine::Context::AddVariable((uint64_t)this, v16);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  std::string::basic_string[abi:ne180100]<0>(&v32, "deviceLocale");
  std::string::basic_string[abi:ne180100]<0>(&v26, "dialog.String");
  std::string::basic_string[abi:ne180100]<0>(&v25, "");
  std::string::basic_string[abi:ne180100]<0>(&v24, "");
  std::string::basic_string[abi:ne180100]<0>(&v23, "");
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::Parameter::Parameter((uint64_t)__p, &v32, &v26, &v25, &v24, &v23, &v22, &v21, &__str, 1, 0, 0, 1);
  siri::dialogengine::Context::AddGlobalParameter(this, (const siri::dialogengine::Parameter *)__p);
  uint64_t v29 = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v30);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v28);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  char v7 = (std::__shared_weak_count *)operator new(0x78uLL);
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2123A90;
  std::string::basic_string[abi:ne180100]<0>(__p, "now");
  siri::dialogengine::VariableObject::VariableObject(&v7[1].__vftable, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  gettimeofday((timeval *)__p, 0);
  int v8 = __p[0].__r_.__value_.__r.__words[1];
  uint64_t v9 = __p[0].__r_.__value_.__r.__words[0];
  uint64_t v10 = (std::__shared_weak_count *)operator new(0x68uLL);
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2126A88;
  std::string::basic_string[abi:ne180100]<0>(__p, "secs");
  siri::dialogengine::VariableNumber::VariableNumber((uint64_t)&v10[1], __p, (double)v8 / 1000000.0 + (double)v9);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  siri::dialogengine::GetICUHostTimeZone(&v32);
  uint64_t v11 = (std::__shared_weak_count *)operator new(0x108uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2126AF0;
  std::string::basic_string[abi:ne180100]<0>(__p, "timeZone");
  siri::dialogengine::VariableString::VariableString((uint64_t)&v11[1], __p, (uint64_t)&v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  v15[0] = v10 + 1;
  v15[1] = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  siri::dialogengine::VariableObject::AddProperty((uint64_t)&v7[1], v15);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  v14[0] = v11 + 1;
  v14[1] = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  siri::dialogengine::VariableObject::AddProperty((uint64_t)&v7[1], v14);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  v13[0] = v7 + 1;
  v13[1] = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  siri::dialogengine::Context::AddVariable((uint64_t)this, v13);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  std::string::basic_string[abi:ne180100]<0>(&v32, "now");
  std::string::basic_string[abi:ne180100]<0>(&v26, "dialog.Calendar");
  std::string::basic_string[abi:ne180100]<0>(&v25, "");
  std::string::basic_string[abi:ne180100]<0>(&v24, "");
  std::string::basic_string[abi:ne180100]<0>(&v23, "");
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::Parameter::Parameter((uint64_t)__p, &v32, &v26, &v25, &v24, &v23, &v22, &v21, &__str, 1, 0, 0, 1);
  siri::dialogengine::Context::AddGlobalParameter(this, (const siri::dialogengine::Parameter *)__p);
  uint64_t v29 = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v30);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v28);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1C5F109C8(_Unwind_Exception *a1)
{
}

void siri::dialogengine::Context::AddVariable(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 552;
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(void **)(a1 + 552));
  *(void *)(a1 + 544) = v4;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 552) = 0;
  uint64_t v5 = *a2;
  if (*a2)
  {
    id v6 = (uint64_t **)(a1 + 520);
    if (*(char *)(v5 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 8), *(void *)(v5 + 16));
    }
    else
    {
      long long v7 = *(_OWORD *)(v5 + 8);
      __p.__r_.__value_.__r.__words[2] = *(void *)(v5 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
    }
    p_p = &__p;
    int v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p);
    uint64_t v10 = *a2;
    uint64_t v9 = a2[1];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v8 + 8);
    *((void *)v8 + 7) = v10;
    *((void *)v8 + 8) = v9;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(void *)(*a2 + 56) = 0;
  }
}

void sub_1C5F10E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Context::AddGlobalParameter(siri::dialogengine::Context *this, const siri::dialogengine::Parameter *a2)
{
  uint64_t v4 = (uint64_t **)((char *)this + 568);
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 8);
  }
  uint64_t v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)v4, &v11, (const void **)&__p.__r_.__value_.__l.__data_);
  id v6 = (char *)*v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    id v6 = (char *)operator new(0x188uLL);
    v9[0] = v6;
    v9[1] = (char *)this + 576;
    char v10 = 0;
    *(std::string *)(v6 + 32) = __p;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_OWORD *)(v6 + 2google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0u;
    *(_OWORD *)(v6 + 232) = 0u;
    *(_OWORD *)(v6 + 248) = 0u;
    *(_OWORD *)(v6 + 264) = 0u;
    *(_OWORD *)(v6 + 280) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 296) = 0u;
    *(_OWORD *)(v6 + 312) = 0u;
    *(_OWORD *)(v6 + 328) = 0u;
    *(_OWORD *)(v6 + 344) = 0u;
    *(_OWORD *)(v6 + 360) = 0u;
    *(_OWORD *)(v6 + 376) = 0u;
    siri::dialogengine::Parameter::Parameter((siri::dialogengine::Parameter *)(v6 + 56));
    char v10 = 1;
    std::__tree<std::string>::__insert_node_at(v4, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  }
  siri::dialogengine::Parameter::operator=((uint64_t)(v6 + 56), (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F10F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetDialogEngineVersionMajorMinor(siri::dialogengine *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "3402.35.1");
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  std::string::size_type v1 = siri::dialogengine::StringRFind((uint64_t)&__str, (uint64_t)__p, 0xFFFFFFFFFFFFFFFFLL);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string(&siri::dialogengine::Context::AddCatGlobalVariables(void)::versionMajorMinor, &__str, 0, v1, (std::allocator<char> *)__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F11048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  std::string::size_type v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::Parameter>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<siri::dialogengine::TraceWriter>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 48, *(char **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::__shared_ptr_emplace<siri::dialogengine::TraceWriter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F038;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::TraceWriter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

siri::dialogengine::Context *siri::dialogengine::Context::Context(siri::dialogengine::Context *a1, std::string **a2)
{
  uint64_t v4 = (std::string **)((char *)siri::dialogengine::Context::Context(a1) + 16);
  if (v4 != a2) {
    std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)v4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 5));
  }
  siri::dialogengine::Context::CheckTemplateDirs(a1);
  return a1;
}

{
  std::string **v4;

  uint64_t v4 = (std::string **)((char *)siri::dialogengine::Context::Context(a1) + 16);
  if (v4 != a2) {
    std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)v4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 5));
  }
  siri::dialogengine::Context::CheckTemplateDirs(a1);
  return a1;
}

void sub_1C5F11200(_Unwind_Exception *a1)
{
  siri::dialogengine::Context::~Context(v1);
  _Unwind_Resume(a1);
}

void sub_1C5F11270(_Unwind_Exception *a1)
{
  siri::dialogengine::Context::~Context(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Context::LoadFiles(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::operator=((std::string *)(a1 + 88), (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 264), (const std::string *)a3);
  id v6 = *(std::__shared_weak_count **)(a1 + 512);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = a1 + 688;
  MEMORY[0x1C8796900](a1 + 688, "load-failed");
  uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  if (!v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "No path provided for CAT file... nothing to load.");
    siri::dialogengine::Context::SetError(a1, (uint64_t)&__str);
    goto LABEL_73;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (!v10 || !siri::dialogengine::FileExists((uint64_t *)a2))
  {
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"CAT params file not found... continuing without any parameters.", v8);
    goto LABEL_65;
  }
  if (siri::dialogengine::HasCATExtension((std::string *)a2, 0))
  {
    uint64_t v11 = *(void *)(a1 + 3448);
    id v12 = *(std::__shared_weak_count **)(a1 + 3456);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    siri::dialogengine::TraceWriter::CopyParamsFile(v11, (const void **)a2);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    siri::dialogengine::ParseXmlFile((Context *)a1, a2, (uint64_t)&__str);
  }
  else
  {
    if (!siri::dialogengine::HasCATExtension((std::string *)a2, 1))
    {
      uint64_t v15 = 0;
LABEL_30:
      unint64_t v19 = (_OWORD *)(a1 + 712);
      if (*(char *)(a1 + 735) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a1 + 712), *(void *)(a1 + 720));
      }
      else
      {
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v19;
        __str.__r_.__value_.__r.__words[2] = *(void *)(a1 + 728);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
        operator delete(__str.__r_.__value_.__l.__data_);
        if (!size) {
          goto LABEL_28;
        }
      }
      else if (!*((unsigned char *)&__str.__r_.__value_.__s + 23))
      {
        goto LABEL_28;
      }
      std::operator+<char>();
      std::string::size_type v20 = std::string::append(&v58, ": ");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a1 + 735) < 0)
      {
        std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(a1 + 712), *(void *)(a1 + 720));
      }
      else
      {
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *v19;
        v57.__r_.__value_.__r.__words[2] = *(void *)(a1 + 728);
      }
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v23 = &v57;
      }
      else {
        std::string v23 = (std::string *)v57.__r_.__value_.__r.__words[0];
      }
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v24 = v57.__r_.__value_.__l.__size_;
      }
      std::string v25 = std::string::append(&v59, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::SetError(a1, (uint64_t)&__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      long long v27 = (void *)v58.__r_.__value_.__r.__words[0];
      goto LABEL_62;
    }
    uint64_t v13 = *(void *)(a1 + 3448);
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 3456);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    siri::dialogengine::TraceWriter::CopyParamsFile(v13, (const void **)a2);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    siri::dialogengine::ParseBinaryFile((siri::dialogengine::Context *)a1, a2, (long long *)&__str);
  }
  uint64_t v15 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  std::string::size_type v16 = __str.__r_.__value_.__r.__words[0];
  if (!__str.__r_.__value_.__r.__words[0]) {
    goto LABEL_30;
  }
  uint64_t v18 = *(void *)(__str.__r_.__value_.__r.__words[0] + 224);
  unsigned int v17 = *(std::__shared_weak_count **)(__str.__r_.__value_.__r.__words[0] + 232);
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (!v18)
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__str, 0);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string::operator=((std::string *)(v16 + 32), (const std::string *)a2);
    if (*(char *)(v16 + 127) < 0) {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v16 + 104), *(void *)(v16 + 112));
    }
    else {
      std::string __str = *(std::string *)(v16 + 104);
    }
    std::string::operator=((std::string *)(v16 + 640), &__str);
    goto LABEL_60;
  }
LABEL_28:
  std::operator+<char>();
  siri::dialogengine::Context::SetError(a1, (uint64_t)&__str);
LABEL_60:
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_63;
  }
  long long v27 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_62:
  operator delete(v27);
LABEL_63:
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
LABEL_65:
  if (!siri::dialogengine::FileExists((uint64_t *)a3))
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "Could not load a CAT locale file - aborting...");
    siri::dialogengine::Context::SetError(a1, (uint64_t)&__str);
LABEL_73:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  if (siri::dialogengine::HasCATExtension((std::string *)a3, 0))
  {
    uint64_t v28 = *(void *)(a1 + 3448);
    uint64_t v29 = *(std::__shared_weak_count **)(a1 + 3456);
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    siri::dialogengine::TraceWriter::CopyLocaleFile(v28, (const void **)a3);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    siri::dialogengine::ParseXmlFile((Context *)a1, a3, (uint64_t)&__str);
  }
  else
  {
    if (!siri::dialogengine::HasCATExtension((std::string *)a3, 1))
    {
      std::string v32 = 0;
LABEL_87:
      if (*(char *)(a1 + 735) < 0)
      {
        if (*(void *)(a1 + 720)) {
          goto LABEL_89;
        }
      }
      else if (*(unsigned char *)(a1 + 735))
      {
LABEL_89:
        std::operator+<char>();
        char v34 = std::string::append(&v58, ": ");
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        int v36 = *(char *)(a1 + 735);
        if (v36 >= 0) {
          char v37 = (const std::string::value_type *)(a1 + 712);
        }
        else {
          char v37 = *(const std::string::value_type **)(a1 + 712);
        }
        if (v36 >= 0) {
          std::string::size_type v38 = *(unsigned __int8 *)(a1 + 735);
        }
        else {
          std::string::size_type v38 = *(void *)(a1 + 720);
        }
        uint64_t v39 = std::string::append(&v59, v37, v38);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::SetError(a1, (uint64_t)&__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_105:
          char v42 = 0;
          if (!v32) {
            goto LABEL_107;
          }
          goto LABEL_106;
        }
        std::string::size_type v41 = (void *)v58.__r_.__value_.__r.__words[0];
LABEL_104:
        operator delete(v41);
        goto LABEL_105;
      }
      std::operator+<char>();
      siri::dialogengine::Context::SetError(a1, (uint64_t)&__str);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_105;
      }
      std::string::size_type v41 = (void *)__str.__r_.__value_.__r.__words[0];
      goto LABEL_104;
    }
    uint64_t v30 = *(void *)(a1 + 3448);
    char v31 = *(std::__shared_weak_count **)(a1 + 3456);
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    siri::dialogengine::TraceWriter::CopyLocaleFile(v30, (const void **)a3);
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    siri::dialogengine::ParseBinaryFile((siri::dialogengine::Context *)a1, a3, (long long *)&__str);
  }
  std::string v32 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  std::string::size_type v33 = __str.__r_.__value_.__r.__words[0];
  if (!__str.__r_.__value_.__r.__words[0]) {
    goto LABEL_87;
  }
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)&__str, 0);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 239) < 0) {
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(a1 + 216), *(void *)(a1 + 224));
  }
  else {
    std::string v56 = *(std::string *)(a1 + 216);
  }
  uint64_t v44 = *(unsigned __int8 *)(a3 + 23);
  if ((v44 & 0x80u) != 0) {
    uint64_t v44 = *(void *)(a3 + 8);
  }
  if (v44)
  {
    std::string::size_type v45 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v45 = v56.__r_.__value_.__l.__size_;
    }
    if (v45)
    {
      siri::dialogengine::GetCanonicalLocale(&v56, 0, &__str);
      siri::dialogengine::CatLocalePathToLocale(a3, &v58);
      double CanonicalLocale = siri::dialogengine::GetCanonicalLocale(&v58, 0, &v59);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      uint64_t v48 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      char v49 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v50 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v50 = v59.__r_.__value_.__l.__size_;
      }
      std::string::size_type v51 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        p_str = &__str;
      }
      else
      {
        std::string::size_type v51 = __str.__r_.__value_.__l.__size_;
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v50 == v51)
      {
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        {
          long long v55 = (std::string *)v59.__r_.__value_.__r.__words[0];
          if (!memcmp(v59.__r_.__value_.__l.__data_, p_str, v59.__r_.__value_.__l.__size_))
          {
LABEL_138:
            operator delete(v55);
LABEL_139:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            goto LABEL_141;
          }
LABEL_135:
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Loaded CAT locale file (%s) does not exactly match the requested locale (%s)", v46, CanonicalLocale, v55, p_str, v56.__r_.__value_.__r.__words[0]);
          char v49 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
LABEL_136:
          if ((v49 & 0x80) == 0) {
            goto LABEL_139;
          }
          long long v55 = (std::string *)v59.__r_.__value_.__r.__words[0];
          goto LABEL_138;
        }
        if (!*((unsigned char *)&v59.__r_.__value_.__s + 23)) {
          goto LABEL_139;
        }
        long long v53 = &v59;
        char v54 = p_str;
        while (v53->__r_.__value_.__s.__data_[0] == v54->__r_.__value_.__s.__data_[0])
        {
          long long v53 = (std::string *)((char *)v53 + 1);
          char v54 = (std::string *)((char *)v54 + 1);
          if (!--v48) {
            goto LABEL_136;
          }
        }
      }
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v55 = &v59;
      }
      else {
        long long v55 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      goto LABEL_135;
    }
  }
LABEL_141:
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  std::string::operator=((std::string *)(v33 + 56), (const std::string *)a3);
  char v42 = 1;
  if (v32) {
LABEL_106:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
LABEL_107:
  if (v42)
  {
    MEMORY[0x1C8796900](v7, "success");
    return 1;
  }
  return 0;
}

void sub_1C5F11A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Context::SetError(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 712), (const std::string *)a2);
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    siri::dialogengine::Log::LogWithLevel(a2, 3u);
  }
}

void siri::dialogengine::Context::SetFile(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 512);
  *(void *)(a1 + 504) = v3;
  *(void *)(a1 + 512) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t siri::dialogengine::Context::GetTraceWriter@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 3456);
  *a2 = *(void *)(this + 3448);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t siri::dialogengine::Context::LoadVisualFiles(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 512);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  MEMORY[0x1C8796900](a1 + 688, "load-failed");
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    if (siri::dialogengine::FileExists((uint64_t *)a2))
    {
      *(_DWORD *)(a1 + 8) = 1;
      if (siri::dialogengine::HasVisualCATExtension((std::string *)a2, 0))
      {
        siri::dialogengine::ParseXmlFile((Context *)a1, a2, (uint64_t)__p);
      }
      else
      {
        if (!siri::dialogengine::HasVisualCATExtension((std::string *)a2, 1))
        {
          uint64_t v7 = 0;
          goto LABEL_22;
        }
        siri::dialogengine::ParseBinaryFile((siri::dialogengine::Context *)a1, a2, (long long *)__p);
      }
      int v8 = (char *)__p[0];
      uint64_t v7 = (std::__shared_weak_count *)__p[1];
      if (__p[0])
      {
        std::operator+<char>();
        siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 0);
        if (SHIBYTE(v21) < 0) {
          operator delete(__p[0]);
        }
        std::string::operator=((std::string *)(v8 + 80), (const std::string *)a2);
        MEMORY[0x1C8796900](a1 + 688, "success");
        uint64_t v6 = 1;
        if (!v7) {
          return v6;
        }
LABEL_41:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return v6;
      }
LABEL_22:
      if (*(char *)(a1 + 735) < 0)
      {
        if (*(void *)(a1 + 720)) {
          goto LABEL_24;
        }
      }
      else if (*(unsigned char *)(a1 + 735))
      {
LABEL_24:
        std::operator+<char>();
        uint64_t v9 = std::string::append(&v18, ": ");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v19.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        int v11 = *(char *)(a1 + 735);
        if (v11 >= 0) {
          id v12 = (const std::string::value_type *)(a1 + 712);
        }
        else {
          id v12 = *(const std::string::value_type **)(a1 + 712);
        }
        if (v11 >= 0) {
          std::string::size_type v13 = *(unsigned __int8 *)(a1 + 735);
        }
        else {
          std::string::size_type v13 = *(void *)(a1 + 720);
        }
        uint64_t v14 = std::string::append(&v19, v12, v13);
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        std::string::size_type v21 = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::SetError(a1, (uint64_t)__p);
        if (SHIBYTE(v21) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_40:
          uint64_t v6 = 0;
          if (!v7) {
            return v6;
          }
          goto LABEL_41;
        }
        std::string::size_type v16 = (void *)v18.__r_.__value_.__r.__words[0];
LABEL_39:
        operator delete(v16);
        goto LABEL_40;
      }
      std::operator+<char>();
      siri::dialogengine::Context::SetError(a1, (uint64_t)__p);
      if ((SHIBYTE(v21) & 0x80000000) == 0) {
        goto LABEL_40;
      }
      std::string::size_type v16 = __p[0];
      goto LABEL_39;
    }
    std::operator+<char>();
    siri::dialogengine::Context::SetError(a1, (uint64_t)__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "No path provided for Visual CAT file... nothing to load.");
    siri::dialogengine::Context::SetError(a1, (uint64_t)__p);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1C5F11EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Context::LoadStrings(uint64_t a1, const std::string *a2, const std::string *a3)
{
  uint64_t v6 = *(void *)(a1 + 3448);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 3456);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::TraceWriter::WriteParamsString(v6, (const char *)a2);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = *(void *)(a1 + 3448);
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 3456);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::TraceWriter::WriteLocaleString(v8, (const char *)a3);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::string::operator=((std::string *)(a1 + 64), a2);
  std::string::operator=((std::string *)(a1 + 192), a3);
  long long v10 = *(std::__shared_weak_count **)(a1 + 512);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  MEMORY[0x1C8796900](a1 + 688, "load-failed");
  std::string::basic_string[abi:ne180100]<0>(__p, "_params.cat.xml");
  siri::dialogengine::ParseXmlString((Context *)a1, (uint64_t)a2, (uint64_t)__p, &v16);
  uint64_t v11 = v16;
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if (v11) {
      goto LABEL_15;
    }
LABEL_21:
    std::string::basic_string[abi:ne180100]<0>(__p, "Cannot parse CAT params string.");
    siri::dialogengine::Context::SetError(a1, (uint64_t)__p);
    goto LABEL_24;
  }
  if (!v11) {
    goto LABEL_21;
  }
LABEL_15:
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::ParseXmlString((Context *)a1, (uint64_t)a3, (uint64_t)__p, &v16);
  uint64_t v12 = v16;
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if (v12) {
      goto LABEL_19;
    }
  }
  else if (v12)
  {
LABEL_19:
    MEMORY[0x1C8796900](a1 + 688, "success");
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Cannot parse CAT locale string.");
  siri::dialogengine::Context::SetError(a1, (uint64_t)__p);
LABEL_24:
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1C5F12144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::Context::LoadVisualStrings(uint64_t a1, const std::string *a2)
{
  uint64_t v4 = *(void *)(a1 + 3448);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 3456);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::TraceWriter::WriteVisualString(v4, (const char *)a2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::string::operator=((std::string *)(a1 + 376), a2);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 512);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  MEMORY[0x1C8796900](a1 + 688, "load-failed");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::ParseXmlString((Context *)a1, (uint64_t)a2, (uint64_t)__p, &v11);
  uint64_t v7 = v11;
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v7) {
      goto LABEL_11;
    }
  }
  else if (v7)
  {
LABEL_11:
    MEMORY[0x1C8796900](a1 + 688, "success");
    return v7 != 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Cannot parse Visual CAT String.");
  siri::dialogengine::Context::SetError(a1, (uint64_t)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v7 != 0;
}

void sub_1C5F122A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Context::Load(siri::dialogengine::Context *this)
{
  memset(v43, 0, sizeof(v43));
  std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(v43, *((void *)this + 2), *((void *)this + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 5));
  if (*((char *)this + 87) < 0) {
    std::string::__init_copy_ctor_external(&v42, *((const std::string::value_type **)this + 8), *((void *)this + 9));
  }
  else {
    std::string v42 = *(std::string *)((char *)this + 64);
  }
  if (*((char *)this + 215) < 0) {
    std::string::__init_copy_ctor_external(&v41, *((const std::string::value_type **)this + 24), *((void *)this + 25));
  }
  else {
    std::string v41 = *(std::string *)((unsigned char *)this + 8);
  }
  if (*((char *)this + 239) < 0) {
    std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)this + 27), *((void *)this + 28));
  }
  else {
    std::string v40 = *(std::string *)((unsigned char *)this + 9);
  }
  if (*((char *)this + 63) < 0) {
    std::string::__init_copy_ctor_external(&v39, *((const std::string::value_type **)this + 5), *((void *)this + 6));
  }
  else {
    std::string v39 = *(std::string *)((char *)this + 40);
  }
  if (*((char *)this + 111) < 0) {
    std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)this + 11), *((void *)this + 12));
  }
  else {
    std::string v38 = *(std::string *)((char *)this + 88);
  }
  if (*((char *)this + 287) < 0) {
    std::string::__init_copy_ctor_external(&v37, *((const std::string::value_type **)this + 33), *((void *)this + 34));
  }
  else {
    std::string v37 = *(std::string *)((unsigned char *)this + 11);
  }
  if (*((char *)this + 423) < 0) {
    std::string::__init_copy_ctor_external(&v36, *((const std::string::value_type **)this + 50), *((void *)this + 51));
  }
  else {
    std::string v36 = *(std::string *)((char *)this + 400);
  }
  if (*((char *)this + 399) < 0) {
    std::string::__init_copy_ctor_external(&v35, *((const std::string::value_type **)this + 47), *((void *)this + 48));
  }
  else {
    std::string v35 = *(std::string *)((char *)this + 376);
  }
  int v3 = *((_DWORD *)this + 2);
  if (!v3)
  {
    std::string::size_type v6 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    char v7 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v37.__r_.__value_.__l.__size_;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v9 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v9 = v37.__r_.__value_.__l.__size_;
    }
    if (v9)
    {
      std::string::size_type v10 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v10 = v42.__r_.__value_.__l.__size_;
      }
      if (v10)
      {
        siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Ignoring CAT 'path' parameter - using specified CAT param string", v2);
        std::string::size_type v6 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        std::string::size_type size = v37.__r_.__value_.__l.__size_;
        char v7 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
    }
    if (v7 < 0) {
      std::string::size_type v6 = size;
    }
    if (v6) {
      goto LABEL_45;
    }
    std::string::size_type v11 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v11 = v41.__r_.__value_.__l.__size_;
    }
    if (v11)
    {
LABEL_45:
      std::string::size_type v12 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v12 = v42.__r_.__value_.__l.__size_;
      }
      if (v12) {
        goto LABEL_51;
      }
      std::string::size_type v13 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v13 = v41.__r_.__value_.__l.__size_;
      }
      if (v13) {
LABEL_51:
      }
        uint64_t Files = siri::dialogengine::Context::LoadStrings((uint64_t)this, &v42, &v41);
      else {
        uint64_t Files = siri::dialogengine::Context::LoadFiles((uint64_t)this, (uint64_t)&v38, (uint64_t)&v37);
      }
      goto LABEL_81;
    }
    std::operator+<char>();
    char v15 = std::string::append(&v29, "' for '");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v17 = &v40;
    }
    else {
      unsigned int v17 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v18 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v18 = v40.__r_.__value_.__l.__size_;
    }
    std::string v19 = std::string::append(&v30, (const std::string::value_type *)v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v21 = std::string::append(&v31, "' in ");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::GetBaseDir(v43, &v28);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v23 = &v28;
    }
    else {
      std::string v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v24 = v28.__r_.__value_.__l.__size_;
    }
    std::string v25 = std::string::append(&v32, (const std::string::value_type *)v23, v24);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    std::string::size_type v34 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::SetError((uint64_t)this, (uint64_t)__p);
    if (SHIBYTE(v34) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    MEMORY[0x1C8796900]((char *)this + 688, "request-error");
LABEL_53:
    uint64_t v14 = 0;
    goto LABEL_82;
  }
  if (v3 != 1)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Request type is not dialog or visual", v2);
    goto LABEL_53;
  }
  std::string::size_type v4 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v4 = v35.__r_.__value_.__l.__size_;
  }
  if (v4) {
    uint64_t Files = siri::dialogengine::Context::LoadVisualStrings((uint64_t)this, &v35);
  }
  else {
    uint64_t Files = siri::dialogengine::Context::LoadVisualFiles((uint64_t)this, (uint64_t)&v36);
  }
LABEL_81:
  uint64_t v14 = Files;
LABEL_82:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  return v14;
}

void sub_1C5F127B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (*(char *)(v68 - 185) < 0) {
    operator delete(*(void **)(v68 - 208));
  }
  if (*(char *)(v68 - 153) < 0) {
    operator delete(*(void **)(v68 - 176));
  }
  if (*(char *)(v68 - 121) < 0) {
    operator delete(*(void **)(v68 - 144));
  }
  if (*(char *)(v68 - 89) < 0) {
    operator delete(*(void **)(v68 - 112));
  }
  if (*(char *)(v68 - 57) < 0) {
    operator delete(*(void **)(v68 - 80));
  }
  *(void *)(v68 - 80) = v68 - 56;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)(v68 - 80));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Context::GetRequestType(siri::dialogengine::Context *this)
{
  return *((unsigned int *)this + 2);
}

BOOL siri::dialogengine::Context::Save(uint64_t a1, uint64_t a2, const void **a3, int a4, siri::dialogengine::CatBinary::condition_entry *a5)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (!v5)
  {
    uint64_t v14 = "Unable to Save CAT file to empty path.";
LABEL_27:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v14, (const char *)a2);
    return 0;
  }
  HasVisualCATExtensiouint64_t n = siri::dialogengine::HasVisualCATExtension((std::string *)a2, 1);
  int v12 = siri::dialogengine::HasVisualCATExtension((std::string *)a2, 0);
  if ((HasVisualCATExtension & 1) == 0 && !v12)
  {
    std::string::size_type v13 = (const void *)*((unsigned __int8 *)a3 + 23);
    if ((char)v13 < 0) {
      std::string::size_type v13 = a3[1];
    }
    if (v13)
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v41 = *(std::string *)a2;
      }
      if (siri::dialogengine::CreateDir(&v41, 504))
      {
        memset(&v40, 0, sizeof(v40));
        memset(&v39, 0, sizeof(v39));
        if (a4 == 1)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "_params.cat.bin");
          siri::dialogengine::JoinPath((uint64_t)&v41, (uint64_t)&__p, (uint64_t)&v38);
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
          std::string v40 = v38;
          *((unsigned char *)&v38.__r_.__value_.__s + 23) = 0;
          v38.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (*((char *)a3 + 23) >= 0) {
            size_t v30 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v30 = (size_t)a3[1];
          }
          p_p = &__p;
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v30 + 8);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (v30)
          {
            if (*((char *)a3 + 23) >= 0) {
              std::string v32 = a3;
            }
            else {
              std::string v32 = *a3;
            }
            memmove(p_p, v32, v30);
          }
          strcpy((char *)p_p + v30, ".cat.bin");
          siri::dialogengine::JoinPath((uint64_t)&v41, (uint64_t)&__p, (uint64_t)&v38);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v39.__r_.__value_.__l.__data_);
          }
          std::string v39 = v38;
          *((unsigned char *)&v38.__r_.__value_.__s + 23) = 0;
          v38.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (siri::dialogengine::WriteParametersBinary(*(siri::dialogengine::File **)(a1 + 504), (uint64_t)&v40, a5))
          {
            uint64_t v27 = siri::dialogengine::WriteCatBinary(*(void *)(a1 + 504), (uint64_t)&v39, a5);
            goto LABEL_80;
          }
        }
        else if (a4)
        {
          std::to_string(&__p, a4);
          std::string::size_type v33 = std::string::insert(&__p, 0, "Unexpected CAT file format: ");
          long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
          v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
          v33->__r_.__value_.__l.__size_ = 0;
          v33->__r_.__value_.__r.__words[2] = 0;
          v33->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v38, 3u);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "_params.cat.xml");
          siri::dialogengine::JoinPath((uint64_t)&v41, (uint64_t)&__p, (uint64_t)&v38);
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
          std::string v40 = v38;
          *((unsigned char *)&v38.__r_.__value_.__s + 23) = 0;
          v38.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (*((char *)a3 + 23) >= 0) {
            size_t v24 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v24 = (size_t)a3[1];
          }
          std::string v25 = &__p;
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v24 + 8);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (v24)
          {
            if (*((char *)a3 + 23) >= 0) {
              long long v26 = a3;
            }
            else {
              long long v26 = *a3;
            }
            memmove(v25, v26, v24);
          }
          strcpy((char *)v25 + v24, ".cat.xml");
          siri::dialogengine::JoinPath((uint64_t)&v41, (uint64_t)&__p, (uint64_t)&v38);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v39.__r_.__value_.__l.__data_);
          }
          std::string v39 = v38;
          *((unsigned char *)&v38.__r_.__value_.__s + 23) = 0;
          v38.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (siri::dialogengine::WriteParametersXml(*(siri::dialogengine::File **)(a1 + 504), (uint64_t)&v40))
          {
            uint64_t v27 = siri::dialogengine::WriteLocaleXml(*(void *)(a1 + 504), (char *)&v39);
LABEL_80:
            BOOL v21 = v27;
LABEL_86:
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v39.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v40.__r_.__value_.__l.__data_);
            }
            goto LABEL_97;
          }
        }
        BOOL v21 = 0;
        goto LABEL_86;
      }
      goto LABEL_58;
    }
    uint64_t v14 = "Unable to Save CAT file to empty locale.";
    goto LABEL_27;
  }
  if (a4) {
    int v15 = 0;
  }
  else {
    int v15 = HasVisualCATExtension;
  }
  if (v15 == 1)
  {
    siri::dialogengine::BaseName(a2, &v40);
    long long v16 = std::string::insert(&v40, 0, "Cannot save Visual CAT XML to file with binary extension: ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v41, 3u);
LABEL_22:
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  if (a4 == 1) {
    int v18 = v12;
  }
  else {
    int v18 = 0;
  }
  if (v18 == 1)
  {
    siri::dialogengine::BaseName(a2, &v40);
    std::string v19 = std::string::insert(&v40, 0, "Cannot save Visual CAT binary to file with XML extension: ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v41, 3u);
    goto LABEL_22;
  }
  siri::dialogengine::DirName((std::string *)a2, (uint64_t)&v41);
  if ((siri::dialogengine::CreateDir(&v41, 504) & 1) == 0)
  {
LABEL_58:
    std::operator+<char>();
    std::string v28 = std::string::append(&v39, "'");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v40, 3u);
LABEL_92:
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    goto LABEL_96;
  }
  if (a4 == 1)
  {
    BOOL v21 = siri::dialogengine::WriteCatBinary(*(void *)(a1 + 504), a2, a5);
    goto LABEL_97;
  }
  if (a4)
  {
    std::to_string(&v39, a4);
    std::string v35 = std::string::insert(&v39, 0, "Unexpected CAT file format: ");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v40, 3u);
    goto LABEL_92;
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Saving Visual CAT to XML is not yet supported", v23);
LABEL_96:
  BOOL v21 = 0;
LABEL_97:
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  return v21;
}

void sub_1C5F12F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v35 - 57) < 0) {
    operator delete(*(void **)(v35 - 80));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Context::GetLoadStatus(siri::dialogengine::Context *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 711) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 86), *((void *)this + 87));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 43);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 88);
  }
}

void siri::dialogengine::Context::SetLoadStatus(uint64_t a1, const std::string *a2, uint64_t a3)
{
  std::string::operator=((std::string *)(a1 + 688), a2);
  siri::dialogengine::Context::SetError(a1, a3);
}

uint64_t siri::dialogengine::Context::UpgradeAndSave(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 504)) {
    return 0;
  }
  HasCATExtensiouint64_t n = siri::dialogengine::HasCATExtension((std::string *)a2, 0);
  siri::dialogengine::DirName((std::string *)a2, (uint64_t)v34);
  uint64_t v7 = *(void *)(a1 + 504);
  if (*(char *)(v7 + 175) < 0) {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v7 + 152), *(void *)(v7 + 160));
  }
  else {
    std::string v33 = *(std::string *)(v7 + 152);
  }
  siri::dialogengine::GetValidVersion(a3, (uint64_t)v31);
  if (siri::dialogengine::VersionEqual((unsigned __int8 *)&v33, (unsigned __int8 *)v31))
  {
    std::operator+<char>();
    std::string::size_type v9 = std::string::append(&v28, " - version is already ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if ((v32 & 0x80u) == 0) {
      std::string::size_type v11 = (const std::string::value_type *)v31;
    }
    else {
      std::string::size_type v11 = (const std::string::value_type *)v31[0];
    }
    if ((v32 & 0x80u) == 0) {
      std::string::size_type v12 = v32;
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v31[1];
    }
    std::string::size_type v13 = std::string::append(&v29, v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_52;
    }
    int v15 = (void *)v28.__r_.__value_.__r.__words[0];
    goto LABEL_19;
  }
  long long v16 = *(std::__shared_weak_count **)(a1 + 512);
  v27[0] = *(void *)(a1 + 504);
  v27[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v17 = siri::dialogengine::UpgradeVersion(v27, (unsigned __int8 *)v31);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v17 == 2) {
    int v18 = HasCATExtension;
  }
  else {
    int v18 = 0;
  }
  if (v18 != 1)
  {
    if (v17 != 3) {
      goto LABEL_52;
    }
    uint64_t v19 = *(void *)(a1 + 504);
    if (*(char *)(v19 + 151) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v19 + 128), *(void *)(v19 + 136));
    }
    else {
      std::string __p = *(std::string *)(v19 + 128);
    }
    BOOL v22 = siri::dialogengine::Context::Save(a1, (uint64_t)v34, (const void **)&__p.__r_.__value_.__l.__data_, HasCATExtension ^ 1, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v22) {
      goto LABEL_52;
    }
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
LABEL_55:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v8 = 0;
    goto LABEL_58;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v26 = *(std::string *)a2;
  }
  BOOL v20 = siri::dialogengine::ChangeVersionForCATXML(&v26, (uint64_t)v31);
  BOOL v21 = v20;
  if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v20) {
      goto LABEL_36;
    }
    goto LABEL_41;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if (!v21)
  {
LABEL_41:
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    goto LABEL_55;
  }
LABEL_36:
  std::string::basic_string[abi:ne180100]<0>(&v29, "_params.cat.xml");
  siri::dialogengine::JoinPath((uint64_t)v34, (uint64_t)&v29, (uint64_t)&__p);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v25, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v25 = __p;
  }
  BOOL v23 = siri::dialogengine::ChangeVersionForCATXML(&v25, (uint64_t)v31);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (!v23)
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v29, 3u);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    goto LABEL_55;
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_52;
  }
  int v15 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_19:
  operator delete(v15);
LABEL_52:
  uint64_t v8 = 1;
LABEL_58:
  if ((char)v32 < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  return v8;
}

void sub_1C5F134B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v42 - 97) < 0) {
    operator delete(*(void **)(v42 - 120));
  }
  if (*(char *)(v42 - 73) < 0) {
    operator delete(*(void **)(v42 - 96));
  }
  if (*(char *)(v42 - 49) < 0) {
    operator delete(*(void **)(v42 - 72));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Context::GetError(siri::dialogengine::Context *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 735) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 89), *((void *)this + 90));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 712);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 91);
  }
}

uint64_t siri::dialogengine::Context::GetFile@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 512);
  *a2 = *(void *)(this + 504);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void *siri::dialogengine::Context::GetRequestTypeString@<X0>(siri::dialogengine::Context *this@<X0>, void *a2@<X8>)
{
  int v2 = *((_DWORD *)this + 2);
  int v3 = "";
  if (v2 == 1) {
    int v3 = "visual";
  }
  if (v2) {
    std::string::size_type v4 = (char *)v3;
  }
  else {
    std::string::size_type v4 = "dialog";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v4);
}

void siri::dialogengine::Context::GetLocale(siri::dialogengine::Context *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)this + 239) < 0) {
    std::string::__init_copy_ctor_external(&v17, *((const std::string::value_type **)this + 27), *((void *)this + 28));
  }
  else {
    std::string v17 = *(std::string *)((unsigned char *)this + 9);
  }
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    *(std::string *)a3 = v17;
    memset(&v17, 0, sizeof(v17));
  }
  else
  {
    uint64_t v6 = *((void *)this + 63);
    if (v6)
    {
      if (*(char *)(v6 + 151) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)(v6 + 128), *(void *)(v6 + 136));
      }
      else
      {
        long long v7 = *(_OWORD *)(v6 + 128);
        *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = *(void *)(v6 + 144);
        *(_OWORD *)a3 = v7;
      }
      uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = *(void *)(a3 + 8);
      }
      if (!v8)
      {
        uint64_t v9 = *((void *)this + 63);
        if (*(char *)(v9 + 79) < 0) {
          std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v9 + 56), *(void *)(v9 + 64));
        }
        else {
          std::string v16 = *(std::string *)(v9 + 56);
        }
        long long v10 = &v16;
        if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
        }
        siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"File '%s' does not declare a locale", a2, v10);
        siri::dialogengine::CatLocalePathToLocale((uint64_t)&v16, &v15);
        if (*(char *)(a3 + 23) < 0) {
          operator delete(*(void **)a3);
        }
        *(_OWORD *)a3 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
        unint64_t v12 = v15.__r_.__value_.__r.__words[2];
        *(void *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = *((void *)&v15.__r_.__value_.__l + 2);
        unint64_t v13 = HIBYTE(v12);
        if ((v13 & 0x80u) != 0) {
          unint64_t v13 = *(void *)(a3 + 8);
        }
        if (!v13)
        {
          long long v14 = &v16;
          if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v14 = (std::string *)v16.__r_.__value_.__r.__words[0];
          }
          siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Could not get locale from CAT locale file name '%s'", v11, v14);
        }
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v16.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Locale not specified in request and not available from locale file", a2);
      std::string::basic_string[abi:ne180100]<0>((void *)a3, "");
    }
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F13834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 + 23) < 0) {
    operator delete(*(void **)v18);
  }
  if (*(char *)(v19 - 25) < 0) {
    operator delete(*(void **)(v19 - 48));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Context::GetDeviceLocale(siri::dialogengine::Context *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "deviceLocale");
  siri::dialogengine::Context::FindVariable(&lpsrc, this, &__p);
  if (!lpsrc.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v4 = 0;
    goto LABEL_6;
  }
  if (!v4)
  {
LABEL_6:
    std::string::size_type size = 0;
    goto LABEL_7;
  }
  std::string::size_type size = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (lpsrc.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&lpsrc, "userInputLocale");
  siri::dialogengine::RequestInfo::GetUserSetting((uint64_t)this + 8, (const void **)&lpsrc.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(lpsrc.__r_.__value_.__l.__data_);
    if (!v4) {
      goto LABEL_30;
    }
  }
  else if (!v4)
  {
    goto LABEL_30;
  }
  long long v7 = v4 + 72;
  if (v4[95] < 0)
  {
    std::string::__init_copy_ctor_external(&lpsrc, *((const std::string::value_type **)v4 + 9), *((void *)v4 + 10));
  }
  else
  {
    *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = *v7;
    lpsrc.__r_.__value_.__r.__words[2] = *((void *)v4 + 11);
  }
  if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
  {
    if (lpsrc.__r_.__value_.__l.__size_) {
      goto LABEL_22;
    }
    operator delete(lpsrc.__r_.__value_.__l.__data_);
LABEL_30:
    std::string::size_type v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v8 = __p.__r_.__value_.__l.__size_;
    }
    if (v8) {
      siri::dialogengine::GetCanonicalLocale(&__p, 0, a2);
    }
    else {
      siri::dialogengine::Context::GetLocale(this, v6, (uint64_t)a2);
    }
    goto LABEL_35;
  }
  if (!*((unsigned char *)&lpsrc.__r_.__value_.__s + 23)) {
    goto LABEL_30;
  }
LABEL_22:
  if (v4[95] < 0)
  {
    std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)v4 + 9), *((void *)v4 + 10));
  }
  else
  {
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = *v7;
    v9.__r_.__value_.__r.__words[2] = *((void *)v4 + 11);
  }
  siri::dialogengine::GetCanonicalLocale(&v9, 0, a2);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(lpsrc.__r_.__value_.__l.__data_);
  }
LABEL_35:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
}

void sub_1C5F13AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Context::FindVariable(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = a1 + 520;
  long long v7 = *(void **)(a1 + 520);
  std::string::size_type v8 = (void *)(a1 + 528);
  if (v7 == (void *)(a1 + 528))
  {
LABEL_24:
    int v18 = 1;
    goto LABEL_26;
  }
  while (1)
  {
    if (!(*(unsigned int (**)(void))(*(void *)v7[7] + 40))(v7[7])) {
      goto LABEL_18;
    }
    uint64_t v9 = *((unsigned __int8 *)v7 + 55);
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = *((unsigned __int8 *)v7 + 55);
    }
    else {
      uint64_t v10 = v7[5];
    }
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    if (v10 != v11) {
      goto LABEL_25;
    }
    unint64_t v13 = (const void **)(v7 + 4);
    long long v14 = v12 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    if ((v9 & 0x80) == 0) {
      break;
    }
    if (memcmp(*v13, v14, v7[5])) {
      goto LABEL_25;
    }
LABEL_18:
    std::string v15 = (void *)v7[1];
    if (v15)
    {
      do
      {
        std::string v16 = v15;
        std::string v15 = (void *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        std::string v16 = (void *)v7[2];
        BOOL v17 = *v16 == (void)v7;
        long long v7 = v16;
      }
      while (!v17);
    }
    long long v7 = v16;
    if (v16 == v8) {
      goto LABEL_24;
    }
  }
  if (!*((unsigned char *)v7 + 55)) {
    goto LABEL_18;
  }
  while (*(unsigned __int8 *)v13 == *v14)
  {
    unint64_t v13 = (const void **)((char *)v13 + 1);
    ++v14;
    if (!--v9) {
      goto LABEL_18;
    }
  }
LABEL_25:
  int v18 = 0;
LABEL_26:
  uint64_t v19 = std::__tree<std::string>::find<std::string>(v6, (const void **)a2);
  if (v8 == (void *)v19) {
    goto LABEL_42;
  }
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(a1 + 504);
  if (!v21) {
    goto LABEL_40;
  }
  uint64_t Parameter = siri::dialogengine::File::GetParameter(v21, (unsigned __int8 **)a2);
  if (!Parameter) {
    goto LABEL_40;
  }
  if (*(char *)(Parameter + 207) < 0) {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(Parameter + 184), *(void *)(Parameter + 192));
  }
  else {
    std::string v35 = *(std::string *)(Parameter + 184);
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v35.__r_.__value_.__l.__data_);
    if (size) {
      goto LABEL_39;
    }
    goto LABEL_40;
  }
  if (!size) {
    goto LABEL_40;
  }
LABEL_39:
  if (!v18)
  {
LABEL_42:
    *a3 = 0;
    a3[1] = 0;
    uint64_t v25 = *(void *)(a1 + 504);
    if (v25)
    {
      if (*(_DWORD *)(a1 + 8) == 1)
      {
        uint64_t v26 = siri::dialogengine::File::GetParameter(v25, (unsigned __int8 **)a2);
        if (v26)
        {
          uint64_t v27 = v26;
          std::string v28 = (std::string *)(v26 + 184);
          if (*(char *)(v26 + 207) < 0)
          {
            std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v26 + 184), *(void *)(v26 + 192));
          }
          else
          {
            *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            v35.__r_.__value_.__r.__words[2] = *(void *)(v26 + 200);
          }
          if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v29 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v29 = v35.__r_.__value_.__l.__size_;
          }
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
          if (v29)
          {
            if (*(char *)(v27 + 55) < 0) {
              std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v27 + 32), *(void *)(v27 + 40));
            }
            else {
              std::string v35 = *(std::string *)(v27 + 32);
            }
            siri::dialogengine::IsArrayType(&v35);
            if (*(char *)(v27 + 207) < 0) {
              std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v27 + 184), *(void *)(v27 + 192));
            }
            else {
              std::string v33 = *v28;
            }
            siri::dialogengine::ExecuteParamCat(a1, (uint64_t)&v33, v34);
            uint64_t v31 = v34[0];
            size_t v30 = (std::__shared_weak_count *)v34[1];
            *a3 = v34[0];
            a3[1] = v30;
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v33.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v35.__r_.__value_.__l.__data_);
            }
            if (v31)
            {
              if (v18)
              {
                v32[0] = v31;
                v32[1] = v30;
                if (v30) {
                  atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                siri::dialogengine::Context::AddVariable(a1, v32);
                if (v30) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
                }
              }
              else
              {
                *(unsigned char *)(v31 + 64) = 1;
              }
            }
          }
        }
      }
    }
  }
  else
  {
LABEL_40:
    uint64_t v24 = *(void *)(v20 + 64);
    *a3 = *(void *)(v20 + 56);
    a3[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_1C5F13E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v25)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Context::GetLocaleWithUserCalendar(siri::dialogengine::Context *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  siri::dialogengine::Context::GetLocale(this, a2, a3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "userCalendar");
  siri::dialogengine::RequestInfo::GetUserSetting((uint64_t)this + 8, (const void **)&__p.__r_.__value_.__l.__data_, &v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (*(char *)(a3 + 23) >= 0) {
      size_t v6 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v6 = *(void *)(a3 + 8);
    }
    long long v7 = &v13;
    std::string::basic_string[abi:ne180100]((uint64_t)&v13, v6 + 10);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if (v6)
    {
      if (*(char *)(a3 + 23) >= 0) {
        std::string::size_type v8 = (const std::string::value_type *)a3;
      }
      else {
        std::string::size_type v8 = *(const std::string::value_type **)a3;
      }
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, "@calendar=");
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v15;
    }
    else {
      uint64_t v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v10 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v10 = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v11 = std::string::append(&v13, (const std::string::value_type *)v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
  }
  else if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    std::string __p = *(std::string *)a3;
  }
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(std::string *)a3 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (size && SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F1407C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Context::GetValueCache(siri::dialogengine::Context *this)
{
  return (uint64_t)this + 544;
}

uint64_t siri::dialogengine::Context::GetVariables@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100](a2, this + 65);
}

void siri::dialogengine::Context::SetVariables(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = a1 + 528;
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(void **)(a1 + 528));
  *(void *)(a1 + 520) = v4;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = 0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(void **)(a1 + 552));
  *(void *)(a1 + 544) = a1 + 552;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 552) = 0;
  uint64_t v5 = *a2;
  size_t v6 = a2[1];
  if (*a2 != v6)
  {
    long long v7 = (uint64_t **)(a1 + 520);
    do
    {
      uint64_t v9 = *v5;
      std::string::size_type v8 = (std::__shared_weak_count *)v5[1];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v9)
      {
        if (*(char *)(v9 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 8), *(void *)(v9 + 16));
        }
        else
        {
          long long v10 = *(_OWORD *)(v9 + 8);
          __p.__r_.__value_.__r.__words[2] = *(void *)(v9 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
        }
        p_p = &__p;
        uint64_t v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p);
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v12 = (std::__shared_weak_count *)*((void *)v11 + 8);
        *((void *)v11 + 7) = v9;
        *((void *)v11 + 8) = v8;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *(void *)(v9 + 56) = 0;
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_1C5F14220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Context::RemoveVariable(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
    }
    else
    {
      long long v4 = *(_OWORD *)(v2 + 8);
      v18.__r_.__value_.__r.__words[2] = *(void *)(v2 + 24);
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v4;
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__erase_unique<std::string>((uint64_t **)(a1 + 520), (const void **)&v18.__r_.__value_.__l.__data_);
    uint64_t v5 = *(uint64_t **)(a1 + 544);
    size_t v6 = (uint64_t *)(a1 + 552);
    if (v5 != (uint64_t *)(a1 + 552))
    {
      long long v7 = (uint64_t **)(a1 + 544);
      do
      {
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v18.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
        if (v17 >= 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        if (size)
        {
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v10 = &v18;
          }
          else {
            long long v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
          }
          memmove(v9, v10, size);
        }
        *(_WORD *)((char *)v9 + size) = 35;
        BOOL v11 = siri::dialogengine::StringStartsWith((std::string *)(v5 + 4), (unsigned __int8 *)__p);
        BOOL v12 = v11;
        if (v17 < 0)
        {
          operator delete(__p[0]);
          if (!v12)
          {
LABEL_22:
            long long v14 = (uint64_t *)v5[1];
            if (v14)
            {
              do
              {
                std::string v13 = v14;
                long long v14 = (uint64_t *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                std::string v13 = (uint64_t *)v5[2];
                BOOL v15 = *v13 == (void)v5;
                uint64_t v5 = v13;
              }
              while (!v15);
            }
            goto LABEL_27;
          }
        }
        else if (!v11)
        {
          goto LABEL_22;
        }
        std::string v13 = std::__tree<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::__map_value_compare<std::pair<google::protobuf::Descriptor const*,int>,std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::less<std::pair<google::protobuf::Descriptor const*,int>>,true>,std::allocator<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>>>::__remove_node_pointer(v7, v5);
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>,0>((uint64_t)(v5 + 4));
        operator delete(v5);
LABEL_27:
        uint64_t v5 = v13;
      }
      while (v13 != v6);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5F143E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  int v3 = (uint64_t *)std::__tree<std::string>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    long long v4 = v3;
    std::__tree<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::__map_value_compare<std::pair<google::protobuf::Descriptor const*,int>,std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::less<std::pair<google::protobuf::Descriptor const*,int>>,true>,std::allocator<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>>>::__remove_node_pointer(a1, v3);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

double siri::dialogengine::Context::GetCurrentTime(siri::dialogengine::Context *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "now");
  siri::dialogengine::Context::FindVariable(&lpsrc, this, &__p);
  if (!lpsrc)
  {
    long long v4 = 0;
    goto LABEL_6;
  }
  if (!v4)
  {
LABEL_6:
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if ((v13 & 0x80000000) == 0)
  {
    if (!v4) {
      goto LABEL_27;
    }
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(&__p, "secs");
    uint64_t v6 = std::__tree<std::string>::find<std::string>((uint64_t)(v4 + 72), (const void **)&__p);
    if (v4 + 80 == (char *)v6)
    {
      std::string::size_type v8 = 0;
      long long v7 = 0;
    }
    else
    {
      std::string::size_type v8 = *(const void **)(v6 + 56);
      long long v7 = *(std::__shared_weak_count **)(v6 + 64);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    if (v13 < 0)
    {
      operator delete((void *)__p.tv_sec);
      if (!v8) {
        goto LABEL_24;
      }
    }
    else if (!v8)
    {
      goto LABEL_24;
    }
    if (v9)
    {
      char v10 = 0;
      double v1 = v9[9];
      if (!v7)
      {
LABEL_26:
        if ((v10 & 1) == 0) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
LABEL_25:
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      goto LABEL_26;
    }
LABEL_24:
    char v10 = 1;
    if (!v7) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  operator delete((void *)__p.tv_sec);
  if (v4) {
    goto LABEL_13;
  }
LABEL_27:
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Using system time instead of global variable 'now'", v3);
  gettimeofday(&__p, 0);
  double v1 = (double)__p.tv_usec / 1000000.0 + (double)__p.tv_sec;
LABEL_28:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_1C5F14688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

double siri::dialogengine::Context::GetCurrentUTCOffset(siri::dialogengine::Context *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "now");
  siri::dialogengine::Context::FindVariable((uint64_t)this, (uint64_t)__p, &lpsrc);
  if (!lpsrc)
  {
    int v3 = 0;
    goto LABEL_6;
  }
  if (!v3)
  {
LABEL_6:
    long long v4 = 0;
    goto LABEL_7;
  }
  long long v4 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  uint64_t v5 = v13;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if ((v11 & 0x80000000) == 0)
  {
    if (!v3) {
      goto LABEL_27;
    }
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(__p, "utcOffsetSecs");
    uint64_t v5 = (std::__shared_weak_count *)std::__tree<std::string>::find<std::string>((uint64_t)(v3 + 72), (const void **)__p);
    if (v3 + 80 == (char *)v5)
    {
      shared_owners = 0;
      shared_weak_owners = 0;
    }
    else
    {
      shared_owners = (const void *)v5[2].__shared_owners_;
      shared_weak_owners = (std::__shared_weak_count *)v5[2].__shared_weak_owners_;
      if (shared_weak_owners) {
        atomic_fetch_add_explicit(&shared_weak_owners->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    if (v11 < 0)
    {
      operator delete(__p[0]);
      if (!shared_owners) {
        goto LABEL_24;
      }
    }
    else if (!shared_owners)
    {
      goto LABEL_24;
    }
    if (v5)
    {
      char v8 = 0;
      double UTCOffsetSecs = *(double *)&v5[3].__vftable;
      if (!shared_weak_owners)
      {
LABEL_26:
        if ((v8 & 1) == 0) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
LABEL_25:
      std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
      goto LABEL_26;
    }
LABEL_24:
    char v8 = 1;
    if (!shared_weak_owners) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  operator delete(__p[0]);
  if (v3) {
    goto LABEL_13;
  }
LABEL_27:
  double UTCOffsetSecs = siri::dialogengine::GetUTCOffsetSecs((siri::dialogengine *)v5);
LABEL_28:
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return UTCOffsetSecs;
}

void sub_1C5F14894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Context::GetCurrentTimeZone(siri::dialogengine::Context *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "now");
  siri::dialogengine::Context::FindVariable(&lpsrc, this, __p);
  if (!lpsrc)
  {
    long long v4 = 0;
    goto LABEL_6;
  }
  if (!v4)
  {
LABEL_6:
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if (!v4)
    {
LABEL_26:
      siri::dialogengine::GetICUHostTimeZone(a2);
      goto LABEL_27;
    }
  }
  else if (!v4)
  {
    goto LABEL_26;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "timeZone");
  uint64_t v6 = std::__tree<std::string>::find<std::string>((uint64_t)(v4 + 72), (const void **)__p);
  if (v4 + 80 == (char *)v6)
  {
    char v8 = 0;
    long long v7 = 0;
  }
  else
  {
    char v8 = *(const void **)(v6 + 56);
    long long v7 = *(std::__shared_weak_count **)(v6 + 64);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if (!v8) {
      goto LABEL_24;
    }
  }
  else if (!v8)
  {
LABEL_24:
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    goto LABEL_26;
  }
  if (!v9) {
    goto LABEL_24;
  }
  if (v9[95] < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)v9 + 9), *((void *)v9 + 10));
  }
  else
  {
    long long v10 = *(_OWORD *)(v9 + 72);
    a2->__r_.__value_.__r.__words[2] = *((void *)v9 + 11);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
LABEL_27:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5F14ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Context::GetGlobalParameter(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 576;
  uint64_t v3 = *(void *)(a1 + 576);
  if (!v3) {
    goto LABEL_8;
  }
  uint64_t v5 = a1 + 584;
  uint64_t v6 = a1 + 576;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    char v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      char v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
LABEL_8:
  }
    uint64_t v6 = v2;
  if (v2 == v6) {
    return 0;
  }
  else {
    return v6 + 56;
  }
}

void siri::dialogengine::Context::GetGlobalParameters(siri::dialogengine::Context *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = (uint64_t *)(a2 + 8);
  *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = (const void **)*((void *)this + 71);
  long long v4 = (const void ***)((char *)this + 576);
  if (v3 != (const void **)((char *)this + 576))
  {
    uint64_t v6 = a2 + 16;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + 8);
      if (*(uint64_t **)a2 == v2) {
        break;
      }
      uint64_t v8 = (uint64_t)v2;
      if (v7)
      {
        do
        {
          uint64_t v9 = v7;
          uint64_t v7 = *(void *)(v7 + 8);
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v9 = *(void *)(v8 + 16);
          BOOL v10 = *(void *)v9 == v8;
          uint64_t v8 = v9;
        }
        while (v10);
      }
      if (std::less<std::string>::operator()[abi:ne180100](v6, (const void **)(v9 + 32), v3 + 4))
      {
        if (!*v2) {
          goto LABEL_10;
        }
LABEL_12:
        uint64_t v16 = v9;
        char v11 = (uint64_t **)(v9 + 8);
        goto LABEL_14;
      }
      char v11 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a2, &v16, v3 + 4);
LABEL_14:
      if (!*v11) {
        goto LABEL_15;
      }
LABEL_16:
      char v12 = (const void **)v3[1];
      if (v12)
      {
        do
        {
          char v13 = (const void ***)v12;
          char v12 = (const void **)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          char v13 = (const void ***)v3[2];
          BOOL v10 = *v13 == v3;
          uint64_t v3 = (const void **)v13;
        }
        while (!v10);
      }
      uint64_t v3 = (const void **)v13;
      if (v13 == v4) {
        return;
      }
    }
    uint64_t v9 = (uint64_t)v2;
    if (!v7)
    {
LABEL_10:
      uint64_t v16 = (uint64_t)v2;
      char v11 = (uint64_t **)v2;
LABEL_15:
      v14[0] = (uint64_t *)operator new(0x188uLL);
      v14[1] = v2;
      char v15 = 0;
      std::pair<std::string const,siri::dialogengine::Parameter>::pair[abi:ne180100]((std::string *)(v14[0] + 4), (long long *)v3 + 2);
      char v15 = 1;
      std::__tree<std::string>::__insert_node_at((uint64_t **)a2, v16, v11, v14[0]);
      v14[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
      goto LABEL_16;
    }
    goto LABEL_12;
  }
}

void sub_1C5F14D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy(*v9);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,siri::dialogengine::Parameter>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  siri::dialogengine::Parameter::Parameter((siri::dialogengine::Parameter *)&this[1], (const siri::dialogengine::Parameter *)((char *)a2 + 24));
  return this;
}

void sub_1C5F14D90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

siri::dialogengine::RequestInfo *siri::dialogengine::Context::GetRequestInfo@<X0>(siri::dialogengine::Context *this@<X0>, siri::dialogengine::RequestInfo *a2@<X8>)
{
  return siri::dialogengine::RequestInfo::RequestInfo(a2, (siri::dialogengine::Context *)((char *)this + 8));
}

siri::dialogengine::RequestInfo *siri::dialogengine::RequestInfo::RequestInfo(siri::dialogengine::RequestInfo *this, const siri::dialogengine::RequestInfo *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((void *)this + 1, *((void *)a2 + 1), *((void *)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 5));
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v4 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *((_OWORD *)this + 2) = v4;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 56);
    *((void *)this + 9) = *((void *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v5;
  }
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 5);
    *((void *)this + 12) = *((void *)a2 + 12);
    *((_OWORD *)this + 5) = v6;
  }
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 104);
    *((void *)this + 15) = *((void *)a2 + 15);
    *(_OWORD *)((char *)this + 104) = v7;
  }
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 128), *((const std::string::value_type **)a2 + 16), *((void *)a2 + 17));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 8);
    *((void *)this + 18) = *((void *)a2 + 18);
    *((_OWORD *)this + 8) = v8;
  }
  *((void *)this + 19) = *((void *)a2 + 19);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)this + 160, (const void ***)a2 + 20);
  if (*((char *)a2 + 207) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 184), *((const std::string::value_type **)a2 + 23), *((void *)a2 + 24));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 184);
    *((void *)this + 25) = *((void *)a2 + 25);
    *(_OWORD *)((char *)this + 184) = v9;
  }
  if (*((char *)a2 + 231) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 208), *((const std::string::value_type **)a2 + 26), *((void *)a2 + 27));
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 13);
    *((void *)this + 28) = *((void *)a2 + 28);
    *((_OWORD *)this + 13) = v10;
  }
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 232), *((long long **)a2 + 29), *((long long **)a2 + 30), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 30) - *((void *)a2 + 29)) >> 3));
  if (*((char *)a2 + 279) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 256), *((const std::string::value_type **)a2 + 32), *((void *)a2 + 33));
  }
  else
  {
    long long v11 = *((_OWORD *)a2 + 16);
    *((void *)this + 34) = *((void *)a2 + 34);
    *((_OWORD *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = v11;
  }
  uint64_t v12 = *((void *)a2 + 35);
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  *((void *)this + 35) = v12;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)this + 296, (const void ***)a2 + 37);
  if (*((char *)a2 + 343) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 320), *((const std::string::value_type **)a2 + 40), *((void *)a2 + 41));
  }
  else
  {
    long long v13 = *((_OWORD *)a2 + 20);
    *((void *)this + 42) = *((void *)a2 + 42);
    *((_OWORD *)this + 20) = v13;
  }
  if (*((char *)a2 + 367) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 344), *((const std::string::value_type **)a2 + 43), *((void *)a2 + 44));
  }
  else
  {
    long long v14 = *(_OWORD *)((char *)a2 + 344);
    *((void *)this + 45) = *((void *)a2 + 45);
    *(_OWORD *)((char *)this + 344) = v14;
  }
  if (*((char *)a2 + 391) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 368), *((const std::string::value_type **)a2 + 46), *((void *)a2 + 47));
  }
  else
  {
    long long v15 = *((_OWORD *)a2 + 23);
    *((void *)this + 48) = *((void *)a2 + 48);
    *((_OWORD *)this + 23) = v15;
  }
  if (*((char *)a2 + 415) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 392), *((const std::string::value_type **)a2 + 49), *((void *)a2 + 50));
  }
  else
  {
    long long v16 = *(_OWORD *)((char *)a2 + 392);
    *((void *)this + 51) = *((void *)a2 + 51);
    *(_OWORD *)((char *)this + 392) = v16;
  }
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((void *)this + 52, *((void *)a2 + 52), *((void *)a2 + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 53) - *((void *)a2 + 52)) >> 4));
  if (*((char *)a2 + 463) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 440), *((const std::string::value_type **)a2 + 55), *((void *)a2 + 56));
  }
  else
  {
    long long v17 = *(_OWORD *)((char *)a2 + 440);
    *((void *)this + 57) = *((void *)a2 + 57);
    *(_OWORD *)((char *)this + 440) = v17;
  }
  std::string v18 = (std::string *)((char *)this + 464);
  if (*((char *)a2 + 487) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *((const std::string::value_type **)a2 + 58), *((void *)a2 + 59));
  }
  else
  {
    long long v19 = *((_OWORD *)a2 + 29);
    *((void *)this + 60) = *((void *)a2 + 60);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  *((unsigned char *)this + 488) = *((unsigned char *)a2 + 488);
  return this;
}

void sub_1C5F1518C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18)
{
  if (*(char *)(v19 + 463) < 0) {
    operator delete(*v24);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (*(char *)(v19 + 415) < 0) {
    operator delete(*v18);
  }
  if (*(char *)(v19 + 391) < 0) {
    operator delete(*v23);
  }
  if (*(char *)(v19 + 367) < 0) {
    operator delete(*v22);
  }
  if (*(char *)(v19 + 343) < 0) {
    operator delete(*v21);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(v19 + 304));
  if (*(char *)(v19 + 279) < 0) {
    operator delete(*v20);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (*(char *)(v19 + 231) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v19 + 207) < 0) {
    operator delete(*a11);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(v19 + 168));
  if (*(char *)(v19 + 151) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v19 + 127) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v19 + 103) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v19 + 79) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(v19 + 55) < 0) {
    operator delete(*a16);
  }
  a18 = a17;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void sub_1C5F15334()
{
}

void sub_1C5F1533C()
{
}

void siri::dialogengine::Context::SetRequestInfo(siri::dialogengine::Context *this, const siri::dialogengine::RequestInfo *a2)
{
  *((_DWORD *)this + 2) = *(_DWORD *)a2;
  long long v4 = (siri::dialogengine::Context *)((char *)this + 8);
  if ((siri::dialogengine::Context *)((char *)this + 8) != a2) {
    std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)this + 16, *((std::string **)a2 + 1), *((std::string **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 5));
  }
  std::string::operator=((std::string *)((char *)this + 40), (const std::string *)((char *)a2 + 32));
  std::string::operator=((std::string *)((char *)this + 64), (const std::string *)((char *)a2 + 56));
  std::string::operator=((std::string *)((char *)this + 88), (const std::string *)((char *)a2 + 80));
  std::string::operator=((std::string *)((char *)this + 112), (const std::string *)((char *)a2 + 104));
  std::string::operator=((std::string *)((char *)this + 136), (const std::string *)((char *)a2 + 128));
  *((void *)this + 20) = *((void *)a2 + 19);
  if (v4 == a2)
  {
    std::string::operator=((std::string *)this + 8, (const std::string *)((char *)a2 + 184));
    std::string::operator=((std::string *)this + 9, (const std::string *)((char *)a2 + 208));
  }
  else
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)this + 168, *((long long **)a2 + 20), (long long *)((char *)a2 + 168));
    std::string::operator=((std::string *)this + 8, (const std::string *)((char *)a2 + 184));
    std::string::operator=((std::string *)this + 9, (const std::string *)((char *)a2 + 208));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)this + 10, *((std::string **)a2 + 29), *((long long **)a2 + 30), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 30) - *((void *)a2 + 29)) >> 3));
  }
  std::string::operator=((std::string *)this + 11, (const std::string *)((char *)a2 + 256));
  int v5 = *((_DWORD *)a2 + 72);
  *((void *)this + 36) = *((void *)a2 + 35);
  *((_DWORD *)this + 74) = v5;
  if (v4 != a2) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)this + 304, *((long long **)a2 + 37), (long long *)a2 + 19);
  }
  std::string::operator=((std::string *)((char *)this + 328), (const std::string *)((char *)a2 + 320));
  std::string::operator=((std::string *)((char *)this + 352), (const std::string *)((char *)a2 + 344));
  std::string::operator=((std::string *)((char *)this + 376), (const std::string *)((char *)a2 + 368));
  std::string::operator=((std::string *)((char *)this + 400), (const std::string *)((char *)a2 + 392));
  if (v4 != a2) {
    std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((std::vector<std::pair<std::string, std::string>> *)((char *)this + 424), *((std::string **)a2 + 52), *((std::string **)a2 + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 53) - *((void *)a2 + 52)) >> 4));
  }
  std::string::operator=((std::string *)((char *)this + 448), (const std::string *)((char *)a2 + 440));
  std::string::operator=((std::string *)((char *)this + 472), (const std::string *)((char *)a2 + 464));
  *((unsigned char *)this + 496) = *((unsigned char *)a2 + 488);
  siri::dialogengine::Context::CheckTemplateDirs(this);
}

void siri::dialogengine::Context::SetRequestInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  std::vector<siri::dialogengine::UpdatableDir>::__vdeallocate((void **)(a1 + 16));
  *(_OWORD *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 32) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(a2 + 24) = 0;
  long long v4 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(_OWORD *)long long v4 = v5;
  *(unsigned char *)(a2 + 55) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  long long v6 = (void **)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*v6);
  }
  long long v7 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 80) = *(void *)(a2 + 72);
  *(_OWORD *)long long v6 = v7;
  *(unsigned char *)(a2 + 79) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  long long v8 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*v8);
  }
  long long v9 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 104) = *(void *)(a2 + 96);
  *(_OWORD *)long long v8 = v9;
  *(unsigned char *)(a2 + 103) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  long long v10 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*v10);
  }
  long long v11 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 128) = *(void *)(a2 + 120);
  *(_OWORD *)long long v10 = v11;
  *(unsigned char *)(a2 + 127) = 0;
  *(unsigned char *)(a2 + 104) = 0;
  uint64_t v12 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*v12);
  }
  long long v13 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 152) = *(void *)(a2 + 144);
  *(_OWORD *)uint64_t v12 = v13;
  *(unsigned char *)(a2 + 151) = 0;
  *(unsigned char *)(a2 + 128) = 0;
  *(void *)(a1 + 160) = *(void *)(a2 + 152);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((void *)(a1 + 168), (void *)(a2 + 160));
  long long v14 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*v14);
  }
  long long v15 = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 208) = *(void *)(a2 + 200);
  *(_OWORD *)long long v14 = v15;
  *(unsigned char *)(a2 + 207) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  long long v16 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 232) = *(void *)(a2 + 224);
  *(_OWORD *)long long v16 = v17;
  *(unsigned char *)(a2 + 231) = 0;
  *(unsigned char *)(a2 + 208) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 240));
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 256) = *(void *)(a2 + 248);
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  std::string v18 = (void **)(a1 + 264);
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*v18);
  }
  long long v19 = *(_OWORD *)(a2 + 256);
  *(void *)(a1 + 280) = *(void *)(a2 + 272);
  *(_OWORD *)std::string v18 = v19;
  *(unsigned char *)(a2 + 279) = 0;
  *(unsigned char *)(a2 + 256) = 0;
  uint64_t v20 = *(void *)(a2 + 280);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 288);
  *(void *)(a1 + 288) = v20;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((void *)(a1 + 304), (void *)(a2 + 296));
  uint64_t v21 = (void **)(a1 + 328);
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*v21);
  }
  long long v22 = *(_OWORD *)(a2 + 320);
  *(void *)(a1 + 344) = *(void *)(a2 + 336);
  *(_OWORD *)uint64_t v21 = v22;
  *(unsigned char *)(a2 + 343) = 0;
  *(unsigned char *)(a2 + 320) = 0;
  BOOL v23 = (void **)(a1 + 352);
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*v23);
  }
  long long v24 = *(_OWORD *)(a2 + 344);
  *(void *)(a1 + 368) = *(void *)(a2 + 360);
  *(_OWORD *)BOOL v23 = v24;
  *(unsigned char *)(a2 + 367) = 0;
  *(unsigned char *)(a2 + 344) = 0;
  uint64_t v25 = (void **)(a1 + 376);
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*v25);
  }
  long long v26 = *(_OWORD *)(a2 + 368);
  *(void *)(a1 + 392) = *(void *)(a2 + 384);
  *(_OWORD *)uint64_t v25 = v26;
  *(unsigned char *)(a2 + 391) = 0;
  *(unsigned char *)(a2 + 368) = 0;
  uint64_t v27 = (void **)(a1 + 400);
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*v27);
  }
  long long v28 = *(_OWORD *)(a2 + 392);
  *(void *)(a1 + 4google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = *(void *)(a2 + 408);
  *(_OWORD *)uint64_t v27 = v28;
  *(unsigned char *)(a2 + 415) = 0;
  *(unsigned char *)(a2 + 392) = 0;
  std::vector<siri::dialogengine::DatabaseField>::__vdeallocate((std::vector<std::pair<std::string, std::string>> *)(a1 + 424));
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 416);
  *(void *)(a1 + 440) = *(void *)(a2 + 432);
  *(void *)(a2 + 4google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)(a2 + 424) = 0;
  *(void *)(a2 + 432) = 0;
  std::string::size_type v29 = (void **)(a1 + 448);
  if (*(char *)(a1 + 471) < 0) {
    operator delete(*v29);
  }
  long long v30 = *(_OWORD *)(a2 + 440);
  *(void *)(a1 + 464) = *(void *)(a2 + 456);
  *(_OWORD *)std::string::size_type v29 = v30;
  *(unsigned char *)(a2 + 463) = 0;
  *(unsigned char *)(a2 + 440) = 0;
  uint64_t v31 = (void **)(a1 + 472);
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*v31);
  }
  long long v32 = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = *(void *)(a2 + 480);
  *(_OWORD *)uint64_t v31 = v32;
  *(unsigned char *)(a2 + 487) = 0;
  *(unsigned char *)(a2 + 464) = 0;
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 488);
  siri::dialogengine::Context::CheckTemplateDirs((siri::dialogengine::Context *)a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(void *a1, void *a2)
{
  long long v4 = a1 + 1;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)a1[1]);
  *a1 = *a2;
  long long v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *long long v4 = v6;
  uint64_t v7 = a2[2];
  a1[2] = v7;
  if (v7)
  {
    *(void *)(v6 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *a1 = v4;
  }
}

uint64_t siri::dialogengine::Context::GetExecutionState@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 920);
  *a2 = *(void *)(this + 912);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void siri::dialogengine::Context::ResetExecutionState(siri::dialogengine::Context *this)
{
}

void sub_1C5F159F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<siri::dialogengine::ExecutionState>::reset[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<siri::dialogengine::ExecutionState>::reset[abi:ne180100](void ***result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    uint64_t v2 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    return (void ***)MEMORY[0x1C8796D70](v1, 0x20C40960023A9);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ExecutionState *,std::shared_ptr<siri::dialogengine::ExecutionState>::__shared_ptr_default_delete<siri::dialogengine::ExecutionState,siri::dialogengine::ExecutionState>,std::allocator<siri::dialogengine::ExecutionState>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ExecutionState *,std::shared_ptr<siri::dialogengine::ExecutionState>::__shared_ptr_default_delete<siri::dialogengine::ExecutionState,siri::dialogengine::ExecutionState>,std::allocator<siri::dialogengine::ExecutionState>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(void ***)(result + 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    return MEMORY[0x1C8796D70](v1, 0x20C40960023A9);
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::ExecutionState *,std::shared_ptr<siri::dialogengine::ExecutionState>::__shared_ptr_default_delete<siri::dialogengine::ExecutionState,siri::dialogengine::ExecutionState>,std::allocator<siri::dialogengine::ExecutionState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t siri::dialogengine::Context::SetApprovedForGrading(uint64_t this, char a2)
{
  *(unsigned char *)(this + 736) = a2;
  return this;
}

uint64_t siri::dialogengine::Context::IsApprovedForGrading(siri::dialogengine::Context *this)
{
  return *((unsigned __int8 *)this + 736);
}

__n128 siri::dialogengine::Context::SetTimer(siri::dialogengine::Context *this, const siri::dialogengine::ElapsedTimer *a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 760) = *((_OWORD *)a2 + 1);
  *(_OWORD *)((char *)this + 776) = v3;
  *(__n128 *)((char *)this + 744) = result;
  return result;
}

__n128 siri::dialogengine::Context::GetTimer@<Q0>(siri::dialogengine::Context *this@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)((char *)this + 760);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 744);
  *(_OWORD *)(a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = v2;
  __n128 result = *(__n128 *)((char *)this + 776);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t siri::dialogengine::Context::GetUseCaseState@<X0>(const void ***this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*((unsigned char *)this + 904))
  {
    if (this[63]) {
      siri::dialogengine::DialogStateBase::Get((siri::dialogengine::DialogStateBase *)this);
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Calling GetUseCaseState() before CAT file is loaded", a2);
  }
  *(_OWORD *)a3 = *((_OWORD *)this + 50);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a3 + 16), this + 102);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a3 + 40), this + 105);
  return std::map<std::string,siri::dialogengine::GroundingInfo>::map[abi:ne180100](a3 + 64, this + 108);
}

void sub_1C5F15D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,siri::dialogengine::GroundingInfo>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  *(void *)(a1 + 8) = 0;
  long long v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)a1 = a1 + 8;
  long long v4 = a2 + 1;
  long long v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (*(uint64_t ***)a1 == v3) {
        break;
      }
      uint64_t v7 = v3;
      if (v6)
      {
        do
        {
          uint64_t v8 = v6;
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v8 = (uint64_t)v7[2];
          BOOL v9 = *(void *)v8 == (void)v7;
          uint64_t v7 = (uint64_t **)v8;
        }
        while (v9);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v8 + 32), v5 + 4))
      {
        if (!*v3) {
          goto LABEL_9;
        }
LABEL_11:
        long long v15 = (void *)v8;
        long long v10 = (uint64_t **)(v8 + 8);
        goto LABEL_13;
      }
      long long v10 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, &v15, v5 + 4);
LABEL_13:
      if (!*v10) {
        goto LABEL_14;
      }
LABEL_15:
      long long v11 = (const void **)v5[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (const void ***)v11;
          long long v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (const void ***)v5[2];
          BOOL v9 = *v12 == v5;
          long long v5 = (const void **)v12;
        }
        while (!v9);
      }
      long long v5 = (const void **)v12;
      if (v12 == v4) {
        return a1;
      }
    }
    uint64_t v8 = (uint64_t)v3;
    if (!v6)
    {
LABEL_9:
      long long v15 = v3;
      long long v10 = v3;
LABEL_14:
      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__construct_node<std::pair<std::string const,siri::dialogengine::GroundingInfo> const&>((uint64_t)v14, a1, (long long *)v5 + 2);
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v10, v14[0]);
      v14[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_1C5F15F4C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__construct_node<std::pair<std::string const,siri::dialogengine::GroundingInfo> const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x70uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
  __n128 result = std::pair<std::string const,siri::dialogengine::GroundingInfo>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(unsigned char *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 1;
  return result;
}

void sub_1C5F15FB4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Context::GetFamilyState(siri::dialogengine::Context *this, const char *a2)
{
  if (!*((unsigned char *)this + 905))
  {
    if (*((void *)this + 63)) {
      siri::dialogengine::DialogStateBase::Get(this);
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Calling GetFamilyState() before CAT file is loaded", a2);
  }
  return *((void *)this + 111);
}

void sub_1C5F160AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Context::GetPatternState(siri::dialogengine::Context *this)
{
  if (!*((unsigned char *)this + 906)) {
    siri::dialogengine::DialogStateBase::Get(this);
  }
  return *((void *)this + 435);
}

void sub_1C5F161C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  siri::dialogengine::RequestInfo::~RequestInfo(&a9);
  long long v11 = *(std::__shared_weak_count **)(v9 - 40);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::Context::UpdatePatternState(siri::dialogengine::Context *this, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    this = (siri::dialogengine::Context *)siri::dialogengine::Context::GetPatternState(this);
  }
  siri::dialogengine::DialogStateBase::Get(this);
}

void sub_1C5F162E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  siri::dialogengine::RequestInfo::~RequestInfo(&a9);
  long long v11 = *(std::__shared_weak_count **)(v9 - 40);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::Context::UpdateState(siri::dialogengine::Context *FamilyState, const char *a2, char a3)
{
  if (*((void *)FamilyState + 63))
  {
    long long v4 = FamilyState;
    v20[0] = 0;
    v20[1] = 0;
    long long v19 = v20;
    uint64_t v5 = (char *)*((void *)FamilyState + 83);
    uint64_t v6 = (char *)FamilyState + 672;
    if (v5 != (char *)FamilyState + 672)
    {
      do
      {
        uint64_t v7 = *((void *)v5 + 7);
        uint64_t v8 = *((void *)v5 + 8);
        while (v7 != v8)
        {
          long long v10 = *(siri::dialogengine::Node **)v7;
          uint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          while (v10)
          {
            siri::dialogengine::Node::GetGlobalId(v10, v4, &__p);
            FamilyState = (siri::dialogengine::Context *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(&v19, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            long long v10 = (siri::dialogengine::Node *)*((void *)v10 + 25);
          }
          if (v9) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          }
          v7 += 16;
        }
        long long v11 = (char *)*((void *)v5 + 1);
        if (v11)
        {
          do
          {
            uint64_t v12 = v11;
            long long v11 = *(char **)v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (char *)*((void *)v5 + 2);
            BOOL v13 = *(void *)v12 == (void)v5;
            uint64_t v5 = v12;
          }
          while (!v13);
        }
        uint64_t v5 = v12;
      }
      while (v12 != v6);
    }
    if ((a3 & 1) == 0)
    {
      siri::dialogengine::Context::GetUseCaseState((const void ***)v4, a2, (uint64_t)v15);
      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy((void *)v17[4]);
      std::__tree<std::string>::destroy((uint64_t)v17, v17[1]);
      std::__tree<std::string>::destroy((uint64_t)v16, v16[1]);
      FamilyState = (siri::dialogengine::Context *)siri::dialogengine::Context::GetFamilyState(v4, v14);
    }
    siri::dialogengine::DialogStateBase::Get(FamilyState);
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Calling UpdateState() before CAT file is loaded", a2);
}

void sub_1C5F16560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__tree<std::string>::destroy(v28 - 112, *(char **)(v28 - 104));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Context::GetGroundings@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, this + 80);
}

void siri::dialogengine::Context::SetGroundings(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 640;
  if (v2 != a2) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v2, *(long long **)a2, (long long *)(a2 + 8));
  }
}

std::string *siri::dialogengine::Context::AddGrounding(uint64_t a1, long long *a2, const std::string *a3)
{
  uint64_t v6 = a2;
  long long v4 = (std::string *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 640), (const void **)a2, &v6)+ 7);
  return std::string::operator=(v4, a3);
}

uint64_t siri::dialogengine::Context::Validate(siri::dialogengine::Context *this)
{
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v12, (siri::dialogengine::Context *)((char *)this + 8));
  if (LODWORD(v12[0]) == 1)
  {
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v11, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
    }
    else {
      std::string v11 = v16;
    }
    std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v11.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      BOOL v5 = 0;
      if ((*((unsigned char *)&v11.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v15;
      }
      std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      BOOL v5 = v7 == 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((*((unsigned char *)&v11.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_19:
        if (!v5) {
          goto LABEL_44;
        }
LABEL_40:
        std::string::basic_string[abi:ne180100]<0>(&v11, "No path or string in visual request info");
        siri::dialogengine::Context::AddValidationError((uint64_t)this, (long long *)&v11, 0);
        goto LABEL_41;
      }
    }
    operator delete(v11.__r_.__value_.__l.__data_);
    if (!v5) {
      goto LABEL_44;
    }
    goto LABEL_40;
  }
  if (LODWORD(v12[0])) {
    goto LABEL_44;
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v11, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else {
    std::string v11 = v14;
  }
  std::string::size_type v2 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v2 = v11.__r_.__value_.__l.__size_;
  }
  if (v2)
  {
    BOOL v3 = 0;
    if ((*((unsigned char *)&v11.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v13;
    }
    std::string::size_type v6 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    BOOL v3 = v6 == 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((*((unsigned char *)&v11.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_12:
      if (!v3) {
        goto LABEL_44;
      }
      goto LABEL_32;
    }
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (!v3)
  {
LABEL_44:
    uint64_t v8 = 1;
    goto LABEL_45;
  }
LABEL_32:
  std::string::basic_string[abi:ne180100]<0>(&v11, "No path or string in dialog request info");
  siri::dialogengine::Context::AddValidationError((uint64_t)this, (long long *)&v11, 0);
LABEL_41:
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = 0;
LABEL_45:
  siri::dialogengine::RequestInfo::~RequestInfo(v12);
  return v8;
}

void sub_1C5F16884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::RequestInfo::~RequestInfo(&a20);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Context::AddValidationError(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 504);
  if (v3)
  {
    siri::dialogengine::File::AddValidationError(v3, a2, a3);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (v6 < 0) {
      operator delete(__p);
    }
  }
  return 0;
}

void sub_1C5F1692C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Context::AddValidationWarning(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 504);
  if (v3)
  {
    siri::dialogengine::File::AddValidationWarning(v3, a2, a3);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (v6 < 0) {
      operator delete(__p);
    }
  }
  return 0;
}

void sub_1C5F169AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Context::AddValidationNit(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 504);
  if (v3)
  {
    siri::dialogengine::File::AddValidationNit(v3, a2, a3);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (v6 < 0) {
      operator delete(__p);
    }
  }
  return 0;
}

void sub_1C5F16A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Context::ClearSchemaErrors(siri::dialogengine::Context *this)
{
}

uint64_t siri::dialogengine::Context::AddSchemaError(uint64_t *a1, long long *a2)
{
  long long v4 = a1 + 77;
  unint64_t v5 = a1[78];
  if (v5 >= a1[79])
  {
    uint64_t v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, a2);
    uint64_t v6 = v5 + 24;
  }
  a1[78] = v6;
  siri::dialogengine::Log::LogWithLevel((uint64_t)a2, 3u);
  return 0;
}

uint64_t siri::dialogengine::Context::AddSchemaWarning(uint64_t *a1, long long *a2)
{
  long long v4 = a1 + 77;
  unint64_t v5 = a1[78];
  if (v5 >= a1[79])
  {
    uint64_t v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, a2);
    uint64_t v6 = v5 + 24;
  }
  a1[78] = v6;
  siri::dialogengine::Log::LogWithLevel((uint64_t)a2, 1u);
  return 0;
}

std::string *siri::dialogengine::Context::GetSchemaErrors@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[77], this[78], 0xAAAAAAAAAAAAAAABLL * (((char *)this[78] - (char *)this[77]) >> 3));
}

uint64_t siri::dialogengine::Context::SetVariableCallback(uint64_t result, uint64_t a2)
{
  *(void *)(result + 792) = a2;
  return result;
}

BOOL siri::dialogengine::Context::HasVariableCallback(siri::dialogengine::Context *this)
{
  return *((void *)this + 99) != 0;
}

uint64_t siri::dialogengine::Context::InvokeVariableCallback@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 792);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t siri::dialogengine::Context::GetVariableCallback(siri::dialogengine::Context *this)
{
  return *((void *)this + 99);
}

uint64_t siri::dialogengine::Context::SetMorphunDataRegistered(uint64_t this, char a2)
{
  *(unsigned char *)(this + 928) = a2;
  return this;
}

uint64_t siri::dialogengine::Context::IsMorphunDataRegistered(siri::dialogengine::Context *this)
{
  return *((unsigned __int8 *)this + 928);
}

void *siri::dialogengine::Context::SetRandomNumberGenerator(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 936), a2, 0x9D0uLL);
}

uint64_t siri::dialogengine::Context::GetRandomSeed(siri::dialogengine::Context *this)
{
  return *((unsigned int *)this + 234);
}

unint64_t siri::dialogengine::Context::GetRandomNumber(siri::dialogengine::Context *this, uint64_t a2)
{
  return siri::dialogengine::RandomNumberGenerator::GenerateRandomNumber((siri::dialogengine::Context *)((char *)this + 936), a2);
}

void siri::dialogengine::Context::AddRandomMatch(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 664);
  std::string::size_type v7 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1 + 664, &v16, (const void **)a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    uint64_t v8 = (uint64_t *)operator new(0x50uLL);
    v14[0] = v8;
    v14[1] = a1 + 672;
    char v15 = 0;
    long long v10 = (std::string *)(v8 + 4);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      void v8[6] = *(void *)(a2 + 16);
    }
    void v8[7] = 0;
    v8[8] = 0;
    v8[9] = 0;
    char v15 = 1;
    std::__tree<std::string>::__insert_node_at(v6, v16, v9, v8);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
  }
  if (v8 + 7 != (uint64_t *)a3)
  {
    std::string v11 = *a3;
    uint64_t v12 = a3[1];
    unint64_t v13 = ((char *)v12 - (char *)*a3) >> 4;
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(v8 + 7, v11, v12, v13);
  }
}

void sub_1C5F16CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 2;
  uint64_t v9 = (void *)*a1;
  if (a4 > (a1[2] - *a1) >> 4)
  {
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__vdeallocate(a1);
    if (a4 >> 60) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](a1, v12);
    unint64_t v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v8;
    char v15 = a2;
    goto LABEL_11;
  }
  unint64_t v16 = (a1[1] - (uint64_t)v9) >> 4;
  if (v16 < a4)
  {
    long long v17 = &a2[2 * v16];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *>(a2, v17, v9);
    unint64_t v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v8;
    char v15 = v17;
LABEL_11:
    a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::ConditionEntry>>,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(v14, v15, a3, v13);
    return;
  }
  std::string v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *>(a2, a3, v9);
  for (uint64_t i = (void *)a1[1]; i != v18; i -= 2)
  {
    uint64_t v20 = (std::__shared_weak_count *)*(i - 1);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  a1[1] = (uint64_t)v18;
}

void *siri::dialogengine::Context::GetRandomMatch@<X0>(void *result@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = result[84];
  if (!v4) {
    goto LABEL_8;
  }
  uint64_t v6 = (const void **)(result + 84);
  uint64_t v7 = (uint64_t)(result + 85);
  uint64_t v8 = (const void **)(result + 84);
  do
  {
    uint64_t result = (void *)std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v4 + 32), a2);
    uint64_t v9 = (uint64_t *)(v4 + 8);
    if (!result)
    {
      uint64_t v9 = (uint64_t *)v4;
      uint64_t v8 = (const void **)v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v8 == v6 || (uint64_t result = (void *)std::less<std::string>::operator()[abi:ne180100](v7, a2, v8 + 4), result))
  {
LABEL_8:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v10 = (char *)v8[7];
    uint64_t v11 = (char *)v8[8];
    return std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(a3, v10, v11, (v11 - v10) >> 4);
  }
  return result;
}

uint64_t siri::dialogengine::Context::GetRandomMatches@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>::map[abi:ne180100](a2, this + 83);
}

void siri::dialogengine::Context::SetRandomMatches(void *a1, void *a2)
{
  std::string::size_type v2 = (uint64_t **)(a1 + 83);
  if (a1 + 83 != a2)
  {
    uint64_t v3 = a2 + 1;
    uint64_t v4 = (void *)*a2;
    if (a1[85])
    {
      unint64_t v5 = (void *)a1[83];
      a1[83] = a1 + 84;
      *(void *)(a1[84] + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
      a1[84] = 0;
      a1[85] = 0;
      if (v5[1]) {
        uint64_t v6 = (void *)v5[1];
      }
      else {
        uint64_t v6 = v5;
      }
      long long v17 = a1 + 83;
      std::string v18 = v6;
      long long v19 = v6;
      if (!v6 || (std::string v18 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v6), v4 == v3))
      {
        uint64_t v10 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v6 + 4), (const std::string *)(v4 + 4));
          if (v6 != v4) {
            std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(v6 + 7, (uint64_t *)v4[7], (uint64_t *)v4[8], (uint64_t)(v4[8] - v4[7]) >> 4);
          }
          uint64_t v7 = v19;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v16, (const void **)v19 + 4);
          std::__tree<std::string>::__insert_node_at(v2, v16, leaf_high, v7);
          uint64_t v6 = v18;
          long long v19 = v18;
          if (v18) {
            std::string v18 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v18);
          }
          uint64_t v9 = (void *)v4[1];
          if (v9)
          {
            do
            {
              uint64_t v10 = v9;
              uint64_t v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v10 = (void *)v4[2];
              BOOL v11 = *v10 == (void)v4;
              uint64_t v4 = v10;
            }
            while (!v11);
          }
          if (!v6) {
            break;
          }
          uint64_t v4 = v10;
        }
        while (v10 != v3);
      }
      std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v17);
      uint64_t v4 = v10;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<siri::dialogengine::Node>>> const&>((uint64_t)&v17, (uint64_t)v2, (uint64_t)(v4 + 4));
        unint64_t v12 = v17;
        unint64_t v13 = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v16, (const void **)v17 + 4);
        std::__tree<std::string>::__insert_node_at(v2, v16, v13, v12);
        long long v17 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v17);
        uint64_t v14 = (void *)v4[1];
        if (v14)
        {
          do
          {
            char v15 = v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            char v15 = (void *)v4[2];
            BOOL v11 = *v15 == (void)v4;
            uint64_t v4 = v15;
          }
          while (!v11);
        }
        uint64_t v4 = v15;
      }
      while (v15 != v3);
    }
  }
}

void sub_1C5F170A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(*(void **)(a1 + 16));
  std::string::size_type v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        std::string::size_type v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(v2);
  }
  return a1;
}

uint64_t siri::dialogengine::Context::GetPatternContext@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 3472);
  *a2 = *(void *)(this + 3464);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void siri::dialogengine::Context::SetPatternContext(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 3464) = v2;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 3472);
  *(void *)(a1 + 3472) = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *siri::dialogengine::Context::GetSemanticModelCache@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this[433];
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 72);
    uint64_t v3 = *(void *)(v2 + 80);
  }
  else
  {
    uint64_t v4 = this[437];
    uint64_t v3 = this[438];
  }
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void siri::dialogengine::Context::SetSemanticModelCache(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    *(void *)(a1 + 3496) = v3;
    unint64_t v5 = *(std::__shared_weak_count **)(a1 + 3504);
    *(void *)(a1 + 3504) = v4;
    if (v5)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<siri::dialogengine::SemanticModelCache,std::allocator<siri::dialogengine::SemanticModelCache>,char const(&)[8],void>(&v7);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 3504);
    *(_OWORD *)(a1 + 3496) = v7;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void siri::dialogengine::ValidateNumber(siri::dialogengine::Context *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string v84[2] = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  uint64_t v6 = (std::once_flag::_State_type *)siri::dialogengine::ValidateNumber(siri::dialogengine::Context *,std::string const&)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::ValidateNumber(siri::dialogengine::Context *,std::string const&)::flag, memory_order_acquire) != -1)
  {
    v81.__first_ = (std::__split_buffer<std::string>::pointer)&v77;
    __p[0] = &v81;
    std::__call_once(v6, __p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ValidateNumber(siri::dialogengine::Context *,std::string const&)::$_0 &&>>);
  }
  *(_OWORD *)(a3 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (v7)
  {
    if (this) {
      siri::dialogengine::Context::GetLocale(this, (const char *)a2, (uint64_t)__p);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
    }
    unint64_t v8 = v80;
    if ((v80 & 0x80u) != 0) {
      unint64_t v8 = (unint64_t)__p[1];
    }
    if (v8)
    {
      siri::dialogengine::SemanticFeatureConstraint::FromString((uint64_t)this, (unsigned __int8 *)a2, &v77);
      memset(&v76, 0, sizeof(v76));
      uint64_t v9 = v77;
      uint64_t v10 = v78;
      if (v77 != v78)
      {
        while (1)
        {
          BOOL v11 = (void *)siri::dialogengine::ValidateNumber(siri::dialogengine::Context *,std::string const&)::validOperations;
          if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v81, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
          }
          else
          {
            long long v12 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
            v81.__end_ = (std::__split_buffer<std::string>::pointer)v9->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v81.__first_ = v12;
          }
          unint64_t v13 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v11, (unsigned __int8 *)&v81);
          uint64_t v14 = v13;
          if (SHIBYTE(v81.__end_) < 0)
          {
            operator delete(v81.__first_);
            if (!v14)
            {
LABEL_22:
              if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v74, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
              }
              else
              {
                long long v16 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
                v74.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v16;
              }
              long long v19 = std::string::insert(&v74, 0, "Unsupported number concept operation: '");
              long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
              v75.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v20;
              v19->__r_.__value_.__l.__size_ = 0;
              v19->__r_.__value_.__r.__words[2] = 0;
              v19->__r_.__value_.__r.__words[0] = 0;
              uint64_t v21 = std::string::append(&v75, "'");
              std::string::size_type v22 = v21->__r_.__value_.__r.__words[0];
              *(void *)char v82 = v21->__r_.__value_.__l.__size_;
              *(void *)&v82[7] = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
              char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
              v21->__r_.__value_.__l.__size_ = 0;
              v21->__r_.__value_.__r.__words[2] = 0;
              v21->__r_.__value_.__r.__words[0] = 0;
              unint64_t v24 = *(void *)(a3 + 8);
              unint64_t v25 = *(void *)(a3 + 16);
              if (v24 >= v25)
              {
                unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *(void *)a3) >> 3);
                unint64_t v28 = v27 + 1;
                if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *(void *)a3) >> 3);
                if (2 * v29 > v28) {
                  unint64_t v28 = 2 * v29;
                }
                if (v29 >= 0x555555555555555) {
                  unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v30 = v28;
                }
                v81.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
                if (v30) {
                  uint64_t v31 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v30);
                }
                else {
                  uint64_t v31 = 0;
                }
                std::string v38 = v31 + v27;
                v81.__first_ = v31;
                v81.__begin_ = v38;
                v81.__end_cap_.__value_ = &v31[v30];
                v38->__r_.__value_.__r.__words[0] = v22;
                v38->__r_.__value_.__l.__size_ = *(void *)v82;
                *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7) = *(void *)&v82[7];
                *((unsigned char *)&v38->__r_.__value_.__s + 23) = v23;
                v81.__end_ = v38 + 1;
                std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &v81);
                unint64_t v26 = *(void *)(a3 + 8);
                std::__split_buffer<std::string>::~__split_buffer(&v81);
              }
              else
              {
                *(void *)unint64_t v24 = v22;
                *(void *)(v24 + 8) = *(void *)v82;
                *(void *)(v24 + 15) = *(void *)&v82[7];
                *(unsigned char *)(v24 + 23) = v23;
                unint64_t v26 = v24 + 24;
                *(void *)(a3 + 8) = v24 + 24;
              }
              *(void *)(a3 + 8) = v26;
              if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v75.__r_.__value_.__l.__data_);
              }
              if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_64;
              }
              std::string v39 = (void *)v74.__r_.__value_.__r.__words[0];
LABEL_63:
              operator delete(v39);
              goto LABEL_64;
            }
          }
          else if (!v13)
          {
            goto LABEL_22;
          }
          if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v81, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
          }
          else
          {
            long long v15 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
            v81.__end_ = (std::__split_buffer<std::string>::pointer)v9->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v81.__first_ = v15;
          }
          int v17 = siri::dialogengine::NumberOperationFromFeature((unsigned __int8 *)&v81);
          if (SHIBYTE(v81.__end_) < 0) {
            operator delete(v81.__first_);
          }
          if (v17 == -1 || (v17 + 1) <= 0x11 && ((0x3FFE0u >> (v17 + 1)) & 1) != 0) {
            goto LABEL_64;
          }
          if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v75, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
          }
          else
          {
            long long v18 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
            v75.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v18;
          }
          std::vector<std::string>::pointer end = v76.__end_;
          if (v76.__end_ >= v76.__end_cap_.__value_)
          {
            unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v76.__end_ - (char *)v76.__begin_) >> 3);
            unint64_t v35 = v34 + 1;
            if (v34 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v76.__end_cap_.__value_ - (char *)v76.__begin_) >> 3) > v35) {
              unint64_t v35 = 0x5555555555555556 * (((char *)v76.__end_cap_.__value_ - (char *)v76.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v76.__end_cap_.__value_ - (char *)v76.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v36 = v35;
            }
            v81.__end_cap_.__value_ = (std::allocator<std::string> *)&v76.__end_cap_;
            if (v36) {
              std::string v37 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v76.__end_cap_, v36);
            }
            else {
              std::string v37 = 0;
            }
            std::string v40 = v37 + v34;
            v81.__first_ = v37;
            v81.__begin_ = v40;
            v81.__end_cap_.__value_ = &v37[v36];
            long long v41 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
            v40->__r_.__value_.__r.__words[2] = v75.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
            memset(&v75, 0, sizeof(v75));
            v81.__end_ = v40 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v76, &v81);
            uint64_t v42 = v76.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&v81);
            v76.__end_ = v42;
            if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_64;
            }
            std::string v39 = (void *)v75.__r_.__value_.__r.__words[0];
            goto LABEL_63;
          }
          long long v33 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
          v76.__end_->__r_.__value_.__r.__words[2] = v75.__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v33;
          v76.__end_ = end + 1;
LABEL_64:
          uint64_t v9 = (std::string *)((char *)v9 + 56);
          if (v9 == v10)
          {
            std::vector<std::string>::pointer begin = v76.__begin_;
            std::vector<std::string>::pointer v43 = v76.__end_;
            goto LABEL_69;
          }
        }
      }
      std::vector<std::string>::pointer begin = 0;
      std::vector<std::string>::pointer v43 = 0;
LABEL_69:
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (char *)begin) >> 3) > 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v82, ", ");
        siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v74, (uint64_t)v76.__begin_, (uint64_t)v76.__end_, (uint64_t)v82);
        uint64_t v48 = std::string::insert(&v74, 0, "Multiple number concept output operations (");
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v75.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        std::string::size_type v50 = std::string::append(&v75, ").  Only the first will be used.");
        std::string::size_type v51 = v50->__r_.__value_.__r.__words[0];
        v84[0] = v50->__r_.__value_.__l.__size_;
        *(void *)((char *)v84 + 7) = *(std::string::size_type *)((char *)&v50->__r_.__value_.__r.__words[1] + 7);
        char v52 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        unint64_t v53 = *(void *)(a3 + 40);
        unint64_t v54 = *(void *)(a3 + 32);
        if (v54 >= v53)
        {
          uint64_t v62 = *(void *)(a3 + 24);
          unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - v62) >> 3);
          unint64_t v64 = v63 + 1;
          if (v63 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v62) >> 3);
          if (2 * v65 > v64) {
            unint64_t v64 = 2 * v65;
          }
          if (v65 >= 0x555555555555555) {
            unint64_t v66 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v66 = v64;
          }
          v81.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 40);
          if (v66) {
            int v67 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 40, v66);
          }
          else {
            int v67 = 0;
          }
          uint64_t v68 = v67 + v63;
          v81.__first_ = v67;
          v81.__begin_ = v68;
          v81.__end_cap_.__value_ = &v67[v66];
          std::string::size_type v69 = v84[0];
          v68->__r_.__value_.__r.__words[0] = v51;
          v68->__r_.__value_.__l.__size_ = v69;
          *(std::string::size_type *)((char *)&v68->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v84 + 7);
          *((unsigned char *)&v68->__r_.__value_.__s + 23) = v52;
          v81.__end_ = v68 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a3 + 24), &v81);
          unint64_t v56 = *(void *)(a3 + 32);
          std::__split_buffer<std::string>::~__split_buffer(&v81);
        }
        else
        {
          uint64_t v55 = v84[0];
          *(void *)unint64_t v54 = v51;
          *(void *)(v54 + 8) = v55;
          *(void *)(v54 + 15) = *(void *)((char *)v84 + 7);
          *(unsigned char *)(v54 + 23) = v52;
          unint64_t v56 = v54 + 24;
          *(void *)(a3 + 32) = v54 + 24;
        }
        *(void *)(a3 + 32) = v56;
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
        if (v83 < 0) {
          operator delete(*(void **)v82);
        }
      }
      if (*(void *)a3 == *(void *)(a3 + 8) && *(void *)(a3 + 24) == *(void *)(a3 + 32))
      {
        siri::dialogengine::ValidateNumberConceptRuleSet((uint64_t)__p, &v77, (uint64_t)&v81);
        std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(v81.__end_);
        char v71 = HIBYTE(v81.__end_);
        if (SHIBYTE(v81.__end_) < 0) {
          std::__split_buffer<std::string>::pointer end_high = v81.__begin_;
        }
        if (end_high)
        {
          unint64_t v72 = *(void *)(a3 + 8);
          if (v72 >= *(void *)(a3 + 16))
          {
            uint64_t v73 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)a3, (long long *)&v81);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, (long long *)&v81);
            uint64_t v73 = v72 + 24;
          }
          *(void *)(a3 + 8) = v73;
          char v71 = HIBYTE(v81.__end_);
        }
        if (v71 < 0) {
          operator delete(v81.__first_);
        }
      }
      v81.__first_ = (std::__split_buffer<std::string>::pointer)&v76;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
      v81.__first_ = (std::__split_buffer<std::string>::pointer)&v77;
      std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
    }
    else
    {
      unint64_t v45 = *(void *)(a3 + 16);
      unint64_t v46 = *(void *)(a3 + 8);
      if (v46 >= v45)
      {
        unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - *(void *)a3) >> 3);
        if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - *(void *)a3) >> 3);
        uint64_t v59 = 2 * v58;
        if (2 * v58 <= v57 + 1) {
          uint64_t v59 = v57 + 1;
        }
        if (v58 >= 0x555555555555555) {
          unint64_t v60 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v60 = v59;
        }
        v81.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v60) {
          uint64_t v61 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v60);
        }
        else {
          uint64_t v61 = 0;
        }
        v81.__first_ = v61;
        v81.__begin_ = v61 + v57;
        v81.__end_ = v81.__begin_;
        v81.__end_cap_.__value_ = &v61[v60];
        std::string::basic_string[abi:ne180100]<0>(v81.__begin_->__r_.__value_.__r.__words, "No locale defined for number concept format.");
        ++v81.__end_;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &v81);
        unint64_t v47 = *(void *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&v81);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(*(void **)(a3 + 8), "No locale defined for number concept format.");
        unint64_t v47 = v46 + 24;
        *(void *)(a3 + 8) = v46 + 24;
      }
      *(void *)(a3 + 8) = v47;
    }
    if ((char)v80 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C5F17AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1C5F17D54(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void **std::pair<std::vector<std::string>,std::vector<std::string>>::~pair(void **a1)
{
  uint64_t v3 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ValidateNumber(siri::dialogengine::Context *,std::string const&)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5F17FDC(_Unwind_Exception *a1)
{
  uint64_t v4 = 408;
  while (1)
  {
    if (*(char *)(v2 + v4 - 1) < 0) {
      operator delete(*(void **)(v2 + v4 - 24));
    }
    v4 -= 24;
    if (!v4)
    {
      MEMORY[0x1C8796D70](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

void siri::dialogengine::FormatNumber(siri::dialogengine *a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, uint64_t a4@<X8>)
{
  siri::dialogengine::StringTrim(" \t\n\r", a2, &v21);
  siri::dialogengine::RegisterMorphunData(a1, v8);
  siri::dialogengine::StringTrim(" \t\n\r", a3, &v20);
  std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v20.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    siri::dialogengine::CreateLanguageLocale((siri::dialogengine *)v18, a1);
    if (v19)
    {
      siri::dialogengine::CreateRegionLocale((siri::dialogengine *)v16, a1);
      if (!v17) {
        std::__optional_storage_base<morphun::util::ULocale,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<morphun::util::ULocale,false> const&>((morphun::util::ULocale *)v16, (uint64_t)v18);
      }
      char v15 = 0;
      siri::dialogengine::StringToInt64(a2, &v15, 1);
      if (v15) {
        operator new();
      }
      siri::dialogengine::StringToDouble(a2, &v15);
      if (v15) {
        operator new();
      }
      std::operator+<char>();
      uint64_t v10 = std::string::append(&v14, "'");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v13 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
      if (SHIBYTE(v13) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::SpeakableString::SpeakableString(a4, (uint64_t)&v21);
      if (v17) {
        morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v16);
      }
    }
    else
    {
      siri::dialogengine::SpeakableString::SpeakableString(a4, (uint64_t)&v21);
    }
    if (v19) {
      morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v18);
    }
  }
  else
  {
    siri::dialogengine::SpeakableString::SpeakableString(a4, (uint64_t)&v21);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F18338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a41) {
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a25);
  }
  if (a61) {
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a43);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (*(char *)(v61 - 65) < 0) {
    operator delete(*(void **)(v61 - 88));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::CreateLanguageLocale(siri::dialogengine *this, siri::dialogengine::Context *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 128) = 0;
  if (a2)
  {
    siri::dialogengine::Context::GetLocale(a2, (const char *)a2, (uint64_t)v6);
    unint64_t v3 = v7;
    unsigned __int8 v4 = v7;
    if ((v7 & 0x80u) != 0) {
      unint64_t v3 = (unint64_t)v6[1];
    }
    if (v3)
    {
      morphun::util::ULocale::ULocale();
      std::optional<morphun::util::ULocale>::operator=[abi:ne180100]<morphun::util::ULocale,void>((uint64_t)this);
      morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v5);
      unsigned __int8 v4 = v7;
    }
    if ((v4 & 0x80) != 0) {
      operator delete(v6[0]);
    }
  }
}

void sub_1C5F18534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  if (*((unsigned char *)v27 + 128)) {
    morphun::util::ULocale::~ULocale(v27);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::CreateRegionLocale(siri::dialogengine *this, siri::dialogengine::Context *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 128) = 0;
  if (a2)
  {
    siri::dialogengine::Context::GetDeviceLocale(a2, &v6);
    std::string::size_type size = HIBYTE(v6.__r_.__value_.__r.__words[2]);
    char v4 = HIBYTE(v6.__r_.__value_.__r.__words[2]);
    if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v6.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      morphun::util::ULocale::ULocale();
      std::optional<morphun::util::ULocale>::operator=[abi:ne180100]<morphun::util::ULocale,void>((uint64_t)this);
      morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v5);
      char v4 = HIBYTE(v6.__r_.__value_.__r.__words[2]);
    }
    if (v4 < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5F1868C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  if (*((unsigned char *)v27 + 128)) {
    morphun::util::ULocale::~ULocale(v27);
  }
  _Unwind_Resume(a1);
}

void std::__optional_storage_base<morphun::util::ULocale,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<morphun::util::ULocale,false> const&>(morphun::util::ULocale *a1, uint64_t a2)
{
  if (*((unsigned __int8 *)a1 + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (*((unsigned char *)a1 + 128))
    {
      morphun::util::ULocale::operator=();
    }
  }
  else if (*((unsigned char *)a1 + 128))
  {
    morphun::util::ULocale::~ULocale(a1);
    *(unsigned char *)(v2 + 128) = 0;
  }
  else
  {
    *(unsigned char *)(morphun::util::ULocale::ULocale() + 128) = 1;
  }
}

uint64_t std::optional<morphun::util::ULocale>::operator=[abi:ne180100]<morphun::util::ULocale,void>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    morphun::util::ULocale::operator=();
  }
  else
  {
    morphun::util::ULocale::ULocale();
    *(unsigned char *)(a1 + 128) = 1;
  }
  return a1;
}

void siri::dialogengine::FormatNumber(siri::dialogengine *a1@<X0>, uint64_t a2@<X1>, const std::string *a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    siri::dialogengine::StringFromDouble((siri::dialogengine *)0xFFFFFFFFLL, (uint64_t)v13);
    siri::dialogengine::RegisterMorphunData(a1, v7);
    siri::dialogengine::StringTrim(" \t\n\r", a3, &v12);
    std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v12.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      siri::dialogengine::CreateLanguageLocale((siri::dialogengine *)v10, a1);
      if (v11)
      {
        siri::dialogengine::CreateRegionLocale((siri::dialogengine *)v9, a1);
        if (!v9[128]) {
          std::__optional_storage_base<morphun::util::ULocale,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<morphun::util::ULocale,false> const&>((morphun::util::ULocale *)v9, (uint64_t)v10);
        }
        operator new();
      }
      siri::dialogengine::SpeakableString::SpeakableString(a4, (uint64_t)v13);
      if (v11) {
        morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v10);
      }
    }
    else
    {
      siri::dialogengine::SpeakableString::SpeakableString(a4, (uint64_t)v13);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
  else
  {
    *(void *)(a4 + 160) = 0;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0u;
  }
}

void sub_1C5F189D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a31) {
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a15);
  }
  if (a51) {
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a33);
  }
  if (*(char *)(v51 - 89) < 0) {
    operator delete(*(void **)(v51 - 112));
  }
  if (*(char *)(v51 - 65) < 0) {
    operator delete(*(void **)(v51 - 88));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ClearLocalSettingsCache(siri::dialogengine *this)
{
  uint64_t SettingsCache = siri::dialogengine::GetSettingsCache(this);
  std::mutex::lock((std::mutex *)SettingsCache);
  std::__tree<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>>>::destroy(*(void **)(SettingsCache + 72));
  *(void *)(SettingsCache + 64) = SettingsCache + 72;
  *(void *)(SettingsCache + 80) = 0;
  *(void *)(SettingsCache + 72) = 0;
  std::mutex::unlock((std::mutex *)SettingsCache);
  PreferXMLFileCache = (std::mutex *)siri::dialogengine::GetPreferXMLFileCache(v2);
  siri::dialogengine::FileInfoCache::Clear(PreferXMLFileCache);
  DisableUpdatesFileCache = (std::mutex *)siri::dialogengine::GetDisableUpdatesFileCache(v4);
  siri::dialogengine::FileInfoCache::Clear(DisableUpdatesFileCache);
}

uint64_t siri::dialogengine::GetSettingsCache(siri::dialogengine *this)
{
  {
    operator new();
  }
  uint64_t v1 = (std::once_flag::_State_type *)siri::dialogengine::GetSettingsCache(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetSettingsCache(void)::flag, memory_order_acquire) != -1)
  {
    unint64_t v5 = &v3;
    char v4 = &v5;
    std::__call_once(v1, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetSettingsCache(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetSettingsCache(void)::sCache;
}

void sub_1C5F18BC0(_Unwind_Exception *a1)
{
}

uint64_t siri::dialogengine::GetPreferXMLFileCache(siri::dialogengine *this)
{
  {
    operator new();
  }
  uint64_t v1 = (std::once_flag::_State_type *)siri::dialogengine::GetPreferXMLFileCache(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetPreferXMLFileCache(void)::flag, memory_order_acquire) != -1)
  {
    unint64_t v5 = &v3;
    char v4 = &v5;
    std::__call_once(v1, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetPreferXMLFileCache(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetPreferXMLFileCache(void)::sCache;
}

void sub_1C5F18C90(_Unwind_Exception *a1)
{
}

uint64_t siri::dialogengine::GetDisableUpdatesFileCache(siri::dialogengine *this)
{
  {
    operator new();
  }
  uint64_t v1 = (std::once_flag::_State_type *)siri::dialogengine::GetDisableUpdatesFileCache(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetDisableUpdatesFileCache(void)::flag, memory_order_acquire) != -1)
  {
    unint64_t v5 = &v3;
    char v4 = &v5;
    std::__call_once(v1, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetDisableUpdatesFileCache(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetDisableUpdatesFileCache(void)::sCache;
}

void sub_1C5F18D60(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetDisableUpdatesFileCache(void)::$_0 &&>>()
{
}

void sub_1C5F18DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v15, 0x1032C40845E3388);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetPreferXMLFileCache(void)::$_0 &&>>()
{
}

void sub_1C5F18EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v15, 0x1032C40845E3388);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<siri::dialogengine::Setting>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<siri::dialogengine::Setting>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    char v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetSettingsCache(void)::$_0 &&>>()
{
}

BOOL siri::dialogengine::PreferXMLFiles(uint64_t a1)
{
  uint64_t SettingsCache = (std::mutex *)siri::dialogengine::GetSettingsCache((siri::dialogengine *)a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "preferXML");
  char v8 = 0;
  BOOL v3 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (const void **)__p, &v8);
  BOOL v4 = v3;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v4) {
      return 1;
    }
  }
  else if (v3)
  {
    return 1;
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  if (!v6) {
    return 0;
  }
  uint64_t PreferXMLFileCache = siri::dialogengine::GetPreferXMLFileCache((siri::dialogengine *)v3);
  return siri::dialogengine::FileInfoCache::FileExists(PreferXMLFileCache, a1);
}

void sub_1C5F190B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::SettingsCache::GetValue<BOOL>(std::mutex *a1, const void **a2, char *a3)
{
  std::mutex::lock(a1);
  uint64_t v6 = std::__tree<std::string>::find<std::string>((uint64_t)&a1[1], a2);
  if (a1[1].__m_.__opaque == (char *)v6 {
    || (unsigned __int8 v7 = *(const void **)(v6 + 56)) == 0
  }
  {
    operator new();
  }
  siri::dialogengine::Setting::UpdateValue(v8);
  char v9 = *((unsigned char *)v8 + 32);
  int v10 = (*(uint64_t (**)(siri::dialogengine::Setting *))(*(void *)v8 + 16))(v8);
  char v11 = *a3;
  if (v10) {
    char v11 = v9;
  }
  BOOL v12 = v11 != 0;
  std::mutex::unlock(a1);
  return v12;
}

void sub_1C5F19298(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  unsigned __int8 v7 = a1 + 1;
  char v8 = a1 + 1;
  if (!v5) {
    goto LABEL_10;
  }
  unsigned __int8 v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      char v8 = (uint64_t **)v5;
      int v10 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4)) {
        break;
      }
      unint64_t v5 = *v8;
      unsigned __int8 v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v10, a2)) {
      break;
    }
    unsigned __int8 v7 = v8 + 1;
    unint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  char v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    char v11 = (uint64_t *)operator new(0x40uLL);
    v18[0] = v11;
    v18[1] = v6;
    char v19 = 0;
    BOOL v12 = (std::string *)(v11 + 4);
    std::string::size_type v13 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v13, *((void *)v13 + 1));
    }
    else
    {
      long long v14 = *v13;
      void v11[6] = *((void *)v13 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
    }
    v11[7] = 0;
    char v19 = 1;
    uint64_t *v11 = 0;
    v11[1] = 0;
    std::string v11[2] = (uint64_t)v8;
    *unsigned __int8 v7 = v11;
    uint64_t v15 = (uint64_t *)**a1;
    long long v16 = v11;
    if (v15)
    {
      *a1 = v15;
      long long v16 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1C5F19450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Setting::UpdateValue(siri::dialogengine::Setting *this)
{
  gettimeofday(&v5, 0);
  double v2 = (double)v5.tv_usec / 1000000.0 + (double)v5.tv_sec;
  if (v2 - *((double *)this + 3) > 1.0)
  {
    BOOL v3 = +[DEBundle frameworkInternalUserSettings];
    BOOL v4 = [v3 objectForKey:*((void *)this + 1)];

    if (v4)
    {
      *((unsigned char *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 1;
      (*(void (**)(siri::dialogengine::Setting *))(*(void *)this + 24))(this);
    }
    else
    {
      *((unsigned char *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = 0;
    }
    *((double *)this + 3) = v2;
  }
}

void sub_1C5F19548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<siri::dialogengine::Setting>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void siri::dialogengine::BoolSetting::ReadValue(id *this)
{
  id v3 = +[DEBundle frameworkInternalUserSettings];
  id v2 = this[1];
  *((unsigned char *)this + 32) = [v3 BOOLForKey:v2];
}

void sub_1C5F19620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Setting::HasValue(siri::dialogengine::Setting *this)
{
  return *((unsigned __int8 *)this + 16);
}

void siri::dialogengine::BoolSetting::~BoolSetting(id *this)
{
  JUMPOUT(0x1C8796D70);
}

{
}

BOOL siri::dialogengine::PreferSSML(siri::dialogengine *this)
{
  uint64_t SettingsCache = (std::mutex *)siri::dialogengine::GetSettingsCache(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "preferSSML");
  char v4 = 0;
  BOOL v2 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (const void **)__p, &v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C5F19748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::AllowEmptyPhrases(siri::dialogengine *this)
{
  uint64_t SettingsCache = (std::mutex *)siri::dialogengine::GetSettingsCache(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "allowEmptyPhrases");
  char v4 = 1;
  BOOL v2 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (const void **)__p, &v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C5F197D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::DisableUpdates(uint64_t a1)
{
  uint64_t SettingsCache = (std::mutex *)siri::dialogengine::GetSettingsCache((siri::dialogengine *)a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "disableUpdates");
  char v8 = 0;
  BOOL v3 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (const void **)__p, &v8);
  BOOL v4 = v3;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v4) {
      return 1;
    }
  }
  else if (v3)
  {
    return 1;
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  if (!v6) {
    return 0;
  }
  uint64_t DisableUpdatesFileCache = siri::dialogengine::GetDisableUpdatesFileCache((siri::dialogengine *)v3);
  return siri::dialogengine::FileInfoCache::FileExists(DisableUpdatesFileCache, a1);
}

void sub_1C5F19890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::EnableDebug(siri::dialogengine *this)
{
  uint64_t SettingsCache = (std::mutex *)siri::dialogengine::GetSettingsCache(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "debug");
  char v4 = 0;
  BOOL v2 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (const void **)__p, &v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C5F19914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::UpdaterHostname(siri::dialogengine *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t SettingsCache = (std::mutex *)siri::dialogengine::GetSettingsCache(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "hostname");
  siri::dialogengine::SettingsCache::GetValue<std::string>(a2, SettingsCache, (const void **)__p, (uint64_t)a1);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5F199A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::SettingsCache::GetValue<std::string>(std::string *a1, std::mutex *this, const void **a3, uint64_t a4)
{
  std::mutex::lock(this);
  uint64_t v8 = std::__tree<std::string>::find<std::string>((uint64_t)&this[1], a3);
  if (this[1].__m_.__opaque == (char *)v8 {
    || (char v9 = *(const void **)(v8 + 56)) == 0
  }
  {
    operator new();
  }
  siri::dialogengine::Setting::UpdateValue((siri::dialogengine::Setting *)v10);
  if (v10[55] < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v10 + 4), *((void *)v10 + 5));
  }
  else {
    std::string __p = *(std::string *)(v10 + 32);
  }
  if ((*(unsigned int (**)(char *))(*(void *)v10 + 16))(v10))
  {
    *a1 = __p;
    memset(&__p, 0, sizeof(__p));
  }
  else if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    a1->__r_.__value_.__r.__words[2] = *(void *)(a4 + 16);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(this);
}

void sub_1C5F19BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void siri::dialogengine::StringSetting::ReadValue(siri::dialogengine::StringSetting *this)
{
  BOOL v2 = +[DEBundle frameworkInternalUserSettings];
  id v3 = [v2 stringForKey:*((void *)this + 1)];

  if (v3)
  {
    MEMORY[0x1C8796900]((char *)this + 32, [v3 UTF8String]);
  }
  else if (*((char *)this + 55) < 0)
  {
    **((unsigned char **)this + 4) = 0;
    *((void *)this + 5) = 0;
  }
  else
  {
    *((unsigned char *)this + 32) = 0;
    *((unsigned char *)this + 55) = 0;
  }
}

void sub_1C5F19D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::StringSetting::HasValue(siri::dialogengine::StringSetting *this)
{
  siri::dialogengine::Setting::UpdateValue(this);
  if (!*((unsigned char *)this + 16)) {
    return 0;
  }
  if (*((char *)this + 55) < 0) {
    uint64_t v2 = *((void *)this + 5);
  }
  else {
    uint64_t v2 = *((unsigned __int8 *)this + 55);
  }
  return v2 != 0;
}

void siri::dialogengine::StringSetting::~StringSetting(void **this)
{
  *this = &unk_1F211F1F0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }

  JUMPOUT(0x1C8796D70);
}

{
  *this = &unk_1F211F1F0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

void siri::dialogengine::UpdaterCategory(siri::dialogengine *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t SettingsCache = (std::mutex *)siri::dialogengine::GetSettingsCache(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "category");
  siri::dialogengine::SettingsCache::GetValue<std::string>(a2, SettingsCache, (const void **)__p, (uint64_t)a1);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5F19EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::TraceEnabled(siri::dialogengine *this)
{
  uint64_t SettingsCache = (std::mutex *)siri::dialogengine::GetSettingsCache(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "trace");
  char v4 = 0;
  BOOL v2 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (const void **)__p, &v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C5F19F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::IsDeterministic(siri::dialogengine *this)
{
  uint64_t SettingsCache = (std::mutex *)siri::dialogengine::GetSettingsCache(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "deterministic");
  char v4 = 0;
  BOOL v2 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (const void **)__p, &v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C5F19FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ShouldValidateAttrs(siri::dialogengine *this)
{
  uint64_t SettingsCache = (std::mutex *)siri::dialogengine::GetSettingsCache(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "validateAttrs");
  char v4 = 0;
  BOOL v2 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (const void **)__p, &v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C5F1A050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ShouldLogCATParameters(siri::dialogengine *this, const char *a2)
{
  char v8 = 1;
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CAT parameters %s logged by default on this platform. This can be overridden by the user defaults key com.apple.siri.DialogEngine/logCATParameters.", a2, "are");
  uint64_t SettingsCache = (std::mutex *)siri::dialogengine::GetSettingsCache(v2);
  std::string::basic_string[abi:ne180100]<0>(__p, "logCATParameters");
  BOOL v4 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (const void **)__p, &v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1C5F1A0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5F1A578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t YAML::BuildGraphOfNextDocument(YAML::Scanner **a1)
{
  memset(v2, 0, sizeof(v2));
  *(_OWORD *)std::string __p = 0u;
  long long v4 = 0u;
  uint64_t v5 = 0;
  YAML::Parser::HandleNextDocument(a1);
  std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::~deque[abi:ne180100]((uint64_t)v2);
  return 0;
}

void sub_1C5F1A6F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  YAML::GraphBuilderAdapter::~GraphBuilderAdapter((YAML::GraphBuilderAdapter *)va);
  _Unwind_Resume(a1);
}

void YAML::GraphBuilderAdapter::~GraphBuilderAdapter(YAML::GraphBuilderAdapter *this)
{
  *(void *)this = &unk_1F2122DB0;
  BOOL v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::~deque[abi:ne180100]((uint64_t)this + 16);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F2122DB0;
  BOOL v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::~deque[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x1C8796D70);
}

uint64_t std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::~deque[abi:ne180100](uint64_t a1)
{
  BOOL v2 = *(void ***)(a1 + 8);
  id v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      id v3 = *(void ***)(a1 + 16);
      BOOL v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 256;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      char v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL siri::dialogengine::ValidateXmlFile(Context *a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v5 = (const char *)a2;
  }
  else {
    unint64_t v5 = *(const char **)a2;
  }
  uint64_t v6 = xmlParseFile(v5);
  return siri::dialogengine::ValidateXmlDoc(a1, v6, a3);
}

BOOL siri::dialogengine::ValidateXmlDoc(Context *a1, xmlDocPtr cur, uint64_t a3)
{
  id v3 = cur;
  xmlDocPtr v45 = cur;
  BOOL v4 = 1;
  if (!a1 || !cur) {
    goto LABEL_80;
  }
  uint64_t v8 = *((void *)a1 + 63);
  char v7 = (std::__shared_weak_count *)*((void *)a1 + 64);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (!v8)
  {
    xmlDocPtr v45 = 0;
    BOOL v4 = 1;
LABEL_81:
    xmlFreeDoc(v3);
    return v4;
  }
  siri::dialogengine::XmlErrorHandler::XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)v44, a1);
  if (*(char *)(a3 + 23) >= 0) {
    char v10 = (const std::string::value_type *)a3;
  }
  else {
    char v10 = *(const std::string::value_type **)a3;
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Parse DTD (or get cached version) with filename '%s'", v9, v10);
  {
    operator new();
  }
  char v11 = (std::once_flag::_State_type *)siri::dialogengine::ParseDtd(std::string const&)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::ParseDtd(std::string const&)::flag, memory_order_acquire) != -1)
  {
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v49[0] = &v46;
    std::__call_once(v11, v49, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ParseDtd(std::string const&)::$_0 &&>>);
  }
  {
    __cxa_atexit(MEMORY[0x1E4FBA268], &siri::dialogengine::GetParseDtdMutexRef(void)::parseDtdMutex, &dword_1C5C1E000);
  }
  std::mutex::lock(&siri::dialogengine::GetParseDtdMutexRef(void)::parseDtdMutex);
  uint64_t v13 = siri::dialogengine::ParseDtd(std::string const&)::cache + 8;
  long long v14 = *(void **)(siri::dialogengine::ParseDtd(std::string const&)::cache + 8);
  if (!v14) {
    goto LABEL_20;
  }
  uint64_t v15 = siri::dialogengine::ParseDtd(std::string const&)::cache + 8;
  do
  {
    BOOL v16 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v14 + 4, (void *)a3);
    char v17 = v14 + 1;
    if (!v16)
    {
      char v17 = v14;
      uint64_t v15 = (uint64_t)v14;
    }
    long long v14 = (void *)*v17;
  }
  while (*v17);
  if (v15 == v13
    || std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((void *)a3, (void *)(v15 + 32)))
  {
LABEL_20:
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v18 = a3;
    }
    else {
      uint64_t v18 = *(void *)a3;
    }
LABEL_23:
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"No cached DTD for filename '%s'", v12, v18);
    siri::dialogengine::GetDtdSearchPaths(v19, &v46);
    siri::dialogengine::FindFileInPaths(a3, &v46, (uint64_t)v49);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    unint64_t v21 = v50;
    if ((v50 & 0x80u) != 0) {
      unint64_t v21 = (unint64_t)v49[1];
    }
    if (v21)
    {
      siri::dialogengine::ReadFileToString((uint64_t)v49, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        int v23 = __p.__r_.__value_.__r.__words[1];
      }
      Meuint64_t m = xmlParserInputBufferCreateMem((const char *)p_p, v23, XML_CHAR_ENCODING_UTF8);
      unint64_t v26 = xmlIOParseDTD(0, Mem, XML_CHAR_ENCODING_UTF8);
      if (v26)
      {
        uint64_t v27 = siri::dialogengine::ParseDtd(std::string const&)::cache;
        if (*(char *)(a3 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
        }
        else {
          std::string v46 = *(std::string *)a3;
        }
        unint64_t v47 = v26;
        uint64_t v31 = (uint64_t **)(v27 + 8);
        unint64_t v30 = *(uint64_t **)(v27 + 8);
        if (v30)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v31 = (uint64_t **)v30;
              long long v32 = v30 + 4;
              if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v46, v30 + 4)) {
                break;
              }
              unint64_t v30 = *v31;
              long long v33 = v31;
              if (!*v31) {
                goto LABEL_57;
              }
            }
            if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v32, &v46)) {
              break;
            }
            long long v33 = v31 + 1;
            unint64_t v30 = v31[1];
            if (!v30) {
              goto LABEL_57;
            }
          }
        }
        else
        {
          long long v33 = (uint64_t **)(v27 + 8);
LABEL_57:
          unint64_t v35 = (uint64_t *)operator new(0x40uLL);
          unint64_t v36 = (std::string *)(v35 + 4);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v36, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
            std::string v37 = v47;
          }
          else
          {
            *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
            void v35[6] = v46.__r_.__value_.__r.__words[2];
            std::string v37 = v26;
          }
          v35[7] = (uint64_t)v37;
          uint64_t *v35 = 0;
          v35[1] = 0;
          uint64_t v35[2] = (uint64_t)v31;
          *long long v33 = v35;
          uint64_t v38 = **(void **)v27;
          if (v38)
          {
            *(void *)uint64_t v27 = v38;
            unint64_t v35 = *v33;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v27 + 8), v35);
          ++*(void *)(v27 + 16);
        }
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        if (*(char *)(a3 + 23) >= 0) {
          uint64_t v39 = a3;
        }
        else {
          uint64_t v39 = *(void *)a3;
        }
        std::string v40 = v49;
        if ((v50 & 0x80u) != 0) {
          std::string v40 = (void **)v49[0];
        }
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Cached DTD for filename '%s' (full path: '%s')", v34, v39, v40);
      }
      else
      {
        unint64_t v29 = v49;
        if ((v50 & 0x80u) != 0) {
          unint64_t v29 = (void **)v49[0];
        }
        siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Unable to parse DTD file '%s'; Skipping DTD validation",
          v25,
          v29);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v28 = a3;
      }
      else {
        uint64_t v28 = *(void *)a3;
      }
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Unable to find DTD file '%s'; Skipping DTD validation",
        v20,
        v28);
      unint64_t v26 = 0;
    }
    if ((char)v50 < 0) {
      operator delete(v49[0]);
    }
    goto LABEL_75;
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v18 = a3;
  }
  else {
    uint64_t v18 = *(void *)a3;
  }
  if (v13 == v15) {
    goto LABEL_23;
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Returning cached DTD for filename '%s'", v12, v18);
  unint64_t v26 = *(xmlDtd **)(v15 + 56);
LABEL_75:
  std::mutex::unlock(&siri::dialogengine::GetParseDtdMutexRef(void)::parseDtdMutex);
  if (v26)
  {
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Validating document against DTD", v41);
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)xmlNewValidCtxt();
    BOOL v4 = xmlValidateDtd((xmlValidCtxtPtr)v46.__r_.__value_.__l.__data_, v3, v26) == 1;
    uint64_t v42 = (xmlValidCtxt *)v46.__r_.__value_.__r.__words[0];
    v46.__r_.__value_.__r.__words[0] = 0;
    if (v42) {
      xmlFreeValidCtxt(v42);
    }
  }
  else
  {
    BOOL v4 = 1;
  }
  siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)v44);
  id v3 = v45;
LABEL_80:
  xmlDocPtr v45 = 0;
  if (v3) {
    goto LABEL_81;
  }
  return v4;
}