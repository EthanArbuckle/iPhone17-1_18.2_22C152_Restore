uint64_t sub_100002514(uint64_t result)
{
  *(_WORD *)result = 11265;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 8) = 0;
  return result;
}

uint64_t sub_100002528(uint64_t *a1, long long **a2)
{
  v3 = a1 + 1;
  unint64_t v4 = a1[2];
  if (v4 >= a1[3])
  {
    uint64_t result = sub_100003774(v3, a2);
  }
  else
  {
    sub_100003714((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[2] = result;
  return result;
}

void (__cdecl ***sub_10000256C(void (__cdecl ***a1)(std::ifstream *__hidden this)))(std::ifstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  a1[1] = 0;
  unint64_t v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 2);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_100002704(_Unwind_Exception *a1)
{
}

void (__cdecl ***sub_10000273C(void (__cdecl ***a1)(std::basic_stringstream<char> *__hidden this), const std::string *a2, int a3))(std::basic_stringstream<char> *__hidden this)
{
  v6 = a1 + 2;
  uint64_t v7 = (uint64_t)(a1 + 3);
  *a1 = v9;
  *(void *)((char *)*(v9 - 3) + (void)a1) = v8;
  a1[1] = 0;
  v10 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v10, a1 + 3);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  a1[2] = v12;
  *(void *)((char *)*(v12 - 3) + (void)v6) = v11;
  *a1 = v13;
  sub_100003DE0(v7, a2, a3);
  return a1;
}

void sub_1000029D8(_Unwind_Exception *a1)
{
}

void *sub_100002A00(void *a1, uint64_t a2, unsigned __int8 a3)
{
  std::istream::sentry::sentry();
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_100002B60(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x100002B20);
  }
  __cxa_rethrow();
}

void sub_100002BDC(_Unwind_Exception *a1)
{
}

uint64_t sub_100002BF0(uint64_t a1)
{
  *(void *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

void *sub_100002D28(void *a1)
{
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  return a1;
}

BOOL sub_100002DF4(uint64_t a1)
{
  sub_1000031C4(v23);
  uint64_t v2 = v24;
  if (v24)
  {
    uint64_t v19 = v24;
    uint64_t v3 = *(void *)(a1 + 8);
    if (*(void *)(a1 + 16) != v3)
    {
      unint64_t v4 = 0;
      while (1)
      {
        uint64_t v6 = (uint64_t *)(v3 + 24 * v4);
        uint64_t v5 = *v6;
        if (v6[1] != *v6) {
          break;
        }
LABEL_28:
        sub_1000042E0(v23, (uint64_t)"\n", 1);
        ++v4;
        uint64_t v3 = *(void *)(a1 + 8);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v3) >> 3) <= v4) {
          goto LABEL_29;
        }
      }
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        int v9 = (long long *)(v5 + v7);
        if (*((char *)v9 + 23) < 0)
        {
          sub_100003600(__dst, *(void **)v9, *((void *)v9 + 1));
        }
        else
        {
          long long v10 = *v9;
          *(void *)&__dst[16] = *((void *)v9 + 2);
          *(_OWORD *)__dst = v10;
        }
        sub_100003470(&__p, ",");
        int v11 = siri::dialogengine::StringContains();
        int v12 = v11;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v12)
          {
LABEL_13:
            std::operator+<char>();
            v13 = std::string::append(&__p, "\u200E\"");
            std::string::size_type v14 = v13->__r_.__value_.__r.__words[0];
            v22[0] = v13->__r_.__value_.__l.__size_;
            *(void *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
            char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
            v13->__r_.__value_.__l.__size_ = 0;
            v13->__r_.__value_.__r.__words[2] = 0;
            v13->__r_.__value_.__r.__words[0] = 0;
            if ((__dst[23] & 0x80000000) != 0) {
              operator delete(*(void **)__dst);
            }
            *(void *)__dst = v14;
            *(void *)&__dst[8] = v22[0];
            *(void *)&__dst[15] = *(void *)((char *)v22 + 7);
            __dst[23] = v15;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
        else if (v11)
        {
          goto LABEL_13;
        }
        if (__dst[23] >= 0) {
          v16 = __dst;
        }
        else {
          v16 = *(unsigned char **)__dst;
        }
        if (__dst[23] >= 0) {
          uint64_t v17 = __dst[23];
        }
        else {
          uint64_t v17 = *(void *)&__dst[8];
        }
        sub_1000042E0(v23, (uint64_t)v16, v17);
        if (v8 != -1
                 - 0x5555555555555555
                 * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 24 * v4 + 8) - *(void *)(*(void *)(a1 + 8) + 24 * v4)) >> 3))
          sub_1000042E0(v23, (uint64_t)",", 1);
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        ++v8;
        uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 24 * v4);
        v7 += 24;
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 8) + 24 * v4 + 8) - v5) >> 3) <= v8) {
          goto LABEL_28;
        }
      }
    }
LABEL_29:
    uint64_t v2 = v19;
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v23 + (unint64_t)*(v23[0] - 3)), *(_DWORD *)((char *)&v23[4] + (unint64_t)*(v23[0] - 3)) | 4);
    }
  }
  else
  {
    puts("Could not open file!");
  }
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return v2 != 0;
}

void sub_100003164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
}

void (__cdecl ***sub_1000031C4(void (__cdecl ***a1)(std::ofstream *__hidden this)))(std::ofstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  unint64_t v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 1);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_100003358(_Unwind_Exception *a1)
{
}

void *sub_100003390(void *a1)
{
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

void sub_10000345C(void *a1)
{
}

void *sub_100003470(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_100003524();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_100003524()
{
}

void sub_10000353C(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100003598(exception, a1);
}

void sub_100003584(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100003598(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_1000035CC()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void *sub_100003600(unsigned char *__dst, void *__src, unint64_t a3)
{
  size_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_100003524();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *size_t v5 = v8;
    size_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_1000036A0(void ***a1)
{
  v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    size_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_100003B14(&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_100003714(uint64_t a1, long long **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = sub_100003898((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(void *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_10000376C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100003774(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100003974();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_10000398C(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  int v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  char v15 = v11;
  v16 = &v10[24 * v9];
  *(void *)int v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_100003898(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v15 += 24;
  sub_100003BB8(a1, v14);
  uint64_t v12 = a1[1];
  sub_100003D58(v14);
  return v12;
}

void sub_100003884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100003D58((void **)va);
  _Unwind_Resume(a1);
}

char *sub_100003898(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100003920(result, a4);
    uint64_t result = sub_1000039D4((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_100003900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100003B14(&a9);
  _Unwind_Resume(a1);
}

char *sub_100003920(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100003974();
  }
  uint64_t result = (char *)sub_10000398C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void sub_100003974()
{
}

void *sub_10000398C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1000035CC();
  }
  return operator new(24 * a2);
}

char *sub_1000039D4(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  int v11 = __dst;
  uint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_100003600(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      uint64_t v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_100003A94((uint64_t)v9);
  return v4;
}

void sub_100003A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100003A94(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100003ACC(a1);
  }
  return a1;
}

void sub_100003ACC(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

void sub_100003B14(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100003B68((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100003B68(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t sub_100003BB8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100003C30((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100003C30(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_100003CD4((uint64_t)v11);
  return v9;
}

uint64_t sub_100003CD4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100003D0C(a1);
  }
  return a1;
}

void sub_100003D0C(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_100003B14(&v3);
    v1 += 3;
  }
}

void **sub_100003D58(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100003D8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_100003B14(&v5);
  }
}

uint64_t sub_100003DE0(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_100003E80(a1);
  return a1;
}

void sub_100003E5C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_100003E80(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t sub_100003F94(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100003974();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v18 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_10000398C(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  int v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  uint64_t v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_100003600(v11, *(void **)a2, *((void *)a2 + 1));
    int v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)int v11 = v12;
  }
  v16 = v11 + 24;
  sub_1000040B8(a1, v15);
  uint64_t v13 = a1[1];
  sub_100004250((uint64_t)v15);
  return v13;
}

void sub_1000040A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100004250((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000040B8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100004130((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100004130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_1000041D0((uint64_t)v12);
  return a6;
}

uint64_t sub_1000041D0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100004208(a1);
  }
  return a1;
}

void sub_100004208(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_100004250(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100004288(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void *sub_1000042E0(void *a1, uint64_t a2, uint64_t a3)
{
  std::ostream::sentry::sentry();
  if (v13)
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      long long v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_100004484(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  std::ostream::sentry::~sentry();
  return a1;
}

void sub_10000441C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::ostream::sentry::~sentry();
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1000043FCLL);
}

void sub_100004470(_Unwind_Exception *a1)
{
}

uint64_t sub_100004484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_10000460C(__p, v12, __c);
      char v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_1000045F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10000460C(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_100003524();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void sub_1000046B8(uint64_t a1)
{
  sub_100003470(v4, "expand");
  sub_100003470(__p, "Expand a CAT file.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100004730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100004764(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= 2)
  {
    sub_10003B17C(a2);
    sub_100003470(&v122, "\n  <EXECUTABLE> <COMMAND> --templateDir <dir> [--outputDir <dir>] [--locale <locale>] [--catId <id>]\n          [--params <params-json>] [--json] [--expandOpts] [--evaluateConditions] [--getAllSchemasAndGlobalParams]\n\n      If --templateDir and --catId are specified, then expand the specified CAT file.\n\n      If --json is provided, output a JSON string representing all expanded dialog(s) for the specified\n      CAT(s); if not, write outputs to a CSV file (consisting of the CAT id and\n"
      "      locale - e.g. example#calendar#en.csv) in the specified directory.\n"
      "\n"
      "      If --expandOpts is provided, all optional tags will be expanded; i.e., output will be created that\n"
      "      includes optional dialog as well output that excludes it.\n"
      "\n"
      "      If --evaluateConditions is provided, conditions will be evaluated, assuming that input parameters\n"
      "      are provided.\n"
      "\n"
      "      --templateDir <dir>             Path to the template directory\n"
      "      --outputDir <dir>               Path to CSV output file\n"
      "      --locale <locale>               The locale to expand (e.g. \"en_US\")\n"
      "      --catId <id>                    The CAT ID to expand (e.g. \"example#hello\")\n"
      "      --json                          When present, output will be written to stdout as a JSON string, rather\n"
      "                                      than to a CSV file\n"
      "      --expandOpts                    When present, expand all <opt> tags, producing output that includes as\n"
      "                                      well as excludes optional dialog.\n"
      "      --evaluateConditions            When present, evaluate conditional logic in CAT file; possible only\n"
      "                                      if --params is present\n"
      "      --richResult                    When present, return rich expansion, which includes metadata for every expan"
      "sion.\n"
      "      --params <params-json>          JSON string containing parameters for the CAT.\n"
      "                                      Example syntax: --params '{ \"myStringParam\": \"Hello\", \"myBoolParam\": t"
      "rue }'\n"
      "      --getAllSchemasAndGlobalParams  Output all schema files present in the provided templateDir as well as all s"
      "chema files associated\n"
      "                                      with global params.\n"
      "\n");
    sub_100003470(&__p, "expand");
    sub_10003B430();
    if (SHIBYTE(v119) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  sub_100003470(&__p, "--templateDir");
  siri::dialogengine::GetOption();
  siri::dialogengine::ExpandPath();
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v119) < 0) {
    operator delete((void *)__p);
  }
  sub_100003470(&v122, "--catId");
  siri::dialogengine::GetOption();
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  sub_100003470(&v122, "--locale");
  siri::dialogengine::GetOption();
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  sub_100003470(&v122, "--outputDir");
  siri::dialogengine::GetOption();
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  sub_100003470(&v122, "--params");
  siri::dialogengine::GetOption();
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  sub_100003470(&v122, "--json");
  int v3 = siri::dialogengine::OptionExists();
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  sub_100003470(&v122, "--expandOpts");
  siri::dialogengine::OptionExists();
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  sub_100003470(&v122, "--evaluateConditions");
  char v4 = siri::dialogengine::OptionExists();
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  sub_100003470(&v122, "--richResult");
  siri::dialogengine::OptionExists();
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  sub_100003470(&v122, "--getAllSchemasAndGlobalParams");
  int v5 = siri::dialogengine::OptionExists();
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  std::string::size_type v6 = v92;
  if ((v92 & 0x80u) != 0) {
    std::string::size_type v6 = v91;
  }
  if (v6)
  {
    uint64_t v7 = v98;
    if ((v98 & 0x80u) != 0) {
      uint64_t v7 = v97;
    }
    if (v7)
    {
      size_t v8 = v95;
      if ((v95 & 0x80u) != 0) {
        size_t v8 = v94;
      }
      if (v8)
      {
        if (v5)
        {
          siri::dialogengine::CreateJSONStringVal();
          sub_100003470(&v122, "templateDir");
          long long v123 = __dst;
          long long __dst = 0uLL;
          siri::dialogengine::CreateJSONStringVal();
          sub_100003470(&v124, "catId");
          long long v126 = *(_OWORD *)v114;
          v114[0] = 0;
          v114[1] = 0;
          siri::dialogengine::CreateJSONStringVal();
          sub_100003470(v127, "locale");
          long long v128 = v110;
          long long v110 = 0uLL;
          sub_100006340((uint64_t)&__p, (const void **)&v122.__r_.__value_.__l.__data_, 3);
          for (uint64_t i = 0; i != -15; i -= 5)
          {
            long long v10 = (void **)((char *)&v122.__r_.__value_.__l.__data_ + i * 8);
            uint64_t v11 = (std::__shared_weak_count *)v129[i - 1];
            if (v11) {
              sub_100006AE0(v11);
            }
            if (*((char *)v10 + 103) < 0) {
              operator delete(v10[10]);
            }
          }
          if (*((void *)&__dst + 1)) {
            sub_100006AE0(*((std::__shared_weak_count **)&__dst + 1));
          }
          siri::dialogengine::ConstructJSONString();
          sub_100003470(&__dst, (char *)&unk_10006DFE2);
          sub_100003470(v114, (char *)&unk_10006DFE2);
          sub_100003470(&v110, (char *)&unk_10006DFE2);
          siri::dialogengine::PrepareRequestFromJson();
          if (SHIBYTE(v111) < 0) {
            operator delete((void *)v110);
          }
          if (v115 < 0) {
            operator delete(v114[0]);
          }
          if (SHIBYTE(v132) < 0) {
            operator delete((void *)__dst);
          }
          siri::dialogengine::GetAllSchemasAndGlobalParams((siri::dialogengine *)v106, v12);
          siri::dialogengine::ConstructJSONString();
          if (v115 >= 0) {
            char v13 = v114;
          }
          else {
            char v13 = (void **)v114[0];
          }
          puts((const char *)v13);
          if (v115 < 0) {
            operator delete(v114[0]);
          }
          sub_100006A84((uint64_t)&__dst, *((void **)&__dst + 1));
          if (*((void *)&v106 + 1)) {
            sub_100006AE0(*((std::__shared_weak_count **)&v106 + 1));
          }
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v122.__r_.__value_.__l.__data_);
          }
          sub_100006A84((uint64_t)&__p, *((void **)&__p + 1));
          uint64_t v2 = 1;
          goto LABEL_68;
        }
        if (v3) {
          goto LABEL_83;
        }
        uint64_t v23 = v89;
        if ((v89 & 0x80u) != 0) {
          uint64_t v23 = v88;
        }
        if (v23)
        {
LABEL_83:
          uint64_t v24 = v86;
          if (v4)
          {
            uint64_t v25 = v85;
            if ((v86 & 0x80u) == 0) {
              uint64_t v26 = v86;
            }
            else {
              uint64_t v26 = v85;
            }
            if (!v26)
            {
              v27 = sub_1000042E0(&std::cout, (uint64_t)"Error: ", 7);
              v28 = sub_1000042E0(v27, (uint64_t)"--evaluateConditions", 20);
              v29 = sub_1000042E0(v28, (uint64_t)" specified, but ", 16);
              uint64_t v17 = sub_1000042E0(v29, (uint64_t)"--params", 8);
              char v18 = " option unspecified";
              uint64_t v19 = 19;
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v25 = v85;
          }
          *((void *)&__p + 1) = 0;
          v119 = 0;
          *(void *)&long long __p = (char *)&__p + 8;
          if ((v86 & 0x80u) != 0) {
            uint64_t v24 = v25;
          }
          if (v24)
          {
            sub_100006B54((uint64_t)&v122, 0, 1024, 0);
            v30 = &v84;
            if ((v86 & 0x80u) != 0) {
              v30 = v84;
            }
            *(void *)&long long __dst = v30;
            *((void *)&__dst + 1) = v30;
            if (*(_DWORD *)(sub_100006C40((uint64_t)&v122, &__dst) + 88))
            {
              v31 = sub_1000042E0(&std::cout, (uint64_t)"Could not parse params string!", 30);
              std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
              v32 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
              std::locale::~locale((std::locale *)&__dst);
              std::ostream::put();
              std::ostream::flush();
            }
            else
            {
              siri::dialogengine::ConvertJSONToJSONObj();
              sub_100006A84((uint64_t)&__p, *((void **)&__p + 1));
              v33 = (void *)*((void *)&__dst + 1);
              long long __p = __dst;
              v119 = v132;
              if (v132)
              {
                *(void *)(*((void *)&__dst + 1) + 16) = (char *)&__p + 8;
                *(void *)&long long __dst = (char *)&__dst + 8;
                *((void *)&__dst + 1) = 0;
                v132 = 0;
                v33 = 0;
              }
              else
              {
                *(void *)&long long __p = (char *)&__p + 8;
              }
              sub_100006A84((uint64_t)&__dst, v33);
            }
            sub_100008BB4((uint64_t)&v122);
          }
          siri::dialogengine::CreateJSONStringVal();
          sub_100003470(&v122, "templateDir");
          long long v123 = *(_OWORD *)v114;
          v114[0] = 0;
          v114[1] = 0;
          siri::dialogengine::CreateJSONStringVal();
          sub_100003470(&v124, "catId");
          long long v126 = v110;
          long long v110 = 0uLL;
          siri::dialogengine::CreateJSONStringVal();
          sub_100003470(v127, "locale");
          long long v128 = v106;
          long long v106 = 0uLL;
          siri::dialogengine::CreateJSONObjectVal();
          sub_100003470(v129, "parameters");
          long long v130 = v103;
          long long v103 = 0uLL;
          sub_100006340((uint64_t)&__dst, (const void **)&v122.__r_.__value_.__l.__data_, 4);
          for (uint64_t j = 0; j != -160; j -= 40)
          {
            v35 = (void **)((char *)&v122.__r_.__value_.__l.__data_ + j);
            v36 = *(std::__shared_weak_count **)((char *)&v130 + j + 8);
            if (v36) {
              sub_100006AE0(v36);
            }
            if (*((char *)v35 + 143) < 0) {
              operator delete(v35[15]);
            }
          }
          if (*((void *)&v103 + 1)) {
            sub_100006AE0(*((std::__shared_weak_count **)&v103 + 1));
          }
          if (*((void *)&v106 + 1)) {
            sub_100006AE0(*((std::__shared_weak_count **)&v106 + 1));
          }
          if (*((void *)&v110 + 1)) {
            sub_100006AE0(*((std::__shared_weak_count **)&v110 + 1));
          }
          if (v114[1]) {
            sub_100006AE0((std::__shared_weak_count *)v114[1]);
          }
          siri::dialogengine::ConstructJSONString();
          sub_100003470(v114, (char *)&unk_10006DFE2);
          sub_100003470(&v110, (char *)&unk_10006DFE2);
          sub_100003470(&v106, (char *)&unk_10006DFE2);
          siri::dialogengine::PrepareRequestFromJson();
          if (SHIBYTE(v107) < 0) {
            operator delete((void *)v106);
          }
          if (SHIBYTE(v111) < 0) {
            operator delete((void *)v110);
          }
          if (v115 < 0) {
            operator delete(v114[0]);
          }
          siri::dialogengine::Context::GetFile((uint64_t *)v114, (siri::dialogengine::Context *)v103);
          if (v114[0])
          {
            siri::dialogengine::File::ExpandAsDAG();
          }
          else
          {
            v37 = sub_1000042E0(&std::cout, (uint64_t)"Could not locate CAT file: ", 27);
            if ((v95 & 0x80u) == 0) {
              v38 = &v93;
            }
            else {
              v38 = v93;
            }
            if ((v95 & 0x80u) == 0) {
              uint64_t v39 = v95;
            }
            else {
              uint64_t v39 = v94;
            }
            v40 = sub_1000042E0(v37, (uint64_t)v38, v39);
            v41 = sub_1000042E0(v40, (uint64_t)" in template dir: ", 18);
            if ((v98 & 0x80u) == 0) {
              v42 = &v96;
            }
            else {
              v42 = v96;
            }
            if ((v98 & 0x80u) == 0) {
              uint64_t v43 = v98;
            }
            else {
              uint64_t v43 = v97;
            }
            v44 = sub_1000042E0(v41, (uint64_t)v42, v43);
            std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24)));
            v45 = std::locale::use_facet((const std::locale *)&v110, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
            std::locale::~locale((std::locale *)&v110);
            std::ostream::put();
            std::ostream::flush();
            v101 = 0;
            uint64_t v102 = 0;
            v100 = &v101;
          }
          if (v114[1]) {
            sub_100006AE0((std::__shared_weak_count *)v114[1]);
          }
          if (*((void *)&v103 + 1)) {
            sub_100006AE0(*((std::__shared_weak_count **)&v103 + 1));
          }
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v122.__r_.__value_.__l.__data_);
          }
          sub_100006A84((uint64_t)&__dst, *((void **)&__dst + 1));
          sub_100006A84((uint64_t)&__p, *((void **)&__p + 1));
          if (v102)
          {
            if (v3)
            {
              siri::dialogengine::ConstructJSONString();
              if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v46 = &v122;
              }
              else {
                v46 = (std::string *)v122.__r_.__value_.__r.__words[0];
              }
              if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v122.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v122.__r_.__value_.__l.__size_;
              }
              v48 = sub_1000042E0(&std::cout, (uint64_t)v46, size);
              std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(void *)(*v48 - 24)));
              v49 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
              std::locale::~locale((std::locale *)&__p);
              std::ostream::put();
              std::ostream::flush();
              if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v122.__r_.__value_.__l.__data_);
              }
LABEL_263:
              uint64_t v2 = 1;
LABEL_265:
              sub_100006A84((uint64_t)&v100, v101);
              goto LABEL_68;
            }
            if ((v95 & 0x80u) == 0) {
              size_t v50 = v95;
            }
            else {
              size_t v50 = v94;
            }
            sub_100008CC4((uint64_t)&v122, v50 + 1);
            if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v51 = &v122;
            }
            else {
              v51 = (std::string *)v122.__r_.__value_.__r.__words[0];
            }
            if (v50)
            {
              if ((v95 & 0x80u) == 0) {
                v52 = &v93;
              }
              else {
                v52 = v93;
              }
              memmove(v51, v52, v50);
            }
            *(_WORD *)((char *)&v51->__r_.__value_.__l.__data_ + v50) = 35;
            if ((v92 & 0x80u) == 0) {
              v53 = (const std::string::value_type *)&v90;
            }
            else {
              v53 = (const std::string::value_type *)v90;
            }
            if ((v92 & 0x80u) == 0) {
              std::string::size_type v54 = v92;
            }
            else {
              std::string::size_type v54 = v91;
            }
            v55 = std::string::append(&v122, v53, v54);
            std::string v99 = *v55;
            v55->__r_.__value_.__l.__size_ = 0;
            v55->__r_.__value_.__r.__words[2] = 0;
            v55->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v122.__r_.__value_.__l.__data_);
            }
            sub_100002514((uint64_t)&__p);
            sub_100003470(&v122, (char *)&unk_10006DFE2);
            sub_100003470(&v123, "print");
            sub_100003470(&v125, "speak");
            long long __dst = 0uLL;
            v132 = 0;
            v114[0] = &__dst;
            LOBYTE(v114[1]) = 0;
            *(void *)&long long __dst = operator new(0x48uLL);
            *((void *)&__dst + 1) = __dst;
            v132 = (void *)(__dst + 72);
            *((void *)&__dst + 1) = sub_100008D8C((uint64_t)&v132, (long long *)&v122, (long long *)((char *)&v126 + 8), (char *)__dst);
            sub_100002528((uint64_t *)&__p, (long long **)&__dst);
            v114[0] = &__dst;
            sub_100003B14((void ***)v114);
            for (uint64_t k = 0; k != -72; k -= 24)
            {
              if (*((char *)&v126 + k + 7) < 0) {
                operator delete(*(void **)((char *)&v125 + k));
              }
            }
            v57 = v100;
            if (v100 != &v101)
            {
              do
              {
                if (*((char *)v57 + 55) < 0)
                {
                  sub_100003600(&__dst, v57[4], (unint64_t)v57[5]);
                }
                else
                {
                  long long __dst = *((_OWORD *)v57 + 2);
                  v132 = v57[6];
                }
                memset(&v122, 0, sizeof(v122));
                v114[0] = &v122;
                LOBYTE(v114[1]) = 0;
                v122.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
                v122.__r_.__value_.__l.__size_ = v122.__r_.__value_.__r.__words[0];
                v122.__r_.__value_.__r.__words[2] = v122.__r_.__value_.__r.__words[0] + 24;
                v122.__r_.__value_.__l.__size_ = (std::string::size_type)sub_100008D8C((uint64_t)&v122.__r_.__value_.__r.__words[2], &__dst, &v133, v122.__r_.__value_.__l.__data_);
                sub_100002528((uint64_t *)&__p, (long long **)&v122);
                v114[0] = &v122;
                sub_100003B14((void ***)v114);
                if (SHIBYTE(v132) < 0) {
                  operator delete((void *)__dst);
                }
                v58 = (std::__shared_weak_count *)v57[8];
                v116 = v57[7];
                v117 = v58;
                if (v58) {
                  atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                siri::dialogengine::GetJSONArrayVal();
                if (v117) {
                  sub_100006AE0(v117);
                }
                v59 = (uint64_t *)*((void *)&__dst + 1);
                for (m = (uint64_t *)__dst; m != v59; m += 2)
                {
                  v61 = (std::__shared_weak_count *)m[1];
                  uint64_t v112 = *m;
                  v113 = v61;
                  if (v61) {
                    atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  siri::dialogengine::GetJSONObjectVal();
                  if (v113) {
                    sub_100006AE0(v113);
                  }
                  sub_100003470(&v122, "print");
                  v62 = (uint64_t *)sub_100008D4C((uint64_t)v114, (const void **)&v122.__r_.__value_.__l.__data_);
                  v63 = (std::__shared_weak_count *)v62[1];
                  uint64_t v108 = *v62;
                  v109 = v63;
                  if (v63) {
                    atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  siri::dialogengine::GetJSONStringVal();
                  if (v109) {
                    sub_100006AE0(v109);
                  }
                  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v122.__r_.__value_.__l.__data_);
                  }
                  sub_100003470(&v122, "speak");
                  v64 = (void *)sub_100008D4C((uint64_t)v114, (const void **)&v122.__r_.__value_.__l.__data_);
                  v65 = (std::__shared_weak_count *)v64[1];
                  v104[2] = *v64;
                  v105 = v65;
                  if (v65) {
                    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  siri::dialogengine::GetJSONStringVal();
                  if (v105) {
                    sub_100006AE0(v105);
                  }
                  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v122.__r_.__value_.__l.__data_);
                  }
                  sub_100003470(&v122, (char *)&unk_10006DFE2);
                  if (SHIBYTE(v111) < 0)
                  {
                    sub_100003600(&v123, (void *)v110, *((unint64_t *)&v110 + 1));
                  }
                  else
                  {
                    long long v123 = v110;
                    uint64_t v124 = v111;
                  }
                  if (SHIBYTE(v107) < 0)
                  {
                    sub_100003600(&v125, (void *)v106, *((unint64_t *)&v106 + 1));
                  }
                  else
                  {
                    long long v125 = v106;
                    *(void *)&long long v126 = v107;
                  }
                  long long v103 = 0uLL;
                  v104[0] = 0;
                  v120 = (void **)&v103;
                  char v121 = 0;
                  *(void *)&long long v103 = operator new(0x48uLL);
                  *((void *)&v103 + 1) = v103;
                  v104[0] = v103 + 72;
                  *((void *)&v103 + 1) = sub_100008D8C((uint64_t)v104, (long long *)&v122, (long long *)((char *)&v126 + 8), (char *)v103);
                  sub_100002528((uint64_t *)&__p, (long long **)&v103);
                  v120 = (void **)&v103;
                  sub_100003B14(&v120);
                  for (uint64_t n = 0; n != -72; n -= 24)
                  {
                    if (*((char *)&v126 + n + 7) < 0) {
                      operator delete(*(void **)((char *)&v125 + n));
                    }
                  }
                  if (SHIBYTE(v107) < 0) {
                    operator delete((void *)v106);
                  }
                  if (SHIBYTE(v111) < 0) {
                    operator delete((void *)v110);
                  }
                  sub_100006A84((uint64_t)v114, (void *)v114[1]);
                }
                v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                sub_100008EDC((void ***)&v122);
                v67 = v57[1];
                if (v67)
                {
                  do
                  {
                    v68 = (void **)v67;
                    v67 = (void *)*v67;
                  }
                  while (v67);
                }
                else
                {
                  do
                  {
                    v68 = (void **)v57[2];
                    BOOL v69 = *v68 == v57;
                    v57 = v68;
                  }
                  while (!v69);
                }
                v57 = v68;
              }
              while (v68 != &v101);
            }
            int v70 = SHIBYTE(v99.__r_.__value_.__r.__words[2]);
            if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v71 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v71 = v99.__r_.__value_.__l.__size_;
            }
            v72 = &v122;
            sub_100008CC4((uint64_t)&v122, v71 + 4);
            if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v72 = (std::string *)v122.__r_.__value_.__r.__words[0];
            }
            if (v71)
            {
              if (v70 >= 0) {
                v73 = &v99;
              }
              else {
                v73 = (std::string *)v99.__r_.__value_.__r.__words[0];
              }
              memmove(v72, v73, v71);
            }
            strcpy((char *)v72 + v71, ".csv");
            siri::dialogengine::JoinPath();
            BOOL v74 = sub_100002DF4((uint64_t)&__p);
            if (SHIBYTE(v132) < 0) {
              operator delete((void *)__dst);
            }
            if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v122.__r_.__value_.__l.__data_);
            }
            v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p + 8;
            sub_1000036A0((void ***)&v122);
            if (v74)
            {
              sub_100008CC4((uint64_t)&v122, v71 + 4);
              if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v75 = &v122;
              }
              else {
                v75 = (std::string *)v122.__r_.__value_.__r.__words[0];
              }
              if (v71)
              {
                if (v70 >= 0) {
                  v76 = &v99;
                }
                else {
                  v76 = (std::string *)v99.__r_.__value_.__r.__words[0];
                }
                memmove(v75, v76, v71);
              }
              strcpy((char *)v75 + v71, ".csv");
              siri::dialogengine::JoinPath();
              v77 = sub_1000042E0(&std::cout, (uint64_t)"CSV written to: ", 16);
              if (SHIBYTE(v119) >= 0) {
                p_p = &__p;
              }
              else {
                p_p = (long long *)__p;
              }
              if (SHIBYTE(v119) >= 0) {
                uint64_t v79 = HIBYTE(v119);
              }
              else {
                uint64_t v79 = *((void *)&__p + 1);
              }
              v80 = sub_1000042E0(v77, (uint64_t)p_p, v79);
              std::ios_base::getloc((const std::ios_base *)((char *)v80 + *(void *)(*v80 - 24)));
              v81 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v81->__vftable[2].~facet_0)(v81, 10);
              std::locale::~locale((std::locale *)&__dst);
              std::ostream::put();
              std::ostream::flush();
              if (SHIBYTE(v119) < 0) {
                operator delete((void *)__p);
              }
              if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v122.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              v82 = sub_1000042E0(&std::cout, (uint64_t)"Error writing to CSV!", 21);
              std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(void *)(*v82 - 24)));
              v83 = std::locale::use_facet((const std::locale *)&v122, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
              std::locale::~locale((std::locale *)&v122);
              std::ostream::put();
              std::ostream::flush();
            }
            if (v70 < 0) {
              operator delete(v99.__r_.__value_.__l.__data_);
            }
            if (v74) {
              goto LABEL_263;
            }
          }
          uint64_t v2 = 0;
          goto LABEL_265;
        }
        uint64_t v14 = sub_1000042E0(&std::cout, (uint64_t)"Error: no ", 10);
        uint64_t v15 = "--outputDir";
        uint64_t v16 = 11;
      }
      else
      {
        uint64_t v14 = sub_1000042E0(&std::cout, (uint64_t)"Error: no ", 10);
        uint64_t v15 = "--catId";
        uint64_t v16 = 7;
      }
    }
    else
    {
      uint64_t v14 = sub_1000042E0(&std::cout, (uint64_t)"Error: no ", 10);
      uint64_t v15 = "--templateDir";
      uint64_t v16 = 13;
    }
  }
  else
  {
    uint64_t v14 = sub_1000042E0(&std::cout, (uint64_t)"Error: no ", 10);
    uint64_t v15 = "--locale";
    uint64_t v16 = 8;
  }
  uint64_t v17 = sub_1000042E0(v14, (uint64_t)v15, v16);
  char v18 = " option specified";
  uint64_t v19 = 17;
LABEL_67:
  v20 = sub_1000042E0(v17, (uint64_t)v18, v19);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
  v21 = std::locale::use_facet((const std::locale *)&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale((std::locale *)&v122);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v2 = 0;
LABEL_68:
  if ((char)v86 < 0) {
    operator delete(v84);
  }
  if ((char)v89 < 0) {
    operator delete(v87);
  }
  if ((char)v92 < 0) {
    operator delete(v90);
  }
  if ((char)v95 < 0) {
    operator delete(v93);
  }
  if ((char)v98 < 0) {
    operator delete(v96);
  }
  return v2;
}

void sub_100005BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::locale a63)
{
  if (a73 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  sub_100006A84((uint64_t)&a48, (void *)a49);
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  _Unwind_Resume(a1);
}

void sub_1000062E4()
{
}

void sub_1000062EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  if (a50) {
    sub_100006AE0(a50);
  }
  JUMPOUT(0x10000624CLL);
}

uint64_t sub_100006300(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_100006AE0(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100006340(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  char v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      sub_1000063C4((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_1000063AC(_Unwind_Exception *a1)
{
  sub_100006A84(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1000063C4(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = sub_10000645C(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    sub_100006608((uint64_t)a1, a4, (uint64_t)v10);
    sub_100006674(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_1000069D8((uint64_t)v10, 0);
  }
  return v7;
}

const void **sub_10000645C(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  int v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !sub_10000676C((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!sub_10000676C((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (const void **)a2[1];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      char v18 = (const void **)a2;
      do
      {
        uint64_t v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        char v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_10000676C((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    int64_t v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  uint64_t v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      int64_t v12 = v11;
      uint64_t v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      int64_t v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      uint64_t v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (sub_10000676C((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return (const void **)sub_1000066CC((uint64_t)a1, a3, a5);
}

void *sub_100006608@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_1000067D8(v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10000665C(_Unwind_Exception *a1)
{
  sub_1000069D8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_100006674(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_100006840(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void *sub_1000066CC(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        size_t v8 = (void *)v4;
        int v9 = (const void **)(v4 + 32);
        if (!sub_10000676C(v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_10000676C(v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    size_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL sub_10000676C(uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    size_t v8 = a3;
  }
  else {
    size_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void *sub_1000067D8(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100003600(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  uint64_t v5 = *((void *)a2 + 4);
  __dst[3] = *((void *)a2 + 3);
  __dst[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return __dst;
}

uint64_t *sub_100006840(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      long long v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            size_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            size_t v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *size_t v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_1000069D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100006A30((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_100006A30(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_100006AE0(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_100006A84(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100006A84(a1, *a2);
    sub_100006A84(a1, a2[1]);
    sub_100006A30((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100006AE0(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t sub_100006B54(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = a4;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(void *)(result + 80) = a3;
  *(_DWORD *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  if (!a2) {
    operator new();
  }
  return result;
}

void sub_100006BD0(_Unwind_Exception *a1)
{
  sub_100006BE8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100006BE8(uint64_t a1)
{
  free(*(void **)(a1 + 16));
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    operator delete();
  }
  return result;
}

uint64_t sub_100006C40(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v10 = a1;
  uint64_t v11 = v3;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v14 = 256;
  int v15 = 0;
  uint64_t v16 = 0;
  int v17 = 2;
  uint64_t v4 = sub_100006D50((uint64_t)&v11, a2, a1);
  *(void *)(a1 + 88) = v4;
  *(void *)(a1 + 96) = v5;
  if (v4) {
    int v6 = 0;
  }
  else {
    int v6 = sub_100006EDC;
  }
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 64);
    if (v7 - *(void *)(a1 + 56) != 24) {
      __assert_rtn("ParseStream", "document.h", 2259, "stack_.GetSize() == sizeof(ValueType)");
    }
    *(void *)(a1 + 64) = v7 - 24;
    if (v7 - 24 != a1)
    {
      long long v8 = *(_OWORD *)(v7 - 24);
      *(void *)(a1 + 16) = *(void *)(v7 - 8);
      *(_OWORD *)a1 = v8;
      *(_WORD *)(v7 - 2) = 0;
    }
  }
  sub_100008B1C(&v10);
  sub_100006BE8((uint64_t)&v11);
  return a1;
}

void sub_100006D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

uint64_t sub_100006D50(uint64_t a1, void *a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  for (uint64_t i = (unsigned char *)*a2; ; ++i)
  {
    unsigned int v6 = *i;
    BOOL v7 = v6 > 0x20;
    uint64_t v8 = (1 << v6) & 0x100002600;
    if (v7 || v8 == 0) {
      break;
    }
  }
  *a2 = i;
  if (!*i)
  {
    int v14 = 1;
LABEL_19:
    int v15 = &i[-a2[1]];
    *(_DWORD *)(a1 + 48) = v14;
    *(void *)(a1 + 56) = v15;
    goto LABEL_16;
  }
  sub_100006E7C(a1, a2, a3);
  if (!*(_DWORD *)(a1 + 48))
  {
    for (uint64_t i = (unsigned char *)*a2; ; ++i)
    {
      unsigned int v10 = *i;
      BOOL v7 = v10 > 0x20;
      uint64_t v11 = (1 << v10) & 0x100002600;
      if (v7 || v11 == 0) {
        break;
      }
    }
    *a2 = i;
    if (*i)
    {
      int v14 = 2;
      goto LABEL_19;
    }
  }
LABEL_16:
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = *(void *)(a1 + 16);
  return result;
}

void sub_100006E34(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = *(void *)(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t sub_100006E40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 - *(void *)(a1 + 16) < (unint64_t)(24 * a2)) {
    sub_100062110();
  }
  uint64_t v3 = v2 - 24 * a2;
  *(void *)(a1 + 24) = v3;
  return v3;
}

void sub_100006E7C(uint64_t result, void *a2, uint64_t a3)
{
  int v3 = *(char *)*a2;
  if (v3 > 109)
  {
    switch(v3)
    {
      case '{':
        sub_100007224(result, (unsigned __int8 **)a2, (void *)a3);
        return;
      case 't':
        sub_100006F90(result, a2, a3);
        return;
      case 'n':
        sub_100006EEC(result, a2, a3);
        return;
    }
  }
  else
  {
    switch(v3)
    {
      case '""':
        sub_1000070FC(result, a2, a3);
        return;
      case '[':
        sub_1000074D4(result, (unsigned __int8 **)a2, (void *)a3);
        return;
      case 'f':
        sub_10000703C(result, a2, a3);
        return;
    }
  }
  sub_1000076D0(result, (unsigned __int8 **)a2, a3);
}

BOOL sub_100006EDC(_DWORD *a1)
{
  return *a1 != 0;
}

uint64_t sub_100006EEC(uint64_t result, void *a2, uint64_t a3)
{
  int v3 = (unsigned char *)*a2;
  if (*(unsigned char *)*a2 != 110) {
    sub_100062168();
  }
  uint64_t v4 = v3 + 1;
  *a2 = v3 + 1;
  if (v3[1] == 117 && (uint64_t v4 = v3 + 2, *a2 = v3 + 2, v3[2] == 108) && (uint64_t v4 = v3 + 3, *a2 = v3 + 3, v3[3] == 108))
  {
    *a2 = v3 + 4;
    uint64_t result = sub_100007EB4((void *)(a3 + 40), 1);
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 48)) {
      sub_10006213C();
    }
    uint64_t v5 = &v4[-a2[1]];
    *(_DWORD *)(result + 48) = 3;
    *(void *)(result + 56) = v5;
  }
  return result;
}

uint64_t sub_100006F90(uint64_t result, void *a2, uint64_t a3)
{
  int v3 = (unsigned char *)*a2;
  if (*(unsigned char *)*a2 != 116) {
    sub_1000621C0();
  }
  uint64_t v4 = v3 + 1;
  *a2 = v3 + 1;
  if (v3[1] == 114 && (uint64_t v4 = v3 + 2, *a2 = v3 + 2, v3[2] == 117) && (uint64_t v4 = v3 + 3, *a2 = v3 + 3, v3[3] == 101))
  {
    *a2 = v3 + 4;
    uint64_t result = sub_100007EB4((void *)(a3 + 40), 1);
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = 0;
    *(_WORD *)(result + 22) = 10;
  }
  else
  {
    if (*(_DWORD *)(result + 48)) {
      sub_100062194();
    }
    uint64_t v5 = &v4[-a2[1]];
    *(_DWORD *)(result + 48) = 3;
    *(void *)(result + 56) = v5;
  }
  return result;
}

uint64_t sub_10000703C(uint64_t result, void *a2, uint64_t a3)
{
  int v3 = (unsigned char *)*a2;
  if (*(unsigned char *)*a2 != 102) {
    sub_100062218();
  }
  uint64_t v4 = v3 + 1;
  *a2 = v3 + 1;
  if (v3[1] == 97
    && (uint64_t v4 = v3 + 2, *a2 = v3 + 2, v3[2] == 108)
    && (uint64_t v4 = v3 + 3, *a2 = v3 + 3, v3[3] == 115)
    && (uint64_t v4 = v3 + 4, *a2 = v3 + 4, v3[4] == 101))
  {
    *a2 = v3 + 5;
    uint64_t result = sub_100007EB4((void *)(a3 + 40), 1);
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = 0;
    *(_WORD *)(result + 22) = 9;
  }
  else
  {
    if (*(_DWORD *)(result + 48)) {
      sub_1000621EC();
    }
    uint64_t v5 = &v4[-a2[1]];
    *(_DWORD *)(result + 48) = 3;
    *(void *)(result + 56) = v5;
  }
  return result;
}

double sub_1000070FC(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  long long v11 = *a2;
  long long v12 = a2;
  if (*(unsigned char *)v11 != 34) {
    __assert_rtn("ParseString", "reader.h", 961, "s.Peek() == '\\\"'");
  }
  *(void *)&long long v11 = v11 + 1;
  size_t v9 = (void *)a1;
  int v10 = 0;
  sub_100008064((unsigned char *)a1, (uint64_t *)&v11, &v9);
  if (!*(_DWORD *)(a1 + 48))
  {
    int v5 = v10;
    unsigned int v6 = (void *)sub_100008270((unsigned int *)&v9);
    if ((sub_1000082A8(a3, v6, v5 - 1, 1) & 1) == 0)
    {
      if (*(_DWORD *)(a1 + 48)) {
        __assert_rtn("ParseString", "reader.h", 983, "!HasParseError()");
      }
      uint64_t v8 = v11 - *((void *)&v11 + 1);
      *(_DWORD *)(a1 + 48) = 16;
      *(void *)(a1 + 56) = v8;
    }
  }
  double result = *(double *)&v11;
  *long long v12 = v11;
  return result;
}

void sub_100007208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11, _OWORD *a12)
{
  *a12 = a11;
  _Unwind_Resume(a1);
}

void sub_100007224(uint64_t a1, unsigned __int8 **a2, void *a3)
{
  if (**a2 != 123) {
    sub_1000622C8();
  }
  ++*a2;
  uint64_t v6 = sub_100007EB4(a3 + 5, 1);
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = 0;
  *(_WORD *)(v6 + 22) = 3;
  for (uint64_t i = *a2; ; ++i)
  {
    unsigned int v8 = *i;
    BOOL v9 = v8 > 0x20;
    uint64_t v10 = (1 << v8) & 0x100002600;
    if (v9 || v10 == 0) {
      break;
    }
  }
  *a2 = i;
  if (!*(_DWORD *)(a1 + 48))
  {
    int v12 = *i;
    if (v12 == 125)
    {
      *a2 = i + 1;
      if (sub_1000088AC(a3, 0)) {
        return;
      }
      if (*(_DWORD *)(a1 + 48)) {
        sub_100062244();
      }
LABEL_47:
      v34 = (unsigned __int8 *)(*a2 - a2[1]);
      int v35 = 16;
LABEL_48:
      *(_DWORD *)(a1 + 48) = v35;
      *(void *)(a1 + 56) = v34;
      return;
    }
    if (v12 != 34)
    {
LABEL_45:
      v34 = (unsigned __int8 *)(i - a2[1]);
      int v35 = 4;
      goto LABEL_48;
    }
    unsigned int v13 = 0;
    while (1)
    {
      v14.n128_f64[0] = sub_1000070FC(a1, a2, (uint64_t)a3);
      if (*(_DWORD *)(a1 + 48)) {
        break;
      }
      int v15 = *a2;
      for (uint64_t j = *a2; ; ++j)
      {
        unsigned int v17 = *j;
        BOOL v9 = v17 > 0x20;
        uint64_t v18 = (1 << v17) & 0x100002600;
        if (v9 || v18 == 0) {
          break;
        }
        ++v15;
      }
      *a2 = j;
      if (*j != 58)
      {
        v34 = (unsigned __int8 *)(v15 - a2[1]);
        int v35 = 5;
        goto LABEL_48;
      }
      v20 = j + 1;
      *a2 = j + 1;
      while (1)
      {
        unsigned int v21 = *v20;
        BOOL v9 = v21 > 0x20;
        uint64_t v22 = (1 << v21) & 0x100002600;
        if (v9 || v22 == 0) {
          break;
        }
        ++v20;
      }
      *a2 = v20;
      sub_100006E7C(a1, a2, a3, v14);
      if (*(_DWORD *)(a1 + 48)) {
        return;
      }
      uint64_t v24 = *a2;
      for (uint64_t k = *a2; ; ++k)
      {
        unsigned int v26 = *k;
        BOOL v9 = v26 > 0x20;
        uint64_t v27 = (1 << v26) & 0x100002600;
        if (v9 || v27 == 0) {
          break;
        }
        ++v24;
      }
      *a2 = k;
      ++v13;
      int v29 = (char)*k;
      if (v29 != 44)
      {
        if (v29 != 125)
        {
          v34 = (unsigned __int8 *)(v24 - a2[1]);
          int v35 = 6;
          goto LABEL_48;
        }
        *a2 = k + 1;
        if (sub_1000088AC(a3, v13)) {
          return;
        }
        if (*(_DWORD *)(a1 + 48)) {
          sub_10006229C();
        }
        goto LABEL_47;
      }
      uint64_t i = k + 1;
      *a2 = k + 1;
      while (1)
      {
        unsigned int v30 = *i;
        BOOL v9 = v30 > 0x20;
        uint64_t v31 = (1 << v30) & 0x100002600;
        if (v9 || v31 == 0) {
          break;
        }
        ++i;
      }
      *a2 = i;
      int v33 = *i;
      if (v33 == 125)
      {
        if (sub_1000088AC(a3, v13))
        {
          ++*a2;
          return;
        }
        if (*(_DWORD *)(a1 + 48)) {
          sub_100062270();
        }
        goto LABEL_47;
      }
      if (v33 != 34) {
        goto LABEL_45;
      }
    }
  }
}

uint64_t sub_1000074D4(uint64_t a1, unsigned __int8 **a2, void *a3)
{
  if (**a2 != 91) {
    sub_100062378();
  }
  ++*a2;
  uint64_t result = sub_100007EB4(a3 + 5, 1);
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = 0;
  *(_WORD *)(result + 22) = 4;
  for (uint64_t i = *a2; ; ++i)
  {
    unsigned int v9 = *i;
    BOOL v10 = v9 > 0x20;
    uint64_t v11 = (1 << v9) & 0x100002600;
    if (v10 || v11 == 0) {
      break;
    }
  }
  *a2 = i;
  if (!*(_DWORD *)(a1 + 48))
  {
    if (*i == 93)
    {
      *a2 = i + 1;
      uint64_t result = sub_10000898C(a3, 0);
      if ((result & 1) == 0)
      {
        if (*(_DWORD *)(a1 + 48)) {
          sub_1000622F4();
        }
LABEL_32:
        uint64_t v24 = (unsigned char *)(*a2 - a2[1]);
        int v25 = 16;
LABEL_33:
        *(_DWORD *)(a1 + 48) = v25;
        *(void *)(a1 + 56) = v24;
      }
    }
    else
    {
      unsigned int v13 = 0;
      while (1)
      {
        uint64_t result = sub_100006E7C(a1, a2, a3, v7);
        if (*(_DWORD *)(a1 + 48)) {
          break;
        }
        __n128 v14 = *a2;
        for (uint64_t j = *a2; ; ++j)
        {
          unsigned int v16 = *j;
          BOOL v10 = v16 > 0x20;
          uint64_t v17 = (1 << v16) & 0x100002600;
          if (v10 || v17 == 0) {
            break;
          }
          ++v14;
        }
        ++v13;
        *a2 = j;
        int v19 = *j;
        if (v19 != 44)
        {
          if (v19 != 93)
          {
            uint64_t v24 = (unsigned char *)(v14 - a2[1]);
            int v25 = 7;
            goto LABEL_33;
          }
          *a2 = j + 1;
          uint64_t result = sub_10000898C(a3, v13);
          if (result) {
            return result;
          }
          if (*(_DWORD *)(a1 + 48)) {
            sub_10006234C();
          }
          goto LABEL_32;
        }
        v20 = j + 1;
        *a2 = j + 1;
        while (1)
        {
          unsigned int v21 = *v20;
          BOOL v10 = v21 > 0x20;
          uint64_t v22 = (1 << v21) & 0x100002600;
          if (v10 || v22 == 0) {
            break;
          }
          ++v20;
        }
        *a2 = v20;
        if (*v20 == 93)
        {
          uint64_t result = sub_10000898C(a3, v13);
          if (result)
          {
            ++*a2;
            return result;
          }
          if (*(_DWORD *)(a1 + 48)) {
            sub_100062320();
          }
          goto LABEL_32;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000076D0(uint64_t result, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  int v5 = a2[1];
  int v6 = **a2;
  if (v6 == 45)
  {
    unsigned int v8 = v4 + 1;
    int v7 = v4[1];
  }
  else
  {
    int v7 = **a2;
    unsigned int v8 = *a2;
  }
  LODWORD(v9) = v7 - 48;
  if (v7 == 48)
  {
    int v16 = 0;
    LODWORD(v14) = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    double v13 = 0.0;
    unsigned int v10 = v8[1];
    uint64_t v11 = (uint64_t)(v8 + 1);
    goto LABEL_41;
  }
  if ((v7 - 49) > 8)
  {
    if (*(_DWORD *)(result + 48)) {
      __assert_rtn("ParseNumber", "reader.h", 1532, "!HasParseError()");
    }
    uint64_t v39 = (unsigned __int8 *)(v8 - v5);
    int v40 = 3;
    goto LABEL_111;
  }
  uint64_t v11 = (uint64_t)(v8 + 1);
  unsigned int v10 = v8[1];
  unsigned int v12 = v10 - 48;
  double v13 = 0.0;
  if (v6 != 45)
  {
    if (v12 <= 9)
    {
      uint64_t v14 = 0;
      while (1)
      {
        if (v9 > 0x19999998)
        {
          if (v9 != 429496729) {
            goto LABEL_23;
          }
          if (v10 > 0x35) {
            break;
          }
        }
        LODWORD(v9) = v10 + 10 * v9 - 48;
        unsigned int v10 = v8[v14++ + 2];
        if (v10 - 48 >= 0xA)
        {
          int v16 = 0;
          unint64_t v17 = 0;
          int v18 = 0;
          uint64_t v11 = (uint64_t)&v8[v14 + 1];
          goto LABEL_41;
        }
      }
      LODWORD(v9) = 429496729;
LABEL_23:
      uint64_t v11 = (uint64_t)&v8[v14 + 1];
      goto LABEL_24;
    }
LABEL_102:
    int v16 = 0;
    LODWORD(v14) = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    goto LABEL_41;
  }
  if (v12 > 9) {
    goto LABEL_102;
  }
  uint64_t v14 = 0;
  while (1)
  {
    if (v9 > 0xCCCCCCB)
    {
      if (v9 != 214748364) {
        goto LABEL_14;
      }
      if (v10 > 0x38) {
        break;
      }
    }
    LODWORD(v9) = v10 + 10 * v9 - 48;
    unsigned int v10 = v8[v14++ + 2];
    if (v10 - 48 >= 0xA)
    {
      int v16 = 0;
      unint64_t v17 = 0;
      int v18 = 0;
      uint64_t v11 = (uint64_t)&v8[v14 + 1];
      goto LABEL_41;
    }
  }
  unsigned int v10 = 57;
  LODWORD(v9) = 214748364;
LABEL_14:
  uint64_t v11 = (uint64_t)&v8[v14 + 1];
LABEL_24:
  unint64_t v17 = v9;
  if (v6 == 45)
  {
    while (v17 <= 0xCCCCCCCCCCCCCCBLL || v17 == 0xCCCCCCCCCCCCCCCLL && v10 <= 0x38)
    {
      unsigned int v15 = *(unsigned __int8 *)++v11;
      unint64_t v17 = v10 - 48 + 10 * v17;
      LODWORD(v14) = v14 + 1;
      unsigned int v10 = v15;
      if (v15 - 48 >= 0xA) {
        goto LABEL_39;
      }
    }
  }
  else
  {
    while (v17 <= 0x1999999999999998 || v17 == 0x1999999999999999 && v10 <= 0x35)
    {
      unsigned int v19 = *(unsigned __int8 *)++v11;
      unint64_t v17 = v10 - 48 + 10 * v17;
      LODWORD(v14) = v14 + 1;
      unsigned int v10 = v19;
      if (v19 - 48 >= 0xA)
      {
LABEL_39:
        int v16 = 0;
        double v13 = 0.0;
        goto LABEL_40;
      }
    }
  }
  double v13 = (double)v17;
  do
  {
    unsigned int v20 = *(unsigned __int8 *)++v11;
    double v13 = (double)(int)(v10 - 48) + v13 * 10.0;
    unsigned int v10 = v20;
  }
  while (v20 - 48 < 0xA);
  int v16 = 1;
LABEL_40:
  int v18 = 1;
LABEL_41:
  uint64_t v21 = v4 - v5;
  if (v10 == 46)
  {
    unsigned int v8 = (unsigned __int8 *)(v11 + 1);
    unsigned int v10 = *(unsigned __int8 *)(v11 + 1);
    if (v10 - 48 >= 0xA)
    {
      if (*(_DWORD *)(result + 48)) {
        __assert_rtn("ParseNumber", "reader.h", 1575, "!HasParseError()");
      }
      uint64_t v39 = (unsigned __int8 *)(v8 - v5);
      int v40 = 14;
      goto LABEL_111;
    }
    if (v16)
    {
      int v22 = 0;
      goto LABEL_54;
    }
    uint64_t v23 = 0;
    if (!v18) {
      unint64_t v17 = v9;
    }
    while (v10 <= 0x39 && !(v17 >> 53))
    {
      unint64_t v17 = v10 - 48 + 10 * v17;
      if (v17) {
        LODWORD(v14) = v14 + 1;
      }
      int v24 = *(char *)(v11 + v23 + 2);
      unsigned int v10 = *(unsigned __int8 *)(v11 + v23++ + 2);
      if (v24 <= 47)
      {
        int v25 = 0;
        double v13 = (double)v17;
        int v22 = -(int)v23;
        unsigned int v8 = (unsigned __int8 *)(v11 + v23 + 1);
        goto LABEL_82;
      }
    }
    double v13 = (double)v17;
    int v22 = -(int)v23;
    unsigned int v8 = (unsigned __int8 *)(v11 + v23 + 1);
LABEL_54:
    while (v10 <= 0x39)
    {
      if ((int)v14 <= 16)
      {
        double v13 = (double)(int)(v10 - 48) + v13 * 10.0;
        --v22;
        if (v13 > 0.0) {
          LODWORD(v14) = v14 + 1;
        }
      }
      int v26 = (char)*++v8;
      unsigned int v10 = v26;
      if (v26 <= 47)
      {
        int v25 = 0;
        goto LABEL_82;
      }
    }
    int v16 = 1;
  }
  else
  {
    int v22 = 0;
    unsigned int v8 = (unsigned __int8 *)v11;
  }
  if (v10 != 101 && v10 != 69)
  {
    uint64_t v47 = v21;
    uint64_t v48 = result;
    int v46 = v9;
    if ((v16 & 1) == 0)
    {
      if (v18)
      {
        if (v6 == 45) {
          uint64_t result = sub_100008A30(a3, -(uint64_t)v17);
        }
        else {
          uint64_t result = sub_100008AB0(a3, v17);
        }
        if ((result & 1) == 0)
        {
          if (*(_DWORD *)(v48 + 48)) {
            __assert_rtn("ParseNumber", "reader.h", 1731, "!HasParseError()");
          }
          *(_DWORD *)(v48 + 48) = 16;
          *(void *)(v48 + 56) = v47;
        }
        goto LABEL_97;
      }
      uint64_t result = sub_100007EB4((void *)(a3 + 40), 1);
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      if (v6 == 45)
      {
        *(void *)uint64_t result = -v46;
        BOOL v45 = -v46 < 0;
        __int16 v38 = 182;
      }
      else
      {
        *(void *)uint64_t result = v46;
        BOOL v45 = v46 < 0;
        __int16 v38 = 470;
      }
      if (!v45) {
        __int16 v38 = 502;
      }
LABEL_96:
      *(_WORD *)(result + 22) = v38;
      goto LABEL_97;
    }
    int v25 = 0;
LABEL_82:
    unsigned int v34 = v22 + v25;
    if ((int)v34 > -309)
    {
      if ((v34 & 0x80000000) == 0)
      {
        if (v34 >= 0x135)
        {
          v41 = "n >= 0 && n <= 308";
          int v42 = 48;
          uint64_t v43 = "pow10.h";
          v44 = "Pow10";
          goto LABEL_114;
        }
        double v35 = v13 * dbl_100064498[v34];
        goto LABEL_90;
      }
      unsigned int v36 = -v34;
    }
    else
    {
      double v35 = 0.0;
      if (v34 < 0xFFFFFD98)
      {
LABEL_93:
        uint64_t result = sub_100007EB4((void *)(a3 + 40), 1);
        double v37 = -v35;
        if (v6 != 45) {
          double v37 = v35;
        }
        *(void *)(result + 8) = 0;
        *(void *)(result + 16) = 0;
        *(double *)uint64_t result = v37;
        __int16 v38 = 534;
        goto LABEL_96;
      }
      double v13 = v13 / 1.0e308;
      unsigned int v36 = -308 - v34;
    }
    double v35 = v13 / dbl_100064498[v36];
LABEL_90:
    if (v35 > 1.79769313e308)
    {
      if (!*(_DWORD *)(result + 48)) {
        goto LABEL_92;
      }
      v41 = "!HasParseError()";
      int v42 = 1707;
      uint64_t v43 = "reader.h";
      v44 = "ParseNumber";
LABEL_114:
      __assert_rtn(v44, v43, v42, v41);
    }
    goto LABEL_93;
  }
  v28 = v8 + 1;
  int v27 = v8[1];
  unint64_t v9 = v9;
  if (v18) {
    unint64_t v9 = v17;
  }
  if (!v16) {
    double v13 = (double)v9;
  }
  if (v27 == 43 || v27 == 45)
  {
    v28 = v8 + 2;
    int v25 = v8[2] - 48;
    if (v25 < 0xA)
    {
      v8 += 3;
      if (v27 == 43) {
        goto LABEL_69;
      }
      if (v22 >= 1) {
        __assert_rtn("ParseNumber", "reader.h", 1639, "expFrac <= 0");
      }
      int v30 = *v8;
      if ((v30 - 48) > 9)
      {
LABEL_77:
        int v32 = 1;
      }
      else
      {
        while (1)
        {
          int v25 = v30 + 10 * v25 - 48;
          if (v25 > (v22 + 2147483639) / 10) {
            break;
          }
          int v31 = *++v8;
          int v30 = v31;
          if ((v31 - 48) >= 0xA) {
            goto LABEL_77;
          }
        }
        do
        {
          int v33 = *++v8;
          int v32 = 1;
        }
        while ((v33 - 48) < 0xA);
      }
      goto LABEL_80;
    }
    goto LABEL_109;
  }
  int v25 = v27 - 48;
  if ((v27 - 48) > 9)
  {
LABEL_109:
    unsigned int v8 = v28;
    if (*(_DWORD *)(result + 48)) {
      __assert_rtn("ParseNumber", "reader.h", 1660, "!HasParseError()");
    }
    uint64_t v39 = (unsigned __int8 *)(v28 - v5);
    int v40 = 15;
LABEL_111:
    *(_DWORD *)(result + 48) = v40;
    *(void *)(result + 56) = v39;
    goto LABEL_97;
  }
  v8 += 2;
  do
  {
LABEL_69:
    int v29 = *v8;
    if ((v29 - 48) > 9)
    {
      int v32 = 0;
LABEL_80:
      if (v32) {
        int v25 = -v25;
      }
      goto LABEL_82;
    }
    ++v8;
    int v25 = v29 + 10 * v25 - 48;
  }
  while (v25 <= 308 - v22);
  if (*(_DWORD *)(result + 48)) {
    __assert_rtn("ParseNumber", "reader.h", 1655, "!HasParseError()");
  }
LABEL_92:
  *(_DWORD *)(result + 48) = 13;
  *(void *)(result + 56) = v21;
LABEL_97:
  *a2 = v8;
  a2[1] = v5;
  return result;
}

void sub_100007E94(_Unwind_Exception *a1)
{
  void *v1 = v3;
  v1[1] = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100007EB4(void *a1, uint64_t a2)
{
  if (24 * a2 > a1[4] - a1[3]) {
    sub_100007F60(a1, a2);
  }
  return sub_100007F18((uint64_t)a1, a2);
}

uint64_t sub_100007F18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000623A4();
  }
  if (24 * a2 > *(void *)(a1 + 32) - v2) {
    sub_1000623D0();
  }
  *(void *)(a1 + 24) = v2 + 24 * a2;
  return v2;
}

char *sub_100007F60(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    unint64_t v3 = a1[4] - v2 + ((unint64_t)(a1[4] - v2 + 1) >> 1);
  }
  else
  {
    if (!*a1) {
      operator new();
    }
    uint64_t v2 = 0;
    unint64_t v3 = a1[5];
  }
  size_t v4 = a1[3] + 24 * a2 - v2;
  if (v3 <= v4) {
    size_t v5 = v4;
  }
  else {
    size_t v5 = v3;
  }
  return sub_100007FFC(a1, v5);
}

char *sub_100007FFC(void *a1, size_t size)
{
  size_t v4 = (void *)a1[2];
  uint64_t v5 = a1[3];
  if (size)
  {
    uint64_t result = (char *)malloc_type_realloc(v4, size, 0x9D18BDCDuLL);
  }
  else
  {
    free(v4);
    uint64_t result = 0;
  }
  a1[2] = result;
  a1[3] = &result[v5 - (void)v4];
  a1[4] = &result[size];
  return result;
}

unsigned char *sub_100008064(unsigned char *result, uint64_t *a2, void **a3)
{
  uint64_t v5 = (uint64_t)result;
  while (1)
  {
    while (1)
    {
      int v6 = (char *)*a2;
      unsigned int v7 = *(unsigned __int8 *)*a2;
      if (v7 == 92) {
        break;
      }
      if (v7 == 34)
      {
        *a2 = (uint64_t)(v6 + 1);
        uint64_t result = (unsigned char *)sub_100008520(*a3, 1);
        *uint64_t result = 0;
        ++*((_DWORD *)a3 + 2);
        return result;
      }
      if (v7 <= 0x1F)
      {
        int v14 = *(_DWORD *)(v5 + 48);
        if (*(unsigned char *)*a2)
        {
          if (v14) {
            sub_100062428();
          }
          unsigned int v15 = &v6[-a2[1]];
          int v16 = 12;
        }
        else
        {
          if (v14) {
            sub_1000623FC();
          }
          unsigned int v15 = &v6[-a2[1]];
          int v16 = 11;
        }
        *(_DWORD *)(v5 + 48) = v16;
        goto LABEL_25;
      }
      *a2 = (uint64_t)(v6 + 1);
      char v8 = *v6;
LABEL_6:
      uint64_t result = (unsigned char *)sub_100008520(*a3, 1);
      *uint64_t result = v8;
      ++*((_DWORD *)a3 + 2);
    }
    uint64_t v9 = a2[1];
    *a2 = (uint64_t)(v6 + 1);
    uint64_t v10 = v6[1];
    char v8 = byte_100064398[v10];
    if (v8)
    {
      *a2 = (uint64_t)(v6 + 2);
      goto LABEL_6;
    }
    uint64_t v11 = (uint64_t)&v6[-v9];
    if (v10 != 117) {
      break;
    }
    *a2 = (uint64_t)(v6 + 2);
    uint64_t v18 = (uint64_t)&v6[-v9];
    uint64_t result = (unsigned char *)sub_100008318(v5, a2, v11);
    if (*(_DWORD *)(v5 + 48)) {
      return result;
    }
    unsigned int v12 = result;
    if (result >> 10 == 54)
    {
      int v17 = (int)result;
      uint64_t v13 = *a2;
      if (*(unsigned char *)*a2 != 92) {
        goto LABEL_31;
      }
      *a2 = v13 + 1;
      if (*(unsigned char *)(v13 + 1) != 117) {
        goto LABEL_31;
      }
      *a2 = v13 + 2;
      uint64_t result = (unsigned char *)sub_100008318(v5, a2, v18);
      if (*(_DWORD *)(v5 + 48)) {
        return result;
      }
      if ((result - 57344) <= 0xFFFFFBFF)
      {
LABEL_31:
        *(_DWORD *)(v5 + 48) = 9;
        unsigned int v15 = (char *)v18;
LABEL_25:
        *(void *)(v5 + 56) = v15;
        return result;
      }
      unsigned int v12 = ((result - 56320) | ((v17 << 10) - 56623104)) + 0x10000;
    }
    uint64_t result = sub_1000083BC(a3, v12);
  }
  if (*(_DWORD *)(v5 + 48)) {
    sub_100062454();
  }
  *(_DWORD *)(v5 + 48) = 10;
  *(void *)(v5 + 56) = v11;
  return result;
}

uint64_t sub_100008270(unsigned int *a1)
{
  uint64_t v1 = *(void *)a1;
  unint64_t v2 = a1[2];
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (v3 - *(void *)(*(void *)a1 + 16) < v2) {
    sub_100062110();
  }
  uint64_t result = v3 - v2;
  *(void *)(v1 + 24) = v3 - v2;
  return result;
}

uint64_t sub_1000082A8(uint64_t a1, void *a2, int a3, int a4)
{
  char v8 = (void *)sub_100007EB4((void *)(a1 + 40), 1);
  if (a4)
  {
    uint64_t v9 = *(size_t **)(a1 + 24);
    if (!v9) {
      sub_100062480();
    }
    sub_100008654(v8, a2, a3, v9);
  }
  else
  {
    sub_100008840((uint64_t)v8, a2, a3);
  }
  return 1;
}

uint64_t sub_100008318(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  LODWORD(result) = 0;
  uint64_t v5 = *a2;
  while (1)
  {
    int v6 = *(char *)(v5 + v4);
    if ((v6 - 48) >= 0xA) {
      break;
    }
    int v7 = -48;
LABEL_8:
    uint64_t result = (v6 + 16 * result + v7);
    *a2 = v5 + v4++ + 1;
    if (v4 == 4) {
      return result;
    }
  }
  if (*(unsigned __int8 *)(v5 + v4) - 65 < 6)
  {
    int v7 = -55;
    goto LABEL_8;
  }
  if (*(unsigned __int8 *)(v5 + v4) - 97 < 6)
  {
    int v7 = -87;
    goto LABEL_8;
  }
  if (*(_DWORD *)(v3 + 48)) {
    sub_1000624AC();
  }
  uint64_t result = 0;
  *(_DWORD *)(v3 + 48) = 8;
  *(void *)(v3 + 56) = a3;
  return result;
}

unsigned char *sub_1000083BC(void **a1, unsigned int a2)
{
  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (HIWORD(a2))
      {
        if (a2 >= 0x110000) {
          sub_1000624D8();
        }
        *(unsigned char *)sub_100008520(*a1, 1) = (a2 >> 18) | 0xF0;
        int v6 = a1 + 1;
        ++*((_DWORD *)a1 + 2);
        *(unsigned char *)sub_100008520(*a1, 1) = (a2 >> 12) & 0x3F | 0x80;
        ++*((_DWORD *)a1 + 2);
      }
      else
      {
        *(unsigned char *)sub_100008520(*a1, 1) = (a2 >> 12) | 0xE0;
        int v6 = a1 + 1;
        ++*((_DWORD *)a1 + 2);
      }
      *(unsigned char *)sub_100008520(*a1, 1) = (a2 >> 6) & 0x3F | 0x80;
      ++*v6;
    }
    else
    {
      *(unsigned char *)sub_100008520(*a1, 1) = (a2 >> 6) | 0xC0;
      int v6 = a1 + 1;
      ++*((_DWORD *)a1 + 2);
    }
    uint64_t result = (unsigned char *)sub_100008520(*a1, 1);
    *uint64_t result = a2 & 0x3F | 0x80;
    uint64_t v4 = v6;
  }
  else
  {
    uint64_t v4 = a1 + 1;
    uint64_t result = (unsigned char *)sub_100008520(*a1, 1);
    *uint64_t result = a2;
  }
  ++*v4;
  return result;
}

uint64_t sub_100008520(void *a1, uint64_t a2)
{
  if (a1[4] - a1[3] < a2) {
    sub_1000085BC(a1, a2);
  }
  return sub_10000857C((uint64_t)a1, a2);
}

uint64_t sub_10000857C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000623A4();
  }
  if (*(void *)(a1 + 32) - v2 < a2) {
    sub_1000623D0();
  }
  *(void *)(a1 + 24) = v2 + a2;
  return v2;
}

char *sub_1000085BC(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    unint64_t v3 = a1[4] - v2 + ((unint64_t)(a1[4] - v2 + 1) >> 1);
  }
  else
  {
    if (!*a1) {
      operator new();
    }
    uint64_t v2 = 0;
    unint64_t v3 = a1[5];
  }
  size_t v4 = a1[3] + a2 - v2;
  if (v3 <= v4) {
    size_t v5 = v4;
  }
  else {
    size_t v5 = v3;
  }
  return sub_100007FFC(a1, v5);
}

void *sub_100008654(void *__dst, void *a2, int a3, size_t *a4)
{
  *long long __dst = 0;
  __dst[1] = 0;
  __dst[2] = 0;
  size_t v5 = &unk_10006DFE2;
  if (a2) {
    size_t v5 = a2;
  }
  int v7 = v5;
  int v8 = a3;
  if (!a2 && a3) {
    sub_100062504();
  }
  sub_1000086BC(__dst, (uint64_t)&v7, a4);
  return __dst;
}

void *sub_1000086BC(_WORD *__dst, uint64_t a2, size_t *a3)
{
  size_t v4 = __dst;
  if (*(_DWORD *)(a2 + 8) > 0x15u)
  {
    __dst[11] = 3077;
    *(_DWORD *)long long __dst = *(_DWORD *)(a2 + 8);
    uint64_t v5 = sub_100008748(a3, (*(_DWORD *)(a2 + 8) + 1));
    v4[1] = v5;
    size_t v4 = (void *)v5;
  }
  else
  {
    __dst[11] = 7173;
    *((unsigned char *)__dst + 21) = 21 - *(unsigned char *)(a2 + 8);
  }
  uint64_t result = memcpy(v4, *(const void **)a2, *(unsigned int *)(a2 + 8));
  *((unsigned char *)v4 + *(unsigned int *)(a2 + 8)) = 0;
  return result;
}

uint64_t sub_100008748(size_t *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  size_t v4 = (void *)*a1;
  if (*a1)
  {
    uint64_t v5 = v4[1];
    uint64_t v6 = v5 + v3;
    if (v5 + v3 <= *v4) {
      goto LABEL_9;
    }
  }
  if (a1[1] <= v3) {
    unint64_t v7 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else {
    unint64_t v7 = a1[1];
  }
  if (sub_1000087D0(a1, v7))
  {
    size_t v4 = (void *)*a1;
    uint64_t v5 = *(void *)(*a1 + 8);
    uint64_t v6 = v5 + v3;
LABEL_9:
    uint64_t result = (uint64_t)v4 + v5 + 24;
    v4[1] = v6;
    return result;
  }
  return 0;
}

size_t sub_1000087D0(size_t *a1, uint64_t a2)
{
  if (!a1[3]) {
    operator new();
  }
  size_t result = a2 + 24;
  if (a2 != -24)
  {
    size_t result = (size_t)malloc_type_malloc(result, 0x9245A057uLL);
    if (result)
    {
      *(void *)size_t result = a2;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = *a1;
      *a1 = result;
      return 1;
    }
  }
  return result;
}

uint64_t sub_100008840(uint64_t result, void *a2, int a3)
{
  *(void *)size_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  if (!a2 && a3) {
    __assert_rtn("GenericStringRef", "document.h", 322, "str != 0 || len == 0u");
  }
  unint64_t v3 = &unk_10006DFE2;
  *(_WORD *)(result + 22) = 1029;
  if (a2) {
    unint64_t v3 = a2;
  }
  *(void *)(result + 8) = v3;
  *(_DWORD *)size_t result = a3;
  return result;
}

uint64_t sub_1000088AC(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = sub_100008950((uint64_t)(a1 + 5), a2);
  uint64_t v6 = a1[8];
  if ((unint64_t)(v6 - a1[7]) <= 0x17) {
    sub_100062530();
  }
  unint64_t v7 = (const void *)v5;
  int v8 = (size_t *)a1[3];
  if (!v8) {
    sub_100062480();
  }
  *(_WORD *)(v6 - 2) = 3;
  if (a2)
  {
    uint64_t v9 = 48 * v4;
    uint64_t v10 = (void *)sub_100008748(v8, v9);
    *(void *)(v6 - 16) = v10;
    memcpy(v10, v7, v9);
  }
  else
  {
    *(void *)(v6 - 16) = 0;
  }
  *(_DWORD *)(v6 - 24) = a2;
  *(_DWORD *)(v6 - 20) = a2;
  return 1;
}

uint64_t sub_100008950(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 - *(void *)(a1 + 16) < (unint64_t)(48 * a2)) {
    sub_100062110();
  }
  uint64_t v3 = v2 - 48 * a2;
  *(void *)(a1 + 24) = v3;
  return v3;
}

uint64_t sub_10000898C(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = sub_100006E40((uint64_t)(a1 + 5), a2);
  uint64_t v6 = a1[8];
  if ((unint64_t)(v6 - a1[7]) <= 0x17) {
    sub_100062530();
  }
  unint64_t v7 = (const void *)v5;
  int v8 = (size_t *)a1[3];
  if (!v8) {
    sub_100062480();
  }
  *(_WORD *)(v6 - 2) = 4;
  if (a2)
  {
    uint64_t v9 = 24 * v4;
    uint64_t v10 = (void *)sub_100008748(v8, v9);
    *(void *)(v6 - 16) = v10;
    memcpy(v10, v7, v9);
  }
  else
  {
    *(void *)(v6 - 16) = 0;
  }
  *(_DWORD *)(v6 - 24) = a2;
  *(_DWORD *)(v6 - 20) = a2;
  return 1;
}

uint64_t sub_100008A30(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_100007EB4((void *)(a1 + 40), 1);
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)uint64_t v3 = a2;
  *(_WORD *)(v3 + 22) = 150;
  if ((a2 & 0x8000000000000000) != 0)
  {
    if (a2 >= 0xFFFFFFFF80000000)
    {
      __int16 v5 = 182;
      goto LABEL_9;
    }
  }
  else
  {
    if (HIDWORD(a2)) {
      __int16 v4 = 406;
    }
    else {
      __int16 v4 = 470;
    }
    *(_WORD *)(v3 + 22) = v4;
    if (!(a2 >> 31))
    {
      __int16 v5 = v4 | 0x20;
LABEL_9:
      *(_WORD *)(v3 + 22) = v5;
    }
  }
  return 1;
}

uint64_t sub_100008AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100007EB4((void *)(a1 + 40), 1);
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)uint64_t v3 = a2;
  if (a2 < 0) {
    __int16 v4 = 278;
  }
  else {
    __int16 v4 = 406;
  }
  *(_WORD *)(v3 + 22) = v4;
  if (!HIDWORD(a2))
  {
    *(_WORD *)(v3 + 22) = v4 | 0x40;
    if (!((unint64_t)a2 >> 31)) {
      *(_WORD *)(v3 + 22) = v4 | 0x60;
    }
  }
  return 1;
}

void *sub_100008B1C(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1 + 40);
  *(void *)(v2 + 64) = *(void *)(v2 + 56);
  sub_100008B58(v3);
  return a1;
}

void sub_100008B58(void *a1)
{
  __int16 v4 = (unsigned char *)a1[2];
  uint64_t v3 = (unsigned char *)a1[3];
  __int16 v5 = a1 + 2;
  if (v3 == v4)
  {
    free(v3);
    *__int16 v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  else
  {
    sub_100007FFC(a1, v3 - v4);
  }
}

uint64_t sub_100008BB4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100008BE8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    sub_100008C30(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100008C30(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    operator delete();
  }
  return a1;
}

void *sub_100008C74(void **a1)
{
  uint64_t result = *a1;
  if (result)
  {
    while (result != a1[2])
    {
      uint64_t v3 = (void *)result[2];
      free(result);
      *a1 = v3;
      uint64_t result = v3;
      if (!v3) {
        return result;
      }
    }
    result[1] = 0;
  }
  return result;
}

uint64_t sub_100008CC4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_100003524();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t sub_100008D4C(uint64_t a1, const void **a2)
{
  uint64_t v2 = *sub_1000066CC(a1, &v4, a2);
  if (!v2) {
    sub_100008E4C("map::at:  key not found");
  }
  return v2 + 56;
}

char *sub_100008D8C(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v11 = __dst;
  unsigned int v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_100003600(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      unsigned int v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_100003A94((uint64_t)v9);
  return v4;
}

void sub_100008E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100008E4C(const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100008EA8(exception, a1);
}

void sub_100008E94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100008EA8(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_100008EDC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100008F30((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100008F30(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_100006AE0(v4);
    }
  }
  a1[1] = v2;
}

void sub_100008F7C(uint64_t a1)
{
  sub_100003470(v4, "diff");
  sub_100003470(__p, "Compare two CAT files.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100008FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100009028(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_10003B18C())
  {
    sub_10003B17C(a2);
    sub_100003470(&__p, "\n  <EXECUTABLE> <COMMAND> <catfile1> <catfile2>\n\n      Compare two CAT files by loading into memory and comparing the in-memory representation.\n      This comparison will therefore ignore whitespace differences between the two files.\n");
    sub_100003470(__dst, "diff");
    sub_10003B430();
    if (SHIBYTE(v62) < 0) {
      operator delete(__dst[0].__locale_);
    }
    if (SHIBYTE(v52) < 0) {
      operator delete(__p);
    }
    return 0;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= 3)
  {
    uint64_t v4 = sub_1000042E0(&std::cout, (uint64_t)"Error: insufficient arguments specified for catutil diff", 56);
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    char v5 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  int v8 = (siri::dialogengine::Context *)sub_100009A74();
  uint64_t v9 = sub_100009A74();
  uint64_t v6 = 0;
  if (v8)
  {
    char v10 = (siri::dialogengine::Context *)v9;
    if (v9)
    {
      siri::dialogengine::Context::GetFile((uint64_t *)&__p, v8);
      if (v51) {
        sub_100006AE0(v51);
      }
      siri::dialogengine::Context::GetFile((uint64_t *)&__p, v10);
      if (v51) {
        sub_100006AE0(v51);
      }
      int v11 = siri::dialogengine::File::operator!=();
      sub_100009D48(v8, (uint64_t)&v59);
      sub_100009D48(v10, (uint64_t)&v57);
      long long __p = &v51;
      v51 = 0;
      v54[0] = 0;
      v54[1] = 0;
      uint64_t v52 = 0;
      v53 = v54;
      v56[0] = 0;
      v56[1] = 0;
      v55 = v56;
      unsigned int v12 = v59;
      if (v59 != v60)
      {
        do
        {
          if (*((char *)v12 + 55) < 0)
          {
            sub_100003600(__dst, v12[4], (unint64_t)v12[5]);
          }
          else
          {
            *(_OWORD *)&__dst[0].__locale_ = *((_OWORD *)v12 + 2);
            v62 = v12[6];
          }
          v63 = v12[7];
          uint64_t v13 = (char **)sub_10000A230((uint64_t)&v57, (const void **)&__dst[0].__locale_);
          int v14 = (uint64_t **)&v53;
          if (v58 == v13 || (v15 = siri::dialogengine::Dialog::operator!=(), int v14 = (uint64_t **)&v55, v15)) {
            sub_10000A2C0(v14, (const void **)&__dst[0].__locale_, (uint64_t)__dst);
          }
          if (SHIBYTE(v62) < 0) {
            operator delete(__dst[0].__locale_);
          }
          int v16 = v12[1];
          if (v16)
          {
            do
            {
              int v17 = (char **)v16;
              int v16 = *(char **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              int v17 = (char **)v12[2];
              BOOL v18 = *v17 == (char *)v12;
              unsigned int v12 = v17;
            }
            while (!v18);
          }
          unsigned int v12 = v17;
        }
        while (v17 != v60);
      }
      unsigned int v19 = v57;
      if (v57 != v58)
      {
        do
        {
          if (*((char *)v19 + 55) < 0)
          {
            sub_100003600(__dst, v19[4], (unint64_t)v19[5]);
          }
          else
          {
            *(_OWORD *)&__dst[0].__locale_ = *((_OWORD *)v19 + 2);
            v62 = v19[6];
          }
          v63 = v19[7];
          if (v60 == (char **)sub_10000A230((uint64_t)&v59, (const void **)&__dst[0].__locale_)) {
            sub_10000A2C0((uint64_t **)&__p, (const void **)&__dst[0].__locale_, (uint64_t)__dst);
          }
          if (SHIBYTE(v62) < 0) {
            operator delete(__dst[0].__locale_);
          }
          unsigned int v20 = v19[1];
          if (v20)
          {
            do
            {
              uint64_t v21 = (char **)v20;
              unsigned int v20 = *(char **)v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              uint64_t v21 = (char **)v19[2];
              BOOL v18 = *v21 == (char *)v19;
              unsigned int v19 = v21;
            }
            while (!v18);
          }
          unsigned int v19 = v21;
        }
        while (v21 != v58);
      }
      if (v11)
      {
        int v22 = sub_1000042E0(&std::cout, (uint64_t)"CAT files are different.", 24);
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
        uint64_t v23 = std::locale::use_facet(__dst, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(__dst);
        std::ostream::put();
        std::ostream::flush();
        int v24 = (char *)__p;
        if (__p != &v51)
        {
          do
          {
            if (v24[55] < 0)
            {
              sub_100003600(__dst, *((void **)v24 + 4), *((void *)v24 + 5));
            }
            else
            {
              *(_OWORD *)&__dst[0].__locale_ = *((_OWORD *)v24 + 2);
              v62 = (char *)*((void *)v24 + 6);
            }
            std::operator+<char>();
            if ((v49 & 0x80u) == 0) {
              int v25 = &v47;
            }
            else {
              int v25 = v47;
            }
            if ((v49 & 0x80u) == 0) {
              uint64_t v26 = v49;
            }
            else {
              uint64_t v26 = v48;
            }
            int v27 = sub_1000042E0(&std::cout, (uint64_t)v25, v26);
            std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
            v28 = std::locale::use_facet(&v64, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
            std::locale::~locale(&v64);
            std::ostream::put();
            std::ostream::flush();
            if ((char)v49 < 0) {
              operator delete(v47);
            }
            if (SHIBYTE(v62) < 0) {
              operator delete(__dst[0].__locale_);
            }
            int v29 = (char *)*((void *)v24 + 1);
            if (v29)
            {
              do
              {
                int v30 = (char **)v29;
                int v29 = *(char **)v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                int v30 = (char **)*((void *)v24 + 2);
                BOOL v18 = *v30 == v24;
                int v24 = (char *)v30;
              }
              while (!v18);
            }
            int v24 = (char *)v30;
          }
          while (v30 != (char **)&v51);
        }
        int v31 = v55;
        if (v55 != v56)
        {
          do
          {
            if (*((char *)v31 + 55) < 0)
            {
              sub_100003600(__dst, v31[4], (unint64_t)v31[5]);
            }
            else
            {
              *(_OWORD *)&__dst[0].__locale_ = *((_OWORD *)v31 + 2);
              v62 = v31[6];
            }
            std::operator+<char>();
            if ((v49 & 0x80u) == 0) {
              int v32 = &v47;
            }
            else {
              int v32 = v47;
            }
            if ((v49 & 0x80u) == 0) {
              uint64_t v33 = v49;
            }
            else {
              uint64_t v33 = v48;
            }
            unsigned int v34 = sub_1000042E0(&std::cout, (uint64_t)v32, v33);
            std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
            double v35 = std::locale::use_facet(&v64, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
            std::locale::~locale(&v64);
            std::ostream::put();
            std::ostream::flush();
            if ((char)v49 < 0) {
              operator delete(v47);
            }
            if (SHIBYTE(v62) < 0) {
              operator delete(__dst[0].__locale_);
            }
            unsigned int v36 = v31[1];
            if (v36)
            {
              do
              {
                double v37 = (char **)v36;
                unsigned int v36 = *(char **)v36;
              }
              while (v36);
            }
            else
            {
              do
              {
                double v37 = (char **)v31[2];
                BOOL v18 = *v37 == (char *)v31;
                int v31 = v37;
              }
              while (!v18);
            }
            int v31 = v37;
          }
          while (v37 != v56);
        }
        __int16 v38 = v53;
        if (v53 != v54)
        {
          do
          {
            if (*((char *)v38 + 55) < 0)
            {
              sub_100003600(__dst, v38[4], (unint64_t)v38[5]);
            }
            else
            {
              *(_OWORD *)&__dst[0].__locale_ = *((_OWORD *)v38 + 2);
              v62 = v38[6];
            }
            std::operator+<char>();
            if ((v49 & 0x80u) == 0) {
              uint64_t v39 = &v47;
            }
            else {
              uint64_t v39 = v47;
            }
            if ((v49 & 0x80u) == 0) {
              uint64_t v40 = v49;
            }
            else {
              uint64_t v40 = v48;
            }
            v41 = sub_1000042E0(&std::cout, (uint64_t)v39, v40);
            std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
            int v42 = std::locale::use_facet(&v64, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
            std::locale::~locale(&v64);
            std::ostream::put();
            std::ostream::flush();
            if ((char)v49 < 0) {
              operator delete(v47);
            }
            if (SHIBYTE(v62) < 0) {
              operator delete(__dst[0].__locale_);
            }
            uint64_t v43 = v38[1];
            if (v43)
            {
              do
              {
                v44 = (char **)v43;
                uint64_t v43 = *(char **)v43;
              }
              while (v43);
            }
            else
            {
              do
              {
                v44 = (char **)v38[2];
                BOOL v18 = *v44 == (char *)v38;
                __int16 v38 = v44;
              }
              while (!v18);
            }
            __int16 v38 = v44;
          }
          while (v44 != v54);
        }
      }
      else
      {
        BOOL v45 = sub_1000042E0(&std::cout, (uint64_t)"CAT files are equal.", 20);
        std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
        int v46 = std::locale::use_facet(__dst, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
        std::locale::~locale(__dst);
        std::ostream::put();
        std::ostream::flush();
      }
      uint64_t v6 = v11 ^ 1u;
      sub_10000A3E0((uint64_t)&v55, v56[0]);
      sub_10000A3E0((uint64_t)&v53, v54[0]);
      sub_10000A3E0((uint64_t)&__p, (char *)v51);
      sub_10000A3E0((uint64_t)&v57, v58[0]);
      sub_10000A3E0((uint64_t)&v59, v60[0]);
    }
  }
  return v6;
}

void sub_100009978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::locale a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,char *a32,uint64_t a33,char a34,char *a35)
{
  std::locale::~locale((std::locale *)(v35 - 128));
  sub_100009E30((char **)&a19);
  sub_10000A3E0((uint64_t)&a31, a32);
  sub_10000A3E0((uint64_t)&a34, a35);
  _Unwind_Resume(a1);
}

uint64_t sub_100009A74()
{
  if (siri::dialogengine::FileExists()) {
    operator new();
  }
  std::operator+<char>();
  if ((v7 & 0x80u) == 0) {
    v0 = __p;
  }
  else {
    v0 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v1 = v7;
  }
  else {
    uint64_t v1 = (uint64_t)__p[1];
  }
  uint64_t v2 = sub_1000042E0(&std::cout, (uint64_t)v0, v1);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  char v3 = std::locale::use_facet(&v5, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v5);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_100009CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, void *__p, std::__shared_weak_count *a13, int a14, __int16 a15, char a16, char a17)
{
  if (a13) {
    sub_100006AE0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_100009D48(siri::dialogengine::Context *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  siri::dialogengine::Context::GetFile((uint64_t *)&v8, a1);
  siri::dialogengine::File::GetRoot((uint64_t *)&v6, v8);
  sub_100009E78(a1, v6, (uint64_t **)a2);
  if (v7) {
    sub_100006AE0(v7);
  }
  Fallbacuint64_t k = (siri::dialogengine::Group *)siri::dialogengine::File::GetFallback(v8);
  sub_100009E78(a1, Fallback, (uint64_t **)a2);
  Phrases = (siri::dialogengine::Group *)siri::dialogengine::File::GetPhrases(v8);
  sub_100009E78(a1, Phrases, (uint64_t **)a2);
  if (v9) {
    sub_100006AE0(v9);
  }
}

void sub_100009DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_100006AE0(a10);
  }
  if (a12) {
    sub_100006AE0(a12);
  }
  sub_10000A3E0(v12, *(char **)(v12 + 8));
  _Unwind_Resume(a1);
}

char **sub_100009E30(char **a1)
{
  return a1;
}

void sub_100009E78(siri::dialogengine::Context *a1, siri::dialogengine::Group *a2, uint64_t **a3)
{
  if (a2)
  {
    siri::dialogengine::Group::GetNodes(&v16, a2);
    uint64_t v6 = v16;
    for (uint64_t i = v17; v6 != i; v6 += 16)
    {
      int v8 = *(const void **)v6;
      unsigned __int8 v7 = *(std::__shared_weak_count **)(v6 + 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v8)
      {
        if (v9)
        {
          uint64_t v10 = (uint64_t)v9;
          siri::dialogengine::Context::GetFile((uint64_t *)&v12, a1);
          siri::dialogengine::File::GetOrCreateId();
          if (v13) {
            sub_100006AE0(v13);
          }
          uint64_t v12 = __p;
          sub_10000A090(a3, (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v12)[7] = v10;
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }
        if (v11) {
          sub_100009E78(a1, v11, a3);
        }
      }
      if (v7) {
        sub_100006AE0(v7);
      }
    }
    __p[0] = &v16;
    sub_100008EDC((void ***)__p);
  }
}

void sub_10000A038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v18) {
    sub_100006AE0(v18);
  }
  long long __p = &a18;
  sub_100008EDC((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_10000A090(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_1000066CC((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_10000A128((uint64_t)a1, a4, (uint64_t)&v8);
    sub_100006674(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_10000A128@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_100003600(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10000A1B4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10000A1D0(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10000A1D0(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_10000A230(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = sub_10000676C(v5, (const void **)(v3 + 32), a2);
    int v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      int v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_10000676C(v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

uint64_t *sub_10000A2C0(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)sub_1000066CC((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    sub_10000A340((uint64_t)a1, a3, (uint64_t)&v7);
    sub_100006674(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *sub_10000A340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_100003600(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10000A3C4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10000A1D0(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10000A3E0(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10000A3E0(a1, *(void *)a2);
    sub_10000A3E0(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void sub_10000A444(uint64_t a1)
{
  sub_100003470(v4, "params");
  sub_100003470(__p, "Returns a list of all parameters used by the specified CAT file.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10000A4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000A4F0(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_10003B18C())
  {
    sub_10003B17C(a2);
    sub_100003470(&__p, "\n  <EXECUTABLE> <COMMAND> --templateDir <dir> [--catId <id>] [--visualCatId <id>] [--xml] [--json]\n          [--excludeComputed] [--includeValueFromCat] [--debug]\n\n      Returns a list of all of the parameters used by the specified CAT file, including\n      parameters used by dialog CATs referenced by a visual CAT.\n\n      The optional --xml and --json arguments output the information in those formats,\n      to make it easier for other tooling to ingest the information programmatically.\n\n      The --excludeComputed option will exclude all computed parameters.\n      The --includeValueFromCat option will include Visual CAT parameters with this attribute.\n");
    sub_100003470(&v48, "params");
    sub_10003B430();
    if (SHIBYTE(v50) < 0) {
      operator delete(v48);
    }
    if (v47 < 0) {
      operator delete(__p);
    }
    return 0;
  }
  sub_100003470(&__p, "--debug");
  uint64_t v6 = (siri::dialogengine::Log *)siri::dialogengine::OptionExists();
  if (v47 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::Log::SetOutputToStdout(v6, v5);
  sub_100003470(&v48, "--templateDir");
  siri::dialogengine::GetOption();
  siri::dialogengine::ExpandPath();
  if (v47 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete(v48);
  }
  sub_100003470(&__p, "--catId");
  siri::dialogengine::GetOption();
  if (v47 < 0) {
    operator delete(__p);
  }
  sub_100003470(&__p, "--visualCatId");
  siri::dialogengine::GetOption();
  if (v47 < 0) {
    operator delete(__p);
  }
  sub_100003470(&__p, "--excludeComputed");
  int v7 = siri::dialogengine::OptionExists();
  if (v47 < 0) {
    operator delete(__p);
  }
  sub_100003470(&__p, "--includeValueFromCat");
  int v8 = siri::dialogengine::OptionExists();
  if (v47 < 0) {
    operator delete(__p);
  }
  uint64_t v9 = v63;
  if ((v63 & 0x80u) != 0) {
    uint64_t v9 = v62;
  }
  BOOL v10 = v9 != 0;
  if (!v9)
  {
    int v11 = sub_1000042E0(&std::cerr, (uint64_t)"Error: The option \"--templateDir\" is required", 45);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    uint64_t v12 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v13 = v60;
  if ((v60 & 0x80u) != 0) {
    uint64_t v13 = v59;
  }
  uint64_t v14 = v57;
  if ((v57 & 0x80u) != 0) {
    uint64_t v14 = v56;
  }
  if (!v14)
  {
    if (!v13)
    {
      int v42 = sub_1000042E0(&std::cerr, (uint64_t)"Error: One of \"--catId\" or \"--visualCatId\" is required", 54);
      std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(*v42 - 24)));
      uint64_t v43 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put();
      std::ostream::flush();
      int v17 = 0;
      BOOL v10 = 0;
      LODWORD(v13) = 1;
LABEL_36:
      int v18 = 1;
      if (!v8) {
        goto LABEL_42;
      }
LABEL_39:
      if ((v13 | v18) == 1)
      {
        unsigned int v19 = sub_1000042E0(&std::cerr, (uint64_t)"Warning: The option \"--includeValueFromCat\" should only be used with \"--visualCatId\"", 84);
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
        unsigned int v20 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
      }
      else
      {
        int v17 = 1;
      }
      goto LABEL_42;
    }
LABEL_35:
    LODWORD(v13) = 0;
    int v17 = 0;
    goto LABEL_36;
  }
  if (v13)
  {
    char v15 = sub_1000042E0(&std::cerr, (uint64_t)"Warning: Both \"--catId\" and \"--visualCatId\" are specified; The option \"--visualCatId\" will be ignored",
            101);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    uint64_t v16 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_35;
  }
  int v18 = 0;
  int v17 = 1;
  if (v8) {
    goto LABEL_39;
  }
LABEL_42:
  sub_100003470(&__p, "--json");
  int v21 = siri::dialogengine::OptionExists();
  if (v47 < 0) {
    operator delete(__p);
  }
  sub_100003470(&__p, "--xml");
  int v22 = siri::dialogengine::OptionExists();
  if (v47 < 0) {
    operator delete(__p);
  }
  int v23 = v22 & v21;
  if (v22) {
    int v24 = 2;
  }
  else {
    int v24 = v21;
  }
  if (v23 == 1)
  {
    int v25 = sub_1000042E0(&std::cerr, (uint64_t)"Warning: Both \"--json\" and \"--xml\" are specified; The option \"--xml\" will be ignored",
            84);
    std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
    uint64_t v26 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    int v24 = 1;
  }
  if (v10)
  {
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    unsigned __int8 v49 = 0;
    uint64_t v50 = 0;
    uint64_t v48 = &v49;
    char v51 = 0;
    siri::dialogengine::GetTemplateDirs();
    if (v17) {
      char ParamsForVisualCat = siri::dialogengine::GetParamsForVisualCat();
    }
    else {
      char ParamsForVisualCat = siri::dialogengine::GetParamsForDialogCat();
    }
    char v28 = ParamsForVisualCat;
    v44[0] = &__p;
    sub_10000C39C(v44);
    if (v28)
    {
      if (v7)
      {
        siri::dialogengine::AllComputedParameterNames((uint64_t *)&__p, v29);
        int v30 = (char *)__p;
        if (__p != &v46)
        {
          do
          {
            siri::dialogengine::ParameterCollection::RemoveParameter();
            int v31 = (char *)*((void *)v30 + 1);
            if (v31)
            {
              do
              {
                int v32 = (char **)v31;
                int v31 = *(char **)v31;
              }
              while (v31);
            }
            else
            {
              do
              {
                int v32 = (char **)*((void *)v30 + 2);
                BOOL v33 = *v32 == v30;
                int v30 = (char *)v32;
              }
              while (!v33);
            }
            int v30 = (char *)v32;
          }
          while (v32 != &v46);
        }
        sub_10000A3E0((uint64_t)&__p, v46);
      }
      siri::dialogengine::Context::Context((siri::dialogengine::Context *)&__p);
      siri::dialogengine::ParameterCollection::GetUniqueParameters((siri::dialogengine::ParameterCollection *)&v48, (siri::dialogengine::Context *)&__p);
      sub_10000AF30(v44, v24);
      sub_100006A84((uint64_t)v44, v44[1]);
      siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&__p);
      uint64_t v3 = 1;
    }
    else
    {
      uint64_t v34 = v52;
      for (uint64_t i = v53; v34 != i; v34 += 24)
      {
        unsigned int v36 = sub_1000042E0(&std::cerr, (uint64_t)"Error: ", 7);
        int v37 = *(char *)(v34 + 23);
        if (v37 >= 0) {
          uint64_t v38 = v34;
        }
        else {
          uint64_t v38 = *(void *)v34;
        }
        if (v37 >= 0) {
          uint64_t v39 = *(unsigned __int8 *)(v34 + 23);
        }
        else {
          uint64_t v39 = *(void *)(v34 + 8);
        }
        uint64_t v40 = sub_1000042E0(v36, v38, v39);
        std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(*v40 - 24)));
        v41 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
      }
      uint64_t v3 = 0;
    }
    sub_10000C26C((uint64_t)&v48, v49);
    long long __p = &v52;
    sub_100003B14((void ***)&__p);
  }
  else
  {
    uint64_t v3 = 0;
  }
  if ((char)v57 < 0) {
    operator delete(v55);
  }
  if ((char)v60 < 0) {
    operator delete(v58);
  }
  if ((char)v63 < 0) {
    operator delete(v61);
  }
  return v3;
}

void sub_10000AD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_10000C26C(v17 - 192, *(void **)(v17 - 184));
  *(void *)(v17 - 192) = v17 - 160;
  sub_100003B14((void ***)(v17 - 192));
  if (*(char *)(v17 - 113) < 0) {
    operator delete(*(void **)(v17 - 136));
  }
  if (*(char *)(v17 - 89) < 0) {
    operator delete(*(void **)(v17 - 112));
  }
  if (*(char *)(v17 - 65) < 0) {
    operator delete(*(void **)(v17 - 88));
  }
  _Unwind_Resume(a1);
}

void sub_10000AF30(void *a1, int a2)
{
  unint64_t v52 = 0;
  unint64_t v53 = 0;
  unint64_t v54 = 0;
  uint64_t v4 = a1 + 1;
  BOOL v5 = (void *)*a1;
  if ((void *)*a1 == a1 + 1)
  {
    unint64_t v6 = 0;
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    do
    {
      int v7 = (long long *)(v5 + 4);
      if (v6 >= v54)
      {
        unint64_t v6 = sub_100003F94((uint64_t *)&v52, v7);
      }
      else
      {
        if (*((char *)v5 + 55) < 0)
        {
          sub_100003600((unsigned char *)v6, (void *)v5[4], v5[5]);
        }
        else
        {
          long long v8 = *v7;
          *(void *)(v6 + 16) = v5[6];
          *(_OWORD *)unint64_t v6 = v8;
        }
        v6 += 24;
      }
      unint64_t v53 = v6;
      uint64_t v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (void *)v5[2];
          BOOL v11 = *v10 == (void)v5;
          BOOL v5 = v10;
        }
        while (!v11);
      }
      BOOL v5 = v10;
    }
    while (v10 != v4);
    unint64_t v12 = v52;
  }
  unint64_t v13 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v12) >> 3));
  if (v6 == v12) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13;
  }
  sub_10000C49C(v12, v6, v14, 1);
  uint64_t v15 = v52;
  if (v53 != v52)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      uint64_t v18 = sub_10000A230((uint64_t)a1, (const void **)(v15 + v16));
      unsigned int v19 = *(siri::dialogengine::PropertyBase **)(v18 + 56);
      uint64_t v20 = a1[2] - 1;
      if (a2 == 1)
      {
        if (!v17)
        {
          int v27 = sub_1000042E0(&std::cout, (uint64_t)"{", 1);
          std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
          char v28 = std::locale::use_facet(&v49, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
          std::locale::~locale(&v49);
          std::ostream::put();
          std::ostream::flush();
          int v29 = sub_1000042E0(&std::cout, (uint64_t)"  \"parameters\": [", 17);
          std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
          int v30 = std::locale::use_facet(&v49, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
          std::locale::~locale(&v49);
          std::ostream::put();
          std::ostream::flush();
        }
        int v31 = sub_1000042E0(&std::cout, (uint64_t)"    {", 5);
        std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
        int v32 = std::locale::use_facet(&v49, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
        std::locale::~locale(&v49);
        std::ostream::put();
        std::ostream::flush();
        sub_100003470(&v49, "name");
        siri::dialogengine::PropertyBase::GetName((uint64_t *)__p, v19);
        sub_10000BDA8((uint64_t)&v49, (uint64_t)__p, 1);
        if ((char)v48 < 0) {
          operator delete(__p[0]);
        }
        if ((char)v51 < 0) {
          operator delete(v49.__locale_);
        }
        sub_100003470(&v49, "description");
        siri::dialogengine::PropertyBase::GetDescription((uint64_t *)__p, v19);
        sub_10000BDA8((uint64_t)&v49, (uint64_t)__p, 1);
        if ((char)v48 < 0) {
          operator delete(__p[0]);
        }
        if ((char)v51 < 0) {
          operator delete(v49.__locale_);
        }
        sub_100003470(&v49, "semanticConcept");
        siri::dialogengine::ObjectProperty::GetSemanticConcept((uint64_t *)__p, v19);
        sub_10000BDA8((uint64_t)&v49, (uint64_t)__p, 1);
        if ((char)v48 < 0) {
          operator delete(__p[0]);
        }
        if ((char)v51 < 0) {
          operator delete(v49.__locale_);
        }
        sub_100003470(&v49, "deprecated");
        siri::dialogengine::PropertyBase::GetDeprecated((uint64_t *)__p, v19);
        sub_10000BDA8((uint64_t)&v49, (uint64_t)__p, 1);
        if ((char)v48 < 0) {
          operator delete(__p[0]);
        }
        if ((char)v51 < 0) {
          operator delete(v49.__locale_);
        }
        sub_100003470(&v49, "type");
        siri::dialogengine::PropertyBase::GetType((uint64_t *)__p, v19);
        sub_10000BDA8((uint64_t)&v49, (uint64_t)__p, 0);
        if ((char)v48 < 0) {
          operator delete(__p[0]);
        }
        if ((char)v51 < 0) {
          operator delete(v49.__locale_);
        }
        if (v17 == v20)
        {
          BOOL v33 = sub_1000042E0(&std::cout, (uint64_t)"    }", 5);
          std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
          uint64_t v34 = std::locale::use_facet(&v49, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
          std::locale::~locale(&v49);
          std::ostream::put();
          std::ostream::flush();
          uint64_t v35 = sub_1000042E0(&std::cout, (uint64_t)"  ]", 3);
          std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24)));
          unsigned int v36 = std::locale::use_facet(&v49, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
          std::locale::~locale(&v49);
          std::ostream::put();
          std::ostream::flush();
          int v25 = "}";
          uint64_t v26 = 1;
        }
        else
        {
          int v25 = "    },";
          uint64_t v26 = 6;
        }
      }
      else
      {
        if (a2 != 2)
        {
          siri::dialogengine::PropertyBase::GetName((uint64_t *)&v49, *(siri::dialogengine::PropertyBase **)(v18 + 56));
          if ((v51 & 0x80u) == 0) {
            locale = &v49;
          }
          else {
            locale = v49.__locale_;
          }
          if ((v51 & 0x80u) == 0) {
            uint64_t v38 = v51;
          }
          else {
            uint64_t v38 = v50;
          }
          uint64_t v39 = sub_1000042E0(&std::cout, (uint64_t)locale, v38);
          uint64_t v40 = sub_1000042E0(v39, (uint64_t)": ", 2);
          siri::dialogengine::PropertyBase::GetType((uint64_t *)__p, v19);
          if ((v48 & 0x80u) == 0) {
            v41 = __p;
          }
          else {
            v41 = (void **)__p[0];
          }
          if ((v48 & 0x80u) == 0) {
            uint64_t v42 = v48;
          }
          else {
            uint64_t v42 = (uint64_t)__p[1];
          }
          sub_1000042E0(v40, (uint64_t)v41, v42);
          if ((char)v48 < 0) {
            operator delete(__p[0]);
          }
          if ((char)v51 < 0) {
            operator delete(v49.__locale_);
          }
          sub_100003470(&v49, "description");
          siri::dialogengine::PropertyBase::GetDescription((uint64_t *)__p, v19);
          sub_10000C0C4((uint64_t)&v49, (uint64_t)__p);
          if ((char)v48 < 0) {
            operator delete(__p[0]);
          }
          if ((char)v51 < 0) {
            operator delete(v49.__locale_);
          }
          sub_100003470(&v49, "semanticConcept");
          siri::dialogengine::ObjectProperty::GetSemanticConcept((uint64_t *)__p, v19);
          sub_10000C0C4((uint64_t)&v49, (uint64_t)__p);
          if ((char)v48 < 0) {
            operator delete(__p[0]);
          }
          if ((char)v51 < 0) {
            operator delete(v49.__locale_);
          }
          sub_100003470(&v49, "deprecated");
          siri::dialogengine::PropertyBase::GetDeprecated((uint64_t *)__p, v19);
          sub_10000C0C4((uint64_t)&v49, (uint64_t)__p);
          if ((char)v48 < 0) {
            operator delete(__p[0]);
          }
          if ((char)v51 < 0) {
            operator delete(v49.__locale_);
          }
          uint64_t v43 = &std::cout;
          goto LABEL_103;
        }
        if (!v17)
        {
          int v21 = sub_1000042E0(&std::cout, (uint64_t)"<parameters>", 12);
          std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
          int v22 = std::locale::use_facet(&v49, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
          std::locale::~locale(&v49);
          std::ostream::put();
          std::ostream::flush();
        }
        sub_1000042E0(&std::cout, (uint64_t)"  <parameter", 12);
        sub_100003470(&v49, "name");
        siri::dialogengine::PropertyBase::GetName((uint64_t *)__p, v19);
        sub_10000BBC8((uint64_t)&v49, (uint64_t)__p);
        if ((char)v48 < 0) {
          operator delete(__p[0]);
        }
        if ((char)v51 < 0) {
          operator delete(v49.__locale_);
        }
        sub_100003470(&v49, "type");
        siri::dialogengine::PropertyBase::GetType((uint64_t *)__p, v19);
        sub_10000BBC8((uint64_t)&v49, (uint64_t)__p);
        if ((char)v48 < 0) {
          operator delete(__p[0]);
        }
        if ((char)v51 < 0) {
          operator delete(v49.__locale_);
        }
        sub_100003470(&v49, "description");
        siri::dialogengine::PropertyBase::GetDescription((uint64_t *)__p, v19);
        sub_10000BBC8((uint64_t)&v49, (uint64_t)__p);
        if ((char)v48 < 0) {
          operator delete(__p[0]);
        }
        if ((char)v51 < 0) {
          operator delete(v49.__locale_);
        }
        sub_100003470(&v49, "semanticConcept");
        siri::dialogengine::ObjectProperty::GetSemanticConcept((uint64_t *)__p, v19);
        sub_10000BBC8((uint64_t)&v49, (uint64_t)__p);
        if ((char)v48 < 0) {
          operator delete(__p[0]);
        }
        if ((char)v51 < 0) {
          operator delete(v49.__locale_);
        }
        sub_100003470(&v49, "deprecated");
        siri::dialogengine::PropertyBase::GetDeprecated((uint64_t *)__p, v19);
        sub_10000BBC8((uint64_t)&v49, (uint64_t)__p);
        if ((char)v48 < 0) {
          operator delete(__p[0]);
        }
        if ((char)v51 < 0) {
          operator delete(v49.__locale_);
        }
        int v23 = sub_1000042E0(&std::cout, (uint64_t)"/>", 2);
        std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
        int v24 = std::locale::use_facet(&v49, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
        std::locale::~locale(&v49);
        std::ostream::put();
        std::ostream::flush();
        if (v17 != v20) {
          goto LABEL_104;
        }
        int v25 = "</parameters>";
        uint64_t v26 = 13;
      }
      uint64_t v43 = (std::ostream *)sub_1000042E0(&std::cout, (uint64_t)v25, v26);
LABEL_103:
      std::ios_base::getloc((const std::ios_base *)((char *)v43 + (unint64_t)v43->__vftable[-2].~basic_ostream_0));
      v44 = std::locale::use_facet(&v49, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
      std::locale::~locale(&v49);
      std::ostream::put();
      std::ostream::flush();
LABEL_104:
      ++v17;
      uint64_t v15 = v52;
      v16 += 24;
    }
    while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v52) >> 3));
  }
  if (a2 == 1 && !a1[2])
  {
    BOOL v45 = sub_1000042E0(&std::cout, (uint64_t)"{}", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
    int v46 = std::locale::use_facet(&v49, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
    std::locale::~locale(&v49);
    std::ostream::put();
    std::ostream::flush();
  }
  v49.__locale_ = (std::locale::__imp *)&v52;
  sub_100003B14((void ***)&v49);
}

void sub_10000BA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  long long __p = &a22;
  sub_100003B14((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_10000BBC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    std::operator+<char>();
    uint64_t v3 = std::string::append(&v15, "=\"");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::EncodeXmlString();
    if ((v14 & 0x80u) == 0) {
      BOOL v5 = __p;
    }
    else {
      BOOL v5 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      std::string::size_type v6 = v14;
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    int v7 = std::string::append(&v16, (const std::string::value_type *)v5, v6);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = std::string::append(&v17, "\"");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t v19 = v9->__r_.__value_.__r.__words[2];
    long long v18 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v19 >= 0) {
      BOOL v11 = &v18;
    }
    else {
      BOOL v11 = (long long *)v18;
    }
    if (v19 >= 0) {
      uint64_t v12 = HIBYTE(v19);
    }
    else {
      uint64_t v12 = *((void *)&v18 + 1);
    }
    sub_1000042E0(&std::cout, (uint64_t)v11, v12);
    if (SHIBYTE(v19) < 0) {
      operator delete((void *)v18);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
}

void sub_10000BD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000BDA8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    std::operator+<char>();
    BOOL v5 = std::string::append(&v22, "\": \"");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(&v18, "\"");
    sub_100003470(&v16, "\\\"");
    siri::dialogengine::StringReplace();
    if ((v21 & 0x80u) == 0) {
      int v7 = __p;
    }
    else {
      int v7 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      std::string::size_type v8 = v21;
    }
    else {
      std::string::size_type v8 = (std::string::size_type)__p[1];
    }
    uint64_t v9 = std::string::append(&v23, (const std::string::value_type *)v7, v8);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    BOOL v11 = std::string::append(&v24, "\"");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v26 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25[0].__locale_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v26 >= 0) {
      locale = v25;
    }
    else {
      locale = v25[0].__locale_;
    }
    if (v26 >= 0) {
      uint64_t v14 = HIBYTE(v26);
    }
    else {
      uint64_t v14 = (uint64_t)v25[1].__locale_;
    }
    sub_1000042E0(&std::cout, (uint64_t)locale, v14);
    if (SHIBYTE(v26) < 0) {
      operator delete(v25[0].__locale_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v22.__r_.__value_.__l.__data_);
      if (!a3) {
        goto LABEL_31;
      }
    }
    else if (!a3)
    {
LABEL_31:
      std::ios_base::getloc((const std::ios_base *)((char *)&std::cout
                                                  + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0));
      std::string v15 = std::locale::use_facet(v25, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(v25);
      std::ostream::put();
      std::ostream::flush();
      return;
    }
    LOBYTE(v25[0].__locale_) = 44;
    sub_1000042E0(&std::cout, (uint64_t)v25, 1);
    goto LABEL_31;
  }
}

void sub_10000C008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (*(char *)(v38 - 41) < 0) {
    operator delete(*(void **)(v38 - 64));
  }
  if (*(char *)(v38 - 73) < 0) {
    operator delete(*(void **)(v38 - 96));
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000C0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    std::operator+<char>();
    long long v4 = std::string::append(&v15, ": [");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      int v7 = (const std::string::value_type *)a2;
    }
    else {
      int v7 = *(const std::string::value_type **)a2;
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v8 = *(void *)(a2 + 8);
    }
    uint64_t v9 = std::string::append(&v16, v7, v8);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    BOOL v11 = std::string::append(&v17, "])");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v19 = v11->__r_.__value_.__r.__words[2];
    long long v18 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v19 >= 0) {
      unint64_t v13 = &v18;
    }
    else {
      unint64_t v13 = (long long *)v18;
    }
    if (v19 >= 0) {
      uint64_t v14 = HIBYTE(v19);
    }
    else {
      uint64_t v14 = *((void *)&v18 + 1);
    }
    sub_1000042E0(&std::cout, (uint64_t)v13, v14);
    if (SHIBYTE(v19) < 0) {
      operator delete((void *)v18);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
}

void sub_10000C208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000C26C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10000C26C(a1, *a2);
    sub_10000C26C(a1, a2[1]);
    sub_10000C2C8((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10000C2C8(uint64_t a1)
{
  sub_10000C318(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_10000C318(uint64_t a1)
{
  sub_10000C354(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10000C354(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      long long v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        sub_100006AE0(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_10000C39C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        sub_10000C434((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10000C434(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 72);
  sub_100003B14(&v3);
  uint64_t v3 = (void **)(a2 + 48);
  sub_100003B14(&v3);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void sub_10000C49C(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v9 = (long long *)(a2 - 24);
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (sub_10000D044())
                {
                  uint64_t v94 = *(void *)(a1 + 16);
                  long long v85 = *(_OWORD *)a1;
                  long long v30 = *v9;
                  *(void *)(a1 + 16) = *(void *)(a2 - 8);
                  *(_OWORD *)a1 = v30;
                  *(void *)(a2 - 8) = v94;
                  *uint64_t v9 = v85;
                }
                break;
              case 3:
                sub_10000D134((long long *)a1, (long long *)(a1 + 24), v9);
                break;
              case 4:
                sub_10000D570(a1, a1 + 24, a1 + 48, (uint64_t)v9);
                break;
              case 5:
                int v31 = (long long *)(a1 + 24);
                int v32 = (long long *)(a1 + 48);
                uint64_t v33 = (long long *)(a1 + 72);
                sub_10000D570(a1, a1 + 24, a1 + 48, a1 + 72);
                if (sub_10000D044())
                {
                  long long v34 = *v33;
                  uint64_t v35 = *(void *)(a1 + 88);
                  uint64_t v36 = *(void *)(a2 - 8);
                  long long *v33 = *v9;
                  *(void *)(a1 + 88) = v36;
                  *(void *)(a2 - 8) = v35;
                  *uint64_t v9 = v34;
                  if (sub_10000D044())
                  {
                    uint64_t v37 = *(void *)(a1 + 64);
                    long long v38 = *v32;
                    long long *v32 = *v33;
                    *(void *)(a1 + 64) = *(void *)(a1 + 88);
                    long long *v33 = v38;
                    *(void *)(a1 + 88) = v37;
                    if (sub_10000D044())
                    {
                      uint64_t v39 = *(void *)(a1 + 40);
                      long long v40 = *v31;
                      long long *v31 = *v32;
                      *(void *)(a1 + 40) = *(void *)(a1 + 64);
                      long long *v32 = v40;
                      *(void *)(a1 + 64) = v39;
                      if (sub_10000D044())
                      {
                        uint64_t v95 = *(void *)(a1 + 16);
                        long long v86 = *(_OWORD *)a1;
                        *(_OWORD *)a1 = *v31;
                        *(void *)(a1 + 16) = *(void *)(a1 + 40);
                        long long *v31 = v86;
                        *(void *)(a1 + 40) = v95;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            if (a4)
            {
              if (a1 != a2)
              {
                unint64_t v41 = a1 + 24;
                if (a1 + 24 != a2)
                {
                  uint64_t v42 = 0;
                  do
                  {
                    unint64_t v43 = v41;
                    if (sub_10000D044())
                    {
                      uint64_t v96 = *(void *)(v43 + 16);
                      long long v87 = *(_OWORD *)v43;
                      *(void *)(v43 + 8) = 0;
                      *(void *)(v43 + 16) = 0;
                      *(void *)unint64_t v43 = 0;
                      uint64_t v44 = v42;
                      do
                      {
                        uint64_t v45 = a1 + v44;
                        int v46 = (void **)(a1 + v44 + 24);
                        if (*(char *)(a1 + v44 + 47) < 0) {
                          operator delete(*v46);
                        }
                        *(_OWORD *)int v46 = *(_OWORD *)v45;
                        *(void *)(a1 + v44 + 40) = *(void *)(v45 + 16);
                        *(unsigned char *)(v45 + 23) = 0;
                        *(unsigned char *)uint64_t v45 = 0;
                        if (!v44)
                        {
                          uint64_t v48 = a1;
                          goto LABEL_82;
                        }
                        v44 -= 24;
                      }
                      while (sub_10000D044());
                      int v47 = *(char *)(a1 + v44 + 47);
                      uint64_t v48 = a1 + v44 + 24;
                      if (v47 < 0) {
                        operator delete(*(void **)v48);
                      }
LABEL_82:
                      *(void *)(v48 + 16) = v96;
                      *(_OWORD *)uint64_t v48 = v87;
                    }
                    unint64_t v41 = v43 + 24;
                    v42 += 24;
                  }
                  while (v43 + 24 != a2);
                }
              }
            }
            else if (a1 != a2)
            {
              unint64_t v73 = a1 + 24;
              if (a1 + 24 != a2)
              {
                unint64_t v74 = a1 - 24;
                do
                {
                  unint64_t v75 = v73;
                  if (sub_10000D044())
                  {
                    uint64_t v99 = *(void *)(v75 + 16);
                    long long v90 = *(_OWORD *)v75;
                    *(void *)(v75 + 8) = 0;
                    *(void *)(v75 + 16) = 0;
                    *(void *)unint64_t v75 = 0;
                    unint64_t v76 = v74;
                    do
                    {
                      v77 = (void **)(v76 + 48);
                      if (*(char *)(v76 + 71) < 0) {
                        operator delete(*v77);
                      }
                      *(_OWORD *)v77 = *(_OWORD *)(v76 + 24);
                      *(void *)(v76 + 64) = *(void *)(v76 + 40);
                      *(unsigned char *)(v76 + 47) = 0;
                      *(unsigned char *)(v76 + 24) = 0;
                      v76 -= 24;
                    }
                    while (sub_10000D044());
                    v78 = (void **)(v76 + 48);
                    if (*(char *)(v76 + 71) < 0) {
                      operator delete(*v78);
                    }
                    *(void *)(v76 + 64) = v99;
                    *(_OWORD *)v78 = v90;
                  }
                  unint64_t v73 = v75 + 24;
                  v74 += 24;
                }
                while (v75 + 24 != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if (a1 != a2)
            {
              int64_t v49 = (unint64_t)(v12 - 2) >> 1;
              int64_t v50 = v49;
              do
              {
                int64_t v51 = v50;
                if (v49 >= v50)
                {
                  uint64_t v52 = (2 * v50) | 1;
                  unint64_t v53 = a1 + 24 * v52;
                  if (2 * v50 + 2 < v12 && sub_10000D044())
                  {
                    v53 += 24;
                    uint64_t v52 = 2 * v51 + 2;
                  }
                  unint64_t v54 = a1 + 24 * v51;
                  if (!sub_10000D044())
                  {
                    uint64_t v97 = *(void *)(v54 + 16);
                    long long v88 = *(_OWORD *)v54;
                    *(void *)(v54 + 8) = 0;
                    *(void *)(v54 + 16) = 0;
                    *(void *)unint64_t v54 = 0;
                    while (1)
                    {
                      unint64_t v55 = v53;
                      if (*(char *)(v54 + 23) < 0) {
                        operator delete(*(void **)v54);
                      }
                      long long v56 = *(_OWORD *)v53;
                      *(void *)(v54 + 16) = *(void *)(v53 + 16);
                      *(_OWORD *)unint64_t v54 = v56;
                      *(unsigned char *)(v53 + 23) = 0;
                      *(unsigned char *)unint64_t v53 = 0;
                      if (v49 < v52) {
                        break;
                      }
                      uint64_t v57 = (2 * v52) | 1;
                      unint64_t v53 = a1 + 24 * v57;
                      uint64_t v52 = 2 * v52 + 2;
                      if (v52 < v12)
                      {
                        if (sub_10000D044()) {
                          v53 += 24;
                        }
                        else {
                          uint64_t v52 = v57;
                        }
                      }
                      else
                      {
                        uint64_t v52 = v57;
                      }
                      unint64_t v54 = v55;
                      if (sub_10000D044())
                      {
                        if (*(char *)(v55 + 23) < 0) {
                          operator delete(*(void **)v55);
                        }
                        break;
                      }
                    }
                    *(void *)(v55 + 16) = v97;
                    *(_OWORD *)unint64_t v55 = v88;
                  }
                }
                int64_t v50 = v51 - 1;
              }
              while (v51);
              int64_t v58 = v11 / 0x18uLL;
              do
              {
                uint64_t v59 = 0;
                unint64_t v60 = a2;
                uint64_t v79 = *(void *)a1;
                *(void *)uint64_t v102 = *(void *)(a1 + 8);
                *(void *)&v102[7] = *(void *)(a1 + 15);
                char v80 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                unint64_t v61 = a1;
                do
                {
                  uint64_t v62 = v61 + 24 * v59 + 24;
                  uint64_t v63 = 2 * v59;
                  uint64_t v59 = (2 * v59) | 1;
                  uint64_t v64 = v63 + 2;
                  if (v63 + 2 < v58 && sub_10000D044())
                  {
                    v62 += 24;
                    uint64_t v59 = v64;
                  }
                  if (*(char *)(v61 + 23) < 0) {
                    operator delete(*(void **)v61);
                  }
                  long long v65 = *(_OWORD *)v62;
                  *(void *)(v61 + 16) = *(void *)(v62 + 16);
                  *(_OWORD *)unint64_t v61 = v65;
                  *(unsigned char *)(v62 + 23) = 0;
                  *(unsigned char *)uint64_t v62 = 0;
                  unint64_t v61 = v62;
                }
                while (v59 <= (uint64_t)((unint64_t)(v58 - 2) >> 1));
                a2 -= 24;
                if (v62 == v60 - 24)
                {
                  *(void *)uint64_t v62 = v79;
                  *(void *)(v62 + 8) = *(void *)v102;
                  *(void *)(v62 + 15) = *(void *)&v102[7];
                  *(unsigned char *)(v62 + 23) = v80;
                }
                else
                {
                  long long v66 = *(_OWORD *)(v60 - 24);
                  *(void *)(v62 + 16) = *(void *)(v60 - 8);
                  *(_OWORD *)uint64_t v62 = v66;
                  *(void *)(v60 - 24) = v79;
                  *(void *)(v60 - 9) = *(void *)&v102[7];
                  *(void *)(v60 - 16) = *(void *)v102;
                  *(unsigned char *)(v60 - 1) = v80;
                  uint64_t v67 = v62 - a1 + 24;
                  if (v67 >= 25)
                  {
                    unint64_t v68 = (v67 / 0x18uLL - 2) >> 1;
                    unint64_t v69 = a1 + 24 * v68;
                    if (sub_10000D044())
                    {
                      uint64_t v98 = *(void *)(v62 + 16);
                      long long v89 = *(_OWORD *)v62;
                      *(void *)(v62 + 8) = 0;
                      *(void *)(v62 + 16) = 0;
                      *(void *)uint64_t v62 = 0;
                      while (1)
                      {
                        uint64_t v70 = v69;
                        if (*(char *)(v62 + 23) < 0) {
                          operator delete(*(void **)v62);
                        }
                        long long v71 = *(_OWORD *)v69;
                        *(void *)(v62 + 16) = *(void *)(v69 + 16);
                        *(_OWORD *)uint64_t v62 = v71;
                        *(unsigned char *)(v69 + 23) = 0;
                        *(unsigned char *)unint64_t v69 = 0;
                        if (!v68) {
                          break;
                        }
                        unint64_t v68 = (v68 - 1) >> 1;
                        unint64_t v69 = a1 + 24 * v68;
                        uint64_t v62 = v70;
                        if (!sub_10000D044())
                        {
                          if (*(char *)(v70 + 23) < 0) {
                            operator delete(*(void **)v70);
                          }
                          break;
                        }
                      }
                      *(void *)(v70 + 16) = v98;
                      *(_OWORD *)uint64_t v70 = v89;
                    }
                  }
                }
              }
              while (v58-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = a1 + 24 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 < 0xC01)
          {
            sub_10000D134((long long *)v14, (long long *)a1, v9);
          }
          else
          {
            sub_10000D134((long long *)a1, (long long *)v14, v9);
            sub_10000D134((long long *)(a1 + 24), (long long *)(a1 + 24 * v13 - 24), (long long *)(a2 - 48));
            sub_10000D134((long long *)(a1 + 48), (long long *)(a1 + 24 * v13 + 24), (long long *)(a2 - 72));
            sub_10000D134((long long *)(a1 + 24 * v13 - 24), (long long *)v14, (long long *)(a1 + 24 * v13 + 24));
            uint64_t v91 = *(void *)(a1 + 16);
            long long v82 = *(_OWORD *)a1;
            long long v15 = *(_OWORD *)v14;
            *(void *)(a1 + 16) = *(void *)(v14 + 16);
            *(_OWORD *)a1 = v15;
            *(void *)(v14 + 16) = v91;
            *(_OWORD *)unint64_t v14 = v82;
          }
          --a3;
          if ((a4 & 1) != 0 || sub_10000D044()) {
            break;
          }
          uint64_t v104 = *(void *)(a1 + 16);
          long long v101 = *(_OWORD *)a1;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if (sub_10000D044())
          {
            unint64_t v10 = a1;
            do
              v10 += 24;
            while (!sub_10000D044());
          }
          else
          {
            unint64_t v24 = a1 + 24;
            do
            {
              unint64_t v10 = v24;
              if (v24 >= a2) {
                break;
              }
              BOOL v25 = sub_10000D044();
              unint64_t v24 = v10 + 24;
            }
            while (!v25);
          }
          unint64_t v26 = a2;
          if (v10 < a2)
          {
            unint64_t v26 = a2;
            do
              v26 -= 24;
            while (sub_10000D044());
          }
          while (v10 < v26)
          {
            uint64_t v93 = *(void *)(v10 + 16);
            long long v84 = *(_OWORD *)v10;
            long long v27 = *(_OWORD *)v26;
            *(void *)(v10 + 16) = *(void *)(v26 + 16);
            *(_OWORD *)unint64_t v10 = v27;
            *(void *)(v26 + 16) = v93;
            *(_OWORD *)unint64_t v26 = v84;
            do
              v10 += 24;
            while (!sub_10000D044());
            do
              v26 -= 24;
            while (sub_10000D044());
          }
          uint64_t v28 = (long long *)(v10 - 24);
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 == a1)
          {
            if (*(char *)(v10 - 1) < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v29 = *v28;
            *(void *)(a1 + 16) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v29;
            *(unsigned char *)(v10 - 1) = 0;
            *(unsigned char *)(v10 - 24) = 0;
          }
          a4 = 0;
          *(void *)(v10 - 8) = v104;
          long long *v28 = v101;
        }
        uint64_t v16 = 0;
        uint64_t v103 = *(void *)(a1 + 16);
        long long v100 = *(_OWORD *)a1;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        do
          v16 += 24;
        while (sub_10000D044());
        unint64_t v17 = a1 + v16;
        unint64_t v18 = a2;
        if (v16 == 24)
        {
          unint64_t v18 = a2;
          do
          {
            if (v17 >= v18) {
              break;
            }
            v18 -= 24;
          }
          while (!sub_10000D044());
        }
        else
        {
          do
            v18 -= 24;
          while (!sub_10000D044());
        }
        unint64_t v10 = a1 + v16;
        if (v17 < v18)
        {
          unint64_t v19 = v18;
          do
          {
            uint64_t v92 = *(void *)(v10 + 16);
            long long v83 = *(_OWORD *)v10;
            long long v20 = *(_OWORD *)v19;
            *(void *)(v10 + 16) = *(void *)(v19 + 16);
            *(_OWORD *)unint64_t v10 = v20;
            *(void *)(v19 + 16) = v92;
            *(_OWORD *)unint64_t v19 = v83;
            do
              v10 += 24;
            while (sub_10000D044());
            do
              v19 -= 24;
            while (!sub_10000D044());
          }
          while (v10 < v19);
        }
        unsigned __int8 v21 = (long long *)(v10 - 24);
        if (v10 - 24 == a1)
        {
          if (*(char *)(v10 - 1) < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v22 = *v21;
          *(void *)(a1 + 16) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v22;
          *(unsigned char *)(v10 - 1) = 0;
          *(unsigned char *)(v10 - 24) = 0;
        }
        *(void *)(v10 - 8) = v103;
        long long *v21 = v100;
        if (v17 >= v18) {
          break;
        }
LABEL_34:
        sub_10000C49C(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v23 = sub_10000D254(a1, v10 - 24);
      if (sub_10000D254(v10, a2)) {
        break;
      }
      if (!v23) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 24;
    if (!v23) {
      continue;
    }
    break;
  }
}

void sub_10000CFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10000D044()
{
  siri::dialogengine::StringToLower();
  siri::dialogengine::StringToLower();
  int v0 = (char)v11;
  uint64_t v1 = (void *)v10[0];
  unsigned __int8 v2 = v13;
  if ((v13 & 0x80u) == 0) {
    size_t v3 = v13;
  }
  else {
    size_t v3 = (size_t)__p[1];
  }
  if ((v13 & 0x80u) == 0) {
    BOOL v4 = __p;
  }
  else {
    BOOL v4 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    size_t v5 = v11;
  }
  else {
    size_t v5 = v10[1];
  }
  if ((v11 & 0x80u) == 0) {
    int v6 = v10;
  }
  else {
    int v6 = (void *)v10[0];
  }
  if (v5 >= v3) {
    size_t v7 = v3;
  }
  else {
    size_t v7 = v5;
  }
  int v8 = memcmp(v4, v6, v7);
  if (v0 < 0)
  {
    operator delete(v1);
    if ((v13 & 0x80) == 0) {
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_18;
  }
  operator delete(__p[0]);
LABEL_18:
  if (v8) {
    return v8 < 0;
  }
  else {
    return v3 < v5;
  }
}

void sub_10000D118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10000D134(long long *a1, long long *a2, long long *a3)
{
  BOOL v6 = sub_10000D044();
  BOOL result = sub_10000D044();
  if (v6)
  {
    if (result)
    {
      uint64_t v8 = *((void *)a1 + 2);
      long long v9 = *a1;
      uint64_t v10 = *((void *)a3 + 2);
      *a1 = *a3;
      *((void *)a1 + 2) = v10;
    }
    else
    {
      uint64_t v17 = *((void *)a1 + 2);
      long long v18 = *a1;
      uint64_t v19 = *((void *)a2 + 2);
      *a1 = *a2;
      *((void *)a1 + 2) = v19;
      *a2 = v18;
      *((void *)a2 + 2) = v17;
      BOOL result = sub_10000D044();
      if (!result) {
        return result;
      }
      uint64_t v8 = *((void *)a2 + 2);
      long long v9 = *a2;
      uint64_t v20 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v20;
    }
    *a3 = v9;
    *((void *)a3 + 2) = v8;
  }
  else if (result)
  {
    uint64_t v11 = *((void *)a2 + 2);
    long long v12 = *a2;
    uint64_t v13 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v13;
    *a3 = v12;
    *((void *)a3 + 2) = v11;
    BOOL result = sub_10000D044();
    if (result)
    {
      uint64_t v14 = *((void *)a1 + 2);
      long long v15 = *a1;
      uint64_t v16 = *((void *)a2 + 2);
      *a1 = *a2;
      *((void *)a1 + 2) = v16;
      *a2 = v15;
      *((void *)a2 + 2) = v14;
    }
  }
  return result;
}

BOOL sub_10000D254(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = a2 - 24;
      if (sub_10000D044())
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(v6 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(void *)(a1 + 16) = v9;
        *(_OWORD *)uint64_t v6 = v8;
        *(void *)(v6 + 16) = v7;
      }
      return 1;
    case 3uLL:
      sub_10000D134((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_10000D570(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      long long v18 = (long long *)(a1 + 24);
      uint64_t v19 = (long long *)(a1 + 48);
      uint64_t v20 = (long long *)(a1 + 72);
      uint64_t v21 = a2 - 24;
      sub_10000D570(a1, a1 + 24, a1 + 48, a1 + 72);
      if (sub_10000D044())
      {
        uint64_t v22 = *(void *)(a1 + 88);
        long long v23 = *v20;
        uint64_t v24 = *(void *)(v21 + 16);
        long long *v20 = *(_OWORD *)v21;
        *(void *)(a1 + 88) = v24;
        *(_OWORD *)uint64_t v21 = v23;
        *(void *)(v21 + 16) = v22;
        if (sub_10000D044())
        {
          uint64_t v25 = *(void *)(a1 + 64);
          long long v26 = *v19;
          *uint64_t v19 = *v20;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          long long *v20 = v26;
          *(void *)(a1 + 88) = v25;
          if (sub_10000D044())
          {
            uint64_t v27 = *(void *)(a1 + 40);
            long long v28 = *v18;
            long long *v18 = *v19;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            *uint64_t v19 = v28;
            *(void *)(a1 + 64) = v27;
            if (sub_10000D044())
            {
              uint64_t v29 = *(void *)(a1 + 16);
              long long v30 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v18;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              long long *v18 = v30;
              *(void *)(a1 + 40) = v29;
            }
          }
        }
      }
      return 1;
    default:
      sub_10000D134((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_10000D044())
    {
      long long v31 = *(_OWORD *)v10;
      uint64_t v32 = *(void *)(v10 + 16);
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)uint64_t v10 = 0;
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = a1 + v13;
        long long v15 = (void **)(a1 + v13 + 72);
        if (*(char *)(a1 + v13 + 95) < 0) {
          operator delete(*v15);
        }
        *(_OWORD *)long long v15 = *(_OWORD *)(v14 + 48);
        *(void *)(a1 + v13 + 88) = *(void *)(v14 + 64);
        *(unsigned char *)(v14 + 71) = 0;
        *(unsigned char *)(v14 + 48) = 0;
        if (v13 == -48)
        {
          uint64_t v17 = a1;
          goto LABEL_15;
        }
        v13 -= 24;
      }
      while (sub_10000D044());
      int v16 = *(char *)(a1 + v13 + 95);
      uint64_t v17 = a1 + v13 + 72;
      if (v16 < 0) {
        operator delete(*(void **)v17);
      }
LABEL_15:
      *(_OWORD *)uint64_t v17 = v31;
      *(void *)(v17 + 16) = v32;
      if (++v12 == 8) {
        return v10 + 24 == a2;
      }
    }
    v11 += 24;
    v10 += 24;
    if (v10 == a2) {
      return 1;
    }
  }
}

void sub_10000D53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10000D570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10000D134((long long *)a1, (long long *)a2, (long long *)a3);
  if (sub_10000D044())
  {
    uint64_t v9 = *(void *)(a3 + 16);
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(void *)(a4 + 16) = v9;
    if (sub_10000D044())
    {
      uint64_t v12 = *(void *)(a2 + 16);
      long long v13 = *(_OWORD *)a2;
      uint64_t v14 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v14;
      *(_OWORD *)a3 = v13;
      *(void *)(a3 + 16) = v12;
      if (sub_10000D044())
      {
        uint64_t v15 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v16 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v16;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v15;
      }
    }
  }
  return result;
}

void sub_10000D640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  sub_100003470(v102, "/usr/local/bin/appleconnect serviceTicket --show-signIn-dialog --dawToken -I 178268 --realm APPLECONNECT.APPLE.COM 2>/dev/null");
  siri::dialogengine::ExecuteShellCommand();
  siri::dialogengine::StringTrim();
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  if ((char)v103 < 0) {
    operator delete(v102[0]);
  }
  sub_100003470(&v106, "DAWTKNV");
  char v15 = siri::dialogengine::StringStartsWith();
  char v16 = v15;
  if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v15) {
      goto LABEL_7;
    }
LABEL_28:
    uint64_t v29 = sub_1000042E0(&std::cout, (uint64_t)"Error getting AppleConnect token for rendercat. Make sure you have AppleConnect installed and are on the internal network.", 122);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    long long v30 = std::locale::use_facet((const std::locale *)&v106, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale((std::locale *)&v106);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_166;
  }
  operator delete(v106.__r_.__value_.__l.__data_);
  if ((v16 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_7:
  std::operator+<char>();
  sub_100003470(&__p, "Content-type: text/plain");
  std::operator+<char>();
  uint64_t v17 = std::string::append(&v96, "&train=");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v97.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  int v19 = *(char *)(a4 + 23);
  if (v19 >= 0) {
    uint64_t v20 = (const std::string::value_type *)a4;
  }
  else {
    uint64_t v20 = *(const std::string::value_type **)a4;
  }
  if (v19 >= 0) {
    std::string::size_type v21 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v21 = *(void *)(a4 + 8);
  }
  uint64_t v22 = std::string::append(&v97, v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v98.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  uint64_t v24 = std::string::append(&v98, "&darkMode=");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v106.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (a8) {
    long long v26 = "true";
  }
  else {
    long long v26 = "false";
  }
  uint64_t v27 = std::string::append(&v106, v26);
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a5 + 23) < 0)
  {
    if (!*(void *)(a5 + 8)) {
      goto LABEL_38;
    }
  }
  else if (!*(unsigned char *)(a5 + 23))
  {
    goto LABEL_38;
  }
  std::operator+<char>();
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v31 = &v106;
  }
  else {
    long long v31 = (std::string *)v106.__r_.__value_.__r.__words[0];
  }
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v106.__r_.__value_.__l.__size_;
  }
  std::string::append(&v99, (const std::string::value_type *)v31, size);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
LABEL_38:
  if (*(char *)(a6 + 23) < 0)
  {
    if (!*(void *)(a6 + 8)) {
      goto LABEL_50;
    }
  }
  else if (!*(unsigned char *)(a6 + 23))
  {
    goto LABEL_50;
  }
  std::operator+<char>();
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v33 = &v106;
  }
  else {
    uint64_t v33 = (std::string *)v106.__r_.__value_.__r.__words[0];
  }
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v34 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v34 = v106.__r_.__value_.__l.__size_;
  }
  std::string::append(&v99, (const std::string::value_type *)v33, v34);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
LABEL_50:
  if (*(char *)(a7 + 23) < 0)
  {
    if (!*(void *)(a7 + 8)) {
      goto LABEL_62;
    }
  }
  else if (!*(unsigned char *)(a7 + 23))
  {
    goto LABEL_62;
  }
  std::operator+<char>();
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v35 = &v106;
  }
  else {
    uint64_t v35 = (std::string *)v106.__r_.__value_.__r.__words[0];
  }
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v36 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v36 = v106.__r_.__value_.__l.__size_;
  }
  std::string::append(&v99, (const std::string::value_type *)v35, v36);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
LABEL_62:
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8))
    {
LABEL_64:
      std::operator+<char>();
      uint64_t v37 = std::string::append(&v90, "\" -b '");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if ((v103 & 0x80u) == 0) {
        uint64_t v39 = (const std::string::value_type *)v102;
      }
      else {
        uint64_t v39 = (const std::string::value_type *)v102[0];
      }
      if ((v103 & 0x80u) == 0) {
        std::string::size_type v40 = v103;
      }
      else {
        std::string::size_type v40 = (std::string::size_type)v102[1];
      }
      unint64_t v41 = std::string::append(&v91, v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      unint64_t v43 = std::string::append(&v92, "' -d '");
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      int v45 = *(char *)(a1 + 23);
      if (v45 >= 0) {
        int v46 = (const std::string::value_type *)a1;
      }
      else {
        int v46 = *(const std::string::value_type **)a1;
      }
      if (v45 >= 0) {
        std::string::size_type v47 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        std::string::size_type v47 = *(void *)(a1 + 8);
      }
      uint64_t v48 = std::string::append(&v93, v46, v47);
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      int64_t v50 = std::string::append(&v94, "' -o ");
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v95.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      int v52 = *(char *)(a2 + 23);
      if (v52 >= 0) {
        unint64_t v53 = (const std::string::value_type *)a2;
      }
      else {
        unint64_t v53 = *(const std::string::value_type **)a2;
      }
      if (v52 >= 0) {
        std::string::size_type v54 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v54 = *(void *)(a2 + 8);
      }
      unint64_t v55 = std::string::append(&v95, v53, v54);
      long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v96.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      uint64_t v57 = std::string::append(&v96, " --url \"");
      long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v97.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v59 = &v99;
      }
      else {
        uint64_t v59 = (std::string *)v99.__r_.__value_.__r.__words[0];
      }
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v60 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v60 = v99.__r_.__value_.__l.__size_;
      }
      unint64_t v61 = std::string::append(&v97, (const std::string::value_type *)v59, v60);
      long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      uint64_t v63 = std::string::append(&v106, "\" 2>&1");
      long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v98.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v106.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v92.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v90.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::ExecuteShellCommand();
      if (siri::dialogengine::GetFileSize() > 499) {
        goto LABEL_123;
      }
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v97.__r_.__value_.__l.__size_ == 3)
        {
          long long v65 = (std::string *)v97.__r_.__value_.__r.__words[0];
LABEL_114:
          int data_low = LOWORD(v65->__r_.__value_.__l.__data_);
          int v69 = v65->__r_.__value_.__s.__data_[2];
          if (data_low != 12338 || v69 != 48) {
            goto LABEL_118;
          }
LABEL_123:
          std::operator+<char>();
          unint64_t v74 = std::string::append(&v96, "\"");
          long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          v106.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::Info();
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v106.__r_.__value_.__l.__data_);
          }
          goto LABEL_154;
        }
      }
      else if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) == 3)
      {
        long long v65 = &v97;
        goto LABEL_114;
      }
LABEL_118:
      siri::dialogengine::ReadFileToString();
      uint64_t v71 = sub_100006B54((uint64_t)&v106, 0, 1024, 0);
      v72 = &v96;
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v72 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      v95.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      v95.__r_.__value_.__l.__size_ = (std::string::size_type)v72;
      if (*(_DWORD *)(sub_10000E450(v71, &v95) + 88))
      {
        if (v107 > 0x11) {
          unint64_t v73 = "Unknown error.";
        }
        else {
          unint64_t v73 = off_10007CCD8[v107];
        }
        sub_100003470(&v95, v73);
        long long v85 = sub_1000042E0(&std::cout, (uint64_t)"Error: Invalid JSON returned from rendercat: ", 45);
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v86 = &v95;
        }
        else {
          long long v86 = (std::string *)v95.__r_.__value_.__r.__words[0];
        }
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v87 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v87 = v95.__r_.__value_.__l.__size_;
        }
        long long v88 = sub_1000042E0(v85, (uint64_t)v86, v87);
        std::ios_base::getloc((const std::ios_base *)((char *)v88 + *(void *)(*v88 - 24)));
        long long v89 = std::locale::use_facet((const std::locale *)&v94, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 10);
        std::locale::~locale((std::locale *)&v94);
        std::ostream::put();
        std::ostream::flush();
        siri::dialogengine::DeleteFile();
      }
      else
      {
        sub_100003470(&v94, "message");
        siri::dialogengine::ParseJSONString();
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        sub_100003470(&v93, "error");
        siri::dialogengine::ParseJSONString();
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        unint64_t v76 = sub_1000042E0(&std::cout, (uint64_t)"Rendercat Error: ", 17);
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v77 = &v95;
        }
        else {
          v77 = (std::string *)v95.__r_.__value_.__r.__words[0];
        }
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v78 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v78 = v95.__r_.__value_.__l.__size_;
        }
        uint64_t v79 = sub_1000042E0(v76, (uint64_t)v77, v78);
        char v80 = sub_1000042E0(v79, (uint64_t)" : ", 3);
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v81 = &v94;
        }
        else {
          v81 = (std::string *)v94.__r_.__value_.__r.__words[0];
        }
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v82 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v82 = v94.__r_.__value_.__l.__size_;
        }
        long long v83 = sub_1000042E0(v80, (uint64_t)v81, v82);
        std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(void *)(*v83 - 24)));
        long long v84 = std::locale::use_facet((const std::locale *)&v93, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10);
        std::locale::~locale((std::locale *)&v93);
        std::ostream::put();
        std::ostream::flush();
        siri::dialogengine::DeleteFile();
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      sub_100008BB4((uint64_t)&v106);
LABEL_154:
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      goto LABEL_160;
    }
  }
  else if (*(unsigned char *)(a1 + 23))
  {
    goto LABEL_64;
  }
  long long v66 = sub_1000042E0(&std::cout, (uint64_t)"Error: No snippet data provided for rendercat", 45);
  std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(*v66 - 24)));
  uint64_t v67 = std::locale::use_facet((const std::locale *)&v106, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
  std::locale::~locale((std::locale *)&v106);
  std::ostream::put();
  std::ostream::flush();
LABEL_160:
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (v101 < 0) {
    operator delete(__p);
  }
  if ((char)v103 < 0) {
    operator delete(v102[0]);
  }
LABEL_166:
  if (v105 < 0) {
    operator delete(v104);
  }
}

void sub_10000E120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::locale a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  sub_100008BB4(v71 - 192);
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (*(char *)(v71 - 217) < 0) {
    operator delete(*(void **)(v71 - 240));
  }
  if (*(char *)(v71 - 193) < 0) {
    operator delete(*(void **)(v71 - 216));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10000E450(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v10 = a1;
  uint64_t v11 = v3;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v14 = 256;
  int v15 = 0;
  uint64_t v16 = 0;
  int v17 = 2;
  uint64_t v4 = sub_10000E560((uint64_t)&v11, a2, a1);
  *(void *)(a1 + 88) = v4;
  *(void *)(a1 + 96) = v5;
  if (v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = sub_100006EDC;
  }
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 64);
    if (v7 - *(void *)(a1 + 56) != 24) {
      __assert_rtn("ParseStream", "document.h", 2259, "stack_.GetSize() == sizeof(ValueType)");
    }
    *(void *)(a1 + 64) = v7 - 24;
    if (v7 - 24 != a1)
    {
      long long v8 = *(_OWORD *)(v7 - 24);
      *(void *)(a1 + 16) = *(void *)(v7 - 8);
      *(_OWORD *)a1 = v8;
      *(_WORD *)(v7 - 2) = 0;
    }
  }
  sub_100008B1C(&v10);
  sub_100006BE8((uint64_t)&v11);
  return a1;
}

void sub_10000E53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

uint64_t sub_10000E560(uint64_t a1, void *a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  for (uint64_t i = (unsigned char *)*a2; ; ++i)
  {
    unsigned int v6 = *i;
    BOOL v7 = v6 > 0x20;
    uint64_t v8 = (1 << v6) & 0x100002600;
    if (v7 || v8 == 0) {
      break;
    }
  }
  *a2 = i;
  if (!*i)
  {
    int v14 = 1;
LABEL_19:
    int v15 = &i[-a2[1]];
    *(_DWORD *)(a1 + 48) = v14;
    *(void *)(a1 + 56) = v15;
    goto LABEL_16;
  }
  sub_10000E650(a1, a2, a3);
  if (!*(_DWORD *)(a1 + 48))
  {
    for (uint64_t i = (unsigned char *)*a2; ; ++i)
    {
      unsigned int v10 = *i;
      BOOL v7 = v10 > 0x20;
      uint64_t v11 = (1 << v10) & 0x100002600;
      if (v7 || v11 == 0) {
        break;
      }
    }
    *a2 = i;
    if (*i)
    {
      int v14 = 2;
      goto LABEL_19;
    }
  }
LABEL_16:
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = *(void *)(a1 + 16);
  return result;
}

void sub_10000E644(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = *(void *)(v1 + 16);
  _Unwind_Resume(a1);
}

void sub_10000E650(uint64_t result, void *a2, uint64_t a3)
{
  int v3 = *(char *)*a2;
  if (v3 > 109)
  {
    switch(v3)
    {
      case '{':
        sub_10000E7D8(result, (uint64_t)a2, (void *)a3);
        return;
      case 't':
        sub_100006F90(result, a2, a3);
        return;
      case 'n':
        sub_100006EEC(result, a2, a3);
        return;
    }
  }
  else
  {
    switch(v3)
    {
      case '""':
        sub_10000E6B0(result, a2, a3);
        return;
      case '[':
        sub_10000EA30(result, (unsigned __int8 **)a2, (void *)a3);
        return;
      case 'f':
        sub_10000703C(result, a2, a3);
        return;
    }
  }
  sub_10000EC04(result, (unsigned __int8 **)a2, a3);
}

double sub_10000E6B0(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  long long v11 = *a2;
  long long v12 = a2;
  if (*(unsigned char *)v11 != 34) {
    __assert_rtn("ParseString", "reader.h", 961, "s.Peek() == '\\\"'");
  }
  *(void *)&long long v11 = v11 + 1;
  uint64_t v9 = (void *)a1;
  int v10 = 0;
  sub_10000F3E8((unsigned char *)a1, (uint64_t *)&v11, &v9);
  if (!*(_DWORD *)(a1 + 48))
  {
    int v5 = v10;
    unsigned int v6 = (void *)sub_100008270((unsigned int *)&v9);
    if ((sub_1000082A8(a3, v6, v5 - 1, 1) & 1) == 0)
    {
      if (*(_DWORD *)(a1 + 48)) {
        __assert_rtn("ParseString", "reader.h", 983, "!HasParseError()");
      }
      uint64_t v8 = v11 - *((void *)&v11 + 1);
      *(_DWORD *)(a1 + 48) = 16;
      *(void *)(a1 + 56) = v8;
    }
  }
  double result = *(double *)&v11;
  *long long v12 = v11;
  return result;
}

void sub_10000E7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11, _OWORD *a12)
{
  *a12 = a11;
  _Unwind_Resume(a1);
}

void sub_10000E7D8(uint64_t a1, uint64_t a2, void *a3)
{
  if (**(unsigned char **)a2 != 123) {
    sub_1000622C8();
  }
  ++*(void *)a2;
  uint64_t v6 = sub_100007EB4(a3 + 5, 1);
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = 0;
  *(_WORD *)(v6 + 22) = 3;
  for (uint64_t i = *(unsigned char **)a2; ; ++i)
  {
    unsigned int v8 = *i;
    BOOL v9 = v8 > 0x20;
    uint64_t v10 = (1 << v8) & 0x100002600;
    if (v9 || v10 == 0) {
      break;
    }
  }
  *(void *)a2 = i;
  if (!*(_DWORD *)(a1 + 48))
  {
    int v12 = *i;
    if (v12 == 125)
    {
      *(void *)a2 = i + 1;
      if (sub_1000088AC(a3, 0)) {
        return;
      }
      if (*(_DWORD *)(a1 + 48)) {
        sub_100062244();
      }
LABEL_46:
      uint64_t i = *(unsigned char **)a2;
      int v29 = 16;
LABEL_52:
      long long v30 = &i[-*(void *)(a2 + 8)];
      *(_DWORD *)(a1 + 48) = v29;
      *(void *)(a1 + 56) = v30;
      return;
    }
    if (v12 != 34)
    {
LABEL_44:
      int v29 = 4;
      goto LABEL_52;
    }
    unsigned int v13 = 0;
    while (1)
    {
      v14.n128_f64[0] = sub_10000E6B0(a1, (_OWORD *)a2, (uint64_t)a3);
      if (*(_DWORD *)(a1 + 48)) {
        break;
      }
      for (uint64_t i = *(unsigned char **)a2; ; ++i)
      {
        unsigned int v15 = *i;
        BOOL v9 = v15 > 0x20;
        uint64_t v16 = (1 << v15) & 0x100002600;
        if (v9 || v16 == 0) {
          break;
        }
      }
      *(void *)a2 = i;
      if (*i != 58)
      {
        int v29 = 5;
        goto LABEL_52;
      }
      long long v18 = i + 1;
      *(void *)a2 = v18;
      while (1)
      {
        unsigned int v19 = *v18;
        BOOL v9 = v19 > 0x20;
        uint64_t v20 = (1 << v19) & 0x100002600;
        if (v9 || v20 == 0) {
          break;
        }
        ++v18;
      }
      *(void *)a2 = v18;
      sub_10000E650(a1, a2, a3, v14);
      if (*(_DWORD *)(a1 + 48)) {
        return;
      }
      for (uint64_t i = *(unsigned char **)a2; ; ++i)
      {
        unsigned int v22 = *i;
        BOOL v9 = v22 > 0x20;
        uint64_t v23 = (1 << v22) & 0x100002600;
        if (v9 || v23 == 0) {
          break;
        }
      }
      *(void *)a2 = i;
      ++v13;
      int v25 = (char)*i;
      if (v25 != 44)
      {
        if (v25 != 125)
        {
          int v29 = 6;
          goto LABEL_52;
        }
        *(void *)a2 = i + 1;
        if (sub_1000088AC(a3, v13)) {
          return;
        }
        if (*(_DWORD *)(a1 + 48)) {
          sub_10006229C();
        }
        goto LABEL_46;
      }
      *(void *)a2 = ++i;
      while (1)
      {
        unsigned int v26 = *i;
        BOOL v9 = v26 > 0x20;
        uint64_t v27 = (1 << v26) & 0x100002600;
        if (v9 || v27 == 0) {
          break;
        }
        ++i;
      }
      *(void *)a2 = i;
      if (*i != 34) {
        goto LABEL_44;
      }
    }
  }
}

uint64_t sub_10000EA30(uint64_t a1, unsigned __int8 **a2, void *a3)
{
  if (**a2 != 91) {
    sub_100062378();
  }
  ++*a2;
  uint64_t result = sub_100007EB4(a3 + 5, 1);
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = 0;
  *(_WORD *)(result + 22) = 4;
  for (uint64_t i = *a2; ; ++i)
  {
    unsigned int v9 = *i;
    BOOL v10 = v9 > 0x20;
    uint64_t v11 = (1 << v9) & 0x100002600;
    if (v10 || v11 == 0) {
      break;
    }
  }
  *a2 = i;
  if (!*(_DWORD *)(a1 + 48))
  {
    if (*i == 93)
    {
      *a2 = i + 1;
      uint64_t result = sub_10000898C(a3, 0);
      if (result) {
        return result;
      }
      if (*(_DWORD *)(a1 + 48)) {
        sub_1000622F4();
      }
      goto LABEL_31;
    }
    uint64_t result = sub_10000E650(a1, a2, a3, v7);
    if (!*(_DWORD *)(a1 + 48))
    {
      unsigned int v14 = 0;
      while (1)
      {
        for (uint64_t j = *a2; ; ++j)
        {
          unsigned int v16 = *j;
          BOOL v10 = v16 > 0x20;
          uint64_t v17 = (1 << v16) & 0x100002600;
          if (v10 || v17 == 0) {
            break;
          }
        }
        ++v14;
        *a2 = j;
        int v19 = *j;
        if (v19 != 44) {
          break;
        }
        uint64_t v20 = j + 1;
        *a2 = v20;
        while (1)
        {
          unsigned int v21 = *v20;
          BOOL v10 = v21 > 0x20;
          uint64_t v22 = (1 << v21) & 0x100002600;
          if (v10 || v22 == 0) {
            break;
          }
          ++v20;
        }
        *a2 = v20;
        uint64_t result = sub_10000E650(a1, a2, a3, v13);
        if (*(_DWORD *)(a1 + 48)) {
          return result;
        }
      }
      if (v19 != 93)
      {
        int v24 = 7;
        goto LABEL_32;
      }
      *a2 = j + 1;
      uint64_t result = sub_10000898C(a3, v14);
      if ((result & 1) == 0)
      {
        if (*(_DWORD *)(a1 + 48)) {
          sub_10006234C();
        }
LABEL_31:
        uint64_t j = *a2;
        int v24 = 16;
LABEL_32:
        int v25 = (unsigned __int8 *)(j - a2[1]);
        *(_DWORD *)(a1 + 48) = v24;
        *(void *)(a1 + 56) = v25;
      }
    }
  }
  return result;
}

uint64_t sub_10000EC04(uint64_t result, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  int v5 = a2[1];
  int v6 = **a2;
  if (v6 == 45)
  {
    unsigned int v8 = v4 + 1;
    int v7 = v4[1];
  }
  else
  {
    int v7 = **a2;
    unsigned int v8 = *a2;
  }
  LODWORD(v9) = v7 - 48;
  if (v7 == 48)
  {
    int v16 = 0;
    LODWORD(v14) = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    double v13 = 0.0;
    unsigned int v10 = v8[1];
    uint64_t v11 = (uint64_t)(v8 + 1);
    goto LABEL_41;
  }
  if ((v7 - 49) > 8)
  {
    if (*(_DWORD *)(result + 48)) {
      __assert_rtn("ParseNumber", "reader.h", 1532, "!HasParseError()");
    }
    uint64_t v39 = (unsigned __int8 *)(v8 - v5);
    int v40 = 3;
    goto LABEL_111;
  }
  uint64_t v11 = (uint64_t)(v8 + 1);
  unsigned int v10 = v8[1];
  unsigned int v12 = v10 - 48;
  double v13 = 0.0;
  if (v6 != 45)
  {
    if (v12 <= 9)
    {
      uint64_t v14 = 0;
      while (1)
      {
        if (v9 > 0x19999998)
        {
          if (v9 != 429496729) {
            goto LABEL_23;
          }
          if (v10 > 0x35) {
            break;
          }
        }
        LODWORD(v9) = v10 + 10 * v9 - 48;
        unsigned int v10 = v8[v14++ + 2];
        if (v10 - 48 >= 0xA)
        {
          int v16 = 0;
          unint64_t v17 = 0;
          int v18 = 0;
          uint64_t v11 = (uint64_t)&v8[v14 + 1];
          goto LABEL_41;
        }
      }
      LODWORD(v9) = 429496729;
LABEL_23:
      uint64_t v11 = (uint64_t)&v8[v14 + 1];
      goto LABEL_24;
    }
LABEL_102:
    int v16 = 0;
    LODWORD(v14) = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    goto LABEL_41;
  }
  if (v12 > 9) {
    goto LABEL_102;
  }
  uint64_t v14 = 0;
  while (1)
  {
    if (v9 > 0xCCCCCCB)
    {
      if (v9 != 214748364) {
        goto LABEL_14;
      }
      if (v10 > 0x38) {
        break;
      }
    }
    LODWORD(v9) = v10 + 10 * v9 - 48;
    unsigned int v10 = v8[v14++ + 2];
    if (v10 - 48 >= 0xA)
    {
      int v16 = 0;
      unint64_t v17 = 0;
      int v18 = 0;
      uint64_t v11 = (uint64_t)&v8[v14 + 1];
      goto LABEL_41;
    }
  }
  unsigned int v10 = 57;
  LODWORD(v9) = 214748364;
LABEL_14:
  uint64_t v11 = (uint64_t)&v8[v14 + 1];
LABEL_24:
  unint64_t v17 = v9;
  if (v6 == 45)
  {
    while (v17 <= 0xCCCCCCCCCCCCCCBLL || v17 == 0xCCCCCCCCCCCCCCCLL && v10 <= 0x38)
    {
      unsigned int v15 = *(unsigned __int8 *)++v11;
      unint64_t v17 = v10 - 48 + 10 * v17;
      LODWORD(v14) = v14 + 1;
      unsigned int v10 = v15;
      if (v15 - 48 >= 0xA) {
        goto LABEL_39;
      }
    }
  }
  else
  {
    while (v17 <= 0x1999999999999998 || v17 == 0x1999999999999999 && v10 <= 0x35)
    {
      unsigned int v19 = *(unsigned __int8 *)++v11;
      unint64_t v17 = v10 - 48 + 10 * v17;
      LODWORD(v14) = v14 + 1;
      unsigned int v10 = v19;
      if (v19 - 48 >= 0xA)
      {
LABEL_39:
        int v16 = 0;
        double v13 = 0.0;
        goto LABEL_40;
      }
    }
  }
  double v13 = (double)v17;
  do
  {
    unsigned int v20 = *(unsigned __int8 *)++v11;
    double v13 = (double)(int)(v10 - 48) + v13 * 10.0;
    unsigned int v10 = v20;
  }
  while (v20 - 48 < 0xA);
  int v16 = 1;
LABEL_40:
  int v18 = 1;
LABEL_41:
  uint64_t v21 = v4 - v5;
  if (v10 == 46)
  {
    unsigned int v8 = (unsigned __int8 *)(v11 + 1);
    unsigned int v10 = *(unsigned __int8 *)(v11 + 1);
    if (v10 - 48 >= 0xA)
    {
      if (*(_DWORD *)(result + 48)) {
        __assert_rtn("ParseNumber", "reader.h", 1575, "!HasParseError()");
      }
      uint64_t v39 = (unsigned __int8 *)(v8 - v5);
      int v40 = 14;
      goto LABEL_111;
    }
    if (v16)
    {
      int v22 = 0;
      goto LABEL_54;
    }
    uint64_t v23 = 0;
    if (!v18) {
      unint64_t v17 = v9;
    }
    while (v10 <= 0x39 && !(v17 >> 53))
    {
      unint64_t v17 = v10 - 48 + 10 * v17;
      if (v17) {
        LODWORD(v14) = v14 + 1;
      }
      int v24 = *(char *)(v11 + v23 + 2);
      unsigned int v10 = *(unsigned __int8 *)(v11 + v23++ + 2);
      if (v24 <= 47)
      {
        int v25 = 0;
        double v13 = (double)v17;
        int v22 = -(int)v23;
        unsigned int v8 = (unsigned __int8 *)(v11 + v23 + 1);
        goto LABEL_82;
      }
    }
    double v13 = (double)v17;
    int v22 = -(int)v23;
    unsigned int v8 = (unsigned __int8 *)(v11 + v23 + 1);
LABEL_54:
    while (v10 <= 0x39)
    {
      if ((int)v14 <= 16)
      {
        double v13 = (double)(int)(v10 - 48) + v13 * 10.0;
        --v22;
        if (v13 > 0.0) {
          LODWORD(v14) = v14 + 1;
        }
      }
      int v26 = (char)*++v8;
      unsigned int v10 = v26;
      if (v26 <= 47)
      {
        int v25 = 0;
        goto LABEL_82;
      }
    }
    int v16 = 1;
  }
  else
  {
    int v22 = 0;
    unsigned int v8 = (unsigned __int8 *)v11;
  }
  if (v10 != 101 && v10 != 69)
  {
    uint64_t v47 = v21;
    uint64_t v48 = result;
    int v46 = v9;
    if ((v16 & 1) == 0)
    {
      if (v18)
      {
        if (v6 == 45) {
          uint64_t result = sub_100008A30(a3, -(uint64_t)v17);
        }
        else {
          uint64_t result = sub_100008AB0(a3, v17);
        }
        if ((result & 1) == 0)
        {
          if (*(_DWORD *)(v48 + 48)) {
            __assert_rtn("ParseNumber", "reader.h", 1731, "!HasParseError()");
          }
          *(_DWORD *)(v48 + 48) = 16;
          *(void *)(v48 + 56) = v47;
        }
        goto LABEL_97;
      }
      uint64_t result = sub_100007EB4((void *)(a3 + 40), 1);
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      if (v6 == 45)
      {
        *(void *)uint64_t result = -v46;
        BOOL v45 = -v46 < 0;
        __int16 v38 = 182;
      }
      else
      {
        *(void *)uint64_t result = v46;
        BOOL v45 = v46 < 0;
        __int16 v38 = 470;
      }
      if (!v45) {
        __int16 v38 = 502;
      }
LABEL_96:
      *(_WORD *)(result + 22) = v38;
      goto LABEL_97;
    }
    int v25 = 0;
LABEL_82:
    int v34 = v22 + v25;
    if (v34 > -309)
    {
      if ((v34 & 0x80000000) == 0)
      {
        if (v34 >= 0x135)
        {
          unint64_t v41 = "n >= 0 && n <= 308";
          int v42 = 48;
          unint64_t v43 = "pow10.h";
          long long v44 = "Pow10";
          goto LABEL_114;
        }
        double v35 = v13 * dbl_100064498[v34];
        goto LABEL_90;
      }
      int v36 = -v34;
    }
    else
    {
      double v35 = 0.0;
      if (v34 < 0xFFFFFD98)
      {
LABEL_93:
        uint64_t result = sub_100007EB4((void *)(a3 + 40), 1);
        double v37 = -v35;
        if (v6 != 45) {
          double v37 = v35;
        }
        *(void *)(result + 8) = 0;
        *(void *)(result + 16) = 0;
        *(double *)uint64_t result = v37;
        __int16 v38 = 534;
        goto LABEL_96;
      }
      double v13 = v13 / 1.0e308;
      int v36 = -308 - v34;
    }
    double v35 = v13 / dbl_100064498[v36];
LABEL_90:
    if (v35 > 1.79769313e308)
    {
      if (!*(_DWORD *)(result + 48)) {
        goto LABEL_92;
      }
      unint64_t v41 = "!HasParseError()";
      int v42 = 1707;
      unint64_t v43 = "reader.h";
      long long v44 = "ParseNumber";
LABEL_114:
      __assert_rtn(v44, v43, v42, v41);
    }
    goto LABEL_93;
  }
  long long v28 = v8 + 1;
  int v27 = v8[1];
  unint64_t v9 = v9;
  if (v18) {
    unint64_t v9 = v17;
  }
  if (!v16) {
    double v13 = (double)v9;
  }
  if (v27 == 43 || v27 == 45)
  {
    long long v28 = v8 + 2;
    int v25 = v8[2] - 48;
    if (v25 < 0xA)
    {
      v8 += 3;
      if (v27 == 43) {
        goto LABEL_69;
      }
      if (v22 >= 1) {
        __assert_rtn("ParseNumber", "reader.h", 1639, "expFrac <= 0");
      }
      int v30 = *v8;
      if ((v30 - 48) > 9)
      {
LABEL_77:
        int v32 = 1;
      }
      else
      {
        while (1)
        {
          int v25 = v30 + 10 * v25 - 48;
          if (v25 > (v22 + 2147483639) / 10) {
            break;
          }
          int v31 = *++v8;
          int v30 = v31;
          if ((v31 - 48) >= 0xA) {
            goto LABEL_77;
          }
        }
        do
        {
          int v33 = *++v8;
          int v32 = 1;
        }
        while ((v33 - 48) < 0xA);
      }
      goto LABEL_80;
    }
    goto LABEL_109;
  }
  int v25 = v27 - 48;
  if ((v27 - 48) > 9)
  {
LABEL_109:
    unsigned int v8 = v28;
    if (*(_DWORD *)(result + 48)) {
      __assert_rtn("ParseNumber", "reader.h", 1660, "!HasParseError()");
    }
    uint64_t v39 = (unsigned __int8 *)(v28 - v5);
    int v40 = 15;
LABEL_111:
    *(_DWORD *)(result + 48) = v40;
    *(void *)(result + 56) = v39;
    goto LABEL_97;
  }
  v8 += 2;
  do
  {
LABEL_69:
    int v29 = *v8;
    if ((v29 - 48) > 9)
    {
      int v32 = 0;
LABEL_80:
      if (v32) {
        int v25 = -v25;
      }
      goto LABEL_82;
    }
    ++v8;
    int v25 = v29 + 10 * v25 - 48;
  }
  while (v25 <= 308 - v22);
  if (*(_DWORD *)(result + 48)) {
    __assert_rtn("ParseNumber", "reader.h", 1655, "!HasParseError()");
  }
LABEL_92:
  *(_DWORD *)(result + 48) = 13;
  *(void *)(result + 56) = v21;
LABEL_97:
  *a2 = v8;
  a2[1] = v5;
  return result;
}

void sub_10000F3C8(_Unwind_Exception *a1)
{
  void *v1 = v3;
  v1[1] = v2;
  _Unwind_Resume(a1);
}

unsigned char *sub_10000F3E8(unsigned char *result, uint64_t *a2, void **a3)
{
  uint64_t v5 = (uint64_t)result;
  while (1)
  {
    while (1)
    {
      int v6 = (char *)*a2;
      unsigned int v7 = *(unsigned __int8 *)*a2;
      if (v7 == 92) {
        break;
      }
      if (v7 == 34)
      {
        *a2 = (uint64_t)(v6 + 1);
        uint64_t result = (unsigned char *)sub_100008520(*a3, 1);
        *uint64_t result = 0;
        ++*((_DWORD *)a3 + 2);
        return result;
      }
      if (v7 <= 0x1F)
      {
        int v14 = *(_DWORD *)(v5 + 48);
        if (*(unsigned char *)*a2)
        {
          if (v14) {
            sub_100062428();
          }
          unsigned int v15 = &v6[-a2[1]];
          int v16 = 12;
        }
        else
        {
          if (v14) {
            sub_1000623FC();
          }
          unsigned int v15 = &v6[-a2[1]];
          int v16 = 11;
        }
        *(_DWORD *)(v5 + 48) = v16;
        goto LABEL_25;
      }
      *a2 = (uint64_t)(v6 + 1);
      char v8 = *v6;
LABEL_6:
      uint64_t result = (unsigned char *)sub_100008520(*a3, 1);
      *uint64_t result = v8;
      ++*((_DWORD *)a3 + 2);
    }
    uint64_t v9 = a2[1];
    *a2 = (uint64_t)(v6 + 1);
    uint64_t v10 = v6[1];
    char v8 = byte_100064E40[v10];
    if (v8)
    {
      *a2 = (uint64_t)(v6 + 2);
      goto LABEL_6;
    }
    uint64_t v11 = (uint64_t)&v6[-v9];
    if (v10 != 117) {
      break;
    }
    *a2 = (uint64_t)(v6 + 2);
    uint64_t v18 = (uint64_t)&v6[-v9];
    uint64_t result = (unsigned char *)sub_100008318(v5, a2, v11);
    if (*(_DWORD *)(v5 + 48)) {
      return result;
    }
    unsigned int v12 = result;
    if (result >> 10 == 54)
    {
      int v17 = (int)result;
      uint64_t v13 = *a2;
      if (*(unsigned char *)*a2 != 92) {
        goto LABEL_31;
      }
      *a2 = v13 + 1;
      if (*(unsigned char *)(v13 + 1) != 117) {
        goto LABEL_31;
      }
      *a2 = v13 + 2;
      uint64_t result = (unsigned char *)sub_100008318(v5, a2, v18);
      if (*(_DWORD *)(v5 + 48)) {
        return result;
      }
      if ((result - 57344) <= 0xFFFFFBFF)
      {
LABEL_31:
        *(_DWORD *)(v5 + 48) = 9;
        unsigned int v15 = (char *)v18;
LABEL_25:
        *(void *)(v5 + 56) = v15;
        return result;
      }
      unsigned int v12 = ((result - 56320) | ((v17 << 10) - 56623104)) + 0x10000;
    }
    uint64_t result = sub_1000083BC(a3, v12);
  }
  if (*(_DWORD *)(v5 + 48)) {
    sub_100062454();
  }
  *(_DWORD *)(v5 + 48) = 10;
  *(void *)(v5 + 56) = v11;
  return result;
}

void sub_10000F5F4(uint64_t a1)
{
  sub_100003470(v4, "execute");
  sub_100003470(__p, "Execute a CAT file.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10000F66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000F6A0(uint64_t a1, _DWORD *a2)
{
  sub_100003470(v13, "--randomSeed");
  char v3 = siri::dialogengine::OptionExists();
  char v4 = v3;
  if ((char)v14 < 0)
  {
    operator delete(v13[0]);
    if (v4) {
      goto LABEL_3;
    }
  }
  else if (v3)
  {
LABEL_3:
    sub_100003470(__p, "--randomSeed");
    siri::dialogengine::GetOption();
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    unint64_t v5 = v14;
    if ((v14 & 0x80u) != 0) {
      unint64_t v5 = (unint64_t)v13[1];
    }
    if (v5)
    {
      siri::dialogengine::StringToUInt();
      char v8 = sub_1000042E0(&std::cout, (uint64_t)"Error: the value of --randomSeed is not a number or is out of range", 67);
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
      uint64_t v9 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      if (a2) {
        *a2 = 0;
      }
    }
    else
    {
      int v6 = sub_1000042E0(&std::cout, (uint64_t)"Error: no value specified for option --randomSeed", 49);
      std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
      unsigned int v7 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      if (a2) {
        *a2 = 0;
      }
    }
    if ((char)v14 < 0) {
      operator delete(v13[0]);
    }
    return 0;
  }
  if (a2) {
    *a2 = 0;
  }
  return 0;
}

void sub_10000F8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_10000F934(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_10000F9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_10000F9EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  if (*(char *)(*(void *)a1 + 71) < 0) {
    sub_100003600(&__dst, *(void **)(v4 + 48), *(void *)(v4 + 56));
  }
  else {
    std::string __dst = *(std::string *)(v4 + 48);
  }
  memset(&__p, 0, sizeof(__p));
  if (siri::dialogengine::FileExists())
  {
    siri::dialogengine::ReadFileToString();
    goto LABEL_6;
  }
  sub_100003470(&v104, "--json");
  int v7 = siri::dialogengine::OptionExists();
  int v8 = v7;
  if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v7) {
      goto LABEL_13;
    }
LABEL_27:
    sub_100003470(&v104, "--renderVisualCat");
    siri::dialogengine::GetOption();
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    sub_100003470(&v104, "--renderVisualCat");
    if (siri::dialogengine::OptionExists())
    {
      if ((SBYTE7(v96) & 0x80u) == 0) {
        locale = (std::locale::__imp *)BYTE7(v96);
      }
      else {
        locale = v95[1].__locale_;
      }
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v104.__r_.__value_.__l.__data_);
      }
      if (!locale)
      {
        uint64_t v10 = sub_1000042E0(&std::cout, (uint64_t)"Error: No path given for rendered output", 40);
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
        uint64_t v11 = std::locale::use_facet((const std::locale *)&v104, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)&v104);
        std::ostream::put();
        std::ostream::flush();
        sub_100003470((void *)a2, (char *)&unk_10006DFE2);
LABEL_282:
        if ((SBYTE7(v96) & 0x80000000) == 0) {
          goto LABEL_285;
        }
        uint64_t v39 = v95[0].__locale_;
        goto LABEL_284;
      }
    }
    else if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    sub_100003470(v89, "--templateDir");
    siri::dialogengine::GetOption();
    siri::dialogengine::ExpandPath();
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v89[2]) < 0) {
      operator delete(v89[0]);
    }
    sub_100003470(&v104, "--catId");
    siri::dialogengine::GetOption();
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    sub_100003470(&v104, "--visualCatId");
    siri::dialogengine::GetOption();
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    sub_100003470(&v104, "--locale");
    siri::dialogengine::GetOption();
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    sub_100003470(v89, "--params");
    siri::dialogengine::GetMultipleOptions();
    sub_100003470(v80, " ");
    siri::dialogengine::StringJoin();
    if ((char)v81 < 0) {
      operator delete(v80[0]);
    }
    v80[0] = &v104;
    sub_100003B14((void ***)v80);
    if (SHIBYTE(v89[2]) < 0) {
      operator delete(v89[0]);
    }
    sub_100003470(v89, "--globalParams");
    siri::dialogengine::GetMultipleOptions();
    sub_100003470(v78, " ");
    siri::dialogengine::StringJoin();
    if (SHIBYTE(v79) < 0) {
      operator delete(v78[0]);
    }
    v78[0] = &v104;
    sub_100003B14((void ***)v78);
    if (SHIBYTE(v89[2]) < 0) {
      operator delete(v89[0]);
    }
    sub_100003470(&v104, "--resetState");
    int v24 = siri::dialogengine::OptionExists();
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    sub_100003470(&v104, "--test");
    int v25 = siri::dialogengine::OptionExists();
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    sub_100003470(&v104, "--debug");
    int v26 = siri::dialogengine::OptionExists();
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    sub_100003470(&v104, "--createTrace");
    int v27 = siri::dialogengine::OptionExists();
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    sub_100003470(&v104, "--labelMode");
    int v28 = siri::dialogengine::OptionExists();
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    uint64_t v29 = v101;
    if ((v101 & 0x80u) != 0) {
      uint64_t v29 = v100;
    }
    if (!v29)
    {
      int v40 = sub_1000042E0(&std::cout, (uint64_t)"Error: no --templateDir option specified", 40);
      std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(*v40 - 24)));
      unint64_t v41 = std::locale::use_facet((const std::locale *)&v104, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
      std::locale::~locale((std::locale *)&v104);
      std::ostream::put();
      std::ostream::flush();
      sub_100003470((void *)a2, (char *)&unk_10006DFE2);
      goto LABEL_270;
    }
    int v74 = v28;
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v88.__r_.__value_.__l.__size_;
    }
    std::string::size_type v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v31 = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      if (v31)
      {
        int v32 = sub_1000042E0(&std::cout, (uint64_t)"Warning: Both --catId and --visualCatId options specified; Ignoring --visualCatId",
                81);
        std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
        int v33 = std::locale::use_facet((const std::locale *)&v104, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
        std::locale::~locale((std::locale *)&v104);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          *__str.__r_.__value_.__l.__data_ = 0;
          __str.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          __str.__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
        }
      }
    }
    else
    {
      if (!v31)
      {
        long long v58 = "Error: no --catId or --visualCatId option specified";
        uint64_t v59 = 51;
        goto LABEL_185;
      }
      std::string::operator=(&v88, &__str);
    }
    unint64_t v42 = v86;
    if ((v86 & 0x80u) != 0) {
      unint64_t v42 = (unint64_t)v85[1];
    }
    if (v42)
    {
      unsigned int v77 = 0;
      sub_100003470(&v104, "--randomSeed");
      int v43 = siri::dialogengine::OptionExists();
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v104.__r_.__value_.__l.__data_);
      }
      if (!v43 || (sub_10000F6A0(a1, &v77) & 1) != 0)
      {
        memset(v89, 0, sizeof(v89));
        uint64_t v90 = 256;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0u;
        long long v105 = 0u;
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        uint64_t v106 = 0;
        uint64_t v107 = 512;
        int v108 = 324;
        __int16 v109 = 0x2000;
        uint64_t v110 = 4;
        sub_10001193C(&v104);
        sub_100014614(&v104, 5);
        sub_100014940((uint64_t *)&v104, (uint64_t)"templateDir", 0xBu);
        if ((v101 & 0x80u) == 0) {
          long long v44 = (const char *)&v99;
        }
        else {
          long long v44 = (const char *)v99;
        }
        unsigned int v45 = strlen(v44);
        sub_1000143F8((uint64_t *)&v104, (uint64_t)v44, v45);
        sub_100014614(&v104, 5);
        sub_100014940((uint64_t *)&v104, (uint64_t)"catId", 5u);
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v46 = &v88;
        }
        else {
          int v46 = (std::string *)v88.__r_.__value_.__r.__words[0];
        }
        unsigned int v47 = strlen((const char *)v46);
        sub_1000143F8((uint64_t *)&v104, (uint64_t)v46, v47);
        sub_100014614(&v104, 5);
        sub_100014940((uint64_t *)&v104, (uint64_t)"locale", 6u);
        if ((v86 & 0x80u) == 0) {
          uint64_t v48 = v85;
        }
        else {
          uint64_t v48 = (void **)v85[0];
        }
        unsigned int v49 = strlen((const char *)v48);
        sub_1000143F8((uint64_t *)&v104, (uint64_t)v48, v49);
        uint64_t v50 = v84;
        if ((v84 & 0x80u) != 0) {
          uint64_t v50 = v83;
        }
        if (v50)
        {
          sub_100014614(&v104, 5);
          sub_100014940((uint64_t *)&v104, (uint64_t)"parameters", 0xAu);
          sub_100014614(&v104, 5);
          sub_100014940((uint64_t *)&v104, (uint64_t)"<PARAMS>", 8u);
        }
        unint64_t v51 = v81;
        if ((v81 & 0x80u) != 0) {
          unint64_t v51 = (unint64_t)v80[1];
        }
        if (v51)
        {
          sub_100014614(&v104, 5);
          sub_100014940((uint64_t *)&v104, (uint64_t)"globalParameters", 0x10u);
          sub_100014614(&v104, 5);
          sub_100014940((uint64_t *)&v104, (uint64_t)"<GLOBALPARAMS>", 0xEu);
        }
        if (v77)
        {
          sub_100014614(&v104, 5);
          sub_100014940((uint64_t *)&v104, (uint64_t)"randomSeed", 0xAu);
          sub_1000119DC(&v104, v77);
        }
        if (v24)
        {
          sub_100014614(&v104, 5);
          sub_100014940((uint64_t *)&v104, (uint64_t)"resetState", 0xAu);
          sub_100014614(&v104, 2);
          sub_100015D9C((uint64_t *)&v104, 1);
        }
        if (v25)
        {
          sub_100014614(&v104, 5);
          sub_100014940((uint64_t *)&v104, (uint64_t)"test", 4u);
          sub_100014614(&v104, 2);
          sub_100015D9C((uint64_t *)&v104, 1);
        }
        if (v26)
        {
          sub_100014614(&v104, 5);
          sub_100014940((uint64_t *)&v104, (uint64_t)"debug", 5u);
          sub_100014614(&v104, 2);
          sub_100015D9C((uint64_t *)&v104, 1);
        }
        if (v27)
        {
          sub_100014614(&v104, 5);
          sub_100014940((uint64_t *)&v104, (uint64_t)"createTrace", 0xBu);
          sub_100014614(&v104, 2);
          sub_100015D9C((uint64_t *)&v104, 1);
        }
        if (v74)
        {
          sub_100014614(&v104, 5);
          sub_100014940((uint64_t *)&v104, (uint64_t)"labelMode", 9u);
          sub_100014614(&v104, 2);
          sub_100015D9C((uint64_t *)&v104, 1);
        }
        if (!size)
        {
          sub_100011990((uint64_t *)&v104, "requestType");
          sub_100011990((uint64_t *)&v104, "visual");
        }
        int v52 = (std::locale::__imp *)BYTE7(v96);
        if (SBYTE7(v96) < 0) {
          int v52 = v95[1].__locale_;
        }
        if (!v52) {
          goto LABEL_260;
        }
        sub_100014614(&v104, 5);
        sub_100014940((uint64_t *)&v104, (uint64_t)"renderVisualCat", 0xFu);
        if ((SBYTE7(v96) & 0x80u) == 0) {
          unint64_t v53 = (const char *)v95;
        }
        else {
          unint64_t v53 = (const char *)v95[0].__locale_;
        }
        unsigned int v54 = strlen(v53);
        sub_1000143F8((uint64_t *)&v104, (uint64_t)v53, v54);
        sub_100003470(v78, "--renderDarkMode");
        int v55 = siri::dialogengine::OptionExists();
        if (SHIBYTE(v79) < 0) {
          operator delete(v78[0]);
        }
        if (v55)
        {
          sub_100011990((uint64_t *)&v104, "renderDarkMode");
          sub_100014614(&v104, 2);
          sub_100015D9C((uint64_t *)&v104, 1);
        }
        sub_100003470(&v75, "--renderDeviceClass");
        siri::dialogengine::GetOption();
        if (v76 < 0) {
          operator delete(v75.__locale_);
        }
        sub_100003470(&v75, "--renderDeviceClass");
        if (siri::dialogengine::OptionExists())
        {
          if (v79 >= 0) {
            long long v56 = (void *)HIBYTE(v79);
          }
          else {
            long long v56 = v78[1];
          }
          if (v76 < 0) {
            operator delete(v75.__locale_);
          }
          if (v56)
          {
            sub_100011990((uint64_t *)&v104, "renderDeviceClass");
            if (v79 >= 0) {
              uint64_t v57 = (char *)v78;
            }
            else {
              uint64_t v57 = (char *)v78[0];
            }
            sub_100011990((uint64_t *)&v104, v57);
          }
        }
        else if (v76 < 0)
        {
          operator delete(v75.__locale_);
        }
        if (SHIBYTE(v79) < 0) {
          operator delete(v78[0]);
        }
        sub_100003470(&v75, "--renderDeviceTrain");
        siri::dialogengine::GetOption();
        if (v76 < 0) {
          operator delete(v75.__locale_);
        }
        sub_100003470(&v75, "--renderDeviceTrain");
        if (siri::dialogengine::OptionExists())
        {
          if (v79 >= 0) {
            long long v62 = (void *)HIBYTE(v79);
          }
          else {
            long long v62 = v78[1];
          }
          if (v76 < 0) {
            operator delete(v75.__locale_);
          }
          if (v62)
          {
            sub_100011990((uint64_t *)&v104, "renderDeviceTrain");
            if (v79 >= 0) {
              uint64_t v63 = (char *)v78;
            }
            else {
              uint64_t v63 = (char *)v78[0];
            }
            sub_100011990((uint64_t *)&v104, v63);
            if (SHIBYTE(v79) < 0) {
              operator delete(v78[0]);
            }
            sub_100003470(&v75, "--renderOrientation");
            siri::dialogengine::GetOption();
            if (v76 < 0) {
              operator delete(v75.__locale_);
            }
            sub_100003470(&v75, "--renderOrientation");
            if (siri::dialogengine::OptionExists())
            {
              if (v79 >= 0) {
                long long v64 = (void *)HIBYTE(v79);
              }
              else {
                long long v64 = v78[1];
              }
              if (v76 < 0) {
                operator delete(v75.__locale_);
              }
              if (v64)
              {
                sub_100011990((uint64_t *)&v104, "renderOrientation");
                if (v79 >= 0) {
                  long long v65 = (char *)v78;
                }
                else {
                  long long v65 = (char *)v78[0];
                }
                sub_100011990((uint64_t *)&v104, v65);
              }
            }
            else if (v76 < 0)
            {
              operator delete(v75.__locale_);
            }
            if (SHIBYTE(v79) < 0) {
              operator delete(v78[0]);
            }
            sub_100003470(&v75, "--renderContext");
            siri::dialogengine::GetOption();
            if (v76 < 0) {
              operator delete(v75.__locale_);
            }
            sub_100003470(&v75, "--renderContext");
            if (siri::dialogengine::OptionExists())
            {
              if (v79 >= 0) {
                int v69 = (void *)HIBYTE(v79);
              }
              else {
                int v69 = v78[1];
              }
              if (v76 < 0) {
                operator delete(v75.__locale_);
              }
              if (v69)
              {
                sub_100011990((uint64_t *)&v104, "renderContext");
                if (v79 >= 0) {
                  uint64_t v70 = (char *)v78;
                }
                else {
                  uint64_t v70 = (char *)v78[0];
                }
                sub_100011990((uint64_t *)&v104, v70);
              }
            }
            else if (v76 < 0)
            {
              operator delete(v75.__locale_);
            }
            if (SHIBYTE(v79) < 0) {
              operator delete(v78[0]);
            }
            sub_100003470(&v75, "--renderScreenSize");
            siri::dialogengine::GetOption();
            if (v76 < 0) {
              operator delete(v75.__locale_);
            }
            sub_100003470(&v75, "--renderScreenSize");
            if (siri::dialogengine::OptionExists())
            {
              if (v79 >= 0) {
                uint64_t v71 = (void *)HIBYTE(v79);
              }
              else {
                uint64_t v71 = v78[1];
              }
              if (v76 < 0) {
                operator delete(v75.__locale_);
              }
              if (v71)
              {
                sub_100011990((uint64_t *)&v104, "renderScreenSize");
                if (v79 >= 0) {
                  v72 = (char *)v78;
                }
                else {
                  v72 = (char *)v78[0];
                }
                sub_100011990((uint64_t *)&v104, v72);
              }
            }
            else if (v76 < 0)
            {
              operator delete(v75.__locale_);
            }
            if (SHIBYTE(v79) < 0) {
              operator delete(v78[0]);
            }
LABEL_260:
            sub_100011A5C(&v104);
            unint64_t v73 = (char *)sub_1000118F8(v89);
            sub_100003470((void *)a2, v73);
            sub_100003470(&v75, "\"<PARAMS>\"");
            siri::dialogengine::StringReplace();
            if (*(char *)(a2 + 23) < 0) {
              operator delete(*(void **)a2);
            }
            *(_OWORD *)a2 = *(_OWORD *)v78;
            *(void *)(a2 + 16) = v79;
            HIBYTE(v79) = 0;
            LOBYTE(v78[0]) = 0;
            if (v76 < 0) {
              operator delete(v75.__locale_);
            }
            sub_100003470(&v75, "\"<GLOBALPARAMS>\"");
            siri::dialogengine::StringReplace();
            if (*(char *)(a2 + 23) < 0) {
              operator delete(*(void **)a2);
            }
            *(_OWORD *)a2 = *(_OWORD *)v78;
            *(void *)(a2 + 16) = v79;
            HIBYTE(v79) = 0;
            LOBYTE(v78[0]) = 0;
            if ((v76 & 0x80000000) == 0) {
              goto LABEL_269;
            }
            unint64_t v68 = v75.__locale_;
            goto LABEL_268;
          }
        }
        else if (v76 < 0)
        {
          operator delete(v75.__locale_);
        }
        long long v66 = sub_1000042E0(&std::cout, (uint64_t)"Error: no --renderDeviceTrain option specified", 46);
        std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(*v66 - 24)));
        uint64_t v67 = std::locale::use_facet(&v75, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
        std::locale::~locale(&v75);
        std::ostream::put();
        std::ostream::flush();
        sub_100003470((void *)a2, (char *)&unk_10006DFE2);
        if ((SHIBYTE(v79) & 0x80000000) == 0)
        {
LABEL_269:
          sub_100006BE8((uint64_t)&v104.__r_.__value_.__l.__size_);
          sub_100006BE8((uint64_t)v89);
          goto LABEL_270;
        }
        unint64_t v68 = (std::locale::__imp *)v78[0];
LABEL_268:
        operator delete(v68);
        goto LABEL_269;
      }
      sub_100003470((void *)a2, (char *)&unk_10006DFE2);
LABEL_270:
      if ((char)v81 < 0) {
        operator delete(v80[0]);
      }
      if ((char)v84 < 0) {
        operator delete(v82);
      }
      if ((char)v86 < 0) {
        operator delete(v85[0]);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if ((char)v101 < 0) {
        operator delete(v99);
      }
      goto LABEL_282;
    }
    long long v58 = "Error: no --locale option specified";
    uint64_t v59 = 35;
LABEL_185:
    std::string::size_type v60 = sub_1000042E0(&std::cout, (uint64_t)v58, v59);
    std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(void *)(*v60 - 24)));
    unint64_t v61 = std::locale::use_facet((const std::locale *)&v104, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
    std::locale::~locale((std::locale *)&v104);
    std::ostream::put();
    std::ostream::flush();
    sub_100003470((void *)a2, (char *)&unk_10006DFE2);
    goto LABEL_270;
  }
  operator delete(v104.__r_.__value_.__l.__data_);
  if (!v8) {
    goto LABEL_27;
  }
LABEL_13:
  sub_100003470(v89, "--json");
  siri::dialogengine::GetOption();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  std::string __dst = v104;
  *((unsigned char *)&v104.__r_.__value_.__s + 23) = 0;
  v104.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v89[2]) < 0) {
    operator delete(v89[0]);
  }
  if (siri::dialogengine::FileExists())
  {
    siri::dialogengine::ReadFileToString();
LABEL_6:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v104;
    LODWORD(v88.__r_.__value_.__l.__data_) = 0;
    sub_100003470(&v104, "--randomSeed");
    int v5 = siri::dialogengine::OptionExists();
    int v6 = v5;
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v104.__r_.__value_.__l.__data_);
      if (!v6) {
        goto LABEL_21;
      }
    }
    else if (!v5)
    {
      goto LABEL_21;
    }
    if ((sub_10000F6A0(a1, &v88) & 1) == 0)
    {
      sub_100003470((void *)a2, (char *)&unk_10006DFE2);
      goto LABEL_285;
    }
LABEL_21:
    sub_100003470(v89, "--templateDir");
    siri::dialogengine::GetOption();
    siri::dialogengine::ExpandPath();
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v89[2]) < 0)
    {
      operator delete(v89[0]);
      if (v6)
      {
LABEL_41:
        uint64_t v13 = sub_100006B54((uint64_t)&v104, 0, 1024, 0);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        v89[0] = p_p;
        v89[1] = p_p;
        if (*(_DWORD *)(sub_10000E450(v13, v89) + 88))
        {
          if (v111 > 0x11) {
            unsigned int v15 = "Unknown error.";
          }
          else {
            unsigned int v15 = off_10007CD68[v111];
          }
          sub_100003470(v89, v15);
          int v34 = sub_1000042E0(&std::cout, (uint64_t)"Error: Invalid JSON request - ignoring request: ", 48);
          if (SHIBYTE(v89[2]) >= 0) {
            double v35 = v89;
          }
          else {
            double v35 = (void **)v89[0];
          }
          if (SHIBYTE(v89[2]) >= 0) {
            uint64_t v36 = HIBYTE(v89[2]);
          }
          else {
            uint64_t v36 = (uint64_t)v89[1];
          }
          double v37 = sub_1000042E0(v34, (uint64_t)v35, v36);
          std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24)));
          __int16 v38 = std::locale::use_facet(v95, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
          std::locale::~locale(v95);
          std::ostream::put();
          std::ostream::flush();
          sub_100003470((void *)a2, (char *)&unk_10006DFE2);
          if (SHIBYTE(v89[2]) < 0) {
            operator delete(v89[0]);
          }
          sub_100008BB4((uint64_t)&v104);
          goto LABEL_116;
        }
        if (v6)
        {
          sub_100003470(v89, "randomSeed");
          siri::dialogengine::SetJSONUintVal();
          if (SHIBYTE(v89[2]) < 0) {
            operator delete(v89[0]);
          }
        }
        uint64_t v16 = v101;
        if ((v101 & 0x80u) != 0) {
          uint64_t v16 = v100;
        }
        if (v16)
        {
          sub_100003470(v89, "templateDir");
          siri::dialogengine::SetJSONString();
          if (SHIBYTE(v89[2]) < 0) {
            operator delete(v89[0]);
          }
        }
        *(_OWORD *)&v95[0].__locale_ = 0u;
        long long v96 = 0u;
        uint64_t v97 = 0;
        uint64_t v98 = 256;
        memset(&v89[1], 0, 32);
        v89[0] = v95;
        uint64_t v90 = 0;
        uint64_t v91 = 512;
        int v92 = 324;
        __int16 v93 = 0x2000;
        uint64_t v94 = 4;
        sub_100011534((unsigned int *)&v104, (uint64_t *)v89);
        int v17 = (const std::string::value_type *)sub_1000118F8(v95);
        std::string::assign(&__p, v17);
        sub_100006BE8((uint64_t)&v89[1]);
        sub_100006BE8((uint64_t)v95);
        sub_100008BB4((uint64_t)&v104);
LABEL_56:
        *(std::string *)a2 = __p;
        memset(&__p, 0, sizeof(__p));
LABEL_116:
        if (((char)v101 & 0x80000000) == 0) {
          goto LABEL_285;
        }
        uint64_t v39 = v99;
LABEL_284:
        operator delete(v39);
        goto LABEL_285;
      }
    }
    else if (v6)
    {
      goto LABEL_41;
    }
    uint64_t v12 = v101;
    if ((v101 & 0x80u) != 0) {
      uint64_t v12 = v100;
    }
    if (!v12) {
      goto LABEL_56;
    }
    goto LABEL_41;
  }
  uint64_t v18 = sub_1000042E0(&std::cout, (uint64_t)"Error: Specified JSON file does not exist (", 43);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = __dst.__r_.__value_.__l.__size_;
  }
  uint64_t v21 = sub_1000042E0(v18, (uint64_t)p_dst, v20);
  int v22 = sub_1000042E0(v21, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
  uint64_t v23 = std::locale::use_facet((const std::locale *)&v104, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale((std::locale *)&v104);
  std::ostream::put();
  std::ostream::flush();
  sub_100003470((void *)a2, (char *)&unk_10006DFE2);
LABEL_285:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_1000110B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::locale a61,uint64_t a62,int a63)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_100006BE8(v74);
  sub_100006BE8((uint64_t)&a51);
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a72 < 0) {
    operator delete(a71);
  }
  if (a66 < 0) {
    operator delete(a61.__locale_);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (*(char *)(v75 - 217) < 0) {
    operator delete(*(void **)(v75 - 240));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100011534(unsigned int *a1, uint64_t *a2)
{
  __int16 v2 = *((_WORD *)a1 + 11);
  switch(v2 & 7)
  {
    case 0:
      sub_100014614((void **)a2, 0);
      return sub_100014778(a2);
    case 1:
      sub_100014614((void **)a2, 1);
      int v6 = a2;
      int v7 = 0;
      goto LABEL_7;
    case 2:
      sub_100014614((void **)a2, 2);
      int v6 = a2;
      int v7 = 1;
LABEL_7:
      return sub_100015D9C(v6, v7);
    case 3:
      if (!sub_10001193C((void **)a2)) {
        return 0;
      }
      if (*((_WORD *)a1 + 11) != 3) {
        sub_1000625E0();
      }
      uint64_t v8 = *((void *)a1 + 1);
      while (2)
      {
        if (v8 == *((void *)a1 + 1) + 48 * *a1)
        {
          return sub_100011A5C((void **)a2);
        }
        if ((*(_WORD *)(v8 + 22) & 0x400) == 0) {
          sub_100062588();
        }
        uint64_t v9 = sub_100013DD0(v8);
        unsigned int v10 = sub_100013FBC((unsigned int *)v8);
        if (sub_1000143F8(a2, v9, v10))
        {
          uint64_t v11 = v8 + 24;
          if (sub_100011534(v11, a2))
          {
            uint64_t v8 = v11 + 24;
            if (*((_WORD *)a1 + 11) != 3) {
              sub_1000625B4();
            }
            continue;
          }
        }
        break;
      }
      return 0;
    case 4:
      if (!sub_1000142E8((void **)a2)) {
        return 0;
      }
      if (*((_WORD *)a1 + 11) != 4) {
        sub_100062638();
      }
      uint64_t v12 = *((void *)a1 + 1);
      break;
    case 5:
      uint64_t v13 = sub_100013DD0((uint64_t)a1);
      unsigned int v14 = sub_100013FBC(a1);
      return sub_1000143F8(a2, v13, v14);
    case 6:
      if ((*((_WORD *)a1 + 11) & 0x200) != 0)
      {
        double v16 = *(double *)a1;
        sub_100014614((void **)a2, 6);
        return sub_100014A98((uint64_t)a2, v16);
      }
      else if ((v2 & 0x20) != 0)
      {
        unsigned int v17 = *a1;
        return sub_100014454((void **)a2, v17);
      }
      else if ((v2 & 0x40) != 0)
      {
        unsigned int v18 = *a1;
        return sub_1000119DC((void **)a2, v18);
      }
      else
      {
        unint64_t v15 = *(void *)a1;
        if ((v2 & 0x80) != 0)
        {
          return sub_1000144F4((void **)a2, v15);
        }
        else
        {
          return sub_100014594((void **)a2, v15);
        }
      }
    default:
      sub_10006255C();
  }
  while (v12 != *((void *)a1 + 1) + 24 * *a1)
  {
    if (!sub_100011534(v12, a2)) {
      return 0;
    }
    v12 += 24;
    if (*((_WORD *)a1 + 11) != 4) {
      sub_10006260C();
    }
  }
  return sub_100014340((void **)a2);
}

uint64_t sub_1000118F8(void *a1)
{
  *(unsigned char *)sub_100008520(a1, 1) = 0;
  uint64_t result = a1[2];
  uint64_t v3 = a1[3];
  if (v3 == result) {
    sub_100062110();
  }
  a1[3] = v3 - 1;
  return result;
}

uint64_t sub_10001193C(void **a1)
{
  sub_100014614(a1, 3);
  uint64_t v2 = sub_100014808(a1 + 1, 1);
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 0;
  *(unsigned char *)sub_100008520(*a1, 1) = 123;
  return 1;
}

uint64_t sub_100011990(uint64_t *a1, char *__s)
{
  unsigned int v4 = strlen(__s);
  return sub_1000143F8(a1, (uint64_t)__s, v4);
}

uint64_t sub_1000119DC(void **a1, unsigned int a2)
{
  sub_100014614(a1, 6);
  unsigned int v4 = (unsigned char *)sub_100008520(*a1, 10);
  int v5 = sub_100015480(a2, v4);
  uint64_t v6 = (*a1)[3];
  if (v6 - (*a1)[2] < (unint64_t)(v4 - v5 + 10)) {
    sub_100062110();
  }
  (*a1)[3] = v6 - (v4 - v5) - 10;
  return 1;
}

uint64_t sub_100011A5C(void **a1)
{
  uint64_t v1 = (char *)a1[4];
  if ((unint64_t)(v1 - (char *)a1[3]) <= 0xF) {
    sub_100062664();
  }
  if (*(v1 - 8)) {
    sub_1000626BC();
  }
  uint64_t v4 = *((void *)v1 - 2);
  uint64_t v2 = v1 - 16;
  uint64_t v3 = v4;
  if (v4) {
    sub_100062690();
  }
  a1[4] = v2;
  if (v3)
  {
    *(unsigned char *)sub_100008520(*a1, 1) = 10;
    size_t v6 = ((unint64_t)((char *)a1[4] - (char *)a1[3]) >> 4) * *((unsigned int *)a1 + 16);
    int v7 = *((unsigned __int8 *)a1 + 61);
    uint64_t v8 = (void *)sub_100008520(*a1, v6);
    memset(v8, v7, v6);
  }
  *(unsigned char *)sub_100008520(*a1, 1) = 125;
  return 1;
}

uint64_t sub_100011B14(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_10003B18C())
  {
    sub_10003B17C(a2);
    sub_100003470(&v112, aExecutableComm_2);
    sub_100003470(__p, "execute");
    sub_10003B430();
    if (SHIBYTE(v111[0]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v114) < 0) {
      operator delete(v112.__locale_);
    }
    return 0;
  }
  sub_100003470(&v112, "--debug");
  size_t v6 = (siri::dialogengine::Log *)siri::dialogengine::OptionExists();
  if (SHIBYTE(v114) < 0) {
    operator delete(v112.__locale_);
  }
  siri::dialogengine::Log::SetOutputToStdout(v6, v5);
  sub_100003470(&v112, "--executeVisualCAT");
  int v7 = siri::dialogengine::OptionExists();
  int v8 = v7;
  if (SHIBYTE(v114) < 0)
  {
    operator delete(v112.__locale_);
    if (!v8) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v7)
  {
LABEL_14:
    uint64_t v9 = sub_1000042E0(&std::cout, (uint64_t)"{ \"dialogResult\":", 17);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    unsigned int v10 = std::locale::use_facet(&v112, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v112);
    std::ostream::put();
    std::ostream::flush();
  }
LABEL_15:
  sub_100012BB0((uint64_t)a1, (uint64_t)v93);
  sub_100003470(&v112, "--executeVisualCAT");
  int v11 = siri::dialogengine::OptionExists();
  int v12 = v11;
  if (SHIBYTE(v114) < 0)
  {
    operator delete(v112.__locale_);
    if (!v12) {
      goto LABEL_73;
    }
  }
  else if (!v11)
  {
    goto LABEL_73;
  }
  v91[0] = 0;
  v91[1] = 0;
  uint64_t v92 = 0;
  memset(&v90, 0, sizeof(v90));
  unint64_t v13 = v94;
  if ((v94 & 0x80u) != 0) {
    unint64_t v13 = (unint64_t)v93[1];
  }
  if (v13)
  {
    uint64_t v14 = sub_100006B54((uint64_t)&v112, 0, 1024, 0);
    unint64_t v15 = v93;
    if ((v94 & 0x80u) != 0) {
      unint64_t v15 = (void **)v93[0];
    }
    __p[0] = v15;
    __p[1] = v15;
    if (*(_DWORD *)(sub_10000E450(v14, __p) + 88))
    {
      if (v117 > 0x11) {
        double v16 = "Unknown error.";
      }
      else {
        double v16 = off_10007CD68[v117];
      }
      sub_100003470(__p, v16);
      uint64_t v29 = sub_1000042E0(&std::cout, (uint64_t)"Error: Invalid JSON response: ", 30);
      if (v111[0] >= 0) {
        int v30 = __p;
      }
      else {
        int v30 = (void **)__p[0];
      }
      if (v111[0] >= 0) {
        uint64_t v31 = HIBYTE(v111[0]);
      }
      else {
        uint64_t v31 = (uint64_t)__p[1];
      }
      int v32 = sub_1000042E0(v29, (uint64_t)v30, v31);
      std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
      int v33 = std::locale::use_facet(v103, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
      std::locale::~locale(v103);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v111[0]) < 0) {
        operator delete(__p[0]);
      }
    }
    else if (sub_100013FF4((unsigned int *)&v112, "visual_refs") {
           && *(_WORD *)(sub_100013D3C((unsigned int *)&v112, "visual_refs") + 22) == 4)
    }
    {
      unsigned int v17 = (unsigned int *)sub_100013D3C((unsigned int *)&v112, "visual_refs");
      if (*((_WORD *)v17 + 11) != 4) {
        __assert_rtn("GetArray", "document.h", 1723, "IsArray()");
      }
      if (*v17)
      {
        unsigned int v18 = (unsigned int *)*((void *)v17 + 1);
        unsigned int v19 = &v18[6 * *v17];
        do
        {
          sub_100003470(v103, "id");
          siri::dialogengine::ParseJSONString();
          if (SHIBYTE(v92) < 0) {
            operator delete(v91[0]);
          }
          *(_OWORD *)uint64_t v91 = *(_OWORD *)__p;
          uint64_t v92 = v111[0];
          HIBYTE(v111[0]) = 0;
          LOBYTE(__p[0]) = 0;
          if (SHIBYTE(v103[2].__locale_) < 0) {
            operator delete(v103[0].__locale_);
          }
          sub_100006B54((uint64_t)__p, 0, 1024, 0);
          v103[0].__locale_ = (std::locale::__imp *)"{}";
          v103[1].__locale_ = (std::locale::__imp *)"{}";
          sub_10000E450((uint64_t)__p, v103);
          std::string::size_type v20 = (long long *)sub_100013D3C(v18, "parameters");
          if (!v115) {
            __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
          }
          v103[1].__locale_ = (std::locale::__imp *)"parameters";
          v103[2].__locale_ = (std::locale::__imp *)0x405000000000000;
          v103[0].__locale_ = (std::locale::__imp *)10;
          sub_1000140F4((unsigned int *)__p, (long long *)v103, v20, v115);
          *(_OWORD *)std::string v99 = 0u;
          long long v100 = 0u;
          uint64_t v101 = 0;
          uint64_t v102 = 256;
          *(_OWORD *)&v103[1].__locale_ = 0u;
          long long v104 = 0u;
          uint64_t v105 = 0;
          v103[0].__locale_ = (std::locale::__imp *)v99;
          uint64_t v106 = 512;
          int v107 = 324;
          __int16 v108 = 0x2000;
          uint64_t v109 = 4;
          sub_100011534((unsigned int *)__p, (uint64_t *)v103);
          uint64_t v21 = (char *)sub_1000118F8(v99);
          sub_100003470(&__str, v21);
          siri::dialogengine::StringTrim();
          siri::dialogengine::StringTrim();
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = v97;
          *((unsigned char *)&v97.__r_.__value_.__s + 23) = 0;
          v97.__r_.__value_.__s.__data_[0] = 0;
          if (v96 < 0) {
            operator delete(v95);
          }
          int v22 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
          uint64_t v23 = (void *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          else {
            int64_t size = __str.__r_.__value_.__l.__size_;
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (size >= 1)
          {
            int v26 = (char *)p_str + size;
            int v27 = p_str;
            do
            {
              int v28 = memchr(v27, 123, size);
              if (!v28) {
                break;
              }
              if (*v28 == 123)
              {
                if (v28 == v26 || v28 - (unsigned char *)p_str == -1) {
                  break;
                }
                std::string::basic_string(&v97, &__str, v28 - (unsigned char *)p_str, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v95);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                std::string __str = v97;
                std::string::operator=(&v90, &__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                sub_100006BE8((uint64_t)&v103[1]);
                sub_100006BE8((uint64_t)v99);
                sub_100008BB4((uint64_t)__p);
                sub_100008BB4((uint64_t)&v112);
                __p[0] = 0;
                __p[1] = 0;
                v111[0] = 0;
                sub_100003470(v103, "execute");
                __int16 v38 = __p[1];
                if (__p[1] >= (void *)v111[0])
                {
                  unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
                  unint64_t v41 = v40 + 1;
                  if (v40 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_100003974();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v111[0] - (unint64_t)__p[0]) >> 3) > v41) {
                    unint64_t v41 = 0x5555555555555556 * ((uint64_t)(v111[0] - (unint64_t)__p[0]) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111[0] - (unint64_t)__p[0]) >> 3) >= 0x555555555555555) {
                    unint64_t v42 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v42 = v41;
                  }
                  v116 = v111;
                  if (v42) {
                    int v43 = (std::locale::__imp *)sub_10000398C((uint64_t)v111, v42);
                  }
                  else {
                    int v43 = 0;
                  }
                  long long v44 = (std::locale *)((char *)v43 + 24 * v40);
                  v112.__locale_ = v43;
                  v113 = v44;
                  char v115 = (size_t *)((char *)v43 + 24 * v42);
                  long long v45 = *(_OWORD *)&v103[0].__locale_;
                  v44[2].__locale_ = (std::locale::__imp *)v103[2];
                  *(_OWORD *)&v44->__locale_ = v45;
                  memset(v103, 0, sizeof(v103));
                  v114 = (char *)&v44[3];
                  sub_1000040B8((uint64_t *)__p, &v112);
                  int v46 = __p[1];
                  sub_100004250((uint64_t)&v112);
                  __p[1] = v46;
                  if (SHIBYTE(v103[2].__locale_) < 0) {
                    operator delete(v103[0].__locale_);
                  }
                }
                else
                {
                  long long v39 = *(_OWORD *)&v103[0].__locale_;
                  *((std::locale *)__p[1] + 2) = v103[2];
                  _OWORD *v38 = v39;
                  __p[1] = (char *)v38 + 24;
                }
                sub_100003470(v103, "--templateDir");
                unsigned int v47 = __p[1];
                if (__p[1] >= (void *)v111[0])
                {
                  unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
                  unint64_t v50 = v49 + 1;
                  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_100003974();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v111[0] - (unint64_t)__p[0]) >> 3) > v50) {
                    unint64_t v50 = 0x5555555555555556 * ((uint64_t)(v111[0] - (unint64_t)__p[0]) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111[0] - (unint64_t)__p[0]) >> 3) >= 0x555555555555555) {
                    unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v51 = v50;
                  }
                  v116 = v111;
                  if (v51) {
                    int v52 = (std::locale::__imp *)sub_10000398C((uint64_t)v111, v51);
                  }
                  else {
                    int v52 = 0;
                  }
                  unint64_t v53 = (std::locale *)((char *)v52 + 24 * v49);
                  v112.__locale_ = v52;
                  v113 = v53;
                  char v115 = (size_t *)((char *)v52 + 24 * v51);
                  long long v54 = *(_OWORD *)&v103[0].__locale_;
                  v53[2].__locale_ = (std::locale::__imp *)v103[2];
                  *(_OWORD *)&v53->__locale_ = v54;
                  memset(v103, 0, sizeof(v103));
                  v114 = (char *)&v53[3];
                  sub_1000040B8((uint64_t *)__p, &v112);
                  int v55 = __p[1];
                  sub_100004250((uint64_t)&v112);
                  __p[1] = v55;
                  if (SHIBYTE(v103[2].__locale_) < 0) {
                    operator delete(v103[0].__locale_);
                  }
                }
                else
                {
                  long long v48 = *(_OWORD *)&v103[0].__locale_;
                  *((std::locale *)__p[1] + 2) = v103[2];
                  *unsigned int v47 = v48;
                  __p[1] = (char *)v47 + 24;
                }
                sub_100003470(v99, "--templateDir");
                siri::dialogengine::GetOption();
                long long v56 = __p[1];
                if (__p[1] >= (void *)v111[0])
                {
                  unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
                  unint64_t v59 = v58 + 1;
                  if (v58 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_100003974();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v111[0] - (unint64_t)__p[0]) >> 3) > v59) {
                    unint64_t v59 = 0x5555555555555556 * ((uint64_t)(v111[0] - (unint64_t)__p[0]) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111[0] - (unint64_t)__p[0]) >> 3) >= 0x555555555555555) {
                    unint64_t v60 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v60 = v59;
                  }
                  v116 = v111;
                  if (v60) {
                    unint64_t v61 = (std::locale::__imp *)sub_10000398C((uint64_t)v111, v60);
                  }
                  else {
                    unint64_t v61 = 0;
                  }
                  long long v62 = (std::locale *)((char *)v61 + 24 * v58);
                  v112.__locale_ = v61;
                  v113 = v62;
                  char v115 = (size_t *)((char *)v61 + 24 * v60);
                  long long v63 = *(_OWORD *)&v103[0].__locale_;
                  v62[2].__locale_ = (std::locale::__imp *)v103[2];
                  *(_OWORD *)&v62->__locale_ = v63;
                  memset(v103, 0, sizeof(v103));
                  v114 = (char *)&v62[3];
                  sub_1000040B8((uint64_t *)__p, &v112);
                  long long v64 = __p[1];
                  sub_100004250((uint64_t)&v112);
                  __p[1] = v64;
                  if (SHIBYTE(v103[2].__locale_) < 0) {
                    operator delete(v103[0].__locale_);
                  }
                }
                else
                {
                  long long v57 = *(_OWORD *)&v103[0].__locale_;
                  *((std::locale *)__p[1] + 2) = v103[2];
                  *long long v56 = v57;
                  memset(v103, 0, sizeof(v103));
                  __p[1] = (char *)v56 + 24;
                }
                if (SBYTE7(v100) < 0) {
                  operator delete(v99[0]);
                }
                sub_100003470(v103, "--visualCatId");
                long long v65 = __p[1];
                if (__p[1] >= (void *)v111[0])
                {
                  unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
                  unint64_t v69 = v68 + 1;
                  if (v68 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_100003974();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v111[0] - (unint64_t)__p[0]) >> 3) > v69) {
                    unint64_t v69 = 0x5555555555555556 * ((uint64_t)(v111[0] - (unint64_t)__p[0]) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111[0] - (unint64_t)__p[0]) >> 3) >= 0x555555555555555) {
                    unint64_t v70 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v70 = v69;
                  }
                  v116 = v111;
                  if (v70) {
                    uint64_t v71 = (std::locale::__imp *)sub_10000398C((uint64_t)v111, v70);
                  }
                  else {
                    uint64_t v71 = 0;
                  }
                  v72 = (std::locale *)((char *)v71 + 24 * v68);
                  v112.__locale_ = v71;
                  v113 = v72;
                  char v115 = (size_t *)((char *)v71 + 24 * v70);
                  long long v73 = *(_OWORD *)&v103[0].__locale_;
                  v72[2].__locale_ = (std::locale::__imp *)v103[2];
                  *(_OWORD *)&v72->__locale_ = v73;
                  memset(v103, 0, sizeof(v103));
                  v114 = (char *)&v72[3];
                  sub_1000040B8((uint64_t *)__p, &v112);
                  uint64_t v67 = __p[1];
                  sub_100004250((uint64_t)&v112);
                  __p[1] = v67;
                  if (SHIBYTE(v103[2].__locale_) < 0)
                  {
                    operator delete(v103[0].__locale_);
                    uint64_t v67 = __p[1];
                  }
                }
                else
                {
                  long long v66 = *(_OWORD *)&v103[0].__locale_;
                  *((std::locale *)__p[1] + 2) = v103[2];
                  _OWORD *v65 = v66;
                  uint64_t v67 = (void *)v65 + 3;
                  __p[1] = (char *)v65 + 24;
                }
                if ((unint64_t)v67 >= v111[0])
                {
                  uint64_t v75 = (void *)sub_100003F94((uint64_t *)__p, (long long *)v91);
                }
                else
                {
                  if (SHIBYTE(v92) < 0)
                  {
                    sub_100003600(v67, v91[0], (unint64_t)v91[1]);
                  }
                  else
                  {
                    long long v74 = *(_OWORD *)v91;
                    v67[2] = v92;
                    *(_OWORD *)uint64_t v67 = v74;
                  }
                  uint64_t v75 = v67 + 3;
                }
                __p[1] = v75;
                sub_100003470(v103, "--params");
                char v76 = __p[1];
                if (__p[1] >= (void *)v111[0])
                {
                  unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
                  unint64_t v80 = v79 + 1;
                  if (v79 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_100003974();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v111[0] - (unint64_t)__p[0]) >> 3) > v80) {
                    unint64_t v80 = 0x5555555555555556 * ((uint64_t)(v111[0] - (unint64_t)__p[0]) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111[0] - (unint64_t)__p[0]) >> 3) >= 0x555555555555555) {
                    unint64_t v81 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v81 = v80;
                  }
                  v116 = v111;
                  if (v81) {
                    std::string::size_type v82 = (std::locale::__imp *)sub_10000398C((uint64_t)v111, v81);
                  }
                  else {
                    std::string::size_type v82 = 0;
                  }
                  uint64_t v83 = (std::locale *)((char *)v82 + 24 * v79);
                  v112.__locale_ = v82;
                  v113 = v83;
                  char v115 = (size_t *)((char *)v82 + 24 * v81);
                  long long v84 = *(_OWORD *)&v103[0].__locale_;
                  v83[2].__locale_ = (std::locale::__imp *)v103[2];
                  *(_OWORD *)&v83->__locale_ = v84;
                  memset(v103, 0, sizeof(v103));
                  v114 = (char *)&v83[3];
                  sub_1000040B8((uint64_t *)__p, &v112);
                  std::string::size_type v78 = __p[1];
                  sub_100004250((uint64_t)&v112);
                  __p[1] = v78;
                  if (SHIBYTE(v103[2].__locale_) < 0)
                  {
                    operator delete(v103[0].__locale_);
                    std::string::size_type v78 = __p[1];
                  }
                }
                else
                {
                  long long v77 = *(_OWORD *)&v103[0].__locale_;
                  *((std::locale *)__p[1] + 2) = v103[2];
                  _OWORD *v76 = v77;
                  std::string::size_type v78 = (void *)v76 + 3;
                  __p[1] = (char *)v76 + 24;
                }
                if ((unint64_t)v78 >= v111[0])
                {
                  unsigned __int8 v86 = (void *)sub_100003F94((uint64_t *)__p, (long long *)&v90);
                }
                else
                {
                  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
                  {
                    sub_100003600(v78, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    long long v85 = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
                    v78[2] = *((void *)&v90.__r_.__value_.__l + 2);
                    *(_OWORD *)std::string::size_type v78 = v85;
                  }
                  unsigned __int8 v86 = v78 + 3;
                }
                __p[1] = v86;
                std::string::size_type v87 = sub_1000042E0(&std::cout, (uint64_t)", \"visualResult\":", 17);
                sub_10000F934(v87);
                sub_100012BB0((uint64_t)__p, (uint64_t)&v88);
                if (v89 < 0) {
                  operator delete(v88);
                }
                v112.__locale_ = (std::locale::__imp *)__p;
                sub_100003B14((void ***)&v112);
                goto LABEL_69;
              }
              int v27 = (std::string *)(v28 + 1);
              int64_t size = v26 - (unsigned char *)v27;
            }
            while (v26 - (unsigned char *)v27 >= 1);
          }
          if (v22 < 0) {
            operator delete(v23);
          }
          sub_100006BE8((uint64_t)&v103[1]);
          sub_100006BE8((uint64_t)v99);
          sub_100008BB4((uint64_t)__p);
          v18 += 6;
        }
        while (v18 != v19);
      }
    }
    sub_100008BB4((uint64_t)&v112);
  }
LABEL_69:
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v92) < 0) {
    operator delete(v91[0]);
  }
LABEL_73:
  sub_100003470(&v112, "--executeVisualCAT");
  int v34 = siri::dialogengine::OptionExists();
  int v35 = v34;
  if ((SHIBYTE(v114) & 0x80000000) == 0)
  {
    if (!v34) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  operator delete(v112.__locale_);
  if (v35)
  {
LABEL_77:
    uint64_t v36 = sub_1000042E0(&std::cout, (uint64_t)"}", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
    double v37 = std::locale::use_facet(&v112, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
    std::locale::~locale(&v112);
    std::ostream::put();
    std::ostream::flush();
  }
LABEL_78:
  if ((char)v94 < 0) {
    operator delete(v93[0]);
  }
  return 1;
}

void sub_100012948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::locale a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  a47.__locale_ = (std::locale::__imp *)&a56;
  sub_100003B14((void ***)&a47);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void sub_100012BB0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10000F9EC(a1, (uint64_t)v59);
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    if (HIBYTE(v60)) {
      goto LABEL_5;
    }
LABEL_17:
    sub_100003470((void *)a2, (char *)&unk_10006DFE2);
    goto LABEL_214;
  }
  if (!v59[1]) {
    goto LABEL_17;
  }
LABEL_5:
  uint64_t v3 = CATExecute();
  uint64_t v4 = (void *)v3;
  if (v3) {
    BOOL v5 = (char *)v3;
  }
  else {
    BOOL v5 = (char *)&unk_10006DFE2;
  }
  sub_100003470((void *)a2, v5);
  free(v4);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(void *)a2;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = sub_1000042E0(&std::cout, v7, v8);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  unsigned int v10 = std::locale::use_facet(v88, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(v88);
  std::ostream::put();
  std::ostream::flush();
  sub_100003470(&v85, "renderVisualCat");
  int v11 = std::string::insert(&v85, 0, "\"");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v86.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  unint64_t v13 = std::string::append(&v86, "\":");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v89 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88[0].__locale_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (siri::dialogengine::StringContains())
  {
    sub_100003470(&__p, "\"type\": \"visual\",");
    int v16 = siri::dialogengine::StringContains();
    if ((char)v84 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    int v16 = 0;
  }
  if (SHIBYTE(v89) < 0) {
    operator delete(v88[0].__locale_);
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v85.__r_.__value_.__l.__data_);
    if (!v16) {
      goto LABEL_214;
    }
  }
  else if (!v16)
  {
    goto LABEL_214;
  }
  if (SHIBYTE(v60) < 0)
  {
    sub_100003600(__dst, v59[0], (unint64_t)v59[1]);
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)v59;
    uint64_t v58 = v60;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100003600(v55, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)int v55 = *(_OWORD *)a2;
    uint64_t v56 = *(void *)(a2 + 16);
  }
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Preparing to render VisualCat...", v15);
  sub_100006B54((uint64_t)v88, 0, 1024, 0);
  sub_100006B54((uint64_t)&v86, 0, 1024, 0);
  unsigned int v17 = v55;
  if (v56 < 0) {
    unsigned int v17 = (void **)v55[0];
  }
  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  v85.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
  if (*(_DWORD *)(sub_10000E450((uint64_t)&v86, &v85) + 88))
  {
    if (v87 > 0x11) {
      unsigned int v18 = "Unknown error.";
    }
    else {
      unsigned int v18 = off_10007CD68[v87];
    }
    sub_100003470(&v85, v18);
    uint64_t v21 = sub_1000042E0(&std::cout, (uint64_t)"Error: Invalid JSON result: ", 28);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v85;
    }
    else {
      int v22 = (std::string *)v85.__r_.__value_.__r.__words[0];
    }
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v85.__r_.__value_.__l.__size_;
    }
LABEL_50:
    int v24 = sub_1000042E0(v21, (uint64_t)v22, size);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
    int v25 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_208;
  }
  unsigned int v19 = __dst;
  if (v58 < 0) {
    unsigned int v19 = (void **)__dst[0];
  }
  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  v85.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
  if (*(_DWORD *)(sub_10000E450((uint64_t)v88, &v85) + 88))
  {
    if (v90 > 0x11) {
      std::string::size_type v20 = "Unknown error.";
    }
    else {
      std::string::size_type v20 = off_10007CD68[v90];
    }
    sub_100003470(&v85, v20);
    uint64_t v21 = sub_1000042E0(&std::cout, (uint64_t)"Error: Invalid JSON request: ", 29);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v85;
    }
    else {
      int v22 = (std::string *)v85.__r_.__value_.__r.__words[0];
    }
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v85.__r_.__value_.__l.__size_;
    }
    goto LABEL_50;
  }
  sub_100003470(&__p, "renderVisualCat");
  siri::dialogengine::ParseJSONString();
  if ((char)v84 < 0) {
    operator delete(__p);
  }
  if ((siri::dialogengine::DirExists() & 1) == 0)
  {
    siri::dialogengine::DirName();
    char v26 = siri::dialogengine::DirExists();
    if ((char)v84 < 0) {
      operator delete(__p);
    }
    if ((v26 & 1) == 0)
    {
      int v34 = sub_1000042E0(&std::cout, (uint64_t)"Error: Destination directory doesn't exist: ", 44);
      siri::dialogengine::DirName();
      if ((v84 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v84 & 0x80u) == 0) {
        uint64_t v36 = v84;
      }
      else {
        uint64_t v36 = v83;
      }
      double v37 = sub_1000042E0(v34, (uint64_t)p_p, v36);
      std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24)));
      __int16 v38 = std::locale::use_facet((const std::locale *)&v80, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
      std::locale::~locale((std::locale *)&v80);
      std::ostream::put();
      std::ostream::flush();
      goto LABEL_206;
    }
  }
  sub_100003470(&v80, "catId");
  siri::dialogengine::ParseJSONString();
  if (SHIBYTE(v81) < 0) {
    operator delete((void *)v80);
  }
  sub_100003470(&v79, "status");
  siri::dialogengine::ParseJSONString();
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v81) < 0)
  {
    int v28 = (void *)v80;
    if (*((void *)&v80 + 1) != 7) {
      goto LABEL_205;
    }
    BOOL v30 = *(_DWORD *)v80 != 1667462515 || *(_DWORD *)(v80 + 3) != 1936942435;
    operator delete((void *)v80);
    if (v30) {
      goto LABEL_206;
    }
  }
  else
  {
    if (SHIBYTE(v81) != 7) {
      goto LABEL_206;
    }
    if (v80 != 1667462515 || *(_DWORD *)((char *)&v80 + 3) != 1936942435) {
      goto LABEL_206;
    }
  }
  uint64_t v31 = (unsigned int *)sub_100013D3C((unsigned int *)&v86, "response");
  sub_100003470(&v79, "renderDeviceTrain");
  siri::dialogengine::ParseJSONString();
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  sub_100003470(&v78, "renderDeviceClass");
  siri::dialogengine::ParseJSONString();
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  std::string::size_type v32 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v32 = v79.__r_.__value_.__l.__size_;
  }
  if (!v32) {
    std::string::assign(&v79, "iPhone");
  }
  sub_100003470(v76, "renderContext");
  siri::dialogengine::ParseJSONString();
  if (SHIBYTE(v77) < 0) {
    operator delete(v76[0]);
  }
  std::string::size_type v33 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v33 = v78.__r_.__value_.__l.__size_;
  }
  if (!v33) {
    std::string::assign(&v78, "MockSiri");
  }
  sub_100003470(&v74, "renderScreenSize");
  siri::dialogengine::ParseJSONString();
  if (SHIBYTE(v75) < 0) {
    operator delete((void *)v74);
  }
  sub_100003470(&v73, "renderOrientation");
  siri::dialogengine::ParseJSONString();
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  sub_100003470(&v73, "renderDarkMode");
  int v54 = siri::dialogengine::ParseJSONBool();
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    sub_100003600(&v73, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
  }
  else {
    std::string v73 = v85;
  }
  if (siri::dialogengine::DirExists())
  {
    if ((v84 & 0x80u) == 0) {
      size_t v39 = v84;
    }
    else {
      size_t v39 = v83;
    }
    sub_100008CC4((uint64_t)&v71, v39 + 11);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v40 = &v71;
    }
    else {
      unint64_t v40 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if (v39)
    {
      if ((v84 & 0x80u) == 0) {
        unint64_t v41 = &__p;
      }
      else {
        unint64_t v41 = __p;
      }
      memmove(v40, v41, v39);
    }
    strcpy((char *)v40 + v39, "-render.png");
    siri::dialogengine::JoinPath();
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
    std::string v73 = v72;
    *((unsigned char *)&v72.__r_.__value_.__s + 23) = 0;
    v72.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
  }
  if (*((_WORD *)v31 + 11) != 4) {
    __assert_rtn("Begin", "document.h", 1591, "IsArray()");
  }
  for (uint64_t i = (unsigned int *)*((void *)v31 + 1); i != (unsigned int *)(*((void *)v31 + 1) + 24 * *v31); i += 6)
  {
    memset(&v72, 0, sizeof(v72));
    memset(&v71, 0, sizeof(v71));
    if (*((_WORD *)i + 11) != 3)
    {
      int v52 = 1155;
      unint64_t v53 = "MemberBegin";
LABEL_217:
      __assert_rtn(v53, "document.h", v52, "IsObject()");
    }
    uint64_t v43 = *((void *)i + 1);
    while (v43 != *((void *)i + 1) + 48 * *i)
    {
      long long v44 = (const char *)sub_100013DD0(v43);
      if (!strcmp(v44, "type"))
      {
        long long v45 = (const std::string::value_type *)sub_100013DD0(v43 + 24);
        std::string::assign(&v72, v45);
      }
      int v46 = (const char *)sub_100013DD0(v43);
      if (!strcmp(v46, "data"))
      {
        unsigned int v47 = (const std::string::value_type *)sub_100013DD0(v43 + 24);
        std::string::assign(&v71, v47);
      }
      v43 += 48;
      if (*((_WORD *)i + 11) != 3)
      {
        int v52 = 1158;
        unint64_t v53 = "MemberEnd";
        goto LABEL_217;
      }
    }
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v72.__r_.__value_.__l.__size_ != 6) {
        goto LABEL_187;
      }
      long long v48 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) != 6) {
        goto LABEL_187;
      }
      long long v48 = &v72;
    }
    int data = (int)v48->__r_.__value_.__l.__data_;
    int v50 = WORD2(v48->__r_.__value_.__r.__words[0]);
    if (data == 1970497910 && v50 == 27745)
    {
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        sub_100003600(&v70, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
      }
      else {
        std::string v70 = v71;
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        sub_100003600(&v69, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
      }
      else {
        std::string v69 = v73;
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        sub_100003600(&v68, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
      }
      else {
        std::string v68 = v79;
      }
      if (SHIBYTE(v81) < 0)
      {
        sub_100003600(v66, (void *)v80, *((unint64_t *)&v80 + 1));
      }
      else
      {
        *(_OWORD *)long long v66 = v80;
        uint64_t v67 = v81;
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        sub_100003600(&v65, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
      }
      else {
        std::string v65 = v78;
      }
      if (SHIBYTE(v77) < 0)
      {
        sub_100003600(v63, v76[0], (unint64_t)v76[1]);
      }
      else
      {
        *(_OWORD *)long long v63 = *(_OWORD *)v76;
        uint64_t v64 = v77;
      }
      if (SHIBYTE(v75) < 0)
      {
        sub_100003600(v61, (void *)v74, *((unint64_t *)&v74 + 1));
      }
      else
      {
        *(_OWORD *)unint64_t v61 = v74;
        uint64_t v62 = v75;
      }
      sub_10000D640((uint64_t)&v70, (uint64_t)&v69, (uint64_t)&v68, (uint64_t)v66, (uint64_t)&v65, (uint64_t)v63, (uint64_t)v61, v54);
      if (SHIBYTE(v62) < 0) {
        operator delete(v61[0]);
      }
      if (SHIBYTE(v64) < 0) {
        operator delete(v63[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v67) < 0) {
        operator delete(v66[0]);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
    }
LABEL_187:
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if (*((_WORD *)v31 + 11) != 4) {
      __assert_rtn("End", "document.h", 1594, "IsArray()");
    }
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v75) < 0) {
    operator delete((void *)v74);
  }
  if (SHIBYTE(v77) < 0) {
    operator delete(v76[0]);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v81) < 0)
  {
    int v28 = (void *)v80;
LABEL_205:
    operator delete(v28);
  }
LABEL_206:
  if ((char)v84 < 0) {
    operator delete(__p);
  }
LABEL_208:
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  sub_100008BB4((uint64_t)&v86);
  sub_100008BB4((uint64_t)v88);
  if (SHIBYTE(v56) < 0) {
    operator delete(v55[0]);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete(__dst[0]);
  }
LABEL_214:
  if (SHIBYTE(v60) < 0) {
    operator delete(v59[0]);
  }
}

void sub_100013990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  sub_100008BB4((uint64_t)&STACK[0x230]);
  sub_100008BB4(v81 - 208);
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v80 + 23) < 0) {
    operator delete(*(void **)v80);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100013D3C(unsigned int *a1, char *a2)
{
  uint64_t v4 = a2;
  unsigned int v5 = sub_100013E5C((int)&v4, a2);
  v6[2] = 0x405000000000000;
  v6[1] = v4;
  v6[0] = v5;
  return sub_100013DF8(a1, (uint64_t)v6);
}

uint64_t sub_100013DD0(uint64_t result)
{
  if ((*(_WORD *)(result + 22) & 0x400) == 0) {
    sub_1000626E8();
  }
  if ((*(_WORD *)(result + 22) & 0x1000) == 0) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_100013DF8(unsigned int *a1, uint64_t a2)
{
  sub_100013E80((BOOL)a1, a2, &v4);
  if (*((_WORD *)a1 + 11) != 3) {
    sub_100062740();
  }
  if (v4 == *((void *)a1 + 1) + 48 * *a1) {
    sub_100062714();
  }
  return v4 + 24;
}

size_t sub_100013E5C(int a1, char *__s)
{
  if (!__s) {
    sub_10006276C();
  }
  return strlen(__s);
}

BOOL sub_100013E80@<W0>(BOOL result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(_WORD *)(result + 22) != 3) {
    sub_1000627C4();
  }
  if ((*(_WORD *)(a2 + 22) & 0x400) == 0) {
    sub_100062798();
  }
  unsigned int v5 = (unsigned int *)result;
  uint64_t v6 = *(void *)(result + 8);
  *a3 = v6;
  while (v6 != *((void *)v5 + 1) + 48 * *v5)
  {
    uint64_t result = sub_100013F1C(a2, v6);
    if (result) {
      break;
    }
    v6 += 48;
    *a3 = v6;
    if (*((_WORD *)v5 + 11) != 3) {
      sub_100062740();
    }
  }
  return result;
}

BOOL sub_100013F1C(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a1 + 22) & 0x400) == 0) {
    sub_1000627F0();
  }
  if ((*(_WORD *)(a2 + 22) & 0x400) == 0) {
    sub_10006281C();
  }
  unsigned int v4 = sub_100013FBC((unsigned int *)a1);
  if (v4 != sub_100013FBC((unsigned int *)a2)) {
    return 0;
  }
  unsigned int v5 = (const void *)sub_100013DD0(a1);
  uint64_t v6 = (const void *)sub_100013DD0(a2);
  return v5 == v6 || memcmp(v5, v6, v4) == 0;
}

uint64_t sub_100013FBC(unsigned int *a1)
{
  if ((*((_WORD *)a1 + 11) & 0x400) == 0) {
    sub_100062848();
  }
  if ((*((_WORD *)a1 + 11) & 0x1000) != 0) {
    return (21 - *((char *)a1 + 21));
  }
  else {
    return *a1;
  }
}

BOOL sub_100013FF4(unsigned int *a1, char *a2)
{
  sub_100014050((BOOL)a1, a2, &v4);
  if (*((_WORD *)a1 + 11) != 3) {
    sub_1000625B4();
  }
  return v4 != *((void *)a1 + 1) + 48 * *a1;
}

BOOL sub_100014050@<W0>(BOOL a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = a2;
  unsigned int v7 = sub_100013E5C((int)&v6, a2);
  v8[2] = 0x405000000000000;
  v8[1] = v6;
  v8[0] = v7;
  return sub_100013E80(a1, (uint64_t)v8, a3);
}

unsigned int *sub_1000140F4(unsigned int *a1, long long *a2, long long *a3, size_t *a4)
{
  if (*((_WORD *)a1 + 11) != 3) {
    sub_1000628A0();
  }
  if ((*((_WORD *)a2 + 11) & 0x400) == 0) {
    sub_100062874();
  }
  unsigned int v7 = *a1;
  unsigned int v8 = a1[1];
  if (*a1 >= v8)
  {
    if (v8) {
      unsigned int v9 = v8 + ((v8 + 1) >> 1);
    }
    else {
      unsigned int v9 = 16;
    }
    sub_1000141BC((uint64_t)a1, v9, a4);
    unsigned int v7 = *a1;
  }
  uint64_t v10 = *((void *)a1 + 1);
  uint64_t v11 = v10 + 48 * v7;
  long long v12 = *a2;
  *(void *)(v11 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v11 = v12;
  *((_WORD *)a2 + 11) = 0;
  uint64_t v13 = v10 + 48 * *a1;
  long long v14 = *a3;
  *(void *)(v13 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(v13 + 24) = v14;
  *((_WORD *)a3 + 11) = 0;
  ++*a1;
  return a1;
}

uint64_t sub_1000141BC(uint64_t a1, unsigned int a2, size_t *a3)
{
  if (*(_WORD *)(a1 + 22) != 3) {
    sub_1000628CC();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 4);
  if (v5 < a2)
  {
    *(void *)(a1 + 8) = sub_100014228(a3, *(const void **)(a1 + 8), 48 * v5, 48 * a2);
    *(_DWORD *)(a1 + 4) = a2;
  }
  return a1;
}

uint64_t sub_100014228(size_t *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (a4)
    {
      uint64_t v5 = a2;
      size_t v6 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v7 = (a4 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v7 <= v6) {
        return (uint64_t)v5;
      }
      unsigned int v8 = (unint64_t *)*a1;
      uint64_t v9 = *(void *)(*a1 + 8);
      if ((const void *)(*a1 + v9 - v6 + 24) == v5)
      {
        unint64_t v10 = v9 + v7 - v6;
        if (v10 <= *v8)
        {
          v8[1] = v10;
          return (uint64_t)v5;
        }
      }
      uint64_t v11 = (void *)sub_100008748(a1, v7);
      if (v11)
      {
        long long v12 = v11;
        if (v6) {
          memcpy(v11, v5, v6);
        }
        return (uint64_t)v12;
      }
    }
    return 0;
  }
  return sub_100008748(a1, a4);
}

uint64_t sub_1000142E8(void **a1)
{
  sub_100014614(a1, 4);
  uint64_t v2 = sub_100014808(a1 + 1, 1);
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  *(unsigned char *)sub_100008520(*a1, 1) = 91;
  return 1;
}

uint64_t sub_100014340(void **a1)
{
  uint64_t v1 = (char *)a1[4];
  if ((unint64_t)(v1 - (char *)a1[3]) <= 0xF) {
    sub_1000628F8();
  }
  if (!*(v1 - 8)) {
    sub_100062924();
  }
  uint64_t v3 = *((void *)v1 - 2);
  a1[4] = v1 - 16;
  if (v3 && (*((unsigned char *)a1 + 68) & 1) == 0)
  {
    *(unsigned char *)sub_100008520(*a1, 1) = 10;
    size_t v4 = ((unint64_t)((char *)a1[4] - (char *)a1[3]) >> 4) * *((unsigned int *)a1 + 16);
    int v5 = *((unsigned __int8 *)a1 + 61);
    size_t v6 = (void *)sub_100008520(*a1, v4);
    memset(v6, v5, v4);
  }
  *(unsigned char *)sub_100008520(*a1, 1) = 93;
  return 1;
}

uint64_t sub_1000143F8(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  if (!a2) {
    sub_100062950();
  }
  sub_100014614((void **)a1, 5);
  return sub_100014940(a1, a2, a3);
}

uint64_t sub_100014454(void **a1, unsigned int a2)
{
  sub_100014614(a1, 6);
  size_t v4 = (unsigned char *)sub_100008520(*a1, 11);
  if (!v4) {
    sub_10006297C();
  }
  int v5 = v4;
  if ((a2 & 0x80000000) != 0)
  {
    *size_t v4 = 45;
    size_t v6 = v4 + 1;
    a2 = -a2;
  }
  else
  {
    size_t v6 = v4;
  }
  unint64_t v7 = sub_100015480(a2, v6);
  uint64_t v8 = (*a1)[3];
  if (v8 - (*a1)[2] < (unint64_t)(v5 - v7 + 11)) {
    sub_100062110();
  }
  (*a1)[3] = v8 - (v5 - v7) - 11;
  return 1;
}

uint64_t sub_1000144F4(void **a1, unint64_t a2)
{
  sub_100014614(a1, 6);
  size_t v4 = (unsigned char *)sub_100008520(*a1, 21);
  if (!v4) {
    sub_1000629A8();
  }
  int v5 = v4;
  if ((a2 & 0x8000000000000000) != 0)
  {
    *size_t v4 = 45;
    size_t v6 = v4 + 1;
    a2 = -(uint64_t)a2;
  }
  else
  {
    size_t v6 = v4;
  }
  unint64_t v7 = sub_100015758(a2, v6);
  uint64_t v8 = (*a1)[3];
  if (v8 - (*a1)[2] < (unint64_t)(v5 - v7 + 21)) {
    sub_100062110();
  }
  (*a1)[3] = v8 - (v5 - v7) - 21;
  return 1;
}

uint64_t sub_100014594(void **a1, unint64_t a2)
{
  sub_100014614(a1, 6);
  size_t v4 = (unsigned char *)sub_100008520(*a1, 20);
  int v5 = sub_100015758(a2, v4);
  uint64_t v6 = (*a1)[3];
  if (v6 - (*a1)[2] < (unint64_t)(v4 - v5 + 20)) {
    sub_100062110();
  }
  (*a1)[3] = v6 - (v4 - v5) - 20;
  return 1;
}

void **sub_100014614(void **result, int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (char *)result[4];
  unint64_t v4 = v3 - (char *)result[3];
  if (v4)
  {
    if (v4 <= 0xF) {
      sub_100062530();
    }
    uint64_t v6 = *((void *)v3 - 2);
    if (*(v3 - 8))
    {
      if (v6)
      {
        uint64_t result = (void **)sub_100008520(*result, 1);
        *(unsigned char *)uint64_t result = 44;
        if (*((unsigned char *)v2 + 68))
        {
          uint64_t result = (void **)sub_100008520(*v2, 1);
          *(unsigned char *)uint64_t result = 32;
        }
      }
      if (*((unsigned char *)v2 + 68)) {
        goto LABEL_21;
      }
      *(unsigned char *)sub_100008520(*v2, 1) = 10;
    }
    else
    {
      char v7 = 10;
      if (v6)
      {
        uint64_t v8 = (unsigned char *)sub_100008520(*result, 1);
        if (v6) {
          char v9 = 58;
        }
        else {
          char v9 = 44;
        }
        if (v6) {
          char v7 = 32;
        }
        else {
          char v7 = 10;
        }
        unsigned char *v8 = v9;
      }
      uint64_t result = (void **)sub_100008520(*v2, 1);
      *(unsigned char *)uint64_t result = v7;
      if (*(v3 - 16)) {
        goto LABEL_21;
      }
    }
    size_t v10 = ((unint64_t)((char *)v2[4] - (char *)v2[3]) >> 4) * *((unsigned int *)v2 + 16);
    uint64_t v11 = *v2;
    int v12 = *((unsigned __int8 *)v2 + 61);
    uint64_t v13 = (void *)sub_100008520(v11, v10);
    uint64_t result = (void **)memset(v13, v12, v10);
LABEL_21:
    if (*(v3 - 8)) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = a2 == 5;
    }
    if (!v14 && (*((void *)v3 - 2) & 1) == 0) {
      sub_100062A00();
    }
    ++*((void *)v3 - 2);
    return result;
  }
  if (*((unsigned char *)result + 60)) {
    sub_1000629D4();
  }
  *((unsigned char *)result + 60) = 1;
  return result;
}

uint64_t sub_100014778(uint64_t *a1)
{
  uint64_t v2 = (void *)*a1;
  if ((uint64_t)(v2[4] - v2[3]) <= 3)
  {
    sub_1000085BC(v2, 4);
    uint64_t v2 = (void *)*a1;
  }
  *(unsigned char *)sub_10000857C((uint64_t)v2, 1) = 110;
  *(unsigned char *)sub_10000857C(*a1, 1) = 117;
  *(unsigned char *)sub_10000857C(*a1, 1) = 108;
  *(unsigned char *)sub_10000857C(*a1, 1) = 108;
  return 1;
}

uint64_t sub_100014808(void *a1, uint64_t a2)
{
  if (a1[4] - a1[3] < 16 * a2) {
    sub_1000148A8(a1, a2);
  }
  return sub_100014864((uint64_t)a1, a2);
}

uint64_t sub_100014864(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000623A4();
  }
  if (16 * a2 > *(void *)(a1 + 32) - v2) {
    sub_1000623D0();
  }
  *(void *)(a1 + 24) = v2 + 16 * a2;
  return v2;
}

char *sub_1000148A8(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    unint64_t v3 = a1[4] - v2 + ((unint64_t)(a1[4] - v2 + 1) >> 1);
  }
  else
  {
    if (!*a1) {
      operator new();
    }
    uint64_t v2 = 0;
    unint64_t v3 = a1[5];
  }
  size_t v4 = a1[3] + 16 * a2 - v2;
  if (v3 <= v4) {
    size_t v5 = v4;
  }
  else {
    size_t v5 = v3;
  }
  return sub_100007FFC(a1, v5);
}

uint64_t sub_100014940(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = (void *)*a1;
  uint64_t v7 = 6 * a3 + 2;
  if (v6[4] - v6[3] < v7)
  {
    sub_1000085BC(v6, v7);
    uint64_t v6 = (void *)*a1;
  }
  *(unsigned char *)sub_10000857C((uint64_t)v6, 1) = 34;
  if (a3)
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = *(unsigned __int8 *)(a2 + v8);
      int v10 = a0123456789abcd[v9 + 16];
      uint64_t v11 = (unsigned char *)sub_10000857C(*a1, 1);
      if (v10)
      {
        *uint64_t v11 = 92;
        *(unsigned char *)sub_10000857C(*a1, 1) = v10;
        if (v10 == 117)
        {
          *(unsigned char *)sub_10000857C(*a1, 1) = 48;
          *(unsigned char *)sub_10000857C(*a1, 1) = 48;
          char v12 = a0123456789abcd[v9 >> 4];
          *(unsigned char *)sub_10000857C(*a1, 1) = v12;
          char v13 = a0123456789abcd[v9 & 0xF];
          *(unsigned char *)sub_10000857C(*a1, 1) = v13;
        }
      }
      else
      {
        *uint64_t v11 = v9;
      }
      ++v8;
    }
    while (v8 < a3);
  }
  *(unsigned char *)sub_10000857C(*a1, 1) = 34;
  return 1;
}

BOOL sub_100014A98(uint64_t a1, double a2)
{
  double v2 = a2;
  uint64_t v4 = *(void *)&a2 & 0x7FF0000000000000;
  if ((*(void *)&a2 & 0x7FF0000000000000) != 0x7FF0000000000000)
  {
    uint64_t v6 = (char *)sub_100008520(*(void **)a1, 25);
    int v7 = *(_DWORD *)(a1 + 56);
    if (v7 <= 0) {
      sub_100062A2C();
    }
    unint64_t v8 = v6;
    if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    {
      if (v2 >= 0.0)
      {
        unint64_t v9 = v6;
      }
      else
      {
        char *v6 = 45;
        unint64_t v9 = v6 + 1;
        double v2 = -v2;
      }
      uint64_t v14 = 0;
      sub_100014BC4((uint64_t)v9, (int *)&v14 + 1, &v14, v2);
      uint64_t v11 = sub_100014D70(v9, SHIDWORD(v14), v14, v7);
    }
    else
    {
      if ((*(void *)&a2 & 0x8000000000000000) != 0)
      {
        char *v6 = 45;
        int v10 = v6 + 1;
      }
      else
      {
        int v10 = v6;
      }
      *(_WORD *)int v10 = 11824;
      void v10[2] = 48;
      uint64_t v11 = v10 + 3;
    }
    uint64_t v12 = *(void *)(*(void *)a1 + 24);
    if (v12 - *(void *)(*(void *)a1 + 16) < (unint64_t)(v8 - v11 + 25)) {
      sub_100062110();
    }
    *(void *)(*(void *)a1 + 24) = v12 - (v8 - v11) - 25;
  }
  return v4 != 0x7FF0000000000000;
}

unint64_t sub_100014BC4(uint64_t a1, int *a2, _DWORD *a3, double a4)
{
  if (((*(void *)&a4 >> 52) & 0x7FF) != 0) {
    uint64_t v7 = *(void *)&a4 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  else {
    uint64_t v7 = *(void *)&a4 & 0xFFFFFFFFFFFFFLL;
  }
  if (((*(void *)&a4 >> 52) & 0x7FF) != 0) {
    int v8 = ((*(void *)&a4 >> 52) & 0x7FF) - 1075;
  }
  else {
    int v8 = -1074;
  }
  uint64_t v30 = v7;
  int v31 = v8;
  uint64_t v32 = (2 * (v7 & 0x1FFFFFFFFFFFFFLL)) | 1;
  int v33 = v8 - 1;
  uint64_t v9 = sub_100015440(&v32);
  uint64_t v11 = 2 * v7 - 1;
  if (v7 == 0x10000000000000) {
    char v12 = -2;
  }
  else {
    char v12 = -1;
  }
  if (v7 == 0x10000000000000) {
    uint64_t v11 = 0x3FFFFFFFFFFFFFLL;
  }
  uint64_t v28 = v9;
  int v29 = v10;
  uint64_t v32 = v11 << (v8 - v10 + v12);
  double v13 = (double)(-61 - v10) * 0.301029996 + 347.0;
  int v14 = (int)v13;
  int v33 = v10;
  if (v13 - (double)(int)v13 > 0.0) {
    ++v14;
  }
  unsigned int v15 = (v14 >> 3) + 1;
  *a3 = 348 - 8 * v15;
  if (v15 >= 0x57) {
    sub_100062A58();
  }
  uint64_t v16 = qword_100065068[v15];
  uint64_t v17 = word_100065320[v15];
  v27[0] = v16;
  v27[1] = v17;
  unint64_t v24 = sub_100015000((unint64_t *)&v30);
  uint64_t v25 = v18;
  v26[0] = sub_100015034(&v24, v27);
  v26[1] = v19;
  unint64_t v20 = sub_100015034(&v28, v27);
  uint64_t v25 = v21;
  unint64_t v22 = sub_100015034(&v32, v27);
  unint64_t v24 = v20 - 1;
  return sub_100015094(v26, (uint64_t *)&v24, v20 - 1 + ~v22, a1, a2, a3);
}

char *sub_100014D70(char *__src, int a2, int a3, int a4)
{
  int v8 = a3 + a2;
  if ((a3 & 0x80000000) == 0 && v8 <= 21)
  {
    if (a3)
    {
      uint64_t v9 = &__src[a2];
      if (v8 <= a2 + 1) {
        int v10 = a2 + 1;
      }
      else {
        int v10 = a3 + a2;
      }
      memset(v9, 48, (v10 + ~a2) + 1);
    }
    uint64_t v11 = &__src[v8];
    __int16 v12 = 12334;
    goto LABEL_9;
  }
  unsigned int v14 = v8 - 1;
  if ((v8 - 1) <= 0x14)
  {
    uint64_t v15 = (v8 + 1);
    memmove(&__src[v15], &__src[v8], -a3);
    __src[v8] = 46;
    if (a4 + a3 >= 0) {
      return &__src[a2 + 1];
    }
    if (a4 >= 2)
    {
      int v20 = v8 + a4;
      while (__src[v20] == 48)
      {
        if (--v20 <= (int)v15) {
          goto LABEL_32;
        }
      }
      return &__src[v20 + 1];
    }
LABEL_32:
    uint64_t v21 = (v8 + 2);
    return &__src[v21];
  }
  if (v8 == 0 || v8 >= 0xFFFFFFFB)
  {
    uint64_t v16 = 2 - v8;
    memmove(&__src[v16], __src, a2);
    *(_WORD *)__src = 11824;
    if (v8 < 0)
    {
      if ((int)v16 <= 3) {
        int v17 = 3;
      }
      else {
        int v17 = 2 - v8;
      }
      memset(__src + 2, 48, (v17 - 2));
    }
    if (-a3 <= a4)
    {
      uint64_t v21 = v16 + a2;
      return &__src[v21];
    }
    if (a4 >= 2)
    {
      for (int i = a4 + 2; ; --i)
      {
        int v19 = i - 1;
        if (__src[i - 1] != 48) {
          break;
        }
        if (v19 < 4) {
          return __src + 3;
        }
      }
      return &__src[i];
    }
    return __src + 3;
  }
  if (v8 < -a4)
  {
    *(_WORD *)__src = 11824;
    __src[2] = 48;
    return __src + 3;
  }
  if (a2 == 1)
  {
    __src[1] = 101;
    if ((v14 & 0x80000000) == 0)
    {
      uint64_t v11 = __src + 2;
      goto LABEL_44;
    }
    uint64_t v11 = __src + 3;
    __src[2] = 45;
  }
  else
  {
    memmove(__src + 2, __src + 1, a2 - 1);
    __src[1] = 46;
    __src[a2 + 1] = 101;
    uint64_t v11 = &__src[a2 + 2];
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_44;
    }
    *v11++ = 45;
  }
  unsigned int v14 = 1 - v8;
LABEL_44:
  if (v14 < 0x64)
  {
    if (v14 >= 0xA)
    {
      __int16 v12 = *(_WORD *)&a00010203040506[2 * v14];
LABEL_9:
      *(_WORD *)uint64_t v11 = v12;
      return v11 + 2;
    }
    *uint64_t v11 = v14 + 48;
    return v11 + 1;
  }
  else
  {
    *uint64_t v11 = v14 / 0x64 + 48;
    *(_WORD *)(v11 + 1) = *(_WORD *)&a00010203040506[2 * (v14 % 0x64)];
    return v11 + 3;
  }
}

unint64_t sub_100015000(unint64_t *a1)
{
  if (!*a1) {
    sub_100062A84();
  }
  return *a1 << __clz(*a1);
}

unint64_t sub_100015034(void *a1, void *a2)
{
  uint64_t v2 = HIDWORD(*a1);
  uint64_t v3 = HIDWORD(*a2);
  unint64_t v4 = v3 * (unint64_t)*a1;
  unint64_t v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v5
         + v4
         + 0x80000000) >> 32);
}

unint64_t sub_100015094(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, int *a5, _DWORD *a6)
{
  int v6 = -*((_DWORD *)a2 + 2);
  unint64_t v7 = 1 << -*((unsigned char *)a2 + 8);
  uint64_t v8 = *a2;
  uint64_t v9 = *a1;
  unint64_t v10 = *a2 - *a1;
  unint64_t result = (unint64_t)*a2 >> -*((unsigned char *)a2 + 8);
  unint64_t v12 = (v7 - 1) & *a2;
  if (result < 0x5F5E100) {
    int v13 = 8;
  }
  else {
    int v13 = 9;
  }
  if (result >= 0x989680) {
    int v14 = v13;
  }
  else {
    int v14 = 7;
  }
  if (result >= 0xF4240) {
    int v15 = v14;
  }
  else {
    int v15 = 6;
  }
  if (result >= 0x186A0) {
    int v16 = v15;
  }
  else {
    int v16 = 5;
  }
  if (result >> 4 >= 0x271) {
    int v17 = v16;
  }
  else {
    int v17 = 4;
  }
  if (result >= 0x3E8) {
    int v18 = v17;
  }
  else {
    int v18 = 3;
  }
  if (result >= 0x64) {
    int v19 = v18;
  }
  else {
    int v19 = 2;
  }
  if (result >= 0xA) {
    int v20 = v19;
  }
  else {
    int v20 = 1;
  }
  *a5 = 0;
  while (2)
  {
    if (v20 <= 0)
    {
      int v35 = 1;
      uint64_t v36 = dword_1000653D0;
      do
      {
        unint64_t v37 = a3;
        unint64_t v38 = 10 * v12;
        unint64_t result = (v38 >> v6);
        int v39 = *a5;
        if ((v38 >> v6)) {
          BOOL v40 = 0;
        }
        else {
          BOOL v40 = v39 == 0;
        }
        if (!v40)
        {
          unint64_t result = (v39 + 1);
          *a5 = result;
          *(unsigned char *)(a4 + v39) = (v38 >> v6) + 48;
        }
        a3 *= 10;
        unint64_t v12 = v38 & (v7 - 1);
        --v35;
        ++v36;
      }
      while (10 * v37 <= v12);
      *a6 = *a6 + v35 - 1;
      if (v35 < -7) {
        uint64_t v41 = 0;
      }
      else {
        uint64_t v41 = *v36;
      }
      if (10 * v37 - v12 >= v7)
      {
        unint64_t v42 = v41 * v10;
        if (v12 < v41 * v10)
        {
          uint64_t v43 = *a5 - 1;
          uint64_t v44 = -(uint64_t)v12;
          unint64_t v45 = 10 * v37 - v7;
          unint64_t v46 = v7 + v12;
          uint64_t v47 = -(uint64_t)(v41 * v10);
          do
          {
            if (v46 >= v42 && v42 + v44 <= v47 + v46) {
              break;
            }
            --*(unsigned char *)(a4 + v43);
            if (v46 >= v42) {
              break;
            }
            unint64_t v48 = v45 + v44;
            v44 -= v7;
            v46 += v7;
          }
          while (v48 >= v7);
        }
      }
    }
    else
    {
      --v20;
      unint64_t v21 = 0;
      switch(v20)
      {
        case 0:
          goto LABEL_39;
        case 1:
          unsigned int v22 = result / 0xA;
          unint64_t v21 = result % 0xA;
          goto LABEL_33;
        case 2:
          unsigned int v22 = result / 0x64;
          unint64_t v21 = result % 0x64;
          goto LABEL_33;
        case 3:
          unsigned int v22 = result / 0x3E8;
          unint64_t v21 = result % 0x3E8;
          goto LABEL_33;
        case 4:
          unsigned int v22 = result / 0x2710;
          unint64_t v21 = result % 0x2710;
LABEL_33:
          LODWORD(result) = v22;
          goto LABEL_39;
        case 5:
          unsigned int v24 = result / 0x186A0;
          unint64_t v21 = result % 0x186A0;
          goto LABEL_38;
        case 6:
          unsigned int v24 = result / 0xF4240;
          unint64_t v21 = result % 0xF4240;
          goto LABEL_38;
        case 7:
          unsigned int v24 = result / 0x989680;
          unint64_t v21 = result % 0x989680;
          goto LABEL_38;
        case 8:
          unsigned int v24 = result / 0x5F5E100;
          unint64_t v21 = result % 0x5F5E100;
LABEL_38:
          LODWORD(result) = v24;
LABEL_39:
          int v25 = result;
          int v23 = *a5;
          unint64_t result = v21;
          if (!v25) {
            goto LABEL_40;
          }
          goto LABEL_42;
        default:
          int v23 = *a5;
LABEL_40:
          if (v23)
          {
            LOBYTE(v25) = 0;
LABEL_42:
            *a5 = v23 + 1;
            *(unsigned char *)(a4 + v23) = v25 + 48;
          }
          unint64_t v26 = (unint64_t)result << v6;
          if (a3 < v26 + v12) {
            continue;
          }
          *a6 += v20;
          if (v26 + v12 < v10)
          {
            unint64_t v27 = (unint64_t)dword_1000653D0[v20] << v6;
            if (a3 - (v26 + v12) >= v27)
            {
              uint64_t v28 = *a5 - 1;
              unint64_t v29 = v10 - v12;
              uint64_t v30 = -(uint64_t)v26;
              unint64_t v31 = a3 - v12 - v27;
              unint64_t v32 = v12 + v27 + v26;
              uint64_t v33 = v9 - v8;
              do
              {
                if (v32 >= v10 && v29 + v30 <= v33 + v32) {
                  break;
                }
                --*(unsigned char *)(a4 + v28);
                if (v32 >= v10) {
                  break;
                }
                unint64_t v34 = v31 + v30;
                v30 -= v27;
                v32 += v27;
              }
              while (v34 >= v27);
            }
          }
          break;
      }
    }
    return result;
  }
}

uint64_t sub_100015440(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  if ((*a1 & 0x20000000000000) == 0)
  {
    unint64_t v3 = __clz(v2 & 0x1FFFFFFFFFFFFFLL) - 10;
    v2 <<= v3;
    do
    {
      unint64_t v1 = (v1 - 1) | v1 & 0xFFFFFFFF00000000;
      --v3;
    }
    while (v3);
  }
  return v2 << 10;
}

unsigned char *sub_100015480(unsigned int a1, unsigned char *a2)
{
  if (!a2) {
    sub_100062AB0();
  }
  if (a1 >> 4 <= 0x270)
  {
    if (a1 < 0x3E8)
    {
      if (a1 < 0x64)
      {
        if (a1 < 0xA) {
          goto LABEL_11;
        }
        goto LABEL_10;
      }
    }
    else
    {
      *a2++ = a00010203040506[2 * ((unsigned __int16)a1 / 0x64u)];
    }
    *a2++ = a00010203040506[(2 * ((unsigned __int16)a1 / 0x64u)) | 1];
LABEL_10:
    *a2++ = a00010203040506[2 * ((unsigned __int16)a1 % 0x64u)];
LABEL_11:
    *a2 = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)a1 % 0x64u)) | 1];
    return a2 + 1;
  }
  if (a1 < 0x5F5E100)
  {
    if (a1 < 0x989680)
    {
      if (a1 <= 0xF423F)
      {
        if (a1 >> 5 < 0xC35) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
    }
    else
    {
      *a2++ = a00010203040506[2 * (a1 / 0xF4240)];
    }
    *a2++ = a00010203040506[(2 * (a1 / 0xF4240)) | 1];
LABEL_16:
    *a2++ = a00010203040506[2 * ((unsigned __int16)(a1 / 0x2710) % 0x64u)];
LABEL_17:
    *a2 = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)(a1 / 0x2710) % 0x64u)) | 1];
    a2[1] = a00010203040506[2 * (a1 % 0x2710 / 0x64)];
    a2[2] = a00010203040506[(2 * (a1 % 0x2710 / 0x64)) | 1];
    a2[3] = a00010203040506[2 * (a1 % 0x2710 % 0x64)];
    a2[4] = a00010203040506[(unsigned __int16)(2 * (a1 % 0x2710 % 0x64)) | 1];
    return a2 + 5;
  }
  unsigned int v3 = a1 % 0x5F5E100;
  if (a1 < 0x3B9ACA00)
  {
    *a2 = a1 / 0x5F5E100 + 48;
    unint64_t v4 = a2 + 1;
  }
  else
  {
    *a2 = a00010203040506[2 * (a1 / 0x5F5E100)];
    unint64_t v4 = a2 + 2;
    a2[1] = a00010203040506[2 * (a1 / 0x5F5E100) + 1];
  }
  *unint64_t v4 = a00010203040506[2 * (v3 / 0xF4240)];
  v4[1] = a00010203040506[2 * (v3 / 0xF4240) + 1];
  *((_WORD *)v4 + 1) = *(_WORD *)&a00010203040506[2 * ((unsigned __int16)(v3 / 0x2710) % 0x64u)];
  *((_WORD *)v4 + 2) = *(_WORD *)&a00010203040506[2 * (v3 % 0x2710 / 0x64)];
  v4[6] = a00010203040506[2 * (v3 % 0x2710 % 0x64)];
  uint64_t v2 = v4 + 8;
  v4[7] = a00010203040506[(unsigned __int16)(2 * (v3 % 0x2710 % 0x64)) + 1];
  return v2;
}

unsigned char *sub_100015758(unint64_t a1, unsigned char *a2)
{
  if (!a2) {
    sub_100062ADC();
  }
  if (a1 < 0x5F5E100)
  {
    if (a1 >> 4 <= 0x270)
    {
      if (a1 < 0x3E8)
      {
        if (a1 < 0x64)
        {
          if (a1 < 0xA) {
            goto LABEL_16;
          }
          goto LABEL_15;
        }
      }
      else
      {
        *a2++ = a00010203040506[2 * ((unsigned __int16)a1 / 0x64u)];
      }
      *a2++ = a00010203040506[(2 * ((unsigned __int16)a1 / 0x64u)) | 1];
LABEL_15:
      *a2++ = a00010203040506[2 * ((unsigned __int16)a1 % 0x64u)];
LABEL_16:
      *a2 = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)a1 % 0x64u)) | 1];
      return a2 + 1;
    }
    unint64_t v9 = (a1 / 0x7A120uLL) & 0x3FFE;
    if (a1 < 0x989680)
    {
      if (a1 < 0xF4240)
      {
        if (a1 >> 5 < 0xC35) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
    }
    else
    {
      *a2++ = a00010203040506[v9];
    }
    *a2++ = a00010203040506[v9 | 1];
LABEL_27:
    *a2++ = a00010203040506[2 * ((unsigned __int16)(a1 / 0x2710) % 0x64u)];
LABEL_28:
    *a2 = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)(a1 / 0x2710) % 0x64u)) | 1];
    a2[1] = a00010203040506[2 * (a1 % 0x2710 / 0x64)];
    a2[2] = a00010203040506[(2 * (a1 % 0x2710 / 0x64)) | 1];
    a2[3] = a00010203040506[2 * (a1 % 0x2710 % 0x64)];
    a2[4] = a00010203040506[(unsigned __int16)(2 * (a1 % 0x2710 % 0x64)) | 1];
    return a2 + 5;
  }
  if (a1 < 0x2386F26FC10000)
  {
    unsigned int v2 = a1 % 0x5F5E100;
    unsigned int v3 = a1 / 0x5F5E100;
    unsigned int v4 = v3 % 0x2710;
    uint64_t v5 = 2 * (v2 / 0xF4240);
    uint64_t v6 = 2 * ((unsigned __int16)(v2 / 0x2710) % 0x64u);
    uint64_t v7 = 2 * (v2 % 0x2710 / 0x64);
    uint64_t v8 = 2 * (v2 % 0x2710 % 0x64);
    if (a1 < 0x38D7EA4C68000)
    {
      if (a1 < 0x5AF3107A4000)
      {
        if (a1 < 0x9184E72A000)
        {
          if (a1 < 0xE8D4A51000)
          {
            if (a1 < 0x174876E800)
            {
              if (a1 < 0x2540BE400)
              {
                if (a1 < 0x3B9ACA00) {
                  goto LABEL_24;
                }
                goto LABEL_23;
              }
LABEL_22:
              *a2++ = a00010203040506[(2 * (v3 % 0x2710 / 0x64)) | 1];
LABEL_23:
              *a2++ = a00010203040506[2 * ((unsigned __int16)v4 % 0x64u)];
LABEL_24:
              *a2 = a00010203040506[(unsigned __int16)(2 * (v3 % 0x2710 % 0x64)) | 1];
              a2[1] = a00010203040506[v5];
              a2[2] = a00010203040506[v5 | 1];
              a2[3] = a00010203040506[v6];
              a2[4] = a00010203040506[(unsigned __int16)v6 | 1];
              a2[5] = a00010203040506[v7];
              a2[6] = a00010203040506[v7 | 1];
              a2[7] = a00010203040506[v8];
              a2[8] = a00010203040506[(unsigned __int16)v8 | 1];
              return a2 + 9;
            }
LABEL_21:
            *a2++ = a00010203040506[2 * ((unsigned __int16)v4 / 0x64u)];
            goto LABEL_22;
          }
LABEL_20:
          *a2++ = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)(v3 / 0x2710) % 0x64u)) | 1];
          goto LABEL_21;
        }
LABEL_19:
        *a2++ = a00010203040506[2 * ((unsigned __int16)(v3 / 0x2710) % 0x64u)];
        goto LABEL_20;
      }
    }
    else
    {
      *a2++ = a00010203040506[2 * ((a1 / 0x5F5E100) / 0xF4240)];
    }
    *a2++ = a00010203040506[(2 * ((a1 / 0x5F5E100) / 0xF4240)) | 1];
    goto LABEL_19;
  }
  unint64_t v10 = a1 / 0x2386F26FC10000;
  unint64_t v11 = a1 % 0x2386F26FC10000;
  if ((a1 / 0x2386F26FC10000) > 9)
  {
    if (v10 > 0x63)
    {
      unsigned int v14 = (unsigned __int16)v10 / 0x64u;
      if (v10 > 0x3E7)
      {
        uint64_t v15 = 2 * ((unsigned __int16)v10 % 0x64u);
        *(_WORD *)a2 = *(_WORD *)&a00010203040506[2 * v14];
        a2[2] = a00010203040506[v15];
        char v16 = a00010203040506[(v15 & 0xFFFE) + 1];
        unint64_t v12 = a2 + 4;
        a2[3] = v16;
      }
      else
      {
        *a2 = v14 + 48;
        *(_WORD *)(a2 + 1) = *(_WORD *)&a00010203040506[2 * ((unsigned __int16)v10 % 0x64u)];
        unint64_t v12 = a2 + 3;
      }
    }
    else
    {
      *a2 = a00010203040506[2 * (a1 / 0x2386F26FC10000)];
      unint64_t v12 = a2 + 2;
      a2[1] = a00010203040506[2 * (a1 / 0x2386F26FC10000) + 1];
    }
  }
  else
  {
    *a2 = v10 + 48;
    unint64_t v12 = a2 + 1;
  }
  unsigned int v17 = v11 % 0x5F5E100;
  unsigned int v18 = (v11 / 0x5F5E100) % 0x2710;
  unsigned int v19 = (unsigned __int16)v18 / 0x64u;
  uint64_t v20 = 2 * ((unsigned __int16)v18 % 0x64u);
  *unint64_t v12 = a00010203040506[2 * ((v11 / 0x5F5E100) / 0xF4240)];
  v12[1] = a00010203040506[2 * ((v11 / 0x5F5E100) / 0xF4240) + 1];
  *((_WORD *)v12 + 1) = *(_WORD *)&a00010203040506[2
                                                 * ((unsigned __int16)((v11 / 0x5F5E100) / 0x2710) % 0x64u)];
  *((_WORD *)v12 + 2) = *(_WORD *)&a00010203040506[2 * v19];
  v12[6] = a00010203040506[v20];
  v12[7] = a00010203040506[(v20 & 0xFFFE) + 1];
  v12[8] = a00010203040506[2 * (v17 / 0xF4240)];
  v12[9] = a00010203040506[2 * (v17 / 0xF4240) + 1];
  *((_WORD *)v12 + 5) = *(_WORD *)&a00010203040506[2 * ((unsigned __int16)(v17 / 0x2710) % 0x64u)];
  *((_WORD *)v12 + 6) = *(_WORD *)&a00010203040506[2 * (v17 % 0x2710 / 0x64)];
  v12[14] = a00010203040506[2 * (v17 % 0x2710 % 0x64)];
  int v13 = v12 + 16;
  v12[15] = a00010203040506[(unsigned __int16)(2 * (v17 % 0x2710 % 0x64)) + 1];
  return v13;
}

uint64_t sub_100015D9C(uint64_t *a1, int a2)
{
  unsigned int v3 = (void *)*a1;
  uint64_t v4 = v3[4] - v3[3];
  if (!a2)
  {
    if (v4 <= 4)
    {
      sub_1000085BC(v3, 5);
      unsigned int v3 = (void *)*a1;
    }
    *(unsigned char *)sub_10000857C((uint64_t)v3, 1) = 102;
    char v5 = 115;
    char v6 = 108;
    char v7 = 97;
    goto LABEL_7;
  }
  if (v4 <= 3)
  {
    sub_1000085BC(v3, 4);
    char v5 = 117;
    char v6 = 114;
    char v7 = 116;
LABEL_7:
    unsigned int v3 = (void *)*a1;
    goto LABEL_8;
  }
  char v5 = 117;
  char v6 = 114;
  char v7 = 116;
LABEL_8:
  *(unsigned char *)sub_10000857C((uint64_t)v3, 1) = v7;
  *(unsigned char *)sub_10000857C(*a1, 1) = v6;
  *(unsigned char *)sub_10000857C(*a1, 1) = v5;
  *(unsigned char *)sub_10000857C(*a1, 1) = 101;
  return 1;
}

uint64_t sub_100015E80()
{
  sub_100003470(&__p, "--debug");
  uint64_t v0 = siri::dialogengine::OptionExists();
  uint64_t v2 = v0;
  if (v8 < 0)
  {
    operator delete(__p);
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    siri::dialogengine::Log::SetLogDebugMessages(0, v1);
    siri::dialogengine::Log::SetOutputToStdout(0, v5);
    return v2;
  }
  if (!v0) {
    goto LABEL_5;
  }
LABEL_3:
  siri::dialogengine::Log::SetLogDebugMessages((siri::dialogengine::Log *)1, v1);
  siri::dialogengine::Log::SetOutputToStdout((siri::dialogengine::Log *)1, v3);
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Activate debug mode", v4);
  return v2;
}

void sub_100015F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100015F30(uint64_t a1)
{
  sub_100003470(v4, "pattern");
  sub_100003470(__p, "Validate and manage pattern files.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100015FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100015FDC(uint64_t a1, uint64_t a2, void **a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_10002A74C((void *)a1, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (!*(void *)a2)
  {
LABEL_6:
    sub_100016558(a1);
    goto LABEL_12;
  }
  int Type = siri::dialogengine::VisualComponentsCombination::GetType(*(siri::dialogengine::VisualComponentsCombination **)a2);
  switch(Type)
  {
    case 3:
      char v7 = *(siri::dialogengine::VisualComponentsCombination **)a2;
      uint64_t v6 = *(void *)(a2 + 8);
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      char v8 = *(std::__shared_weak_count **)(a1 + 32);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = v6;
      if (v8) {
        sub_100006AE0(v8);
      }
      break;
    case 2:
      sub_100016360(a1);
      break;
    case 1:
      sub_100016168(a1);
      break;
    default:
      goto LABEL_6;
  }
LABEL_12:
  siri::dialogengine::VisualComponentsCombination::GetEntries(&v14, *(siri::dialogengine::VisualComponentsCombination **)(a1 + 24));
  uint64_t v9 = v14;
  for (uint64_t i = v15; v9 != i; v9 += 16)
  {
    unint64_t v11 = *(atomic_ullong **)(v9 + 8);
    v13[0] = *(siri::dialogengine::VisualComponentsCombination::Entry **)v9;
    v13[1] = (siri::dialogengine::VisualComponentsCombination::Entry *)v11;
    if (v11) {
      atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 40) += sub_1000166B8(v13);
    if (v11) {
      sub_100006AE0((std::__shared_weak_count *)v11);
    }
  }
  char v16 = (void **)&v14;
  sub_100008EDC(&v16);
  return a1;
}

void sub_100016118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  char v16 = *(std::__shared_weak_count **)(v14 + 32);
  if (v16) {
    sub_100006AE0(v16);
  }
  a14 = (void **)v14;
  sub_100008EDC(&a14);
  _Unwind_Resume(a1);
}

void sub_100016168(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = off_10007CF30;
  *(_OWORD *)(v2 + 40) = 0u;
  char v3 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 32) = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  *(void *)(a1 + 24) = v2 + 24;
  if (v3) {
    sub_100006AE0(v3);
  }
  siri::dialogengine::VisualComponentsCombination::SetType();
  uint64_t v4 = (char *)operator new(0x50uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)uint64_t v4 = off_10007CF80;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((void *)v4 + 9) = 0;
  unint64_t v12 = v4 + 24;
  int v13 = (std::__shared_weak_count *)v4;
  siri::dialogengine::VisualComponentsCombination::Entry::SetType();
  char v5 = *(siri::dialogengine::PatternSchemaComponent ***)a1;
  uint64_t v6 = *(siri::dialogengine::PatternSchemaComponent ***)(a1 + 8);
  while (v5 != v6)
  {
    char v7 = (char *)operator new(0x50uLL);
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)char v7 = off_10007CF80;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((void *)v7 + 9) = 0;
    *(_OWORD *)(v7 + 24) = 0u;
    unint64_t v10 = v7 + 24;
    unint64_t v11 = (std::__shared_weak_count *)v7;
    siri::dialogengine::VisualComponentsCombination::Entry::SetType();
    siri::dialogengine::PatternSchemaComponent::GetName((uint64_t *)&__p, *v5);
    siri::dialogengine::VisualComponentsCombination::Entry::SetComponentName();
    if (v9 < 0) {
      operator delete(__p);
    }
    siri::dialogengine::VisualComponentsCombination::Entry::AddChild();
    if (v11) {
      sub_100006AE0(v11);
    }
    v5 += 2;
  }
  siri::dialogengine::VisualComponentsCombination::AddEntry();
  if (v13) {
    sub_100006AE0(v13);
  }
}

void sub_10001630C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    sub_100006AE0(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_100016360(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = off_10007CF30;
  *(_OWORD *)(v2 + 40) = 0u;
  char v3 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 32) = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  *(void *)(a1 + 24) = v2 + 24;
  if (v3) {
    sub_100006AE0(v3);
  }
  siri::dialogengine::VisualComponentsCombination::SetType();
  uint64_t v4 = (char *)operator new(0x50uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)uint64_t v4 = off_10007CF80;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((void *)v4 + 9) = 0;
  unint64_t v12 = v4 + 24;
  int v13 = (std::__shared_weak_count *)v4;
  siri::dialogengine::VisualComponentsCombination::Entry::SetType();
  char v5 = *(siri::dialogengine::PatternSchemaComponent ***)a1;
  uint64_t v6 = *(siri::dialogengine::PatternSchemaComponent ***)(a1 + 8);
  while (v5 != v6)
  {
    char v7 = (char *)operator new(0x50uLL);
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)char v7 = off_10007CF80;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((void *)v7 + 9) = 0;
    *(_OWORD *)(v7 + 24) = 0u;
    unint64_t v10 = v7 + 24;
    unint64_t v11 = (std::__shared_weak_count *)v7;
    siri::dialogengine::VisualComponentsCombination::Entry::SetType();
    siri::dialogengine::PatternSchemaComponent::GetName((uint64_t *)&__p, *v5);
    siri::dialogengine::VisualComponentsCombination::Entry::SetComponentName();
    if (v9 < 0) {
      operator delete(__p);
    }
    siri::dialogengine::VisualComponentsCombination::Entry::AddChild();
    if (v11) {
      sub_100006AE0(v11);
    }
    v5 += 2;
  }
  siri::dialogengine::VisualComponentsCombination::AddEntry();
  if (v13) {
    sub_100006AE0(v13);
  }
}

void sub_100016504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    sub_100006AE0(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_100016558(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = off_10007CF30;
  *(_OWORD *)(v2 + 40) = 0u;
  char v3 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 32) = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  *(void *)(a1 + 24) = v2 + 24;
  if (v3) {
    sub_100006AE0(v3);
  }
  siri::dialogengine::VisualComponentsCombination::SetType();
  uint64_t v4 = *(siri::dialogengine::PatternSchemaComponent ***)a1;
  char v5 = *(siri::dialogengine::PatternSchemaComponent ***)(a1 + 8);
  while (v4 != v5)
  {
    uint64_t v6 = (char *)operator new(0x50uLL);
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
    *(void *)uint64_t v6 = off_10007CF80;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((void *)v6 + 9) = 0;
    unint64_t v10 = (std::__shared_weak_count *)v6;
    *(_OWORD *)(v6 + 24) = 0u;
    char v9 = v6 + 24;
    siri::dialogengine::VisualComponentsCombination::Entry::SetType();
    siri::dialogengine::PatternSchemaComponent::GetName((uint64_t *)&__p, *v4);
    siri::dialogengine::VisualComponentsCombination::Entry::SetComponentName();
    if (v8 < 0) {
      operator delete(__p);
    }
    siri::dialogengine::VisualComponentsCombination::AddEntry();
    if (v10) {
      sub_100006AE0(v10);
    }
    v4 += 2;
  }
}

void sub_100016684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_100006AE0(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000166B8(siri::dialogengine::VisualComponentsCombination::Entry **a1)
{
  uint64_t v2 = *a1;
  if (!v2) {
    return 0;
  }
  uint64_t v3 = siri::dialogengine::VisualComponentsCombination::Entry::GetType(v2) == 4;
  siri::dialogengine::VisualComponentsCombination::Entry::GetChildren((uint64_t *)&v10, *a1);
  uint64_t v4 = v10;
  for (uint64_t i = v11; v4 != i; v4 += 2)
  {
    uint64_t v6 = (std::__shared_weak_count *)v4[1];
    v9[0] = *v4;
    v9[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = sub_1000166B8(v9);
    if (v6) {
      sub_100006AE0(v6);
    }
    v3 += v7;
  }
  unint64_t v12 = (void **)&v10;
  sub_100008EDC(&v12);
  return v3;
}

void sub_100016780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  if (v14) {
    sub_100006AE0(v14);
  }
  a14 = (void **)&a11;
  sub_100008EDC(&a14);
  _Unwind_Resume(a1);
}

unint64_t sub_1000167A8(uint64_t a1)
{
  siri::dialogengine::VisualComponentsCombination::GetEntries(&v8, *(siri::dialogengine::VisualComponentsCombination **)(a1 + 24));
  uint64_t v1 = v8;
  uint64_t v2 = v9;
  if (v8 == v9)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(atomic_ullong **)(v1 + 8);
      v7[0] = *(siri::dialogengine::VisualComponentsCombination::Entry **)v1;
      v7[1] = (siri::dialogengine::VisualComponentsCombination::Entry *)v4;
      if (v4) {
        atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
      }
      unint64_t v5 = sub_10001687C(v7);
      if (v3 <= v5) {
        unint64_t v3 = v5;
      }
      if (v4) {
        sub_100006AE0((std::__shared_weak_count *)v4);
      }
      v1 += 16;
    }
    while (v1 != v2);
  }
  unint64_t v10 = (void **)&v8;
  sub_100008EDC(&v10);
  return v3;
}

void sub_100016854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  if (v14) {
    sub_100006AE0(v14);
  }
  a14 = (void **)&a11;
  sub_100008EDC(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_10001687C(siri::dialogengine::VisualComponentsCombination::Entry **a1)
{
  siri::dialogengine::VisualComponentsCombination::Entry::GetChildren((uint64_t *)&v9, *a1);
  uint64_t v1 = v9;
  uint64_t v2 = v10;
  if (v9 == v10)
  {
    uint64_t v6 = 1;
  }
  else
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = (std::__shared_weak_count *)v1[1];
      v8[0] = *v1;
      v8[1] = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v5 = sub_10001687C(v8);
      if (v3 <= v5) {
        unint64_t v3 = v5;
      }
      if (v4) {
        sub_100006AE0(v4);
      }
      v1 += 2;
    }
    while (v1 != v2);
    uint64_t v6 = v3 + 1;
  }
  unint64_t v11 = (void **)&v9;
  sub_100008EDC(&v11);
  return v6;
}

void sub_10001692C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  if (v14) {
    sub_100006AE0(v14);
  }
  a14 = (void **)&a11;
  sub_100008EDC(&a14);
  _Unwind_Resume(a1);
}

void sub_100016954(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v13 = 0;
  siri::dialogengine::VisualComponentsCombination::GetEntries((uint64_t *)&v11, *(siri::dialogengine::VisualComponentsCombination **)(a1 + 24));
  unint64_t v5 = v11;
  for (uint64_t i = v12; v5 != i; v5 += 2)
  {
    uint64_t v9 = *v5;
    uint64_t v7 = (std::__shared_weak_count *)v5[1];
    unint64_t v10 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v8 = sub_100016A58(&v9, a2, &v13, 1, a3);
    if (v10) {
      sub_100006AE0(v10);
    }
    if (v8) {
      break;
    }
  }
  uint64_t v14 = (void **)&v11;
  sub_100008EDC(&v14);
}

void sub_100016A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10002A89C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100016A58(uint64_t *a1, unint64_t a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v22 = a4;
  uint64_t result = *a1;
  if (result)
  {
    if (*a3 == a2)
    {
      unint64_t v10 = (uint64_t *)a5[1];
      if ((unint64_t)v10 >= a5[2])
      {
        uint64_t v12 = sub_10002AAC8(a5, a1, &v22);
      }
      else
      {
        unint64_t v11 = (std::__shared_weak_count *)a1[1];
        if (v11)
        {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t *v10 = result;
          v10[1] = (uint64_t)v11;
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          void v10[2] = a4;
          sub_100006AE0(v11);
        }
        else
        {
          uint64_t *v10 = result;
          v10[1] = 0;
          void v10[2] = a4;
        }
        uint64_t v12 = (uint64_t)(v10 + 3);
        a5[1] = (uint64_t)(v10 + 3);
      }
      a5[1] = v12;
      uint64_t result = *a1;
    }
    if (siri::dialogengine::VisualComponentsCombination::Entry::GetType((siri::dialogengine::VisualComponentsCombination::Entry *)result) == 4)
    {
      unint64_t v13 = *a3 + 1;
      *a3 = v13;
      if (v13 > a2) {
        return 1;
      }
    }
    else
    {
      siri::dialogengine::VisualComponentsCombination::Entry::GetChildren((uint64_t *)&v20, (siri::dialogengine::VisualComponentsCombination::Entry *)*a1);
      uint64_t v14 = v20;
      uint64_t v15 = v21;
      if (v20 != v21)
      {
        while (1)
        {
          uint64_t v18 = *v14;
          char v16 = (std::__shared_weak_count *)v14[1];
          unsigned int v19 = v16;
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v17 = sub_100016A58(&v18, a2, a3, v22 + 1, a5);
          if (v19) {
            sub_100006AE0(v19);
          }
          if (v17) {
            break;
          }
          v14 += 2;
          if (v14 == v15) {
            goto LABEL_20;
          }
        }
        int v23 = (void **)&v20;
        sub_100008EDC(&v23);
        return 1;
      }
LABEL_20:
      int v23 = (void **)&v20;
      sub_100008EDC(&v23);
    }
    return 0;
  }
  return result;
}

void sub_100016BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  if (a11) {
    sub_100006AE0(a11);
  }
  a16 = (void **)&a12;
  sub_100008EDC(&a16);
  _Unwind_Resume(a1);
}

void sub_100016C0C(uint64_t *a1@<X0>, unsigned __int8 **a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 == v6) {
    goto LABEL_22;
  }
  do
  {
    siri::dialogengine::PatternSchemaComponent::GetName((uint64_t *)&__p, *(siri::dialogengine::PatternSchemaComponent **)v5);
    if ((v18 & 0x80u) == 0) {
      size_t v8 = v18;
    }
    else {
      size_t v8 = __n;
    }
    uint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    int v10 = (char)v9;
    if ((char)v9 < 0) {
      uint64_t v9 = a2[1];
    }
    if ((unsigned __int8 *)v8 != v9) {
      goto LABEL_17;
    }
    if (v10 >= 0) {
      unint64_t v11 = (unsigned __int8 *)a2;
    }
    else {
      unint64_t v11 = *a2;
    }
    if ((v18 & 0x80) == 0)
    {
      if (!v18) {
        goto LABEL_22;
      }
      uint64_t v12 = 0;
      while (*((unsigned __int8 *)&__p + v12) == v11[v12])
      {
        if (v18 == ++v12) {
          goto LABEL_22;
        }
      }
LABEL_17:
      if ((v18 & 0x80) != 0) {
        operator delete(__p);
      }
      goto LABEL_20;
    }
    unint64_t v13 = __p;
    int v14 = memcmp(__p, v11, __n);
    operator delete(v13);
    if (!v14) {
      goto LABEL_22;
    }
LABEL_20:
    v5 += 16;
  }
  while (v5 != v6);
  uint64_t v5 = v6;
LABEL_22:
  if (v5 == a1[1])
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    *a3 = *(void *)v5;
    uint64_t v15 = *(void *)(v5 + 8);
    a3[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

BOOL sub_100016D48(uint64_t *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) < 3 || sub_10003B18C())
  {
    sub_10003B17C(a2);
    sub_100003470(__p, aExecutableComm_3);
    sub_100003470(&v131, "pattern");
    sub_10003B430();
    if (SHIBYTE(v133) < 0) {
      operator delete(v131);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    return 0;
  }
  LODWORD(v131) = 0;
  BYTE4(v131) = 1;
  v132[0] = 0;
  char v134 = 0;
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  uint64_t v135 = 0;
  uint64_t v6 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) <= 3)
  {
    sub_100003470(__p, "Insufficient arguments specified for catutil pattern");
    sub_100003470(v113, (char *)&unk_10006DFE2);
    BOOL v4 = sub_10004BDC8(&v131, (uint64_t)__p, (const void **)v113, 0);
    if ((v113[23] & 0x80000000) != 0) {
      operator delete(*(void **)v113);
    }
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_121;
    }
    uint64_t v7 = *(void **)__p;
    goto LABEL_120;
  }
  if (*(char *)(v6 + 71) < 0)
  {
    sub_100003600(&__dst, *(void **)(v6 + 48), *(void *)(v6 + 56));
  }
  else
  {
    long long __dst = *(_OWORD *)(v6 + 48);
    uint64_t v130 = *(void *)(v6 + 64);
  }
  if (SHIBYTE(v130) < 0)
  {
    if (*((void *)&__dst + 1) != 6)
    {
      if (*((void *)&__dst + 1) != 7)
      {
        if (*((void *)&__dst + 1) == 8)
        {
          uint64_t v8 = *(void *)__dst;
LABEL_26:
          if (v8 == 0x65746164696C6176)
          {
            sub_100003470(&v126, "--templateDir");
            siri::dialogengine::GetOption();
            siri::dialogengine::ExpandPath();
            if ((v113[23] & 0x80000000) != 0) {
              operator delete(*(void **)v113);
            }
            if ((char)v128 < 0) {
              operator delete(v126);
            }
            sub_100003470(&v126, "--patternId");
            siri::dialogengine::GetOption();
            if ((char)v128 < 0) {
              operator delete(v126);
            }
            sub_100003470(&v126, "--xcode");
            uint64_t v9 = (const char *)siri::dialogengine::OptionExists();
            sub_10004BCE0((uint64_t)&v131, v9);
            if ((char)v128 < 0) {
              operator delete(v126);
            }
            uint64_t v10 = __p[23];
            if (__p[23] < 0) {
              uint64_t v10 = *(void *)&__p[8];
            }
            if (v10)
            {
              uint64_t v11 = v113[23];
              if (v113[23] < 0) {
                uint64_t v11 = *(void *)&v113[8];
              }
              if (!v11)
              {
                sub_100003470(v122, "pattern");
                siri::dialogengine::JoinPath();
                siri::dialogengine::ListDirRecursively();
                if (SHIBYTE(v125) < 0) {
                  operator delete((void *)v124);
                }
                if ((char)v123 < 0) {
                  operator delete(v122[0]);
                }
                unint64_t v48 = v126;
                for (uint64_t i = v127; v48 != i; v48 += 3)
                {
                  if (*((char *)v48 + 23) < 0)
                  {
                    sub_100003600(&v124, *v48, (unint64_t)v48[1]);
                  }
                  else
                  {
                    long long v50 = *(_OWORD *)v48;
                    long long v125 = v48[2];
                    long long v124 = v50;
                  }
                  if (siri::dialogengine::HasPatternExtension())
                  {
                    std::operator+<char>();
                    sub_10004C1A4(&v131, (uint64_t)v122);
                    if ((char)v123 < 0) {
                      operator delete(v122[0]);
                    }
                    siri::dialogengine::CatPathToId();
                    sub_1000190F0(&v131);
                    if ((char)v123 < 0) {
                      operator delete(v122[0]);
                    }
                  }
                  if (SHIBYTE(v125) < 0) {
                    operator delete((void *)v124);
                  }
                }
                BOOL v4 = sub_10004C22C((uint64_t)&v131);
                *(void *)&long long v124 = &v126;
                sub_100003B14((void ***)&v124);
                goto LABEL_113;
              }
              BOOL v12 = sub_1000190F0(&v131);
              goto LABEL_112;
            }
            sub_100003470(&v126, "--templateDir required for catutil pattern validate");
            sub_100003470(&v124, (char *)&unk_10006DFE2);
            uint64_t v43 = sub_10004BDC8(&v131, (uint64_t)&v126, (const void **)&v124, 0);
            goto LABEL_329;
          }
        }
LABEL_111:
        sub_100003470(__p, "Unsupported sub-command for catutil pattern");
        sub_100003470(v113, (char *)&unk_10006DFE2);
        BOOL v12 = sub_10004BDC8(&v131, (uint64_t)__p, (const void **)v113, 0);
LABEL_112:
        BOOL v4 = v12;
        goto LABEL_113;
      }
      if (*(_DWORD *)__dst != 1667594341 || *(_DWORD *)(__dst + 3) != 1702131043) {
        goto LABEL_111;
      }
LABEL_62:
      sub_100003470(v113, "--templateDir");
      siri::dialogengine::GetOption();
      siri::dialogengine::ExpandPath();
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((v113[23] & 0x80000000) != 0) {
        operator delete(*(void **)v113);
      }
      sub_100003470(__p, "--patternId");
      siri::dialogengine::GetOption();
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_100003470(__p, "--locale");
      siri::dialogengine::GetOption();
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_100003470(v113, "--params");
      siri::dialogengine::GetMultipleOptions();
      sub_100003470(v118, " ");
      siri::dialogengine::StringJoin();
      if ((char)v119 < 0) {
        operator delete(v118[0]);
      }
      v118[0] = __p;
      sub_100003B14((void ***)v118);
      if ((v113[23] & 0x80000000) != 0) {
        operator delete(*(void **)v113);
      }
      sub_100003470(__p, "--mode");
      siri::dialogengine::GetOption();
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_100003470(__p, "--debug");
      int v18 = siri::dialogengine::OptionExists();
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      unsigned int v19 = (void **)v128;
      if ((v128 & 0x80u) != 0) {
        unsigned int v19 = v127;
      }
      if (v19)
      {
        uint64_t v20 = HIBYTE(v125);
        if (SHIBYTE(v125) < 0) {
          uint64_t v20 = *((void *)&v124 + 1);
        }
        if (v20)
        {
          unint64_t v21 = v123;
          if ((v123 & 0x80u) != 0) {
            unint64_t v21 = (unint64_t)v122[1];
          }
          if (v21)
          {
            if (sub_1000197E4(v118, "voiceOnly")
              && sub_1000197E4(v118, "voiceForward")
              && sub_1000197E4(v118, "displayForward")
              && sub_1000197E4(v118, "displayOnly")
              && sub_1000197E4(v118, (char *)&unk_10006DFE2))
            {
              std::operator+<char>();
              uint64_t v22 = std::string::append((std::string *)v113, "' not recognized");
              long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
              *(void *)&__p[16] = *((void *)&v22->__r_.__value_.__l + 2);
              *(_OWORD *)std::string __p = v23;
              v22->__r_.__value_.__l.__size_ = 0;
              v22->__r_.__value_.__r.__words[2] = 0;
              v22->__r_.__value_.__r.__words[0] = 0;
              sub_100003470(v116, (char *)&unk_10006DFE2);
              BOOL v4 = sub_10004BDC8(&v131, (uint64_t)__p, (const void **)v116, 0);
              if (v117 < 0) {
                operator delete(v116[0]);
              }
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              if ((v113[23] & 0x80000000) == 0) {
                goto LABEL_411;
              }
              unsigned int v24 = *(void **)v113;
              goto LABEL_410;
            }
            sub_100003470(__p, "--renderVisualCat");
            siri::dialogengine::GetOption();
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            sub_100003470(__p, "--renderVisualCat");
            if (siri::dialogengine::OptionExists())
            {
              BOOL v51 = sub_10001905C(v116, (char *)&unk_10006DFE2);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              if (v51)
              {
                sub_100003470(__p, "--localeNo path given for rendered output");
                sub_100003470(v113, (char *)&unk_10006DFE2);
                BOOL v4 = sub_10004BDC8(&v131, (uint64_t)__p, (const void **)v113, 0);
                if ((v113[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v113);
                }
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
LABEL_408:
                if ((v117 & 0x80000000) == 0)
                {
LABEL_411:
                  if ((char)v119 < 0) {
                    operator delete(v118[0]);
                  }
                  if ((char)v121 < 0) {
                    operator delete(v120[0]);
                  }
                  if ((char)v123 < 0) {
                    operator delete(v122[0]);
                  }
                  if (SHIBYTE(v125) < 0) {
                    operator delete((void *)v124);
                  }
                  if (((char)v128 & 0x80000000) == 0) {
                    goto LABEL_118;
                  }
                  uint64_t v30 = v126;
                  goto LABEL_117;
                }
                unsigned int v24 = v116[0];
LABEL_410:
                operator delete(v24);
                goto LABEL_411;
              }
            }
            else if ((__p[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)__p);
            }
            sub_100003470(__p, "--debug");
            int v56 = siri::dialogengine::OptionExists();
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            if (v56)
            {
              siri::dialogengine::Log::SetOutputToStdout((siri::dialogengine::Log *)1, v55);
              siri::dialogengine::Log::SetLogDebugMessages((siri::dialogengine::Log *)1, v57);
            }
            else
            {
              siri::dialogengine::Log::SetOutputToStdout(0, v55);
            }
            memset(v113, 0, sizeof(v113));
            uint64_t v114 = 0;
            uint64_t v115 = 256;
            *(_OWORD *)&__p[8] = 0u;
            long long v107 = 0u;
            *(void *)std::string __p = v113;
            uint64_t v108 = 0;
            uint64_t v109 = 512;
            int v110 = 324;
            __int16 v111 = 0x2000;
            uint64_t v112 = 4;
            sub_10001193C((void **)__p);
            sub_100011990((uint64_t *)__p, "templateDir");
            if ((v128 & 0x80u) == 0) {
              unint64_t v59 = (char *)&v126;
            }
            else {
              unint64_t v59 = (char *)v126;
            }
            sub_100011990((uint64_t *)__p, v59);
            sub_100011990((uint64_t *)__p, "patternId");
            if (SHIBYTE(v125) >= 0) {
              uint64_t v60 = (char *)&v124;
            }
            else {
              uint64_t v60 = (char *)v124;
            }
            sub_100011990((uint64_t *)__p, v60);
            sub_100011990((uint64_t *)__p, "locale");
            if ((v123 & 0x80u) == 0) {
              unint64_t v61 = (char *)v122;
            }
            else {
              unint64_t v61 = (char *)v122[0];
            }
            sub_100011990((uint64_t *)__p, v61);
            unint64_t v62 = v121;
            if ((v121 & 0x80u) != 0) {
              unint64_t v62 = (unint64_t)v120[1];
            }
            if (v62)
            {
              sub_100011990((uint64_t *)__p, "parameters");
              sub_100011990((uint64_t *)__p, "<PARAMS>");
            }
            unint64_t v63 = v119;
            if ((v119 & 0x80u) != 0) {
              unint64_t v63 = (unint64_t)v118[1];
            }
            if (v63)
            {
              sub_100011990((uint64_t *)__p, "responseMode");
              if ((v119 & 0x80u) == 0) {
                uint64_t v64 = (char *)v118;
              }
              else {
                uint64_t v64 = (char *)v118[0];
              }
              sub_100011990((uint64_t *)__p, v64);
            }
            if (v18)
            {
              sub_100011990((uint64_t *)__p, "debug");
              sub_100014614((void **)__p, 2);
              sub_100015D9C((uint64_t *)__p, 1);
            }
            if (!sub_1000197E4(v116, (char *)&unk_10006DFE2)) {
              goto LABEL_371;
            }
            sub_100011990((uint64_t *)__p, "renderVisualCat");
            if (v117 >= 0) {
              std::string v65 = (char *)v116;
            }
            else {
              std::string v65 = (char *)v116[0];
            }
            sub_100011990((uint64_t *)__p, v65);
            sub_100003470(v104, "--renderDarkMode");
            int v66 = siri::dialogengine::OptionExists();
            if (SHIBYTE(v105) < 0) {
              operator delete(v104[0]);
            }
            if (v66)
            {
              sub_100011990((uint64_t *)__p, "renderDarkMode");
              sub_100014614((void **)__p, 2);
              sub_100015D9C((uint64_t *)__p, 1);
            }
            sub_100003470(&v102, "--renderDeviceClass");
            siri::dialogengine::GetOption();
            if (SHIBYTE(v103) < 0) {
              operator delete((void *)v102);
            }
            sub_100003470(&v102, "--renderDeviceClass");
            if (siri::dialogengine::OptionExists())
            {
              BOOL v67 = sub_1000197E4(v104, (char *)&unk_10006DFE2);
              if (SHIBYTE(v103) < 0) {
                operator delete((void *)v102);
              }
              if (v67)
              {
                sub_100011990((uint64_t *)__p, "renderDeviceClass");
                if (v105 >= 0) {
                  std::string v68 = (char *)v104;
                }
                else {
                  std::string v68 = (char *)v104[0];
                }
                sub_100011990((uint64_t *)__p, v68);
              }
            }
            else if (SHIBYTE(v103) < 0)
            {
              operator delete((void *)v102);
            }
            sub_100003470(v100, "--renderDeviceTrain");
            siri::dialogengine::GetOption();
            if (SHIBYTE(v101) < 0) {
              operator delete(v100[0]);
            }
            sub_100003470(v100, "--renderDeviceTrain");
            if (siri::dialogengine::OptionExists())
            {
              BOOL v69 = sub_10001905C(&v102, (char *)&unk_10006DFE2);
              if (SHIBYTE(v101) < 0) {
                operator delete(v100[0]);
              }
              if (!v69)
              {
                sub_100011990((uint64_t *)__p, "renderDeviceTrain");
                if (v103 >= 0) {
                  std::string v70 = (char *)&v102;
                }
                else {
                  std::string v70 = (char *)v102;
                }
                sub_100011990((uint64_t *)__p, v70);
                sub_100003470(&v99, "--renderOrientation");
                siri::dialogengine::GetOption();
                if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v99.__r_.__value_.__l.__data_);
                }
                sub_100003470(&v99, "--renderOrientation");
                if (siri::dialogengine::OptionExists())
                {
                  BOOL v71 = sub_1000197E4(v100, (char *)&unk_10006DFE2);
                  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v99.__r_.__value_.__l.__data_);
                  }
                  if (v71)
                  {
                    sub_100011990((uint64_t *)__p, "renderOrientation");
                    if (v101 >= 0) {
                      std::string v72 = (char *)v100;
                    }
                    else {
                      std::string v72 = (char *)v100[0];
                    }
                    sub_100011990((uint64_t *)__p, v72);
                  }
                }
                else if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v99.__r_.__value_.__l.__data_);
                }
                sub_100003470(&v98, "--renderContext");
                siri::dialogengine::GetOption();
                if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v98.__r_.__value_.__l.__data_);
                }
                sub_100003470(&v98, "--renderContext");
                if (siri::dialogengine::OptionExists())
                {
                  BOOL v74 = sub_1000197E4(&v99, (char *)&unk_10006DFE2);
                  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v98.__r_.__value_.__l.__data_);
                  }
                  if (v74)
                  {
                    sub_100011990((uint64_t *)__p, "renderContext");
                    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v75 = &v99;
                    }
                    else {
                      uint64_t v75 = (std::string *)v99.__r_.__value_.__r.__words[0];
                    }
                    sub_100011990((uint64_t *)__p, (char *)v75);
                  }
                }
                else if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v98.__r_.__value_.__l.__data_);
                }
                sub_100003470(v96, "--renderScreenSize");
                siri::dialogengine::GetOption();
                if (v97 < 0) {
                  operator delete(v96[0]);
                }
                sub_100003470(v96, "--renderScreenSize");
                if (siri::dialogengine::OptionExists())
                {
                  BOOL v76 = sub_1000197E4(&v98, (char *)&unk_10006DFE2);
                  if (v97 < 0) {
                    operator delete(v96[0]);
                  }
                  if (v76)
                  {
                    sub_100011990((uint64_t *)__p, "renderScreenSize");
                    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v77 = &v98;
                    }
                    else {
                      uint64_t v77 = (std::string *)v98.__r_.__value_.__r.__words[0];
                    }
                    sub_100011990((uint64_t *)__p, (char *)v77);
                  }
                }
                else if (v97 < 0)
                {
                  operator delete(v96[0]);
                }
                if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v98.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v99.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v101) < 0) {
                  operator delete(v100[0]);
                }
                if (SHIBYTE(v103) < 0) {
                  operator delete((void *)v102);
                }
                if (SHIBYTE(v105) < 0) {
                  operator delete(v104[0]);
                }
LABEL_371:
                sub_100011A5C((void **)__p);
                std::string v78 = (char *)sub_1000118F8(v113);
                sub_100003470(v104, v78);
                sub_100003470(v100, "\"<PARAMS>\"");
                siri::dialogengine::StringReplace();
                if (SHIBYTE(v105) < 0) {
                  operator delete(v104[0]);
                }
                *(_OWORD *)long long v104 = v102;
                uint64_t v105 = v103;
                HIBYTE(v103) = 0;
                LOBYTE(v102) = 0;
                if (SHIBYTE(v101) < 0) {
                  operator delete(v100[0]);
                }
                std::string v79 = (const char *)CATPatternExecute();
                puts(v79);
                if (v79) {
                  uint64_t v80 = (char *)v79;
                }
                else {
                  uint64_t v80 = (char *)&unk_10006DFE2;
                }
                sub_100003470(&v102, v80);
                CATFree();
                sub_100003470(&v98, "renderVisualCat");
                uint64_t v81 = std::string::insert(&v98, 0, "\"");
                long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
                v99.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v82;
                v81->__r_.__value_.__l.__size_ = 0;
                v81->__r_.__value_.__r.__words[2] = 0;
                v81->__r_.__value_.__r.__words[0] = 0;
                size_t v83 = std::string::append(&v99, "\":");
                long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
                int64_t v101 = v83->__r_.__value_.__r.__words[2];
                *(_OWORD *)long long v100 = v84;
                v83->__r_.__value_.__l.__size_ = 0;
                v83->__r_.__value_.__r.__words[2] = 0;
                v83->__r_.__value_.__r.__words[0] = 0;
                if (siri::dialogengine::StringContains())
                {
                  sub_100003470(v96, "\"visual\": ");
                  if (siri::dialogengine::StringContains())
                  {
                    sub_100003470(&v94, "\"data\": ");
                    int v85 = siri::dialogengine::StringContains();
                    if (v95 < 0) {
                      operator delete(v94);
                    }
                  }
                  else
                  {
                    int v85 = 0;
                  }
                  if (v97 < 0) {
                    operator delete(v96[0]);
                  }
                }
                else
                {
                  int v85 = 0;
                }
                if (SHIBYTE(v101) < 0) {
                  operator delete(v100[0]);
                }
                if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v99.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v98.__r_.__value_.__l.__data_);
                }
                if (v85)
                {
                  if (SHIBYTE(v105) < 0)
                  {
                    sub_100003600(v92, v104[0], (unint64_t)v104[1]);
                  }
                  else
                  {
                    *(_OWORD *)uint64_t v92 = *(_OWORD *)v104;
                    uint64_t v93 = v105;
                  }
                  if (SHIBYTE(v103) < 0)
                  {
                    sub_100003600(v90, (void *)v102, *((unint64_t *)&v102 + 1));
                  }
                  else
                  {
                    *(_OWORD *)unsigned int v90 = v102;
                    uint64_t v91 = v103;
                  }
                  sub_100019878((uint64_t **)v92, (const char *)v90);
                  if (SHIBYTE(v91) < 0) {
                    operator delete(v90[0]);
                  }
                  if (SHIBYTE(v93) < 0) {
                    operator delete(v92[0]);
                  }
                }
                goto LABEL_403;
              }
            }
            else if (SHIBYTE(v101) < 0)
            {
              operator delete(v100[0]);
            }
            std::string v73 = sub_1000042E0(&std::cout, (uint64_t)"Error: no --renderDeviceTrain option specified", 46);
            sub_10000F934(v73);
LABEL_403:
            if (SHIBYTE(v103) < 0) {
              operator delete((void *)v102);
            }
            if (SHIBYTE(v105) < 0) {
              operator delete(v104[0]);
            }
            sub_100006BE8((uint64_t)&__p[8]);
            sub_100006BE8((uint64_t)v113);
            BOOL v4 = 1;
            goto LABEL_408;
          }
          sub_100003470(__p, "--locale required for catutil pattern execute");
          sub_100003470(v113, (char *)&unk_10006DFE2);
          BOOL v47 = sub_10004BDC8(&v131, (uint64_t)__p, (const void **)v113, 0);
        }
        else
        {
          sub_100003470(__p, "--patternId required for catutil pattern execute");
          sub_100003470(v113, (char *)&unk_10006DFE2);
          BOOL v47 = sub_10004BDC8(&v131, (uint64_t)__p, (const void **)v113, 0);
        }
      }
      else
      {
        sub_100003470(__p, "--templateDir required for catutil pattern execute");
        sub_100003470(v113, (char *)&unk_10006DFE2);
        BOOL v47 = sub_10004BDC8(&v131, (uint64_t)__p, (const void **)v113, 0);
      }
      BOOL v4 = v47;
      if ((v113[23] & 0x80000000) != 0) {
        operator delete(*(void **)v113);
      }
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_411;
      }
      unsigned int v24 = *(void **)__p;
      goto LABEL_410;
    }
    if (*(_DWORD *)__dst != 1953001332 || *(_WORD *)(__dst + 4) != 27757)
    {
      if (*(_DWORD *)__dst != 1634038371 || *(_WORD *)(__dst + 4) != 25972)
      {
        p_dst = (long long *)__dst;
        goto LABEL_107;
      }
LABEL_148:
      sub_100003470(v113, "--schema");
      siri::dialogengine::GetOption();
      if ((v113[23] & 0x80000000) != 0) {
        operator delete(*(void **)v113);
      }
      sub_100003470(&v124, "--templateDir");
      siri::dialogengine::GetOption();
      siri::dialogengine::ExpandPath();
      if ((char)v128 < 0) {
        operator delete(v126);
      }
      if (SHIBYTE(v125) < 0) {
        operator delete((void *)v124);
      }
      sub_100003470(&v124, "--patternId");
      siri::dialogengine::GetOption();
      if (SHIBYTE(v125) < 0) {
        operator delete((void *)v124);
      }
      sub_100003470(v120, "--schemaTemplateDir");
      siri::dialogengine::GetOption();
      siri::dialogengine::ExpandPath();
      if ((char)v123 < 0) {
        operator delete(v122[0]);
      }
      if ((char)v121 < 0) {
        operator delete(v120[0]);
      }
      uint64_t v40 = __p[23];
      if (__p[23] < 0) {
        uint64_t v40 = *(void *)&__p[8];
      }
      if (v40)
      {
        uint64_t v41 = v113[23];
        if (v113[23] < 0) {
          uint64_t v41 = *(void *)&v113[8];
        }
        if (v41)
        {
          unint64_t v42 = (void **)v128;
          if ((v128 & 0x80u) != 0) {
            unint64_t v42 = v127;
          }
          if (v42)
          {
            uint64_t v43 = sub_10001F65C(&v131, (uint64_t)__p, (uint64_t)v113, (uint64_t)&v126);
            goto LABEL_329;
          }
          sub_100003470(v122, "--patternId required for catutil pattern create");
          sub_100003470(v120, (char *)&unk_10006DFE2);
          BOOL v52 = sub_10004BDC8(&v131, (uint64_t)v122, (const void **)v120, 0);
        }
        else
        {
          sub_100003470(v122, "--templateDir required for catutil pattern create");
          sub_100003470(v120, (char *)&unk_10006DFE2);
          BOOL v52 = sub_10004BDC8(&v131, (uint64_t)v122, (const void **)v120, 0);
        }
      }
      else
      {
        sub_100003470(v122, "--schema required for catutil pattern create");
        sub_100003470(v120, (char *)&unk_10006DFE2);
        BOOL v52 = sub_10004BDC8(&v131, (uint64_t)v122, (const void **)v120, 0);
      }
      BOOL v4 = v52;
      if ((char)v121 < 0) {
        operator delete(v120[0]);
      }
      if ((char)v123 < 0) {
        operator delete(v122[0]);
      }
      goto LABEL_330;
    }
  }
  else
  {
    if (HIBYTE(v130) != 6)
    {
      if (HIBYTE(v130) != 7)
      {
        if (HIBYTE(v130) == 8)
        {
          uint64_t v8 = __dst;
          goto LABEL_26;
        }
        goto LABEL_111;
      }
      if (__dst != 1667594341 || *(_DWORD *)((char *)&__dst + 3) != 1702131043) {
        goto LABEL_111;
      }
      goto LABEL_62;
    }
    if (__dst != 1953001332 || WORD2(__dst) != 27757)
    {
      if (__dst != 1634038371 || WORD2(__dst) != 25972)
      {
        p_dst = &__dst;
LABEL_107:
        int v27 = *(_DWORD *)p_dst;
        int v28 = *((unsigned __int16 *)p_dst + 2);
        if (v27 != 1634886000 || v28 != 29549) {
          goto LABEL_111;
        }
        sub_100003470(&v126, "--templateDir");
        siri::dialogengine::GetOption();
        siri::dialogengine::ExpandPath();
        if ((v113[23] & 0x80000000) != 0) {
          operator delete(*(void **)v113);
        }
        if ((char)v128 < 0) {
          operator delete(v126);
        }
        sub_100003470(&v126, "--patternId");
        siri::dialogengine::GetOption();
        if ((char)v128 < 0) {
          operator delete(v126);
        }
        sub_100003470(&v126, "--excludeComputed");
        siri::dialogengine::OptionExists();
        if ((char)v128 < 0) {
          operator delete(v126);
        }
        sub_100003470(&v126, "--includeComputed");
        siri::dialogengine::OptionExists();
        if ((char)v128 < 0) {
          operator delete(v126);
        }
        sub_100003470(&v126, "--includeSettings");
        siri::dialogengine::OptionExists();
        if ((char)v128 < 0) {
          operator delete(v126);
        }
        sub_100003470(&v126, "--includeValueFromCat");
        siri::dialogengine::OptionExists();
        if ((char)v128 < 0) {
          operator delete(v126);
        }
        sub_100003470(&v126, "--json");
        siri::dialogengine::OptionExists();
        if ((char)v128 < 0) {
          operator delete(v126);
        }
        sub_100003470(&v126, "--xml");
        siri::dialogengine::OptionExists();
        if ((char)v128 < 0) {
          operator delete(v126);
        }
        uint64_t v53 = __p[23];
        if (__p[23] < 0) {
          uint64_t v53 = *(void *)&__p[8];
        }
        if (v53)
        {
          uint64_t v54 = v113[23];
          if (v113[23] < 0) {
            uint64_t v54 = *(void *)&v113[8];
          }
          if (v54)
          {
            BOOL v12 = sub_1000214F0();
            goto LABEL_112;
          }
          sub_100003470(&v126, "--patternId required for catutil pattern params");
          sub_100003470(&v124, (char *)&unk_10006DFE2);
          uint64_t v43 = sub_10004BDC8(&v131, (uint64_t)&v126, (const void **)&v124, 0);
        }
        else
        {
          sub_100003470(&v126, "--templateDir required for catutil pattern params");
          sub_100003470(&v124, (char *)&unk_10006DFE2);
          uint64_t v43 = sub_10004BDC8(&v131, (uint64_t)&v126, (const void **)&v124, 0);
        }
LABEL_329:
        BOOL v4 = v43;
LABEL_330:
        if (SHIBYTE(v125) < 0) {
          operator delete((void *)v124);
        }
        if (((char)v128 & 0x80000000) == 0) {
          goto LABEL_113;
        }
        uint64_t v58 = v126;
        goto LABEL_334;
      }
      goto LABEL_148;
    }
  }
  sub_100003470(&v126, "--schemaTemplateDir");
  siri::dialogengine::GetOption();
  siri::dialogengine::ExpandPath();
  if ((v113[23] & 0x80000000) != 0) {
    operator delete(*(void **)v113);
  }
  if ((char)v128 < 0) {
    operator delete(v126);
  }
  sub_100003470(v113, "--all");
  unint64_t v31 = (siri::dialogengine *)siri::dialogengine::OptionExists();
  int v32 = (int)v31;
  if ((v113[23] & 0x80000000) != 0) {
    operator delete(*(void **)v113);
  }
  if (v32)
  {
    siri::dialogengine::GetSchemaSearchPaths((uint64_t *)v113, v31);
    uint64_t v33 = __p[23];
    if (__p[23] < 0) {
      uint64_t v33 = *(void *)&__p[8];
    }
    if (v33) {
      sub_10001A5A0((uint64_t *)v113, *(uint64_t *)v113, (long long *)__p);
    }
    uint64_t v35 = *(void *)&v113[8];
    uint64_t v34 = *(void *)v113;
    if (*(void *)v113 == *(void *)&v113[8])
    {
LABEL_147:
      long long v126 = (void **)v113;
      sub_100003B14(&v126);
      BOOL v4 = 1;
      goto LABEL_115;
    }
LABEL_135:
    siri::dialogengine::ListDir();
    uint64_t v36 = v126;
    unint64_t v37 = v127;
    while (1)
    {
      if (v36 == v37)
      {
        *(void *)&long long v124 = &v126;
        sub_100003B14((void ***)&v124);
        v34 += 24;
        if (v34 == v35) {
          goto LABEL_147;
        }
        goto LABEL_135;
      }
      sub_100003470(&v124, "patternschema");
      HasExtensiouint64_t n = siri::dialogengine::HasExtension();
      int v39 = HasExtension;
      if (SHIBYTE(v125) < 0)
      {
        operator delete((void *)v124);
        if (!v39) {
          goto LABEL_145;
        }
      }
      else if (!HasExtension)
      {
        goto LABEL_145;
      }
      siri::dialogengine::RemoveExtension();
      sub_10001A714();
      if (v89 < 0) {
        operator delete(v88);
      }
      if (SHIBYTE(v125) < 0) {
        operator delete((void *)v124);
      }
LABEL_145:
      v36 += 3;
    }
  }
  sub_100003470(&v126, "--schema");
  siri::dialogengine::GetOption();
  if ((char)v128 < 0) {
    operator delete(v126);
  }
  uint64_t v44 = v113[23];
  if (v113[23] < 0) {
    uint64_t v44 = *(void *)&v113[8];
  }
  if (!v44)
  {
    sub_100003470(&v126, "--schema required for catutil pattern tohtml");
    sub_100003470(&v124, (char *)&unk_10006DFE2);
    uint64_t v43 = sub_10004BDC8(&v131, (uint64_t)&v126, (const void **)&v124, 0);
    goto LABEL_329;
  }
  sub_10001A714();
  unint64_t v45 = (void **)v128;
  if ((v128 & 0x80u) != 0) {
    unint64_t v45 = v127;
  }
  if (v45)
  {
    sub_100003470(&v124, "--open");
    int v46 = siri::dialogengine::OptionExists();
    if (SHIBYTE(v125) < 0) {
      operator delete((void *)v124);
    }
    if (v46)
    {
      std::operator+<char>();
      siri::dialogengine::ExecuteShellCommand();
      if (v87 < 0) {
        operator delete(v86);
      }
      if (SHIBYTE(v125) < 0) {
        operator delete((void *)v124);
      }
    }
  }
  if (((char)v128 & 0x80000000) == 0)
  {
    BOOL v4 = v128 != 0;
    goto LABEL_113;
  }
  uint64_t v58 = v126;
  BOOL v4 = v127 != 0;
LABEL_334:
  operator delete(v58);
LABEL_113:
  if ((v113[23] & 0x80000000) != 0) {
    operator delete(*(void **)v113);
  }
LABEL_115:
  if ((__p[23] & 0x80000000) != 0)
  {
    uint64_t v30 = *(void ***)__p;
LABEL_117:
    operator delete(v30);
  }
LABEL_118:
  if ((SHIBYTE(v130) & 0x80000000) == 0) {
    goto LABEL_121;
  }
  uint64_t v7 = (void *)__dst;
LABEL_120:
  operator delete(v7);
LABEL_121:
  if (v134) {
    sub_10000A3E0((uint64_t)v132, v133);
  }
  return v4;
}

void sub_100018898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (*(char *)(v77 - 225) < 0) {
    operator delete(*(void **)(v77 - 248));
  }
  if (*(char *)(v77 - 201) < 0) {
    operator delete(*(void **)(v77 - 224));
  }
  if (*(char *)(v77 - 177) < 0) {
    operator delete(*(void **)(v77 - 200));
  }
  if (*(char *)(v77 - 153) < 0) {
    operator delete(*(void **)(v77 - 176));
  }
  if (*(unsigned char *)(v77 - 112)) {
    sub_10000A3E0(v76, *(char **)(v77 - 128));
  }
  _Unwind_Resume(a1);
}

BOOL sub_10001905C(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      sub_1000282F0();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

BOOL sub_1000190F0(unsigned char *a1)
{
  siri::dialogengine::GetTemplateDirs();
  siri::dialogengine::Context::Context();
  int v39 = (void **)&v44;
  sub_10000C39C(&v39);
  sub_100021F8C(&v36);
  siri::dialogengine::Context::SetFile();
  if (v37) {
    sub_100006AE0(v37);
  }
  siri::dialogengine::PatternFile::LoadFromId();
  if (v34)
  {
    siri::dialogengine::PatternFile::Validate(v34, (siri::dialogengine::Context *)v38);
    siri::dialogengine::PatternFile::GetPath((uint64_t *)&__str, v34);
    siri::dialogengine::Context::GetFile((uint64_t *)&v44, (siri::dialogengine::Context *)v38);
    siri::dialogengine::File::GetValidationErrors((uint64_t *)&v31, (siri::dialogengine::File *)v44.__r_.__value_.__l.__data_);
    if (v44.__r_.__value_.__l.__size_) {
      sub_100006AE0((std::__shared_weak_count *)v44.__r_.__value_.__l.__size_);
    }
    siri::dialogengine::Context::GetFile((uint64_t *)&v44, (siri::dialogengine::Context *)v38);
    siri::dialogengine::File::GetValidationWarnings((uint64_t *)&v29, (siri::dialogengine::File *)v44.__r_.__value_.__l.__data_);
    if (v44.__r_.__value_.__l.__size_) {
      sub_100006AE0((std::__shared_weak_count *)v44.__r_.__value_.__l.__size_);
    }
    if (sub_10004BD38((uint64_t)a1))
    {
      uint64_t v2 = v31;
      uint64_t v3 = v32;
      while (v2 != (siri::dialogengine::LineNumberBase *)v3)
      {
        siri::dialogengine::LineNumberBase::GetFullPath((uint64_t *)&v44, v2);
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v44.__r_.__value_.__l.__size_;
        }
        if (!size) {
          std::string::operator=(&v44, &__str);
        }
        sub_100021A90(a1, v2, (const void **)&v44.__r_.__value_.__l.__data_);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        uint64_t v2 = (siri::dialogengine::LineNumberBase *)((char *)v2 + 88);
      }
      unsigned int v24 = v29;
      uint64_t v25 = v30;
      while (v24 != (siri::dialogengine::LineNumberBase *)v25)
      {
        siri::dialogengine::LineNumberBase::GetFullPath((uint64_t *)&v44, v24);
        std::string::size_type v26 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v26 = v44.__r_.__value_.__l.__size_;
        }
        if (!v26) {
          std::string::operator=(&v44, &__str);
        }
        sub_100021B1C(a1, v24, (const void **)&v44.__r_.__value_.__l.__data_);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        unsigned int v24 = (siri::dialogengine::LineNumberBase *)((char *)v24 + 88);
      }
LABEL_53:
      BOOL v5 = sub_10004C22C((uint64_t)a1);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      sub_100022808((void ***)&v44);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
      sub_100022808((void ***)&v44);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_56;
      }
      uint64_t v6 = (void *)__str.__r_.__value_.__r.__words[0];
      goto LABEL_55;
    }
    v28[0] = 0;
    v28[1] = 0;
    int v27 = (uint64_t *)v28;
    memset(&v44, 0, sizeof(v44));
    sub_100022460(&v44, (uint64_t)v31, v32, 0x2E8BA2E8BA2E8BA3 * ((v32 - (uint64_t)v31) >> 3));
    char v45 = 1;
    memset(v46, 0, sizeof(v46));
    sub_100022460(v46, (uint64_t)v29, v30, 0x2E8BA2E8BA2E8BA3 * ((v30 - (uint64_t)v29) >> 3));
    char v47 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v39 = 0;
    unint64_t v42 = (std::string *)&v39;
    char v43 = 0;
    int v39 = (void **)operator new(0x40uLL);
    uint64_t v40 = v39;
    uint64_t v41 = v39 + 8;
    uint64_t v40 = (void **)sub_1000228C8((uint64_t)&v41, (uint64_t)&v44, (uint64_t)&v48, (uint64_t)v39);
    for (uint64_t i = 32; i != -32; i -= 32)
    {
      unint64_t v42 = (std::string *)((char *)&v44 + i);
      sub_100022808((void ***)&v42);
    }
    uint64_t v8 = v39;
    uint64_t v9 = v40;
    if (v39 == v40)
    {
LABEL_43:
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
      sub_100022A1C((void ***)&v44);
      char v17 = (uint64_t *)sub_10000A230((uint64_t)&v27, (const void **)&__str.__r_.__value_.__l.__data_);
      int v18 = v17;
      if (v28 != (void **)v17)
      {
        sub_100021BA8((uint64_t)(v17 + 7), a1);
        sub_100022F84(&v27, v18);
        sub_100022C78((uint64_t)(v18 + 4));
        operator delete(v18);
      }
      unsigned int v19 = v27;
      if (v27 != (uint64_t *)v28)
      {
        do
        {
          sub_100021BA8((uint64_t)(v19 + 7), a1);
          uint64_t v20 = (uint64_t *)v19[1];
          if (v20)
          {
            do
            {
              unint64_t v21 = v20;
              uint64_t v20 = (uint64_t *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              unint64_t v21 = (uint64_t *)v19[2];
              BOOL v22 = *v21 == (void)v19;
              unsigned int v19 = v21;
            }
            while (!v22);
          }
          unsigned int v19 = v21;
        }
        while (v21 != (uint64_t *)v28);
      }
      sub_10002337C((uint64_t)&v27, v28[0]);
      goto LABEL_53;
    }
    while (1)
    {
      uint64_t v10 = (siri::dialogengine::LineNumberBase *)*v8;
      uint64_t v11 = v8[1];
      if (*v8 != v11) {
        break;
      }
LABEL_42:
      v8 += 4;
      if (v8 == v9) {
        goto LABEL_43;
      }
    }
    int v12 = *((unsigned __int8 *)v8 + 24);
    while (1)
    {
      siri::dialogengine::LineNumberBase::GetFullPath((uint64_t *)&v44, v10);
      std::string::size_type v13 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v13 = v44.__r_.__value_.__l.__size_;
      }
      if (!v13) {
        std::string::operator=(&v44, &__str);
      }
      unint64_t v42 = &v44;
      int v14 = sub_100022A90(&v27, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v42);
      uint64_t v15 = v14;
      if (*((char *)v14 + 79) < 0)
      {
        if (!v14[8]) {
LABEL_35:
        }
          std::string::operator=((std::string *)(v14 + 7), &v44);
      }
      else if (!*((unsigned char *)v14 + 79))
      {
        goto LABEL_35;
      }
      if (v12) {
        char v16 = (uint64_t **)(v15 + 10);
      }
      else {
        char v16 = (uint64_t **)(v15 + 13);
      }
      sub_100022D78(v16, (uint64_t)v10, (uint64_t)v10);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      uint64_t v10 = (siri::dialogengine::LineNumberBase *)((char *)v10 + 88);
      if (v10 == v11) {
        goto LABEL_42;
      }
    }
  }
  std::operator+<char>();
  sub_100003470(&v39, (char *)&unk_10006DFE2);
  BOOL v5 = sub_10004BDC8(a1, (uint64_t)&v44, (const void **)&v39, 0);
  if (SHIBYTE(v41) < 0) {
    operator delete(v39);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v6 = (void *)v44.__r_.__value_.__r.__words[0];
LABEL_55:
    operator delete(v6);
  }
LABEL_56:
  if (v35) {
    sub_100006AE0(v35);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v38);
  return v5;
}

void sub_10001961C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,char a29)
{
  *(void *)(v30 - 200) = v29;
  sub_100022A1C((void ***)(v30 - 184));
  for (uint64_t i = 32; i != -32; i -= 32)
  {
    *(void *)(v30 - 184) = v30 - 160 + i;
    sub_100022808((void ***)(v30 - 184));
  }
  sub_10002337C((uint64_t)&a10, a11);
  *(void *)(v30 - 160) = &a13;
  sub_100022808((void ***)(v30 - 160));
  *(void *)(v30 - 160) = &a16;
  sub_100022808((void ***)(v30 - 160));
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a26) {
    sub_100006AE0(a26);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a29);
  _Unwind_Resume(a1);
}

BOOL sub_1000197E4(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) != 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      sub_1000282F0();
    return memcmp(a1, __s, v4) != 0;
  }
  return 1;
}

uint64_t sub_100019878(uint64_t **a1, const char *a2)
{
  uint64_t v2 = a2;
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Preparing to render VisualCats...", a2);
  sub_100006B54((uint64_t)v64, 0, 1024, 0);
  sub_100006B54((uint64_t)v62, 0, 1024, 0);
  if (v2[23] < 0) {
    uint64_t v2 = *(const char **)v2;
  }
  *(void *)&long long v60 = v2;
  *((void *)&v60 + 1) = v2;
  if (*(_DWORD *)(sub_10000E450((uint64_t)v62, &v60) + 88))
  {
    if (v63 > 0x11) {
      size_t v4 = "Unknown error.";
    }
    else {
      size_t v4 = off_10007CFC0[v63];
    }
    sub_100003470(&v60, v4);
    uint64_t v6 = sub_1000042E0(&std::cout, (uint64_t)"Error: Invalid JSON result: ", 28);
    if (v61 >= 0) {
      uint64_t v7 = &v60;
    }
    else {
      uint64_t v7 = (long long *)v60;
    }
    if (v61 >= 0) {
      uint64_t v8 = HIBYTE(v61);
    }
    else {
      uint64_t v8 = *((void *)&v60 + 1);
    }
LABEL_18:
    uint64_t v9 = sub_1000042E0(v6, (uint64_t)v7, v8);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet(&v57, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v57);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_156;
  }
  if (*((char *)a1 + 23) < 0) {
    a1 = (uint64_t **)*a1;
  }
  *(void *)&long long v60 = a1;
  *((void *)&v60 + 1) = a1;
  if (*(_DWORD *)(sub_10000E450((uint64_t)v64, &v60) + 88))
  {
    if (v65 > 0x11) {
      BOOL v5 = "Unknown error.";
    }
    else {
      BOOL v5 = off_10007CFC0[v65];
    }
    sub_100003470(&v60, v5);
    uint64_t v6 = sub_1000042E0(&std::cout, (uint64_t)"Error: Invalid JSON request: ", 29);
    if (v61 >= 0) {
      uint64_t v7 = &v60;
    }
    else {
      uint64_t v7 = (long long *)v60;
    }
    if (v61 >= 0) {
      uint64_t v8 = HIBYTE(v61);
    }
    else {
      uint64_t v8 = *((void *)&v60 + 1);
    }
    goto LABEL_18;
  }
  sub_100003470(&v57, "renderVisualCat");
  siri::dialogengine::ParseJSONString();
  if ((char)v59 < 0) {
    operator delete(v57.__locale_);
  }
  if (siri::dialogengine::DirExists()) {
    goto LABEL_25;
  }
  siri::dialogengine::DirName();
  char v11 = siri::dialogengine::DirExists();
  if ((char)v59 < 0) {
    operator delete(v57.__locale_);
  }
  if (v11)
  {
LABEL_25:
    sub_100003470(__p, "patternId");
    siri::dialogengine::ParseJSONString();
    if (v56 < 0) {
      operator delete(__p[0]);
    }
    sub_100003470(v53, "status");
    siri::dialogengine::ParseJSONString();
    if (SHIBYTE(v54) < 0) {
      operator delete(v53[0]);
    }
    char v12 = v56;
    if (v56 < 0)
    {
      std::string::size_type v13 = (void **)__p[0];
      if (__p[1] != (void *)7)
      {
LABEL_153:
        operator delete(v13);
        goto LABEL_154;
      }
    }
    else
    {
      if (v56 != 7) {
        goto LABEL_154;
      }
      std::string::size_type v13 = __p;
    }
    if (*(_DWORD *)v13 != 1667462515 || *(_DWORD *)((char *)v13 + 3) != 1936942435)
    {
LABEL_151:
      if ((v12 & 0x80) == 0) {
        goto LABEL_154;
      }
      std::string::size_type v13 = (void **)__p[0];
      goto LABEL_153;
    }
    uint64_t v15 = (unsigned int *)sub_100013D3C(v62, "visual");
    sub_100003470(&v52, "renderDeviceTrain");
    siri::dialogengine::ParseJSONString();
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    sub_100003470(&v51, "renderDeviceClass");
    siri::dialogengine::ParseJSONString();
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v52.__r_.__value_.__l.__size_) {
        goto LABEL_61;
      }
    }
    else if (*((unsigned char *)&v52.__r_.__value_.__s + 23))
    {
      goto LABEL_61;
    }
    std::string::assign(&v52, "iPhone");
LABEL_61:
    sub_100003470(&v49, "renderContext");
    siri::dialogengine::ParseJSONString();
    if (SHIBYTE(v50) < 0) {
      operator delete((void *)v49);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v51.__r_.__value_.__l.__size_) {
        goto LABEL_68;
      }
    }
    else if (*((unsigned char *)&v51.__r_.__value_.__s + 23))
    {
      goto LABEL_68;
    }
    std::string::assign(&v51, "MockSiri");
LABEL_68:
    sub_100003470(v47, "renderScreenSize");
    siri::dialogengine::ParseJSONString();
    if (SHIBYTE(v48) < 0) {
      operator delete(v47[0]);
    }
    sub_100003470(&v46, "renderOrientation");
    siri::dialogengine::ParseJSONString();
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    sub_100003470(&v46, "renderDarkMode");
    int v21 = siri::dialogengine::ParseJSONBool();
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    sub_100003470(&v46, (char *)&unk_10006DFE2);
    if (*((_WORD *)v15 + 11) != 3) {
      __assert_rtn("MemberBegin", "document.h", 1161, "IsObject()");
    }
    for (uint64_t i = *((void *)v15 + 1); i != *((void *)v15 + 1) + 48 * *v15; i += 48)
    {
      long long v23 = (const char *)sub_100013DD0(i);
      if (!strcmp(v23, "data"))
      {
        unsigned int v24 = (const std::string::value_type *)sub_100013DD0(i + 24);
        std::string::assign(&v46, v24);
      }
      if (*((_WORD *)v15 + 11) != 3) {
        __assert_rtn("MemberEnd", "document.h", 1164, "IsObject()");
      }
    }
    if (SHIBYTE(v61) < 0)
    {
      sub_100003600(__dst, (void *)v60, *((unint64_t *)&v60 + 1));
    }
    else
    {
      *(_OWORD *)long long __dst = v60;
      uint64_t v45 = v61;
    }
    if (siri::dialogengine::DirExists())
    {
      if ((v59 & 0x80u) == 0) {
        size_t v25 = v59;
      }
      else {
        size_t v25 = v58;
      }
      std::string::size_type v26 = v40;
      sub_100008CC4((uint64_t)v40, v25 + 11);
      if (v41 < 0) {
        std::string::size_type v26 = (void **)v40[0];
      }
      if (v25)
      {
        if ((v59 & 0x80u) == 0) {
          locale = &v57;
        }
        else {
          locale = v57.__locale_;
        }
        memmove(v26, locale, v25);
      }
      strcpy((char *)v26 + v25, "-render.png");
      siri::dialogengine::JoinPath();
      if (SHIBYTE(v45) < 0) {
        operator delete(__dst[0]);
      }
      *(_OWORD *)long long __dst = v42;
      uint64_t v45 = v43;
      HIBYTE(v43) = 0;
      LOBYTE(v42) = 0;
      if (v41 < 0) {
        operator delete(v40[0]);
      }
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v46.__r_.__value_.__l.__size_)
      {
        sub_100003600(&v39, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
        goto LABEL_104;
      }
    }
    else if (*((unsigned char *)&v46.__r_.__value_.__s + 23))
    {
      std::string v39 = v46;
LABEL_104:
      if (SHIBYTE(v45) < 0)
      {
        sub_100003600(v37, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)unint64_t v37 = *(_OWORD *)__dst;
        uint64_t v38 = v45;
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        sub_100003600(&v36, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
      }
      else {
        std::string v36 = v52;
      }
      if (SHIBYTE(v54) < 0)
      {
        sub_100003600(v34, v53[0], (unint64_t)v53[1]);
      }
      else
      {
        *(_OWORD *)uint64_t v34 = *(_OWORD *)v53;
        uint64_t v35 = v54;
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        sub_100003600(&v33, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
      }
      else {
        std::string v33 = v51;
      }
      if (SHIBYTE(v50) < 0)
      {
        sub_100003600(v31, (void *)v49, *((unint64_t *)&v49 + 1));
      }
      else
      {
        *(_OWORD *)unint64_t v31 = v49;
        uint64_t v32 = v50;
      }
      if (SHIBYTE(v48) < 0)
      {
        sub_100003600(v29, v47[0], (unint64_t)v47[1]);
      }
      else
      {
        *(_OWORD *)uint64_t v29 = *(_OWORD *)v47;
        uint64_t v30 = v48;
      }
      sub_10000D640((uint64_t)&v39, (uint64_t)v37, (uint64_t)&v36, (uint64_t)v34, (uint64_t)&v33, (uint64_t)v31, (uint64_t)v29, v21);
      if (SHIBYTE(v30) < 0) {
        operator delete(v29[0]);
      }
      if (SHIBYTE(v32) < 0) {
        operator delete(v31[0]);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35) < 0) {
        operator delete(v34[0]);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38) < 0) {
        operator delete(v37[0]);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(__dst[0]);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48) < 0) {
      operator delete(v47[0]);
    }
    if (SHIBYTE(v50) < 0) {
      operator delete((void *)v49);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v54) < 0) {
      operator delete(v53[0]);
    }
    char v12 = v56;
    goto LABEL_151;
  }
  char v16 = sub_1000042E0(&std::cout, (uint64_t)"Error: Destination directory doesn't exist: ", 44);
  siri::dialogengine::DirName();
  if ((v59 & 0x80u) == 0) {
    char v17 = &v57;
  }
  else {
    char v17 = v57.__locale_;
  }
  if ((v59 & 0x80u) == 0) {
    uint64_t v18 = v59;
  }
  else {
    uint64_t v18 = v58;
  }
  unsigned int v19 = sub_1000042E0(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  uint64_t v20 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
LABEL_154:
  if ((char)v59 < 0) {
    operator delete(v57.__locale_);
  }
LABEL_156:
  if (SHIBYTE(v61) < 0) {
    operator delete((void *)v60);
  }
  sub_100008BB4((uint64_t)v62);
  return sub_100008BB4((uint64_t)v64);
}

void sub_10001A2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a86 < 0) {
    operator delete(a85);
  }
  if (a88 < 0) {
    operator delete(a87);
  }
  sub_100008BB4((uint64_t)&STACK[0x208]);
  sub_100008BB4(v88 - 176);
  _Unwind_Resume(a1);
}

long long *sub_10001A5A0(uint64_t *a1, uint64_t a2, long long *a3)
{
  size_t v4 = (long long *)a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL) {
      sub_100003974();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v10) >> 3);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
    unint64_t v14 = 2 * v13;
    if (2 * v13 <= v11) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v22 = v7;
    if (v15) {
      char v16 = (char *)sub_10000398C(v7, v15);
    }
    else {
      char v16 = 0;
    }
    uint64_t v18 = v16;
    unsigned int v19 = &v16[24 * v12];
    uint64_t v20 = v19;
    int v21 = &v16[24 * v15];
    sub_10002AF08(&v18, a3);
    size_t v4 = (long long *)sub_10002B094((uint64_t)a1, &v18, v4);
    sub_100004250((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    sub_10002AE38(a1, a3);
  }
  else
  {
    sub_10002AE98((uint64_t)a1, a2, v6, a2 + 24);
    if (v4 <= a3) {
      a3 = (long long *)((char *)a3 + 24 * (a1[1] > (unint64_t)a3));
    }
    std::string::operator=((std::string *)v4, (const std::string *)a3);
  }
  return v4;
}

void sub_10001A700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100004250((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10001A714()
{
  uint64_t v0 = (unsigned char *)__chkstk_darwin();
  uint64_t v2 = v1;
  siri::dialogengine::GetTemplateDirs();
  siri::dialogengine::Context::Context();
  v518 = __p;
  sub_10000C39C((void ***)&v518);
  siri::dialogengine::PatternRegistry::GetSchema();
  if (v521)
  {
    siri::dialogengine::Context::GetSchemaErrors((uint64_t *)&v518, (siri::dialogengine::Context *)v523);
    uint64_t v3 = (char *)v518;
    size_t v4 = v519;
    if (v518 != v519)
    {
      do
      {
        sub_100003470(__p, (char *)&unk_10006DFE2);
        sub_10004BDC8(v0, (uint64_t)v3, (const void **)__p, 0);
        if (SHIBYTE(v482) < 0) {
          operator delete(__p[0]);
        }
        v3 += 24;
      }
      while (v3 != v4);
    }
    v464 = v2;
    v517[1] = 0;
    v517[0] = 0;
    v516 = (uint64_t *)v517;
    siri::dialogengine::PatternSchema::GetGroups((uint64_t *)__p, v521);
    BOOL v5 = (char *)__p[0];
    unint64_t v6 = (char *)__p[1];
    if (__p[0] == __p[1])
    {
      unint64_t v7 = 0;
    }
    else
    {
      unint64_t v7 = 0;
      do
      {
        unint64_t v9 = *(siri::dialogengine::PatternSchemaGroup **)v5;
        unint64_t v8 = (std::__shared_weak_count *)*((void *)v5 + 1);
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v9 + 88))(&v513, v9);
        (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v9 + 72))(&v515, v9);
        sub_1000248DC(&v513, &v515, &v514);
        v512.__r_.__value_.__r.__words[0] = (std::string::size_type)&v515;
        sub_100008EDC((void ***)&v512);
        if (v513.__r_.__value_.__l.__size_) {
          sub_100006AE0((std::__shared_weak_count *)v513.__r_.__value_.__l.__size_);
        }
        siri::dialogengine::PatternSchemaGroup::GetName((uint64_t *)&v515, v9);
        v513.__r_.__value_.__r.__words[0] = (std::string::size_type)&v515;
        uint64_t v10 = sub_100024B14(&v516, (const void **)&v515.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v513);
        long long v11 = *(_OWORD *)&v514.__r_.__value_.__l.__data_;
        if (v514.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v514.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v12 = (std::__shared_weak_count *)*((void *)v10 + 8);
        *(_OWORD *)((char *)v10 + 56) = v11;
        if (v12) {
          sub_100006AE0(v12);
        }
        if (SHIBYTE(v515.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v515.__r_.__value_.__l.__data_);
        }
        unint64_t v13 = sub_1000167A8((uint64_t)v514.__r_.__value_.__l.__data_);
        if (v7 <= v13) {
          unint64_t v7 = v13;
        }
        if (v514.__r_.__value_.__l.__size_) {
          sub_100006AE0((std::__shared_weak_count *)v514.__r_.__value_.__l.__size_);
        }
        if (v8) {
          sub_100006AE0(v8);
        }
        v5 += 16;
      }
      while (v5 != v6);
    }
    v515.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    sub_100008EDC((void ***)&v515);
    sub_100003470(&v515, "<!DOCTYPE html>\n<html>\n<head>\n");
    siri::dialogengine::PatternSchema::GetName((uint64_t *)&v513, v521);
    unint64_t v14 = std::string::insert(&v513, 0, "<title>");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    char v16 = std::string::append(&v514, "</title>\n");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    int64_t v482 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      uint64_t v18 = __p;
    }
    else {
      uint64_t v18 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v19 = HIBYTE(v482);
    }
    else {
      std::string::size_type v19 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v18, v19);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    std::string::append(&v515, "<style>\n      body {\n        font-family: Arial, Helvetica, sans-serif;\n"
      "      }\n"
      "      table, th, td {\n"
      "        border: 1px solid lightgrey;\n"
      "        border-collapse: collapse;\n"
      "        font-size: 90%;\n"
      "      }\n"
      "      th, td {\n"
      "        padding: 5pt;\n"
      "      }\n"
      "      .patternDescription {\n"
      "        white-space: pre-wrap;\n"
      "      }\n"
      "      .greyColor {\n"
      "        background-color: #f4f5f7;\n"
      "      }\n"
      "      .dialogColor {\n"
      "        background-color: #ffebe5;\n"
      "      }\n"
      "      .visualColor {\n"
      "        background-color: #deebff;\n"
      "      }\n"
      "      .usage {\n"
      "        text-align: center;\n"
      "      }\n"
      "      .combinationOperator {\n"
      "        background-color: #f4f5f7;\n"
      "        font-style: italic;\n"
      "        text-align: center;\n"
      "      }\n"
      "      .variants {\n"
      "        color: grey;\n"
      "        font-size: 90%;\n"
      "      }\n"
      "      .variantsLabel {\n"
      "        color: black;\n"
      "      }\n"
      "      .defaultVariant {\n"
      "        font-weight: bold;\n"
      "      }\n"
      "      .empty {\n"
      "        color: lightgrey;\n"
      "      }\n"
      "      .error {\n"
      "        background-color: #cc0000;\n"
      "      }\n");
    std::string::append(&v515, "</style>\n");
    std::string::append(&v515, "</head>\n<body>\n");
    siri::dialogengine::PatternSchema::GetName((uint64_t *)&v513, v521);
    uint64_t v20 = std::string::insert(&v513, 0, "<h2>");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    uint64_t v22 = std::string::append(&v514, "</h2>\n");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    int64_t v482 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      unsigned int v24 = __p;
    }
    else {
      unsigned int v24 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v25 = HIBYTE(v482);
    }
    else {
      std::string::size_type v25 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v24, v25);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    siri::dialogengine::PatternSchema::GetDescription((uint64_t *)&v513, v521);
    std::string::size_type v26 = std::string::insert(&v513, 0, "<p class=\"patternDescription\">");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    int v28 = std::string::append(&v514, "</p>\n");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    int64_t v482 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      uint64_t v30 = __p;
    }
    else {
      uint64_t v30 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v31 = HIBYTE(v482);
    }
    else {
      std::string::size_type v31 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v30, v31);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    std::string::append(&v515, "<table border=\"1\">\n");
    std::string::append(&v515, "<tr>\n");
    sub_1000233D8(1uLL, (uint64_t)qword_100080610);
    uint64_t v32 = std::string::append(&v513, "Group Name");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(&v512, "</th>\n");
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v34 = &v512;
    }
    else {
      uint64_t v34 = (std::string *)v512.__r_.__value_.__r.__words[0];
    }
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v512.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v512.__r_.__value_.__l.__size_;
    }
    std::string v36 = std::string::append(&v514, (const std::string::value_type *)v34, size);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    int64_t v482 = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      uint64_t v38 = __p;
    }
    else {
      uint64_t v38 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v39 = HIBYTE(v482);
    }
    else {
      std::string::size_type v39 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v38, v39);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v512.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    sub_1000233D8(1uLL, (uint64_t)qword_100080610);
    uint64_t v40 = std::string::append(&v513, "Usage");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(&v512, "</th>\n");
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v42 = &v512;
    }
    else {
      long long v42 = (std::string *)v512.__r_.__value_.__r.__words[0];
    }
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = v512.__r_.__value_.__l.__size_;
    }
    std::string v44 = std::string::append(&v514, (const std::string::value_type *)v42, v43);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    int64_t v482 = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      std::string v46 = __p;
    }
    else {
      std::string v46 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v47 = HIBYTE(v482);
    }
    else {
      std::string::size_type v47 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v46, v47);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v512.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    sub_1000233D8(1uLL, (uint64_t)qword_100080610);
    sub_100003470(&v513, "</th>\n");
    if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v48 = &v513;
    }
    else {
      uint64_t v48 = (std::string *)v513.__r_.__value_.__r.__words[0];
    }
    if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v49 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v49 = v513.__r_.__value_.__l.__size_;
    }
    uint64_t v50 = std::string::append(&v514, (const std::string::value_type *)v48, v49);
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    int64_t v482 = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      std::string v52 = __p;
    }
    else {
      std::string v52 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v53 = HIBYTE(v482);
    }
    else {
      std::string::size_type v53 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v52, v53);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    sub_1000233D8(1uLL, (uint64_t)qword_100080628);
    uint64_t v54 = std::string::append(&v513, "Dialog Component");
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(&v512, "</th>\n");
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v56 = &v512;
    }
    else {
      char v56 = (std::string *)v512.__r_.__value_.__r.__words[0];
    }
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v57 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v57 = v512.__r_.__value_.__l.__size_;
    }
    size_t v58 = std::string::append(&v514, (const std::string::value_type *)v56, v57);
    long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    int64_t v482 = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      long long v60 = __p;
    }
    else {
      long long v60 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v61 = HIBYTE(v482);
    }
    else {
      std::string::size_type v61 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v60, v61);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v512.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    sub_1000233D8(1uLL, (uint64_t)qword_100080628);
    unint64_t v62 = std::string::append(&v513, "Usage");
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(&v512, "</th>\n");
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v64 = &v512;
    }
    else {
      uint64_t v64 = (std::string *)v512.__r_.__value_.__r.__words[0];
    }
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v65 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v65 = v512.__r_.__value_.__l.__size_;
    }
    int v66 = std::string::append(&v514, (const std::string::value_type *)v64, v65);
    long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    int64_t v482 = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      std::string v68 = __p;
    }
    else {
      std::string v68 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v69 = HIBYTE(v482);
    }
    else {
      std::string::size_type v69 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v68, v69);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v512.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    sub_1000233D8(1uLL, (uint64_t)qword_100080628);
    std::string v70 = std::string::append(&v513, "Full");
    long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(&v512, "</th>\n");
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v72 = &v512;
    }
    else {
      std::string v72 = (std::string *)v512.__r_.__value_.__r.__words[0];
    }
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v73 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v73 = v512.__r_.__value_.__l.__size_;
    }
    BOOL v74 = std::string::append(&v514, (const std::string::value_type *)v72, v73);
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    int64_t v482 = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      uint64_t v76 = __p;
    }
    else {
      uint64_t v76 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v77 = HIBYTE(v482);
    }
    else {
      std::string::size_type v77 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v76, v77);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v512.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    sub_1000233D8(1uLL, (uint64_t)qword_100080628);
    std::string v78 = std::string::append(&v513, "Full Dialog Examples");
    long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(&v512, "</th>\n");
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v80 = &v512;
    }
    else {
      uint64_t v80 = (std::string *)v512.__r_.__value_.__r.__words[0];
    }
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v81 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v81 = v512.__r_.__value_.__l.__size_;
    }
    long long v82 = std::string::append(&v514, (const std::string::value_type *)v80, v81);
    long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    int64_t v482 = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      long long v84 = __p;
    }
    else {
      long long v84 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v85 = HIBYTE(v482);
    }
    else {
      std::string::size_type v85 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v84, v85);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v512.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    sub_1000233D8(1uLL, (uint64_t)qword_100080628);
    std::string v86 = std::string::append(&v513, "Supporting");
    long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(&v512, "</th>\n");
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v88 = &v512;
    }
    else {
      uint64_t v88 = (std::string *)v512.__r_.__value_.__r.__words[0];
    }
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v89 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v89 = v512.__r_.__value_.__l.__size_;
    }
    unsigned int v90 = std::string::append(&v514, (const std::string::value_type *)v88, v89);
    long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    int64_t v482 = v90->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v91;
    v90->__r_.__value_.__l.__size_ = 0;
    v90->__r_.__value_.__r.__words[2] = 0;
    v90->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      uint64_t v92 = __p;
    }
    else {
      uint64_t v92 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v93 = HIBYTE(v482);
    }
    else {
      std::string::size_type v93 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v92, v93);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v512.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    sub_1000233D8(1uLL, (uint64_t)qword_100080628);
    unsigned __int8 v94 = std::string::append(&v513, "Supporting Dialog Examples");
    long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(&v512, "</th>\n");
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v96 = &v512;
    }
    else {
      char v96 = (std::string *)v512.__r_.__value_.__r.__words[0];
    }
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v97 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v97 = v512.__r_.__value_.__l.__size_;
    }
    std::string v98 = std::string::append(&v514, (const std::string::value_type *)v96, v97);
    long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    int64_t v482 = v98->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v99;
    v98->__r_.__value_.__l.__size_ = 0;
    v98->__r_.__value_.__r.__words[2] = 0;
    v98->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      long long v100 = __p;
    }
    else {
      long long v100 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v101 = HIBYTE(v482);
    }
    else {
      std::string::size_type v101 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v100, v101);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v512.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    sub_1000233D8(1uLL, (uint64_t)qword_100080610);
    sub_100003470(&v513, "</th>\n");
    if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v102 = &v513;
    }
    else {
      long long v102 = (std::string *)v513.__r_.__value_.__r.__words[0];
    }
    if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v103 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v103 = v513.__r_.__value_.__l.__size_;
    }
    long long v104 = std::string::append(&v514, (const std::string::value_type *)v102, v103);
    long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    int64_t v482 = v104->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      uint64_t v106 = __p;
    }
    else {
      uint64_t v106 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v107 = HIBYTE(v482);
    }
    else {
      std::string::size_type v107 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v106, v107);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    sub_1000233D8(v7, (uint64_t)qword_100080640);
    uint64_t v108 = std::string::append(&v513, "Visual Component");
    long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v109;
    v108->__r_.__value_.__l.__size_ = 0;
    v108->__r_.__value_.__r.__words[2] = 0;
    v108->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(&v512, "</th>\n");
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v110 = &v512;
    }
    else {
      int v110 = (std::string *)v512.__r_.__value_.__r.__words[0];
    }
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v111 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v111 = v512.__r_.__value_.__l.__size_;
    }
    uint64_t v112 = std::string::append(&v514, (const std::string::value_type *)v110, v111);
    long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
    int64_t v482 = v112->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v113;
    v112->__r_.__value_.__l.__size_ = 0;
    v112->__r_.__value_.__r.__words[2] = 0;
    v112->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      uint64_t v114 = __p;
    }
    else {
      uint64_t v114 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v115 = HIBYTE(v482);
    }
    else {
      std::string::size_type v115 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v114, v115);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v512.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    sub_1000233D8(1uLL, (uint64_t)qword_100080640);
    v116 = std::string::append(&v513, "Usage");
    long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v117;
    v116->__r_.__value_.__l.__size_ = 0;
    v116->__r_.__value_.__r.__words[2] = 0;
    v116->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(&v512, "</th>\n");
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v118 = &v512;
    }
    else {
      v118 = (std::string *)v512.__r_.__value_.__r.__words[0];
    }
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v119 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v119 = v512.__r_.__value_.__l.__size_;
    }
    v120 = std::string::append(&v514, (const std::string::value_type *)v118, v119);
    long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
    int64_t v482 = v120->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v121;
    v120->__r_.__value_.__l.__size_ = 0;
    v120->__r_.__value_.__r.__words[2] = 0;
    v120->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      std::string v122 = __p;
    }
    else {
      std::string v122 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v123 = HIBYTE(v482);
    }
    else {
      std::string::size_type v123 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v122, v123);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v512.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    sub_1000233D8(1uLL, (uint64_t)qword_100080640);
    long long v124 = std::string::append(&v513, "Full");
    long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v125;
    v124->__r_.__value_.__l.__size_ = 0;
    v124->__r_.__value_.__r.__words[2] = 0;
    v124->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(&v512, "</th>\n");
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v126 = &v512;
    }
    else {
      long long v126 = (std::string *)v512.__r_.__value_.__r.__words[0];
    }
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v127 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v127 = v512.__r_.__value_.__l.__size_;
    }
    unsigned __int8 v128 = std::string::append(&v514, (const std::string::value_type *)v126, v127);
    long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
    int64_t v482 = v128->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v129;
    v128->__r_.__value_.__l.__size_ = 0;
    v128->__r_.__value_.__r.__words[2] = 0;
    v128->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      uint64_t v130 = __p;
    }
    else {
      uint64_t v130 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v131 = HIBYTE(v482);
    }
    else {
      std::string::size_type v131 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v130, v131);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v512.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    sub_1000233D8(1uLL, (uint64_t)qword_100080640);
    v132 = std::string::append(&v513, "Full Overrides");
    long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v133;
    v132->__r_.__value_.__l.__size_ = 0;
    v132->__r_.__value_.__r.__words[2] = 0;
    v132->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(&v512, "</th>\n");
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v134 = &v512;
    }
    else {
      char v134 = (std::string *)v512.__r_.__value_.__r.__words[0];
    }
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v135 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v135 = v512.__r_.__value_.__l.__size_;
    }
    uint64_t v136 = std::string::append(&v514, (const std::string::value_type *)v134, v135);
    long long v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
    int64_t v482 = v136->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v137;
    v136->__r_.__value_.__l.__size_ = 0;
    v136->__r_.__value_.__r.__words[2] = 0;
    v136->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      v138 = __p;
    }
    else {
      v138 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v139 = HIBYTE(v482);
    }
    else {
      std::string::size_type v139 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v138, v139);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v512.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    sub_1000233D8(1uLL, (uint64_t)qword_100080640);
    v140 = std::string::append(&v513, "Supporting");
    long long v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v141;
    v140->__r_.__value_.__l.__size_ = 0;
    v140->__r_.__value_.__r.__words[2] = 0;
    v140->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(&v512, "</th>\n");
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v142 = &v512;
    }
    else {
      v142 = (std::string *)v512.__r_.__value_.__r.__words[0];
    }
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v143 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v143 = v512.__r_.__value_.__l.__size_;
    }
    v144 = std::string::append(&v514, (const std::string::value_type *)v142, v143);
    long long v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
    int64_t v482 = v144->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v145;
    v144->__r_.__value_.__l.__size_ = 0;
    v144->__r_.__value_.__r.__words[2] = 0;
    v144->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      v146 = __p;
    }
    else {
      v146 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v147 = HIBYTE(v482);
    }
    else {
      std::string::size_type v147 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v146, v147);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v512.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    sub_1000233D8(1uLL, (uint64_t)qword_100080640);
    v148 = std::string::append(&v513, "Supporting Overrides");
    long long v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
    v514.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v149;
    v148->__r_.__value_.__l.__size_ = 0;
    v148->__r_.__value_.__r.__words[2] = 0;
    v148->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(&v512, "</th>\n");
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v150 = &v512;
    }
    else {
      v150 = (std::string *)v512.__r_.__value_.__r.__words[0];
    }
    if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v151 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v151 = v512.__r_.__value_.__l.__size_;
    }
    v152 = std::string::append(&v514, (const std::string::value_type *)v150, v151);
    long long v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
    int64_t v482 = v152->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v153;
    v152->__r_.__value_.__l.__size_ = 0;
    v152->__r_.__value_.__r.__words[2] = 0;
    v152->__r_.__value_.__r.__words[0] = 0;
    if (v482 >= 0) {
      v154 = __p;
    }
    else {
      v154 = (void **)__p[0];
    }
    if (v482 >= 0) {
      std::string::size_type v155 = HIBYTE(v482);
    }
    else {
      std::string::size_type v155 = (std::string::size_type)__p[1];
    }
    std::string::append(&v515, (const std::string::value_type *)v154, v155);
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v512.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v514.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v513.__r_.__value_.__l.__data_);
    }
    std::string::append(&v515, "</tr>\n");
    siri::dialogengine::PatternSchema::GetGroups((uint64_t *)__p, v521);
    v156 = (siri::dialogengine::PatternSchemaGroup **)__p[0];
    v466 = (siri::dialogengine::PatternSchemaGroup **)__p[1];
    if (__p[0] != __p[1])
    {
      unint64_t v469 = v7 + 5;
      unint64_t v465 = v7 + 12;
      unint64_t v479 = v7 + 1;
      do
      {
        v158 = *v156;
        v157 = (std::__shared_weak_count *)v156[1];
        v467 = v156;
        if (v157) {
          atomic_fetch_add_explicit(&v157->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v468 = v157;
        std::string::append(&v515, "\n");
        siri::dialogengine::PatternSchemaGroup::GetName((uint64_t *)&v511, v158);
        v159 = std::string::insert(&v511, 0, "Group: \"");
        long long v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
        v512.__r_.__value_.__r.__words[2] = v159->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v512.__r_.__value_.__l.__data_ = v160;
        v159->__r_.__value_.__l.__size_ = 0;
        v159->__r_.__value_.__r.__words[2] = 0;
        v159->__r_.__value_.__r.__words[0] = 0;
        v161 = std::string::append(&v512, "\"");
        long long v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
        v513.__r_.__value_.__r.__words[2] = v161->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v162;
        v161->__r_.__value_.__l.__size_ = 0;
        v161->__r_.__value_.__r.__words[2] = 0;
        v161->__r_.__value_.__r.__words[0] = 0;
        sub_10002360C(&v514);
        if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v163 = &v514;
        }
        else {
          v163 = (std::string *)v514.__r_.__value_.__r.__words[0];
        }
        if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v164 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v164 = v514.__r_.__value_.__l.__size_;
        }
        std::string::append(&v515, (const std::string::value_type *)v163, v164);
        if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v514.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v513.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v512.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v511.__r_.__value_.__l.__data_);
        }
        (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v158 + 48))(&v514, v158);
        std::string::size_type v165 = v514.__r_.__value_.__l.__size_;
        std::string::size_type v166 = v514.__r_.__value_.__r.__words[0];
        v513.__r_.__value_.__r.__words[0] = (std::string::size_type)&v514;
        sub_100003B14((void ***)&v513);
        if (v165 != v166)
        {
          std::string::append(&v515, "<tr>\n");
          sub_100003470(&v511, (char *)&unk_10006DFE2);
          sub_10002369C(1uLL, 1uLL, (uint64_t)&v511, &v512);
          siri::dialogengine::PatternSchemaGroup::GetName((uint64_t *)&v509, v158);
          sub_100003470(v507, (char *)&unk_10006DFE2);
          memset(v506, 0, sizeof(v506));
          sub_100003470(v504, (char *)&unk_10006DFE2);
          sub_1000239B0((uint64_t)&v509, (uint64_t)v507, v506, (uint64_t *)v504, 0, &v510);
          if ((v510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v167 = &v510;
          }
          else {
            v167 = (std::string *)v510.__r_.__value_.__r.__words[0];
          }
          if ((v510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v168 = HIBYTE(v510.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v168 = v510.__r_.__value_.__l.__size_;
          }
          v169 = std::string::append(&v512, (const std::string::value_type *)v167, v168);
          long long v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
          v513.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v170;
          v169->__r_.__value_.__l.__size_ = 0;
          v169->__r_.__value_.__r.__words[2] = 0;
          v169->__r_.__value_.__r.__words[0] = 0;
          sub_100003470(&v503, "</td>\n");
          if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v171 = &v503;
          }
          else {
            v171 = (std::string *)v503.__r_.__value_.__r.__words[0];
          }
          if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v172 = HIBYTE(v503.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v172 = v503.__r_.__value_.__l.__size_;
          }
          v173 = std::string::append(&v513, (const std::string::value_type *)v171, v172);
          long long v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
          v514.__r_.__value_.__r.__words[2] = v173->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v174;
          v173->__r_.__value_.__l.__size_ = 0;
          v173->__r_.__value_.__r.__words[2] = 0;
          v173->__r_.__value_.__r.__words[0] = 0;
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v175 = &v514;
          }
          else {
            v175 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v176 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v176 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v175, v176);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v503.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v513.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v510.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v510.__r_.__value_.__l.__data_);
          }
          if (v505 < 0) {
            operator delete(v504[0]);
          }
          v503.__r_.__value_.__r.__words[0] = (std::string::size_type)v506;
          sub_100003B14((void ***)&v503);
          if (v508 < 0) {
            operator delete(v507[0]);
          }
          if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v509.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v512.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v511.__r_.__value_.__l.__data_);
          }
          sub_10002369C(1uLL, 1uLL, (uint64_t)qword_100080658, &v512);
          (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v158 + 40))(&v510, v158);
          sub_100024224((uint64_t *)&v510, (uint64_t)&v511);
          if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v177 = &v511;
          }
          else {
            v177 = (std::string *)v511.__r_.__value_.__r.__words[0];
          }
          if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v178 = HIBYTE(v511.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v178 = v511.__r_.__value_.__l.__size_;
          }
          v179 = std::string::append(&v512, (const std::string::value_type *)v177, v178);
          long long v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
          v513.__r_.__value_.__r.__words[2] = v179->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v180;
          v179->__r_.__value_.__l.__size_ = 0;
          v179->__r_.__value_.__r.__words[2] = 0;
          v179->__r_.__value_.__r.__words[0] = 0;
          sub_100003470(&v509, "</td>\n");
          if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v181 = &v509;
          }
          else {
            v181 = (std::string *)v509.__r_.__value_.__r.__words[0];
          }
          if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v182 = HIBYTE(v509.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v182 = v509.__r_.__value_.__l.__size_;
          }
          v183 = std::string::append(&v513, (const std::string::value_type *)v181, v182);
          long long v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
          v514.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v184;
          v183->__r_.__value_.__l.__size_ = 0;
          v183->__r_.__value_.__r.__words[2] = 0;
          v183->__r_.__value_.__r.__words[0] = 0;
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v185 = &v514;
          }
          else {
            v185 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v186 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v186 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v185, v186);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v509.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v513.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v511.__r_.__value_.__l.__data_);
          }
          v509.__r_.__value_.__r.__words[0] = (std::string::size_type)&v510;
          sub_100008EDC((void ***)&v509);
          if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v512.__r_.__value_.__l.__data_);
          }
          sub_10002369C(1uLL, 1uLL, (uint64_t)qword_100080610, &v513);
          sub_100003470(&v512, "</td>\n");
          if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v187 = &v512;
          }
          else {
            v187 = (std::string *)v512.__r_.__value_.__r.__words[0];
          }
          if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v188 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v188 = v512.__r_.__value_.__l.__size_;
          }
          v189 = std::string::append(&v513, (const std::string::value_type *)v187, v188);
          long long v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
          v514.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v190;
          v189->__r_.__value_.__l.__size_ = 0;
          v189->__r_.__value_.__r.__words[2] = 0;
          v189->__r_.__value_.__r.__words[0] = 0;
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v191 = &v514;
          }
          else {
            v191 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v192 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v192 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v191, v192);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v512.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v513.__r_.__value_.__l.__data_);
          }
          sub_100003470(&v513, (char *)&unk_10006DFE2);
          sub_10002369C(v465, 1uLL, (uint64_t)&v513, &v514);
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v193 = &v514;
          }
          else {
            v193 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v194 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v194 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v193, v194);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v513.__r_.__value_.__l.__data_);
          }
          (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v158 + 48))(&v514, v158);
          std::string::size_type v195 = v514.__r_.__value_.__l.__size_;
          std::string::size_type v196 = v514.__r_.__value_.__r.__words[0];
          if (v514.__r_.__value_.__r.__words[0] != v514.__r_.__value_.__l.__size_)
          {
            char v197 = 1;
            do
            {
              if ((v197 & 1) == 0) {
                std::string::append(&v515, "<br/> or ");
              }
              std::operator+<char>();
              v198 = std::string::append(&v512, "</b>");
              long long v199 = *(_OWORD *)&v198->__r_.__value_.__l.__data_;
              v513.__r_.__value_.__r.__words[2] = v198->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v199;
              v198->__r_.__value_.__l.__size_ = 0;
              v198->__r_.__value_.__r.__words[2] = 0;
              v198->__r_.__value_.__r.__words[0] = 0;
              if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v200 = &v513;
              }
              else {
                v200 = (std::string *)v513.__r_.__value_.__r.__words[0];
              }
              if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v201 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v201 = v513.__r_.__value_.__l.__size_;
              }
              std::string::append(&v515, (const std::string::value_type *)v200, v201);
              if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v513.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v512.__r_.__value_.__l.__data_);
              }
              char v197 = 0;
              v196 += 24;
            }
            while (v196 != v195);
          }
          v513.__r_.__value_.__r.__words[0] = (std::string::size_type)&v514;
          sub_100003B14((void ***)&v513);
          sub_100003470(&v514, "</td>\n");
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v202 = &v514;
          }
          else {
            v202 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v203 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v203 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v202, v203);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          std::string::append(&v515, "</tr>\n");
        }
        (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v158 + 56))(&v514, v158);
        std::string::size_type v204 = v514.__r_.__value_.__l.__size_;
        std::string::size_type v205 = v514.__r_.__value_.__r.__words[0];
        v513.__r_.__value_.__r.__words[0] = (std::string::size_type)&v514;
        sub_100008EDC((void ***)&v513);
        siri::dialogengine::PatternSchemaGroup::GetName((uint64_t *)&v514, v158);
        v512.__r_.__value_.__r.__words[0] = (std::string::size_type)&v514;
        v477 = v158;
        v206 = (uint64_t *)*((void *)sub_100024B14(&v516, (const void **)&v514.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v512)+ 7);
        if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v514.__r_.__value_.__l.__data_);
        }
        unint64_t v207 = 0;
        unint64_t v208 = (uint64_t)(v204 - v205) >> 4;
        v480 = v206;
        unint64_t v209 = v206[5];
        if (v208 <= v209) {
          uint64_t v210 = v206[5];
        }
        else {
          uint64_t v210 = (uint64_t)(v204 - v205) >> 4;
        }
        unint64_t v474 = v206[5];
        unint64_t v475 = (uint64_t)(v204 - v205) >> 4;
        uint64_t v472 = v210 - v208 + 1;
        unint64_t v473 = v208 - 1;
        unint64_t __val = v210;
        uint64_t v470 = v210 - v209 + 1;
        unint64_t v471 = v209 - 1;
        while (v207 != __val)
        {
          std::string::append(&v515, "\n");
          siri::dialogengine::PatternSchemaGroup::GetName((uint64_t *)&v503, v477);
          v211 = std::string::insert(&v503, 0, "Group \"");
          long long v212 = *(_OWORD *)&v211->__r_.__value_.__l.__data_;
          v509.__r_.__value_.__r.__words[2] = v211->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v509.__r_.__value_.__l.__data_ = v212;
          v211->__r_.__value_.__l.__size_ = 0;
          v211->__r_.__value_.__r.__words[2] = 0;
          v211->__r_.__value_.__r.__words[0] = 0;
          v213 = std::string::append(&v509, "\" row ");
          long long v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
          v510.__r_.__value_.__r.__words[2] = v213->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v510.__r_.__value_.__l.__data_ = v214;
          v213->__r_.__value_.__l.__size_ = 0;
          v213->__r_.__value_.__r.__words[2] = 0;
          v213->__r_.__value_.__r.__words[0] = 0;
          unint64_t v476 = v207 + 1;
          std::to_string(&v502, v207 + 1);
          if ((v502.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v215 = &v502;
          }
          else {
            v215 = (std::string *)v502.__r_.__value_.__r.__words[0];
          }
          if ((v502.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v216 = HIBYTE(v502.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v216 = v502.__r_.__value_.__l.__size_;
          }
          v217 = std::string::append(&v510, (const std::string::value_type *)v215, v216);
          long long v218 = *(_OWORD *)&v217->__r_.__value_.__l.__data_;
          v511.__r_.__value_.__r.__words[2] = v217->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v511.__r_.__value_.__l.__data_ = v218;
          v217->__r_.__value_.__l.__size_ = 0;
          v217->__r_.__value_.__r.__words[2] = 0;
          v217->__r_.__value_.__r.__words[0] = 0;
          v219 = std::string::append(&v511, " of ");
          long long v220 = *(_OWORD *)&v219->__r_.__value_.__l.__data_;
          v512.__r_.__value_.__r.__words[2] = v219->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v512.__r_.__value_.__l.__data_ = v220;
          v219->__r_.__value_.__l.__size_ = 0;
          v219->__r_.__value_.__r.__words[2] = 0;
          v219->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v501, __val);
          if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v221 = &v501;
          }
          else {
            v221 = (std::string *)v501.__r_.__value_.__r.__words[0];
          }
          if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v222 = HIBYTE(v501.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v222 = v501.__r_.__value_.__l.__size_;
          }
          v223 = std::string::append(&v512, (const std::string::value_type *)v221, v222);
          long long v224 = *(_OWORD *)&v223->__r_.__value_.__l.__data_;
          v513.__r_.__value_.__r.__words[2] = v223->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v224;
          v223->__r_.__value_.__l.__size_ = 0;
          v223->__r_.__value_.__r.__words[2] = 0;
          v223->__r_.__value_.__r.__words[0] = 0;
          sub_10002360C(&v514);
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v225 = &v514;
          }
          else {
            v225 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v226 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v226 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v225, v226);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v513.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v501.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v512.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v511.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v502.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v502.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v510.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v510.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v509.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v503.__r_.__value_.__l.__data_);
          }
          std::string::append(&v515, "<tr>\n");
          if (!v207)
          {
            sub_100003470(&v511, (char *)&unk_10006DFE2);
            sub_10002369C(1uLL, __val, (uint64_t)&v511, &v512);
            siri::dialogengine::PatternSchemaGroup::GetName((uint64_t *)&v509, v477);
            sub_100003470(v499, (char *)&unk_10006DFE2);
            memset(v498, 0, sizeof(v498));
            sub_100003470(v496, (char *)&unk_10006DFE2);
            sub_1000239B0((uint64_t)&v509, (uint64_t)v499, v498, (uint64_t *)v496, 0, &v510);
            if ((v510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v227 = &v510;
            }
            else {
              v227 = (std::string *)v510.__r_.__value_.__r.__words[0];
            }
            if ((v510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v228 = HIBYTE(v510.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v228 = v510.__r_.__value_.__l.__size_;
            }
            v229 = std::string::append(&v512, (const std::string::value_type *)v227, v228);
            long long v230 = *(_OWORD *)&v229->__r_.__value_.__l.__data_;
            v513.__r_.__value_.__r.__words[2] = v229->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v230;
            v229->__r_.__value_.__l.__size_ = 0;
            v229->__r_.__value_.__r.__words[2] = 0;
            v229->__r_.__value_.__r.__words[0] = 0;
            sub_100003470(&v503, "</td>\n");
            if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v231 = &v503;
            }
            else {
              v231 = (std::string *)v503.__r_.__value_.__r.__words[0];
            }
            if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v232 = HIBYTE(v503.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v232 = v503.__r_.__value_.__l.__size_;
            }
            v233 = std::string::append(&v513, (const std::string::value_type *)v231, v232);
            long long v234 = *(_OWORD *)&v233->__r_.__value_.__l.__data_;
            v514.__r_.__value_.__r.__words[2] = v233->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v234;
            v233->__r_.__value_.__l.__size_ = 0;
            v233->__r_.__value_.__r.__words[2] = 0;
            v233->__r_.__value_.__r.__words[0] = 0;
            if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v235 = &v514;
            }
            else {
              v235 = (std::string *)v514.__r_.__value_.__r.__words[0];
            }
            if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v236 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v236 = v514.__r_.__value_.__l.__size_;
            }
            std::string::append(&v515, (const std::string::value_type *)v235, v236);
            if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v514.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v503.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v513.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v510.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v510.__r_.__value_.__l.__data_);
            }
            if (v497 < 0) {
              operator delete(v496[0]);
            }
            v503.__r_.__value_.__r.__words[0] = (std::string::size_type)v498;
            sub_100003B14((void ***)&v503);
            if (v500 < 0) {
              operator delete(v499[0]);
            }
            if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v509.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v512.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v511.__r_.__value_.__l.__data_);
            }
            sub_10002369C(1uLL, __val, (uint64_t)qword_100080658, &v512);
            (*(void (**)(std::string *__return_ptr))(*(void *)v477 + 40))(&v510);
            sub_100024224((uint64_t *)&v510, (uint64_t)&v511);
            if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v237 = &v511;
            }
            else {
              v237 = (std::string *)v511.__r_.__value_.__r.__words[0];
            }
            if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v238 = HIBYTE(v511.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v238 = v511.__r_.__value_.__l.__size_;
            }
            v239 = std::string::append(&v512, (const std::string::value_type *)v237, v238);
            long long v240 = *(_OWORD *)&v239->__r_.__value_.__l.__data_;
            v513.__r_.__value_.__r.__words[2] = v239->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v240;
            v239->__r_.__value_.__l.__size_ = 0;
            v239->__r_.__value_.__r.__words[2] = 0;
            v239->__r_.__value_.__r.__words[0] = 0;
            sub_100003470(&v509, "</td>\n");
            if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v241 = &v509;
            }
            else {
              v241 = (std::string *)v509.__r_.__value_.__r.__words[0];
            }
            if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v242 = HIBYTE(v509.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v242 = v509.__r_.__value_.__l.__size_;
            }
            v243 = std::string::append(&v513, (const std::string::value_type *)v241, v242);
            long long v244 = *(_OWORD *)&v243->__r_.__value_.__l.__data_;
            v514.__r_.__value_.__r.__words[2] = v243->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v244;
            v243->__r_.__value_.__l.__size_ = 0;
            v243->__r_.__value_.__r.__words[2] = 0;
            v243->__r_.__value_.__r.__words[0] = 0;
            if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v245 = &v514;
            }
            else {
              v245 = (std::string *)v514.__r_.__value_.__r.__words[0];
            }
            if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v246 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v246 = v514.__r_.__value_.__l.__size_;
            }
            std::string::append(&v515, (const std::string::value_type *)v245, v246);
            if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v514.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v509.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v513.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v511.__r_.__value_.__l.__data_);
            }
            v509.__r_.__value_.__r.__words[0] = (std::string::size_type)&v510;
            sub_100008EDC((void ***)&v509);
            if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v512.__r_.__value_.__l.__data_);
            }
            sub_10002369C(1uLL, __val, (uint64_t)qword_100080610, &v513);
            sub_100003470(&v512, "</td>\n");
            if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v247 = &v512;
            }
            else {
              v247 = (std::string *)v512.__r_.__value_.__r.__words[0];
            }
            if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v248 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v248 = v512.__r_.__value_.__l.__size_;
            }
            v249 = std::string::append(&v513, (const std::string::value_type *)v247, v248);
            long long v250 = *(_OWORD *)&v249->__r_.__value_.__l.__data_;
            v514.__r_.__value_.__r.__words[2] = v249->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v250;
            v249->__r_.__value_.__l.__size_ = 0;
            v249->__r_.__value_.__r.__words[2] = 0;
            v249->__r_.__value_.__r.__words[0] = 0;
            if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v251 = &v514;
            }
            else {
              v251 = (std::string *)v514.__r_.__value_.__r.__words[0];
            }
            if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v252 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v252 = v514.__r_.__value_.__l.__size_;
            }
            std::string::append(&v515, (const std::string::value_type *)v251, v252);
            if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v514.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v512.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v513.__r_.__value_.__l.__data_);
            }
          }
          std::string::append(&v515, "\n");
          sub_100003470(&v513, "Dialog Components");
          sub_10002360C(&v514);
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v253 = &v514;
          }
          else {
            v253 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v254 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v254 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v253, v254);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v513.__r_.__value_.__l.__data_);
          }
          if (v207 >= v475)
          {
            if (!(v207 | v475))
            {
              sub_10002369C(6uLL, __val, (uint64_t)qword_100080670, &v512);
              v304 = std::string::append(&v512, "(None)");
              long long v305 = *(_OWORD *)&v304->__r_.__value_.__l.__data_;
              v513.__r_.__value_.__r.__words[2] = v304->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v305;
              v304->__r_.__value_.__l.__size_ = 0;
              v304->__r_.__value_.__r.__words[2] = 0;
              v304->__r_.__value_.__r.__words[0] = 0;
              sub_100003470(&v511, "</td>\n");
              if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v306 = &v511;
              }
              else {
                v306 = (std::string *)v511.__r_.__value_.__r.__words[0];
              }
              if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v307 = HIBYTE(v511.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v307 = v511.__r_.__value_.__l.__size_;
              }
              v308 = std::string::append(&v513, (const std::string::value_type *)v306, v307);
              long long v309 = *(_OWORD *)&v308->__r_.__value_.__l.__data_;
              v514.__r_.__value_.__r.__words[2] = v308->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v309;
              v308->__r_.__value_.__l.__size_ = 0;
              v308->__r_.__value_.__r.__words[2] = 0;
              v308->__r_.__value_.__r.__words[0] = 0;
              if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v310 = &v514;
              }
              else {
                v310 = (std::string *)v514.__r_.__value_.__r.__words[0];
              }
              if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v311 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v311 = v514.__r_.__value_.__l.__size_;
              }
              std::string::append(&v515, (const std::string::value_type *)v310, v311);
              if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v514.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v511.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v513.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v512.__r_.__value_.__l.__data_);
                if (v207) {
                  goto LABEL_842;
                }
                goto LABEL_821;
              }
            }
LABEL_820:
            if (v207) {
              goto LABEL_842;
            }
            goto LABEL_821;
          }
          if (v207 == v473) {
            unint64_t v255 = v472;
          }
          else {
            unint64_t v255 = 1;
          }
          (*(void (**)(std::string *__return_ptr))(*(void *)v477 + 56))(&v514);
          std::string::size_type v256 = v514.__r_.__value_.__r.__words[0] + 16 * v207;
          v258 = *(siri::dialogengine::PatternSchemaComponent **)v256;
          v257 = *(std::__shared_weak_count **)(v256 + 8);
          if (v257) {
            atomic_fetch_add_explicit(&v257->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v513.__r_.__value_.__r.__words[0] = (std::string::size_type)&v514;
          sub_100008EDC((void ***)&v513);
          sub_100003470(&v511, (char *)&unk_10006DFE2);
          sub_10002369C(1uLL, v255, (uint64_t)&v511, &v512);
          siri::dialogengine::PatternSchemaComponent::GetName((uint64_t *)&v509, v258);
          siri::dialogengine::PatternSchemaComponent::GetDefaultComponent((uint64_t *)v494, v258);
          siri::dialogengine::PatternSchemaComponent::GetAllowedVariants(v493, v258);
          siri::dialogengine::PatternSchemaComponent::GetDefaultVariant((uint64_t *)v491, v258);
          int AllowMultiple = siri::dialogengine::PatternSchemaComponent::GetAllowMultiple(v258);
          sub_1000239B0((uint64_t)&v509, (uint64_t)v494, v493, (uint64_t *)v491, AllowMultiple, &v510);
          if ((v510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v260 = &v510;
          }
          else {
            v260 = (std::string *)v510.__r_.__value_.__r.__words[0];
          }
          if ((v510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v261 = HIBYTE(v510.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v261 = v510.__r_.__value_.__l.__size_;
          }
          v262 = std::string::append(&v512, (const std::string::value_type *)v260, v261);
          long long v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
          v513.__r_.__value_.__r.__words[2] = v262->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v263;
          v262->__r_.__value_.__l.__size_ = 0;
          v262->__r_.__value_.__r.__words[2] = 0;
          v262->__r_.__value_.__r.__words[0] = 0;
          sub_100003470(&v503, "</td>\n");
          if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v264 = &v503;
          }
          else {
            v264 = (std::string *)v503.__r_.__value_.__r.__words[0];
          }
          if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v265 = HIBYTE(v503.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v265 = v503.__r_.__value_.__l.__size_;
          }
          v266 = std::string::append(&v513, (const std::string::value_type *)v264, v265);
          long long v267 = *(_OWORD *)&v266->__r_.__value_.__l.__data_;
          v514.__r_.__value_.__r.__words[2] = v266->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v267;
          v266->__r_.__value_.__l.__size_ = 0;
          v266->__r_.__value_.__r.__words[2] = 0;
          v266->__r_.__value_.__r.__words[0] = 0;
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v268 = &v514;
          }
          else {
            v268 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v269 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v269 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v268, v269);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v503.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v513.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v510.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v510.__r_.__value_.__l.__data_);
          }
          if (v492 < 0) {
            operator delete(v491[0]);
          }
          v503.__r_.__value_.__r.__words[0] = (std::string::size_type)v493;
          sub_100003B14((void ***)&v503);
          if (v495 < 0) {
            operator delete(v494[0]);
          }
          if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v509.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v512.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v511.__r_.__value_.__l.__data_);
          }
          sub_10002369C(1uLL, v255, (uint64_t)qword_100080658, &v512);
          siri::dialogengine::PatternSchemaComponent::GetUsage((uint64_t *)&v510, v258);
          sub_100024224((uint64_t *)&v510, (uint64_t)&v511);
          if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v270 = &v511;
          }
          else {
            v270 = (std::string *)v511.__r_.__value_.__r.__words[0];
          }
          if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v271 = HIBYTE(v511.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v271 = v511.__r_.__value_.__l.__size_;
          }
          v272 = std::string::append(&v512, (const std::string::value_type *)v270, v271);
          long long v273 = *(_OWORD *)&v272->__r_.__value_.__l.__data_;
          v513.__r_.__value_.__r.__words[2] = v272->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v273;
          v272->__r_.__value_.__l.__size_ = 0;
          v272->__r_.__value_.__r.__words[2] = 0;
          v272->__r_.__value_.__r.__words[0] = 0;
          sub_100003470(&v509, "</td>\n");
          if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v274 = &v509;
          }
          else {
            v274 = (std::string *)v509.__r_.__value_.__r.__words[0];
          }
          if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v275 = HIBYTE(v509.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v275 = v509.__r_.__value_.__l.__size_;
          }
          v276 = std::string::append(&v513, (const std::string::value_type *)v274, v275);
          long long v277 = *(_OWORD *)&v276->__r_.__value_.__l.__data_;
          v514.__r_.__value_.__r.__words[2] = v276->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v277;
          v276->__r_.__value_.__l.__size_ = 0;
          v276->__r_.__value_.__r.__words[2] = 0;
          v276->__r_.__value_.__r.__words[0] = 0;
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v278 = &v514;
          }
          else {
            v278 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v279 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v279 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v278, v279);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v509.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v513.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v511.__r_.__value_.__l.__data_);
          }
          v509.__r_.__value_.__r.__words[0] = (std::string::size_type)&v510;
          sub_100008EDC((void ***)&v509);
          if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v512.__r_.__value_.__l.__data_);
          }
          sub_10002369C(1uLL, v255, (uint64_t)qword_100080658, &v512);
          siri::dialogengine::PatternSchemaComponent::GetFullUsage((uint64_t *)&v510, v258);
          sub_100024224((uint64_t *)&v510, (uint64_t)&v511);
          if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v280 = &v511;
          }
          else {
            v280 = (std::string *)v511.__r_.__value_.__r.__words[0];
          }
          if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v281 = HIBYTE(v511.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v281 = v511.__r_.__value_.__l.__size_;
          }
          v282 = std::string::append(&v512, (const std::string::value_type *)v280, v281);
          long long v283 = *(_OWORD *)&v282->__r_.__value_.__l.__data_;
          v513.__r_.__value_.__r.__words[2] = v282->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v283;
          v282->__r_.__value_.__l.__size_ = 0;
          v282->__r_.__value_.__r.__words[2] = 0;
          v282->__r_.__value_.__r.__words[0] = 0;
          sub_100003470(&v509, "</td>\n");
          if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v284 = &v509;
          }
          else {
            v284 = (std::string *)v509.__r_.__value_.__r.__words[0];
          }
          if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v285 = HIBYTE(v509.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v285 = v509.__r_.__value_.__l.__size_;
          }
          v286 = std::string::append(&v513, (const std::string::value_type *)v284, v285);
          long long v287 = *(_OWORD *)&v286->__r_.__value_.__l.__data_;
          v514.__r_.__value_.__r.__words[2] = v286->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v287;
          v286->__r_.__value_.__l.__size_ = 0;
          v286->__r_.__value_.__r.__words[2] = 0;
          v286->__r_.__value_.__r.__words[0] = 0;
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v288 = &v514;
          }
          else {
            v288 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v289 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v289 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v288, v289);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v509.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v513.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v511.__r_.__value_.__l.__data_);
          }
          v509.__r_.__value_.__r.__words[0] = (std::string::size_type)&v510;
          sub_100008EDC((void ***)&v509);
          if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v512.__r_.__value_.__l.__data_);
          }
          siri::dialogengine::PatternSchemaComponent::GetFullExamples((uint64_t *)&v513, v258);
          sub_1000245B4(v255, (uint64_t *)&v513);
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v290 = &v514;
          }
          else {
            v290 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v291 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v291 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v290, v291);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          v512.__r_.__value_.__r.__words[0] = (std::string::size_type)&v513;
          sub_100003B14((void ***)&v512);
          sub_10002369C(1uLL, v255, (uint64_t)qword_100080658, &v512);
          siri::dialogengine::PatternSchemaComponent::GetSupportingUsage((uint64_t *)&v510, v258);
          sub_100024224((uint64_t *)&v510, (uint64_t)&v511);
          if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v292 = &v511;
          }
          else {
            v292 = (std::string *)v511.__r_.__value_.__r.__words[0];
          }
          if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v293 = HIBYTE(v511.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v293 = v511.__r_.__value_.__l.__size_;
          }
          v294 = std::string::append(&v512, (const std::string::value_type *)v292, v293);
          long long v295 = *(_OWORD *)&v294->__r_.__value_.__l.__data_;
          v513.__r_.__value_.__r.__words[2] = v294->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v295;
          v294->__r_.__value_.__l.__size_ = 0;
          v294->__r_.__value_.__r.__words[2] = 0;
          v294->__r_.__value_.__r.__words[0] = 0;
          sub_100003470(&v509, "</td>\n");
          if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v296 = &v509;
          }
          else {
            v296 = (std::string *)v509.__r_.__value_.__r.__words[0];
          }
          if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v297 = HIBYTE(v509.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v297 = v509.__r_.__value_.__l.__size_;
          }
          v298 = std::string::append(&v513, (const std::string::value_type *)v296, v297);
          long long v299 = *(_OWORD *)&v298->__r_.__value_.__l.__data_;
          v514.__r_.__value_.__r.__words[2] = v298->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v299;
          v298->__r_.__value_.__l.__size_ = 0;
          v298->__r_.__value_.__r.__words[2] = 0;
          v298->__r_.__value_.__r.__words[0] = 0;
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v300 = &v514;
          }
          else {
            v300 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v301 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v301 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v300, v301);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v509.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v513.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v511.__r_.__value_.__l.__data_);
          }
          v509.__r_.__value_.__r.__words[0] = (std::string::size_type)&v510;
          sub_100008EDC((void ***)&v509);
          if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v512.__r_.__value_.__l.__data_);
          }
          siri::dialogengine::PatternSchemaComponent::GetSupportingExamples((uint64_t *)&v513, v258);
          sub_1000245B4(v255, (uint64_t *)&v513);
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v302 = &v514;
          }
          else {
            v302 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v303 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v303 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v302, v303);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          v512.__r_.__value_.__r.__words[0] = (std::string::size_type)&v513;
          sub_100003B14((void ***)&v512);
          if (!v257) {
            goto LABEL_820;
          }
          sub_100006AE0(v257);
          if (v207) {
            goto LABEL_842;
          }
LABEL_821:
          std::string::append(&v515, "\n");
          sub_10002369C(1uLL, __val, (uint64_t)qword_100080610, &v512);
          v312 = std::string::append(&v512, "&#10132;");
          long long v313 = *(_OWORD *)&v312->__r_.__value_.__l.__data_;
          v513.__r_.__value_.__r.__words[2] = v312->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v313;
          v312->__r_.__value_.__l.__size_ = 0;
          v312->__r_.__value_.__r.__words[2] = 0;
          v312->__r_.__value_.__r.__words[0] = 0;
          sub_100003470(&v511, "</td>\n");
          if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v314 = &v511;
          }
          else {
            v314 = (std::string *)v511.__r_.__value_.__r.__words[0];
          }
          if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v315 = HIBYTE(v511.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v315 = v511.__r_.__value_.__l.__size_;
          }
          v316 = std::string::append(&v513, (const std::string::value_type *)v314, v315);
          long long v317 = *(_OWORD *)&v316->__r_.__value_.__l.__data_;
          v514.__r_.__value_.__r.__words[2] = v316->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v317;
          v316->__r_.__value_.__l.__size_ = 0;
          v316->__r_.__value_.__r.__words[2] = 0;
          v316->__r_.__value_.__r.__words[0] = 0;
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v318 = &v514;
          }
          else {
            v318 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v319 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v319 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v318, v319);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v511.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v513.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v512.__r_.__value_.__l.__data_);
          }
LABEL_842:
          std::string::append(&v515, "\n");
          sub_100003470(&v513, "Visual Components");
          sub_10002360C(&v514);
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v320 = &v514;
          }
          else {
            v320 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v321 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v321 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v320, v321);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v513.__r_.__value_.__l.__data_);
          }
          if (v207 >= v474)
          {
            if (!(v207 | v474))
            {
              sub_10002369C(v469, __val, (uint64_t)qword_100080670, &v512);
              v354 = std::string::append(&v512, "(None)");
              long long v355 = *(_OWORD *)&v354->__r_.__value_.__l.__data_;
              v513.__r_.__value_.__r.__words[2] = v354->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v355;
              v354->__r_.__value_.__l.__size_ = 0;
              v354->__r_.__value_.__r.__words[2] = 0;
              v354->__r_.__value_.__r.__words[0] = 0;
              sub_100003470(&v511, "</td>\n");
              if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v356 = &v511;
              }
              else {
                v356 = (std::string *)v511.__r_.__value_.__r.__words[0];
              }
              if ((v511.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v357 = HIBYTE(v511.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v357 = v511.__r_.__value_.__l.__size_;
              }
              v358 = std::string::append(&v513, (const std::string::value_type *)v356, v357);
              long long v359 = *(_OWORD *)&v358->__r_.__value_.__l.__data_;
              v514.__r_.__value_.__r.__words[2] = v358->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v514.__r_.__value_.__l.__data_ = v359;
              v358->__r_.__value_.__l.__size_ = 0;
              v358->__r_.__value_.__r.__words[2] = 0;
              v358->__r_.__value_.__r.__words[0] = 0;
              if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v360 = &v514;
              }
              else {
                v360 = (std::string *)v514.__r_.__value_.__r.__words[0];
              }
              if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v361 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v361 = v514.__r_.__value_.__l.__size_;
              }
              std::string::append(&v515, (const std::string::value_type *)v360, v361);
              if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v514.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v511.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v513.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v512.__r_.__value_.__l.__data_);
              }
            }
          }
          else
          {
            sub_100016954((uint64_t)v480, v207, (uint64_t *)&v514);
            if (v207 == v471) {
              unint64_t v322 = v470;
            }
            else {
              unint64_t v322 = 1;
            }
            std::string::size_type v323 = v514.__r_.__value_.__l.__size_;
            std::string::size_type v324 = v514.__r_.__value_.__r.__words[0];
            if (v514.__r_.__value_.__r.__words[0] != v514.__r_.__value_.__l.__size_)
            {
              v325 = 0;
              v326 = 0;
              while (1)
              {
                if (siri::dialogengine::VisualComponentsCombination::Entry::GetType(*(siri::dialogengine::VisualComponentsCombination::Entry **)v324) == 4)
                {
                  siri::dialogengine::VisualComponentsCombination::Entry::GetComponentName((uint64_t *)&v513, *(siri::dialogengine::VisualComponentsCombination::Entry **)v324);
                  sub_100016C0C(v480, (unsigned __int8 **)&v513, &v512);
                  v327 = (std::__shared_weak_count *)v512.__r_.__value_.__l.__size_;
                  v325 = (siri::dialogengine::PatternSchemaComponent *)v512.__r_.__value_.__r.__words[0];
                  *(_OWORD *)&v512.__r_.__value_.__l.__data_ = 0uLL;
                  if (v326)
                  {
                    sub_100006AE0((std::__shared_weak_count *)v326);
                    if (v512.__r_.__value_.__l.__size_) {
                      sub_100006AE0((std::__shared_weak_count *)v512.__r_.__value_.__l.__size_);
                    }
                  }
                  if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v513.__r_.__value_.__l.__data_);
                  }
                  memset(&v513, 0, sizeof(v513));
                  if (v325)
                  {
                    v326 = (char *)v327;
                  }
                  else
                  {
                    std::string::operator=(&v513, (const std::string *)qword_1000806D0);
                    v326 = (char *)operator new(0x140uLL);
                    *((void *)v326 + 1) = 0;
                    *((void *)v326 + 2) = 0;
                    *(void *)v326 = off_10007CEE0;
                    *(_OWORD *)(v326 + 24) = 0u;
                    v325 = (siri::dialogengine::PatternSchemaComponent *)(v326 + 24);
                    *(_OWORD *)(v326 + 40) = 0u;
                    *(_OWORD *)(v326 + 56) = 0u;
                    *(_OWORD *)(v326 + 72) = 0u;
                    *(_OWORD *)(v326 + 88) = 0u;
                    *(_OWORD *)(v326 + 104) = 0u;
                    *(_OWORD *)(v326 + 120) = 0u;
                    *(_OWORD *)(v326 + 136) = 0u;
                    *(_OWORD *)(v326 + 152) = 0u;
                    *(_OWORD *)(v326 + 168) = 0u;
                    *(_OWORD *)(v326 + 184) = 0u;
                    *(_OWORD *)(v326 + 200) = 0u;
                    *(_OWORD *)(v326 + 216) = 0u;
                    *(_OWORD *)(v326 + 232) = 0u;
                    *(_OWORD *)(v326 + 248) = 0u;
                    *((void *)v326 + 39) = 0;
                    *(_OWORD *)(v326 + 264) = 0u;
                    *(_OWORD *)(v326 + 280) = 0u;
                    *(_OWORD *)(v326 + 296) = 0u;
                    if (v327) {
                      sub_100006AE0(v327);
                    }
                    siri::dialogengine::VisualComponentsCombination::Entry::GetComponentName((uint64_t *)&v510, *(siri::dialogengine::VisualComponentsCombination::Entry **)v324);
                    v343 = std::string::insert(&v510, 0, "ERROR: Component \"");
                    long long v344 = *(_OWORD *)&v343->__r_.__value_.__l.__data_;
                    v511.__r_.__value_.__r.__words[2] = v343->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v511.__r_.__value_.__l.__data_ = v344;
                    v343->__r_.__value_.__l.__size_ = 0;
                    v343->__r_.__value_.__r.__words[2] = 0;
                    v343->__r_.__value_.__r.__words[0] = 0;
                    v345 = std::string::append(&v511, "\" not defined");
                    long long v346 = *(_OWORD *)&v345->__r_.__value_.__l.__data_;
                    v512.__r_.__value_.__r.__words[2] = v345->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v512.__r_.__value_.__l.__data_ = v346;
                    v345->__r_.__value_.__l.__size_ = 0;
                    v345->__r_.__value_.__r.__words[2] = 0;
                    v345->__r_.__value_.__r.__words[0] = 0;
                    siri::dialogengine::PatternSchemaComponent::SetName();
                    if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v512.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v511.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v510.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v510.__r_.__value_.__l.__data_);
                    }
                  }
                  sub_10002369C(v479 - *(void *)(v324 + 16), v322, (uint64_t)&v513, &v512);
                  if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v347 = &v512;
                  }
                  else {
                    v347 = (std::string *)v512.__r_.__value_.__r.__words[0];
                  }
                  if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v348 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v348 = v512.__r_.__value_.__l.__size_;
                  }
                  std::string::append(&v515, (const std::string::value_type *)v347, v348);
                  if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v512.__r_.__value_.__l.__data_);
                  }
                  siri::dialogengine::PatternSchemaComponent::GetName((uint64_t *)&v511, v325);
                  siri::dialogengine::PatternSchemaComponent::GetDefaultComponent((uint64_t *)v489, v325);
                  siri::dialogengine::PatternSchemaComponent::GetAllowedVariants(v488, v325);
                  siri::dialogengine::PatternSchemaComponent::GetDefaultVariant((uint64_t *)v486, v325);
                  int v349 = siri::dialogengine::PatternSchemaComponent::GetAllowMultiple(v325);
                  sub_1000239B0((uint64_t)&v511, (uint64_t)v489, v488, (uint64_t *)v486, v349, &v512);
                  if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v350 = &v512;
                  }
                  else {
                    v350 = (std::string *)v512.__r_.__value_.__r.__words[0];
                  }
                  if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v351 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v351 = v512.__r_.__value_.__l.__size_;
                  }
                  std::string::append(&v515, (const std::string::value_type *)v350, v351);
                  if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v512.__r_.__value_.__l.__data_);
                  }
                  if (v487 < 0) {
                    operator delete(v486[0]);
                  }
                  v510.__r_.__value_.__r.__words[0] = (std::string::size_type)v488;
                  sub_100003B14((void ***)&v510);
                  if (v490 < 0) {
                    operator delete(v489[0]);
                  }
                  if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v511.__r_.__value_.__l.__data_);
                  }
                  sub_100003470(&v512, "</td>\n");
                  if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v352 = &v512;
                  }
                  else {
                    v352 = (std::string *)v512.__r_.__value_.__r.__words[0];
                  }
                  if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v353 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v353 = v512.__r_.__value_.__l.__size_;
                  }
                  std::string::append(&v515, (const std::string::value_type *)v352, v353);
                  if ((SHIBYTE(v512.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_939;
                  }
                  v342 = (void *)v512.__r_.__value_.__r.__words[0];
                }
                else
                {
                  v328 = *(atomic_ullong **)(v324 + 8);
                  v485[0] = *(siri::dialogengine::VisualComponentsCombination::Entry **)v324;
                  v485[1] = (siri::dialogengine::VisualComponentsCombination::Entry *)v328;
                  if (v328) {
                    atomic_fetch_add_explicit(v328 + 1, 1uLL, memory_order_relaxed);
                  }
                  unint64_t v329 = sub_1000166B8(v485);
                  if (v328) {
                    sub_100006AE0((std::__shared_weak_count *)v328);
                  }
                  memset(&v513, 0, sizeof(v513));
                  unsigned int v330 = siri::dialogengine::VisualComponentsCombination::Entry::GetType(*(siri::dialogengine::VisualComponentsCombination::Entry **)v324)
                       - 1;
                  v331 = "INVALID";
                  if (v330 < 3) {
                    v331 = off_10007D050[v330];
                  }
                  std::string::assign(&v513, v331);
                  sub_100003470(&v509, "combinationOperator");
                  sub_10002369C(1uLL, v329, (uint64_t)&v509, &v510);
                  if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v332 = &v513;
                  }
                  else {
                    v332 = (std::string *)v513.__r_.__value_.__r.__words[0];
                  }
                  if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v333 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v333 = v513.__r_.__value_.__l.__size_;
                  }
                  v334 = std::string::append(&v510, (const std::string::value_type *)v332, v333);
                  long long v335 = *(_OWORD *)&v334->__r_.__value_.__l.__data_;
                  v511.__r_.__value_.__r.__words[2] = v334->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v511.__r_.__value_.__l.__data_ = v335;
                  v334->__r_.__value_.__l.__size_ = 0;
                  v334->__r_.__value_.__r.__words[2] = 0;
                  v334->__r_.__value_.__r.__words[0] = 0;
                  sub_100003470(&v503, "</td>\n");
                  if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v336 = &v503;
                  }
                  else {
                    v336 = (std::string *)v503.__r_.__value_.__r.__words[0];
                  }
                  if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v337 = HIBYTE(v503.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v337 = v503.__r_.__value_.__l.__size_;
                  }
                  v338 = std::string::append(&v511, (const std::string::value_type *)v336, v337);
                  long long v339 = *(_OWORD *)&v338->__r_.__value_.__l.__data_;
                  v512.__r_.__value_.__r.__words[2] = v338->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v512.__r_.__value_.__l.__data_ = v339;
                  v338->__r_.__value_.__l.__size_ = 0;
                  v338->__r_.__value_.__r.__words[2] = 0;
                  v338->__r_.__value_.__r.__words[0] = 0;
                  if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v340 = &v512;
                  }
                  else {
                    v340 = (std::string *)v512.__r_.__value_.__r.__words[0];
                  }
                  if ((v512.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v341 = HIBYTE(v512.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v341 = v512.__r_.__value_.__l.__size_;
                  }
                  std::string::append(&v515, (const std::string::value_type *)v340, v341);
                  if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v512.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v503.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v511.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v510.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v510.__r_.__value_.__l.__data_);
                  }
                  if ((SHIBYTE(v509.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_939;
                  }
                  v342 = (void *)v509.__r_.__value_.__r.__words[0];
                }
                operator delete(v342);
LABEL_939:
                if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v513.__r_.__value_.__l.__data_);
                }
                v324 += 24;
                if (v324 == v323) {
                  goto LABEL_965;
                }
              }
            }
            v326 = 0;
            v325 = 0;
LABEL_965:
            sub_10002369C(1uLL, v322, (uint64_t)qword_100080658, &v511);
            siri::dialogengine::PatternSchemaComponent::GetUsage((uint64_t *)&v509, v325);
            sub_100024224((uint64_t *)&v509, (uint64_t)&v510);
            if ((v510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v362 = &v510;
            }
            else {
              v362 = (std::string *)v510.__r_.__value_.__r.__words[0];
            }
            if ((v510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v363 = HIBYTE(v510.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v363 = v510.__r_.__value_.__l.__size_;
            }
            v364 = std::string::append(&v511, (const std::string::value_type *)v362, v363);
            long long v365 = *(_OWORD *)&v364->__r_.__value_.__l.__data_;
            v512.__r_.__value_.__r.__words[2] = v364->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v512.__r_.__value_.__l.__data_ = v365;
            v364->__r_.__value_.__l.__size_ = 0;
            v364->__r_.__value_.__r.__words[2] = 0;
            v364->__r_.__value_.__r.__words[0] = 0;
            sub_100003470(&v503, "</td>\n");
            if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v366 = &v503;
            }
            else {
              v366 = (std::string *)v503.__r_.__value_.__r.__words[0];
            }
            if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v367 = HIBYTE(v503.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v367 = v503.__r_.__value_.__l.__size_;
            }
            v368 = std::string::append(&v512, (const std::string::value_type *)v366, v367);
            long long v369 = *(_OWORD *)&v368->__r_.__value_.__l.__data_;
            v513.__r_.__value_.__r.__words[2] = v368->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v369;
            v368->__r_.__value_.__l.__size_ = 0;
            v368->__r_.__value_.__r.__words[2] = 0;
            v368->__r_.__value_.__r.__words[0] = 0;
            if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v370 = &v513;
            }
            else {
              v370 = (std::string *)v513.__r_.__value_.__r.__words[0];
            }
            if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v371 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v371 = v513.__r_.__value_.__l.__size_;
            }
            std::string::append(&v515, (const std::string::value_type *)v370, v371);
            if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v513.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v503.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v512.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v510.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v510.__r_.__value_.__l.__data_);
            }
            v503.__r_.__value_.__r.__words[0] = (std::string::size_type)&v509;
            sub_100008EDC((void ***)&v503);
            if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v511.__r_.__value_.__l.__data_);
            }
            sub_10002369C(1uLL, v322, (uint64_t)qword_100080658, &v511);
            siri::dialogengine::PatternSchemaComponent::GetFullUsage((uint64_t *)&v509, v325);
            sub_100024224((uint64_t *)&v509, (uint64_t)&v510);
            if ((v510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v372 = &v510;
            }
            else {
              v372 = (std::string *)v510.__r_.__value_.__r.__words[0];
            }
            if ((v510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v373 = HIBYTE(v510.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v373 = v510.__r_.__value_.__l.__size_;
            }
            v374 = std::string::append(&v511, (const std::string::value_type *)v372, v373);
            long long v375 = *(_OWORD *)&v374->__r_.__value_.__l.__data_;
            v512.__r_.__value_.__r.__words[2] = v374->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v512.__r_.__value_.__l.__data_ = v375;
            v374->__r_.__value_.__l.__size_ = 0;
            v374->__r_.__value_.__r.__words[2] = 0;
            v374->__r_.__value_.__r.__words[0] = 0;
            sub_100003470(&v503, "</td>\n");
            if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v376 = &v503;
            }
            else {
              v376 = (std::string *)v503.__r_.__value_.__r.__words[0];
            }
            if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v377 = HIBYTE(v503.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v377 = v503.__r_.__value_.__l.__size_;
            }
            v378 = std::string::append(&v512, (const std::string::value_type *)v376, v377);
            long long v379 = *(_OWORD *)&v378->__r_.__value_.__l.__data_;
            v513.__r_.__value_.__r.__words[2] = v378->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v379;
            v378->__r_.__value_.__l.__size_ = 0;
            v378->__r_.__value_.__r.__words[2] = 0;
            v378->__r_.__value_.__r.__words[0] = 0;
            if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v380 = &v513;
            }
            else {
              v380 = (std::string *)v513.__r_.__value_.__r.__words[0];
            }
            if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v381 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v381 = v513.__r_.__value_.__l.__size_;
            }
            std::string::append(&v515, (const std::string::value_type *)v380, v381);
            if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v513.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v503.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v512.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v510.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v510.__r_.__value_.__l.__data_);
            }
            v503.__r_.__value_.__r.__words[0] = (std::string::size_type)&v509;
            sub_100008EDC((void ***)&v503);
            if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v511.__r_.__value_.__l.__data_);
            }
            sub_10002369C(1uLL, v322, (uint64_t)qword_100080658, &v513);
            if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v382 = &v513;
            }
            else {
              v382 = (std::string *)v513.__r_.__value_.__r.__words[0];
            }
            if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v383 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v383 = v513.__r_.__value_.__l.__size_;
            }
            std::string::append(&v515, (const std::string::value_type *)v382, v383);
            if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v513.__r_.__value_.__l.__data_);
            }
            siri::dialogengine::PatternSchemaComponent::GetFullOverrides((uint64_t *)&v513, v325);
            std::string::size_type v384 = v513.__r_.__value_.__l.__size_;
            std::string::size_type v385 = v513.__r_.__value_.__r.__words[0];
            v512.__r_.__value_.__r.__words[0] = (std::string::size_type)&v513;
            sub_100008EDC((void ***)&v512);
            uint64_t v386 = v384 - v385;
            if (v384 != v385)
            {
              uint64_t v387 = 0;
              unint64_t v388 = 0;
              unint64_t v389 = v386 >> 4;
              unint64_t v390 = v389 - 1;
              if (v389 <= 1) {
                uint64_t v391 = 1;
              }
              else {
                uint64_t v391 = v389;
              }
              do
              {
                siri::dialogengine::PatternSchemaComponent::GetFullOverrides((uint64_t *)&v513, v325);
                v392 = *(siri::dialogengine::PatternSchemaOverride **)(v513.__r_.__value_.__r.__words[0] + v387);
                v393 = *(std::__shared_weak_count **)(v513.__r_.__value_.__r.__words[0] + v387 + 8);
                if (v393) {
                  atomic_fetch_add_explicit(&v393->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v512.__r_.__value_.__r.__words[0] = (std::string::size_type)&v513;
                sub_100008EDC((void ***)&v512);
                siri::dialogengine::PatternSchemaOverride::GetUsage((uint64_t *)&v511, v392);
                sub_100024224((uint64_t *)&v511, (uint64_t)&v512);
                v394 = std::string::append(&v512, "<br/>");
                long long v395 = *(_OWORD *)&v394->__r_.__value_.__l.__data_;
                v513.__r_.__value_.__r.__words[2] = v394->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v395;
                v394->__r_.__value_.__l.__size_ = 0;
                v394->__r_.__value_.__r.__words[2] = 0;
                v394->__r_.__value_.__r.__words[0] = 0;
                if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v396 = &v513;
                }
                else {
                  v396 = (std::string *)v513.__r_.__value_.__r.__words[0];
                }
                if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v397 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v397 = v513.__r_.__value_.__l.__size_;
                }
                std::string::append(&v515, (const std::string::value_type *)v396, v397);
                if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v513.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v512.__r_.__value_.__l.__data_);
                }
                v510.__r_.__value_.__r.__words[0] = (std::string::size_type)&v511;
                sub_100008EDC((void ***)&v510);
                siri::dialogengine::PatternSchemaOverride::GetIdioms((uint64_t *)&v512, v392);
                sub_100003470(&v511, ", ");
                siri::dialogengine::StringJoin();
                if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v398 = &v513;
                }
                else {
                  v398 = (std::string *)v513.__r_.__value_.__r.__words[0];
                }
                if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v399 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v399 = v513.__r_.__value_.__l.__size_;
                }
                std::string::append(&v515, (const std::string::value_type *)v398, v399);
                if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v513.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v511.__r_.__value_.__l.__data_);
                }
                v511.__r_.__value_.__r.__words[0] = (std::string::size_type)&v512;
                sub_100003B14((void ***)&v511);
                if (v388 < v390) {
                  std::string::append(&v515, "<hr>");
                }
                if (v393) {
                  sub_100006AE0(v393);
                }
                ++v388;
                v387 += 16;
              }
              while (v391 != v388);
            }
            sub_100003470(&v513, "</td>\n");
            if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v400 = &v513;
            }
            else {
              v400 = (std::string *)v513.__r_.__value_.__r.__words[0];
            }
            if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v401 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v401 = v513.__r_.__value_.__l.__size_;
            }
            std::string::append(&v515, (const std::string::value_type *)v400, v401);
            if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v513.__r_.__value_.__l.__data_);
            }
            sub_10002369C(1uLL, v322, (uint64_t)qword_100080658, &v511);
            siri::dialogengine::PatternSchemaComponent::GetSupportingUsage((uint64_t *)&v509, v325);
            sub_100024224((uint64_t *)&v509, (uint64_t)&v510);
            if ((v510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v402 = &v510;
            }
            else {
              v402 = (std::string *)v510.__r_.__value_.__r.__words[0];
            }
            if ((v510.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v403 = HIBYTE(v510.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v403 = v510.__r_.__value_.__l.__size_;
            }
            v404 = std::string::append(&v511, (const std::string::value_type *)v402, v403);
            long long v405 = *(_OWORD *)&v404->__r_.__value_.__l.__data_;
            v512.__r_.__value_.__r.__words[2] = v404->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v512.__r_.__value_.__l.__data_ = v405;
            v404->__r_.__value_.__l.__size_ = 0;
            v404->__r_.__value_.__r.__words[2] = 0;
            v404->__r_.__value_.__r.__words[0] = 0;
            sub_100003470(&v503, "</td>\n");
            if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v406 = &v503;
            }
            else {
              v406 = (std::string *)v503.__r_.__value_.__r.__words[0];
            }
            if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v407 = HIBYTE(v503.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v407 = v503.__r_.__value_.__l.__size_;
            }
            v408 = std::string::append(&v512, (const std::string::value_type *)v406, v407);
            long long v409 = *(_OWORD *)&v408->__r_.__value_.__l.__data_;
            v513.__r_.__value_.__r.__words[2] = v408->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v409;
            v408->__r_.__value_.__l.__size_ = 0;
            v408->__r_.__value_.__r.__words[2] = 0;
            v408->__r_.__value_.__r.__words[0] = 0;
            if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v410 = &v513;
            }
            else {
              v410 = (std::string *)v513.__r_.__value_.__r.__words[0];
            }
            if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v411 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v411 = v513.__r_.__value_.__l.__size_;
            }
            std::string::append(&v515, (const std::string::value_type *)v410, v411);
            if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v513.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v503.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v512.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v510.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v510.__r_.__value_.__l.__data_);
            }
            v503.__r_.__value_.__r.__words[0] = (std::string::size_type)&v509;
            sub_100008EDC((void ***)&v503);
            if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v511.__r_.__value_.__l.__data_);
            }
            sub_10002369C(1uLL, v322, (uint64_t)qword_100080658, &v513);
            if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v412 = &v513;
            }
            else {
              v412 = (std::string *)v513.__r_.__value_.__r.__words[0];
            }
            if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v413 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v413 = v513.__r_.__value_.__l.__size_;
            }
            std::string::append(&v515, (const std::string::value_type *)v412, v413);
            if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v513.__r_.__value_.__l.__data_);
            }
            siri::dialogengine::PatternSchemaComponent::GetSupportingOverrides((uint64_t *)&v513, v325);
            std::string::size_type v414 = v513.__r_.__value_.__l.__size_;
            std::string::size_type v415 = v513.__r_.__value_.__r.__words[0];
            v512.__r_.__value_.__r.__words[0] = (std::string::size_type)&v513;
            sub_100008EDC((void ***)&v512);
            uint64_t v416 = v414 - v415;
            if (v414 != v415)
            {
              uint64_t v417 = 0;
              unint64_t v418 = 0;
              unint64_t v419 = v416 >> 4;
              unint64_t v420 = v419 - 1;
              if (v419 <= 1) {
                uint64_t v421 = 1;
              }
              else {
                uint64_t v421 = v419;
              }
              do
              {
                siri::dialogengine::PatternSchemaComponent::GetSupportingOverrides((uint64_t *)&v513, v325);
                v422 = *(siri::dialogengine::PatternSchemaOverride **)(v513.__r_.__value_.__r.__words[0] + v417);
                v423 = *(std::__shared_weak_count **)(v513.__r_.__value_.__r.__words[0] + v417 + 8);
                if (v423) {
                  atomic_fetch_add_explicit(&v423->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v512.__r_.__value_.__r.__words[0] = (std::string::size_type)&v513;
                sub_100008EDC((void ***)&v512);
                siri::dialogengine::PatternSchemaOverride::GetUsage((uint64_t *)&v511, v422);
                sub_100024224((uint64_t *)&v511, (uint64_t)&v512);
                v424 = std::string::append(&v512, "<br/>");
                long long v425 = *(_OWORD *)&v424->__r_.__value_.__l.__data_;
                v513.__r_.__value_.__r.__words[2] = v424->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v425;
                v424->__r_.__value_.__l.__size_ = 0;
                v424->__r_.__value_.__r.__words[2] = 0;
                v424->__r_.__value_.__r.__words[0] = 0;
                if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v426 = &v513;
                }
                else {
                  v426 = (std::string *)v513.__r_.__value_.__r.__words[0];
                }
                if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v427 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v427 = v513.__r_.__value_.__l.__size_;
                }
                std::string::append(&v515, (const std::string::value_type *)v426, v427);
                if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v513.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v512.__r_.__value_.__l.__data_);
                }
                v510.__r_.__value_.__r.__words[0] = (std::string::size_type)&v511;
                sub_100008EDC((void ***)&v510);
                siri::dialogengine::PatternSchemaOverride::GetIdioms((uint64_t *)&v512, v422);
                sub_100003470(&v511, ", ");
                siri::dialogengine::StringJoin();
                if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v428 = &v513;
                }
                else {
                  v428 = (std::string *)v513.__r_.__value_.__r.__words[0];
                }
                if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v429 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v429 = v513.__r_.__value_.__l.__size_;
                }
                std::string::append(&v515, (const std::string::value_type *)v428, v429);
                if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v513.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v511.__r_.__value_.__l.__data_);
                }
                v511.__r_.__value_.__r.__words[0] = (std::string::size_type)&v512;
                sub_100003B14((void ***)&v511);
                if (v418 < v420) {
                  std::string::append(&v515, "<hr>");
                }
                if (v423) {
                  sub_100006AE0(v423);
                }
                ++v418;
                v417 += 16;
              }
              while (v421 != v418);
            }
            sub_100003470(&v513, "</td>\n");
            if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v430 = &v513;
            }
            else {
              v430 = (std::string *)v513.__r_.__value_.__r.__words[0];
            }
            if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v431 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v431 = v513.__r_.__value_.__l.__size_;
            }
            std::string::append(&v515, (const std::string::value_type *)v430, v431);
            if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v513.__r_.__value_.__l.__data_);
            }
            if (v326) {
              sub_100006AE0((std::__shared_weak_count *)v326);
            }
            v513.__r_.__value_.__r.__words[0] = (std::string::size_type)&v514;
            sub_10002A89C((void ***)&v513);
          }
          std::string::append(&v515, "</tr>\n");
          unint64_t v207 = v476;
        }
        if (v468) {
          sub_100006AE0(v468);
        }
        v156 = v467 + 2;
      }
      while (v467 + 2 != v466);
    }
    v514.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    sub_100008EDC((void ***)&v514);
    std::string::append(&v515, "</table>\n");
    siri::dialogengine::PatternSchema::GetSettings((uint64_t *)&v514, v521);
    if (v514.__r_.__value_.__r.__words[2])
    {
      std::string::append(&v515, "<p>\n");
      std::string::append(&v515, "<b>Settings:</b>\n");
      std::string::append(&v515, "<ul>\n");
      std::string::size_type v432 = v514.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v514.__r_.__value_.__l.__data_ != &v514.__r_.__value_.__r.__words[1])
      {
        do
        {
          sub_1000067D8(__p, (long long *)(v432 + 32));
          v434 = v483;
          v433 = v484;
          if (v484) {
            atomic_fetch_add_explicit(&v484->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::PropertyBase::GetName((uint64_t *)&v511, v434);
          v435 = std::string::insert(&v511, 0, "  <li><b>");
          long long v436 = *(_OWORD *)&v435->__r_.__value_.__l.__data_;
          v512.__r_.__value_.__r.__words[2] = v435->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v512.__r_.__value_.__l.__data_ = v436;
          v435->__r_.__value_.__l.__size_ = 0;
          v435->__r_.__value_.__r.__words[2] = 0;
          v435->__r_.__value_.__r.__words[0] = 0;
          v437 = std::string::append(&v512, "</b>");
          long long v438 = *(_OWORD *)&v437->__r_.__value_.__l.__data_;
          v513.__r_.__value_.__r.__words[2] = v437->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v438;
          v437->__r_.__value_.__l.__size_ = 0;
          v437->__r_.__value_.__r.__words[2] = 0;
          v437->__r_.__value_.__r.__words[0] = 0;
          if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v439 = &v513;
          }
          else {
            v439 = (std::string *)v513.__r_.__value_.__r.__words[0];
          }
          if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v440 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v440 = v513.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v439, v440);
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v513.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v512.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v511.__r_.__value_.__l.__data_);
          }
          siri::dialogengine::ObjectProperty::GetDefaultValue((uint64_t *)&v513, v434);
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v441 = v513.__r_.__value_.__l.__size_;
            operator delete(v513.__r_.__value_.__l.__data_);
            if (!v441) {
              goto LABEL_1182;
            }
          }
          else if (!*((unsigned char *)&v513.__r_.__value_.__s + 23))
          {
            goto LABEL_1182;
          }
          siri::dialogengine::ObjectProperty::GetDefaultValue((uint64_t *)&v511, v434);
          v442 = std::string::insert(&v511, 0, " (default = ");
          long long v443 = *(_OWORD *)&v442->__r_.__value_.__l.__data_;
          v512.__r_.__value_.__r.__words[2] = v442->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v512.__r_.__value_.__l.__data_ = v443;
          v442->__r_.__value_.__l.__size_ = 0;
          v442->__r_.__value_.__r.__words[2] = 0;
          v442->__r_.__value_.__r.__words[0] = 0;
          v444 = std::string::append(&v512, ")");
          long long v445 = *(_OWORD *)&v444->__r_.__value_.__l.__data_;
          v513.__r_.__value_.__r.__words[2] = v444->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v445;
          v444->__r_.__value_.__l.__size_ = 0;
          v444->__r_.__value_.__r.__words[2] = 0;
          v444->__r_.__value_.__r.__words[0] = 0;
          if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v446 = &v513;
          }
          else {
            v446 = (std::string *)v513.__r_.__value_.__r.__words[0];
          }
          if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v447 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v447 = v513.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v446, v447);
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v513.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v512.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v511.__r_.__value_.__l.__data_);
          }
LABEL_1182:
          siri::dialogengine::PropertyBase::GetDeprecated((uint64_t *)&v513, v434);
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v448 = v513.__r_.__value_.__l.__size_;
            operator delete(v513.__r_.__value_.__l.__data_);
            if (!v448) {
              goto LABEL_1198;
            }
          }
          else if (!*((unsigned char *)&v513.__r_.__value_.__s + 23))
          {
            goto LABEL_1198;
          }
          siri::dialogengine::PropertyBase::GetDeprecated((uint64_t *)&v511, v434);
          v449 = std::string::insert(&v511, 0, " <i>(Deprecated: ");
          long long v450 = *(_OWORD *)&v449->__r_.__value_.__l.__data_;
          v512.__r_.__value_.__r.__words[2] = v449->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v512.__r_.__value_.__l.__data_ = v450;
          v449->__r_.__value_.__l.__size_ = 0;
          v449->__r_.__value_.__r.__words[2] = 0;
          v449->__r_.__value_.__r.__words[0] = 0;
          v451 = std::string::append(&v512, ")</i>");
          long long v452 = *(_OWORD *)&v451->__r_.__value_.__l.__data_;
          v513.__r_.__value_.__r.__words[2] = v451->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v452;
          v451->__r_.__value_.__l.__size_ = 0;
          v451->__r_.__value_.__r.__words[2] = 0;
          v451->__r_.__value_.__r.__words[0] = 0;
          if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v453 = &v513;
          }
          else {
            v453 = (std::string *)v513.__r_.__value_.__r.__words[0];
          }
          if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v454 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v454 = v513.__r_.__value_.__l.__size_;
          }
          std::string::append(&v515, (const std::string::value_type *)v453, v454);
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v513.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v512.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v511.__r_.__value_.__l.__data_);
          }
LABEL_1198:
          siri::dialogengine::PropertyBase::GetDescription((uint64_t *)&v513, v434);
          if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v455 = v513.__r_.__value_.__l.__size_;
            operator delete(v513.__r_.__value_.__l.__data_);
            if (v455)
            {
LABEL_1202:
              siri::dialogengine::PropertyBase::GetDescription((uint64_t *)&v512, v434);
              v456 = std::string::insert(&v512, 0, ": ");
              long long v457 = *(_OWORD *)&v456->__r_.__value_.__l.__data_;
              v513.__r_.__value_.__r.__words[2] = v456->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v513.__r_.__value_.__l.__data_ = v457;
              v456->__r_.__value_.__l.__size_ = 0;
              v456->__r_.__value_.__r.__words[2] = 0;
              v456->__r_.__value_.__r.__words[0] = 0;
              if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v458 = &v513;
              }
              else {
                v458 = (std::string *)v513.__r_.__value_.__r.__words[0];
              }
              if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v459 = HIBYTE(v513.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v459 = v513.__r_.__value_.__l.__size_;
              }
              std::string::append(&v515, (const std::string::value_type *)v458, v459);
              if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v513.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v512.__r_.__value_.__l.__data_);
              }
            }
          }
          else if (*((unsigned char *)&v513.__r_.__value_.__s + 23))
          {
            goto LABEL_1202;
          }
          std::string::append(&v515, "</li>\n");
          if (v433) {
            sub_100006AE0(v433);
          }
          if (v484) {
            sub_100006AE0(v484);
          }
          if (SHIBYTE(v482) < 0) {
            operator delete(__p[0]);
          }
          v460 = *(std::string **)(v432 + 8);
          if (v460)
          {
            do
            {
              v461 = v460;
              v460 = (std::string *)v460->__r_.__value_.__r.__words[0];
            }
            while (v460);
          }
          else
          {
            do
            {
              v461 = *(std::string **)(v432 + 16);
              BOOL v462 = v461->__r_.__value_.__r.__words[0] == v432;
              std::string::size_type v432 = (std::string::size_type)v461;
            }
            while (!v462);
          }
          std::string::size_type v432 = (std::string::size_type)v461;
        }
        while (v461 != (std::string *)&v514.__r_.__value_.__r.__words[1]);
      }
      std::string::append(&v515, "</ul>\n");
      std::string::append(&v515, "</p>\n");
    }
    std::string::append(&v515, "</body>\n</html>\n");
    sub_100003470(__p, ".html");
    siri::dialogengine::AddExtension();
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    siri::dialogengine::WriteFileFromString();
    if (v464[23] >= 0) {
      v463 = v464;
    }
    else {
      v463 = *(const char **)v464;
    }
    printf("Output written to %s\n", v463);
    sub_100006A84((uint64_t)&v514, (void *)v514.__r_.__value_.__l.__size_);
    if (SHIBYTE(v515.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v515.__r_.__value_.__l.__data_);
    }
    sub_100006A84((uint64_t)&v516, v517[0]);
    __p[0] = &v518;
    sub_100003B14((void ***)__p);
  }
  else
  {
    std::operator+<char>();
    sub_100003470(&v518, (char *)&unk_10006DFE2);
    sub_10004BDC8(v0, (uint64_t)__p, (const void **)&v518, 0);
    if (v520 < 0) {
      operator delete(v518);
    }
    if (SHIBYTE(v482) < 0) {
      operator delete(__p[0]);
    }
    sub_100003470(v2, (char *)&unk_10006DFE2);
  }
  if (v522) {
    sub_100006AE0(v522);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v523);
}

void sub_10001E6DC(_Unwind_Exception *a1)
{
  if (STACK[0x348]) {
    sub_100006AE0((std::__shared_weak_count *)STACK[0x348]);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0x350]);
  _Unwind_Resume(a1);
}

uint64_t sub_10001F65C(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  siri::dialogengine::GetTemplateDirs();
  siri::dialogengine::Context::Context();
  v176.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
  sub_10000C39C((void ***)&v176);
  siri::dialogengine::PatternRegistry::GetSchema();
  if (v163)
  {
    sub_100003470(&v162, "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n");
    std::string::append(&v162, "<pattern xmlns=\"urn:apple:names:siri:pattern:1.0\" ");
    siri::dialogengine::PatternSchema::GetName((uint64_t *)&v170, v163);
    unint64_t v6 = std::string::insert(&v170, 0, "type=\"");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v171.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v171, "\" id=\"");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v175.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    int v10 = *(char *)(a4 + 23);
    if (v10 >= 0) {
      long long v11 = (const std::string::value_type *)a4;
    }
    else {
      long long v11 = *(const std::string::value_type **)a4;
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      std::string::size_type v12 = *(void *)(a4 + 8);
    }
    unint64_t v13 = std::string::append(&v175, v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v176.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v176.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    long long v15 = std::string::append(&v176, "\">\n\n");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v172.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v17 = &v172;
    }
    else {
      long long v17 = (std::string *)v172.__r_.__value_.__r.__words[0];
    }
    if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v172.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v172.__r_.__value_.__l.__size_;
    }
    std::string::append(&v162, (const std::string::value_type *)v17, size);
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v176.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v175.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v171.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v170.__r_.__value_.__l.__data_);
    }
    siri::dialogengine::StringSplit();
    if (v160 == v161)
    {
      sub_100003470(__dst, (char *)&unk_10006DFE2);
    }
    else
    {
      std::string::size_type v19 = (void **)(v161 - 24);
      if (*(char *)(v161 - 1) < 0)
      {
        sub_100003600(__dst, *v19, *(void *)(v161 - 16));
      }
      else
      {
        long long v20 = *(_OWORD *)v19;
        uint64_t v159 = *(void *)(v161 - 8);
        *(_OWORD *)long long __dst = v20;
      }
    }
    std::string::size_type v155 = 0;
    v156 = 0;
    uint64_t v157 = 0;
    memset(v154, 0, sizeof(v154));
    if (*(char *)(a4 + 23) >= 0) {
      size_t v22 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      size_t v22 = *(void *)(a4 + 8);
    }
    sub_100008CC4((uint64_t)v152, v22 + 7);
    if (v153 >= 0) {
      long long v23 = v152;
    }
    else {
      long long v23 = (void **)v152[0];
    }
    if (v22)
    {
      if (*(char *)(a4 + 23) >= 0) {
        unsigned int v24 = (const void *)a4;
      }
      else {
        unsigned int v24 = *(const void **)a4;
      }
      memmove(v23, v24, v22);
    }
    strcpy((char *)v23 + v22, "_Dialog");
    if (*(char *)(a4 + 23) >= 0) {
      size_t v25 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      size_t v25 = *(void *)(a4 + 8);
    }
    sub_100008CC4((uint64_t)v150, v25 + 7);
    if (v151 >= 0) {
      std::string::size_type v26 = v150;
    }
    else {
      std::string::size_type v26 = (void **)v150[0];
    }
    if (v25)
    {
      if (*(char *)(a4 + 23) >= 0) {
        long long v27 = (const void *)a4;
      }
      else {
        long long v27 = *(const void **)a4;
      }
      memmove(v26, v27, v25);
    }
    strcpy((char *)v26 + v25, "_Visual");
    siri::dialogengine::PatternSchema::GetGroups((uint64_t *)&v176, v163);
    std::string::size_type v29 = v176.__r_.__value_.__l.__size_;
    for (std::string::size_type i = v176.__r_.__value_.__r.__words[0]; i != v29; i += 16)
    {
      std::string::size_type v31 = *(siri::dialogengine::PatternSchemaGroup **)i;
      uint64_t v30 = *(std::__shared_weak_count **)(i + 8);
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v31 + 40))(&v172, v31);
      char v32 = sub_1000254D4((uint64_t *)&v172);
      v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
      sub_100008EDC((void ***)&v175);
      if ((v32 & 1) == 0) {
        goto LABEL_164;
      }
      siri::dialogengine::PatternSchemaGroup::GetName((uint64_t *)&v171, v31);
      long long v33 = std::string::insert(&v171, 0, "  <group name=\"");
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v175.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      uint64_t v35 = std::string::append(&v175, "\">\n");
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v172.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v37 = &v172;
      }
      else {
        long long v37 = (std::string *)v172.__r_.__value_.__r.__words[0];
      }
      if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v172.__r_.__value_.__l.__size_;
      }
      std::string::append(&v162, (const std::string::value_type *)v37, v38);
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v175.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v171.__r_.__value_.__l.__data_);
      }
      if (v159 >= 0) {
        size_t v39 = HIBYTE(v159);
      }
      else {
        size_t v39 = (size_t)__dst[1];
      }
      sub_100008CC4((uint64_t)&v172, v39 + 1);
      if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v40 = &v172;
      }
      else {
        uint64_t v40 = (std::string *)v172.__r_.__value_.__r.__words[0];
      }
      if (v39)
      {
        if (v159 >= 0) {
          long long v41 = __dst;
        }
        else {
          long long v41 = (void **)__dst[0];
        }
        memmove(v40, v41, v39);
      }
      *(_WORD *)((char *)&v40->__r_.__value_.__l.__data_ + v39) = 35;
      siri::dialogengine::PatternSchemaGroup::GetName((uint64_t *)&v175, v31);
      if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v42 = &v175;
      }
      else {
        long long v42 = (std::string *)v175.__r_.__value_.__r.__words[0];
      }
      if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v43 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v43 = v175.__r_.__value_.__l.__size_;
      }
      std::string v44 = std::string::append(&v172, (const std::string::value_type *)v42, v43);
      v146 = (void *)v44->__r_.__value_.__r.__words[0];
      int v45 = SHIBYTE(v44->__r_.__value_.__r.__words[2]);
      v44->__r_.__value_.__r.__words[0] = 0;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v175.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v172.__r_.__value_.__l.__data_);
      }
      (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v31 + 56))(&v172, v31);
      long long v46 = *(_OWORD *)&v172.__r_.__value_.__l.__data_;
      v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
      sub_100008EDC((void ***)&v175);
      if (*((void *)&v46 + 1) != (void)v46)
      {
        (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v31 + 56))(&v172, v31);
        uint64_t v48 = *(siri::dialogengine::PatternSchemaComponent **)v172.__r_.__value_.__l.__data_;
        std::string::size_type v47 = *(std::__shared_weak_count **)(v172.__r_.__value_.__r.__words[0] + 8);
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
        sub_100008EDC((void ***)&v175);
        siri::dialogengine::PatternSchemaComponent::GetUsage((uint64_t *)&v172, v48);
        int v49 = sub_1000254D4((uint64_t *)&v172);
        v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
        sub_100008EDC((void ***)&v175);
        if (!v49) {
          goto LABEL_126;
        }
        std::operator+<char>();
        uint64_t v50 = std::string::append(&v170, "#");
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v171.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::PatternSchemaGroup::GetName((uint64_t *)&__p, v31);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v53 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v54 = std::string::append(&v171, (const std::string::value_type *)p_p, v53);
        long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        v175.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        char v56 = std::string::append(&v175, "*\"/>\n");
        long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v172.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v58 = &v172;
        }
        else {
          size_t v58 = (std::string *)v172.__r_.__value_.__r.__words[0];
        }
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v59 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v59 = v172.__r_.__value_.__l.__size_;
        }
        std::string::append(&v162, (const std::string::value_type *)v58, v59);
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v172.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v175.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v171.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v170.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::PatternSchemaGroup::GetName((uint64_t *)&v175, v31);
        *(_OWORD *)&v172.__r_.__value_.__l.__data_ = *(_OWORD *)&v175.__r_.__value_.__l.__data_;
        std::string::size_type v60 = v175.__r_.__value_.__r.__words[2];
        memset(&v175, 0, sizeof(v175));
        v172.__r_.__value_.__r.__words[2] = v60;
        v173 = v48;
        long long v174 = v47;
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_100025588((uint64_t *)&v155, (long long *)&v172);
        if (v174) {
          sub_100006AE0(v174);
        }
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v172.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v175.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_126:
          if (!v47) {
            goto LABEL_128;
          }
LABEL_127:
          sub_100006AE0(v47);
          goto LABEL_128;
        }
        operator delete(v175.__r_.__value_.__l.__data_);
        if (v47) {
          goto LABEL_127;
        }
      }
LABEL_128:
      (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v31 + 72))(&v172, v31);
      long long v61 = *(_OWORD *)&v172.__r_.__value_.__l.__data_;
      v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
      sub_100008EDC((void ***)&v175);
      if (*((void *)&v61 + 1) == (void)v61) {
        goto LABEL_163;
      }
      (*(void (**)(std::string *__return_ptr, siri::dialogengine::PatternSchemaGroup *))(*(void *)v31 + 72))(&v172, v31);
      long long v63 = *(siri::dialogengine::PatternSchemaComponent **)v172.__r_.__value_.__l.__data_;
      unint64_t v62 = *(std::__shared_weak_count **)(v172.__r_.__value_.__r.__words[0] + 8);
      if (v62) {
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
      sub_100008EDC((void ***)&v175);
      siri::dialogengine::PatternSchemaComponent::GetUsage((uint64_t *)&v172, v63);
      int v64 = sub_1000254D4((uint64_t *)&v172);
      v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
      sub_100008EDC((void ***)&v175);
      if (!v64) {
        goto LABEL_161;
      }
      std::operator+<char>();
      std::string::size_type v65 = std::string::append(&v170, "#");
      long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v171.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::PatternSchemaGroup::GetName((uint64_t *)&__p, v31);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v67 = &__p;
      }
      else {
        long long v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v68 = __p.__r_.__value_.__l.__size_;
      }
      std::string::size_type v69 = std::string::append(&v171, (const std::string::value_type *)v67, v68);
      long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v175.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      long long v71 = std::string::append(&v175, "*\"/>\n");
      long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v172.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v73 = &v172;
      }
      else {
        std::string::size_type v73 = (std::string *)v172.__r_.__value_.__r.__words[0];
      }
      if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v74 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v74 = v172.__r_.__value_.__l.__size_;
      }
      std::string::append(&v162, (const std::string::value_type *)v73, v74);
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v175.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v170.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::PatternSchemaGroup::GetName((uint64_t *)&v175, v31);
      *(_OWORD *)&v172.__r_.__value_.__l.__data_ = *(_OWORD *)&v175.__r_.__value_.__l.__data_;
      std::string::size_type v75 = v175.__r_.__value_.__r.__words[2];
      memset(&v175, 0, sizeof(v175));
      v172.__r_.__value_.__r.__words[2] = v75;
      v173 = v63;
      long long v174 = v62;
      if (v62) {
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_100025588((uint64_t *)v154, (long long *)&v172);
      if (v174) {
        sub_100006AE0(v174);
      }
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v172.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v175.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_161:
        if (!v62) {
          goto LABEL_163;
        }
LABEL_162:
        sub_100006AE0(v62);
        goto LABEL_163;
      }
      operator delete(v175.__r_.__value_.__l.__data_);
      if (v62) {
        goto LABEL_162;
      }
LABEL_163:
      std::string::append(&v162, "  </group>\n\n");
      if (v45 < 0)
      {
        operator delete(v146);
        if (!v30) {
          continue;
        }
LABEL_165:
        sub_100006AE0(v30);
        continue;
      }
LABEL_164:
      if (v30) {
        goto LABEL_165;
      }
    }
    v172.__r_.__value_.__r.__words[0] = (std::string::size_type)&v176;
    sub_100008EDC((void ***)&v172);
    std::string::append(&v162, "</pattern>\n");
    uint64_t v76 = v163;
    std::string::size_type v77 = v164;
    if (v164) {
      atomic_fetch_add_explicit(&v164->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100003470(&v176, "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n");
    std::operator+<char>();
    std::string v78 = std::string::append(&v175, "\">\n\n");
    long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    v172.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v80 = &v172;
    }
    else {
      uint64_t v80 = (std::string *)v172.__r_.__value_.__r.__words[0];
    }
    if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v81 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v81 = v172.__r_.__value_.__l.__size_;
    }
    std::string::append(&v176, (const std::string::value_type *)v80, v81);
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v175.__r_.__value_.__l.__data_);
    }
    siri::dialogengine::PatternSchema::GetRequiredParameters((uint64_t *)&v172, v76);
    std::string::size_type v82 = v172.__r_.__value_.__r.__words[2];
    sub_100006A84((uint64_t)&v172, (void *)v172.__r_.__value_.__l.__size_);
    if (v82)
    {
      std::string::append(&v176, "  <parameters>\n");
      std::string::size_type v147 = v77;
      siri::dialogengine::PatternSchema::GetRequiredParameters((uint64_t *)&v175, v76);
      std::string::size_type v83 = v175.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v175.__r_.__value_.__l.__data_ != &v175.__r_.__value_.__r.__words[1])
      {
        do
        {
          sub_1000067D8(&v172, (long long *)(v83 + 32));
          siri::dialogengine::PropertyBase::GetType((uint64_t *)&v171, v173);
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v171.__r_.__value_.__l.__size_ == 15)
            {
              long long v84 = (std::string *)v171.__r_.__value_.__r.__words[0];
LABEL_193:
              std::string::size_type v85 = v84->__r_.__value_.__r.__words[0];
              uint64_t v86 = *(std::string::size_type *)((char *)v84->__r_.__value_.__r.__words + 7);
              BOOL v87 = v85 == 0x4F2E676F6C616964 && v86 == 0x5D5B7463656A624FLL;
              if (v87)
              {
                std::string::append(&v176, "    <!-- You must declare the type of your items array in the line below -->\n");
                std::string::assign(&v171, (const std::string::value_type *)&unk_10006DFE2);
              }
            }
          }
          else if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) == 15)
          {
            long long v84 = &v171;
            goto LABEL_193;
          }
          siri::dialogengine::PropertyBase::GetName((uint64_t *)&v166, v173);
          uint64_t v88 = std::string::insert(&v166, 0, "    <parameter name=\"");
          long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          v167.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          unsigned int v90 = std::string::append(&v167, "\" type=\"");
          long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
          v168.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v91;
          v90->__r_.__value_.__l.__size_ = 0;
          v90->__r_.__value_.__r.__words[2] = 0;
          v90->__r_.__value_.__r.__words[0] = 0;
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v92 = &v171;
          }
          else {
            uint64_t v92 = (std::string *)v171.__r_.__value_.__r.__words[0];
          }
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v93 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v93 = v171.__r_.__value_.__l.__size_;
          }
          unsigned __int8 v94 = std::string::append(&v168, (const std::string::value_type *)v92, v93);
          long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v95;
          v94->__r_.__value_.__l.__size_ = 0;
          v94->__r_.__value_.__r.__words[2] = 0;
          v94->__r_.__value_.__r.__words[0] = 0;
          char v96 = std::string::append(&__p, "\"/>\n");
          long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
          v170.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v97;
          v96->__r_.__value_.__l.__size_ = 0;
          v96->__r_.__value_.__r.__words[2] = 0;
          v96->__r_.__value_.__r.__words[0] = 0;
          if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v98 = &v170;
          }
          else {
            std::string v98 = (std::string *)v170.__r_.__value_.__r.__words[0];
          }
          if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v99 = HIBYTE(v170.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v99 = v170.__r_.__value_.__l.__size_;
          }
          std::string::append(&v176, (const std::string::value_type *)v98, v99);
          if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v170.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v168.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v167.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v166.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v171.__r_.__value_.__l.__data_);
          }
          if (v174) {
            sub_100006AE0(v174);
          }
          if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v172.__r_.__value_.__l.__data_);
          }
          long long v100 = *(std::string **)(v83 + 8);
          if (v100)
          {
            do
            {
              std::string::size_type v101 = v100;
              long long v100 = (std::string *)v100->__r_.__value_.__r.__words[0];
            }
            while (v100);
          }
          else
          {
            do
            {
              std::string::size_type v101 = *(std::string **)(v83 + 16);
              BOOL v87 = v101->__r_.__value_.__r.__words[0] == v83;
              std::string::size_type v83 = (std::string::size_type)v101;
            }
            while (!v87);
          }
          std::string::size_type v83 = (std::string::size_type)v101;
        }
        while (v101 != (std::string *)&v175.__r_.__value_.__r.__words[1]);
      }
      sub_100006A84((uint64_t)&v175, (void *)v175.__r_.__value_.__l.__size_);
      siri::dialogengine::PatternSchema::GetComputedParameters((uint64_t *)&v175, v76);
      std::string::size_type v102 = v175.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v175.__r_.__value_.__l.__data_ != &v175.__r_.__value_.__r.__words[1])
      {
        do
        {
          sub_1000067D8(&v172, (long long *)(v102 + 32));
          siri::dialogengine::PropertyBase::GetName((uint64_t *)&v167, v173);
          std::string::size_type v103 = std::string::insert(&v167, 0, "    <parameter name=\"");
          long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
          v168.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v104;
          v103->__r_.__value_.__l.__size_ = 0;
          v103->__r_.__value_.__r.__words[2] = 0;
          v103->__r_.__value_.__r.__words[0] = 0;
          long long v105 = std::string::append(&v168, "\" type=\"");
          long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v106;
          v105->__r_.__value_.__l.__size_ = 0;
          v105->__r_.__value_.__r.__words[2] = 0;
          v105->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::PropertyBase::GetType((uint64_t *)&v166, v173);
          if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v107 = &v166;
          }
          else {
            std::string::size_type v107 = (std::string *)v166.__r_.__value_.__r.__words[0];
          }
          if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v108 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v108 = v166.__r_.__value_.__l.__size_;
          }
          long long v109 = std::string::append(&__p, (const std::string::value_type *)v107, v108);
          long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
          v170.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v110;
          v109->__r_.__value_.__l.__size_ = 0;
          v109->__r_.__value_.__r.__words[2] = 0;
          v109->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v111 = std::string::append(&v170, "\"/>\n");
          long long v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
          v171.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v112;
          v111->__r_.__value_.__l.__size_ = 0;
          v111->__r_.__value_.__r.__words[2] = 0;
          v111->__r_.__value_.__r.__words[0] = 0;
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v113 = &v171;
          }
          else {
            long long v113 = (std::string *)v171.__r_.__value_.__r.__words[0];
          }
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v114 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v114 = v171.__r_.__value_.__l.__size_;
          }
          std::string::append(&v176, (const std::string::value_type *)v113, v114);
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v171.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v170.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v166.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v168.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v167.__r_.__value_.__l.__data_);
          }
          if (v174) {
            sub_100006AE0(v174);
          }
          if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v172.__r_.__value_.__l.__data_);
          }
          std::string::size_type v115 = *(std::string **)(v102 + 8);
          if (v115)
          {
            do
            {
              v116 = v115;
              std::string::size_type v115 = (std::string *)v115->__r_.__value_.__r.__words[0];
            }
            while (v115);
          }
          else
          {
            do
            {
              v116 = *(std::string **)(v102 + 16);
              BOOL v87 = v116->__r_.__value_.__r.__words[0] == v102;
              std::string::size_type v102 = (std::string::size_type)v116;
            }
            while (!v87);
          }
          std::string::size_type v102 = (std::string::size_type)v116;
        }
        while (v116 != (std::string *)&v175.__r_.__value_.__r.__words[1]);
      }
      sub_100006A84((uint64_t)&v175, (void *)v175.__r_.__value_.__l.__size_);
      std::string::size_type v77 = v147;
      std::string::append(&v176, "  </parameters>\n\n");
    }
    std::string::append(&v176, "</cat>\n");
    siri::dialogengine::CatIdToPath();
    siri::dialogengine::JoinPath();
    sub_100003470(&v170, "_params.cat.xml");
    siri::dialogengine::JoinPath();
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v170.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v175.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v171.__r_.__value_.__l.__data_);
    }
    sub_100003470(&v175, "Dialog CAT parameters file");
    int v148 = sub_1000277C0((uint64_t)&v172, (uint64_t)&v176, (uint64_t)&v175);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v175.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v176.__r_.__value_.__l.__data_);
    }
    if (v77) {
      sub_100006AE0(v77);
    }
    sub_100003470(&v176, "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n");
    std::operator+<char>();
    long long v117 = std::string::append(&v175, "\">\n");
    long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
    v172.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v118;
    v117->__r_.__value_.__l.__size_ = 0;
    v117->__r_.__value_.__r.__words[2] = 0;
    v117->__r_.__value_.__r.__words[0] = 0;
    if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v119 = &v172;
    }
    else {
      std::string::size_type v119 = (std::string *)v172.__r_.__value_.__r.__words[0];
    }
    if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v120 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v120 = v172.__r_.__value_.__l.__size_;
    }
    std::string::append(&v176, (const std::string::value_type *)v119, v120);
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v175.__r_.__value_.__l.__data_);
    }
    std::string::append(&v176, "  <all>\n");
    long long v121 = v155;
    for (uint64_t j = v156; v121 != j; v121 = (long long *)((char *)v121 + 40))
    {
      sub_1000067D8(&v172, v121);
      std::operator+<char>();
      std::string::size_type v123 = std::string::append(&v171, "\">\n");
      long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
      v175.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v124;
      v123->__r_.__value_.__l.__size_ = 0;
      v123->__r_.__value_.__r.__words[2] = 0;
      v123->__r_.__value_.__r.__words[0] = 0;
      if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v125 = &v175;
      }
      else {
        long long v125 = (std::string *)v175.__r_.__value_.__r.__words[0];
      }
      if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v126 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v126 = v175.__r_.__value_.__l.__size_;
      }
      std::string::append(&v176, (const std::string::value_type *)v125, v126);
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v175.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v171.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::PatternSchemaComponent::GetFullExamples((uint64_t *)&v171, v173);
      if (v171.__r_.__value_.__r.__words[0] == v171.__r_.__value_.__l.__size_)
      {
        sub_100003470(&v175, (char *)&unk_10006DFE2);
      }
      else
      {
        siri::dialogengine::PatternSchemaComponent::GetFullExamples((uint64_t *)&v170, v173);
        if (*(char *)(v170.__r_.__value_.__r.__words[0] + 23) < 0)
        {
          sub_100003600(&v175, *(void **)v170.__r_.__value_.__l.__data_, *(void *)(v170.__r_.__value_.__r.__words[0] + 8));
        }
        else
        {
          long long v127 = *(_OWORD *)v170.__r_.__value_.__l.__data_;
          v175.__r_.__value_.__r.__words[2] = *(void *)(v170.__r_.__value_.__r.__words[0] + 16);
          *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v127;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v170;
        sub_100003B14((void ***)&__p);
      }
      v170.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
      sub_100003B14((void ***)&v170);
      siri::dialogengine::PatternSchemaComponent::GetFullUsage((uint64_t *)&v171, v173);
      int v128 = sub_1000254D4((uint64_t *)&v171);
      v170.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
      sub_100008EDC((void ***)&v170);
      if (v128)
      {
        std::operator+<char>();
        long long v129 = std::string::append(&v170, "</content>\n");
        long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
        v171.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v130;
        v129->__r_.__value_.__l.__size_ = 0;
        v129->__r_.__value_.__r.__words[2] = 0;
        v129->__r_.__value_.__r.__words[0] = 0;
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v131 = &v171;
        }
        else {
          std::string::size_type v131 = (std::string *)v171.__r_.__value_.__r.__words[0];
        }
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v132 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v132 = v171.__r_.__value_.__l.__size_;
        }
        std::string::append(&v176, (const std::string::value_type *)v131, v132);
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v171.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v170.__r_.__value_.__l.__data_);
        }
      }
      siri::dialogengine::PatternSchemaComponent::GetSupportingUsage((uint64_t *)&v171, v173);
      int v133 = sub_1000254D4((uint64_t *)&v171);
      v170.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
      sub_100008EDC((void ***)&v170);
      if (v133)
      {
        std::operator+<char>();
        char v134 = std::string::append(&v170, "</caption>\n");
        long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
        v171.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v135;
        v134->__r_.__value_.__l.__size_ = 0;
        v134->__r_.__value_.__r.__words[2] = 0;
        v134->__r_.__value_.__r.__words[0] = 0;
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v136 = &v171;
        }
        else {
          uint64_t v136 = (std::string *)v171.__r_.__value_.__r.__words[0];
        }
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v137 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v137 = v171.__r_.__value_.__l.__size_;
        }
        std::string::append(&v176, (const std::string::value_type *)v136, v137);
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v171.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v170.__r_.__value_.__l.__data_);
        }
      }
      std::string::append(&v176, "    </dialog>\n");
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v175.__r_.__value_.__l.__data_);
      }
      if (v174) {
        sub_100006AE0(v174);
      }
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v172.__r_.__value_.__l.__data_);
      }
    }
    std::string::append(&v176, "  </all>\n");
    std::string::append(&v176, "</cat>\n");
    siri::dialogengine::CatIdToPath();
    siri::dialogengine::JoinPath();
    sub_100003470(&v170, "en.cat.xml");
    siri::dialogengine::JoinPath();
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v170.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v175.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v171.__r_.__value_.__l.__data_);
    }
    sub_100003470(&v175, "Dialog CAT locale file");
    int v138 = sub_1000277C0((uint64_t)&v172, (uint64_t)&v176, (uint64_t)&v175);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v175.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v176.__r_.__value_.__l.__data_);
    }
    std::string::size_type v139 = v164;
    v149[0] = v163;
    v149[1] = (siri::dialogengine::PatternSchema *)v164;
    if (v164) {
      atomic_fetch_add_explicit(&v164->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v140 = sub_1000256D0(a3, (uint64_t)v150, v149, v154);
    if (v139) {
      sub_100006AE0(v139);
    }
    sub_100003470(&v175, ".patternxml");
    siri::dialogengine::PatternIdToPath();
    siri::dialogengine::JoinPath();
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v176.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v175.__r_.__value_.__l.__data_);
    }
    sub_100003470(&v176, "Pattern file");
    int v141 = sub_1000277C0((uint64_t)&v172, (uint64_t)&v162, (uint64_t)&v176);
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v176.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v172.__r_.__value_.__l.__data_);
    }
    if (v151 < 0) {
      operator delete(v150[0]);
    }
    if (v153 < 0) {
      operator delete(v152[0]);
    }
    int v142 = v141 & v140;
    int v143 = v138 & v148;
    v172.__r_.__value_.__r.__words[0] = (std::string::size_type)v154;
    sub_10002A3BC((void ***)&v172);
    v172.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155;
    sub_10002A3BC((void ***)&v172);
    if (SHIBYTE(v159) < 0) {
      operator delete(__dst[0]);
    }
    uint64_t v21 = v142 & v143;
    v172.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
    sub_100003B14((void ***)&v172);
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v162.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::operator+<char>();
    sub_100003470(&v176, (char *)&unk_10006DFE2);
    sub_10004BDC8(a1, (uint64_t)&v172, (const void **)&v176.__r_.__value_.__l.__data_, 0);
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v176.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v172.__r_.__value_.__l.__data_);
    }
    uint64_t v21 = 0;
  }
  if (v164) {
    sub_100006AE0(v164);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v165);
  return v21;
}

void sub_100020CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,std::__shared_weak_count *a50,char a51)
{
  if (*(char *)(v51 - 105) < 0) {
    operator delete(*(void **)(v51 - 128));
  }
  if (a12) {
    sub_100006AE0(a12);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  *(void *)(v51 - 208) = &a27;
  sub_10002A3BC((void ***)(v51 - 208));
  *(void *)(v51 - 208) = &a30;
  sub_10002A3BC((void ***)(v51 - 208));
  if (a38 < 0) {
    operator delete(a33);
  }
  *(void *)(v51 - 208) = &a40;
  sub_100003B14((void ***)(v51 - 208));
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a50) {
    sub_100006AE0(a50);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a51);
  _Unwind_Resume(a1);
}

BOOL sub_1000214F0()
{
  uint64_t v0 = __chkstk_darwin();
  int v2 = v1;
  unsigned int v24 = (unsigned char *)v0;
  siri::dialogengine::GetTemplateDirs();
  siri::dialogengine::Context::Context();
  long long v34 = v29;
  sub_10000C39C((void ***)&v34);
  siri::dialogengine::PatternFile::LoadFromId();
  if (v38)
  {
    uint64_t v36 = 0;
    uint64_t v35 = 0;
    long long v34 = &v35;
    char v37 = 0;
    siri::dialogengine::Context::GetRequestInfo((uint64_t *)v29, (siri::dialogengine::Context *)v40);
    siri::dialogengine::RequestInfo::GetTemplateDirs((uint64_t *)&v32, (siri::dialogengine::RequestInfo *)v29);
    int v23 = v2;
    siri::dialogengine::GetParamsForPattern();
    __p[0] = &v32;
    sub_10000C39C((void ***)__p);
    sub_10002A454((uint64_t)v29);
    siri::dialogengine::ParameterCollection::GetConflictingParameters((siri::dialogengine::ParameterCollection *)&v34, (siri::dialogengine::Context *)v40);
    uint64_t v3 = v32;
    if (v32 != v33)
    {
      do
      {
        for (std::string::size_type i = v3[9]; i; std::string::size_type i = (void *)*i)
        {
          sub_100024BD8((uint64_t)v29);
          unint64_t v8 = sub_1000042E0(v30, (uint64_t)"The parameter '", 15);
          int v9 = *((char *)v3 + 55);
          if (v9 >= 0) {
            uint64_t v10 = (uint64_t)(v3 + 4);
          }
          else {
            uint64_t v10 = (uint64_t)v3[4];
          }
          if (v9 >= 0) {
            uint64_t v11 = *((unsigned __int8 *)v3 + 55);
          }
          else {
            uint64_t v11 = (uint64_t)v3[5];
          }
          std::string::size_type v12 = sub_1000042E0(v8, v10, v11);
          unint64_t v13 = sub_1000042E0(v12, (uint64_t)"' (", 3);
          siri::dialogengine::PropertyBase::GetType((uint64_t *)__p, (siri::dialogengine::PropertyBase *)i[2]);
          if ((v28 & 0x80u) == 0) {
            long long v14 = __p;
          }
          else {
            long long v14 = (void **)__p[0];
          }
          if ((v28 & 0x80u) == 0) {
            uint64_t v15 = v28;
          }
          else {
            uint64_t v15 = (uint64_t)__p[1];
          }
          long long v16 = sub_1000042E0(v13, (uint64_t)v14, v15);
          sub_1000042E0(v16, (uint64_t)") is defined in multiple files with different types", 51);
          if ((char)v28 < 0) {
            operator delete(__p[0]);
          }
          std::stringbuf::str();
          siri::dialogengine::LineNumberBase::GetFullPath((uint64_t *)v25, (siri::dialogengine::LineNumberBase *)(i[2] + 240));
          unint64_t LineNumber = siri::dialogengine::LineNumberBase::GetLineNumber((siri::dialogengine::LineNumberBase *)(i[2] + 240));
          sub_10004BDC8(v24, (uint64_t)__p, (const void **)v25, LineNumber);
          if (v26 < 0) {
            operator delete(v25[0]);
          }
          if ((char)v28 < 0) {
            operator delete(__p[0]);
          }
          v29[0] = v4;
          *(void **)((char *)v29 + *((void *)v4 - 3)) = v5;
          v30[0] = v6;
          if (v31 < 0) {
            operator delete((void *)v30[9]);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          std::ios::~ios();
        }
        uint64_t v18 = v3[1];
        if (v18)
        {
          do
          {
            std::string::size_type v19 = (void **)v18;
            uint64_t v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            std::string::size_type v19 = (void **)v3[2];
            BOOL v20 = *v19 == v3;
            uint64_t v3 = v19;
          }
          while (!v20);
        }
        uint64_t v3 = v19;
      }
      while (v19 != v33);
    }
    siri::dialogengine::ParameterCollection::GetUniqueParameters((siri::dialogengine::ParameterCollection *)&v34, (siri::dialogengine::Context *)v40);
    sub_10000AF30(v29, v23);
    sub_100006A84((uint64_t)v29, (void *)v29[1]);
    sub_10000C26C((uint64_t)&v32, v33[0]);
    sub_10000C26C((uint64_t)&v34, v35);
    BOOL v21 = 1;
  }
  else
  {
    std::operator+<char>();
    sub_100003470(&v34, (char *)&unk_10006DFE2);
    BOOL v21 = sub_10004BDC8(v24, (uint64_t)v29, (const void **)&v34, 0);
    if (SHIBYTE(v36) < 0) {
      operator delete(v34);
    }
    if (SHIBYTE(v30[0]) < 0) {
      operator delete(v29[0]);
    }
  }
  if (v39) {
    sub_100006AE0(v39);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v40);
  return v21;
}

void sub_100021970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (STACK[0x278]) {
    sub_100006AE0((std::__shared_weak_count *)STACK[0x278]);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_100021A90(unsigned char *a1, siri::dialogengine::ValidationEntry *this, const void **a3)
{
  siri::dialogengine::ValidationEntry::GetText((uint64_t *)__p, this);
  unint64_t LineNumber = siri::dialogengine::LineNumberBase::GetLineNumber(this);
  sub_10004BDC8(a1, (uint64_t)__p, a3, LineNumber);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100021B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100021B1C(unsigned char *a1, siri::dialogengine::ValidationEntry *this, const void **a3)
{
  siri::dialogengine::ValidationEntry::GetText((uint64_t *)__p, this);
  unint64_t LineNumber = siri::dialogengine::LineNumberBase::GetLineNumber(this);
  sub_10004C17C(a1, (uint64_t)__p, a3, LineNumber);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100021B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100021BA8(uint64_t a1, unsigned char *a2)
{
  if (*(void *)(a1 + 40) || *(void *)(a1 + 64))
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&std::cout
                                                + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0));
    size_t v4 = std::locale::use_facet(v30, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
    std::locale::~locale(v30);
    std::ostream::put();
    std::ostream::flush();
    unint64_t v5 = *(void *)(a1 + 64);
    if (v5)
    {
      std::to_string(&v28, v5);
      uint64_t v6 = std::string::append(&v28, " validation warning(s) for ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      int v8 = *(char *)(a1 + 23);
      if (v8 >= 0) {
        int v9 = (const std::string::value_type *)a1;
      }
      else {
        int v9 = *(const std::string::value_type **)a1;
      }
      if (v8 >= 0) {
        std::string::size_type v10 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        std::string::size_type v10 = *(void *)(a1 + 8);
      }
      uint64_t v11 = std::string::append(&v29, v9, v10);
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      std::string::size_type v31 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30[0].__locale_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      sub_10004C1A4(a2, (uint64_t)v30);
      if (SHIBYTE(v31) < 0) {
        operator delete(v30[0].__locale_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      unint64_t v13 = *(void **)(a1 + 48);
      if (v13 != (void *)(a1 + 56))
      {
        do
        {
          sub_100003470(v30, (char *)&unk_10006DFE2);
          sub_100021B1C(a2, (siri::dialogengine::ValidationEntry *)(v13 + 4), (const void **)&v30[0].__locale_);
          if (SHIBYTE(v31) < 0) {
            operator delete(v30[0].__locale_);
          }
          long long v14 = (void *)v13[1];
          if (v14)
          {
            do
            {
              uint64_t v15 = v14;
              long long v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              uint64_t v15 = (void *)v13[2];
              BOOL v16 = *v15 == (void)v13;
              unint64_t v13 = v15;
            }
            while (!v16);
          }
          unint64_t v13 = v15;
        }
        while (v15 != (void *)(a1 + 56));
      }
    }
    unint64_t v17 = *(void *)(a1 + 40);
    if (v17)
    {
      std::to_string(&v28, v17);
      uint64_t v18 = std::string::append(&v28, " validation error(s) for ");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      int v20 = *(char *)(a1 + 23);
      if (v20 >= 0) {
        BOOL v21 = (const std::string::value_type *)a1;
      }
      else {
        BOOL v21 = *(const std::string::value_type **)a1;
      }
      if (v20 >= 0) {
        std::string::size_type v22 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        std::string::size_type v22 = *(void *)(a1 + 8);
      }
      int v23 = std::string::append(&v29, v21, v22);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      std::string::size_type v31 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30[0].__locale_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      sub_10004C1A4(a2, (uint64_t)v30);
      if (SHIBYTE(v31) < 0) {
        operator delete(v30[0].__locale_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      size_t v25 = *(void **)(a1 + 24);
      if (v25 != (void *)(a1 + 32))
      {
        do
        {
          sub_100003470(v30, (char *)&unk_10006DFE2);
          sub_100021A90(a2, (siri::dialogengine::ValidationEntry *)(v25 + 4), (const void **)&v30[0].__locale_);
          if (SHIBYTE(v31) < 0) {
            operator delete(v30[0].__locale_);
          }
          char v26 = (void *)v25[1];
          if (v26)
          {
            do
            {
              long long v27 = v26;
              char v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              long long v27 = (void *)v25[2];
              BOOL v16 = *v27 == (void)v25;
              size_t v25 = v27;
            }
            while (!v16);
          }
          size_t v25 = v27;
        }
        while (v27 != (void *)(a1 + 32));
      }
    }
    else
    {
      std::operator+<char>();
      sub_10004C1A4(a2, (uint64_t)v30);
      if (SHIBYTE(v31) < 0) {
        operator delete(v30[0].__locale_);
      }
    }
  }
}

void sub_100021F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100021F8C@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0x320uLL);
  uint64_t result = sub_100021FD8(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100021FC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100021FD8(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10007CE08;
  uint64_t v2 = (uint64_t)(a1 + 3);
  bzero(a1 + 3, 0x308uLL);
  sub_1000220E4(v2);
  return a1;
}

void sub_100022034(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100022048(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10007CE08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100022068(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10007CE08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000220BC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1000220E4(uint64_t a1)
{
  uint64_t v2 = siri::dialogengine::ValidationBase::ValidationBase((siri::dialogengine::ValidationBase *)a1);
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(void *)(v2 + 144) = 0;
  sub_100003470((void *)(v2 + 152), "5.2");
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  siri::dialogengine::GroupPhrases::GroupPhrases((siri::dialogengine::GroupPhrases *)(a1 + 312));
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 568) = a1 + 576;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 592) = a1 + 600;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 616) = a1 + 624;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 648) = 0;
  *(unsigned char *)(a1 + 672) = 1;
  *(unsigned char *)(a1 + 680) = 0;
  *(unsigned char *)(a1 + 704) = 0;
  *(unsigned char *)(a1 + 712) = 0;
  *(unsigned char *)(a1 + 736) = 0;
  *(unsigned char *)(a1 + 744) = 0;
  *(unsigned char *)(a1 + 768) = 0;
  return a1;
}

void sub_100022220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  int v8 = *(std::__shared_weak_count **)(v2 + 304);
  if (v8) {
    sub_100006AE0(v8);
  }
  sub_100006A84(v5, *(void **)(v2 + 280));
  int v9 = *(std::__shared_weak_count **)(v2 + 264);
  if (v9) {
    sub_100006AE0(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(v2 + 248);
  if (v10) {
    sub_100006AE0(v10);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v2 + 232);
  if (v11) {
    sub_100006AE0(v11);
  }
  sub_1000222F0(v4, *(void **)(v2 + 208));
  sub_1000223A0((void ***)va);
  if (*(char *)(v2 + 175) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 151) < 0) {
    operator delete(*(void **)(v2 + 128));
  }
  if (*(char *)(v2 + 127) < 0) {
    operator delete(*(void **)(v2 + 104));
  }
  if (*(char *)(v2 + 103) < 0) {
    operator delete(*(void **)(v2 + 80));
  }
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*(void **)(v2 + 56));
  }
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v6);
  }
  siri::dialogengine::ValidationBase::~ValidationBase((siri::dialogengine::ValidationBase *)v2);
  _Unwind_Resume(a1);
}

void sub_1000222F0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000222F0(a1, *a2);
    sub_1000222F0(a1, a2[1]);
    sub_10002234C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10002234C(uint64_t a1)
{
  sub_10000A3E0(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_1000223A0(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = (void (***)(void))**a1;
  if (v2)
  {
    uint64_t v4 = (void (***)(void))v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 42;
      long long v7 = v4 - 42;
      do
      {
        (**v7)(v7);
        v6 -= 42;
        BOOL v8 = v7 == v2;
        v7 -= 42;
      }
      while (!v8);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_100022460(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1000224E8(result, a4);
    uint64_t result = (void *)sub_10002258C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1000224C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100022808(&a9);
  _Unwind_Resume(a1);
}

char *sub_1000224E8(void *a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_100003974();
  }
  uint64_t result = (char *)sub_100022540((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

void *sub_100022540(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_1000035CC();
  }
  return operator new(88 * a2);
}

uint64_t sub_10002258C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_100022614(a4 + v7, a2 + v7);
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1000225F8(_Unwind_Exception *exception_object)
{
  if (v3) {
    sub_100062B08(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100022614(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100003600((unsigned char *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v5;
  }
  uint64_t v6 = (unsigned char *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_100003600(v6, *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)uint64_t v6 = v7;
  }
  *(void *)a1 = off_10007CE58;
  BOOL v8 = (unsigned char *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_100003600(v8, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)BOOL v8 = v9;
  }
  return a1;
}

void sub_100022708(_Unwind_Exception *a1)
{
  siri::dialogengine::LineNumberBase::~LineNumberBase(v1);
  _Unwind_Resume(a1);
}

void sub_100022734(void **this)
{
  *this = off_10007CE58;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  siri::dialogengine::LineNumberBase::~LineNumberBase((siri::dialogengine::LineNumberBase *)this);
}

void sub_100022794(void **this)
{
  *this = off_10007CE58;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  siri::dialogengine::LineNumberBase::~LineNumberBase((siri::dialogengine::LineNumberBase *)this);
  operator delete();
}

void sub_100022808(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 88;
      long long v7 = v4 - 88;
      BOOL v8 = v4 - 88;
      do
      {
        long long v9 = *(void (***)(char *))v8;
        v8 -= 88;
        (*v9)(v7);
        v6 -= 88;
        BOOL v10 = v7 == v2;
        long long v7 = v8;
      }
      while (!v10);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1000228C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_100022460((void *)v4, *(void *)v6, *(void *)(v6 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
      *(unsigned char *)(v4 + 24) = *(unsigned char *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_100022998((uint64_t)v8);
  return v4;
}

void sub_100022984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100022998(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000229D0(a1);
  }
  return a1;
}

void sub_1000229D0(uint64_t a1)
{
  int v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 4;
    uint64_t v3 = v1;
    sub_100022808(&v3);
  }
}

void sub_100022A1C(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        uint64_t v6 = v4;
        sub_100022808(&v6);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_100022A90(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_1000066CC((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    sub_100022B3C((uint64_t)a1, a4, (uint64_t)v10);
    sub_100006674(a1, v11, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_100022C20((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_100022B3C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x80uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_100022BA8(v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100022B90(_Unwind_Exception *a1)
{
  sub_100022C20(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_100022BA8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100003600(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 24) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *((void *)__dst + 6) = __dst + 56;
  *((void *)__dst + 11) = 0;
  *((void *)__dst + 10) = 0;
  *((void *)__dst + 9) = __dst + 80;
  return __dst;
}

void sub_100022C20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100022C78((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_100022C78(uint64_t a1)
{
  sub_100022CE8(a1 + 72, *(void **)(a1 + 80));
  sub_100022CE8(a1 + 48, *(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_100022CE8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100022CE8(a1, *a2);
    sub_100022CE8(a1, a2[1]);
    (*(void (**)(void))a2[4])();
    operator delete(a2);
  }
}

uint64_t *sub_100022D78(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)sub_100022E0C((uint64_t)a1, &v10);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    long long v7 = v5;
    sub_100022EA0((uint64_t)a1, a3, (uint64_t)v9);
    sub_100006674(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    sub_100022F0C((uint64_t)v9, 0);
  }
  return v6;
}

void *sub_100022E0C(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  long long v3 = *(void **)(a1 + 8);
  if (v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v3;
        if (!siri::dialogengine::operator<()) {
          break;
        }
        long long v3 = (void *)*v5;
        uint64_t v4 = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      if (!siri::dialogengine::operator<()) {
        break;
      }
      uint64_t v4 = v5 + 1;
      long long v3 = (void *)v5[1];
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return v4;
}

uint64_t sub_100022EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x78uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_100022614((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100022EF4(_Unwind_Exception *a1)
{
  sub_100022F0C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100022F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void (****)(void))a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      (*v2[4])();
    }
    operator delete(v2);
  }
}

uint64_t *sub_100022F84(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      long long v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      long long v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_100022FF8(v6, a2);
  return v3;
}

uint64_t *sub_100022FF8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  long long v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      long long v3 = a2;
      goto LABEL_7;
    }
    do
    {
      long long v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  long long v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      long long v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      long long v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      unint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      long long v7 = *(uint64_t **)(*v7 + 8);
    }
    uint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      BOOL v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *long long v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        void v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        BOOL v16 = v7;
      }
      else
      {
        uint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      long long v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *long long v24 = v23;
      goto LABEL_72;
    }
    BOOL v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    unint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      unint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    long long v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    long long v7 = *(uint64_t **)v12;
  }
  long long v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  int v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    unint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    int v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    long long v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  long long v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void sub_10002337C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10002337C(a1, *a2);
    sub_10002337C(a1, a2[1]);
    sub_100022C78((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1000233D8(unint64_t a1, uint64_t a2)
{
  sub_100024BD8((uint64_t)v13);
  sub_1000042E0(v14, (uint64_t)"<th", 3);
  if (a1 >= 2)
  {
    sub_1000042E0(v14, (uint64_t)" colspan=\"", 10);
    uint64_t v4 = (void *)std::ostream::operator<<();
    sub_1000042E0(v4, (uint64_t)"\"", 1);
  }
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    uint64_t v6 = sub_1000042E0(v14, (uint64_t)" class=\"", 8);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    uint64_t v10 = sub_1000042E0(v6, v8, v9);
    sub_1000042E0(v10, (uint64_t)"\"", 1);
  }
  sub_1000042E0(v14, (uint64_t)">", 1);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1000235F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100002BF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10002360C(std::string *a1@<X8>)
{
  std::operator+<char>();
  uint64_t v2 = std::string::append(&v3, " -->\n");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_100023680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10002369C@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  sub_100003470(a4, "<td");
  if (a1 >= 2)
  {
    std::to_string(&v26, a1);
    uint64_t v8 = std::string::insert(&v26, 0, " colspan=\"");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v27, "\"");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    int64_t v29 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v29 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if (v29 >= 0) {
      std::string::size_type v13 = HIBYTE(v29);
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(a4, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v29) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
  if (a2 >= 2)
  {
    std::to_string(&v26, a2);
    uint64_t v14 = std::string::insert(&v26, 0, " rowspan=\"");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    BOOL v16 = std::string::append(&v27, "\"");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    int64_t v29 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (v29 >= 0) {
      uint64_t v18 = __p;
    }
    else {
      uint64_t v18 = (void **)__p[0];
    }
    if (v29 >= 0) {
      std::string::size_type v19 = HIBYTE(v29);
    }
    else {
      std::string::size_type v19 = (std::string::size_type)__p[1];
    }
    std::string::append(a4, (const std::string::value_type *)v18, v19);
    if (SHIBYTE(v29) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v20 = *(unsigned __int8 *)(a3 + 23);
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = *(void *)(a3 + 8);
  }
  if (v20)
  {
    std::operator+<char>();
    BOOL v21 = std::string::append(&v27, "\"");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    int64_t v29 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v29 >= 0) {
      uint64_t v23 = __p;
    }
    else {
      uint64_t v23 = (void **)__p[0];
    }
    if (v29 >= 0) {
      std::string::size_type v24 = HIBYTE(v29);
    }
    else {
      std::string::size_type v24 = (std::string::size_type)__p[1];
    }
    std::string::append(a4, (const std::string::value_type *)v23, v24);
    if (SHIBYTE(v29) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
  return std::string::append(a4, ">");
}

void sub_100023908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000239B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, std::string *a6@<X8>)
{
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a6, "\n  ");
  if (a5) {
    std::string::append(a6, "<span title=\"Multiple Allowed\">&equiv;</span>&nbsp;");
  }
  sub_100024EB0((uint64_t *)a1, &v65);
  uint64_t v12 = std::string::insert(&v65, 0, "<b>");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v66, "</b><br/>\n");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t v68 = v14->__r_.__value_.__r.__words[2];
  long long v67 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v68 >= 0) {
    BOOL v16 = (const std::string::value_type *)&v67;
  }
  else {
    BOOL v16 = (const std::string::value_type *)v67;
  }
  if (v68 >= 0) {
    std::string::size_type v17 = HIBYTE(v68);
  }
  else {
    std::string::size_type v17 = *((void *)&v67 + 1);
  }
  std::string::append(a6, v16, v17);
  if (SHIBYTE(v68) < 0) {
    operator delete((void *)v67);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  int v18 = *(char *)(a1 + 23);
  if (v18 < 0)
  {
    if (*(void *)(a1 + 8) != 3)
    {
LABEL_24:
      if (*a3 == a3[1]) {
        return;
      }
      uint64_t v20 = sub_100003470(&v66, "Variants:");
      sub_100024FF8((uint64_t)v20, (uint64_t)qword_100080688);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      sub_100024EB0(a4, &v66);
      if (*((char *)a4 + 23) < 0) {
        operator delete((void *)*a4);
      }
      *(std::string *)a4 = v66;
      uint64_t v21 = *a3;
      uint64_t v22 = a3[1];
      if (*a3 != v22)
      {
        do
        {
          sub_100024EB0((uint64_t *)v21, &v66);
          if (*(char *)(v21 + 23) < 0) {
            operator delete(*(void **)v21);
          }
          long long v23 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
          *(void *)(v21 + 16) = *((void *)&v66.__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v21 = v23;
          unsigned __int8 v24 = *((unsigned char *)a4 + 23);
          if ((char)v24 < 0)
          {
            if (!a4[1]) {
              goto LABEL_56;
            }
          }
          else if (!*((unsigned char *)a4 + 23))
          {
            goto LABEL_56;
          }
          uint64_t v25 = *(unsigned __int8 *)(v21 + 23);
          if ((v25 & 0x80u) == 0) {
            uint64_t v26 = *(unsigned __int8 *)(v21 + 23);
          }
          else {
            uint64_t v26 = *(void *)(v21 + 8);
          }
          if ((v24 & 0x80u) == 0) {
            uint64_t v27 = *((unsigned __int8 *)a4 + 23);
          }
          else {
            uint64_t v27 = a4[1];
          }
          if (v26 == v27)
          {
            if ((v24 & 0x80u) == 0) {
              uint64_t v28 = (unsigned __int8 *)a4;
            }
            else {
              uint64_t v28 = (unsigned __int8 *)*a4;
            }
            if ((v25 & 0x80) == 0)
            {
              if (*(unsigned char *)(v21 + 23))
              {
                uint64_t v29 = 0;
                while (*(unsigned __int8 *)(v21 + v29) == v28[v29])
                {
                  if (v25 == ++v29) {
                    goto LABEL_53;
                  }
                }
                goto LABEL_56;
              }
LABEL_53:
              sub_100024FF8(v21, (uint64_t)qword_1000806B8);
              if (*(char *)(v21 + 23) < 0) {
                operator delete(*(void **)v21);
              }
              long long v30 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
              *(void *)(v21 + 16) = *((void *)&v66.__r_.__value_.__l + 2);
              *(_OWORD *)uint64_t v21 = v30;
              goto LABEL_56;
            }
            if (!memcmp(*(const void **)v21, v28, *(void *)(v21 + 8))) {
              goto LABEL_53;
            }
          }
LABEL_56:
          v21 += 24;
        }
        while (v21 != v22);
      }
      sub_100003470(&v65, ", ");
      siri::dialogengine::StringJoin();
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if (v68 >= 0) {
        size_t v31 = HIBYTE(v68);
      }
      else {
        size_t v31 = *((void *)&v67 + 1);
      }
      char v32 = &v60;
      sub_100008CC4((uint64_t)&v60, v31 + 1);
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        char v32 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if (v31)
      {
        if (v68 >= 0) {
          long long v33 = &v67;
        }
        else {
          long long v33 = (long long *)v67;
        }
        memmove(v32, v33, v31);
      }
      *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v31) = 32;
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v34 = &v66;
      }
      else {
        long long v34 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v66.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v60, (const std::string::value_type *)v34, size);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      std::string::size_type v62 = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      sub_100024FF8((uint64_t)__p, (uint64_t)qword_1000806A0);
      uint64_t v38 = std::string::insert(&v63, 0, "  ");
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      uint64_t v40 = std::string::append(&v64, "\n");
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v42 = &v65;
      }
      else {
        long long v42 = (std::string *)v65.__r_.__value_.__r.__words[0];
      }
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v43 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v43 = v65.__r_.__value_.__l.__size_;
      }
      goto LABEL_81;
    }
    a1 = *(void *)a1;
  }
  else if (v18 != 3)
  {
    goto LABEL_24;
  }
  if (*(_WORD *)a1 != 28225 || *(unsigned char *)(a1 + 2) != 121) {
    goto LABEL_24;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a2 + 23))
  {
    return;
  }
  std::string v44 = sub_100003470(&v66, "Default:");
  sub_100024FF8((uint64_t)v44, (uint64_t)qword_100080688);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  sub_100024EB0((uint64_t *)a2, &v66);
  if ((*((char *)a4 + 23) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)a4 + 23)) {
      goto LABEL_116;
    }
LABEL_106:
    sub_100024EB0(a4, &v64);
    int v45 = std::string::insert(&v64, 0, " - ");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v47 = &v65;
    }
    else {
      std::string::size_type v47 = (std::string *)v65.__r_.__value_.__r.__words[0];
    }
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v48 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v48 = v65.__r_.__value_.__l.__size_;
    }
    std::string::append(&v66, (const std::string::value_type *)v47, v48);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    goto LABEL_116;
  }
  if (a4[1]) {
    goto LABEL_106;
  }
LABEL_116:
  if (v68 >= 0) {
    size_t v49 = HIBYTE(v68);
  }
  else {
    size_t v49 = *((void *)&v67 + 1);
  }
  uint64_t v50 = &v60;
  sub_100008CC4((uint64_t)&v60, v49 + 1);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v50 = (std::string *)v60.__r_.__value_.__r.__words[0];
  }
  if (v49)
  {
    if (v68 >= 0) {
      uint64_t v51 = &v67;
    }
    else {
      uint64_t v51 = (long long *)v67;
    }
    memmove(v50, v51, v49);
  }
  *(_WORD *)((char *)&v50->__r_.__value_.__l.__data_ + v49) = 32;
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v52 = &v66;
  }
  else {
    std::string v52 = (std::string *)v66.__r_.__value_.__r.__words[0];
  }
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v53 = v66.__r_.__value_.__l.__size_;
  }
  uint64_t v54 = std::string::append(&v60, (const std::string::value_type *)v52, v53);
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  std::string::size_type v62 = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  sub_100024FF8((uint64_t)__p, (uint64_t)qword_1000806A0);
  char v56 = std::string::insert(&v63, 0, "  ");
  long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  size_t v58 = std::string::append(&v64, "\n");
  long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v42 = &v65;
  }
  else {
    long long v42 = (std::string *)v65.__r_.__value_.__r.__words[0];
  }
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v43 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v43 = v65.__r_.__value_.__l.__size_;
  }
LABEL_81:
  std::string::append(a6, (const std::string::value_type *)v42, v43);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete((void *)v67);
  }
}

void sub_10002408C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v41 - 105) < 0) {
    operator delete(*(void **)(v41 - 128));
  }
  if (*(char *)(v41 - 73) < 0) {
    operator delete(*(void **)(v41 - 96));
  }
  if (*(char *)(v40 + 23) < 0) {
    operator delete(*(void **)v40);
  }
  _Unwind_Resume(exception_object);
}

void sub_100024224(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      uint64_t v6 = *(siri::dialogengine::PatternSchemaUsage **)v2;
      uint64_t v5 = *(std::__shared_weak_count **)(v2 + 8);
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(&v18, 0, sizeof(v18));
      switch(siri::dialogengine::PatternSchemaUsage::GetUsage(v6))
      {
        case 1u:
          sub_100003470(&__p, "Required");
          sub_100025224((uint64_t)&__p, &v17);
          goto LABEL_10;
        case 2u:
          sub_100003470(&__p, "Default On");
          sub_100025224((uint64_t)&__p, &v17);
          goto LABEL_10;
        case 3u:
          sub_100003470(&__p, "Default Off");
          sub_100025224((uint64_t)&__p, &v17);
          goto LABEL_10;
        case 4u:
          sub_100003470(&__p, "Not Allowed");
          sub_100025224((uint64_t)&__p, &v17);
LABEL_10:
          if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v18.__r_.__value_.__l.__data_);
          }
          std::string v18 = v17;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          break;
        default:
          std::string::assign(&v18, (const std::string::value_type *)&unk_10006DFE2);
          break;
      }
      uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(a2 + 8);
      }
      if (v7)
      {
        std::string::append((std::string *)a2, "<br/>");
        siri::dialogengine::PatternSchemaUsage::GetCondition((uint64_t *)&v17, v6);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type size = v17.__r_.__value_.__l.__size_;
          operator delete(v17.__r_.__value_.__l.__data_);
          if (size) {
            goto LABEL_22;
          }
        }
        else if (*((unsigned char *)&v17.__r_.__value_.__s + 23))
        {
          goto LABEL_22;
        }
        std::string::append((std::string *)a2, "Else:<br/>");
      }
LABEL_22:
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v9 = &v18;
      }
      else {
        long long v9 = (std::string *)v18.__r_.__value_.__r.__words[0];
      }
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v10 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v10 = v18.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)a2, (const std::string::value_type *)v9, v10);
      siri::dialogengine::PatternSchemaUsage::GetCondition((uint64_t *)&v17, v6);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v11 = v17.__r_.__value_.__l.__size_;
        operator delete(v17.__r_.__value_.__l.__data_);
        if (!v11) {
          goto LABEL_42;
        }
      }
      else if (!*((unsigned char *)&v17.__r_.__value_.__s + 23))
      {
        goto LABEL_42;
      }
      siri::dialogengine::PatternSchemaUsage::GetCondition((uint64_t *)&__p, v6);
      uint64_t v12 = std::string::insert(&__p, 0, "<br/>If ");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v17;
      }
      else {
        uint64_t v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v15 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v15 = v17.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)a2, (const std::string::value_type *)v14, v15);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_42:
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v18.__r_.__value_.__l.__data_);
        if (!v5) {
          goto LABEL_45;
        }
LABEL_44:
        sub_100006AE0(v5);
        goto LABEL_45;
      }
      if (v5) {
        goto LABEL_44;
      }
LABEL_45:
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void sub_100024510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (v29) {
    sub_100006AE0(v29);
  }
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000245B4(unint64_t a1, uint64_t *a2)
{
  sub_100024BD8((uint64_t)v21);
  sub_100003470(v18, (char *)&unk_10006DFE2);
  sub_10002369C(1uLL, a1, (uint64_t)v18, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  sub_1000042E0(v22, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (*a2 != a2[1])
  {
    uint64_t v6 = sub_1000042E0(v22, (uint64_t)"\n", 1);
    sub_1000042E0(v6, (uint64_t)"<ul>\n", 5);
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    if (*a2 != v8)
    {
      do
      {
        long long v9 = sub_1000042E0(v22, (uint64_t)"  <li>", 6);
        int v10 = *(char *)(v7 + 23);
        if (v10 >= 0) {
          uint64_t v11 = v7;
        }
        else {
          uint64_t v11 = *(void *)v7;
        }
        if (v10 >= 0) {
          uint64_t v12 = *(unsigned __int8 *)(v7 + 23);
        }
        else {
          uint64_t v12 = *(void *)(v7 + 8);
        }
        long long v13 = sub_1000042E0(v9, v11, v12);
        sub_1000042E0(v13, (uint64_t)"</li>\n", 6);
        v7 += 24;
      }
      while (v7 != v8);
    }
    sub_1000042E0(v22, (uint64_t)"</ul>\n", 6);
  }
  sub_100003470(&__p, "</td>\n");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &__p;
  }
  else {
    uint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  sub_1000042E0(v22, (uint64_t)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  *(void *)((char *)v21
  v22[0] = v16;
  if (v23 < 0) {
    operator delete((void *)v22[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100024878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_100002BF0((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void *sub_1000248DC@<X0>(void *a1@<X1>, void **a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x48uLL);
  uint64_t result = sub_100024940(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10002492C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100024940(void *a1, void *a2, void **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10007CE90;
  sub_100024A54((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1000249A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000249B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10007CE90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000249D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10007CE90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100024A28(uint64_t a1)
{
  sub_100024AD4((uint64_t)&v1, a1 + 24);
}

void sub_100024A54(uint64_t a1, uint64_t a2, void *a3, void **a4)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  v5[0] = *a3;
  v5[1] = v4;
  *a3 = 0;
  a3[1] = 0;
  sub_100015FDC(a2, (uint64_t)v5, a4);
  if (v4)
  {
    sub_100006AE0(v4);
  }
}

void sub_100024ABC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100006AE0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100024AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 32);
  if (v3) {
    sub_100006AE0(v3);
  }
  uint64_t v4 = (void **)a2;
  sub_100008EDC(&v4);
}

_OWORD *sub_100024B14(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_1000066CC((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x48uLL);
    v12[1] = a1 + 1;
    long long v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    *long long v9 = 0;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    char v13 = 1;
    sub_100006674(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_1000069D8((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t sub_100024BD8(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  *(void *)(a1 + 8) = 0;
  char v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 24));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v6;
  *(void *)a1 = v8;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_100024E88(_Unwind_Exception *a1)
{
}

void sub_100024EB0(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  sub_100003470(a2, (char *)&unk_10006DFE2);
  BOOL v4 = *((char *)a1 + 23) < 0;
  uint64_t v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = a1[1];
  }
  if (v5)
  {
    unint64_t v6 = 0;
    do
    {
      if (v6)
      {
        uint64_t v7 = v4 ? (uint64_t *)*a1 : a1;
        __darwin_ct_rune_t v8 = *((char *)v7 + v6);
        if (v8 < 0 ? __maskrune(v8, 0x8000uLL) : _DefaultRuneLocale.__runetype[v8] & 0x8000)
        {
          uint64_t v10 = *((char *)a1 + 23) >= 0 ? (uint64_t)a1 : *a1;
          __darwin_ct_rune_t v11 = *(char *)(v10 + v6 - 1);
          if (v11 < 0 ? __maskrune(v11, 0x1000uLL) : _DefaultRuneLocale.__runetype[v11] & 0x1000) {
            std::string::append(a2, " ");
          }
        }
      }
      if (*((char *)a1 + 23) >= 0) {
        char v13 = a1;
      }
      else {
        char v13 = (uint64_t *)*a1;
      }
      std::string::push_back(a2, *((unsigned char *)v13 + v6++));
      BOOL v4 = *((char *)a1 + 23) < 0;
      unint64_t v14 = *((unsigned __int8 *)a1 + 23);
      if ((v14 & 0x80u) != 0) {
        unint64_t v14 = a1[1];
      }
    }
    while (v6 < v14);
  }
}

void sub_100024FDC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100024FF8(uint64_t a1, uint64_t a2)
{
  sub_100024BD8((uint64_t)v17);
  sub_1000042E0(v18, (uint64_t)"<span", 5);
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    uint64_t v5 = sub_1000042E0(v18, (uint64_t)" class=\"", 8);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    long long v9 = sub_1000042E0(v5, v7, v8);
    sub_1000042E0(v9, (uint64_t)"\"", 1);
  }
  uint64_t v10 = sub_1000042E0(v18, (uint64_t)">", 1);
  int v11 = *(char *)(a1 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = *(void *)a1;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a1 + 8);
  }
  unint64_t v14 = sub_1000042E0(v10, v12, v13);
  sub_1000042E0(v14, (uint64_t)"</span>", 7);
  std::stringbuf::str();
  *(void *)((char *)v17
  v18[0] = v15;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100025210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100002BF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100025224(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v12, "\" title=\"");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a1 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a1;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a1 + 8);
  }
  long long v9 = std::string::append(&v13, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  int v11 = std::string::append(&v14, "\" />");
  *a2 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_10002531C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100025368(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10007CEE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100025388(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10007CEE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000253DC(uint64_t a1)
{
  return sub_1000253E8(a1 + 24);
}

uint64_t sub_1000253E8(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 272);
  sub_100003B14(&v3);
  uint64_t v3 = (void **)(a1 + 248);
  sub_100003B14(&v3);
  uint64_t v3 = (void **)(a1 + 224);
  sub_100003B14(&v3);
  uint64_t v3 = (void **)(a1 + 200);
  sub_100008EDC(&v3);
  uint64_t v3 = (void **)(a1 + 176);
  sub_100008EDC(&v3);
  uint64_t v3 = (void **)(a1 + 152);
  sub_100003B14(&v3);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  uint64_t v3 = (void **)(a1 + 72);
  sub_100008EDC(&v3);
  uint64_t v3 = (void **)(a1 + 48);
  sub_100008EDC(&v3);
  uint64_t v3 = (void **)(a1 + 24);
  sub_100008EDC(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1000254D4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  while (1)
  {
    uint64_t v4 = *(siri::dialogengine::PatternSchemaUsage **)v1;
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (siri::dialogengine::PatternSchemaUsage::GetUsage(v4) == 1
      || siri::dialogengine::PatternSchemaUsage::GetUsage(v4) == 2)
    {
      break;
    }
    if (v3) {
      sub_100006AE0(v3);
    }
    v1 += 16;
    if (v1 == v2) {
      return 0;
    }
  }
  if (v3) {
    sub_100006AE0(v3);
  }
  return 1;
}

void sub_100025570(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100006AE0(v1);
  }
  _Unwind_Resume(exception_object);
}

void **sub_100025588(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666) {
      sub_100003974();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    std::string v14 = (char *)sub_100027A98((uint64_t)result, v13);
    uint64_t v15 = &v14[40 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[40 * v16];
    uint64_t v17 = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v15 = *a2;
    *((void *)v15 + 2) = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(_OWORD *)(v15 + 24) = *(long long *)((char *)a2 + 24);
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    v18[2] = v15 + 40;
    sub_100027A20(a1, v18);
    uint64_t v9 = a1[1];
    uint64_t result = sub_100027C74(v18);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(_OWORD *)(v7 + 24) = *(long long *)((char *)a2 + 24);
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    uint64_t v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_1000256BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100027C74((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000256D0(uint64_t a1, uint64_t a2, siri::dialogengine::PatternSchema **a3, long long **a4)
{
  sub_100003470(&v171, "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n");
  std::operator+<char>();
  unint64_t v6 = std::string::append(&__dst, "\">\n");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v171, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::PatternSchema::GetRequiredParameters((uint64_t *)&__p, *a3);
  std::string::size_type v10 = __p.__r_.__value_.__r.__words[2];
  sub_100006A84((uint64_t)&__p, (void *)__p.__r_.__value_.__l.__size_);
  if (v10)
  {
    std::string::append(&v171, "  <parameters>\n");
    v158 = a4;
    siri::dialogengine::PatternSchema::GetRequiredParameters((uint64_t *)&__dst, *a3);
    std::string::size_type v11 = __dst.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[1])
    {
      do
      {
        sub_1000067D8(&__p, (long long *)(v11 + 32));
        siri::dialogengine::PropertyBase::GetType((uint64_t *)&v172, v176);
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v172.__r_.__value_.__l.__size_ != 15)
          {
            operator delete(v172.__r_.__value_.__l.__data_);
            goto LABEL_31;
          }
          BOOL v14 = *(void *)v172.__r_.__value_.__l.__data_ != 0x4F2E676F6C616964
             || *(void *)(v172.__r_.__value_.__r.__words[0] + 7) != 0x5D5B7463656A624FLL;
          operator delete(v172.__r_.__value_.__l.__data_);
          if (v14) {
            goto LABEL_31;
          }
        }
        else
        {
          if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) != 15) {
            goto LABEL_31;
          }
          BOOL v12 = v172.__r_.__value_.__r.__words[0] == 0x4F2E676F6C616964
             && *(std::string::size_type *)((char *)v172.__r_.__value_.__r.__words + 7) == 0x5D5B7463656A624FLL;
          if (!v12) {
            goto LABEL_31;
          }
        }
        std::string::append(&v171, "    <!-- Replace the following empty type=\"\" with the type of your array -->\n");
LABEL_31:
        siri::dialogengine::PropertyBase::GetName((uint64_t *)&v170, v176);
        uint64_t v15 = std::string::insert(&v170, 0, "    <parameter name=\"");
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v174.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        uint64_t v17 = std::string::append(&v174, "\" type=\"\"/>\n");
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v172.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v19 = &v172;
        }
        else {
          char v19 = (std::string *)v172.__r_.__value_.__r.__words[0];
        }
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v20 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v20 = v172.__r_.__value_.__l.__size_;
        }
        std::string::append(&v171, (const std::string::value_type *)v19, v20);
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v172.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v174.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v170.__r_.__value_.__l.__data_);
        }
        if (v177) {
          sub_100006AE0(v177);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v21 = *(std::string **)(v11 + 8);
        if (v21)
        {
          do
          {
            uint64_t v22 = v21;
            uint64_t v21 = (std::string *)v21->__r_.__value_.__r.__words[0];
          }
          while (v21);
        }
        else
        {
          do
          {
            uint64_t v22 = *(std::string **)(v11 + 16);
            BOOL v12 = v22->__r_.__value_.__r.__words[0] == v11;
            std::string::size_type v11 = (std::string::size_type)v22;
          }
          while (!v12);
        }
        std::string::size_type v11 = (std::string::size_type)v22;
      }
      while (v22 != (std::string *)&__dst.__r_.__value_.__r.__words[1]);
    }
    sub_100006A84((uint64_t)&__dst, (void *)__dst.__r_.__value_.__l.__size_);
    siri::dialogengine::PatternSchema::GetComputedParameters((uint64_t *)&__dst, *a3);
    std::string::size_type v23 = __dst.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[1])
    {
      do
      {
        sub_1000067D8(&__p, (long long *)(v23 + 32));
        siri::dialogengine::PropertyBase::GetName((uint64_t *)&v168, v176);
        unsigned __int8 v24 = std::string::insert(&v168, 0, "    <parameter name=\"");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        uint64_t v26 = std::string::append(&__str, "\" type=\"");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v170.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::PropertyBase::GetType((uint64_t *)&v165, v176);
        if ((v167 & 0x80u) == 0) {
          uint64_t v28 = (const std::string::value_type *)&v165;
        }
        else {
          uint64_t v28 = (const std::string::value_type *)v165;
        }
        if ((v167 & 0x80u) == 0) {
          std::string::size_type v29 = v167;
        }
        else {
          std::string::size_type v29 = (std::string::size_type)v166;
        }
        long long v30 = std::string::append(&v170, v28, v29);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v174.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        char v32 = std::string::append(&v174, "\"/>\n");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v172.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v34 = &v172;
        }
        else {
          long long v34 = (std::string *)v172.__r_.__value_.__r.__words[0];
        }
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v35 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v35 = v172.__r_.__value_.__l.__size_;
        }
        std::string::append(&v171, (const std::string::value_type *)v34, v35);
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v172.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v174.__r_.__value_.__l.__data_);
        }
        if ((char)v167 < 0) {
          operator delete(v165);
        }
        if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v170.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v168.__r_.__value_.__l.__data_);
        }
        if (v177) {
          sub_100006AE0(v177);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v36 = *(std::string **)(v23 + 8);
        if (v36)
        {
          do
          {
            long long v37 = v36;
            uint64_t v36 = (std::string *)v36->__r_.__value_.__r.__words[0];
          }
          while (v36);
        }
        else
        {
          do
          {
            long long v37 = *(std::string **)(v23 + 16);
            BOOL v12 = v37->__r_.__value_.__r.__words[0] == v23;
            std::string::size_type v23 = (std::string::size_type)v37;
          }
          while (!v12);
        }
        std::string::size_type v23 = (std::string::size_type)v37;
      }
      while (v37 != (std::string *)&__dst.__r_.__value_.__r.__words[1]);
    }
    sub_100006A84((uint64_t)&__dst, (void *)__dst.__r_.__value_.__l.__size_);
    std::string::append(&v171, "  </parameters>\n\n");
    a4 = v158;
  }
  std::string::append(&v171, "  <response>\n");
  std::string::append(&v171, "    <hide-redacted-elements>false</hide-redacted-elements>\n");
  uint64_t v38 = *a4;
  uint64_t v157 = a4[1];
  if (*a4 != v157)
  {
    while (1)
    {
      uint64_t v159 = v38;
      sub_1000067D8(&__dst, v38);
      sub_100003470(&v170, (char *)&unk_10006DFE2);
      siri::dialogengine::PatternSchemaComponent::GetDefaultVariant((uint64_t *)&__p, v163);
      siri::dialogengine::PatternSchemaComponent::GetNameWithVariant();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100003470(&__p, "Button");
      if (siri::dialogengine::StringStartsWith())
      {
        sub_100003470(&v172, "ButtonItem");
        int v39 = siri::dialogengine::StringEndsWith();
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v172.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        int v39 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v39) {
        goto LABEL_100;
      }
LABEL_101:
      sub_100003470(&__p, "Any_");
      int v40 = siri::dialogengine::StringStartsWith();
      int v41 = v40;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v41) {
          goto LABEL_117;
        }
      }
      else if (!v40)
      {
        goto LABEL_117;
      }
      siri::dialogengine::PatternSchemaComponent::GetDefaultComponent((uint64_t *)&__p, v163);
      std::string::basic_string(&v172, &__str, 3uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v168);
      if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v42 = &v172;
      }
      else {
        long long v42 = (std::string *)v172.__r_.__value_.__r.__words[0];
      }
      if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v43 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v43 = v172.__r_.__value_.__l.__size_;
      }
      std::string v44 = std::string::append(&__p, (const std::string::value_type *)v42, v43);
      std::string::size_type v45 = v44->__r_.__value_.__r.__words[0];
      v174.__r_.__value_.__r.__words[0] = v44->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v174.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
      char v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      __str.__r_.__value_.__r.__words[0] = v45;
      __str.__r_.__value_.__l.__size_ = v174.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v174.__r_.__value_.__r.__words + 7);
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = v46;
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_117:
      BOOL v47 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      std::string::size_type v48 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v48 = __str.__r_.__value_.__l.__size_;
      }
      if (v48)
      {
        std::string::size_type v49 = 0;
        while (1)
        {
          uint64_t v50 = v47 ? (std::string *)__str.__r_.__value_.__r.__words[0] : &__str;
          __darwin_ct_rune_t v51 = v50->__r_.__value_.__s.__data_[v49];
          if (v49)
          {
            if (v51 < 0
               ? __maskrune(v50->__r_.__value_.__s.__data_[v49], 0x8000uLL)
               : _DefaultRuneLocale.__runetype[v51] & 0x8000)
            {
              break;
            }
          }
          if (v51 != 95) {
            goto LABEL_131;
          }
LABEL_132:
          ++v49;
          BOOL v47 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
          std::string::size_type v54 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v54 = __str.__r_.__value_.__l.__size_;
          }
          if (v49 >= v54) {
            goto LABEL_135;
          }
        }
        std::string::append(&v170, "-");
LABEL_131:
        std::string::value_type v53 = __tolower(v51);
        std::string::push_back(&v170, v53);
        goto LABEL_132;
      }
LABEL_135:
      siri::dialogengine::PatternSchemaComponent::GetFullUsage((uint64_t *)&__p, v163);
      int v55 = sub_1000254D4((uint64_t *)&__p);
      v172.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      sub_100008EDC((void ***)&v172);
      siri::dialogengine::PatternSchemaComponent::GetSupportingUsage((uint64_t *)&__p, v163);
      int v56 = sub_1000254D4((uint64_t *)&__p);
      v172.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      sub_100008EDC((void ***)&v172);
      siri::dialogengine::PatternSchemaComponent::GetFullOverrides((uint64_t *)&v168, v163);
      siri::dialogengine::PatternSchemaComponent::GetSupportingOverrides((uint64_t *)&v165, v163);
      sub_100003470(&v160, "            ");
      memset(&v172, 0, sizeof(v172));
      sub_100003470(&__p, "button");
      int v57 = siri::dialogengine::StringsEqual();
      int v58 = v57;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v58)
        {
LABEL_137:
          LODWORD(__p.__r_.__value_.__l.__data_) = 0;
          sub_100003470(&__p.__r_.__value_.__l.__size_, "action");
          LODWORD(v177) = 9;
          sub_100003470(v178, "label");
          int v59 = v56;
          sub_100029848((uint64_t *)&v172, &__p, &v179, 2uLL);
          for (uint64_t i = 0; i != -8; i -= 4)
          {
            if (SHIBYTE(v178[i + 2]) < 0) {
              operator delete((void *)v178[i]);
            }
          }
LABEL_141:
          int v56 = v59;
          goto LABEL_156;
        }
      }
      else if (v57)
      {
        goto LABEL_137;
      }
      sub_100003470(&__p, "long-item-text");
      int v61 = siri::dialogengine::StringsEqual();
      int v62 = v61;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v62) {
          goto LABEL_391;
        }
      }
      else if (v61)
      {
        goto LABEL_391;
      }
      sub_100003470(&__p, "primary-header-standard");
      int v63 = siri::dialogengine::StringsEqual();
      int v64 = v63;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v64) {
          goto LABEL_391;
        }
      }
      else if (v63)
      {
        goto LABEL_391;
      }
      sub_100003470(&__p, "simple-item-visual");
      int v65 = siri::dialogengine::StringsEqual();
      int v66 = v65;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v66)
        {
LABEL_153:
          LODWORD(__p.__r_.__value_.__l.__data_) = 10;
          sub_100003470(&__p.__r_.__value_.__l.__size_, "thumbnails");
          sub_100029848((uint64_t *)&v172, &__p, &v177, 1uLL);
          goto LABEL_154;
        }
      }
      else if (v65)
      {
        goto LABEL_153;
      }
      sub_100003470(&__p, "simple-item");
      int v137 = siri::dialogengine::StringStartsWith();
      int v138 = v137;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v138)
        {
LABEL_353:
          LODWORD(__p.__r_.__value_.__l.__data_) = 9;
          sub_100003470(&__p.__r_.__value_.__l.__size_, "text-1");
          sub_100029848((uint64_t *)&v172, &__p, &v177, 1uLL);
          if (SHIBYTE(v176) < 0) {
            operator delete((void *)__p.__r_.__value_.__l.__size_);
          }
          sub_100003470(&__p, "simple-item-player");
          int v139 = siri::dialogengine::StringsEqual();
          int v140 = v139;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (!v140) {
              goto LABEL_156;
            }
          }
          else if (!v139)
          {
            goto LABEL_156;
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = 3;
          sub_100003470(&__p.__r_.__value_.__l.__size_, "player");
          sub_100028308((uint64_t *)&v172, (uint64_t)&__p);
          goto LABEL_154;
        }
      }
      else if (v137)
      {
        goto LABEL_353;
      }
      sub_100003470(&__p, "fact-item");
      int v141 = siri::dialogengine::StringStartsWith();
      int v142 = v141;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v142)
        {
LABEL_361:
          LODWORD(__p.__r_.__value_.__l.__data_) = 9;
          sub_100003470(&__p.__r_.__value_.__l.__size_, "text-1");
          LODWORD(v177) = 5;
          sub_100003470(v178, "text-4");
          int v59 = v56;
          sub_100029848((uint64_t *)&v172, &__p, &v179, 2uLL);
          for (uint64_t j = 0; j != -8; j -= 4)
          {
            if (SHIBYTE(v178[j + 2]) < 0) {
              operator delete((void *)v178[j]);
            }
          }
          goto LABEL_141;
        }
      }
      else if (v141)
      {
        goto LABEL_361;
      }
      sub_100003470(&__p, "sash-standard");
      int v144 = siri::dialogengine::StringStartsWith();
      int v145 = v144;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v145)
        {
LABEL_369:
          LODWORD(__p.__r_.__value_.__l.__data_) = 7;
          sub_100003470(&__p.__r_.__value_.__l.__size_, "title");
          sub_100029848((uint64_t *)&v172, &__p, &v177, 1uLL);
          goto LABEL_154;
        }
      }
      else if (v144)
      {
        goto LABEL_369;
      }
      sub_100003470(&__p, "status-indicator-");
      int v146 = siri::dialogengine::StringStartsWith();
      int v147 = v146;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v147)
        {
LABEL_375:
          LODWORD(__p.__r_.__value_.__l.__data_) = 9;
          sub_100003470(&__p.__r_.__value_.__l.__size_, "text");
          sub_100029848((uint64_t *)&v172, &__p, &v177, 1uLL);
          goto LABEL_154;
        }
      }
      else if (v146)
      {
        goto LABEL_375;
      }
      sub_100003470(&__p, "summary-item-short-number");
      int v148 = siri::dialogengine::StringsEqual();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v148)
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 9;
        sub_100003470(&__p.__r_.__value_.__l.__size_, "number");
        LODWORD(v177) = 5;
        sub_100003470(v178, "text-2");
        int v59 = v56;
        sub_100029848((uint64_t *)&v172, &__p, &v179, 2uLL);
        for (uint64_t k = 0; k != -8; k -= 4)
        {
          if (SHIBYTE(v178[k + 2]) < 0) {
            operator delete((void *)v178[k]);
          }
        }
        goto LABEL_141;
      }
      sub_100003470(&__p, "summary-item-standard");
      int v150 = siri::dialogengine::StringsEqual();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v150) {
        goto LABEL_391;
      }
      sub_100003470(&__p, "system-text-clarification-title");
      int v151 = siri::dialogengine::StringsEqual();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v151)
      {
LABEL_391:
        LODWORD(__p.__r_.__value_.__l.__data_) = 9;
        sub_100003470(&__p.__r_.__value_.__l.__size_, "text-1");
        sub_100029848((uint64_t *)&v172, &__p, &v177, 1uLL);
LABEL_154:
        if (SHIBYTE(v176) < 0) {
          operator delete((void *)__p.__r_.__value_.__l.__size_);
        }
        goto LABEL_156;
      }
      sub_100003470(&__p, "table");
      int v152 = siri::dialogengine::StringsEqual();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v152)
      {
        int v153 = v56;
        LODWORD(__p.__r_.__value_.__l.__data_) = 8;
        sub_100003470(&__p.__r_.__value_.__l.__size_, "separator-lines");
        LODWORD(v177) = 2;
        sub_100003470(v178, "columns");
        int v179 = 2;
        sub_100003470(v180, "columns");
        int v181 = 6;
        sub_100003470(v182, "rows");
        int v183 = 6;
        sub_100003470(v184, "rows");
        sub_100029848((uint64_t *)&v172, &__p, &v185, 5uLL);
        for (uint64_t m = 0; m != -20; m -= 4)
        {
          if (SHIBYTE(v184[m + 2]) < 0) {
            operator delete((void *)v184[m]);
          }
        }
        int v56 = v153;
      }
LABEL_156:
      sub_100003470(&v161, (char *)&unk_10006DFE2);
      std::string::size_type v67 = v172.__r_.__value_.__l.__size_;
      if (v172.__r_.__value_.__r.__words[0] != v172.__r_.__value_.__l.__size_)
      {
        std::string::size_type v68 = v172.__r_.__value_.__r.__words[0] + 8;
        do
        {
          std::string::size_type v70 = v68 - 8;
          int data = *(_DWORD *)(v68 - 8);
          LODWORD(__p.__r_.__value_.__l.__data_) = data;
          if (*(char *)(v68 + 23) < 0)
          {
            sub_100003600(&__p.__r_.__value_.__s.__data_[8], *(void **)v68, *(void *)(v68 + 8));
            int data = (int)__p.__r_.__value_.__l.__data_;
          }
          else
          {
            long long v71 = *(_OWORD *)v68;
            std::string v176 = *(siri::dialogengine::PropertyBase **)(v68 + 16);
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v71;
          }
          sub_100028434(data, (uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v160, (uint64_t)&v174);
          if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v72 = &v174;
          }
          else {
            long long v72 = (std::string *)v174.__r_.__value_.__r.__words[0];
          }
          if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v73 = HIBYTE(v174.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v73 = v174.__r_.__value_.__l.__size_;
          }
          std::string::append(&v161, (const std::string::value_type *)v72, v73);
          if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v174.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v176) < 0) {
            operator delete((void *)__p.__r_.__value_.__l.__size_);
          }
          v68 += 32;
        }
        while (v70 + 32 != v67);
      }
      std::string::size_type v74 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v74 = v161.__r_.__value_.__l.__size_;
      }
      if (!v74)
      {
        if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v75 = HIBYTE(v160.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v75 = v160.__r_.__value_.__l.__size_;
        }
        sub_100008CC4((uint64_t)&v174, v75 + 31);
        if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v76 = &v174;
        }
        else {
          uint64_t v76 = (std::string *)v174.__r_.__value_.__r.__words[0];
        }
        if (v75)
        {
          if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v77 = &v160;
          }
          else {
            std::string::size_type v77 = (std::string *)v160.__r_.__value_.__r.__words[0];
          }
          memmove(v76, v77, v75);
        }
        strcpy((char *)v76 + v75, "<!-- Add required elements for ");
        if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v78 = &v170;
        }
        else {
          std::string v78 = (std::string *)v170.__r_.__value_.__r.__words[0];
        }
        if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v79 = HIBYTE(v170.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v79 = v170.__r_.__value_.__l.__size_;
        }
        uint64_t v80 = std::string::append(&v174, (const std::string::value_type *)v78, v79);
        int v81 = v56;
        long long v82 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v82;
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        std::string::size_type v83 = std::string::append(&__p, " here -->\n");
        std::string::size_type v84 = v83->__r_.__value_.__r.__words[0];
        v173[0] = v83->__r_.__value_.__l.__size_;
        *(void *)((char *)v173 + 7) = *(std::string::size_type *)((char *)&v83->__r_.__value_.__r.__words[1] + 7);
        char v85 = HIBYTE(v83->__r_.__value_.__r.__words[2]);
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v161.__r_.__value_.__l.__data_);
        }
        v161.__r_.__value_.__r.__words[0] = v84;
        v161.__r_.__value_.__l.__size_ = v173[0];
        *(std::string::size_type *)((char *)&v161.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v173 + 7);
        *((unsigned char *)&v161.__r_.__value_.__s + 23) = v85;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        int v56 = v81;
        if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v174.__r_.__value_.__l.__data_);
        }
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
      sub_10002A158((void ***)&__p);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v160.__r_.__value_.__l.__data_);
      }
      if (v55 != v56 || v168.__r_.__value_.__r.__words[0] == v168.__r_.__value_.__l.__size_ && v165 == v166)
      {
        std::operator+<char>();
        uint64_t v86 = std::string::append(&v172, "\">\n");
        long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v88 = &__p;
        }
        else {
          uint64_t v88 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v89 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v89 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(&v171, (const std::string::value_type *)v88, v89);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v172.__r_.__value_.__l.__data_);
          if (v55) {
            goto LABEL_264;
          }
        }
        else
        {
          if (!v55) {
            goto LABEL_265;
          }
LABEL_264:
          std::string::append(&v171, "      <level-of-detail>FULL</level-of-detail>\n");
        }
LABEL_265:
        if (v56) {
          std::string::append(&v171, "      <level-of-detail>SUPPORTING</level-of-detail>\n");
        }
        memset(&__p, 0, sizeof(__p));
        if (v55) {
          long long v106 = &v168;
        }
        else {
          long long v106 = (std::string *)&v165;
        }
        std::string::size_type v107 = (void *)v106->__r_.__value_.__r.__words[0];
        p_std::string::size_type size = &v168.__r_.__value_.__l.__size_;
        if (!v55) {
          p_std::string::size_type size = (std::string::size_type *)&v166;
        }
        sub_10002A1AC(&__p, v107, (void *)*p_size, (uint64_t)(*p_size - (void)v107) >> 4);
        std::string::size_type v110 = __p.__r_.__value_.__l.__size_;
        long long v109 = (siri::dialogengine::PatternSchemaOverride **)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
        {
          do
          {
            siri::dialogengine::PatternSchemaOverride::GetUsage((uint64_t *)&v172, *v109);
            int v111 = sub_1000254D4((uint64_t *)&v172);
            v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
            sub_100008EDC((void ***)&v174);
            siri::dialogengine::PatternSchemaOverride::GetIdioms((uint64_t *)&v172, *v109);
            std::string::size_type v112 = v172.__r_.__value_.__l.__size_;
            for (std::string::size_type n = v172.__r_.__value_.__r.__words[0]; n != v112; n += 24)
            {
              std::operator+<char>();
              std::string::size_type v114 = std::string::append(&v160, "</idioms>\n");
              long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
              v174.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v115;
              v114->__r_.__value_.__l.__size_ = 0;
              v114->__r_.__value_.__r.__words[2] = 0;
              v114->__r_.__value_.__r.__words[0] = 0;
              if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v116 = &v174;
              }
              else {
                v116 = (std::string *)v174.__r_.__value_.__r.__words[0];
              }
              if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v117 = HIBYTE(v174.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v117 = v174.__r_.__value_.__l.__size_;
              }
              std::string::append(&v171, (const std::string::value_type *)v116, v117);
              if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v174.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v160.__r_.__value_.__l.__data_);
              }
            }
            v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
            sub_100003B14((void ***)&v174);
            v109 += 2;
          }
          while (v109 != (siri::dialogengine::PatternSchemaOverride **)v110);
          siri::dialogengine::StringFromBool((uint64_t *)&v160, (siri::dialogengine *)(v111 ^ 1u), v118);
          std::string::size_type v119 = std::string::insert(&v160, 0, "      <is-hidden-on-idioms>");
          long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
          v174.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v120;
          v119->__r_.__value_.__l.__size_ = 0;
          v119->__r_.__value_.__r.__words[2] = 0;
          v119->__r_.__value_.__r.__words[0] = 0;
          long long v121 = std::string::append(&v174, "</is-hidden-on-idioms>\n");
          long long v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
          v172.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v122;
          v121->__r_.__value_.__l.__size_ = 0;
          v121->__r_.__value_.__r.__words[2] = 0;
          v121->__r_.__value_.__r.__words[0] = 0;
          if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v123 = &v172;
          }
          else {
            std::string::size_type v123 = (std::string *)v172.__r_.__value_.__r.__words[0];
          }
          if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v124 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v124 = v172.__r_.__value_.__l.__size_;
          }
          std::string::append(&v171, (const std::string::value_type *)v123, v124);
          if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v172.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v174.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v160.__r_.__value_.__l.__data_);
          }
        }
        std::string::append(&v171, "      <component-list>\n");
        std::string::append(&v171, "        <value>\n");
        std::operator+<char>();
        long long v125 = std::string::append(&v174, ">\n");
        long long v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
        v172.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v126;
        v125->__r_.__value_.__l.__size_ = 0;
        v125->__r_.__value_.__r.__words[2] = 0;
        v125->__r_.__value_.__r.__words[0] = 0;
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v127 = &v172;
        }
        else {
          long long v127 = (std::string *)v172.__r_.__value_.__r.__words[0];
        }
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v128 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v128 = v172.__r_.__value_.__l.__size_;
        }
        std::string::append(&v171, (const std::string::value_type *)v127, v128);
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v172.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v174.__r_.__value_.__l.__data_);
        }
        if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v129 = &v161;
        }
        else {
          long long v129 = (std::string *)v161.__r_.__value_.__r.__words[0];
        }
        if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v130 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v130 = v161.__r_.__value_.__l.__size_;
        }
        std::string::append(&v171, (const std::string::value_type *)v129, v130);
        std::operator+<char>();
        std::string::size_type v131 = std::string::append(&v174, ">\n");
        long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v172.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v133 = &v172;
        }
        else {
          int v133 = (std::string *)v172.__r_.__value_.__r.__words[0];
        }
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v134 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v134 = v172.__r_.__value_.__l.__size_;
        }
        std::string::append(&v171, (const std::string::value_type *)v133, v134);
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v172.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v174.__r_.__value_.__l.__data_);
        }
        std::string::append(&v171, "        </value>\n");
        std::string::append(&v171, "      </component-list>\n");
        std::string::append(&v171, "    </sections>\n");
        v172.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        sub_100008EDC((void ***)&v172);
        goto LABEL_338;
      }
      std::string::append(&v171, "    <groups>\n");
      std::operator+<char>();
      unsigned int v90 = std::string::append(&v172, "_group</id>\n");
      long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v92 = &__p;
      }
      else {
        uint64_t v92 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v93 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v93 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v171, (const std::string::value_type *)v92, v93);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v172.__r_.__value_.__l.__data_);
      }
      std::string::append(&v171, "      <components>\n");
      std::string::append(&v171, "        <value>\n");
      std::operator+<char>();
      unsigned __int8 v94 = std::string::append(&v172, ">\n");
      long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v95;
      v94->__r_.__value_.__l.__size_ = 0;
      v94->__r_.__value_.__r.__words[2] = 0;
      v94->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v96 = &__p;
      }
      else {
        char v96 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v97 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v97 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v171, (const std::string::value_type *)v96, v97);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v172.__r_.__value_.__l.__data_);
      }
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v98 = &v161;
      }
      else {
        std::string v98 = (std::string *)v161.__r_.__value_.__r.__words[0];
      }
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v99 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v99 = v161.__r_.__value_.__l.__size_;
      }
      std::string::append(&v171, (const std::string::value_type *)v98, v99);
      std::operator+<char>();
      long long v100 = std::string::append(&v172, ">\n");
      long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v101;
      v100->__r_.__value_.__l.__size_ = 0;
      v100->__r_.__value_.__r.__words[2] = 0;
      v100->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v102 = &__p;
      }
      else {
        std::string::size_type v102 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v103 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v103 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v171, (const std::string::value_type *)v102, v103);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v172.__r_.__value_.__l.__data_);
      }
      std::string::append(&v171, "        </value>\n");
      std::string::append(&v171, "      </components>\n");
      std::string::append(&v171, "    </groups>\n");
      if ((v55 & 1) == 0 && v168.__r_.__value_.__r.__words[0] == v168.__r_.__value_.__l.__size_) {
        goto LABEL_261;
      }
      sub_100003470(&v172, "FULL");
      sub_100027CF0((siri::dialogengine::PatternSchemaOverride ***)&v168, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v104 = &__p;
      }
      else {
        long long v104 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v105 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v105 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v171, (const std::string::value_type *)v104, v105);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v172.__r_.__value_.__l.__data_);
        if (v56) {
          goto LABEL_328;
        }
      }
      else
      {
LABEL_261:
        if (v56) {
          goto LABEL_328;
        }
      }
      if (v165 != v166)
      {
LABEL_328:
        sub_100003470(&v172, "SUPPORTING");
        sub_100027CF0((siri::dialogengine::PatternSchemaOverride ***)&v165, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v135 = &__p;
        }
        else {
          long long v135 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v136 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v136 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(&v171, (const std::string::value_type *)v135, v136);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v172.__r_.__value_.__l.__data_);
        }
      }
LABEL_338:
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v161.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
      sub_100008EDC((void ***)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
      sub_100008EDC((void ***)&__p);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v170.__r_.__value_.__l.__data_);
      }
      if (v164) {
        sub_100006AE0(v164);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      uint64_t v38 = (long long *)((char *)v159 + 40);
      if ((long long *)((char *)v159 + 40) == v157) {
        goto LABEL_400;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v39) {
      goto LABEL_101;
    }
LABEL_100:
    std::string::assign(&__str, "Button");
    goto LABEL_101;
  }
LABEL_400:
  std::string::append(&v171, "  </response>\n");
  std::string::append(&v171, "</cat>\n");
  sub_100003470(&v172, ".vcatxml");
  siri::dialogengine::VisualCatIdToPath();
  siri::dialogengine::JoinPath();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v172.__r_.__value_.__l.__data_);
  }
  sub_100003470(&__dst, "Visual CAT file");
  uint64_t v155 = sub_1000277C0((uint64_t)&__p, (uint64_t)&v171, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v171.__r_.__value_.__l.__data_);
  }
  return v155;
}

void sub_1000270C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,std::__shared_weak_count *a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  uint64_t v73 = 0;
  while (1)
  {
    if (*((char *)&a72 + v73 + 159) < 0) {
      operator delete(*(void **)((char *)&a72 + v73 + 136));
    }
    v73 -= 32;
    if (v73 == -160)
    {
      a72 = &a66;
      sub_10002A158((void ***)&a72);
      if (a29 < 0) {
        operator delete(__p);
      }
      a72 = &a41;
      sub_100008EDC((void ***)&a72);
      a72 = &a44;
      sub_100008EDC((void ***)&a72);
      if (a52 < 0) {
        operator delete(a47);
      }
      if (a59 < 0) {
        operator delete(a54);
      }
      if (a40) {
        sub_100006AE0(a40);
      }
      if (a38 < 0) {
        operator delete(a33);
      }
      if (a65 < 0) {
        operator delete(a60);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_1000277C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  siri::dialogengine::DirName();
  if ((siri::dialogengine::CreateDir() & 1) == 0)
  {
    long long v16 = sub_1000042E0(&std::cout, (uint64_t)"Failed to create directory: ", 28);
    uint64_t v17 = v26;
    long long v18 = __p[1];
    BOOL v19 = (v26 & 0x80u) != 0;
    if ((v26 & 0x80u) == 0) {
      std::string::size_type v20 = __p;
    }
    else {
      std::string::size_type v20 = (void **)__p[0];
    }
LABEL_22:
    if (v19) {
      uint64_t v21 = (uint64_t)v18;
    }
    else {
      uint64_t v21 = v17;
    }
    uint64_t v22 = sub_1000042E0(v16, (uint64_t)v20, v21);
    std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
    std::string::size_type v23 = std::locale::use_facet(&v27, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
    std::locale::~locale(&v27);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v15 = 0;
    goto LABEL_26;
  }
  if ((siri::dialogengine::WriteFileFromString() & 1) == 0)
  {
    long long v16 = sub_1000042E0(&std::cout, (uint64_t)"Failed to write file: ", 22);
    uint64_t v17 = *(unsigned __int8 *)(a1 + 23);
    long long v18 = *(void **)(a1 + 8);
    BOOL v19 = (v17 & 0x80u) != 0;
    if ((v17 & 0x80u) == 0) {
      std::string::size_type v20 = (void **)a1;
    }
    else {
      std::string::size_type v20 = *(void ***)a1;
    }
    goto LABEL_22;
  }
  int v5 = *(char *)(a3 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = *(void *)a3;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  long long v8 = sub_1000042E0(&std::cout, v6, v7);
  uint64_t v9 = sub_1000042E0(v8, (uint64_t)" written to ", 12);
  int v10 = *(char *)(a1 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *(void *)a1;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 8);
  }
  unint64_t v13 = sub_1000042E0(v9, v11, v12);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
  BOOL v14 = std::locale::use_facet(&v27, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v27);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v15 = 1;
LABEL_26:
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
  return v15;
}

void sub_1000279F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100027A20(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100027AE0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100027A98(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_1000035CC();
  }
  return operator new(40 * a2);
}

uint64_t sub_100027AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 40;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 40);
      *(void *)(v8 + 16) = *(void *)(a3 - 24);
      *(_OWORD *)uint64_t v8 = v9;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 40) = 0;
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(a3 - 16);
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *((void *)&v15 + 1) = v8;
      v8 -= 40;
      v7 -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100027B94((uint64_t)v12);
  return v10;
}

uint64_t sub_100027B94(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100027BCC((uint64_t *)a1);
  }
  return a1;
}

void sub_100027BCC(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100027C20(v3, v1);
      v1 += 40;
    }
    while (v1 != v2);
  }
}

void sub_100027C20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 32);
  if (v3) {
    sub_100006AE0(v3);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v4 = *(void **)a2;
    operator delete(v4);
  }
}

void **sub_100027C74(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100027CA8(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 40;
    sub_100027C20(v4, i - 40);
  }
}

std::string *sub_100027CF0@<X0>(siri::dialogengine::PatternSchemaOverride ***a1@<X2>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v41, "_");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::StringToLower();
  if ((v40 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v40 & 0x80u) == 0) {
    std::string::size_type v7 = v40;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  uint64_t v8 = std::string::append(&v42, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = std::string::append(&v43, "\">\n");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t v45 = v10->__r_.__value_.__r.__words[2];
  long long v44 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v45 >= 0) {
    uint64_t v12 = (const std::string::value_type *)&v44;
  }
  else {
    uint64_t v12 = (const std::string::value_type *)v44;
  }
  if (v45 >= 0) {
    std::string::size_type v13 = HIBYTE(v45);
  }
  else {
    std::string::size_type v13 = *((void *)&v44 + 1);
  }
  std::string::append(a2, v12, v13);
  if (SHIBYTE(v45) < 0) {
    operator delete((void *)v44);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if ((char)v40 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  std::operator+<char>();
  long long v14 = std::string::append(&v43, "</level-of-detail>\n");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t v45 = v14->__r_.__value_.__r.__words[2];
  long long v44 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v45 >= 0) {
    long long v16 = (const std::string::value_type *)&v44;
  }
  else {
    long long v16 = (const std::string::value_type *)v44;
  }
  if (v45 >= 0) {
    std::string::size_type v17 = HIBYTE(v45);
  }
  else {
    std::string::size_type v17 = *((void *)&v44 + 1);
  }
  std::string::append(a2, v16, v17);
  if (SHIBYTE(v45) < 0) {
    operator delete((void *)v44);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  long long v18 = *a1;
  BOOL v19 = a1[1];
  if (*a1 != v19)
  {
    do
    {
      siri::dialogengine::PatternSchemaOverride::GetUsage((uint64_t *)&v44, *v18);
      int v20 = sub_1000254D4((uint64_t *)&v44);
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
      sub_100008EDC((void ***)&v43);
      siri::dialogengine::PatternSchemaOverride::GetIdioms((uint64_t *)&v44, *v18);
      uint64_t v21 = *((void *)&v44 + 1);
      for (uint64_t i = v44; i != v21; i += 24)
      {
        std::operator+<char>();
        std::string::size_type v23 = std::string::append(&v42, "</idioms>\n");
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v25 = &v43;
        }
        else {
          long long v25 = (std::string *)v43.__r_.__value_.__r.__words[0];
        }
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v43.__r_.__value_.__l.__size_;
        }
        std::string::append(a2, (const std::string::value_type *)v25, size);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42.__r_.__value_.__l.__data_);
        }
      }
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
      sub_100003B14((void ***)&v43);
      v18 += 2;
    }
    while (v18 != v19);
    siri::dialogengine::StringFromBool((uint64_t *)&v42, (siri::dialogengine *)(v20 ^ 1u), v27);
    uint64_t v28 = std::string::insert(&v42, 0, "      <is-hidden-on-idioms>");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    long long v30 = std::string::append(&v43, "</is-hidden-on-idioms>\n");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t v45 = v30->__r_.__value_.__r.__words[2];
    long long v44 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (v45 >= 0) {
      char v32 = (const std::string::value_type *)&v44;
    }
    else {
      char v32 = (const std::string::value_type *)v44;
    }
    if (v45 >= 0) {
      std::string::size_type v33 = HIBYTE(v45);
    }
    else {
      std::string::size_type v33 = *((void *)&v44 + 1);
    }
    std::string::append(a2, v32, v33);
    if (SHIBYTE(v45) < 0) {
      operator delete((void *)v44);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
  }
  std::string::append(a2, "      <component-list>\n");
  std::string::append(a2, "        <value>\n");
  std::operator+<char>();
  long long v34 = std::string::append(&v43, "_group</group-id>\n");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  int64_t v45 = v34->__r_.__value_.__r.__words[2];
  long long v44 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (v45 >= 0) {
    uint64_t v36 = (const std::string::value_type *)&v44;
  }
  else {
    uint64_t v36 = (const std::string::value_type *)v44;
  }
  if (v45 >= 0) {
    std::string::size_type v37 = HIBYTE(v45);
  }
  else {
    std::string::size_type v37 = *((void *)&v44 + 1);
  }
  std::string::append(a2, v36, v37);
  if (SHIBYTE(v45) < 0) {
    operator delete((void *)v44);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, "        </value>\n");
  std::string::append(a2, "      </component-list>\n");
  return std::string::append(a2, "    </sections>\n");
}

void sub_10002816C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v36 - 89) < 0) {
    operator delete(*(void **)(v36 - 112));
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v35 + 23) < 0) {
    operator delete(*(void **)v35);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000282F0()
{
}

uint64_t sub_100028308(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_100003974();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v17[4] = result;
    if (v13) {
      long long v14 = (char *)sub_100029C14(result, v13);
    }
    else {
      long long v14 = 0;
    }
    long long v15 = &v14[32 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[32 * v13];
    *(_DWORD *)long long v15 = *(_DWORD *)a2;
    long long v16 = *(_OWORD *)(a2 + 8);
    *((void *)v15 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)(v15 + 8) = v16;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    void v17[2] = v15 + 32;
    sub_100029C4C(a1, v17);
    uint64_t v9 = a1[1];
    uint64_t result = sub_100029DE8((uint64_t)v17);
  }
  else
  {
    *(_DWORD *)unint64_t v7 = *(_DWORD *)a2;
    long long v8 = *(_OWORD *)(a2 + 8);
    *(void *)(v7 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_100028420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100029DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100028434(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080700, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080700))
  {
    sub_100003470(&qword_1000806E8, "  ");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1000806E8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080700);
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  int v9 = (char)v8;
  unint64_t v10 = *(void *)(a2 + 8);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (v8)
  {
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    switch(a1)
    {
      case 0:
        if (v9 < 0) {
          sub_100003600(&__dst, *(void **)a2, v10);
        }
        else {
          std::string __dst = *(std::string *)a2;
        }
        sub_100003470(&v96, "actions");
        sub_100003470(v98, "command");
        sub_100003470(&v99, "value");
        sub_100003470(v101, "<!-- Replace with ace-command, sf-command, direct-invocation, etc. -->\n<no-op>true</no-op>\n");
        sub_100029F44((uint64_t)&v87, &__dst, &v102, 5uLL);
        for (uint64_t i = 0; i != -15; i -= 3)
        {
          if (SHIBYTE(v101[i + 2]) < 0) {
            operator delete((void *)v101[i]);
          }
        }
        break;
      case 1:
        if (v9 < 0) {
          sub_100003600(&__dst, *(void **)a2, v10);
        }
        else {
          std::string __dst = *(std::string *)a2;
        }
        sub_100003470(&v94, "action");
        sub_100003470(&v85, (char *)&unk_10006DFE2);
        sub_100028434(&v86, 0, &v94, &v85);
        sub_100003470(&v93, "label");
        sub_100003470(&v83, (char *)&unk_10006DFE2);
        sub_100028434(&__p, 9, &v93, &v83);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        long long v14 = std::string::append(&v86, (const std::string::value_type *)p_p, size);
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v97[0] = *((void *)&v14->__r_.__value_.__l + 2);
        long long v96 = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        sub_100029F44((uint64_t)&v87, &__dst, (long long *)v98, 2uLL);
        for (uint64_t j = 0; j != -6; j -= 3)
        {
          if (SHIBYTE(v97[j]) < 0) {
            operator delete(*(void **)((char *)&__dst + j * 8 + 24));
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v83.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v86.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v17 = (void *)v94.__r_.__value_.__r.__words[0];
          goto LABEL_93;
        }
        break;
      case 2:
        if (v9 < 0) {
          sub_100003600(&__dst, *(void **)a2, v10);
        }
        else {
          std::string __dst = *(std::string *)a2;
        }
        sub_100003470(&v96, "cell");
        sub_100003470(v98, "content");
        sub_100003470(&v99, "size");
        sub_100003470(v101, "<auto/>\n");
        sub_100029F44((uint64_t)&v87, &__dst, &v102, 5uLL);
        for (uint64_t k = 0; k != -15; k -= 3)
        {
          if (SHIBYTE(v101[k + 2]) < 0) {
            operator delete((void *)v101[k]);
          }
        }
        break;
      case 5:
        if (v9 < 0) {
          sub_100003600(&__dst, *(void **)a2, v10);
        }
        else {
          std::string __dst = *(std::string *)a2;
        }
        sub_100003470(&v86, "lines");
        sub_100003470(&v94, (char *)&unk_10006DFE2);
        sub_100028434(&v96, 9, &v86, &v94);
        sub_100029F44((uint64_t)&v87, &__dst, (long long *)v98, 2uLL);
        for (uint64_t m = 0; m != -6; m -= 3)
        {
          if (SHIBYTE(v97[m]) < 0) {
            operator delete(*(void **)((char *)&__dst + m * 8 + 24));
          }
        }
        goto LABEL_89;
      case 6:
        if (v9 < 0) {
          sub_100003600(&__dst, *(void **)a2, v10);
        }
        else {
          std::string __dst = *(std::string *)a2;
        }
        sub_100003470(&v96, "cells");
        sub_100003470(v98, "value");
        sub_100003470(&v86, "text");
        sub_100003470(&v94, (char *)&unk_10006DFE2);
        sub_100028434(&v99, 5, &v86, &v94);
        sub_100029F44((uint64_t)&v87, &__dst, (long long *)v101, 4uLL);
        for (uint64_t n = 0; n != -12; n -= 3)
        {
          if (SHIBYTE(v100[n]) < 0) {
            operator delete((void *)v100[n - 2]);
          }
        }
LABEL_89:
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        goto LABEL_91;
      case 7:
        if (v9 < 0) {
          sub_100003600(&__dst, *(void **)a2, v10);
        }
        else {
          std::string __dst = *(std::string *)a2;
        }
        sub_100003470(&v96, "value");
        sub_100003470(v98, "<!-- Valid children are <text> or <application-bundle-identifier> -->\n<application-bundle-identifier>Your bundle ID here</application-bundle-identifier>");
        sub_100029F44((uint64_t)&v87, &__dst, &v99, 3uLL);
        for (iuint64_t i = 0; ii != -9; ii -= 3)
        {
          if (SHIBYTE(v98[ii + 2]) < 0) {
            operator delete((void *)v98[ii]);
          }
        }
        break;
      case 8:
        if (v9 < 0) {
          sub_100003600(&__dst, *(void **)a2, v10);
        }
        else {
          std::string __dst = *(std::string *)a2;
        }
        sub_100003470(&v96, "false");
        sub_100029F44((uint64_t)&v87, &__dst, (long long *)v98, 2uLL);
        for (juint64_t j = 0; jj != -6; jj -= 3)
        {
          if (SHIBYTE(v97[jj]) < 0) {
            operator delete(*(void **)((char *)&__dst + jj * 8 + 24));
          }
        }
        break;
      case 9:
        if (v9 < 0) {
          sub_100003600(&__dst, *(void **)a2, v10);
        }
        else {
          std::string __dst = *(std::string *)a2;
        }
        sub_100003470(&v96, "text-elements");
        sub_100003470(v98, "value");
        std::operator+<char>();
        BOOL v19 = std::string::append(&v86, " value</plain>\n");
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v100[0] = *((void *)&v19->__r_.__value_.__l + 2);
        long long v99 = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        sub_100029F44((uint64_t)&v87, &__dst, (long long *)v101, 4uLL);
        for (kuint64_t k = 0; kk != -12; kk -= 3)
        {
          if (SHIBYTE(v100[kk]) < 0) {
            operator delete((void *)v100[kk - 2]);
          }
        }
LABEL_91:
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v17 = (void *)v86.__r_.__value_.__r.__words[0];
LABEL_93:
          operator delete(v17);
        }
        break;
      default:
        break;
    }
    sub_100003470((void *)a4, (char *)&unk_10006DFE2);
    if (v87 != v88)
    {
      uint64_t v82 = a4;
      memset(&__dst, 0, sizeof(__dst));
      memset(&v86, 0, sizeof(v86));
      memset(&v94, 0, sizeof(v94));
      memset(&v85, 0, sizeof(v85));
      std::string::operator=(&v94, (const std::string *)(v88 - 24));
      std::string::operator=(&v85, (const std::string *)a3);
      if (v88 - v87 != 24)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        do
        {
          if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v28 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v28 = v85.__r_.__value_.__l.__size_;
          }
          sub_100008CC4((uint64_t)&v83, v28 + 1);
          if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v29 = &v83;
          }
          else {
            long long v29 = (std::string *)v83.__r_.__value_.__r.__words[0];
          }
          if (v28)
          {
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v30 = &v85;
            }
            else {
              long long v30 = (std::string *)v85.__r_.__value_.__r.__words[0];
            }
            memmove(v29, v30, v28);
          }
          *(_WORD *)((char *)&v29->__r_.__value_.__l.__data_ + v28) = 60;
          int v31 = *(char *)(v87 + v26 + 23);
          if (v31 >= 0) {
            char v32 = (const std::string::value_type *)(v87 + v26);
          }
          else {
            char v32 = *(const std::string::value_type **)(v87 + v26);
          }
          if (v31 >= 0) {
            std::string::size_type v33 = *(unsigned __int8 *)(v87 + v26 + 23);
          }
          else {
            std::string::size_type v33 = *(void *)(v87 + v26 + 8);
          }
          long long v34 = std::string::append(&v83, v32, v33);
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v93.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          uint64_t v36 = std::string::append(&v93, ">\n");
          long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v38 = &__p;
          }
          else {
            uint64_t v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v39 = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(&__dst, (const std::string::value_type *)v38, v39);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v83.__r_.__value_.__l.__data_);
          }
          if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v40 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v40 = v85.__r_.__value_.__l.__size_;
          }
          sub_100008CC4((uint64_t)&v83, v40 + 2);
          if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v41 = &v83;
          }
          else {
            std::string v41 = (std::string *)v83.__r_.__value_.__r.__words[0];
          }
          if (v40)
          {
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string v42 = &v85;
            }
            else {
              std::string v42 = (std::string *)v85.__r_.__value_.__r.__words[0];
            }
            memmove(v41, v42, v40);
          }
          strcpy((char *)v41 + v40, "</");
          int v43 = *(char *)(v87 + v26 + 23);
          if (v43 >= 0) {
            long long v44 = (const std::string::value_type *)(v87 + v26);
          }
          else {
            long long v44 = *(const std::string::value_type **)(v87 + v26);
          }
          if (v43 >= 0) {
            std::string::size_type v45 = *(unsigned __int8 *)(v87 + v26 + 23);
          }
          else {
            std::string::size_type v45 = *(void *)(v87 + v26 + 8);
          }
          char v46 = std::string::append(&v83, v44, v45);
          long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          v93.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v48 = std::string::append(&v93, ">\n");
          long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v50 = &v86;
          }
          else {
            uint64_t v50 = (std::string *)v86.__r_.__value_.__r.__words[0];
          }
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v51 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v51 = v86.__r_.__value_.__l.__size_;
          }
          std::string v52 = std::string::append(&__p, (const std::string::value_type *)v50, v51);
          std::string::size_type v53 = v52->__r_.__value_.__r.__words[0];
          v90[0] = (void **)v52->__r_.__value_.__l.__size_;
          *(void ***)((char *)v90 + 7) = *(void ***)((char *)&v52->__r_.__value_.__r.__words[1] + 7);
          char v54 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v86.__r_.__value_.__l.__data_);
          }
          v86.__r_.__value_.__r.__words[0] = v53;
          v86.__r_.__value_.__l.__size_ = (std::string::size_type)v90[0];
          *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v90 + 7);
          *((unsigned char *)&v86.__r_.__value_.__s + 23) = v54;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v83.__r_.__value_.__l.__data_);
          }
          if (byte_1000806FF >= 0) {
            int v55 = (const std::string::value_type *)&qword_1000806E8;
          }
          else {
            int v55 = (const std::string::value_type *)qword_1000806E8;
          }
          if (byte_1000806FF >= 0) {
            std::string::size_type v56 = byte_1000806FF;
          }
          else {
            std::string::size_type v56 = unk_1000806F0;
          }
          std::string::append(&v85, v55, v56);
          ++v27;
          v26 += 24;
        }
        while (v27 < -1 - 0x5555555555555555 * ((v88 - v87) >> 3));
      }
      siri::dialogengine::StringSplit();
      std::operator+<char>();
      siri::dialogengine::StringJoin();
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v57 = &v85;
      }
      else {
        int v57 = (std::string *)v85.__r_.__value_.__r.__words[0];
      }
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v58 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v58 = v85.__r_.__value_.__l.__size_;
      }
      a4 = v82;
      int v59 = std::string::insert(&v93, 0, (const std::string::value_type *)v57, v58);
      long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      int v61 = std::string::append(&__p, "\n");
      std::string::size_type v62 = v61->__r_.__value_.__r.__words[0];
      v92[0] = v61->__r_.__value_.__l.__size_;
      *(void *)((char *)v92 + 7) = *(std::string::size_type *)((char *)&v61->__r_.__value_.__r.__words[1] + 7);
      char v63 = HIBYTE(v61->__r_.__value_.__r.__words[2]);
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      v94.__r_.__value_.__r.__words[0] = v62;
      v94.__r_.__value_.__l.__size_ = v92[0];
      *(std::string::size_type *)((char *)&v94.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v92 + 7);
      *((unsigned char *)&v94.__r_.__value_.__s + 23) = v63;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      if (v91 < 0) {
        operator delete(v90[0]);
      }
      v90[0] = (void **)&v83;
      sub_100003B14(v90);
      sub_100029E78((const void **)&__dst.__r_.__value_.__l.__data_, (const void **)&v94.__r_.__value_.__l.__data_, (uint64_t)&__p);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v64 = &v86;
      }
      else {
        int v64 = (std::string *)v86.__r_.__value_.__r.__words[0];
      }
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v65 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v65 = v86.__r_.__value_.__l.__size_;
      }
      int v66 = std::string::append(&__p, (const std::string::value_type *)v64, v65);
      std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
      v93.__r_.__value_.__r.__words[0] = v66->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
      char v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v82 + 23) < 0) {
        operator delete(*(void **)v82);
      }
      std::string::size_type v69 = v93.__r_.__value_.__r.__words[0];
      *(void *)uint64_t v82 = v67;
      *(void *)(v82 + 8) = v69;
      *(void *)(v82 + 15) = *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 7);
      *(unsigned char *)(v82 + 23) = v68;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v70 = *(void *)(a4 + 8);
    if (*(char *)(a4 + 23) >= 0) {
      uint64_t v70 = *(unsigned __int8 *)(a4 + 23);
    }
    if (!v70)
    {
      if (*(char *)(a3 + 23) >= 0) {
        size_t v71 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        size_t v71 = *(void *)(a3 + 8);
      }
      sub_100008CC4((uint64_t)&v86, v71 + 31);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v72 = &v86;
      }
      else {
        long long v72 = (std::string *)v86.__r_.__value_.__r.__words[0];
      }
      if (v71)
      {
        if (*(char *)(a3 + 23) >= 0) {
          uint64_t v73 = (const void *)a3;
        }
        else {
          uint64_t v73 = *(const void **)a3;
        }
        memmove(v72, v73, v71);
      }
      strcpy((char *)v72 + v71, "<!-- Add required elements for ");
      int v74 = *(char *)(a2 + 23);
      if (v74 >= 0) {
        std::string::size_type v75 = (const std::string::value_type *)a2;
      }
      else {
        std::string::size_type v75 = *(const std::string::value_type **)a2;
      }
      if (v74 >= 0) {
        std::string::size_type v76 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v76 = *(void *)(a2 + 8);
      }
      std::string::size_type v77 = std::string::append(&v86, v75, v76);
      long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v79 = std::string::append(&__dst, " here -->\n");
      std::string::size_type v80 = v79->__r_.__value_.__r.__words[0];
      v94.__r_.__value_.__r.__words[0] = v79->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v79->__r_.__value_.__r.__words[1] + 7);
      char v81 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(void *)a4 = v80;
      *(void *)(a4 + 8) = v94.__r_.__value_.__r.__words[0];
      *(void *)(a4 + 15) = *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 7);
      *(unsigned char *)(a4 + 23) = v81;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    sub_100003B14((void ***)&__dst);
  }
  else
  {
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"You must supply a valid Visual CAT element name", (const char *)a2);
    sub_100003470((void *)a4, (char *)&unk_10006DFE2);
  }
}

void sub_10002929C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
}

void sub_100029848(uint64_t *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  int v9 = (_DWORD *)*a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    sub_100029990(a1);
    if (a4 >> 59) {
      sub_100003974();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_1000299CC(a1, v12);
    uint64_t v13 = sub_100029A10(v8, (uint64_t)a2, (uint64_t)a3, a1[1]);
    goto LABEL_11;
  }
  unint64_t v14 = (a1[1] - (uint64_t)v9) >> 5;
  if (v14 < a4)
  {
    long long v15 = &a2[8 * v14];
    sub_100029B60(a2, v15, v9);
    uint64_t v13 = sub_100029A10(v8, (uint64_t)v15, (uint64_t)a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }
  sub_100029B60(a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = a1[1];
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 1) < 0) {
        operator delete(*(void **)(v18 - 24));
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  a1[1] = v17;
}

void sub_100029980(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100029988(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100029990(uint64_t *a1)
{
  if (*a1)
  {
    sub_100029BC4(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_1000299CC(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_100003974();
  }
  uint64_t result = (char *)sub_100029C14((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t sub_100029A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *(_DWORD *)uint64_t v4 = *((_DWORD *)v6 - 2);
      uint64_t v8 = (unsigned char *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        sub_100003600(v8, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v14;
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v8 = v9;
      }
      v4 += 32;
      uint64_t v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  char v12 = 1;
  sub_100029AE0((uint64_t)v11);
  return v4;
}

void sub_100029ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100029AE0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100029B18(a1);
  }
  return a1;
}

void sub_100029B18(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 32;
  }
}

_DWORD *sub_100029B60(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v5 = a2;
  do
  {
    unint64_t v6 = (const std::string *)(v4 + 2);
    int v7 = *v4;
    v4 += 8;
    uint64_t v8 = (std::string *)(a3 + 2);
    *a3 = v7;
    a3 += 8;
    std::string::operator=(v8, v6);
  }
  while (v4 != v5);
  return v5;
}

void sub_100029BC4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void *sub_100029C14(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_1000035CC();
  }
  return operator new(32 * a2);
}

uint64_t sub_100029C4C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100029CC4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100029CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      int v9 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v8 - 32) = v9;
      v8 -= 32;
      long long v10 = *(_OWORD *)(a3 + 8);
      *(void *)(v8 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v8;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100029D68((uint64_t)v13);
  return v11;
}

uint64_t sub_100029D68(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100029DA0(a1);
  }
  return a1;
}

void sub_100029DA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    v1 += 32;
  }
}

uint64_t sub_100029DE8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100029E20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_100029E78@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = sub_100008CC4(a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      int v9 = a1;
    }
    else {
      int v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  long long v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void sub_100029F44(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_10002A0BC((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_100003974();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_100003920((void *)a1, v11);
    char v12 = sub_100008D8C(v8, (long long *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    sub_10002A0F8(__str, v13, v9);
    char v12 = sub_100008D8C(v8, (long long *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_10002A0F8(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0) {
        operator delete(*(void **)(v16 - 24));
      }
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_10002A0AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10002A0B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10002A0BC(uint64_t *a1)
{
  if (*a1)
  {
    sub_100003B68(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *sub_10002A0F8(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void sub_10002A158(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100029BC4((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_10002A1AC(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    sub_10002A234(result, a4);
    uint64_t result = sub_10002A2B0((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10002A214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100008EDC(&a9);
  _Unwind_Resume(a1);
}

char *sub_10002A234(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100003974();
  }
  uint64_t result = (char *)sub_10002A278((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_10002A278(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_1000035CC();
  }
  return operator new(16 * a2);
}

void *sub_10002A2B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_10002A340((uint64_t)v7);
  return v4;
}

uint64_t sub_10002A340(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10002A378(a1);
  }
  return a1;
}

void sub_10002A378(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      sub_100006AE0(v3);
    }
    v1 -= 16;
  }
}

void sub_10002A3BC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        sub_100027C20((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10002A454(uint64_t a1)
{
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*(void **)(a1 + 464));
  }
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  uint64_t v3 = (void **)(a1 + 416);
  sub_10002A5A8(&v3);
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  if (*(char *)(a1 + 343) < 0) {
    operator delete(*(void **)(a1 + 320));
  }
  sub_10002A698(a1 + 296, *(void **)(a1 + 304));
  if (*(char *)(a1 + 279) < 0) {
    operator delete(*(void **)(a1 + 256));
  }
  uint64_t v3 = (void **)(a1 + 232);
  sub_100003B14(&v3);
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  sub_10002A698(a1 + 160, *(void **)(a1 + 168));
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v3 = (void **)(a1 + 8);
  sub_10000C39C(&v3);
  return a1;
}

void sub_10002A5A8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_10002A640((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10002A640(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void sub_10002A698(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10002A698(a1, *a2);
    sub_10002A698(a1, a2[1]);
    sub_10002A6F4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10002A6F4(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_10002A74C(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    sub_10002A234(result, a4);
    uint64_t result = sub_10002A7D4((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10002A7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100008EDC(&a9);
  _Unwind_Resume(a1);
}

void *sub_10002A7D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_10002A864((uint64_t)v7);
  return v4;
}

uint64_t sub_10002A864(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10002A378(a1);
  }
  return a1;
}

void sub_10002A89C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10002A8F0((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10002A8F0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4) {
      sub_100006AE0(v4);
    }
  }
  a1[1] = v2;
}

void sub_10002A93C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10007CF30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002A95C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10007CF30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10002A9B0(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 32);
  sub_100008EDC(&v1);
}

void sub_10002A9E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10007CF80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002AA00(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10007CF80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10002AA54(uint64_t a1)
{
  sub_10002AA80((uint64_t)&v1, a1 + 24);
}

void sub_10002AA80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 32);
  sub_100008EDC(&v3);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*(void **)(a2 + 8));
  }
}

uint64_t sub_10002AAC8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100003974();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v5;
  }
  uint64_t v16 = a1 + 2;
  if (v8) {
    uint64_t v9 = (char *)sub_10000398C((uint64_t)(a1 + 2), v8);
  }
  else {
    uint64_t v9 = 0;
  }
  char v12 = v9;
  uint64_t v13 = &v9[24 * v4];
  uint64_t v15 = &v9[24 * v8];
  sub_10002ABE8((uint64_t)(a1 + 2), v13, a2, a3);
  uint64_t v14 = v13 + 24;
  sub_10002AC20(a1, &v12);
  uint64_t v10 = a1[1];
  sub_10002ADB0(&v12);
  return v10;
}

void sub_10002ABD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10002ADB0((void **)va);
  _Unwind_Resume(a1);
}

void sub_10002ABE8(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = *a3;
  unint64_t v4 = (std::__shared_weak_count *)a3[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a4;
    *a2 = v5;
    a2[1] = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    a2[2] = v6;
    sub_100006AE0(v4);
  }
  else
  {
    uint64_t v7 = *a4;
    *a2 = v5;
    a2[1] = 0;
    a2[2] = v7;
  }
}

uint64_t sub_10002AC20(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10002AC98((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10002AC98(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 24;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *(void *)(v8 + 16) = a3[2];
      *((void *)&v15 + 1) = v8;
      v8 -= 24;
      v7 -= 24;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_10002AD34((uint64_t)v12);
  return v10;
}

uint64_t sub_10002AD34(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10002AD6C(a1);
  }
  return a1;
}

void sub_10002AD6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_100006AE0(v3);
    }
    v1 += 24;
  }
}

void **sub_10002ADB0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10002ADE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 24;
    unint64_t v4 = *(std::__shared_weak_count **)(v1 - 16);
    if (v4)
    {
      sub_100006AE0(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 24;
    }
  }
}

void *sub_10002AE38(void *result, long long *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_100003600((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_10002AE90(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10002AE98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      long long v10 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = v10;
      v8 += 24;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_10002B148((uint64_t)&v12, a2, v7, v6);
}

void *sub_10002AF08(void *result, long long *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (v4 == result[3])
  {
    uint64_t v5 = (long long *)result[1];
    if ((unint64_t)v5 <= *result)
    {
      uint64_t v11 = v4 - *result;
      BOOL v10 = v11 == 0;
      uint64_t v12 = 0x5555555555555556 * (v11 >> 3);
      if (v10) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v13 >> 2;
      uint64_t v15 = result[4];
      uint64_t v32 = v3[4];
      uint64_t v16 = (char *)sub_10000398C(v15, v13);
      uint64_t v18 = &v16[24 * v14];
      unint64_t v19 = v3[1];
      int64_t v20 = v3[2] - v19;
      if (v20)
      {
        uint64_t v21 = v20 / 24;
        uint64_t v22 = &v18[24 * v21];
        uint64_t v23 = 24 * v21;
        long long v24 = &v16[24 * v14];
        do
        {
          long long v25 = *(_OWORD *)v19;
          *((void *)v24 + 2) = *(void *)(v19 + 16);
          *(_OWORD *)long long v24 = v25;
          v24 += 24;
          *(void *)(v19 + 8) = 0;
          *(void *)(v19 + 16) = 0;
          *(void *)unint64_t v19 = 0;
          v19 += 24;
          v23 -= 24;
        }
        while (v23);
        int64x2_t v26 = *(int64x2_t *)(v3 + 1);
      }
      else
      {
        int64x2_t v26 = vdupq_n_s64(v19);
        uint64_t v22 = &v16[24 * v14];
      }
      uint64_t v29 = *v3;
      void *v3 = v16;
      v3[1] = v18;
      int64x2_t v30 = v26;
      uint64_t v27 = v3[3];
      v3[2] = v22;
      v3[3] = &v16[24 * v17];
      uint64_t v31 = v27;
      uint64_t result = (void *)sub_100004250((uint64_t)&v29);
      uint64_t v4 = v3[2];
    }
    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *result) >> 3);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -3 * (v7 >> 1);
      uint64_t result = sub_10002B1D0((uint64_t)&v29, v5, (long long *)v4, (uint64_t)v5 - 24 * (v7 >> 1));
      uint64_t v4 = v9;
      v3[1] += 8 * v8;
      v3[2] = v9;
    }
  }
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_100003600((unsigned char *)v4, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v28 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v28;
  }
  v3[2] += 24;
  return result;
}

uint64_t sub_10002B094(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_100004130(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10002B244(v7, a3, *(long long **)(a1 + 8), a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_10002B148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 + 16) = *(void *)(v6 - 8);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v6 - 1) = 0;
      *(unsigned char *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

long long *sub_10002B1D0(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      uint64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_10002B244(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      v4 += 24;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      a2 = (long long *)((char *)a2 + 24);
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_100003A94((uint64_t)v7);
  return v4;
}

uint64_t sub_10002B2C4()
{
  sub_100003470(qword_1000805B0, "iVBORw0KGgoAAAANSUhEUgAAACQAAAAWCAYAAACosj4+AAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAJKADAAQAAAABAAAAFgAAAADx7wgaAAAC0UlEQVRIDc1WO2wTQRB9ez7b+AMmEIKE+bkgBQiJAikNIKHUkSloItFQUScSCkQUkZBiaBKJGigoItFhQBR0dEEYKCCISIAJiQOOQ8gFf+Lz2cvOmbv4/L2LILDS+WZn3uw8z+7NDkOLEZq70pWvqFEORBnHUQ6+T0CDLeCd1FkGtsgZ3jEg7pc8ceXQjR/NnITdOg4nx7YtYG0IHCMAD1mtf2rGFDDc3I8dk58jY+u1q1oI+eaHwloJD0RWTtaC/pYsgidkN84VDkymjBgmISJT0thzcB42jFvyZizllnmfQUqioLRNlJktJ0PBRQIoNnGgqUw/+plxuE2nvBGc9R0R3tUkr/MSPpaW8bQwiywv0rK2Bx2R3xxijL6mXFlNOj3A6YPXscsVaAiaLv/E+fRdTBfnGmztFUwJuDwRiT5tp2RoYYPMpcx9nFm8hei320gU57HXtR139gy2j93UykPERaY609RuU/lG/YoX6hcdnS6vYTo8jF53D7qlAJYrOZurVGHERaKi58irDTggeU2rhoop2xWIi8iQXoHt+jTgooHjOOENIyLvxoVgtXw9zs9gtVJowHZSEBf9K+sEbGcf2dlvMT/KvcVg5p5F52Qi0R3jxKEeezEzhb7UBJ4VPugmcU+hyLV6mK05cZHowrOFbgGaVZfwSl3A5ZW4qHEc/b5eDPiPtUC3VwsuMyJDiLeH2bO+VlOYyr3UwbGuAXtOdSjB5aFErYCotkqdreP0vZqGKrbmk/bdxF5beYLVcgHdomDK0G8l09ZZYApx0eu+nBy+KvI93tlpA+FnHgTEk6lkN5RC6pGCKEKDUrF0FRZM0wljo1pkIqb/DepLBLNEU2ALZZ6rDWQIuiQIOiVDsYkD+esZIuG/aj+IEPUj1Jc4zRT5bnZQrNpeiNaxnDwiFWah0xD7uZmDbp8YtbBslGIZjZnha26ZoTDe/6rJ/wXRihQSP/gzLgAAAABJRU5ErkJggg==");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1000805B0, (void *)&_mh_execute_header);
  sub_100003470(qword_1000805C8, "iVBORw0KGgoAAAANSUhEUgAAACQAAAAWCAYAAACosj4+AAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAJKADAAQAAAABAAAAFgAAAADx7wgaAAACSklEQVRIDc1WSW4aQRT93YAEElMkEINX3ngRWFrKKmdwruKVz8AqVwm5QlaR2NKSzcIrMwikMAkaMfm9Ulerwcah2jZ2LbqmP7x6/1f1t+RAGw6HX+bz+ZVlWVfb7fYr+jL65AHxF5ehO4VuG72Dvp5IJOrZbPbfc0rW/iIU4r1e7xrrNxhn9vffYg5gI9ipFQqFnxi7QZs7gAaDwdlyufwFgcug0DuOG7FY7Ecul3vQPnxABLNarf6ClTO9eYoeDD1Eo9FvGpRNpwwTmTk1GM+3igoxcK4AeTlzqjDR73679DCIxdvkuu49EB6dwJvNRhBiSafTEo+rg/kOFouFwKbk83mxbXVef++lARMdts6jvNoQPBoMjRJMq9WSSCQilUpFUqmU8jWdTqXZbApyUQi6VCqp9WM+JIRYbCAjIKNGZpCIsl6vFYDJZCJBMGQmkzE6o/JPLFan07nF7MIIEYQJgmwQFJmCMcUMwZA1gg7R7shQOYSiClO1WlVgCIpheiUYHqp8fNYdQE1m3rLZSKZ2GIM6ZJoZho2JzDCOx+MwJvkethkyx1Qbz4Q4jrMTJh0+guLebDYzNcuQNclQ3VSTDGhmdAInk0mVzPr2jUb8f5o1YPkd+mHs9/vqJqGU2PFK9ggm7MNoe3VJbcfqfya8TSgdZB8M1fhyc48yhq1GLOqKgKp4t9v9AwMf9T9rFIvF78ghVx2DA9Yl6P26xPB0ocXp0/OtCjWfV9YjrEtguRHaurliI1gLUf3Jq8bwfZoSNnjAjyryHwGk5kJW4N53JgAAAABJRU5ErkJggg==");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1000805C8, (void *)&_mh_execute_header);
  sub_100003470(qword_1000805E0, "iVBORw0KGgoAAAANSUhEUgAAACQAAAAWCAYAAACosj4+AAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAJKADAAQAAAABAAAAFgAAAADx7wgaAAACAUlEQVRIDc2WvU4CQRSF7wzB6MZAiNrsKmhlYgyFEq3pLIxYGBsK4iNY+QxUPoKxoNEGjIWdtQYtiJpYKejSqCEQg0QD454ha9Ao4MwmehP+duee/bhzZ+Yw+iEymcNQo1lPiBYlBKMZZ5hJgoZ/GN79MqNnZ0CZCbpinHKDPiOXTC5XvktiXy/uHB8PNouPm8xHW5FxKxgJWzQ2EiLDGJJD6/UXeniqULFk063zEkJ8lejnd5URS/sio9sb8XijM+ET0O7unvVGLBueMGOL81EKBLoXpFZ7ppOzgoTrFO33O2Ms7yexmkqt227OBxBgXolOFuaiVnR22r3f12fh4ppOHTClYGQPEC26UBwimCZURgUG+fgDC05FlUKQnBUwIF8CoWcwTb+tTCcActFvKuH0YQwMyGVyNbVebtZWloK9eqbXw9BT+9kj5UY3/MYUx9LGatKFASw0JhWr5KQHwcKxz6iW+ruK6WiBhWPTwz7jVehogQVNbbqbnhdQmlqmXGVegHilAaAyjgOvQlOrzHHg4WzyKjS1LjlOXxyUXoWOFmd0wGEFivd2FZuabkADDkAxqmDh8CWiSWmc2roBDUU7QrAjYJGrDL6kdFfO49RWDeSqThdsCBjwbAkEkwRfcnpesFWgdO0Hnu0atQ8/BLp/ZdAAhPhXFraN1H7/K5P/DlNODQLEpvAJAAAAAElFTkSuQmCC");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1000805E0, (void *)&_mh_execute_header);
  sub_100003470(qword_1000805F8, "iVBORw0KGgoAAAANSUhEUgAAACQAAAAWCAYAAACosj4+AAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAJKADAAQAAAABAAAAFgAAAADx7wgaAAACEUlEQVRIDc1WSy9DQRT+ZlqvEkWsqCB2oisSe0vC9VckkjaxsSGaSPwVtxJLewmrlp0gHitBRevRx5hvmiu3olrjJnoWvXPnzPnu1zPnJVBHopfJ/kLl3VGAIxQmFdSQPtpT53ij7WcBcasETgXgRmS7mxvdevjOSOtrZex8vfMaTytQSAAqWqtt/BaGhNMdhxOZwnTHCIZCVYjbcg7Hb1dwC1mk89lcUVRSMfTuXIyvv/pRawh1Xa0Ml4rY1V6Z8R9qdu1E4kgNLGKibfBHk7PiHRL3e0gXMkfhNiy/jOzceAafhEimWBKHUGrYUzb71NeBzf4FrPbNNWtizm0/HmDtcf8mFK7MeqQkNbwmesaGDO1tyNCOf2Cjb97cCjlwzxBizPzlmn7rGX7YE9ouReIzJm71pmA25cvv57YBnI0lG8aM9/F6T8ZU/DqVaw+FxyVT24YMwZlNjQK4Hgn/PjGWuqei5CJZZ/zK36yZ2kEJschFsujZgrLOBCXEIhftIVOBrXC9omdl/MWIWORisuyL7l9fJXuMLQO2g6CEWOQi2fBsQdmbghJiaS4n2kNwbUHZKIMSYmkuaclRQNdHK9+7+QxY1P4qxOAEQC7SzCUCKRvQEiqma9vY+m3Y+TmOkIvJMs4l2l1H/kPNrt1CBuzatkJbjiHkQIyWGz8+CZFdSw1oJERpqRG2Sqn6+19D/gfZixHOWVphygAAAABJRU5ErkJggg==");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1000805F8, (void *)&_mh_execute_header);
  sub_100003470(qword_100080610, "greyColor");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100080610, (void *)&_mh_execute_header);
  sub_100003470(qword_100080628, "dialogColor");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100080628, (void *)&_mh_execute_header);
  sub_100003470(qword_100080640, "visualColor");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100080640, (void *)&_mh_execute_header);
  sub_100003470(qword_100080658, "usage");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100080658, (void *)&_mh_execute_header);
  sub_100003470(qword_100080670, "empty");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100080670, (void *)&_mh_execute_header);
  sub_100003470(qword_100080688, "variantsLabel");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100080688, (void *)&_mh_execute_header);
  sub_100003470(qword_1000806A0, "variants");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1000806A0, (void *)&_mh_execute_header);
  sub_100003470(qword_1000806B8, "defaultVariant");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1000806B8, (void *)&_mh_execute_header);
  sub_100003470(qword_1000806D0, "error");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1000806D0, (void *)&_mh_execute_header);
}

void sub_10002B514(uint64_t a1)
{
  sub_100003470(v4, "toxml");
  sub_100003470(__p, "Convert a CAT file to XML format.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10002B58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002B5C0(uint64_t a1)
{
  sub_100003470(v4, "tobinary");
  sub_100003470(__p, "Convert a CAT file to binary format.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10002B638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002B66C()
{
  sub_100003470(&v2, "\n  <EXECUTABLE> <COMMAND> [--preserve] [--templateDir <dir>] [--optimize] [--debug]\n  <EXECUTABLE> <COMMAND> [--preserve] <path-to-cat> [<output-cat>] [--optimize] [--debug]\n\n      Convert a CAT file to binary format. This may be called with two different CAT paths,\n      or a single CAT path to convert in place. Or you can provide a Templates directory to\n      convert all of the CAT files under that directory.\n\n      --templateDir        A Templates directory to walk recursively to find all CAT files\n      --debug              Output debug log messages\n      --optimize           Remove data from the file that's not needed for deployment, e.g., notes\n      --preserve           Keep existing binary/XML files if present; otherwise they are deleted\n"
    "      <path-to-cat>        The path to a .cat directory, a visualcat.xml file, or a .pattern.xml file\n"
    "      <output-cat>         An optional path to a different .cat directory or .bin file for the converted files\n");
  sub_100003470(&__p, "tobinary");
  sub_10003B430();
  if (v1 < 0) {
    operator delete(__p);
  }
  if (v3 < 0) {
    operator delete(v2);
  }
}

void sub_10002B6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002B718()
{
  sub_100003470(&v2, "\n  <EXECUTABLE> <COMMAND> [--preserve] [--templateDir <dir>] [--debug]\n  <EXECUTABLE> <COMMAND> [--preserve] <path-to-cat-schema> [<output-cat-schema>] [--debug]\n\n      Convert a CAT schema file to binary format. This may be called with two different paths,\n      or a single path to convert in place. Or you can provide a Templates directory to\n      convert all of the schema files under that directory.\n\n      --templateDir        A Templates directory to walk recursively to find all CAT schema files\n      --debug              Output debug log messages\n      --optimize           Remove data from the file that's not needed for deployment, e.g., descriptions\n      --preserve           Keep existing binary/YAML files if present; otherwise they are deleted\n"
    "      <path-to-cat-schema> The path to a schema directory, a .catschema file\n"
    "      <output-cat-schema>  An optional path to a different .catschemabin file for the converted file\n");
  sub_100003470(&__p, "tobinaryschema");
  sub_10003B430();
  if (v1 < 0) {
    operator delete(__p);
  }
  if (v3 < 0) {
    operator delete(v2);
  }
}

void sub_10002B790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002B7C4(uint64_t a1)
{
  sub_100003470(v4, "tobinaryschema");
  sub_100003470(__p, "Convert a CAT schema file to binary format.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10002B83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002B870()
{
  sub_100003470(&v2, "\n  <EXECUTABLE> <COMMAND> [--preserve] [--templateDir <dir>] [--debug]\n  <EXECUTABLE> <COMMAND> [--preserve] <path-to-cat-schema> [<output-cat-schema>] [--debug]\n\n      Convert a CAT schema file to YAML format. This may be called with two different paths,\n      or a single path to convert in place. Or you can provide a Templates directory to\n      convert all of the schema files under that directory.\n\n      --templateDir         A Templates directory to walk recursively to find all CAT schema files\n      --debug              Output debug log messages\n      --preserve           Keep existing binary/YAML files if present; otherwise they are deleted\n"
    "      <path-to-cat-schema> The path to a schema directory, a .catschema file\n"
    "      <output-cat-schema>  An optional path to a different .catschemabin file for the converted file\n");
  sub_100003470(&__p, "toyamlschema");
  sub_10003B430();
  if (v1 < 0) {
    operator delete(__p);
  }
  if (v3 < 0) {
    operator delete(v2);
  }
}

void sub_10002B8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002B91C(uint64_t a1)
{
  sub_100003470(v4, "toyamlschema");
  sub_100003470(__p, "Convert a CAT schema file to YAML format.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10002B994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002B9C8()
{
  sub_100003470(&v2, "\n  <EXECUTABLE> <COMMAND> [--preserve] [--templateDir <dir>] [--debug]\n  <EXECUTABLE> <COMMAND> [--preserve] <path-to-pattern-schema> [<output-pattern-schema>] [--debug]\n\n      Convert a pattern schema file to binary format. This may be called with two different paths,\n      or a single path to convert in place. Or you can provide a Templates directory to\n      convert all of the schema files under that directory.\n\n      --templateDir        A Templates directory to walk recursively to find all pattern schema files\n      --debug              Output debug log messages\n      --optimize           Remove data from the file that's not needed for deployment, e.g., descriptions\n      --preserve           Keep existing binary/YAML files if present; otherwise they are deleted\n"
    "      <path-to-pattern-schema> The path to a schema directory, a .patternschema file\n"
    "      <output-pattern-schema>  An optional path to a different .patternschemabin file for the converted file\n");
  sub_100003470(&__p, "tobinarypatternschema");
  sub_10003B430();
  if (v1 < 0) {
    operator delete(__p);
  }
  if (v3 < 0) {
    operator delete(v2);
  }
}

void sub_10002BA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002BA74(uint64_t a1)
{
  sub_100003470(v4, "tobinarypatternschema");
  sub_100003470(__p, "Convert a pattern schema file to binary format.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10002BAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002BB20()
{
  sub_100003470(&v2, "\n  <EXECUTABLE> <COMMAND> [--preserve] [--templateDir <dir>] [--debug]\n  <EXECUTABLE> <COMMAND> [--preserve] <path-to-pattern-schema> [<output-pattern-schema>] [--debug]\n\n      Convert a pattern schema file to YAML format. This may be called with two different paths,\n      or a single path to convert in place. Or you can provide a Templates directory to\n      convert all of the schema files under that directory.\n\n      --templateDir        A Templates directory to walk recursively to find all pattern schema files\n      --debug              Output debug log messages\n      --preserve           Keep existing binary/YAML files if present; otherwise they are deleted\n"
    "      <path-to-pattern-schema> The path to a schema directory, a .patternschema file\n"
    "      <output-pattern-schema>  An optional path to a different .patternschemabin file for the converted file\n");
  sub_100003470(&__p, "toyamlpatternschema");
  sub_10003B430();
  if (v1 < 0) {
    operator delete(__p);
  }
  if (v3 < 0) {
    operator delete(v2);
  }
}

void sub_10002BB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002BBCC(uint64_t a1)
{
  sub_100003470(v4, "toyamlpatternschema");
  sub_100003470(__p, "Convert a pattern schema file to YAML format.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10002BC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002BC78(uint64_t a1)
{
  if (siri::dialogengine::DirExists())
  {
    siri::dialogengine::GetCatLocales();
    if (v55 == v54)
    {
      std::string v42 = sub_1000042E0(&std::cout, (uint64_t)"Error: can't find any locales in CAT file: ", 43);
      int v43 = *(char *)(a1 + 23);
      if (v43 >= 0) {
        uint64_t v44 = a1;
      }
      else {
        uint64_t v44 = *(void *)a1;
      }
      if (v43 >= 0) {
        uint64_t v45 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v45 = *(void *)(a1 + 8);
      }
      char v46 = sub_1000042E0(v42, v44, v45);
      std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
      long long v47 = std::locale::use_facet(&v52, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
      std::locale::~locale(&v52);
      std::ostream::put();
      std::ostream::flush();
      char v18 = 0;
    }
    else
    {
      uint64_t v2 = sub_1000042E0(&std::cout, (uint64_t)"Converting ", 11);
      int v3 = *(char *)(a1 + 23);
      if (v3 >= 0) {
        uint64_t v4 = a1;
      }
      else {
        uint64_t v4 = *(void *)a1;
      }
      if (v3 >= 0) {
        uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v5 = *(void *)(a1 + 8);
      }
      uint64_t v6 = sub_1000042E0(v2, v4, v5);
      long long v7 = sub_1000042E0(v6, (uint64_t)" to ", 4);
      int v8 = *(_DWORD *)(a1 + 96);
      if (v8) {
        uint64_t v9 = "BINARY";
      }
      else {
        uint64_t v9 = "XML";
      }
      if (v8) {
        uint64_t v10 = 6;
      }
      else {
        uint64_t v10 = 3;
      }
      uint64_t v11 = sub_1000042E0(v7, (uint64_t)v9, v10);
      if (*(unsigned char *)(a1 + 100)) {
        uint64_t v12 = " (preserve existing)";
      }
      else {
        uint64_t v12 = " (delete existing)";
      }
      if (*(unsigned char *)(a1 + 100)) {
        uint64_t v13 = 20;
      }
      else {
        uint64_t v13 = 18;
      }
      unint64_t v14 = sub_1000042E0(v11, (uint64_t)v12, v13);
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
      uint64_t v15 = std::locale::use_facet(&v52, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(&v52);
      std::ostream::put();
      std::ostream::flush();
      sub_10002C688(a1);
      uint64_t v16 = v54;
      uint64_t v17 = v55;
      if (v54 != v55)
      {
        char v18 = 1;
        while (1)
        {
          if (*(char *)(v16 + 23) < 0)
          {
            sub_100003600(&__dst, *(void **)v16, *(void *)(v16 + 8));
          }
          else
          {
            long long v19 = *(_OWORD *)v16;
            uint64_t v65 = *(void *)(v16 + 16);
            long long __dst = v19;
          }
          v56.__locale_ = 0;
          locale = 0;
          std::string::size_type v58 = 0;
          std::string __p = &v56;
          LOBYTE(v50) = 0;
          v56.__locale_ = (std::locale::__imp *)operator new(0x18uLL);
          locale = v56.__locale_;
          std::string::size_type v58 = (char *)v56.__locale_ + 24;
          locale = sub_100008D8C((uint64_t)&v58, &__dst, &v66, (char *)v56.__locale_);
          siri::dialogengine::FindLocaleFile();
          std::string __p = &v56;
          sub_100003B14((void ***)&__p);
          if (SHIBYTE(v65) < 0) {
            operator delete((void *)__dst);
          }
          siri::dialogengine::ChangeCATExtension();
          siri::dialogengine::ChangeCATExtension();
          sub_10002F7B8(a1, (uint64_t)&v56, (uint64_t)&__dst);
          if (SHIBYTE(v65) < 0) {
            operator delete((void *)__dst);
          }
          if (SHIBYTE(v58) < 0) {
            operator delete(v56.__locale_);
          }
          if (v53 < 0) {
            operator delete(v52.__locale_);
          }
          siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v52);
          siri::dialogengine::FindParamsFile();
          if (*(char *)(v16 + 23) < 0)
          {
            sub_100003600(&v61, *(void **)v16, *(void *)(v16 + 8));
          }
          else
          {
            long long v20 = *(_OWORD *)v16;
            uint64_t v62 = *(void *)(v16 + 16);
            long long v61 = v20;
          }
          std::string __p = 0;
          uint64_t v50 = 0;
          std::string::size_type v51 = 0;
          p_p = &__p;
          LOBYTE(v60) = 0;
          std::string __p = operator new(0x18uLL);
          uint64_t v50 = __p;
          std::string::size_type v51 = (char *)__p + 24;
          uint64_t v50 = sub_100008D8C((uint64_t)&v51, &v61, (long long *)&v63, (char *)__p);
          siri::dialogengine::FindLocaleFile();
          char Files = siri::dialogengine::Context::LoadFiles();
          if (SHIBYTE(v65) < 0) {
            operator delete((void *)__dst);
          }
          p_p = &__p;
          sub_100003B14(&p_p);
          if (SHIBYTE(v62) < 0) {
            operator delete((void *)v61);
          }
          if (SHIBYTE(v58) < 0)
          {
            operator delete(v56.__locale_);
            if ((Files & 1) == 0)
            {
LABEL_51:
              uint64_t v22 = sub_1000042E0(&std::cout, (uint64_t)"Error: unable to load CAT file: ", 32);
              uint64_t v23 = *(unsigned __int8 *)(a1 + 23);
              uint64_t v24 = *(void *)(a1 + 8);
              BOOL v25 = (v23 & 0x80u) != 0;
              if ((v23 & 0x80u) == 0) {
                uint64_t v26 = a1;
              }
              else {
                uint64_t v26 = *(void *)a1;
              }
              goto LABEL_57;
            }
          }
          else if ((Files & 1) == 0)
          {
            goto LABEL_51;
          }
          if (siri::dialogengine::Context::Save())
          {
            if (!*(unsigned char *)(a1 + 100))
            {
              siri::dialogengine::Context::GetFile((uint64_t *)&p_p, (siri::dialogengine::Context *)&v52);
              if (p_p)
              {
                siri::dialogengine::File::GetParamsFilename((uint64_t *)&__p, (siri::dialogengine::File *)p_p);
                siri::dialogengine::BaseName();
                siri::dialogengine::JoinPath();
                if (SHIBYTE(v65) < 0) {
                  operator delete((void *)__dst);
                }
                if (SHIBYTE(v51) < 0) {
                  operator delete(__p);
                }
              }
              else
              {
                sub_100003470(&v56, (char *)&unk_10006DFE2);
              }
              if (p_p)
              {
                siri::dialogengine::File::GetLocaleFilename((uint64_t *)&v61, (siri::dialogengine::File *)p_p);
                siri::dialogengine::BaseName();
                siri::dialogengine::JoinPath();
                if (SHIBYTE(v51) < 0) {
                  operator delete(__p);
                }
                if (SHIBYTE(v62) < 0) {
                  operator delete((void *)v61);
                }
              }
              else
              {
                sub_100003470(&__dst, (char *)&unk_10006DFE2);
              }
              if (siri::dialogengine::HasCATExtension() && siri::dialogengine::FileExists()) {
                siri::dialogengine::DeleteFile();
              }
              if (siri::dialogengine::HasCATExtension() && siri::dialogengine::FileExists()) {
                siri::dialogengine::DeleteFile();
              }
              if (SHIBYTE(v65) < 0) {
                operator delete((void *)__dst);
              }
              if (SHIBYTE(v58) < 0) {
                operator delete(v56.__locale_);
              }
              if (v60) {
                sub_100006AE0(v60);
              }
            }
            goto LABEL_67;
          }
          uint64_t v22 = sub_1000042E0(&std::cout, (uint64_t)"Error: unable to save CAT file: ", 32);
          uint64_t v23 = *(unsigned __int8 *)(a1 + 47);
          uint64_t v24 = *(void *)(a1 + 32);
          BOOL v25 = (v23 & 0x80u) != 0;
          if ((v23 & 0x80u) == 0) {
            uint64_t v26 = a1 + 24;
          }
          else {
            uint64_t v26 = *(void *)(a1 + 24);
          }
LABEL_57:
          if (v25) {
            uint64_t v27 = v24;
          }
          else {
            uint64_t v27 = v23;
          }
          long long v28 = sub_1000042E0(v22, v26, v27);
          uint64_t v29 = sub_1000042E0(v28, (uint64_t)" (", 2);
          int v30 = *(char *)(v16 + 23);
          if (v30 >= 0) {
            uint64_t v31 = (void *)v16;
          }
          else {
            uint64_t v31 = *(void **)v16;
          }
          if (v30 >= 0) {
            uint64_t v32 = *(unsigned __int8 *)(v16 + 23);
          }
          else {
            uint64_t v32 = *(void *)(v16 + 8);
          }
          std::string::size_type v33 = sub_1000042E0(v29, (uint64_t)v31, v32);
          long long v34 = sub_1000042E0(v33, (uint64_t)")  Skipping...", 14);
          std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
          long long v35 = std::locale::use_facet(&v56, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
          std::locale::~locale(&v56);
          std::ostream::put();
          std::ostream::flush();
          char v18 = 0;
LABEL_67:
          siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v52);
          v16 += 24;
          if (v16 == v17) {
            goto LABEL_103;
          }
        }
      }
      char v18 = 1;
    }
LABEL_103:
    v52.__locale_ = (std::locale::__imp *)&v54;
    sub_100003B14((void ***)&v52);
  }
  else
  {
    uint64_t v36 = sub_1000042E0(&std::cout, (uint64_t)"Error: can't find input CAT file: ", 34);
    int v37 = *(char *)(a1 + 23);
    if (v37 >= 0) {
      uint64_t v38 = a1;
    }
    else {
      uint64_t v38 = *(void *)a1;
    }
    if (v37 >= 0) {
      uint64_t v39 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v39 = *(void *)(a1 + 8);
    }
    std::string::size_type v40 = sub_1000042E0(v36, v38, v39);
    std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(*v40 - 24)));
    std::string v41 = std::locale::use_facet(&v52, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
    std::locale::~locale(&v52);
    std::ostream::put();
    std::ostream::flush();
    char v18 = 0;
  }
  return v18 & 1;
}

void sub_10002C47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 177) < 0) {
    operator delete(*(void **)(v22 - 200));
  }
  uint64_t v24 = *(std::__shared_weak_count **)(v22 - 168);
  if (v24) {
    sub_100006AE0(v24);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a17);
  *(void *)(v22 - 128) = v22 - 224;
  sub_100003B14((void ***)(v22 - 128));
  _Unwind_Resume(a1);
}

void sub_10002C688(uint64_t a1)
{
  sub_100003470(__p, "_params.cat.xml");
  siri::dialogengine::JoinPath();
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_100003470(&v2, "_params.cat.bin");
  siri::dialogengine::JoinPath();
  if (v3 < 0) {
    operator delete(v2);
  }
  sub_10002F7B8(a1, (uint64_t)&v6, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
}

void sub_10002C740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002C79C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = *a1;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  if (v6 >= 3)
  {
    int v8 = sub_10003B18C();
    uint64_t v5 = *a1;
    uint64_t v9 = (long long *)a1[1];
    if (!v8)
    {
      sub_10002B1D0((uint64_t)&v77, (long long *)(v5 + 24), v9, v5);
      uint64_t v12 = v11;
      uint64_t v13 = (long long *)a1[1];
      if (v13 != v11)
      {
        do
        {
          if (*((char *)v13 - 1) < 0) {
            operator delete(*((void **)v13 - 3));
          }
          uint64_t v13 = (long long *)((char *)v13 - 24);
        }
        while (v13 != v12);
      }
      a1[1] = (uint64_t)v12;
      uint64_t v14 = *a1;
      if ((*(char *)(*a1 + 23) & 0x80000000) == 0)
      {
        uint64_t result = 0;
        int v16 = *(unsigned __int8 *)(*a1 + 23);
        switch(*(unsigned char *)(*a1 + 23))
        {
          case 5:
            uint64_t result = 0;
            if (*(_DWORD *)v14 == 1836609396 && *(unsigned char *)(v14 + 4) == 108) {
              goto LABEL_40;
            }
            return result;
          case 6:
          case 7:
          case 9:
          case 0xA:
          case 0xB:
          case 0xD:
            return result;
          case 8:
            std::string v41 = *(uint64_t **)v14;
            goto LABEL_125;
          case 0xC:
            if (*(void *)v14 == 0x63736C6D61796F74 && *(_DWORD *)(v14 + 8) == 1634559336) {
              goto LABEL_157;
            }
            if ((v16 & 0x80) != 0) {
              goto LABEL_136;
            }
            return 0;
          case 0xE:
            if (*(void *)v14 != 0x7972616E69626F74 || *(void *)(v14 + 6) != 0x616D656863737972) {
              return 0;
            }
            goto LABEL_159;
          default:
            uint64_t v23 = (uint64_t *)*a1;
            if (v16 == 19) {
              goto LABEL_148;
            }
            if (v16 != 21) {
              return result;
            }
            if (*(void *)v14 != 0x7972616E69626F74
              || *(void *)(v14 + 8) != 0x736E726574746170
              || *(void *)(v14 + 13) != 0x616D656863736E72)
            {
              return 0;
            }
            goto LABEL_160;
        }
      }
      uint64_t v19 = *(void *)(v14 + 8);
      switch(v19)
      {
        case 5:
          uint64_t result = 0;
          if (**(_DWORD **)v14 == 1836609396 && *(unsigned char *)(*(void *)v14 + 4) == 108)
          {
LABEL_40:
            int v21 = 0;
            goto LABEL_161;
          }
          return result;
        case 8:
          std::string v41 = **(uint64_t ***)v14;
LABEL_125:
          if (v41 != (uint64_t *)0x7972616E69626F74) {
            return 0;
          }
          int v21 = 1;
          goto LABEL_161;
        case 12:
          goto LABEL_132;
        case 14:
          if (**(void **)v14 == 0x7972616E69626F74 && *(void *)(*(void *)v14 + 6) == 0x616D656863737972)
          {
LABEL_159:
            int v21 = 4;
            goto LABEL_161;
          }
          if (v19 == 12)
          {
LABEL_132:
            if (**(void **)v14 == 0x63736C6D61796F74 && *(_DWORD *)(*(void *)v14 + 8) == 1634559336)
            {
LABEL_157:
              int v21 = 3;
              goto LABEL_161;
            }
LABEL_136:
            uint64_t v19 = *(void *)(v14 + 8);
          }
LABEL_137:
          if (v19 != 21) {
            goto LABEL_146;
          }
          if (**(void **)v14 == 0x7972616E69626F74
            && *(void *)(*(void *)v14 + 8) == 0x736E726574746170
            && *(void *)(*(void *)v14 + 13) == 0x616D656863736E72)
          {
LABEL_160:
            int v21 = 6;
          }
          else
          {
            uint64_t v19 = *(void *)(v14 + 8);
LABEL_146:
            if (v19 != 19) {
              return 0;
            }
            uint64_t v23 = *(uint64_t **)v14;
LABEL_148:
            uint64_t v48 = *v23;
            uint64_t v49 = v23[1];
            uint64_t v50 = *(uint64_t *)((char *)v23 + 11);
            BOOL v51 = v48 == 0x61706C6D61796F74 && v49 == 0x6863736E72657474;
            if (!v51 || v50 != 0x616D656863736E72) {
              return 0;
            }
            int v21 = 5;
          }
LABEL_161:
          *(_DWORD *)(a3 + 96) = v21;
          sub_10002B1D0((uint64_t)&v77, (long long *)(v14 + 24), v12, v14);
          uint64_t v54 = v53;
          uint64_t v55 = a1[1];
          if (v55 != v53)
          {
            do
            {
              if (*(char *)(v55 - 1) < 0) {
                operator delete(*(void **)(v55 - 24));
              }
              v55 -= 24;
            }
            while (v55 != v54);
          }
          a1[1] = v54;
          sub_100003470(&v77, "--preserve");
          *(unsigned char *)(a3 + 100) = siri::dialogengine::PopOption();
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v77.__r_.__value_.__l.__data_);
          }
          sub_100003470(&v77, "--optimize");
          *(unsigned char *)(a3 + 101) = siri::dialogengine::PopOption();
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v77.__r_.__value_.__l.__data_);
          }
          sub_100003470(&v77, "--debug");
          *(unsigned char *)(a3 + 102) = siri::dialogengine::PopOption();
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v77.__r_.__value_.__l.__data_);
          }
          sub_100003470(__p, "--templateDir");
          siri::dialogengine::PopStringOption();
          std::locale v56 = (void **)(a3 + 72);
          if (*(char *)(a3 + 95) < 0) {
            operator delete(*v56);
          }
          *(_OWORD *)std::locale v56 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
          *(void *)(a3 + 88) = *((void *)&v77.__r_.__value_.__l + 2);
          *((unsigned char *)&v77.__r_.__value_.__s + 23) = 0;
          v77.__r_.__value_.__s.__data_[0] = 0;
          if (v76 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v57 = *a1;
          std::string::size_type v58 = (long long *)a1[1];
          if ((long long *)*a1 == v58)
          {
            std::string::size_type v58 = (long long *)*a1;
          }
          else
          {
            while (1)
            {
              int v59 = *(char *)(v57 + 23) >= 0 ? (unsigned char *)v57 : *(unsigned char **)v57;
              if (*v59 == 45) {
                break;
              }
              v57 += 24;
              if ((long long *)v57 == v58)
              {
                uint64_t v57 = a1[1];
                goto LABEL_194;
              }
            }
            if ((long long *)v57 != v58)
            {
              uint64_t v60 = v57 + 24;
              if ((long long *)(v57 + 24) != v58)
              {
                do
                {
                  if (*(char *)(v60 + 23) >= 0) {
                    long long v61 = (unsigned char *)v60;
                  }
                  else {
                    long long v61 = *(unsigned char **)v60;
                  }
                  if (*v61 != 45)
                  {
                    if (*(char *)(v57 + 23) < 0) {
                      operator delete(*(void **)v57);
                    }
                    long long v62 = *(_OWORD *)v60;
                    *(void *)(v57 + 16) = *(void *)(v60 + 16);
                    *(_OWORD *)uint64_t v57 = v62;
                    v57 += 24;
                    *(unsigned char *)(v60 + 23) = 0;
                    *(unsigned char *)uint64_t v60 = 0;
                  }
                  v60 += 24;
                }
                while ((long long *)v60 != v58);
                std::string::size_type v58 = (long long *)a1[1];
              }
            }
          }
LABEL_194:
          sub_10002D3D8((uint64_t)a1, v57, v58);
          if (*a1 == a1[1])
          {
            if (*(char *)(a3 + 95) < 0) {
              uint64_t v66 = *(void *)(a3 + 80);
            }
            else {
              uint64_t v66 = *(unsigned __int8 *)(a3 + 95);
            }
            if (!v66)
            {
              memset(&v77, 0, sizeof(v77));
              uint64_t v67 = *(int *)(a3 + 96);
              if (v67 >= 7) {
                char v68 = "UNKNOWN";
              }
              else {
                char v68 = off_10007D068[v67];
              }
              std::string::assign(&v77, v68);
              std::string::size_type v69 = sub_1000042E0(&std::cout, (uint64_t)"Error: insufficient arguments specified for catutil ", 52);
              if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v70 = &v77;
              }
              else {
                uint64_t v70 = (std::string *)v77.__r_.__value_.__r.__words[0];
              }
              if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v77.__r_.__value_.__l.__size_;
              }
              long long v72 = sub_1000042E0(v69, (uint64_t)v70, size);
              std::ios_base::getloc((const std::ios_base *)((char *)v72 + *(void *)(*v72 - 24)));
              uint64_t v73 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10);
              std::locale::~locale((std::locale *)__p);
              std::ostream::put();
              std::ostream::flush();
              if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                return 0;
              }
              std::string::size_type v40 = (void *)v77.__r_.__value_.__r.__words[0];
              goto LABEL_106;
            }
          }
          else
          {
            std::string::operator=((std::string *)a3, (const std::string *)*a1);
            std::string::operator=((std::string *)(a3 + 24), (const std::string *)*a1);
            sub_10002B1D0((uint64_t)&v77, (long long *)(*a1 + 24), (long long *)a1[1], *a1);
            uint64_t v64 = v63;
            uint64_t v65 = a1[1];
            if (v65 != v63)
            {
              do
              {
                if (*(char *)(v65 - 1) < 0) {
                  operator delete(*(void **)(v65 - 24));
                }
                v65 -= 24;
              }
              while (v65 != v64);
            }
            a1[1] = v64;
            if (*a1 != v64)
            {
              std::string::operator=((std::string *)(a3 + 24), (const std::string *)*a1);
              std::string::operator=((std::string *)(a3 + 48), (const std::string *)*a1);
            }
          }
          return 1;
        default:
          goto LABEL_137;
      }
    }
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - v5) >> 3);
  }
  memset(&v74, 0, sizeof(v74));
  if (v6 > 1)
  {
    std::string::operator=(&v74, (const std::string *)(v5 + 24));
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      switch(*((unsigned char *)&v74.__r_.__value_.__s + 23))
      {
        case 5:
          if (LODWORD(v74.__r_.__value_.__l.__data_) != 1836609396 || v74.__r_.__value_.__s.__data_[4] != 108) {
            goto LABEL_101;
          }
          goto LABEL_32;
        case 6:
        case 7:
        case 9:
        case 0xA:
        case 0xB:
        case 0xD:
          goto LABEL_101;
        case 8:
          if (v74.__r_.__value_.__r.__words[0] == 0x7972616E69626F74) {
            goto LABEL_110;
          }
          goto LABEL_101;
        case 0xC:
          if (v74.__r_.__value_.__r.__words[0] != 0x63736C6D61796F74
            || LODWORD(v74.__r_.__value_.__r.__words[1]) != 1634559336)
          {
            goto LABEL_101;
          }
          goto LABEL_84;
        case 0xE:
          if (v74.__r_.__value_.__r.__words[0] != 0x7972616E69626F74
            || *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words + 6) != 0x616D656863737972)
          {
            goto LABEL_101;
          }
          goto LABEL_90;
        default:
          uint64_t v22 = &v74;
          if (HIBYTE(v74.__r_.__value_.__r.__words[2]) == 19) {
            goto LABEL_56;
          }
          if (HIBYTE(v74.__r_.__value_.__r.__words[2]) != 21) {
            goto LABEL_101;
          }
          goto LABEL_94;
      }
    }
    switch(v74.__r_.__value_.__l.__size_)
    {
      case 5uLL:
        if (*(_DWORD *)v74.__r_.__value_.__l.__data_ != 1836609396
          || *(unsigned char *)(v74.__r_.__value_.__r.__words[0] + 4) != 108)
        {
          goto LABEL_92;
        }
LABEL_32:
        sub_10003B17C(a2);
        sub_100003470(&v77, "\n  <EXECUTABLE> <COMMAND> [--preserve] [--templateDir <dir>] [--debug]\n  <EXECUTABLE> <COMMAND> [--preserve] <path-to-cat-folder> [<output-cat-folder>] [--debug]\n\n      Convert a CAT file to XML format, or all CAT files under a Templates directory.\n      If the CAT file is already XML it will be re-written in a canonical layout.\n      May be called with a --templateDir option, or two different CAT paths, or a\n      single CAT path to convert in place.\n      Converting Visual CAT binary to XML is not yet supported (rdar://74030512)\n\n      --templateDir        A Templates directory to walk recursively to find all CAT files\n      --debug              Output debug log messages\n      --preserve           Keep existing binary/XML files if present; otherwise they are deleted\n"
          "      <path-to-cat-folder> The path to a .cat directory\n"
          "      <output-cat-folder>  An optional path to a different .cat directory for the converted files\n");
        sub_100003470(__p, "toxml");
        sub_10003B430();
        if (v76 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_102;
      case 6uLL:
      case 7uLL:
      case 9uLL:
      case 0xAuLL:
      case 0xBuLL:
      case 0xDuLL:
        goto LABEL_92;
      case 8uLL:
        if (*(void *)v74.__r_.__value_.__l.__data_ != 0x7972616E69626F74) {
          goto LABEL_92;
        }
LABEL_110:
        sub_10003B17C(a2);
        sub_10002B66C();
        goto LABEL_104;
      case 0xCuLL:
        if (*(void *)v74.__r_.__value_.__l.__data_ != 0x63736C6D61796F74
          || *(_DWORD *)(v74.__r_.__value_.__r.__words[0] + 8) != 1634559336)
        {
          goto LABEL_92;
        }
LABEL_84:
        sub_10003B17C(a2);
        sub_10002B870();
        goto LABEL_104;
      case 0xEuLL:
        if (*(void *)v74.__r_.__value_.__l.__data_ != 0x7972616E69626F74
          || *(void *)(v74.__r_.__value_.__r.__words[0] + 6) != 0x616D656863737972)
        {
          goto LABEL_92;
        }
LABEL_90:
        sub_10003B17C(a2);
        sub_10002B718();
        goto LABEL_104;
      default:
        if (v74.__r_.__value_.__l.__size_ != 19) {
          goto LABEL_92;
        }
        uint64_t v22 = (std::string *)v74.__r_.__value_.__r.__words[0];
LABEL_56:
        std::string::size_type v26 = v22->__r_.__value_.__r.__words[0];
        std::string::size_type v27 = v22->__r_.__value_.__l.__size_;
        uint64_t v28 = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 3);
        if (v26 == 0x61706C6D61796F74 && v27 == 0x6863736E72657474 && v28 == 0x616D656863736E72)
        {
          sub_10003B17C(a2);
          sub_10002BB20();
          goto LABEL_104;
        }
        if ((*((unsigned char *)&v74.__r_.__value_.__s + 23) & 0x80) == 0) {
          break;
        }
LABEL_92:
        if (v74.__r_.__value_.__l.__size_ == 21)
        {
          uint64_t v22 = (std::string *)v74.__r_.__value_.__r.__words[0];
LABEL_94:
          std::string::size_type v35 = v22->__r_.__value_.__r.__words[0];
          std::string::size_type v36 = v22->__r_.__value_.__l.__size_;
          uint64_t v37 = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 5);
          BOOL v38 = v35 == 0x7972616E69626F74 && v36 == 0x736E726574746170;
          if (v38 && v37 == 0x616D656863736E72)
          {
            sub_10003B17C(a2);
            sub_10002B9C8();
            goto LABEL_104;
          }
        }
        break;
    }
  }
LABEL_101:
  std::operator+<char>();
  siri::dialogengine::Log::Error();
LABEL_102:
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
LABEL_104:
  if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return 0;
  }
  std::string::size_type v40 = (void *)v74.__r_.__value_.__r.__words[0];
LABEL_106:
  operator delete(v40);
  return 0;
}

void sub_10002D2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002D3D8(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    sub_10002B1D0((uint64_t)&v9, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_10002D460(long long **a1, uint64_t a2)
{
  sub_100003470(v38, (char *)&unk_10006DFE2);
  sub_100003470(&v40, (char *)&unk_10006DFE2);
  sub_100003470(&v42, (char *)&unk_10006DFE2);
  sub_100003470(v44, (char *)&unk_10006DFE2);
  memset(v46, 0, 7);
  memset(v37, 0, sizeof(v37));
  sub_100003898((char *)v37, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  LOBYTE(a2) = sub_10002C79C(v37, a2, (uint64_t)v38);
  v35[0] = v37;
  sub_100003B14((void ***)v35);
  if ((a2 & 1) == 0)
  {
    uint64_t v10 = 0;
    goto LABEL_65;
  }
  if (BYTE2(v46[1]))
  {
    siri::dialogengine::Log::SetLogDebugMessages((siri::dialogengine::Log *)1, v4);
    siri::dialogengine::Log::SetOutputToStdout((siri::dialogengine::Log *)1, v5);
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Activate debug mode", v6);
  }
  unint64_t v7 = v45;
  if ((v45 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)v44[1];
  }
  if (v7)
  {
    switch(v46[0])
    {
      case 3:
        sub_100003470(&__p, "schema");
        siri::dialogengine::JoinPath();
        if (v34 < 0) {
          operator delete(__p);
        }
        siri::dialogengine::ListDirRecursively();
        int v8 = (char *)__p;
        char v9 = v33;
        while (v8 != v9)
        {
          if (siri::dialogengine::HasSchemaExtension())
          {
            siri::dialogengine::JoinPath();
            sub_10002DCC4();
            if (v31 < 0) {
              operator delete(v30[0]);
            }
          }
          v8 += 24;
        }
        goto LABEL_61;
      case 4:
        sub_100003470(&__p, "schema");
        siri::dialogengine::JoinPath();
        if (v34 < 0) {
          operator delete(__p);
        }
        siri::dialogengine::ListDirRecursively();
        uint64_t v17 = (char *)__p;
        char v18 = v33;
        while (v17 != v18)
        {
          if (siri::dialogengine::HasSchemaExtension())
          {
            siri::dialogengine::JoinPath();
            sub_10002DCC4();
            if (v31 < 0) {
              operator delete(v30[0]);
            }
          }
          v17 += 24;
        }
        goto LABEL_61;
      case 5:
        sub_100003470(&__p, "schema");
        siri::dialogengine::JoinPath();
        if (v34 < 0) {
          operator delete(__p);
        }
        siri::dialogengine::ListDirRecursively();
        uint64_t v19 = (char *)__p;
        long long v20 = v33;
        while (v19 != v20)
        {
          if (siri::dialogengine::HasPatternSchemaExtension())
          {
            siri::dialogengine::JoinPath();
            sub_10002DCC4();
            if (v31 < 0) {
              operator delete(v30[0]);
            }
          }
          v19 += 24;
        }
        goto LABEL_61;
      case 6:
        sub_100003470(&__p, "schema");
        siri::dialogengine::JoinPath();
        if (v34 < 0) {
          operator delete(__p);
        }
        siri::dialogengine::ListDirRecursively();
        int v21 = (char *)__p;
        uint64_t v22 = v33;
        while (v21 != v22)
        {
          if (siri::dialogengine::HasPatternSchemaExtension())
          {
            siri::dialogengine::JoinPath();
            sub_10002DCC4();
            if (v31 < 0) {
              operator delete(v30[0]);
            }
          }
          v21 += 24;
        }
LABEL_61:
        v30[0] = &__p;
        sub_100003B14((void ***)v30);
        goto LABEL_62;
      default:
        sub_100003470(&__p, "dialog");
        siri::dialogengine::JoinPath();
        if (v34 < 0) {
          operator delete(__p);
        }
        siri::dialogengine::ListDirRecursively();
        uint64_t v11 = (char *)__p;
        uint64_t v12 = v33;
        if (__p == v33) {
          goto LABEL_29;
        }
        break;
    }
    while (1)
    {
      sub_100003470(v30, "cat");
      HasExtensiouint64_t n = siri::dialogengine::HasExtension();
      int v14 = HasExtension;
      if (v31 < 0)
      {
        operator delete(v30[0]);
        if (v14)
        {
LABEL_26:
          siri::dialogengine::JoinPath();
          sub_10002DCC4();
          if (v31 < 0) {
            operator delete(v30[0]);
          }
        }
      }
      else if (HasExtension)
      {
        goto LABEL_26;
      }
      v11 += 24;
      if (v11 == v12)
      {
LABEL_29:
        v30[0] = &__p;
        sub_100003B14((void ***)v30);
        sub_100003470(v30, "pattern");
        siri::dialogengine::JoinPath();
        if (v31 < 0) {
          operator delete(v30[0]);
        }
        siri::dialogengine::ListDirRecursively();
        uint64_t v15 = (char *)v30[0];
        int v16 = (char *)v30[1];
        while (v15 != v16)
        {
          if (siri::dialogengine::HasPatternExtension())
          {
            siri::dialogengine::JoinPath();
            sub_10002DCC4();
            if (v29 < 0) {
              operator delete(v28[0]);
            }
          }
          v15 += 24;
        }
        v28[0] = v30;
        sub_100003B14((void ***)v28);
        sub_100003470(v28, "visual");
        siri::dialogengine::JoinPath();
        if (v29 < 0) {
          operator delete(v28[0]);
        }
        siri::dialogengine::ListDirRecursively();
        uint64_t v24 = (char *)v28[0];
        BOOL v25 = (char *)v28[1];
        while (v24 != v25)
        {
          if (siri::dialogengine::HasVisualCATExtension())
          {
            siri::dialogengine::JoinPath();
            sub_10002DCC4();
            if (v27 < 0) {
              operator delete(v26);
            }
          }
          v24 += 24;
        }
        std::string::size_type v26 = v28;
        sub_100003B14((void ***)&v26);
        if (v31 < 0) {
          operator delete(v30[0]);
        }
        if (v34 < 0) {
          operator delete(__p);
        }
LABEL_62:
        if (v36 < 0) {
          operator delete(v35[0]);
        }
        uint64_t v10 = 1;
        goto LABEL_65;
      }
    }
  }
  sub_100003470(v35, (char *)&unk_10006DFE2);
  uint64_t v10 = sub_10002DCC4();
  if (v36 < 0) {
    operator delete(v35[0]);
  }
LABEL_65:
  if ((char)v45 < 0) {
    operator delete(v44[0]);
  }
  if (v43 < 0) {
    operator delete(v42);
  }
  if (v41 < 0) {
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  return v10;
}

void sub_10002DAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  sub_10002F754((uint64_t)&a43);
  _Unwind_Resume(a1);
}

uint64_t sub_10002DCC4()
{
  uint64_t v0 = (long long *)__chkstk_darwin();
  uint64_t v2 = v1;
  sub_10002F8CC((char *)&v117, v0);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  if (v3)
  {
    std::string::operator=(&v117, (const std::string *)v2);
    std::string::operator=(&v118, (const std::string *)v2);
  }
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    sub_100003600(&v116, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
  }
  else {
    std::string v116 = v117;
  }
  if (siri::dialogengine::HasPatternExtension())
  {
    sub_10002C688((uint64_t)&v117);
    BOOL v4 = sub_1000042E0(&std::cout, (uint64_t)"Converting ", 11);
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v5 = &v117;
    }
    else {
      BOOL v5 = (std::string *)v117.__r_.__value_.__r.__words[0];
    }
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v117.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v117.__r_.__value_.__l.__size_;
    }
    unint64_t v7 = sub_1000042E0(v4, (uint64_t)v5, size);
    int v8 = sub_1000042E0(v7, (uint64_t)" to ", 4);
    if (v122) {
      char v9 = "BINARY";
    }
    else {
      char v9 = "XML";
    }
    if (v122) {
      uint64_t v10 = 6;
    }
    else {
      uint64_t v10 = 3;
    }
    uint64_t v11 = sub_1000042E0(v8, (uint64_t)v9, v10);
    if (v123) {
      uint64_t v12 = " (preserve existing)";
    }
    else {
      uint64_t v12 = " (delete existing)";
    }
    if (v123) {
      uint64_t v13 = 20;
    }
    else {
      uint64_t v13 = 18;
    }
    int v14 = sub_1000042E0(v11, (uint64_t)v12, v13);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
    uint64_t v15 = std::locale::use_facet(&v132, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v132);
    std::ostream::put();
    std::ostream::flush();
    siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v132);
    siri::dialogengine::PatternFile::LoadFromPath();
    if (__str.__r_.__value_.__r.__words[0])
    {
      int v16 = &v118;
      char v17 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v18 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v18 = v118.__r_.__value_.__l.__size_;
      }
      uint64_t v19 = 24;
      if (!v18)
      {
        uint64_t v19 = 0;
        int v16 = &v117;
        char v17 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
      }
      if (v17 < 0)
      {
        if (v18) {
          std::string::size_type v70 = v118.__r_.__value_.__l.__size_;
        }
        else {
          std::string::size_type v70 = v117.__r_.__value_.__l.__size_;
        }
        sub_100003600(__dst, *(void **)((char *)&v117.__r_.__value_.__l.__data_ + v19), v70);
      }
      else
      {
        *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        int64_t v125 = v16->__r_.__value_.__r.__words[2];
      }
      siri::dialogengine::ChangePatternExtension();
      if (SHIBYTE(v125) < 0) {
        operator delete(__dst[0].__locale_);
      }
      *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      int64_t v125 = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v127.__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (__str.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v51 = siri::dialogengine::PatternFile::Save();
      if (v127.__r_.__value_.__l.__size_) {
        sub_100006AE0((std::__shared_weak_count *)v127.__r_.__value_.__l.__size_);
      }
      if (v51)
      {
        if (!v123)
        {
          siri::dialogengine::ChangePatternExtension();
          siri::dialogengine::DeleteFile();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
        size_t v71 = sub_1000042E0(&std::cout, (uint64_t)"Error: failed to save Pattern file: ", 36);
        if (v125 >= 0) {
          locale = __dst;
        }
        else {
          locale = __dst[0].__locale_;
        }
        if (v125 >= 0) {
          uint64_t v73 = HIBYTE(v125);
        }
        else {
          uint64_t v73 = (uint64_t)__dst[1].__locale_;
        }
        std::string v74 = sub_1000042E0(v71, (uint64_t)locale, v73);
        std::ios_base::getloc((const std::ios_base *)((char *)v74 + *(void *)(*v74 - 24)));
        std::string::size_type v75 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
      }
      if (SHIBYTE(v125) < 0) {
        operator delete(__dst[0].__locale_);
      }
    }
    else
    {
      char v46 = sub_1000042E0(&std::cout, (uint64_t)"Error: unable to load Pattern file: ", 36);
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v47 = &v117;
      }
      else {
        long long v47 = (std::string *)v117.__r_.__value_.__r.__words[0];
      }
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v48 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v48 = v117.__r_.__value_.__l.__size_;
      }
      uint64_t v49 = sub_1000042E0(v46, (uint64_t)v47, v48);
      std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(void *)(*v49 - 24)));
      uint64_t v50 = std::locale::use_facet(__dst, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
      std::locale::~locale(__dst);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v51 = 0;
    }
    char v76 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (!__str.__r_.__value_.__l.__size_) {
      goto LABEL_279;
    }
    goto LABEL_278;
  }
  if (!siri::dialogengine::HasVisualCATExtension())
  {
    if (siri::dialogengine::HasSchemaExtension())
    {
      uint64_t v32 = sub_1000042E0(&std::cout, (uint64_t)"Converting ", 11);
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v33 = &v117;
      }
      else {
        std::string::size_type v33 = (std::string *)v117.__r_.__value_.__r.__words[0];
      }
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v34 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v34 = v117.__r_.__value_.__l.__size_;
      }
      std::string::size_type v35 = sub_1000042E0(v32, (uint64_t)v33, v34);
      char v36 = sub_1000042E0(v35, (uint64_t)" to ", 4);
      if (v122 == 3) {
        uint64_t v37 = "YAML";
      }
      else {
        uint64_t v37 = "BINARY";
      }
      if (v122 == 3) {
        uint64_t v38 = 4;
      }
      else {
        uint64_t v38 = 6;
      }
      char v39 = sub_1000042E0(v36, (uint64_t)v37, v38);
      if (v123) {
        std::string::size_type v40 = " (preserve existing)";
      }
      else {
        std::string::size_type v40 = " (delete existing)";
      }
      if (v123) {
        uint64_t v41 = 20;
      }
      else {
        uint64_t v41 = 18;
      }
      std::string v42 = sub_1000042E0(v39, (uint64_t)v40, v41);
      std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(*v42 - 24)));
      char v43 = std::locale::use_facet(&v132, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
      std::locale::~locale(&v132);
      std::ostream::put();
      std::ostream::flush();
      siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v132);
      sub_100003470(__dst, "catschema.bin");
      int v44 = siri::dialogengine::StringEndsWith();
      int v45 = v44;
      if (SHIBYTE(v125) < 0)
      {
        operator delete(__dst[0].__locale_);
        if (v45) {
          goto LABEL_78;
        }
      }
      else if (v44)
      {
LABEL_78:
        sub_100003470(__dst, (char *)&unk_10006DFE2);
        sub_100003470(&__p, (char *)&unk_10006DFE2);
        siri::dialogengine::ParseCATSchemaBinary();
LABEL_162:
        std::string::size_type v82 = __str.__r_.__value_.__l.__size_;
        std::string v83 = (void **)__str.__r_.__value_.__r.__words[0];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v125) < 0) {
          operator delete(__dst[0].__locale_);
        }
        if (v83)
        {
          std::string::size_type v84 = &v118;
          char v85 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
          if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v86 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v86 = v118.__r_.__value_.__l.__size_;
          }
          uint64_t v87 = 24;
          if (!v86)
          {
            uint64_t v87 = 0;
            std::string::size_type v84 = &v117;
            char v85 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
          }
          if (v85 < 0)
          {
            if (v86) {
              std::string::size_type v96 = v118.__r_.__value_.__l.__size_;
            }
            else {
              std::string::size_type v96 = v117.__r_.__value_.__l.__size_;
            }
            sub_100003600(__dst, *(void **)((char *)&v117.__r_.__value_.__l.__data_ + v87), v96);
          }
          else
          {
            *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
            int64_t v125 = v84->__r_.__value_.__r.__words[2];
          }
          siri::dialogengine::ChangeSchemaExtension();
          if (SHIBYTE(v125) < 0) {
            operator delete(__dst[0].__locale_);
          }
          *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          int64_t v125 = __p.__r_.__value_.__r.__words[2];
          sub_100003470(&__p, "catschema.bin");
          int v97 = siri::dialogengine::StringEndsWith();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v97)
          {
            long long v129 = v83;
            std::string::size_type v130 = (std::__shared_weak_count *)v82;
            if (v82) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
            }
            char v98 = siri::dialogengine::WriteCATSchemaBinary();
            long long v99 = v130;
            if (!v130) {
              goto LABEL_209;
            }
          }
          else
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
            __str.__r_.__value_.__l.__size_ = v82;
            if (v82) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
            }
            char v98 = siri::dialogengine::WriteCATSchemaYAML();
            long long v99 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
            if (!__str.__r_.__value_.__l.__size_) {
              goto LABEL_209;
            }
          }
          sub_100006AE0(v99);
LABEL_209:
          if (v98)
          {
            if (!v123)
            {
              siri::dialogengine::ChangeSchemaExtension();
              siri::dialogengine::DeleteFile();
              goto LABEL_254;
            }
            goto LABEL_256;
          }
          std::string::size_type v110 = sub_1000042E0(&std::cout, (uint64_t)"Error: failed to save CAT schema file: ", 39);
          if (v125 >= 0) {
            int v111 = __dst;
          }
          else {
            int v111 = __dst[0].__locale_;
          }
          if (v125 >= 0) {
            uint64_t v112 = HIBYTE(v125);
          }
          else {
            uint64_t v112 = (uint64_t)__dst[1].__locale_;
          }
          goto LABEL_273;
        }
        uint64_t v88 = sub_1000042E0(&std::cout, (uint64_t)"Error: unable to load CAT schema file: ", 39);
        if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v89 = &v117;
        }
        else {
          uint64_t v89 = (std::string *)v117.__r_.__value_.__r.__words[0];
        }
        if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v90 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v90 = v117.__r_.__value_.__l.__size_;
        }
LABEL_236:
        long long v102 = sub_1000042E0(v88, (uint64_t)v89, v90);
        std::ios_base::getloc((const std::ios_base *)((char *)v102 + *(void *)(*v102 - 24)));
        std::string::size_type v103 = std::locale::use_facet(__dst, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v103->__vftable[2].~facet_0)(v103, 10);
        std::locale::~locale(__dst);
        std::ostream::put();
        std::ostream::flush();
        uint64_t v51 = 0;
LABEL_276:
        if (!v82)
        {
LABEL_279:
          siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v132);
          goto LABEL_280;
        }
        char v76 = (std::__shared_weak_count *)v82;
LABEL_278:
        sub_100006AE0(v76);
        goto LABEL_279;
      }
      sub_100003470(__dst, (char *)&unk_10006DFE2);
      sub_100003470(&__p, (char *)&unk_10006DFE2);
      siri::dialogengine::ParseCATSchemaYAML();
      goto LABEL_162;
    }
    if (!siri::dialogengine::HasPatternSchemaExtension())
    {
      uint64_t v51 = sub_10002BC78((uint64_t)&v117);
      goto LABEL_280;
    }
    uint64_t v57 = sub_1000042E0(&std::cout, (uint64_t)"Converting ", 11);
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v58 = &v117;
    }
    else {
      std::string::size_type v58 = (std::string *)v117.__r_.__value_.__r.__words[0];
    }
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v59 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v59 = v117.__r_.__value_.__l.__size_;
    }
    uint64_t v60 = sub_1000042E0(v57, (uint64_t)v58, v59);
    long long v61 = sub_1000042E0(v60, (uint64_t)" to ", 4);
    if (v122 == 5) {
      long long v62 = "YAML";
    }
    else {
      long long v62 = "BINARY";
    }
    if (v122 == 5) {
      uint64_t v63 = 4;
    }
    else {
      uint64_t v63 = 6;
    }
    uint64_t v64 = sub_1000042E0(v61, (uint64_t)v62, v63);
    if (v123) {
      uint64_t v65 = " (preserve existing)";
    }
    else {
      uint64_t v65 = " (delete existing)";
    }
    if (v123) {
      uint64_t v66 = 20;
    }
    else {
      uint64_t v66 = 18;
    }
    uint64_t v67 = sub_1000042E0(v64, (uint64_t)v65, v66);
    std::ios_base::getloc((const std::ios_base *)((char *)v67 + *(void *)(*v67 - 24)));
    char v68 = std::locale::use_facet(&v132, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 10);
    std::locale::~locale(&v132);
    std::ostream::put();
    std::ostream::flush();
    siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v132);
    sub_100003470(__dst, "patternschema.bin");
    int v69 = siri::dialogengine::StringEndsWith();
    if (SHIBYTE(v125) < 0) {
      operator delete(__dst[0].__locale_);
    }
    sub_100003470(__dst, (char *)&unk_10006DFE2);
    sub_100003470(&__p, (char *)&unk_10006DFE2);
    if (v69) {
      siri::dialogengine::ParsePatternSchemaBinary();
    }
    else {
      siri::dialogengine::ParsePatternSchemaYAML();
    }
    std::string::size_type v82 = __str.__r_.__value_.__l.__size_;
    char v91 = (void **)__str.__r_.__value_.__r.__words[0];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v125) < 0) {
      operator delete(__dst[0].__locale_);
    }
    if (!v91)
    {
      uint64_t v88 = sub_1000042E0(&std::cout, (uint64_t)"Error: unable to load pattern schema file: ", 43);
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v89 = &v117;
      }
      else {
        uint64_t v89 = (std::string *)v117.__r_.__value_.__r.__words[0];
      }
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v90 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v90 = v117.__r_.__value_.__l.__size_;
      }
      goto LABEL_236;
    }
    uint64_t v92 = &v118;
    char v93 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
    if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v94 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v94 = v118.__r_.__value_.__l.__size_;
    }
    uint64_t v95 = 24;
    if (!v94)
    {
      uint64_t v95 = 0;
      uint64_t v92 = &v117;
      char v93 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
    }
    if (v93 < 0)
    {
      if (v94) {
        std::string::size_type v106 = v118.__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v106 = v117.__r_.__value_.__l.__size_;
      }
      sub_100003600(__dst, *(void **)((char *)&v117.__r_.__value_.__l.__data_ + v95), v106);
    }
    else
    {
      *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      int64_t v125 = v92->__r_.__value_.__r.__words[2];
    }
    siri::dialogengine::ChangePatternSchemaExtension();
    if (SHIBYTE(v125) < 0) {
      operator delete(__dst[0].__locale_);
    }
    *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    int64_t v125 = __p.__r_.__value_.__r.__words[2];
    sub_100003470(&__p, "patternschema.bin");
    int v107 = siri::dialogengine::StringEndsWith();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v107)
    {
      long long v129 = v91;
      std::string::size_type v130 = (std::__shared_weak_count *)v82;
      if (v82) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
      }
      char v108 = siri::dialogengine::WritePatternSchemaBinary();
      long long v109 = v130;
      if (!v130) {
        goto LABEL_251;
      }
    }
    else
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
      __str.__r_.__value_.__l.__size_ = v82;
      if (v82) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
      }
      char v108 = siri::dialogengine::WritePatternSchemaYAML();
      long long v109 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (!__str.__r_.__value_.__l.__size_) {
        goto LABEL_251;
      }
    }
    sub_100006AE0(v109);
LABEL_251:
    if (v108)
    {
      if (!v123)
      {
        siri::dialogengine::ChangePatternSchemaExtension();
        siri::dialogengine::DeleteFile();
LABEL_254:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
LABEL_256:
      uint64_t v51 = 1;
      goto LABEL_274;
    }
    std::string::size_type v110 = sub_1000042E0(&std::cout, (uint64_t)"Error: failed to save pattern schema file: ", 43);
    if (v125 >= 0) {
      int v111 = __dst;
    }
    else {
      int v111 = __dst[0].__locale_;
    }
    if (v125 >= 0) {
      uint64_t v112 = HIBYTE(v125);
    }
    else {
      uint64_t v112 = (uint64_t)__dst[1].__locale_;
    }
LABEL_273:
    long long v113 = sub_1000042E0(v110, (uint64_t)v111, v112);
    std::ios_base::getloc((const std::ios_base *)((char *)v113 + *(void *)(*v113 - 24)));
    std::string::size_type v114 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v114->__vftable[2].~facet_0)(v114, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v51 = 0;
LABEL_274:
    if (SHIBYTE(v125) < 0) {
      operator delete(__dst[0].__locale_);
    }
    goto LABEL_276;
  }
  if ((siri::dialogengine::FileExists() & 1) == 0)
  {
    std::locale v52 = sub_1000042E0(&std::cout, (uint64_t)"Error: can't find input Visual CAT file: ", 41);
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v53 = &v117;
    }
    else {
      uint64_t v53 = (std::string *)v117.__r_.__value_.__r.__words[0];
    }
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v54 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v54 = v117.__r_.__value_.__l.__size_;
    }
    uint64_t v55 = sub_1000042E0(v52, (uint64_t)v53, v54);
    std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(*v55 - 24)));
    std::locale v56 = std::locale::use_facet(&v132, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
    std::locale::~locale(&v132);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v51 = 0;
    goto LABEL_280;
  }
  long long v20 = sub_1000042E0(&std::cout, (uint64_t)"Converting ", 11);
  if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v21 = &v117;
  }
  else {
    int v21 = (std::string *)v117.__r_.__value_.__r.__words[0];
  }
  if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v22 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v22 = v117.__r_.__value_.__l.__size_;
  }
  uint64_t v23 = sub_1000042E0(v20, (uint64_t)v21, v22);
  uint64_t v24 = sub_1000042E0(v23, (uint64_t)" to ", 4);
  if (v122) {
    BOOL v25 = "BINARY";
  }
  else {
    BOOL v25 = "XML";
  }
  if (v122) {
    uint64_t v26 = 6;
  }
  else {
    uint64_t v26 = 3;
  }
  char v27 = sub_1000042E0(v24, (uint64_t)v25, v26);
  if (v123) {
    uint64_t v28 = " (preserve existing)";
  }
  else {
    uint64_t v28 = " (delete existing)";
  }
  if (v123) {
    uint64_t v29 = 20;
  }
  else {
    uint64_t v29 = 18;
  }
  int v30 = sub_1000042E0(v27, (uint64_t)v28, v29);
  std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24)));
  char v31 = std::locale::use_facet(&v132, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
  std::locale::~locale(&v132);
  std::ostream::put();
  std::ostream::flush();
  siri::dialogengine::ChangeVisualCATExtension();
  siri::dialogengine::ChangeVisualCATExtension();
  sub_10002F7B8((uint64_t)&v117, (uint64_t)&__p, (uint64_t)&__str);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    sub_100003600(&v127, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
  }
  else {
    std::string v127 = v119;
  }
  std::string::size_type v77 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v77 = v127.__r_.__value_.__l.__size_;
  }
  if (!v77)
  {
    std::string::operator=(&v127, &__p);
    if (v122)
    {
      if (v122 != 1)
      {
        sub_1000042E0(&std::cout, (uint64_t)"Unrecognized format: ", 21);
        long long v104 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v104 + *(void *)(*v104 - 24)));
        std::string::size_type v105 = std::locale::use_facet(&v132, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v105->__vftable[2].~facet_0)(v105, 10);
        std::locale::~locale(&v132);
        std::ostream::put();
        std::ostream::flush();
        uint64_t v51 = 0;
        goto LABEL_224;
      }
      std::string::operator=(&v127, &__str);
    }
  }
  siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v132);
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__dst);
  LODWORD(v126) = 1;
  siri::dialogengine::RequestInfo::SetRequestType();
  siri::dialogengine::RequestInfo::SetVisualPath();
  siri::dialogengine::GetTemplateDirs();
  siri::dialogengine::RequestInfo::SetTemplateDirs();
  long long v129 = &v126;
  sub_10000C39C(&v129);
  siri::dialogengine::Context::SetRequestInfo();
  sub_10002A454((uint64_t)__dst);
  if (siri::dialogengine::Context::LoadVisualFiles())
  {
    sub_100003470(__dst, (char *)&unk_10006DFE2);
    char v78 = siri::dialogengine::Context::Save();
    if (SHIBYTE(v125) < 0) {
      operator delete(__dst[0].__locale_);
    }
    if (v78)
    {
      if (!v123)
      {
        siri::dialogengine::ChangeVisualCATExtension();
        siri::dialogengine::DeleteFile();
        if (SHIBYTE(v125) < 0) {
          operator delete(__dst[0].__locale_);
        }
      }
      uint64_t v51 = 1;
      goto LABEL_223;
    }
    std::string::size_type v79 = sub_1000042E0(&std::cout, (uint64_t)"Error: unable to save Visual CAT file: ", 39);
    if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v80 = &v118;
    }
    else {
      std::string::size_type v80 = (std::string *)v118.__r_.__value_.__r.__words[0];
    }
    if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v81 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v81 = v118.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    std::string::size_type v79 = sub_1000042E0(&std::cout, (uint64_t)"Error: unable to load Visual CAT file: ", 39);
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v80 = &v117;
    }
    else {
      std::string::size_type v80 = (std::string *)v117.__r_.__value_.__r.__words[0];
    }
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v81 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v81 = v117.__r_.__value_.__l.__size_;
    }
  }
  long long v100 = sub_1000042E0(v79, (uint64_t)v80, v81);
  std::ios_base::getloc((const std::ios_base *)((char *)v100 + *(void *)(*v100 - 24)));
  long long v101 = std::locale::use_facet(__dst, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v101->__vftable[2].~facet_0)(v101, 10);
  std::locale::~locale(__dst);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v51 = 0;
LABEL_223:
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v132);
LABEL_224:
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_280:
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v116.__r_.__value_.__l.__data_);
  }
  if (v121 < 0) {
    operator delete(v120);
  }
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v119.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v118.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v117.__r_.__value_.__l.__data_);
  }
  return v51;
}

void sub_10002F478()
{
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (SLOBYTE(STACK[0x28F]) < 0) {
    operator delete((void *)STACK[0x278]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  __cxa_end_catch();
  JUMPOUT(0x10002F620);
}

void sub_10002F514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (STACK[0x2B8]) {
    JUMPOUT(0x10002F708);
  }
  JUMPOUT(0x10002F70CLL);
}

void sub_10002F530()
{
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  JUMPOUT(0x10002F5D8);
}

void sub_10002F594(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25)
{
  std::locale::~locale(&a25);
  if (v25) {
    JUMPOUT(0x10002F708);
  }
  JUMPOUT(0x10002F70CLL);
}

void sub_10002F5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  STACK[0x2D0] = v16;
  sub_10000C39C((void ***)&STACK[0x2D0]);
  sub_10002A454((uint64_t)va);
  JUMPOUT(0x10002F6A8);
}

void sub_10002F5D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x10002F70CLL);
}

void sub_10002F5EC()
{
}

void sub_10002F5F8()
{
}

void sub_10002F604()
{
}

void sub_10002F60C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25)
{
}

void sub_10002F61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (v33) {
    sub_100006AE0(v33);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0x2F8]);
  if (a14 < 0) {
    operator delete(a9);
  }
  sub_10002F754((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_10002F660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(a25);
  }
  JUMPOUT(0x10002F700);
}

void sub_10002F670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (STACK[0x298]) {
    sub_100006AE0((std::__shared_weak_count *)STACK[0x298]);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  JUMPOUT(0x10002F700);
}

void sub_10002F688(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25)
{
  if (STACK[0x2B8]) {
    JUMPOUT(0x10002F708);
  }
  JUMPOUT(0x10002F70CLL);
}

void sub_10002F69C()
{
}

void sub_10002F6A4(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, ...)
{
  va_start(va, a7);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (a7 < 0) {
    operator delete(a2);
  }
  sub_10002F754((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10002F718(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, ...)
{
  va_start(va, a7);
  std::locale::~locale((std::locale *)&STACK[0x2F8]);
  if (a7 < 0) {
    operator delete(a2);
  }
  sub_10002F754((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10002F728()
{
}

uint64_t sub_10002F754(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10002F7B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 96);
  if (v5) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = a2;
  }
  if (*(char *)(v6 + 23) < 0)
  {
    sub_100003600(__dst, *(void **)v6, *(void *)(v6 + 8));
    int v5 = *(_DWORD *)(a1 + 96);
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)v6;
    uint64_t v12 = *(void *)(v6 + 16);
  }
  if (v5) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = a3;
  }
  if (*(char *)(v8 + 23) < 0)
  {
    sub_100003600(__p, *(void **)v8, *(void *)(v8 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v8;
    uint64_t v10 = *(void *)(v8 + 16);
  }
  if (siri::dialogengine::FileExists() && siri::dialogengine::FileExists()) {
    siri::dialogengine::DeleteFile();
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_10002F898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10002F8CC(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100003600(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100003600(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_100003600(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  unint64_t v7 = __dst + 72;
  if (*((char *)a2 + 95) < 0)
  {
    sub_100003600(v7, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)unint64_t v7 = v8;
  }
  int v9 = *((_DWORD *)a2 + 24);
  *(_DWORD *)(__dst + 99) = *(_DWORD *)((char *)a2 + 99);
  *((_DWORD *)__dst + 24) = v9;
  return __dst;
}

void sub_10002F9C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002FA0C(uint64_t a1)
{
  sub_100003470(v4, "test");
  sub_100003470(__p, "Run data-driven CAT tests. (Sub-commands: run, list)");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10002FA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002FAB8(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_10003B18C())
  {
    sub_10003B17C(a2);
    sub_100003470(__p, "\n  <EXECUTABLE> <COMMAND> run --templateDir <dir> [--catId <id>] [--patternId <id>] [--locale <loc>]\n          [--test <name>] [--outputJson <filename>] [--debug]\n\n      Run one or more data-driven CAT tests. These are defined in a JSON format and stored\n      under a 'tests' subdirectory of the template directory. By default all tests will be\n      run. However, you can use the --catId, --patternId --locale, and --test options to\n      filter the test to be run. You can use the option --debug argument to get debug log\n      output.\n\n      If the test run is successful, an exit code of 0 is returned. If there's a failure,\n      then an exit code of 1 is returned.\n\n      You can supply the --outputJson parameter and a JSON report will be written to the\n      provided filename that includes all of the inputs, output, and status for every test\n      that was run. This could be used to generate test status reports or to provide a\n      report of the actual responses generated for a given domain.\n\n"
      "  <EXECUTABLE> <COMMAND> list --templateDir <dir>\n"
      "\n"
      "      List all of the data-driven CAT tests that exist under a template directory.\n");
    sub_100003470(&v24, "test");
    sub_10003B430();
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  sub_100003470(__p, "--templateDir");
  siri::dialogengine::GetOption();
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = v38;
  if ((v38 & 0x80u) != 0) {
    uint64_t v5 = v37;
  }
  if (v5)
  {
    siri::dialogengine::StringToLower();
    if (v35 < 0)
    {
      if (v34 != 3)
      {
        if (v34 != 4) {
          goto LABEL_43;
        }
        long long v6 = v33;
        goto LABEL_22;
      }
      if (*(_WORD *)v33 != 30066 || v33[2] != 110) {
        goto LABEL_43;
      }
    }
    else
    {
      if (v35 != 3)
      {
        if (v35 != 4) {
          goto LABEL_43;
        }
        long long v6 = &v33;
LABEL_22:
        if (*v6 == 1953720684)
        {
          siri::dialogengine::TestSuite::TestSuite((siri::dialogengine::TestSuite *)&v24, 0);
          sub_100003470(__p, (char *)&unk_10006DFE2);
          sub_100003470(&v30, (char *)&unk_10006DFE2);
          sub_100003470(v28, (char *)&unk_10006DFE2);
          siri::dialogengine::TestSuite::LoadTests();
          if (v29 < 0) {
            operator delete(v28[0]);
          }
          if (v32 < 0) {
            operator delete(v30);
          }
          if (SHIBYTE(v22) < 0) {
            operator delete(__p[0]);
          }
          siri::dialogengine::TestSuite::GetTests((uint64_t *)&v30, (siri::dialogengine::TestSuite *)&v24);
          int v9 = v30;
          for (uint64_t i = v31; v9 != i; v9 += 16)
          {
            sub_100030390((char *)__p, v9);
            siri::dialogengine::TestCase::ToString((uint64_t *)v28, (siri::dialogengine::TestCase *)__p);
            if (v29 >= 0) {
              uint64_t v11 = (const char *)v28;
            }
            else {
              uint64_t v11 = (const char *)v28[0];
            }
            printf("%s", v11);
            if (v29 < 0) {
              operator delete(v28[0]);
            }
            if ((siri::dialogengine::TestCase::IsEnabled((siri::dialogengine::TestCase *)__p) & 1) == 0) {
              printf(" [Disabled]");
            }
            putchar(10);
            sub_1000307D8((uint64_t)__p);
          }
          __p[0] = &v30;
          sub_1000308A4((void ***)__p);
          __p[0] = v26;
          sub_100003B14((void ***)__p);
          __p[0] = (char *)&v24 + 8;
          sub_1000308A4((void ***)__p);
          uint64_t v3 = 1;
          goto LABEL_44;
        }
LABEL_43:
        uint64_t v13 = sub_1000042E0(&std::cout, (uint64_t)"Must specify 'run' or 'list' for 'catutil test'", 47);
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
        int v14 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        uint64_t v3 = 0;
LABEL_44:
        if (v35 < 0) {
          operator delete(v33);
        }
        goto LABEL_46;
      }
      if ((unsigned __int16)v33 != 30066 || BYTE2(v33) != 110) {
        goto LABEL_43;
      }
    }
    sub_100003470(__p, "--debug");
    int v17 = siri::dialogengine::OptionExists();
    if (SHIBYTE(v22) < 0) {
      operator delete(__p[0]);
    }
    if (v17) {
      siri::dialogengine::Log::SetOutputToStdout((siri::dialogengine::Log *)1, v16);
    }
    sub_100003470(__p, "--catId");
    siri::dialogengine::GetOption();
    if (SHIBYTE(v22) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v18 = HIBYTE(v25);
    if (v25 < 0) {
      uint64_t v18 = *((void *)&v24 + 1);
    }
    if (v18)
    {
      BOOL v19 = 0;
    }
    else
    {
      sub_100003470(&v30, "--patternId");
      siri::dialogengine::GetOption();
      if (SHIBYTE(v25) < 0) {
        operator delete((void *)v24);
      }
      long long v24 = *(_OWORD *)__p;
      uint64_t v25 = v22;
      HIBYTE(v22) = 0;
      LOBYTE(__p[0]) = 0;
      if (v32 < 0) {
        operator delete(v30);
      }
      uint64_t v20 = HIBYTE(v25);
      if (v25 < 0) {
        uint64_t v20 = *((void *)&v24 + 1);
      }
      BOOL v19 = v20 != 0;
    }
    sub_100003470(__p, "--locale");
    siri::dialogengine::GetOption();
    if (SHIBYTE(v22) < 0) {
      operator delete(__p[0]);
    }
    sub_100003470(__p, "--test");
    siri::dialogengine::GetOption();
    if (SHIBYTE(v22) < 0) {
      operator delete(__p[0]);
    }
    sub_100003470(__p, "--outputJson");
    siri::dialogengine::GetOption();
    if (SHIBYTE(v22) < 0) {
      operator delete(__p[0]);
    }
    siri::dialogengine::TestSuite::TestSuite((siri::dialogengine::TestSuite *)__p, v17 & v19);
    siri::dialogengine::TestSuite::LoadTests();
    uint64_t v3 = siri::dialogengine::TestRunner::RunTestSuite();
    char v39 = (void **)&v23;
    sub_100003B14(&v39);
    char v39 = &__p[1];
    sub_1000308A4(&v39);
    if (v27 < 0) {
      operator delete(v26[4]);
    }
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    if (v32 < 0) {
      operator delete(v30);
    }
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    goto LABEL_44;
  }
  unint64_t v7 = sub_1000042E0(&std::cout, (uint64_t)"Must specify --templateDir", 26);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  long long v8 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v3 = 0;
LABEL_46:
  if ((char)v38 < 0) {
    operator delete(v36);
  }
  return v3;
}

void sub_100030154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 - 105) < 0) {
    operator delete(*(void **)(v16 - 128));
  }
  if (*(char *)(v16 - 217) < 0) {
    operator delete(*(void **)(v16 - 240));
  }
  if (*(char *)(v16 - 81) < 0) {
    operator delete(*(void **)(v16 - 104));
  }
  if (*(char *)(v16 - 57) < 0) {
    operator delete(*(void **)(v16 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100030344(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 32);
  sub_100003B14(&v3);
  uint64_t v3 = (void **)(a1 + 8);
  sub_1000308A4(&v3);
  return a1;
}

char *sub_100030390(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100003600(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100003600(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_100003600(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_100003600(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_100003600(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  __dst[120] = *((unsigned char *)a2 + 120);
  if (*((char *)a2 + 151) < 0)
  {
    sub_100003600(__dst + 128, *((void **)a2 + 16), *((void *)a2 + 17));
  }
  else
  {
    long long v9 = a2[8];
    *((void *)__dst + 18) = *((void *)a2 + 18);
    *((_OWORD *)__dst + 8) = v9;
  }
  if (*((char *)a2 + 175) < 0)
  {
    sub_100003600(__dst + 152, *((void **)a2 + 19), *((void *)a2 + 20));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 152);
    *((void *)__dst + 21) = *((void *)a2 + 21);
    *(_OWORD *)(__dst + 152) = v10;
  }
  if (*((char *)a2 + 199) < 0)
  {
    sub_100003600(__dst + 176, *((void **)a2 + 22), *((void *)a2 + 23));
  }
  else
  {
    long long v11 = a2[11];
    *((void *)__dst + 24) = *((void *)a2 + 24);
    *((_OWORD *)__dst + 11) = v11;
  }
  *((void *)__dst + 25) = 0;
  *((void *)__dst + 26) = 0;
  *((void *)__dst + 27) = 0;
  sub_100030688((void *)__dst + 25, *((void **)a2 + 25), *((void **)a2 + 26), (uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 4);
  __int16 v12 = *((_WORD *)a2 + 112);
  *((void *)__dst + 29) = 0;
  *((_WORD *)__dst + 112) = v12;
  *((void *)__dst + 30) = 0;
  *((void *)__dst + 31) = 0;
  sub_100003898(__dst + 232, *((long long **)a2 + 29), *((long long **)a2 + 30), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 30) - *((void *)a2 + 29)) >> 3));
  return __dst;
}

void sub_1000305B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 175) < 0) {
    operator delete(*v16);
  }
  if (*(char *)(v10 + 151) < 0) {
    operator delete(*v15);
  }
  if (*(char *)(v10 + 119) < 0) {
    operator delete(*v14);
  }
  if (*(char *)(v10 + 95) < 0) {
    operator delete(*v13);
  }
  if (*(char *)(v10 + 71) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100030688(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_10002A234(result, a4);
    uint64_t result = sub_100030710((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1000306F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100008EDC(&a9);
  _Unwind_Resume(a1);
}

void *sub_100030710(uint64_t a1, void *a2, void *a3, void *a4)
{
  long long v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *long long v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_1000307A0((uint64_t)v7);
  return v4;
}

uint64_t sub_1000307A0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10002A378(a1);
  }
  return a1;
}

uint64_t sub_1000307D8(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 232);
  sub_100003B14(&v3);
  uint64_t v3 = (void **)(a1 + 200);
  sub_100008EDC(&v3);
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000308A4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1000307D8(v4 - 256);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100030928(uint64_t a1)
{
  sub_100003470(v4, "morphun");
  sub_100003470(__p, "Perform Morphun operations. (Sub-commands: download, delete, getpath)");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1000309A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000309D4(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_10003B18C())
  {
    sub_10003B17C(a2);
    sub_100003470(v47, "\n  <EXECUTABLE> <COMMAND> download --locale <locale1> [<locale2> ...] [--nonBlocking]\n\n      Download Morphun assets for the specified locale(s) to device. If the optional --nonBlocking\n      flag is supplied, a non-blocking download will be initiated. A minimum of one locale must\n      be specified.\n\n  <EXECUTABLE> <COMMAND> delete [--locale <locale1> <locale2> ...]\n\n      Delete Morphun assets for the specified locale(s) from device. If no locale is provided,\n      all morphun assets are deleted from the device. This is a blocking process. When execution is\n      complete, all specified assets will have been deleted from the device.\n\n  <EXECUTABLE> <COMMAND> getpath [--locale <locale1> <locale2> ...]\n\n      Provides absolute paths on device to the Morphun assets for the specified locales. If no\n      locales are provided, a list of paths to all Morphun assets present on device will be provided.\n");
    sub_100003470(__p, "morphun");
    sub_10003B430();
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v48) < 0) {
      operator delete(v47[0]);
    }
    return 0;
  }
  sub_100003470(v47, (char *)&unk_10006DFE2);
  long long v49 = 0uLL;
  uint64_t v50 = 0;
  char v51 = 1;
  siri::dialogengine::StringToLower();
  if (SHIBYTE(v48) < 0) {
    operator delete(v47[0]);
  }
  uint64_t v48 = v43;
  *(_OWORD *)long long v47 = *(_OWORD *)__p;
  if (SHIBYTE(v43) < 0)
  {
    if (v47[1] != (void *)6)
    {
      if (v47[1] != (void *)7)
      {
        if (v47[1] != (void *)8) {
          goto LABEL_76;
        }
        char v5 = *(void **)v47[0];
        goto LABEL_20;
      }
      int v22 = *(_DWORD *)((char *)v47[0] + 3);
      BOOL v23 = *(_DWORD *)v47[0] == 1886676327;
      int v24 = 1752457584;
      goto LABEL_72;
    }
    long long v7 = (void **)v47[0];
LABEL_70:
    int v21 = *(_DWORD *)v7;
    int v22 = *((unsigned __int16 *)v7 + 2);
    BOOL v23 = v21 == 1701602660;
    int v24 = 25972;
LABEL_72:
    if (!v23 || v22 != v24) {
      goto LABEL_76;
    }
    goto LABEL_21;
  }
  if (HIBYTE(v43) == 6)
  {
    long long v7 = v47;
    goto LABEL_70;
  }
  if (HIBYTE(v43) != 7)
  {
    if (HIBYTE(v43) != 8) {
      goto LABEL_76;
    }
    char v5 = v47[0];
LABEL_20:
    if (v5 == (void *)0x64616F6C6E776F64) {
      goto LABEL_21;
    }
LABEL_76:
    uint64_t v26 = "Must specify 'download', 'delete' or 'getpath' for 'catutil morphun'";
    uint64_t v27 = 68;
LABEL_77:
    uint64_t v28 = sub_1000042E0(&std::cout, (uint64_t)v26, v27);
    std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
    char v29 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_78;
  }
  if (LODWORD(v47[0]) != 1886676327 || *(_DWORD *)((char *)v47 + 3) != 1752457584) {
    goto LABEL_76;
  }
LABEL_21:
  sub_100003470(__p, "--nonBlocking");
  char v51 = siri::dialogengine::OptionExists() ^ 1;
  if (SHIBYTE(v43) < 0) {
    operator delete(__p[0]);
  }
  sub_100003470(__dst, "--locale");
  siri::dialogengine::GetMultipleOptions();
  sub_10002A0BC((uint64_t *)&v49);
  long long v49 = *(_OWORD *)__p;
  uint64_t v50 = v43;
  __p[1] = 0;
  uint64_t v43 = 0;
  __p[0] = 0;
  uint64_t v53 = __p;
  sub_100003B14(&v53);
  if (SHIBYTE(v46) < 0) {
    operator delete(__dst[0]);
  }
  if ((v48 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v48) != 6)
    {
      if (HIBYTE(v48) != 7)
      {
        if (HIBYTE(v48) == 8)
        {
          long long v6 = v47[0];
          goto LABEL_41;
        }
LABEL_78:
        uint64_t v3 = 0;
        goto LABEL_79;
      }
      char v31 = v47;
LABEL_89:
      int v32 = *(_DWORD *)v31;
      int v33 = *(_DWORD *)((char *)v31 + 3);
      if (v32 == 1886676327 && v33 == 1752457584)
      {
        uint64_t v3 = sub_1000312B0((uint64_t)v47);
        goto LABEL_79;
      }
      goto LABEL_78;
    }
    if (LODWORD(v47[0]) != 1701602660 || WORD2(v47[0]) != 25972) {
      goto LABEL_78;
    }
LABEL_100:
    uint64_t v37 = *((void *)&v49 + 1);
    uint64_t v36 = v49;
    if ((void)v49 == *((void *)&v49 + 1))
    {
      unsigned __int8 v38 = sub_1000042E0(&std::cout, (uint64_t)"Deleting ALL Morphun assets...", 30);
      sub_10000F934(v38);
      siri::dialogengine::MorphunUpdaterTuriTrial::DeleteAll((siri::dialogengine::MorphunUpdaterTuriTrial *)__p);
    }
    else
    {
      __dst[0] = 0;
      __dst[1] = 0;
      uint64_t v46 = 0;
      std::locale v52 = __dst;
      do
      {
        siri::dialogengine::GetLocaleLanguage();
        sub_100031BAC((uint64_t **)&v52, (long long *)__p);
        if (SHIBYTE(v43) < 0) {
          operator delete(__p[0]);
        }
        v36 += 24;
      }
      while (v36 != v37);
      siri::dialogengine::MorphunUpdaterTuriTrial::Delete();
      __p[0] = __dst;
      sub_100003B14((void ***)__p);
    }
    goto LABEL_108;
  }
  if (v47[1] == (void *)6)
  {
    if (*(_DWORD *)v47[0] != 1701602660 || *((_WORD *)v47[0] + 2) != 25972) {
      goto LABEL_78;
    }
    goto LABEL_100;
  }
  if (v47[1] == (void *)7)
  {
    char v31 = (void **)v47[0];
    goto LABEL_89;
  }
  if (v47[1] != (void *)8) {
    goto LABEL_78;
  }
  long long v6 = *(void **)v47[0];
LABEL_41:
  if (v6 != (void *)0x64616F6C6E776F64) {
    goto LABEL_78;
  }
  if ((void)v49 == *((void *)&v49 + 1))
  {
    uint64_t v26 = "Must specify at least one locale for 'catutil download'";
    uint64_t v27 = 55;
    goto LABEL_77;
  }
  uint64_t v9 = sub_1000042E0(&std::cout, (uint64_t)"Initiating download of locale(s): ", 34);
  sub_100003470(__dst, ",");
  siri::dialogengine::StringJoin();
  if (v43 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (v43 >= 0) {
    uint64_t v11 = HIBYTE(v43);
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  __int16 v12 = sub_1000042E0(v9, (uint64_t)v10, v11);
  sub_10000F934(v12);
  if (SHIBYTE(v43) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(__dst[0]);
  }
  int v14 = (long long *)*((void *)&v49 + 1);
  uint64_t v13 = (long long *)v49;
  if ((void)v49 != *((void *)&v49 + 1))
  {
    char v39 = v41;
    do
    {
      if (*((char *)v13 + 23) < 0)
      {
        sub_100003600(__dst, *(void **)v13, *((void *)v13 + 1));
      }
      else
      {
        long long v15 = *v13;
        uint64_t v46 = *((void *)v13 + 2);
        *(_OWORD *)long long __dst = v15;
      }
      if (v51)
      {
        __p[0] = 0;
        __p[1] = __p;
        uint64_t v43 = 0x2020000000;
        char v44 = 0;
        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3221225472;
        v41[0] = sub_10003129C;
        v41[1] = &unk_10007D0A8;
        v41[2] = __p;
        uint64_t v16 = objc_retainBlock(v40);
        int v17 = +[NSRunLoop currentRunLoop];
        siri::dialogengine::MorphunUpdaterTuriTrial::Download();
        do
        {
          if (*((unsigned char *)__p[1] + 24)) {
            break;
          }
          uint64_t v18 = +[NSDate dateWithTimeIntervalSinceNow:2.0];
          unsigned __int8 v19 = [v17 runMode:NSDefaultRunLoopMode beforeDate:v18];
        }
        while ((v19 & 1) != 0);

        _Block_object_dispose(__p, 8);
      }
      else
      {
        siri::dialogengine::MorphunUpdaterTuriTrial::Download();
      }
      if (SHIBYTE(v46) < 0) {
        operator delete(__dst[0]);
      }
      uint64_t v13 = (long long *)((char *)v13 + 24);
    }
    while (v13 != v14);
  }
  if (v51)
  {
    uint64_t v20 = sub_1000042E0(&std::cout, (uint64_t)"Results: ", 9);
    sub_10000F934(v20);
    sub_1000312B0((uint64_t)v47);
  }
LABEL_108:
  uint64_t v3 = 1;
LABEL_79:
  __p[0] = &v49;
  sub_100003B14((void ***)__p);
  if (SHIBYTE(v48) < 0) {
    operator delete(v47[0]);
  }
  return v3;
}

void sub_10003117C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t sub_10003129C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

uint64_t sub_1000312B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v1 != v2)
  {
    uint64_t v41 = 0;
    std::string v42 = 0;
    uint64_t v43 = 0;
    uint64_t v53 = (std::locale *)&v41;
    while (1)
    {
      siri::dialogengine::GetCanonicalLocale();
      sub_100003470(&__p, "_");
      char v3 = siri::dialogengine::StringContains();
      char v4 = v3;
      if (SHIBYTE(v52) < 0)
      {
        operator delete(__p);
        if ((v4 & 1) == 0)
        {
LABEL_8:
          siri::dialogengine::GetDefaultLocaleForLanguage();
          goto LABEL_10;
        }
      }
      else if ((v3 & 1) == 0)
      {
        goto LABEL_8;
      }
      if (SHIBYTE(v45) < 0)
      {
        sub_100003600(&__str, __dst[0].__locale_, (unint64_t)__dst[1].__locale_);
LABEL_10:
        if (SHIBYTE(v45) < 0) {
          operator delete(__dst[0].__locale_);
        }
        goto LABEL_12;
      }
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst[0].__locale_;
      __str.__r_.__value_.__r.__words[2] = v45;
LABEL_12:
      sub_100031BAC((uint64_t **)&v53, (long long *)&__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      v1 += 24;
      if (v1 == v2)
      {
        char v51 = 0;
        int64_t v52 = 0;
        std::string __p = &v51;
        char v5 = v41;
        long long v6 = v42;
        if (v41 == v42) {
          goto LABEL_53;
        }
        do
        {
          if (*((char *)v5 + 23) < 0)
          {
            sub_100003600(__dst, *(void **)v5, *((void *)v5 + 1));
          }
          else
          {
            long long v7 = *v5;
            int64_t v45 = *((void *)v5 + 2);
            *(_OWORD *)&__dst[0].__locale_ = v7;
          }
          siri::dialogengine::MorphunUpdaterTuriTrial::GetPath();
          std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          char v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
          }
          if (size)
          {
            uint64_t v53 = __dst;
            uint64_t v10 = sub_100031CF4((uint64_t **)&__p, (const void **)&__dst[0].__locale_, (uint64_t)&std::piecewise_construct, (long long **)&v53);
            std::string::operator=((std::string *)(v10 + 7), &__str);
            char v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          if (v9 < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v45) < 0) {
            operator delete(__dst[0].__locale_);
          }
          char v5 = (long long *)((char *)v5 + 24);
        }
        while (v5 != v6);
        if (!v52)
        {
LABEL_53:
          BOOL v23 = sub_1000042E0(&std::cout, (uint64_t)"No such locale(s) installed on device!", 38);
          std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
          int v24 = std::locale::use_facet(__dst, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
          std::locale::~locale(__dst);
          std::ostream::put();
          std::ostream::flush();
        }
        else
        {
          uint64_t v11 = (long long *)__p;
          if (__p != &v51)
          {
            do
            {
              sub_100031B14((char *)__dst, v11 + 2);
              if (v45 >= 0) {
                locale = __dst;
              }
              else {
                locale = __dst[0].__locale_;
              }
              if (v45 >= 0) {
                uint64_t v13 = HIBYTE(v45);
              }
              else {
                uint64_t v13 = (uint64_t)__dst[1].__locale_;
              }
              int v14 = sub_1000042E0(&std::cout, (uint64_t)locale, v13);
              long long v15 = sub_1000042E0(v14, (uint64_t)": ", 2);
              if ((v48 & 0x80u) == 0) {
                uint64_t v16 = &v46;
              }
              else {
                uint64_t v16 = v46;
              }
              if ((v48 & 0x80u) == 0) {
                uint64_t v17 = v48;
              }
              else {
                uint64_t v17 = v47;
              }
              uint64_t v18 = sub_1000042E0(v15, (uint64_t)v16, v17);
              std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
              unsigned __int8 v19 = std::locale::use_facet((const std::locale *)&__str, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
              std::locale::~locale((std::locale *)&__str);
              std::ostream::put();
              std::ostream::flush();
              if ((char)v48 < 0) {
                operator delete(v46);
              }
              if (SHIBYTE(v45) < 0) {
                operator delete(__dst[0].__locale_);
              }
              uint64_t v20 = (std::locale::__imp *)*((void *)v11 + 1);
              if (v20)
              {
                do
                {
                  int v21 = (std::locale::__imp **)v20;
                  uint64_t v20 = *(std::locale::__imp **)v20;
                }
                while (v20);
              }
              else
              {
                do
                {
                  int v21 = (std::locale::__imp **)*((void *)v11 + 2);
                  BOOL v22 = *v21 == (std::locale::__imp *)v11;
                  uint64_t v11 = (long long *)v21;
                }
                while (!v22);
              }
              uint64_t v11 = (long long *)v21;
            }
            while (v21 != &v51);
          }
        }
        sub_10002A698((uint64_t)&__p, v51);
        __dst[0].__locale_ = (std::locale::__imp *)&v41;
        sub_100003B14((void ***)__dst);
        return 1;
      }
    }
  }
  char v51 = 0;
  int64_t v52 = 0;
  std::string __p = &v51;
                                     + 16;
  siri::dialogengine::MorphunUpdaterTuriTrial::GetPaths((uint64_t *)__dst, (siri::dialogengine::MorphunUpdaterTuriTrial *)&__str);
  sub_10002A698((uint64_t)&__p, v51);
  uint64_t v26 = __dst[1].__locale_;
  std::string __p = __dst[0].__locale_;
  char v51 = __dst[1].__locale_;
  int64_t v52 = v45;
  if (v45)
  {
    *((void *)__dst[1].__locale_ + 2) = &v51;
    __dst[0].__locale_ = (std::locale::__imp *)&__dst[1];
    __dst[1].__locale_ = 0;
    int64_t v45 = 0;
    uint64_t v26 = 0;
  }
  else
  {
    std::string __p = &v51;
  }
  sub_10002A698((uint64_t)__dst, v26);
  BOOL v25 = v52 != 0;
  if (v52)
  {
    uint64_t v27 = (long long *)__p;
    if (__p != &v51)
    {
      do
      {
        sub_100031B14((char *)__dst, v27 + 2);
        if (v45 >= 0) {
          uint64_t v28 = __dst;
        }
        else {
          uint64_t v28 = __dst[0].__locale_;
        }
        if (v45 >= 0) {
          uint64_t v29 = HIBYTE(v45);
        }
        else {
          uint64_t v29 = (uint64_t)__dst[1].__locale_;
        }
        int v30 = sub_1000042E0(&std::cout, (uint64_t)v28, v29);
        char v31 = sub_1000042E0(v30, (uint64_t)": ", 2);
        if ((v48 & 0x80u) == 0) {
          int v32 = &v46;
        }
        else {
          int v32 = v46;
        }
        if ((v48 & 0x80u) == 0) {
          uint64_t v33 = v48;
        }
        else {
          uint64_t v33 = v47;
        }
        uint64_t v34 = sub_1000042E0(v31, (uint64_t)v32, v33);
        std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
        char v35 = std::locale::use_facet((const std::locale *)&__str, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
        std::locale::~locale((std::locale *)&__str);
        std::ostream::put();
        std::ostream::flush();
        if ((char)v48 < 0) {
          operator delete(v46);
        }
        if (SHIBYTE(v45) < 0) {
          operator delete(__dst[0].__locale_);
        }
        uint64_t v36 = (std::locale::__imp *)*((void *)v27 + 1);
        if (v36)
        {
          do
          {
            uint64_t v37 = (std::locale::__imp **)v36;
            uint64_t v36 = *(std::locale::__imp **)v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            uint64_t v37 = (std::locale::__imp **)*((void *)v27 + 2);
            BOOL v22 = *v37 == (std::locale::__imp *)v27;
            uint64_t v27 = (long long *)v37;
          }
          while (!v22);
        }
        uint64_t v27 = (long long *)v37;
      }
      while (v37 != &v51);
    }
  }
  else
  {
    unsigned __int8 v38 = sub_1000042E0(&std::cout, (uint64_t)"No Morphun locales installed on device!", 39);
    std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
    char v39 = std::locale::use_facet(__dst, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
  }
  sub_10002A698((uint64_t)&__p, v51);
  return v25;
}

void sub_100031958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,void *a29,int a30,__int16 a31,char a32,char a33)
{
}

uint64_t sub_100031A84(uint64_t a1)
{
  char v3 = (void **)(a1 + 24);
  sub_100003B14(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100031AD0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_100031B14(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100003600(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  char v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_100003600(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)char v5 = v6;
  }
  return __dst;
}

void sub_100031B90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_100031BAC(uint64_t **a1, long long *a2)
{
  long long v4 = *a1;
  unint64_t v5 = (*a1)[1];
  long long v6 = *a1;
  unint64_t v9 = v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100003974();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v4) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    v20[4] = v7;
    if (v15) {
      uint64_t v16 = (char *)sub_10000398C(v7, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v16[24 * v12];
    v20[0] = v16;
    v20[1] = v17;
    v20[3] = &v16[24 * v15];
    long long v18 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v17 = v18;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    v20[2] = v17 + 24;
    sub_1000040B8(v4, v20);
    uint64_t v11 = v4[1];
    sub_100004250((uint64_t)v20);
  }
  else
  {
    long long v10 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v5 = v10;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    uint64_t v11 = v5 + 24;
    v4[1] = v5 + 24;
  }
  v4[1] = v11;
  return a1;
}

void sub_100031CE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100004250((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100031CF4(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  long long v6 = (uint64_t **)sub_1000066CC((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    sub_100031DA0((uint64_t)a1, a4, (uint64_t)v10);
    sub_100006674(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_100031E38((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_100031DA0@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 4;
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_100003600(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100031E20(_Unwind_Exception *a1)
{
  sub_100031E38(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100031E38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10002A6F4((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_100031E90(uint64_t a1)
{
  sub_100003470(v4, "contents");
  sub_100003470(__p, "Report information about the contents of a CAT file. (Sub-commands: dialogids)");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100031F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100031F3C(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_10003B18C())
  {
    sub_10003B17C(a2);
    sub_100032F68();
    return 0;
  }
  sub_100015E80();
  siri::dialogengine::StringToLower();
  if ((v89 & 0x80000000) == 0)
  {
    if (v89 == 9)
    {
      long long v6 = v88;
      goto LABEL_10;
    }
LABEL_14:
    sub_100003470(&v109, "dialogids");
    sub_100033FEC((uint64_t)v104, (const void **)&v109.__locale_, 1);
    if (SHIBYTE(v111) < 0) {
      operator delete(v109.__locale_);
    }
    long long v10 = sub_1000042E0(&std::cerr, (uint64_t)"Please specify one of the following contents sub-commands: ", 59);
    sub_100003470(&__p, ", ");
    siri::dialogengine::StringJoin();
    if (v111 >= 0) {
      locale = &v109;
    }
    else {
      locale = v109.__locale_;
    }
    if (v111 >= 0) {
      uint64_t v12 = HIBYTE(v111);
    }
    else {
      uint64_t v12 = (uint64_t)v110;
    }
    unint64_t v13 = sub_1000042E0(v10, (uint64_t)locale, v12);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    unint64_t v14 = std::locale::use_facet(&v97, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v97);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v111) < 0) {
      operator delete(v109.__locale_);
    }
    if (SHIBYTE(v103) < 0) {
      operator delete(__p);
    }
    sub_10000A3E0((uint64_t)v104, (char *)v104[1].__locale_);
    goto LABEL_27;
  }
  if (v88[1] != (void *)9) {
    goto LABEL_14;
  }
  long long v6 = (void **)v88[0];
LABEL_10:
  uint64_t v7 = *v6;
  int v8 = *((unsigned __int8 *)v6 + 8);
  BOOL v9 = v7 == (void *)0x6469676F6C616964 && v8 == 115;
  if (!v9) {
    goto LABEL_14;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) >= 3 && !sub_10003B18C())
  {
    sub_100003470(&v109, "--templateDir");
    siri::dialogengine::GetOption();
    siri::dialogengine::ExpandPath();
    if (SHIBYTE(v105) < 0) {
      operator delete(v104[0].__locale_);
    }
    if (SHIBYTE(v111) < 0) {
      operator delete(v109.__locale_);
    }
    sub_100003470(v104, "--catId");
    siri::dialogengine::GetOption();
    if (SHIBYTE(v105) < 0) {
      operator delete(v104[0].__locale_);
    }
    sub_100003470(v104, "--locale");
    siri::dialogengine::GetOption();
    if (SHIBYTE(v105) < 0) {
      operator delete(v104[0].__locale_);
    }
    sub_100003470(v104, "--json");
    int v15 = siri::dialogengine::OptionExists();
    if (SHIBYTE(v105) < 0) {
      operator delete(v104[0].__locale_);
    }
    uint64_t v16 = v99;
    if ((v99 & 0x80u) != 0) {
      uint64_t v16 = v98;
    }
    if (v16)
    {
      uint64_t v17 = v96;
      if ((v96 & 0x80u) != 0) {
        uint64_t v17 = v95;
      }
      if (v17)
      {
        v91[0] = 0;
        v91[1] = 0;
        std::string::size_type v90 = (uint64_t *)v91;
        unint64_t v18 = v93;
        if ((v93 & 0x80u) != 0) {
          unint64_t v18 = (unint64_t)v92[1];
        }
        if (v18)
        {
          v104[1].__locale_ = 0;
          std::string::size_type v105 = 0;
          v104[0].__locale_ = (std::locale::__imp *)&v104[1];
          if (!sub_100033014())
          {
            sub_10000A3E0((uint64_t)v104, (char *)v104[1].__locale_);
LABEL_166:
            sub_1000222F0((uint64_t)&v90, v91[0]);
            uint64_t v4 = 1;
            goto LABEL_167;
          }
          v109.__locale_ = (std::locale::__imp *)v92;
          unsigned __int8 v19 = (uint64_t **)(sub_1000337FC(&v90, (const void **)v92, (uint64_t)&std::piecewise_construct, (long long **)&v109)+ 7);
          if (v19 != (uint64_t **)v104) {
            sub_100033998(v19, v104[0].__locale_, &v104[1].__locale_);
          }
          sub_10000A3E0((uint64_t)v104, (char *)v104[1].__locale_);
        }
        else
        {
          siri::dialogengine::CatIdToPath();
          siri::dialogengine::JoinPath();
          if (SHIBYTE(v111) < 0) {
            operator delete(v109.__locale_);
          }
          if (siri::dialogengine::DirExists())
          {
            siri::dialogengine::GetCatLocales();
            BOOL v25 = (long long *)v109.__locale_;
            uint64_t v26 = v110;
            if (v109.__locale_ == v110)
            {
              uint64_t v43 = sub_1000042E0(&std::cerr, (uint64_t)"Cannot find any locale files in CAT directory: ", 47);
              if (SHIBYTE(v105) >= 0) {
                char v44 = v104;
              }
              else {
                char v44 = v104[0].__locale_;
              }
              if (SHIBYTE(v105) >= 0) {
                uint64_t v45 = HIBYTE(v105);
              }
              else {
                uint64_t v45 = (uint64_t)v104[1].__locale_;
              }
              uint64_t v46 = sub_1000042E0(v43, (uint64_t)v44, v45);
              std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
              uint64_t v47 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
              std::locale::~locale((std::locale *)&__p);
              std::ostream::put();
              std::ostream::flush();
              char v27 = 0;
            }
            else
            {
              char v27 = 1;
              do
              {
                long long v102 = 0;
                unint64_t v103 = 0;
                std::string __p = &v102;
                if (sub_100033014())
                {
                  char v108 = v25;
                  uint64_t v28 = (uint64_t **)(sub_1000337FC(&v90, (const void **)v25, (uint64_t)&std::piecewise_construct, &v108)
                                   + 7);
                  if (v28 != (uint64_t **)&__p) {
                    sub_100033998(v28, __p, &v102);
                  }
                }
                else
                {
                  char v27 = 0;
                }
                sub_10000A3E0((uint64_t)&__p, v102);
                BOOL v25 = (long long *)((char *)v25 + 24);
              }
              while (v25 != (long long *)v26);
            }
            std::string __p = &v109;
            sub_100003B14((void ***)&__p);
          }
          else
          {
            uint64_t v29 = sub_1000042E0(&std::cerr, (uint64_t)"CAT ID [", 8);
            if ((v96 & 0x80u) == 0) {
              int v30 = &v94;
            }
            else {
              int v30 = v94;
            }
            if ((v96 & 0x80u) == 0) {
              uint64_t v31 = v96;
            }
            else {
              uint64_t v31 = v95;
            }
            int v32 = sub_1000042E0(v29, (uint64_t)v30, v31);
            uint64_t v33 = sub_1000042E0(v32, (uint64_t)"] does not exist under template dir [", 37);
            if ((v99 & 0x80u) == 0) {
              uint64_t v34 = &v97;
            }
            else {
              uint64_t v34 = v97.__locale_;
            }
            if ((v99 & 0x80u) == 0) {
              uint64_t v35 = v99;
            }
            else {
              uint64_t v35 = v98;
            }
            uint64_t v36 = sub_1000042E0(v33, (uint64_t)v34, v35);
            uint64_t v37 = sub_1000042E0(v36, (uint64_t)"] (", 3);
            if (SHIBYTE(v105) >= 0) {
              unsigned __int8 v38 = v104;
            }
            else {
              unsigned __int8 v38 = v104[0].__locale_;
            }
            if (SHIBYTE(v105) >= 0) {
              uint64_t v39 = HIBYTE(v105);
            }
            else {
              uint64_t v39 = (uint64_t)v104[1].__locale_;
            }
            std::string::size_type v40 = sub_1000042E0(v37, (uint64_t)v38, v39);
            uint64_t v41 = sub_1000042E0(v40, (uint64_t)")", 1);
            std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
            std::string v42 = std::locale::use_facet(&v109, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
            std::locale::~locale(&v109);
            std::ostream::put();
            std::ostream::flush();
            char v27 = 0;
          }
          if (SHIBYTE(v105) < 0) {
            operator delete(v104[0].__locale_);
          }
          if ((v27 & 1) == 0) {
            goto LABEL_166;
          }
        }
        if (v15)
        {
          std::string::size_type v110 = 0;
          uint64_t v111 = 0;
          v109.__locale_ = (std::locale::__imp *)&v110;
          unsigned __int8 v48 = v90;
          if (v90 != (uint64_t *)v91)
          {
            do
            {
              std::string __p = 0;
              long long v102 = 0;
              unint64_t v103 = 0;
              long long v49 = (uint64_t *)v48[7];
              if (v49 != v48 + 8)
              {
                do
                {
                  siri::dialogengine::CreateJSONStringVal();
                  uint64_t v50 = v102;
                  if ((unint64_t)v102 >= v103)
                  {
                    int64_t v51 = (v102 - (unsigned char *)__p) >> 4;
                    unint64_t v52 = v51 + 1;
                    if ((unint64_t)(v51 + 1) >> 60) {
                      sub_100003974();
                    }
                    uint64_t v53 = v103 - (void)__p;
                    if ((uint64_t)(v103 - (void)__p) >> 3 > v52) {
                      unint64_t v52 = v53 >> 3;
                    }
                    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v54 = v52;
                    }
                    int v107 = &v103;
                    uint64_t v55 = (std::locale::__imp *)sub_10002A278((uint64_t)&v103, v54);
                    std::locale v56 = (std::locale::__imp *)((char *)v55 + 16 * v51);
                    v104[0].__locale_ = v55;
                    v104[1].__locale_ = v56;
                    std::string::size_type v106 = (char *)v55 + 16 * v57;
                    *(_OWORD *)std::locale v56 = v100;
                    long long v100 = 0uLL;
                    std::string::size_type v105 = (char *)v56 + 16;
                    sub_100033C9C((uint64_t *)&__p, v104);
                    std::string::size_type v58 = v102;
                    sub_100033E24((void **)&v104[0].__locale_);
                    long long v102 = v58;
                    if (*((void *)&v100 + 1)) {
                      sub_100006AE0(*((std::__shared_weak_count **)&v100 + 1));
                    }
                  }
                  else
                  {
                    *(_OWORD *)long long v102 = v100;
                    long long v102 = v50 + 16;
                  }
                  std::string::size_type v59 = (uint64_t *)v49[1];
                  if (v59)
                  {
                    do
                    {
                      uint64_t v60 = v59;
                      std::string::size_type v59 = (uint64_t *)*v59;
                    }
                    while (v59);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v60 = (uint64_t *)v49[2];
                      BOOL v9 = *v60 == (void)v49;
                      long long v49 = v60;
                    }
                    while (!v9);
                  }
                  long long v49 = v60;
                }
                while (v60 != v48 + 8);
              }
              siri::dialogengine::CreateJSONArrayVal();
              char v108 = (long long *)(v48 + 4);
              long long v61 = sub_100033EAC((uint64_t **)&v109, (const void **)v48 + 4, (uint64_t)&std::piecewise_construct, &v108);
              long long v62 = *(_OWORD *)&v104[0].__locale_;
              v104[0].__locale_ = 0;
              v104[1].__locale_ = 0;
              uint64_t v63 = (std::__shared_weak_count *)v61[8];
              *(_OWORD *)(v61 + 7) = v62;
              if (v63)
              {
                sub_100006AE0(v63);
                if (v104[1].__locale_) {
                  sub_100006AE0((std::__shared_weak_count *)v104[1].__locale_);
                }
              }
              v104[0].__locale_ = (std::locale::__imp *)&__p;
              sub_100008EDC((void ***)v104);
              uint64_t v64 = (uint64_t *)v48[1];
              if (v64)
              {
                do
                {
                  uint64_t v65 = v64;
                  uint64_t v64 = (uint64_t *)*v64;
                }
                while (v64);
              }
              else
              {
                do
                {
                  uint64_t v65 = (uint64_t *)v48[2];
                  BOOL v9 = *v65 == (void)v48;
                  unsigned __int8 v48 = v65;
                }
                while (!v9);
              }
              unsigned __int8 v48 = v65;
            }
            while (v65 != (uint64_t *)v91);
          }
          siri::dialogengine::ConstructJSONString();
          if (SHIBYTE(v105) >= 0) {
            uint64_t v66 = v104;
          }
          else {
            uint64_t v66 = v104[0].__locale_;
          }
          if (SHIBYTE(v105) >= 0) {
            uint64_t v67 = HIBYTE(v105);
          }
          else {
            uint64_t v67 = (uint64_t)v104[1].__locale_;
          }
          char v68 = sub_1000042E0(&std::cout, (uint64_t)v66, v67);
          std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(void *)(*v68 - 24)));
          int v69 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
          if (SHIBYTE(v105) < 0) {
            operator delete(v104[0].__locale_);
          }
          sub_100006A84((uint64_t)&v109, v110);
        }
        else
        {
          std::string::size_type v70 = v90;
          if (v90 != (uint64_t *)v91)
          {
            do
            {
              int v71 = *((char *)v70 + 55);
              if (v71 >= 0) {
                uint64_t v72 = (uint64_t)(v70 + 4);
              }
              else {
                uint64_t v72 = v70[4];
              }
              if (v71 >= 0) {
                uint64_t v73 = *((unsigned __int8 *)v70 + 55);
              }
              else {
                uint64_t v73 = v70[5];
              }
              std::string v74 = sub_1000042E0(&std::cout, v72, v73);
              std::string::size_type v75 = sub_1000042E0(v74, (uint64_t)":", 1);
              std::ios_base::getloc((const std::ios_base *)((char *)v75 + *(void *)(*v75 - 24)));
              char v76 = std::locale::use_facet(v104, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v76->__vftable[2].~facet_0)(v76, 10);
              std::locale::~locale(v104);
              std::ostream::put();
              std::ostream::flush();
              std::string::size_type v77 = (uint64_t *)v70[7];
              if (v77 != v70 + 8)
              {
                do
                {
                  char v78 = sub_1000042E0(&std::cout, (uint64_t)"    ", 4);
                  int v79 = *((char *)v77 + 55);
                  if (v79 >= 0) {
                    uint64_t v80 = (uint64_t)(v77 + 4);
                  }
                  else {
                    uint64_t v80 = v77[4];
                  }
                  if (v79 >= 0) {
                    uint64_t v81 = *((unsigned __int8 *)v77 + 55);
                  }
                  else {
                    uint64_t v81 = v77[5];
                  }
                  std::string::size_type v82 = sub_1000042E0(v78, v80, v81);
                  std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(void *)(*v82 - 24)));
                  std::string v83 = std::locale::use_facet(v104, &std::ctype<char>::id);
                  ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
                  std::locale::~locale(v104);
                  std::ostream::put();
                  std::ostream::flush();
                  std::string::size_type v84 = (uint64_t *)v77[1];
                  if (v84)
                  {
                    do
                    {
                      char v85 = v84;
                      std::string::size_type v84 = (uint64_t *)*v84;
                    }
                    while (v84);
                  }
                  else
                  {
                    do
                    {
                      char v85 = (uint64_t *)v77[2];
                      BOOL v9 = *v85 == (void)v77;
                      std::string::size_type v77 = v85;
                    }
                    while (!v9);
                  }
                  std::string::size_type v77 = v85;
                }
                while (v85 != v70 + 8);
              }
              std::string::size_type v86 = (uint64_t *)v70[1];
              if (v86)
              {
                do
                {
                  uint64_t v87 = v86;
                  std::string::size_type v86 = (uint64_t *)*v86;
                }
                while (v86);
              }
              else
              {
                do
                {
                  uint64_t v87 = (uint64_t *)v70[2];
                  BOOL v9 = *v87 == (void)v70;
                  std::string::size_type v70 = v87;
                }
                while (!v9);
              }
              std::string::size_type v70 = v87;
            }
            while (v87 != (uint64_t *)v91);
          }
        }
        goto LABEL_166;
      }
    }
    else
    {
      uint64_t v20 = sub_1000042E0(&std::cerr, (uint64_t)"Error: The option \"--templateDir\" is required", 45);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
      int v21 = std::locale::use_facet(v104, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(v104);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v22 = v96;
      if ((v96 & 0x80u) != 0) {
        uint64_t v22 = v95;
      }
      if (v22) {
        goto LABEL_60;
      }
    }
    BOOL v23 = sub_1000042E0(&std::cerr, (uint64_t)"Error: The option \"--catId\" is required", 39);
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
    int v24 = std::locale::use_facet(v104, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
    std::locale::~locale(v104);
    std::ostream::put();
    std::ostream::flush();
LABEL_60:
    uint64_t v4 = 0;
LABEL_167:
    if ((char)v93 < 0) {
      operator delete(v92[0]);
    }
    if ((char)v96 < 0) {
      operator delete(v94);
    }
    if ((char)v99 < 0) {
      operator delete(v97.__locale_);
    }
    goto LABEL_28;
  }
  sub_10003B17C(a2);
  sub_100032F68();
LABEL_27:
  uint64_t v4 = 0;
LABEL_28:
  if (v89 < 0) {
    operator delete(v88[0]);
  }
  return v4;
}

void sub_100032CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::locale a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,std::locale a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  std::locale::~locale(&a40);
  a37 = v51 - 120;
  sub_100003B14((void ***)&a37);
  if (a51 < 0) {
    operator delete(__p);
  }
  sub_1000222F0((uint64_t)&a16, a17);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31.__locale_);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_100032F68()
{
  sub_100003470(&v2, "\n  <EXECUTABLE> <COMMAND> dialogids --templateDir <dir> --catId <id> [--locale <locale>]\n          [--json] [--debug]\n\n      Report the IDs of all <dialog> elements in the specified CAT file.\n\n      --catId <id>        The CAT ID to read (e.g.: \"example#hello\")\n      --debug             Output debug log messages\n      --json              Output results in JSON format\n      --locale <locale>   The locale to process; If omitted, all existing locales are processed\n"
    "      --templateDir <dir> Path to the template directory\n");
  sub_100003470(&__p, "contents");
  sub_10003B430();
  if (v1 < 0) {
    operator delete(__p);
  }
  if (v3 < 0) {
    operator delete(v2);
  }
}

void sub_100032FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100033014()
{
  __chkstk_darwin();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = (void *)(v0 + 8);
  sub_10000A3E0(v0, *(char **)(v0 + 8));
  *(void *)uint64_t v1 = v4;
  *(void *)(v1 + 16) = 0;
  *uint64_t v4 = 0;
  siri::dialogengine::GetTemplateDirs();
  siri::dialogengine::FindParamsFile();
  if (*(char *)(v3 + 23) < 0)
  {
    sub_100003600(__p, *(void **)v3, *(void *)(v3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    int v32 = *(long long **)(v3 + 16);
  }
  v21.__locale_ = 0;
  locale = 0;
  BOOL v23 = 0;
  LOBYTE(v19) = 0;
  v21.__locale_ = (std::locale::__imp *)operator new(0x18uLL);
  locale = v21.__locale_;
  BOOL v23 = (char *)v21.__locale_ + 24;
  locale = sub_100008D8C((uint64_t)&v23, (long long *)__p, v33, (char *)v21.__locale_);
  siri::dialogengine::FindLocaleFile();
  unint64_t v18 = &v21;
  sub_100003B14((void ***)&v18);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = v26;
  if ((v26 & 0x80u) != 0) {
    uint64_t v5 = v25;
  }
  if (v5)
  {
    siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v21);
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p);
    siri::dialogengine::RequestInfo::SetTemplateDirs();
    siri::dialogengine::RequestInfo::SetParamsPath();
    siri::dialogengine::RequestInfo::SetLocalePath();
    LODWORD(v18) = 0;
    siri::dialogengine::RequestInfo::SetRequestType();
    siri::dialogengine::Context::SetRequestInfo();
    sub_10002A454((uint64_t)__p);
    uint64_t v6 = siri::dialogengine::Context::Load((siri::dialogengine::Context *)&v21);
    if (v6)
    {
      siri::dialogengine::Context::GetFile((uint64_t *)&v18, (siri::dialogengine::Context *)&v21);
      __p[0] = off_10007D0D8;
      __p[1] = v18;
      v33[0] = 0uLL;
      int v32 = v33;
      (*(void (**)(void *, void **))(*(void *)v18 + 32))(v18, __p);
      if (&v32 != (long long **)v1) {
        sub_100033998((uint64_t **)v1, v32, v33);
      }
      __p[0] = off_10007D0D8;
      sub_10000A3E0((uint64_t)&v32, *(char **)&v33[0]);
      if (v19) {
        sub_100006AE0(v19);
      }
    }
    else
    {
      uint64_t v12 = sub_1000042E0(&std::cerr, (uint64_t)"Failed to load CAT locale file: ", 32);
      siri::dialogengine::Context::GetRequestInfo((uint64_t *)__p, (siri::dialogengine::Context *)&v21);
      siri::dialogengine::RequestInfo::GetLocalePath((uint64_t *)&v18, (siri::dialogengine::RequestInfo *)__p);
      if ((v20 & 0x80u) == 0) {
        unint64_t v13 = &v18;
      }
      else {
        unint64_t v13 = v18;
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v14 = v20;
      }
      else {
        uint64_t v14 = (uint64_t)v19;
      }
      int v15 = sub_1000042E0(v12, (uint64_t)v13, v14);
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
      uint64_t v16 = std::locale::use_facet(&v30, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v30);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v20 < 0) {
        operator delete(v18);
      }
      sub_10002A454((uint64_t)__p);
    }
    siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v21);
  }
  else
  {
    uint64_t v7 = sub_1000042E0(&std::cerr, (uint64_t)"Cannot find CAT locale file: ", 29);
    if ((v26 & 0x80u) == 0) {
      int v8 = &v24;
    }
    else {
      int v8 = v24;
    }
    if ((v26 & 0x80u) == 0) {
      uint64_t v9 = v26;
    }
    else {
      uint64_t v9 = v25;
    }
    long long v10 = sub_1000042E0(v7, (uint64_t)v8, v9);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    uint64_t v11 = std::locale::use_facet(&v21, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v6 = 0;
  }
  if ((char)v26 < 0) {
    operator delete(v24);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  v21.__locale_ = (std::locale::__imp *)&v29;
  sub_10000C39C((void ***)&v21);
  return v6;
}

void sub_100033494(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10002A454((uint64_t)&STACK[0xE20]);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)va);
  if (SLOBYTE(STACK[0xDE7]) < 0) {
    operator delete((void *)STACK[0xDD0]);
  }
  if (SLOBYTE(STACK[0xDFF]) < 0) {
    operator delete((void *)STACK[0xDE8]);
  }
  STACK[0xE20] = (unint64_t)&STACK[0xE00];
  sub_10000C39C((void ***)&STACK[0xE20]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000335B0(uint64_t a1)
{
  *(void *)a1 = off_10007D0D8;
  sub_10000A3E0(a1 + 16, *(char **)(a1 + 24));
  return a1;
}

void sub_1000335F8(uint64_t a1)
{
  *(void *)a1 = off_10007D0D8;
  sub_10000A3E0(a1 + 16, *(char **)(a1 + 24));
  operator delete();
}

void sub_100033660(uint64_t a1)
{
  siri::dialogengine::File::GetOrCreateId();
  sub_1000336DC((uint64_t **)(a1 + 16), (const void **)__p, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000336BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000336DC(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)sub_1000066CC((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    sub_10003375C((uint64_t)a1, a3, (uint64_t)&v7);
    sub_100006674(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *sub_10003375C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_100003600(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1000337E0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10000A1D0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000337FC(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_1000066CC((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_1000338A8((uint64_t)a1, a4, (uint64_t)v10);
    sub_100006674(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_100033940((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_1000338A8@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_100003600(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100033928(_Unwind_Exception *a1)
{
  sub_100033940(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100033940(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10002234C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t **sub_100033998(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    int v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = sub_100033B98((uint64_t)v8);
      if (a2 != a3)
      {
        long long v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          long long v10 = (uint64_t **)sub_100033B1C((uint64_t)v5, &v18, v17 + 4);
          sub_100006674(v5, v18, v10, (uint64_t *)v17);
          uint64_t v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = sub_100033B98((uint64_t)v16);
          }
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              long long v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          long long v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)sub_100033BEC((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_100033C44(v5, (uint64_t)(a2 + 4));
      unint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_100033B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100033B1C(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if (!sub_10000676C(v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void *sub_100033B98(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t sub_100033BEC(uint64_t a1)
{
  sub_10000A3E0(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_10000A3E0(*(void *)a1, (char *)v2);
  }
  return a1;
}

const void **sub_100033C44(uint64_t **a1, uint64_t a2)
{
  sub_10003375C((uint64_t)a1, a2, (uint64_t)&v6);
  uint64_t v3 = (uint64_t **)sub_100033B1C((uint64_t)a1, &v5, v6 + 4);
  sub_100006674(a1, v5, v3, (uint64_t *)v6);
  return v6;
}

uint64_t sub_100033C9C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100033D14((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100033D14(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100033DA8((uint64_t)v12);
  return v10;
}

uint64_t sub_100033DA8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100033DE0(a1);
  }
  return a1;
}

void sub_100033DE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_100006AE0(v3);
    }
    v1 += 16;
  }
}

void **sub_100033E24(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100033E58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_100006AE0(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

uint64_t *sub_100033EAC(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_1000066CC((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_100033F58((uint64_t)a1, a4, (uint64_t)v10);
    sub_100006674(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_1000069D8((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_100033F58@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_100003600(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100033FD4(_Unwind_Exception *a1)
{
  sub_1000069D8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100033FEC(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      sub_100034070((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_100034058(_Unwind_Exception *a1)
{
  sub_10000A3E0(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100034070(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_10000645C(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_10000A340((uint64_t)a1, a4, (uint64_t)&v8);
    sub_100006674(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_1000340F4()
{
  uint64_t v0 = sub_1000042E0(&std::cout, (uint64_t)"CAT file command line utility. Version 3402.35.1.\n", 50);
  uint64_t v1 = sub_1000042E0(v0, (uint64_t)"\n", 1);
  uint64_t v2 = sub_1000042E0(v1, (uint64_t)"usage:", 6);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  uint64_t v3 = std::locale::use_facet(&v5, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v5);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1000341CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_1000341E0(uint64_t a1)
{
  sub_1000340F4();
  sub_1000042E0(&std::cout, (uint64_t)"\n  (See 'catutil <command> --help' for details about a specific command.)\n\n  catutil [-h] [--help] [--version] [--minVersion <version>]\n      --help will display this information and exit.\n      --version displays the version number for this build of the tool.\n      --minVersion checks if this build meets the specified minimum version\n          number requirement. Returns a shell code of 0 if met, 1 if not.\n", 411);
  sub_10000F5F4(a1);
  sub_10004807C(a1);
  sub_100031E90(a1);
  sub_100008F7C(a1);
  sub_10002B514(a1);
  sub_10002B5C0(a1);
  sub_10002B91C(a1);
  sub_10002B7C4(a1);
  sub_10002BBCC(a1);
  sub_10002BA74(a1);
  sub_10004AB00(a1);
  sub_10003D104(a1);
  sub_10000A444(a1);
  sub_100015F30(a1);
  sub_10004B95C(a1);
  sub_10003B644(a1);
  sub_100030928(a1);
  sub_10003BCC4(a1);
  sub_10002FA0C(a1);
  sub_1000046B8(a1);
  sub_10003541C(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)&std::cout
                                              + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0));
  uint64_t v2 = std::locale::use_facet(&v4, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_100034350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_100034364(uint64_t a1)
{
  sub_100003470(__p, "./pause.txt");
  siri::dialogengine::ExpandPath();
  if ((v34[0] & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
  while (siri::dialogengine::PathExists())
  {
    sub_1000042E0(&std::cout, (uint64_t)"Pause for ", 10);
    uint64_t v2 = (void *)std::ostream::operator<<();
    uint64_t v3 = sub_1000042E0(v2, (uint64_t)" seconds while the file [", 25);
    if ((v37 & 0x80u) == 0) {
      locale = &v35;
    }
    else {
      locale = v35.__locale_;
    }
    if ((v37 & 0x80u) == 0) {
      uint64_t v5 = v37;
    }
    else {
      uint64_t v5 = v36;
    }
    uint64_t v6 = sub_1000042E0(v3, (uint64_t)locale, v5);
    uint64_t v7 = sub_1000042E0(v6, (uint64_t)"] exists", 8);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    uint64_t v8 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    __p[0] = (void *)5000000000;
    std::this_thread::sleep_for ((const std::chrono::nanoseconds *)__p);
  }
  if ((char)v37 < 0) {
    operator delete(v35.__locale_);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) <= 1)
  {
    sub_1000341E0(a1);
    return 0;
  }
  sub_10003B128((uint64_t)__p, (long long **)a1, (uint64_t)sub_1000340F4);
  siri::dialogengine::StringToLower();
  sub_100003470(&v35, "contents");
  unsigned __int8 v38 = sub_100031F3C;
  sub_100003470(v39, "diff");
  v39[3] = sub_100009028;
  sub_100003470(v40, "exclude");
  v40[3] = sub_10003BFA4;
  sub_100003470(v41, "execute");
  void v41[3] = sub_100011B14;
  sub_100003470(v42, "expand");
  v42[3] = sub_100004764;
  sub_100003470(v43, "metadata");
  v43[3] = sub_10004038C;
  sub_100003470(v44, "params");
  v44[3] = sub_10000A4F0;
  sub_100003470(v45, "pattern");
  v45[3] = sub_100016D48;
  sub_100003470(v46, "test");
  void v46[3] = sub_10002FAB8;
  sub_100003470(v47, "tobinary");
  v47[3] = sub_10002D460;
  sub_100003470(v48, "tobinarypatternschema");
  v48[3] = sub_10002D460;
  sub_100003470(v49, "tobinaryschema");
  v49[3] = sub_10002D460;
  sub_100003470(v50, "toxml");
  v50[3] = sub_10002D460;
  sub_100003470(v51, "toyamlpatternschema");
  v51[3] = sub_10002D460;
  sub_100003470(v52, "toyamlschema");
  v52[3] = sub_10002D460;
  sub_100003470(v53, "upgrade");
  v53[3] = sub_10004ABAC;
  sub_100003470(v54, "validate");
  v54[3] = sub_100048128;
  sub_100003470(v55, "metrics");
  v55[3] = sub_100035950;
  sub_100003470(v56, "assetdelivery");
  v56[3] = sub_10004BA08;
  sub_100003470(v57, "manifest");
  v57[3] = sub_10003B6F0;
  sub_100003470(v58, "morphun");
  v58[3] = sub_1000309D4;
  sub_100034D00((uint64_t)v29, (const void **)&v35.__locale_, 21);
  uint64_t v10 = 84;
  do
  {
    if ((char)v34[v10 * 8] < 0) {
      operator delete(__p[v10]);
    }
    v10 -= 4;
  }
  while (v10 * 8);
  uint64_t v11 = sub_10000A230((uint64_t)v29, (const void **)&v31);
  if (&v30 != (char **)v11)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void **))(v11 + 56))(a1, __p);
    goto LABEL_21;
  }
  sub_100003470(&v35, "--version");
  int v13 = siri::dialogengine::OptionExists();
  int v14 = v13;
  if ((char)v37 < 0)
  {
    operator delete(v35.__locale_);
    if (v14) {
      goto LABEL_25;
    }
  }
  else if (v13)
  {
LABEL_25:
    long long v15 = sub_1000042E0(&std::cout, (uint64_t)"3402.35.1", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    uint64_t v16 = std::locale::use_facet(&v35, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v35);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_26;
  }
  sub_100003470(&v35, "--minVersion");
  int v18 = siri::dialogengine::OptionExists();
  int v19 = v18;
  if ((char)v37 < 0)
  {
    operator delete(v35.__locale_);
    if (v19) {
      goto LABEL_30;
    }
LABEL_44:
    sub_1000341E0(a1);
    uint64_t v9 = 0;
LABEL_45:
    uint64_t v17 = "false";
    goto LABEL_46;
  }
  if (!v18) {
    goto LABEL_44;
  }
LABEL_30:
  sub_100003470(&v27, "--minVersion");
  siri::dialogengine::GetOption();
  sub_100003470(&v25, "3402.35.1");
  uint64_t v9 = siri::dialogengine::VersionLessThanOrEqual();
  if (v26 < 0) {
    operator delete(v25);
  }
  if ((char)v37 < 0) {
    operator delete(v35.__locale_);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v9) {
    unsigned __int8 v20 = "Minimum version met";
  }
  else {
    unsigned __int8 v20 = "Minimum version not met";
  }
  if (v9) {
    uint64_t v21 = 19;
  }
  else {
    uint64_t v21 = 23;
  }
  uint64_t v22 = sub_1000042E0(&std::cout, (uint64_t)v20, v21);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
  BOOL v23 = std::locale::use_facet(&v35, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&v35);
  std::ostream::put();
  std::ostream::flush();
LABEL_21:
  if (!v9) {
    goto LABEL_45;
  }
LABEL_26:
  uint64_t v17 = "true";
  uint64_t v9 = 1;
LABEL_46:
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"CatUtilMain() exiting with result: %s", v12, v17);
  sub_10000A3E0((uint64_t)v29, v30);
  if (v32 < 0) {
    operator delete(v31);
  }
  v35.__locale_ = (std::locale::__imp *)__p;
  sub_100003B14((void ***)&v35);
  return v9;
}

void sub_100034B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,char *a24,uint64_t a25,std::locale *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,std::locale a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,std::locale a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39.__locale_);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_10000A3E0((uint64_t)&a23, a24);
  if (a31 < 0) {
    operator delete(a26);
  }
  a26 = &a32;
  sub_100003B14((void ***)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_100034D00(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  std::locale v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_100034D80((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_100034D68(_Unwind_Exception *a1)
{
  sub_10000A3E0(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100034D80(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_10000645C(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_100034E04((uint64_t)a1, a4, (uint64_t)&v8);
    sub_100006674(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_100034E04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_100003600(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v6 + 7) = *(void *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100034E90(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10000A1D0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100034EAC()
{
  siri::dialogengine::StringToLower();
  siri::dialogengine::StringToLower();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080720, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080720))
  {
    sub_100003470(&v15, "Weather#dailyForecast");
    sub_100035318((uint64_t)&qword_100080708, &v15, 1uLL);
    if (v16 < 0) {
      operator delete((void *)v15);
    }
    __cxa_atexit((void (*)(void *))sub_1000353B8, &qword_100080708, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080720);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080740, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080740))
  {
    qword_100080738 = 0;
    qword_100080730 = 0;
    qword_100080728 = (uint64_t)&qword_100080730;
    __cxa_atexit((void (*)(void *))sub_1000353F0, &qword_100080728, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080740);
  }
  if (!qword_100080738)
  {
    uint64_t v0 = qword_100080708;
    for (uint64_t i = *(void *)algn_100080710; v0 != i; v0 += 24)
    {
      siri::dialogengine::StringToLower();
      sub_100039104((uint64_t **)&qword_100080728, (const void **)&v15, (uint64_t)&v15);
      if (v16 < 0) {
        operator delete((void *)v15);
      }
    }
  }
  if ((uint64_t *)sub_10000A230((uint64_t)&qword_100080728, (const void **)&v13) != &qword_100080730) {
    goto LABEL_31;
  }
  sub_100003470(v9, "dateTime#timeShortTwentyFourHourDisplay");
  siri::dialogengine::StringToLower();
  if (siri::dialogengine::StringsEqual())
  {
    sub_100003470(&__p, "it");
    char v2 = siri::dialogengine::StringsEqual();
    if (v8 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    char v2 = 0;
  }
  if (v16 < 0) {
    operator delete((void *)v15);
  }
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if (v2)
    {
LABEL_31:
      uint64_t v5 = 1;
      goto LABEL_32;
    }
  }
  else if (v2)
  {
    goto LABEL_31;
  }
  siri::dialogengine::StringToLower();
  sub_100003470(v9, "catci/dialogenginetemplates");
  int v3 = siri::dialogengine::StringContains();
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v16 < 0)
  {
    operator delete((void *)v15);
    if (!v3) {
      goto LABEL_38;
    }
  }
  else if (!v3)
  {
    goto LABEL_38;
  }
  sub_100003470(&v15, "example#");
  if (siri::dialogengine::StringContains())
  {
    char v4 = 1;
  }
  else
  {
    sub_100003470(v9, "phrases#");
    char v4 = siri::dialogengine::StringContains();
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
  if (v16 < 0)
  {
    operator delete((void *)v15);
    if (v4) {
      goto LABEL_31;
    }
  }
  else if (v4)
  {
    goto LABEL_31;
  }
LABEL_38:
  uint64_t v5 = 0;
LABEL_32:
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  return v5;
}

void sub_100035218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 41) < 0) {
    operator delete(*(void **)(v32 - 64));
  }
  __cxa_guard_abort(&qword_100080720);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100035318(uint64_t a1, long long *a2, unint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    sub_100003920((void *)a1, a3);
    *(void *)(a1 + 8) = sub_100008D8C(v4, a2, (long long *)((char *)a2 + 24 * a3), *(char **)(a1 + 8));
  }
  return a1;
}

void sub_100035398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100003B14(&a9);
  _Unwind_Resume(a1);
}

void **sub_1000353B8(void **a1)
{
  int v3 = a1;
  sub_100003B14(&v3);
  return a1;
}

uint64_t sub_1000353F0(uint64_t a1)
{
  return a1;
}

void sub_10003541C(uint64_t a1)
{
  sub_100003470(v4, "metrics");
  sub_100003470(__p, "Report complexity metrics for one or more CAT files.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100035494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000354C8(uint64_t a1)
{
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_100033FEC(a1 + 152, 0, 0);
  return a1;
}

void sub_100035530(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*(void **)(v1 + 48));
  }
  sub_100062B7C(v1, v2);
  _Unwind_Resume(a1);
}

void sub_100035558(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_100003600(__dst, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a1;
    uint64_t v16 = *(void *)(a1 + 16);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    sub_100003600(&v17, *(void **)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    long long v17 = *(_OWORD *)(a1 + 24);
    uint64_t v18 = *(void *)(a1 + 40);
  }
  std::to_string(&v19, *(void *)(a1 + 72));
  std::to_string(&v20, *(void *)(a1 + 80));
  std::to_string(&v21, *(void *)(a1 + 88));
  std::to_string(&v22, *(void *)(a1 + 96));
  std::to_string(&v23, *(void *)(a1 + 104));
  std::to_string(&v24, *(void *)(a1 + 112));
  std::to_string(&v25, *(void *)(a1 + 128));
  std::to_string(&v26, *(void *)(a1 + 136));
  std::to_string(&v27, *(float *)(a1 + 144));
  if (*(char *)(a1 + 71) < 0)
  {
    sub_100003600(&v28, *(void **)(a1 + 48), *(void *)(a1 + 56));
  }
  else
  {
    long long v28 = *(_OWORD *)(a1 + 48);
    uint64_t v29 = *(void *)(a1 + 64);
  }
  sub_100003470(&__p, ", ");
  siri::dialogengine::StringJoin();
  char v2 = std::string::insert(&v9, 0, "\"");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v10.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v10, "\"");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v31 = v4->__r_.__value_.__r.__words[2];
  long long v30 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = 0;
  char v12 = 0;
  v13[0] = 0;
  v13[1] = &v11;
  char v14 = 0;
  uint64_t v11 = (char *)operator new(0x138uLL);
  char v12 = v11;
  v13[0] = v11 + 312;
  char v12 = sub_100008D8C((uint64_t)v13, (long long *)__dst, &v32, v11);
  uint64_t v6 = 39;
  do
  {
    if (SHIBYTE(__dst[v6 - 1]) < 0) {
      operator delete((void *)v13[v6]);
    }
    v6 -= 3;
  }
  while (v6 * 8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (v8 < 0) {
    operator delete(__p);
  }
  sub_100003470(__dst, ", ");
  siri::dialogengine::StringJoin();
  if (SHIBYTE(v16) < 0) {
    operator delete(__dst[0]);
  }
  __dst[0] = &v11;
  sub_100003B14((void ***)__dst);
}

void sub_100035844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  std::string __p = &a27;
  sub_100003B14((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100035950(void *a1, uint64_t a2)
{
  siri::dialogengine::ElapsedTimer::ElapsedTimer((siri::dialogengine::ElapsedTimer *)v122);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_10003B18C())
  {
    sub_10003B17C(a2);
    sub_100003470(&__dst, "\n  <EXECUTABLE> <COMMAND> --templateDir <dir> [--catId <id>] [--locale <locale>] [--dialogIDsOnly]\n\n      If --templateDir and --catId are specified, then report metrics for the specified CAT file.\n      If --locale is also specified then report metrics for only that locale, otherwise report for all locales.\n\n      If --templateDir is specified and --catId is not, then find and report metrics for all CAT files\n      under the directory and any template directories nested within it.  If --locale is specified, then\n      only generate metrics for that locale of each CAT file, otherwise report metrics for all locales for\n      all CAT files.\n\n      If the --dialogIDsOnly option is present, this will produce a JSON that contains only the dialog IDs\n      present in each CAT file for the purpose of comparison and identification of mismatches.\n\n");
    sub_100003470(&v133, "metrics");
    sub_10003B430();
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v133.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  sub_100003470(&v133, "--templateDir");
  siri::dialogengine::GetOption();
  siri::dialogengine::ExpandPath();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (siri::dialogengine::DirExists())
    {
      sub_100003470(&__dst, "--catId");
      siri::dialogengine::GetOption();
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      sub_100003470(&__dst, "--locale");
      siri::dialogengine::GetOption();
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      sub_100003470(&__dst, "--dialogIDsOnly");
      int v7 = siri::dialogengine::OptionExists();
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      memset(&v115, 0, sizeof(v115));
      uint64_t v8 = v120;
      if ((v120 & 0x80u) != 0) {
        uint64_t v8 = v119;
      }
      if (v8)
      {
        sub_100036D54((uint64_t)v116, (uint64_t *)&__dst);
        sub_100039230((void **)&v115.__r_.__value_.__l.__data_);
        std::string v115 = __dst;
        memset(&__dst, 0, sizeof(__dst));
        v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
        sub_100039198((void ***)&v133);
        if (v7)
        {
LABEL_27:
          *(_OWORD *)&v133.__r_.__value_.__r.__words[1] = 0uLL;
          v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133.__r_.__value_.__l.__size_;
          *(_OWORD *)&v132.__r_.__value_.__r.__words[1] = 0uLL;
          v132.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132.__r_.__value_.__l.__size_;
          std::string::size_type v10 = v115.__r_.__value_.__l.__size_;
          for (std::string::size_type i = v115.__r_.__value_.__r.__words[0]; i != v10; i += 176)
          {
            memset(&v131, 0, sizeof(v131));
            uint64_t v11 = *(void **)(i + 152);
            if (v11 != (void *)(i + 160))
            {
              do
              {
                siri::dialogengine::CreateJSONStringVal();
                std::string::size_type v12 = v131.__r_.__value_.__l.__size_;
                if (v131.__r_.__value_.__l.__size_ >= v131.__r_.__value_.__r.__words[2])
                {
                  uint64_t v13 = (uint64_t)(v131.__r_.__value_.__l.__size_ - v131.__r_.__value_.__r.__words[0]) >> 4;
                  unint64_t v14 = v13 + 1;
                  if ((unint64_t)(v13 + 1) >> 60) {
                    sub_100003974();
                  }
                  int64_t v15 = v131.__r_.__value_.__r.__words[2] - v131.__r_.__value_.__r.__words[0];
                  if ((uint64_t)(v131.__r_.__value_.__r.__words[2] - v131.__r_.__value_.__r.__words[0]) >> 3 > v14) {
                    unint64_t v14 = v15 >> 3;
                  }
                  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v16 = v14;
                  }
                  int v137 = &v131.__r_.__value_.__s.__data_[16];
                  long long v17 = (char *)sub_10002A278((uint64_t)&v131.__r_.__value_.__r.__words[2], v16);
                  uint64_t v18 = &v17[16 * v13];
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
                  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
                  std::string::size_type v136 = &v17[16 * v19];
                  *(_OWORD *)uint64_t v18 = *(_OWORD *)&v130.__r_.__value_.__l.__data_;
                  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = 0uLL;
                  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)(v18 + 16);
                  sub_100033C9C((uint64_t *)&v131, &__dst);
                  std::string::size_type v20 = v131.__r_.__value_.__l.__size_;
                  sub_100033E24((void **)&__dst.__r_.__value_.__l.__data_);
                  v131.__r_.__value_.__l.__size_ = v20;
                  if (v130.__r_.__value_.__l.__size_) {
                    sub_100006AE0((std::__shared_weak_count *)v130.__r_.__value_.__l.__size_);
                  }
                }
                else
                {
                  *(_OWORD *)v131.__r_.__value_.__l.__size_ = *(_OWORD *)&v130.__r_.__value_.__l.__data_;
                  v131.__r_.__value_.__l.__size_ = v12 + 16;
                }
                std::string v21 = (void *)v11[1];
                if (v21)
                {
                  do
                  {
                    std::string v22 = v21;
                    std::string v21 = (void *)*v21;
                  }
                  while (v21);
                }
                else
                {
                  do
                  {
                    std::string v22 = (void *)v11[2];
                    BOOL v23 = *v22 == (void)v11;
                    uint64_t v11 = v22;
                  }
                  while (!v23);
                }
                uint64_t v11 = v22;
              }
              while (v22 != (void *)(i + 160));
            }
            siri::dialogengine::CreateJSONArrayVal();
            v129.__r_.__value_.__r.__words[0] = i + 24;
            std::string v24 = sub_100033EAC((uint64_t **)&v132, (const void **)(i + 24), (uint64_t)&std::piecewise_construct, (long long **)&v129);
            long long v25 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
            std::string v26 = (std::__shared_weak_count *)v24[8];
            *(_OWORD *)(v24 + 7) = v25;
            if (v26)
            {
              sub_100006AE0(v26);
              if (__dst.__r_.__value_.__l.__size_) {
                sub_100006AE0((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
              }
            }
            siri::dialogengine::CreateJSONObjectVal();
            v129.__r_.__value_.__r.__words[0] = i;
            std::string v27 = sub_100033EAC((uint64_t **)&v133, (const void **)i, (uint64_t)&std::piecewise_construct, (long long **)&v129);
            long long v28 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
            uint64_t v29 = (std::__shared_weak_count *)v27[8];
            *(_OWORD *)(v27 + 7) = v28;
            if (v29)
            {
              sub_100006AE0(v29);
              if (__dst.__r_.__value_.__l.__size_) {
                sub_100006AE0((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
              }
            }
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
            sub_100008EDC((void ***)&__dst);
          }
          p_dst = &__dst;
          siri::dialogengine::ConstructJSONString();
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          size_t v31 = strlen((const char *)p_dst);
          long long v32 = sub_1000042E0(&std::cout, (uint64_t)p_dst, v31);
          std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
          uint64_t v33 = std::locale::use_facet((const std::locale *)&v131, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
          std::locale::~locale((std::locale *)&v131);
          std::ostream::put();
          std::ostream::flush();
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          sub_100006A84((uint64_t)&v132, (void *)v132.__r_.__value_.__l.__size_);
          sub_100006A84((uint64_t)&v133, (void *)v133.__r_.__value_.__l.__size_);
LABEL_208:
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
          sub_100039198((void ***)&__dst);
          if (v117 < 0) {
            operator delete(v116[0]);
          }
          if ((char)v120 < 0) {
            operator delete(v118);
          }
          uint64_t v4 = 1;
          goto LABEL_213;
        }
LABEL_175:
        if (v115.__r_.__value_.__r.__words[0] != v115.__r_.__value_.__l.__size_)
        {
          sub_100003470(&__dst, "catId, locale, xml lines, dialogs, texts, phrases, conditions, parameters, semantic concepts, expansion lines, expansion time (seconds), file path, dialog IDs");
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v81 = &__dst;
          }
          else {
            uint64_t v81 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v82 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v82 = __dst.__r_.__value_.__l.__size_;
          }
          std::string v83 = sub_1000042E0(&std::cout, (uint64_t)v81, v82);
          std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(void *)(*v83 - 24)));
          std::string::size_type v84 = std::locale::use_facet((const std::locale *)&v133, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10);
          std::locale::~locale((std::locale *)&v133);
          std::ostream::put();
          std::ostream::flush();
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          std::string::size_type v86 = v115.__r_.__value_.__l.__size_;
          for (uint64_t j = v115.__r_.__value_.__r.__words[0]; j != v86; j += 176)
          {
            sub_100035558(j);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v87 = &__dst;
            }
            else {
              uint64_t v87 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v88 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v88 = __dst.__r_.__value_.__l.__size_;
            }
            char v89 = sub_1000042E0(&std::cout, (uint64_t)v87, v88);
            std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(void *)(*v89 - 24)));
            std::string::size_type v90 = std::locale::use_facet((const std::locale *)&v133, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
            std::locale::~locale((std::locale *)&v133);
            std::ostream::put();
            std::ostream::flush();
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
          }
        }
        sub_100003470(&v133, "catutil metrics took ");
        siri::dialogengine::ElapsedTimer::GetSecs((siri::dialogengine::ElapsedTimer *)v122);
        std::to_string(&v132, v91);
        if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v92 = &v132;
        }
        else {
          uint64_t v92 = (std::string *)v132.__r_.__value_.__r.__words[0];
        }
        if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v93 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v93 = v132.__r_.__value_.__l.__size_;
        }
        std::string::size_type v94 = std::string::append(&v133, (const std::string::value_type *)v92, v93);
        long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v95;
        v94->__r_.__value_.__l.__size_ = 0;
        v94->__r_.__value_.__r.__words[2] = 0;
        v94->__r_.__value_.__r.__words[0] = 0;
        unsigned __int8 v96 = std::string::append(&__dst, " seconds");
        long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        std::string::size_type v100 = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)unsigned __int8 v99 = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        sub_100037228((uint64_t)v99);
        if (SHIBYTE(v100) < 0) {
          operator delete(v99[0]);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v132.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v133.__r_.__value_.__l.__data_);
        }
        goto LABEL_208;
      }
      sub_100003470(&__dst, "dialog");
      siri::dialogengine::JoinPath();
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if ((siri::dialogengine::DirExists() & 1) == 0) {
        std::string::operator=(&v114, &__str);
      }
      siri::dialogengine::ListDirRecursively();
      v111[0] = 0;
      v111[1] = 0;
      std::string::size_type v110 = v111;
      uint64_t v39 = v112;
      std::string::size_type v40 = v113;
      uint64_t v41 = v111;
      if (v112 != v113)
      {
        while (1)
        {
          if (*((char *)v39 + 23) < 0)
          {
            sub_100003600(&__dst, *(void **)v39, *((void *)v39 + 1));
          }
          else
          {
            long long v42 = *v39;
            __dst.__r_.__value_.__r.__words[2] = *((void *)v39 + 2);
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v42;
          }
          siri::dialogengine::JoinPath();
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          std::string __dst = v133;
          sub_100003470(&v133, "Templates/dialog/");
          char v43 = siri::dialogengine::StringContains();
          char v44 = v43;
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v133.__r_.__value_.__l.__data_);
            if ((v44 & 1) == 0) {
              goto LABEL_85;
            }
          }
          else if ((v43 & 1) == 0)
          {
            goto LABEL_85;
          }
          sub_100003470(&v133, "cat");
          HasExtensiouint64_t n = siri::dialogengine::HasExtension();
          char v46 = HasExtension;
          if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if ((HasExtension & 1) == 0) {
              goto LABEL_85;
            }
LABEL_84:
            sub_10000A2C0((uint64_t **)&v110, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&__dst);
            goto LABEL_85;
          }
          operator delete(v133.__r_.__value_.__l.__data_);
          if (v46) {
            goto LABEL_84;
          }
LABEL_85:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          uint64_t v39 = (long long *)((char *)v39 + 24);
          if (v39 == v40)
          {
            uint64_t v41 = v110;
            break;
          }
        }
      }
      int v98 = v7;
      sub_1000392A0(&v108, v41, v111);
      unint64_t v47 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v109 - (char *)v108) >> 3));
      if (v109 == v108) {
        uint64_t v48 = 0;
      }
      else {
        uint64_t v48 = v47;
      }
      sub_1000394A0((uint64_t)v108, v109, (uint64_t)&__dst, v48, 1);
      if (v109 == v108)
      {
LABEL_172:
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
        sub_100003B14((void ***)&__dst);
        sub_10000A3E0((uint64_t)&v110, v111[0]);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
        sub_100003B14((void ***)&__dst);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v114.__r_.__value_.__l.__data_);
        }
        if (v98) {
          goto LABEL_27;
        }
        goto LABEL_175;
      }
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      unint64_t v51 = ((char *)v109 - (char *)v108) / 24;
      if (v51 <= 1) {
        uint64_t v52 = 1;
      }
      else {
        uint64_t v52 = ((char *)v109 - (char *)v108) / 24;
      }
      while (1)
      {
        uint64_t v53 = (char *)v108 + v49;
        if (*((char *)v108 + v49 + 23) < 0)
        {
          sub_100003600(&v107, *(void **)v53, *((void *)v53 + 1));
        }
        else
        {
          long long v54 = *(_OWORD *)v53;
          v107.__r_.__value_.__r.__words[2] = *((void *)v53 + 2);
          *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v54;
        }
        sub_100003470(&__dst, "Templates/dialog/");
        uint64_t v55 = siri::dialogengine::StringRFind();
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        sub_100003470(&__dst, "Templates");
        std::string::size_type v56 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v56 = __dst.__r_.__value_.__l.__size_;
        }
        std::string::basic_string(&v106, &v107, 0, v56 + v55, (std::allocator<char> *)&v133);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::CatPathToId();
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
          sub_100003600(&v103, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
        }
        else {
          std::string v103 = v106;
        }
        if (SHIBYTE(v105) < 0)
        {
          sub_100003600(__p, v104[0], (unint64_t)v104[1]);
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)v104;
          uint64_t v102 = v105;
        }
        sub_100003470(&v128, "Processing CAT file ");
        std::to_string(&v127, v50);
        if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v57 = &v127;
        }
        else {
          uint64_t v57 = (std::string *)v127.__r_.__value_.__r.__words[0];
        }
        if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v58 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v58 = v127.__r_.__value_.__l.__size_;
        }
        std::string::size_type v59 = std::string::append(&v128, (const std::string::value_type *)v57, v58);
        long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
        v129.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v60;
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        long long v61 = std::string::append(&v129, " of ");
        long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v130.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v126, v51);
        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v63 = &v126;
        }
        else {
          uint64_t v63 = (std::string *)v126.__r_.__value_.__r.__words[0];
        }
        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v64 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v64 = v126.__r_.__value_.__l.__size_;
        }
        uint64_t v65 = std::string::append(&v130, (const std::string::value_type *)v63, v64);
        long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        v131.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        uint64_t v67 = std::string::append(&v131, ":  ");
        long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        v132.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v69 = &v103;
        }
        else {
          int v69 = (std::string *)v103.__r_.__value_.__r.__words[0];
        }
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v70 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v70 = v103.__r_.__value_.__l.__size_;
        }
        int v71 = std::string::append(&v132, (const std::string::value_type *)v69, v70);
        long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        v133.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        uint64_t v73 = std::string::append(&v133, "  ");
        long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        if (v102 >= 0) {
          std::string::size_type v75 = __p;
        }
        else {
          std::string::size_type v75 = (void **)__p[0];
        }
        if (v102 >= 0) {
          std::string::size_type v76 = HIBYTE(v102);
        }
        else {
          std::string::size_type v76 = (std::string::size_type)__p[1];
        }
        std::string::size_type v77 = std::string::append(&__dst, (const std::string::value_type *)v75, v76);
        int v79 = (void *)v77->__r_.__value_.__r.__words[0];
        char v78 = (void *)v77->__r_.__value_.__l.__size_;
        v134[0] = v77->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v134 + 3) = *(_DWORD *)((char *)&v77->__r_.__value_.__r.__words[2] + 3);
        int v80 = SHIBYTE(v77->__r_.__value_.__r.__words[2]);
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v133.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v132.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v126.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v130.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v129.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v127.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v128.__r_.__value_.__l.__data_);
          if ((v80 & 0x80000000) == 0)
          {
LABEL_153:
            v123[0] = v79;
            v123[1] = v78;
            *(_DWORD *)std::string::size_type v124 = v134[0];
            *(_DWORD *)&v124[3] = *(_DWORD *)((char *)v134 + 3);
            char v125 = v80;
            goto LABEL_156;
          }
        }
        else if ((v80 & 0x80000000) == 0)
        {
          goto LABEL_153;
        }
        sub_100003600(v123, v79, (unint64_t)v78);
LABEL_156:
        sub_100037228((uint64_t)v123);
        if (v125 < 0)
        {
          operator delete(v123[0]);
          if (v80 < 0) {
LABEL_171:
          }
            operator delete(v79);
        }
        else if (v80 < 0)
        {
          goto LABEL_171;
        }
        if (SHIBYTE(v102) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
        sub_100036D54((uint64_t)v116, (uint64_t *)&__dst);
        sub_10003A998((uint64_t *)&v115, (std::string *)v115.__r_.__value_.__l.__size_, (std::string *)__dst.__r_.__value_.__l.__data_, (long long *)__dst.__r_.__value_.__l.__size_, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 4));
        v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
        sub_100039198((void ***)&v133);
        if (SHIBYTE(v105) < 0) {
          operator delete(v104[0]);
        }
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v106.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        ++v50;
        v49 += 24;
        if (v52 == v50) {
          goto LABEL_172;
        }
      }
    }
    std::locale v35 = sub_1000042E0(&std::cerr, (uint64_t)"Template directory does not exist: ", 35);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v37 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v37 = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v34 = sub_1000042E0(v35, (uint64_t)p_str, v37);
  }
  else
  {
    uint64_t v34 = sub_1000042E0(&std::cerr, (uint64_t)"--templateDir argument required for catutil metrics", 51);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
  unsigned __int8 v38 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v4 = 0;
LABEL_213:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1000368B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  a72 = &a45;
  sub_100039198((void ***)&a72);
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  _Unwind_Resume(a1);
}

void sub_100036D54(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3)
  {
    sub_100037300();
    unint64_t v4 = v34;
    if ((v34 & 0x80u) != 0) {
      unint64_t v4 = (unint64_t)__p[1];
    }
    if (v4)
    {
      uint64_t v5 = v39;
      if ((v39 & 0x80u) != 0) {
        uint64_t v5 = v38;
      }
      if (v5)
      {
        unint64_t v6 = a2[1];
        if (v6 >= a2[2])
        {
          uint64_t v7 = sub_100038A24(a2, (long long *)__p);
        }
        else
        {
          sub_100038B44((char *)a2[1], (long long *)__p);
          uint64_t v7 = v6 + 176;
          a2[1] = v6 + 176;
        }
        a2[1] = v7;
      }
    }
    sub_10000A3E0((uint64_t)&v40, v41);
    if ((char)v39 < 0) {
      operator delete(v37);
    }
    if (v36 < 0) {
      operator delete(v35);
    }
    if ((char)v34 < 0)
    {
      std::string::size_type v20 = __p[0];
LABEL_64:
      operator delete(v20);
    }
  }
  else
  {
    siri::dialogengine::CatIdToPath();
    siri::dialogengine::JoinPath();
    if ((char)v34 < 0) {
      operator delete(__p[0]);
    }
    if (siri::dialogengine::DirExists())
    {
      siri::dialogengine::GetCatLocales();
      uint64_t v8 = v28;
      std::string v9 = v29;
      if (v28 == v29)
      {
        std::string v21 = sub_1000042E0(&std::cerr, (uint64_t)"Cannot find any locale files in CAT directory: ", 47);
        if ((v32 & 0x80u) == 0) {
          std::string v22 = &v30;
        }
        else {
          std::string v22 = v30;
        }
        if ((v32 & 0x80u) == 0) {
          uint64_t v23 = v32;
        }
        else {
          uint64_t v23 = v31;
        }
        std::string v24 = sub_1000042E0(v21, (uint64_t)v22, v23);
        std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
        long long v25 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
      }
      else
      {
        do
        {
          if (*((char *)v8 + 23) < 0)
          {
            sub_100003600(v26, *(void **)v8, *((void *)v8 + 1));
          }
          else
          {
            long long v10 = *v8;
            uint64_t v27 = *((void *)v8 + 2);
            *(_OWORD *)std::string v26 = v10;
          }
          sub_100037300();
          unint64_t v11 = v34;
          if ((v34 & 0x80u) != 0) {
            unint64_t v11 = (unint64_t)__p[1];
          }
          if (v11)
          {
            uint64_t v12 = v39;
            if ((v39 & 0x80u) != 0) {
              uint64_t v12 = v38;
            }
            if (v12)
            {
              unint64_t v13 = a2[1];
              if (v13 >= a2[2])
              {
                uint64_t v14 = sub_100038A24(a2, (long long *)__p);
              }
              else
              {
                sub_100038B44((char *)a2[1], (long long *)__p);
                uint64_t v14 = v13 + 176;
                a2[1] = v13 + 176;
              }
              a2[1] = v14;
            }
          }
          sub_10000A3E0((uint64_t)&v40, v41);
          if ((char)v39 < 0) {
            operator delete(v37);
          }
          if (v36 < 0) {
            operator delete(v35);
          }
          if ((char)v34 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v27) < 0) {
            operator delete(v26[0]);
          }
          uint64_t v8 = (long long *)((char *)v8 + 24);
        }
        while (v8 != v9);
      }
      __p[0] = &v28;
      sub_100003B14((void ***)__p);
    }
    else
    {
      int64_t v15 = sub_1000042E0(&std::cerr, (uint64_t)"CAT does not exist: ", 20);
      if ((v32 & 0x80u) == 0) {
        unint64_t v16 = &v30;
      }
      else {
        unint64_t v16 = v30;
      }
      if ((v32 & 0x80u) == 0) {
        uint64_t v17 = v32;
      }
      else {
        uint64_t v17 = v31;
      }
      uint64_t v18 = sub_1000042E0(v15, (uint64_t)v16, v17);
      std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
      uint64_t v19 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
    }
    if ((char)v32 < 0)
    {
      std::string::size_type v20 = v30;
      goto LABEL_64;
    }
  }
}

void sub_100037150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::locale a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

uint64_t sub_100037228(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  if (v1 >= 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = *(void *)a1;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  unint64_t v4 = sub_1000042E0(&std::cerr, v2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v7, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v7);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1000372EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_100037300()
{
  __chkstk_darwin();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1000354C8(v4);
  siri::dialogengine::GetTemplateDirs();
  if (*((char *)v3 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    size_t v6 = (size_t)v3[1];
  }
  sub_100008CC4((uint64_t)&__p, v6 + 2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)v3 + 23) >= 0) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = *v3;
    }
    memmove(p_p, v8, v6);
  }
  strcpy((char *)p_p + v6, " (");
  int v9 = *(char *)(v1 + 23);
  if (v9 >= 0) {
    long long v10 = (const std::string::value_type *)v1;
  }
  else {
    long long v10 = *(const std::string::value_type **)v1;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(v1 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(v1 + 8);
  }
  uint64_t v12 = std::string::append(&__p, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v113.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v113, ")");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v120 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v119 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v113.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::FindParamsFile();
  if (*(char *)(v1 + 23) < 0) {
    sub_100003600(&__p, *(void **)v1, *(void *)(v1 + 8));
  }
  else {
    std::string __p = *(std::string *)v1;
  }
  memset(&v113, 0, sizeof(v113));
  v89.__r_.__value_.__s.__data_[8] = 0;
  v113.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v113.__r_.__value_.__l.__size_ = v113.__r_.__value_.__r.__words[0];
  v113.__r_.__value_.__r.__words[2] = v113.__r_.__value_.__r.__words[0] + 24;
  v113.__r_.__value_.__l.__size_ = (std::string::size_type)sub_100008D8C((uint64_t)&v113.__r_.__value_.__r.__words[2], (long long *)&__p, v123, v113.__r_.__value_.__l.__data_);
  siri::dialogengine::FindLocaleFile();
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
  sub_100003B14((void ***)&v89);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type size = HIBYTE(v116.__r_.__value_.__r.__words[2]);
  if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v116.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    siri::dialogengine::CatLocalePathToLocale();
    uint64_t v17 = *(unsigned __int8 *)(v1 + 23);
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *(void *)(v1 + 8);
    }
    if (v17 && (siri::dialogengine::StringsEqual() & 1) == 0)
    {
      uint64_t v53 = sub_1000042E0(&std::cerr, (uint64_t)"Skipping fallback locale ", 25);
      if ((v115 & 0x80u) == 0) {
        long long v54 = v114;
      }
      else {
        long long v54 = (void **)v114[0];
      }
      if ((v115 & 0x80u) == 0) {
        uint64_t v55 = v115;
      }
      else {
        uint64_t v55 = (uint64_t)v114[1];
      }
      std::string::size_type v56 = sub_1000042E0(v53, (uint64_t)v54, v55);
      uint64_t v57 = sub_1000042E0(v56, (uint64_t)" found for requested locale ", 28);
      int v58 = *(char *)(v1 + 23);
      if (v58 >= 0) {
        uint64_t v59 = v1;
      }
      else {
        uint64_t v59 = *(void *)v1;
      }
      if (v58 >= 0) {
        uint64_t v60 = *(unsigned __int8 *)(v1 + 23);
      }
      else {
        uint64_t v60 = *(void *)(v1 + 8);
      }
      long long v61 = sub_1000042E0(v57, v59, v60);
      std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(void *)(*v61 - 24)));
      long long v62 = std::locale::use_facet((const std::locale *)&v113, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
      std::locale::~locale((std::locale *)&v113);
      std::ostream::put();
      std::ostream::flush();
    }
    else
    {
      siri::dialogengine::Context::Context((siri::dialogengine::Context *)&v113);
      siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__p);
      siri::dialogengine::RequestInfo::SetTemplateDirs();
      siri::dialogengine::RequestInfo::SetParamsPath();
      siri::dialogengine::RequestInfo::SetLocalePath();
      LODWORD(v89.__r_.__value_.__l.__data_) = 0;
      siri::dialogengine::RequestInfo::SetRequestType();
      siri::dialogengine::Context::SetRequestInfo();
      if (!siri::dialogengine::Context::Load((siri::dialogengine::Context *)&v113)) {
        goto LABEL_111;
      }
      siri::dialogengine::Context::GetFile((uint64_t *)&v89, (siri::dialogengine::Context *)&v113);
      std::string::size_type v18 = v89.__r_.__value_.__r.__words[0];
      if (v89.__r_.__value_.__l.__size_) {
        sub_100006AE0((std::__shared_weak_count *)v89.__r_.__value_.__l.__size_);
      }
      if (v18)
      {
        siri::dialogengine::Context::GetFile((uint64_t *)&v108, (siri::dialogengine::Context *)&v113);
        siri::dialogengine::File::GetParameters((uint64_t *)v111, v108);
        std::string::operator=((std::string *)v5, (const std::string *)v3);
        std::string::operator=((std::string *)(v5 + 24), (const std::string *)v1);
        std::string::operator=((std::string *)(v5 + 48), &v116);
        *(void *)(v5 + 72) = siri::dialogengine::File::GetMaxLineNumber(v108);
        siri::dialogengine::File::GetDialogs((uint64_t *)&v89, v108);
        *(void *)(v5 + 80) = (uint64_t)(v89.__r_.__value_.__l.__size_ - v89.__r_.__value_.__r.__words[0]) >> 4;
        uint64_t v105 = &v89;
        sub_100008EDC((void ***)&v105);
        siri::dialogengine::File::GetTexts((uint64_t *)&v89, v108);
        *(void *)(v5 + 88) = (uint64_t)(v89.__r_.__value_.__l.__size_ - v89.__r_.__value_.__r.__words[0]) >> 4;
        uint64_t v105 = &v89;
        sub_100008EDC((void ***)&v105);
        Phrases = (const void *)siri::dialogengine::File::GetPhrases(v108);
        if (Phrases)
        {
          if (v20)
          {
            siri::dialogengine::GroupPhrases::GetPhrases((uint64_t *)&v89, v20);
            *(void *)(v5 + 96) = (uint64_t)(v89.__r_.__value_.__l.__size_ - v89.__r_.__value_.__r.__words[0]) >> 4;
            uint64_t v105 = &v89;
            sub_100008EDC((void ***)&v105);
          }
        }
        siri::dialogengine::File::GetConditions((uint64_t *)&v89, v108);
        *(void *)(v5 + 104) = (uint64_t)(v89.__r_.__value_.__l.__size_ - v89.__r_.__value_.__r.__words[0]) >> 4;
        uint64_t v105 = &v89;
        sub_100008EDC((void ***)&v105);
        locale = v111[1].__locale_;
        std::string v22 = v111[0].__locale_;
        BOOL v23 = v111[1].__locale_ == v111[0].__locale_;
        *(void *)(v5 + 112) = 0xCF3CF3CF3CF3CF3DLL * ((v111[1].__locale_ - v111[0].__locale_) >> 4);
        unsigned int v24 = 0;
        if (!v23)
        {
          do
          {
            siri::dialogengine::ObjectProperty::GetSemanticConcept((uint64_t *)&v89, v22);
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
            {
              BOOL v25 = v89.__r_.__value_.__l.__size_ == 0;
              operator delete(v89.__r_.__value_.__l.__data_);
            }
            else
            {
              BOOL v25 = SHIBYTE(v89.__r_.__value_.__r.__words[2]) == 0;
            }
            v24 += !v25;
            std::string v22 = (std::locale::__imp *)((char *)v22 + 336);
          }
          while (v22 != locale);
        }
        *(void *)(v5 + 120) = v24;
        v107[0] = 0;
        v107[1] = 0;
        std::string v106 = v107;
        (*(void (**)(siri::dialogengine::File *, void **))(*(void *)v108 + 32))(v108, &v105);
        uint64_t DialogIds = siri::dialogengine::CollectDialogIdsVisitor::GetDialogIds((siri::dialogengine::CollectDialogIdsVisitor *)&v105);
        if (v5 + 152 != DialogIds) {
          sub_100038670((uint64_t **)(v5 + 152), *(void **)DialogIds, (void *)(DialogIds + 8));
        }
        uint64_t v82 = v5;
        siri::dialogengine::File::GetDialogs((uint64_t *)&v110, v108);
        std::string::size_type v81 = v110.__r_.__value_.__l.__size_;
        for (std::string::size_type i = v110.__r_.__value_.__r.__words[0]; i != v81; i += 16)
        {
          long long v28 = *(siri::dialogengine::Dialog **)i;
          uint64_t v29 = *(std::__shared_weak_count **)(i + 8);
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::Dialog::GetFull((uint64_t *)&v89, v28);
          siri::dialogengine::SpeakableString::GetPrintChunks((uint64_t *)&__str, (siri::dialogengine::SpeakableString *)&v89);
          siri::dialogengine::ChunkList::GetChunks((uint64_t *)&v104, (siri::dialogengine::ChunkList *)&__str);
          v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          sub_100008EDC((void ***)&v88);
          if (v101 < 0) {
            operator delete(v100);
          }
          if (v99 < 0) {
            operator delete(v98);
          }
          if (v97 < 0) {
            operator delete(v96);
          }
          if (v95 < 0) {
            operator delete(v94);
          }
          if (v93 < 0) {
            operator delete(v92);
          }
          if (v91 < 0) {
            operator delete(v90);
          }
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v89.__r_.__value_.__l.__data_);
          }
          std::string::size_type v30 = v104.__r_.__value_.__l.__size_;
          for (std::string::size_type j = v104.__r_.__value_.__r.__words[0]; j != v30; j += 16)
          {
            unsigned __int8 v32 = *(const void **)j;
            uint64_t v33 = *(std::__shared_weak_count **)(j + 8);
            if (v33) {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (!v32) {
              goto LABEL_93;
            }
            if (!v34) {
              goto LABEL_93;
            }
            std::locale v35 = v34;
            sub_100003470(&v89, "semanticConcept");
            siri::dialogengine::ChunkText::GetAttribute();
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v89.__r_.__value_.__l.__data_);
            }
            v89.__r_.__value_.__s.__data_[0] = 0;
            char v102 = 0;
            siri::dialogengine::ChunkVariable::GetName((uint64_t *)&v87, v35);
            siri::dialogengine::ResolveType();
            if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v87.__r_.__value_.__l.__data_);
            }
            if (v102) {
              siri::dialogengine::ObjectProperty::GetSemanticConcept((uint64_t *)&v87, (siri::dialogengine::ObjectProperty *)&v89);
            }
            else {
              sub_100003470(&v87, (char *)&unk_10006DFE2);
            }
            std::string::size_type v36 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v36 = __str.__r_.__value_.__l.__size_;
            }
            if (v36) {
              std::string::operator=(&v87, &__str);
            }
            std::string::size_type v37 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
            int v38 = SHIBYTE(v87.__r_.__value_.__r.__words[2]);
            if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v37 = v87.__r_.__value_.__l.__size_;
            }
            if (v37) {
              ++*(void *)(v82 + 128);
            }
            if (v38 < 0) {
              operator delete(v87.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v88.__r_.__value_.__l.__data_);
            }
            if (v102) {
              sub_100038904((uint64_t)&v89);
            }
            if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_93:
              if (!v33) {
                continue;
              }
LABEL_94:
              sub_100006AE0(v33);
              continue;
            }
            operator delete(__str.__r_.__value_.__l.__data_);
            if (v33) {
              goto LABEL_94;
            }
          }
          v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
          sub_100008EDC((void ***)&v89);
          if (v29) {
            sub_100006AE0(v29);
          }
        }
        if (sub_100034EAC())
        {
          *(_DWORD *)(v82 + 144) = 1203982208;
          *(void *)(v82 + 136) = 99999;
        }
        else
        {
          siri::dialogengine::ElapsedTimer::ElapsedTimer((siri::dialogengine::ElapsedTimer *)&v89);
          siri::dialogengine::File::ExpandAsDAG();
          siri::dialogengine::ElapsedTimer::GetSecs((siri::dialogengine::ElapsedTimer *)&v89);
          *(float *)&double v63 = v63;
          *(_DWORD *)(v82 + 144) = LODWORD(v63);
          *(void *)(v82 + 136) = 0;
          std::string::size_type v64 = (std::string::__raw *)v104.__r_.__value_.__r.__words[0];
          if ((std::string::size_type *)v104.__r_.__value_.__l.__data_ != &v104.__r_.__value_.__r.__words[1])
          {
            do
            {
              uint64_t v65 = (std::__shared_weak_count *)v64[2].__words[2];
              std::string::size_type v85 = v64[2].__words[1];
              std::string::size_type v86 = v65;
              if (v65) {
                atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              siri::dialogengine::GetJSONArrayVal();
              if (v86) {
                sub_100006AE0(v86);
              }
              *(void *)(v82 + 136) += (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 4;
              v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
              sub_100008EDC((void ***)&v88);
              long long v66 = (std::string *)v64->__words[1];
              if (v66)
              {
                do
                {
                  uint64_t v67 = v66;
                  long long v66 = (std::string *)v66->__r_.__value_.__r.__words[0];
                }
                while (v66);
              }
              else
              {
                do
                {
                  uint64_t v67 = (std::string *)v64->__words[2];
                  BOOL v23 = v67->__r_.__value_.__r.__words[0] == (void)v64;
                  std::string::size_type v64 = (std::string::__raw *)v67;
                }
                while (!v23);
              }
              std::string::size_type v64 = (std::string::__raw *)v67;
            }
            while (v67 != (std::string *)&v104.__r_.__value_.__r.__words[1]);
          }
          sub_100006A84((uint64_t)&v104, (void *)v104.__r_.__value_.__l.__size_);
        }
        sub_100003470(&v88, "  Expansion took ");
        std::to_string(&v87, *(float *)(v82 + 144));
        if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v68 = &v87;
        }
        else {
          long long v68 = (std::string *)v87.__r_.__value_.__r.__words[0];
        }
        if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v69 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v69 = v87.__r_.__value_.__l.__size_;
        }
        std::string::size_type v70 = std::string::append(&v88, (const std::string::value_type *)v68, v69);
        long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v71;
        v70->__r_.__value_.__l.__size_ = 0;
        v70->__r_.__value_.__r.__words[2] = 0;
        v70->__r_.__value_.__r.__words[0] = 0;
        long long v72 = std::string::append(&__str, " seconds for '");
        long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        v104.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v73;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        int v74 = *(char *)(v1 + 23);
        if (v74 >= 0) {
          std::string::size_type v75 = (const std::string::value_type *)v1;
        }
        else {
          std::string::size_type v75 = *(const std::string::value_type **)v1;
        }
        if (v74 >= 0) {
          std::string::size_type v76 = *(unsigned __int8 *)(v1 + 23);
        }
        else {
          std::string::size_type v76 = *(void *)(v1 + 8);
        }
        std::string::size_type v77 = std::string::append(&v104, v75, v76);
        long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        int v79 = std::string::append(&v89, "' locale");
        long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        std::string::size_type v84 = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string v83 = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        sub_100037228((uint64_t)v83);
        if (SHIBYTE(v84) < 0) {
          operator delete(v83[0]);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v104.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
        v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
        sub_100008EDC((void ***)&v89);
        sub_10000A3E0((uint64_t)&v106, v107[0]);
        v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
        sub_1000223A0((void ***)&v89);
        if (v109) {
          sub_100006AE0(v109);
        }
      }
      else
      {
LABEL_111:
        std::operator+<char>();
        siri::dialogengine::Context::GetError((uint64_t *)&v105, (siri::dialogengine::Context *)&v113);
        char v44 = (char **)HIBYTE(v107[0]);
        if (SHIBYTE(v107[0]) < 0) {
          char v44 = v106;
        }
        if (v44)
        {
          std::operator+<char>();
          uint64_t v45 = std::string::append(&v110, "]");
          long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          int64_t v112 = v45->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v111[0].__locale_ = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          if (v112 >= 0) {
            unint64_t v47 = (const std::string::value_type *)v111;
          }
          else {
            unint64_t v47 = (const std::string::value_type *)v111[0].__locale_;
          }
          if (v112 >= 0) {
            std::string::size_type v48 = HIBYTE(v112);
          }
          else {
            std::string::size_type v48 = (std::string::size_type)v111[1].__locale_;
          }
          std::string::append(&v89, v47, v48);
          if (SHIBYTE(v112) < 0) {
            operator delete(v111[0].__locale_);
          }
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
        }
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v49 = &v89;
        }
        else {
          uint64_t v49 = (std::string *)v89.__r_.__value_.__r.__words[0];
        }
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v50 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v50 = v89.__r_.__value_.__l.__size_;
        }
        unint64_t v51 = sub_1000042E0(&std::cerr, (uint64_t)v49, v50);
        std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(void *)(*v51 - 24)));
        uint64_t v52 = std::locale::use_facet(v111, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
        std::locale::~locale(v111);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(v107[0]) < 0) {
          operator delete(v105);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
      }
      sub_10002A454((uint64_t)&__p);
      siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&v113);
    }
    if ((char)v115 < 0)
    {
      char v43 = v114[0];
      goto LABEL_188;
    }
  }
  else
  {
    std::operator+<char>();
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v39 = &v113;
    }
    else {
      unsigned __int8 v39 = (std::string *)v113.__r_.__value_.__r.__words[0];
    }
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v40 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v40 = v113.__r_.__value_.__l.__size_;
    }
    uint64_t v41 = sub_1000042E0(&std::cerr, (uint64_t)v39, v40);
    std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
    long long v42 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    {
      char v43 = (void *)v113.__r_.__value_.__r.__words[0];
LABEL_188:
      operator delete(v43);
    }
  }
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v116.__r_.__value_.__l.__data_);
  }
  if (v118 < 0) {
    operator delete(v117);
  }
  if (SHIBYTE(v120) < 0) {
    operator delete(v119[0]);
  }
  v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
  sub_10000C39C((void ***)&v113);
}

void sub_1000381C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29)
{
  a29 = &STACK[0x220];
  sub_1000223A0((void ***)&a29);
  if (STACK[0x200]) {
    sub_100006AE0((std::__shared_weak_count *)STACK[0x200]);
  }
  sub_10002A454((uint64_t)&STACK[0x1070]);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0x240]);
  if (v29[23] < 0) {
    operator delete((void *)STACK[0xFF8]);
  }
  if (v29[47] < 0) {
    operator delete((void *)STACK[0x1010]);
  }
  if (v29[71] < 0) {
    operator delete((void *)STACK[0x1028]);
  }
  if (v29[95] < 0) {
    operator delete((void *)STACK[0x1040]);
  }
  a29 = &STACK[0x1058];
  sub_10000C39C((void ***)&a29);
  sub_100038610(v30);
  _Unwind_Resume(a1);
}

uint64_t sub_100038610(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t **sub_100038670(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    size_t v6 = *result;
    std::locale v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    long long v15 = result;
    unint64_t v16 = v8;
    uint64_t v17 = (const void **)v8;
    if (v8)
    {
      unint64_t v16 = sub_100033B98((uint64_t)v8);
      if (a2 != a3)
      {
        int v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          long long v10 = (uint64_t **)sub_100033B1C((uint64_t)v5, &v18, v17 + 4);
          sub_100006674(v5, v18, v10, (uint64_t *)v17);
          uint64_t v17 = (const void **)v16;
          if (v16) {
            unint64_t v16 = sub_100033B98((uint64_t)v16);
          }
          std::string::size_type v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              std::string::size_type v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              int v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          int v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)sub_100033BEC((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_1000387F4(v5, (uint64_t)(a2 + 4));
      long long v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1000387E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const void **sub_1000387F4(uint64_t **a1, uint64_t a2)
{
  sub_10000A340((uint64_t)a1, a2, (uint64_t)&v6);
  uint64_t v3 = (uint64_t **)sub_100033B1C((uint64_t)a1, &v5, v6 + 4);
  sub_100006674(a1, v5, v3, (uint64_t *)v6);
  return v6;
}

void sub_10003884C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_10000A1D0((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100038870(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100038904(uint64_t a1)
{
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  return sub_100038984(a1);
}

uint64_t sub_100038984(uint64_t a1)
{
  *(void *)a1 = off_10007D128;
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100038A24(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x1745D1745D1745DLL) {
    sub_100003974();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v9 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_100038DD8(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v13 = v10;
  uint64_t v14 = &v10[176 * v4];
  unint64_t v16 = &v10[176 * v9];
  sub_100038B44(v14, a2);
  long long v15 = v14 + 176;
  sub_100038D60(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100039088(&v13);
  return v11;
}

void sub_100038B30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100039088((void **)va);
  _Unwind_Resume(a1);
}

char *sub_100038B44(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100003600(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100003600(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_100003600(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  *(_OWORD *)(__dst + 72) = *(long long *)((char *)a2 + 72);
  long long v7 = *(long long *)((char *)a2 + 88);
  long long v8 = *(long long *)((char *)a2 + 104);
  long long v9 = *(long long *)((char *)a2 + 120);
  *(_OWORD *)(__dst + 132) = *(long long *)((char *)a2 + 132);
  *(_OWORD *)(__dst + 120) = v9;
  *(_OWORD *)(__dst + 104) = v8;
  *(_OWORD *)(__dst + 88) = v7;
  sub_100038C7C((uint64_t *)__dst + 19, (const void ***)a2 + 19);
  return __dst;
}

void sub_100038C30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100038C7C(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100038CD4(a1, *a2, a2 + 1);
  return a1;
}

void sub_100038CBC(_Unwind_Exception *a1)
{
  sub_10000A3E0(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100038CD4(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      uint64_t result = sub_100034070(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      long long v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          long long v8 = (const void ***)v7;
          long long v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = (const void **)v8;
        }
        while (!v9);
      }
      long long v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_100038D60(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100038E24((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100038DD8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL) {
    sub_1000035CC();
  }
  return operator new(176 * a2);
}

uint64_t sub_100038E24(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    BOOL v9 = a3;
    do
    {
      v9 -= 11;
      sub_100038EDC(a1, v7 - 176, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 176;
      *((void *)&v16 + 1) -= 176;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100038F88((uint64_t)v13);
  return v11;
}

void sub_100038EDC(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v4 = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 40) = *((void *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 3) = 0;
  long long v5 = a3[3];
  *(void *)(a2 + 64) = *((void *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  *((void *)a3 + 6) = 0;
  *(_OWORD *)(a2 + 72) = *(long long *)((char *)a3 + 72);
  long long v6 = *(long long *)((char *)a3 + 88);
  long long v7 = *(long long *)((char *)a3 + 104);
  long long v8 = *(long long *)((char *)a3 + 120);
  *(_OWORD *)(a2 + 132) = *(long long *)((char *)a3 + 132);
  *(_OWORD *)(a2 + 120) = v8;
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(void *)(a2 + 152) = *((void *)a3 + 19);
  BOOL v9 = a3 + 10;
  uint64_t v10 = *((void *)a3 + 20);
  *(void *)(a2 + 160) = v10;
  uint64_t v11 = a2 + 160;
  uint64_t v12 = *((void *)a3 + 21);
  *(void *)(a2 + 168) = v12;
  if (v12)
  {
    *(void *)(v10 + 16) = v11;
    *((void *)a3 + 19) = v9;
    *BOOL v9 = 0;
    *((void *)a3 + 21) = 0;
  }
  else
  {
    *(void *)(a2 + 152) = v11;
  }
}

uint64_t sub_100038F88(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100038FC0((uint64_t *)a1);
  }
  return a1;
}

void sub_100038FC0(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100039014(v3, v1);
      v1 += 176;
    }
    while (v1 != v2);
  }
}

void sub_100039014(uint64_t a1, uint64_t a2)
{
  sub_10000A3E0(a2 + 152, *(char **)(a2 + 160));
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void **sub_100039088(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1000390BC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 176;
    sub_100039014(v4, i - 176);
  }
}

_OWORD *sub_100039104(uint64_t **a1, const void **a2, uint64_t a3)
{
  long long v5 = (void **)sub_1000066CC((uint64_t)a1, &v9, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    long long v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_100006674(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_100039198(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 176;
        sub_100039014((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100039230(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 176;
        sub_100039014((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *sub_1000392A0(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    long long v5 = a2;
    do
    {
      long long v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          long long v7 = v6;
          long long v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          long long v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      long long v5 = v7;
    }
    while (v7 != a3);
  }
  sub_100039328(a1, a2, a3, v4);
  return a1;
}

void *sub_100039328(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_100003920(result, a4);
    uint64_t result = sub_1000393B0((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100039390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100003B14(&a9);
  _Unwind_Resume(a1);
}

void *sub_1000393B0(uint64_t a1, void *a2, void *a3, void *__dst)
{
  unint64_t v4 = __dst;
  char v14 = __dst;
  long long v15 = (char *)__dst;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        sub_100003600(v4, (void *)v6[4], v6[5]);
      }
      else
      {
        long long v7 = *((_OWORD *)v6 + 2);
        v4[2] = v6[6];
        *(_OWORD *)unint64_t v4 = v7;
      }
      BOOL v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          BOOL v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          long long v6 = v9;
        }
        while (!v10);
      }
      unint64_t v4 = v15 + 24;
      v15 += 24;
      long long v6 = v9;
    }
    while (v9 != a3);
  }
  char v13 = 1;
  sub_100003A94((uint64_t)v12);
  return v4;
}

void sub_10003948C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000394A0(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = (long long *)((char *)a2 - 24);
  uint64_t v12 = (const void **)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (sub_10000676C(a3, (const void **)a2 - 3, v12))
          {
            uint64_t v31 = v12[2];
            long long v29 = *(_OWORD *)v12;
            long long v27 = *v11;
            void v12[2] = (const void *)*((void *)a2 - 1);
            *(_OWORD *)uint64_t v12 = v27;
            *uint64_t v11 = v29;
            *((void *)a2 - 1) = v31;
          }
          break;
        case 3uLL:
          sub_100039AFC(v12, v12 + 3, (const void **)a2 - 3, a3);
          break;
        case 4uLL:
          sub_10003A1C0((uint64_t)v12, v12 + 3, v12 + 6, (long long *)((char *)a2 - 24), a3);
          break;
        case 5uLL:
          sub_10003A2AC((uint64_t)v12, v12 + 3, v12 + 6, (long long *)(v12 + 9), (long long *)((char *)a2 - 24), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (const void **)a2)
      {
        sub_10003A3D0((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[3 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0xC01)
    {
      sub_100039AFC(v12, &v12[3 * (v16 >> 1)], (const void **)a2 - 3, a3);
      uint64_t v19 = 3 * v17;
      std::string::size_type v20 = &v12[3 * v17 - 3];
      sub_100039AFC(v12 + 3, v20, (const void **)a2 - 6, a3);
      std::string v21 = v12 + 6;
      std::string v22 = &v12[v19 + 3];
      sub_100039AFC(v21, v22, (const void **)a2 - 9, a3);
      sub_100039AFC(v20, v18, v22, a3);
      uint64_t v30 = *(const void **)(a1 + 16);
      long long v28 = *(_OWORD *)a1;
      long long v23 = *(_OWORD *)v18;
      *(void *)(a1 + 16) = v18[2];
      *(_OWORD *)a1 = v23;
      v18[2] = v30;
      *(_OWORD *)uint64_t v18 = v28;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_100039AFC(&v12[3 * (v16 >> 1)], v12, (const void **)a2 - 3, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (!sub_10000676C(a3, (const void **)(a1 - 24), (const void **)a1))
    {
      uint64_t v12 = sub_100039C48((const void **)a1, (unint64_t)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v24 = sub_100039DDC((long long *)a1, (const void **)a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v26 = sub_100039F6C(a1, v24, a3);
    uint64_t v12 = (const void **)(v24 + 24);
    if (sub_100039F6C(v24 + 24, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (long long *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v26)
    {
LABEL_16:
      sub_1000394A0(a1, v24, a3, -v14, a5 & 1);
      uint64_t v12 = (const void **)(v24 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1000398C8((uint64_t)v12, (const void **)a2, a3);
  }
  else
  {
    sub_1000399F0(v12, (const void **)a2, a3);
  }
}

void sub_1000398C8(uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    long long v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      uint64_t v9 = 0;
      BOOL v10 = (const void **)a1;
      do
      {
        uint64_t v11 = v10;
        BOOL v10 = v7;
        if (sub_10000676C(a3, v7, v11))
        {
          long long v17 = *(_OWORD *)v10;
          uint64_t v18 = v10[2];
          v10[1] = 0;
          void v10[2] = 0;
          char *v10 = 0;
          uint64_t v12 = v9;
          do
          {
            uint64_t v13 = a1 + v12;
            uint64_t v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0) {
              operator delete(*v14);
            }
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
            *(void *)(a1 + v12 + 40) = *(void *)(v13 + 16);
            *(unsigned char *)(v13 + 23) = 0;
            *(unsigned char *)uint64_t v13 = 0;
            if (!v12)
            {
              uint64_t v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (sub_10000676C(a3, (const void **)&v17, (const void **)(v12 + a1)));
          int v15 = *(char *)(a1 + v12 + 47);
          uint64_t v16 = a1 + v12 + 24;
          if (v15 < 0) {
            operator delete(*(void **)v16);
          }
LABEL_13:
          *(_OWORD *)uint64_t v16 = v17;
          *(void *)(v16 + 16) = v18;
        }
        long long v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void sub_1000399F0(const void **a1, const void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    char v6 = a1;
    long long v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v9 = a1 - 3;
      do
      {
        BOOL v10 = v6;
        char v6 = v7;
        if (sub_10000676C(a3, v7, v10))
        {
          long long v16 = *(_OWORD *)v6;
          long long v17 = v6[2];
          v6[1] = 0;
          v6[2] = 0;
          void *v6 = 0;
          uint64_t v11 = v9;
          do
          {
            uint64_t v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0) {
              operator delete(*v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((unsigned char *)v11 + 47) = 0;
            *((unsigned char *)v11 + 24) = 0;
            BOOL v13 = sub_10000676C(a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          int v14 = *((char *)v11 + 71);
          int v15 = v11 + 6;
          if (v14 < 0) {
            operator delete((void *)*v15);
          }
          *(_OWORD *)int v15 = v16;
          void v15[2] = v17;
        }
        long long v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t sub_100039AFC(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8 = sub_10000676C(a4, a2, a1);
  uint64_t result = sub_10000676C(a4, a3, a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    BOOL v13 = a2[2];
    long long v14 = *(_OWORD *)a2;
    int v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_10000676C(a4, a2, a1)) {
      return 1;
    }
    long long v16 = a1[2];
    long long v17 = *(_OWORD *)a1;
    uint64_t v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!result)
  {
    uint64_t v19 = a1[2];
    long long v20 = *(_OWORD *)a1;
    std::string v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_10000676C(a4, a3, a2)) {
      return 1;
    }
    std::string v22 = a2[2];
    long long v23 = *(_OWORD *)a2;
    unint64_t v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  BOOL v10 = a1[2];
  long long v11 = *(_OWORD *)a1;
  uint64_t v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **sub_100039C48(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  long long v16 = *(_OWORD *)a1;
  long long v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (sub_10000676C(a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    char v6 = a1;
    do
      v6 += 3;
    while (!sub_10000676C(a3, (const void **)&v16, v6));
  }
  else
  {
    long long v7 = a1 + 3;
    do
    {
      char v6 = v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      BOOL v8 = sub_10000676C(a3, (const void **)&v16, v7);
      long long v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (sub_10000676C(a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    long long v9 = *(_OWORD *)v6;
    uint64_t v19 = v6[2];
    long long v18 = v9;
    long long v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)char v6 = v10;
    long long v11 = v18;
    *(void *)(v4 + 16) = v19;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 3;
    while (!sub_10000676C(a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (sub_10000676C(a3, (const void **)&v16, (const void **)v4));
  }
  uint64_t v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0) {
      operator delete(*v12);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete((void *)*a1);
    }
    long long v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((unsigned char *)v6 - 1) = 0;
    *((unsigned char *)v6 - 24) = 0;
  }
  long long v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)uint64_t v12 = v14;
  return v6;
}

unint64_t sub_100039DDC(long long *a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  do
    v6 += 24;
  while (sub_10000676C(a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  unint64_t v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 3;
    }
    while (!sub_10000676C(a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!sub_10000676C(a3, a2, (const void **)&v17));
  }
  unint64_t v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    long long v9 = a2;
    do
    {
      long long v19 = *(_OWORD *)v8;
      long long v10 = v19;
      long long v20 = *(const void **)(v8 + 16);
      long long v11 = v20;
      uint64_t v12 = v9[2];
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = v12;
      void v9[2] = v11;
      *(_OWORD *)long long v9 = v10;
      do
        v8 += 24;
      while (sub_10000676C(a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_10000676C(a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  long long v13 = (void **)(v8 - 24);
  if ((long long *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0) {
      operator delete(*v13);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v14 = *(_OWORD *)v13;
    *((void *)a1 + 2) = *(void *)(v8 - 8);
    *a1 = v14;
    *(unsigned char *)(v8 - 1) = 0;
    *(unsigned char *)(v8 - 24) = 0;
  }
  long long v15 = v17;
  *(void *)(v8 - 8) = v18;
  *(_OWORD *)long long v13 = v15;
  return v8 - 24;
}

BOOL sub_100039F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 24;
      if (sub_10000676C(a3, (const void **)(a2 - 24), (const void **)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v11;
        *(_OWORD *)uint64_t v8 = v10;
        *(void *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      sub_100039AFC((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_10003A1C0(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_10003A2AC(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a1 + 72), (long long *)(a2 - 24), a3);
      return 1;
    default:
      uint64_t v12 = (const void **)(a1 + 48);
      sub_100039AFC((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (sub_10000676C(a3, (const void **)v13, v12))
    {
      long long v22 = *(_OWORD *)v13;
      uint64_t v23 = *(void *)(v13 + 16);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0) {
          operator delete(*v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 48);
        *(void *)(a1 + v16 + 88) = *(void *)(v17 + 64);
        *(unsigned char *)(v17 + 71) = 0;
        *(unsigned char *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          uint64_t v21 = a1;
          goto LABEL_15;
        }
        BOOL v19 = sub_10000676C(a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      int v20 = *(char *)(a1 + v16 + 95);
      uint64_t v21 = a1 + v16 + 72;
      if (v20 < 0) {
        operator delete(*(void **)v21);
      }
LABEL_15:
      *(_OWORD *)uint64_t v21 = v22;
      *(void *)(v21 + 16) = v23;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 sub_10003A1C0(uint64_t a1, const void **a2, const void **a3, long long *a4, uint64_t a5)
{
  sub_100039AFC((const void **)a1, a2, a3, a5);
  if (sub_10000676C(a5, (const void **)a4, a3))
  {
    uint64_t v11 = a3[2];
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = (const void *)*((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((void *)a4 + 2) = v11;
    if (sub_10000676C(a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_10000676C(a5, a2, (const void **)a1))
      {
        uint64_t v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 sub_10003A2AC(uint64_t a1, const void **a2, const void **a3, long long *a4, long long *a5, uint64_t a6)
{
  sub_10003A1C0(a1, a2, a3, a4, a6);
  if (sub_10000676C(a6, (const void **)a5, (const void **)a4))
  {
    uint64_t v13 = *((void *)a4 + 2);
    long long v14 = *a4;
    uint64_t v15 = *((void *)a5 + 2);
    *a4 = *a5;
    *((void *)a4 + 2) = v15;
    *a5 = v14;
    *((void *)a5 + 2) = v13;
    if (sub_10000676C(a6, (const void **)a4, a3))
    {
      uint64_t v16 = a3[2];
      long long v17 = *(_OWORD *)a3;
      uint64_t v18 = (const void *)*((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((void *)a4 + 2) = v16;
      if (sub_10000676C(a6, a3, a2))
      {
        BOOL v19 = a2[2];
        long long v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_10000676C(a6, a2, (const void **)a1))
        {
          long long v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

long long *sub_10003A3D0(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_10003A61C(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if (sub_10000676C(a4, (const void **)v14, (const void **)a1))
        {
          uint64_t v15 = *((void *)v14 + 2);
          long long v16 = *v14;
          uint64_t v17 = *(void *)(a1 + 16);
          *long long v14 = *(_OWORD *)a1;
          *((void *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          sub_10003A61C(a1, a4, v9, (__n128 *)a1);
        }
        long long v14 = (long long *)((char *)v14 + 24);
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      BOOL v19 = (long long *)((char *)a2 - 24);
      do
      {
        uint64_t v20 = *(void *)a1;
        *(void *)long long v28 = *(void *)(a1 + 8);
        *(void *)&v28[7] = *(void *)(a1 + 15);
        char v21 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v22 = sub_10003A7B8(a1, a4, v18);
        uint64_t v23 = v22;
        int v24 = *(char *)(v22 + 23);
        if (v19 == (long long *)v22)
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v23 = v20;
          *(void *)(v23 + 8) = *(void *)v28;
          *(void *)(v23 + 15) = *(void *)&v28[7];
          *(unsigned char *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          long long v25 = *v19;
          *(void *)(v23 + 16) = *((void *)v19 + 2);
          *(_OWORD *)uint64_t v23 = v25;
          *(void *)BOOL v19 = v20;
          *((void *)v19 + 1) = *(void *)v28;
          *(void *)((char *)v19 + 15) = *(void *)&v28[7];
          *((unsigned char *)v19 + 23) = v21;
          sub_10003A894(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        BOOL v19 = (long long *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_10003A604(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10003A61C(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_10000676C(a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        uint64_t v12 = v14;
      }
      if (!sub_10000676C(a2, (const void **)v13, (const void **)v7))
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          long long v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          *unint64_t v7 = v17;
          *(unsigned char *)(v13 + 23) = 0;
          *(unsigned char *)uint64_t v13 = 0;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v18;
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_10000676C(a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            uint64_t v18 = v19;
          }
          unint64_t v7 = v16;
          uint64_t v12 = v18;
          if (sub_10000676C(a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0) {
              operator delete((void *)v16->n128_u64[0]);
            }
            break;
          }
        }
        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        __n128 *v16 = result;
      }
    }
  }
  return result;
}

uint64_t sub_10003A7B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_10000676C(a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      uint64_t v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v12 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(unsigned char *)(v9 + 23) = 0;
    *(unsigned char *)uint64_t v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double sub_10003A894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (long long *)(a1 + 24 * v8);
    uint64_t v10 = (long long *)(a2 - 24);
    if (sub_10000676C(a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      long long v14 = *v10;
      uint64_t v15 = *((void *)v10 + 2);
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = 0;
      while (1)
      {
        long long v12 = v9;
        if (*((char *)v10 + 23) < 0) {
          operator delete(*(void **)v10);
        }
        long long v13 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        long long *v10 = v13;
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 24 * v8);
        uint64_t v10 = v12;
        if (!sub_10000676C(a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0) {
            operator delete(*(void **)v12);
          }
          break;
        }
      }
      double result = *(double *)&v14;
      *long long v12 = v14;
      *((void *)v12 + 2) = v15;
    }
  }
  return result;
}

std::string *sub_10003A998(uint64_t *a1, std::string *a2, std::string *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v12) >> 4) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - (void)a2) >> 4) >= a5)
      {
        unint64_t v21 = (long long *)((char *)a3 + 176 * a5);
      }
      else
      {
        unint64_t v21 = (long long *)((char *)a3 + 16 * ((uint64_t)(v12 - (void)a2) >> 4));
        a1[1] = (uint64_t)sub_10003ACFC(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_10003ABA4((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)v5 + 176 * a5);
      sub_10003AFD0((int)v26, v7, (std::string *)v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x1745D1745D1745DLL) {
        sub_100003974();
      }
      uint64_t v15 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)a2 - v13) >> 4);
      unint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0xBA2E8BA2E8BA2ELL) {
        unint64_t v18 = 0x1745D1745D1745DLL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        uint64_t v19 = (char *)sub_100038DD8(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v22 = &v19[176 * v15];
      v26[0] = v19;
      v26[1] = v22;
      long long v27 = v22;
      long long v28 = &v19[176 * v18];
      uint64_t v23 = 176 * a5;
      int v24 = &v22[176 * a5];
      do
      {
        sub_100038B44(v22, (long long *)v7);
        v22 += 176;
        uint64_t v7 = (std::string *)((char *)v7 + 176);
        v23 -= 176;
      }
      while (v23);
      long long v27 = v24;
      uint64_t v5 = (std::string *)sub_10003AC48((uint64_t)a1, v26, (long long *)v5);
      sub_100039088(v26);
    }
  }
  return v5;
}

void sub_10003AB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003ABA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    uint64_t v10 = (long long *)(a2 + v6 - a4);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      sub_100038EDC(a1 + 16, v8, v10);
      v10 += 11;
      v8 += 176;
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_10003AE2C((uint64_t)&v12, a2, v7, v6);
}

uint64_t sub_10003AC48(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_100038E24(a1 + 16, (uint64_t)a3, a3, *(void *)a1, *(long long **)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10003B094(v7, a3, *(long long **)(a1 + 8), a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

char *sub_10003ACFC(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v10 = __dst;
  uint64_t v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_100038B44(v4, v6);
      v6 += 11;
      uint64_t v4 = v11 + 176;
      v11 += 176;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_10003ADA0((uint64_t)v8);
  return v4;
}

void sub_10003AD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10003ADA0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10003ADD8((uint64_t *)a1);
  }
  return a1;
}

void sub_10003ADD8(uint64_t *a1)
{
  int v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 176;
      sub_100039014(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_10003AE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      char v9 = (void **)(a4 + v7 - 176);
      if (*(char *)(a4 + v7 - 153) < 0) {
        operator delete(*v9);
      }
      uint64_t v10 = a3 + v7;
      uint64_t v11 = (long long *)(a3 + v7 - 176);
      long long v12 = *v11;
      *(void *)(a4 + v7 - 160) = *(void *)(a3 + v7 - 160);
      *(_OWORD *)char v9 = v12;
      *(unsigned char *)(a3 + v7 - 153) = 0;
      *(unsigned char *)uint64_t v11 = 0;
      uint64_t v13 = v8 - 152;
      if (*(char *)(v8 - 129) < 0) {
        operator delete(*(void **)v13);
      }
      uint64_t v14 = a3 + v7;
      long long v15 = *(_OWORD *)(v10 - 152);
      *(void *)(v13 + 16) = *(void *)(v10 - 136);
      *(_OWORD *)uint64_t v13 = v15;
      *(unsigned char *)(a3 + v7 - 129) = 0;
      *(unsigned char *)(v10 - 152) = 0;
      uint64_t v16 = a4 + v7;
      uint64_t v17 = (void **)(a4 + v7 - 128);
      if (*(char *)(a4 + v7 - 105) < 0) {
        operator delete(*v17);
      }
      long long v18 = *(_OWORD *)(v14 - 128);
      *(void *)(a4 + v7 - 112) = *(void *)(v14 - 112);
      *(_OWORD *)uint64_t v17 = v18;
      *(unsigned char *)(v14 - 105) = 0;
      *(unsigned char *)(v14 - 128) = 0;
      *(_OWORD *)(v16 - 104) = *(_OWORD *)(v14 - 104);
      long long v19 = *(_OWORD *)(v14 - 88);
      long long v20 = *(_OWORD *)(v14 - 72);
      long long v21 = *(_OWORD *)(v14 - 56);
      *(_OWORD *)(v16 - 44) = *(_OWORD *)(v14 - 44);
      *(_OWORD *)(v16 - 56) = v21;
      *(_OWORD *)(v16 - 72) = v20;
      *(_OWORD *)(v16 - 88) = v19;
      sub_10003AF64(v16 - 24, (void *)(v14 - 24));
      v7 -= 176;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

void sub_10003AF64(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  sub_10000A3E0(a1, *(char **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *uint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

std::string *sub_10003AFD0(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  uint64_t v7 = &__str[6].__r_.__value_.__r.__words[2];
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    std::string::operator=(this + 2, v5 + 2);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[3].__r_.__value_.__l.__data_;
    long long v8 = *(_OWORD *)&v5[4].__r_.__value_.__r.__words[1];
    long long v9 = *(_OWORD *)&v5[5].__r_.__value_.__l.__data_;
    long long v10 = *(_OWORD *)((char *)&v5[5].__r_.__value_.__r.__words[1] + 4);
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = *(_OWORD *)&v5[3].__r_.__value_.__r.__words[2];
    *(_OWORD *)((char *)&this[5].__r_.__value_.__r.__words[1] + 4) = v10;
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v8;
    if (this != v5) {
      sub_100038670((uint64_t **)&this[6].__r_.__value_.__l.__size_, (void *)v5[6].__r_.__value_.__l.__size_, v7);
    }
    this = (std::string *)((char *)this + 176);
    v7 += 22;
    uint64_t v5 = (std::string *)((char *)v5 + 176);
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_10003B094(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_100038EDC(a1, v4, v6);
      v6 += 11;
      uint64_t v4 = v12 + 176;
      v12 += 176;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_10003ADA0((uint64_t)v9);
  return v4;
}

uint64_t sub_10003B128(uint64_t a1, long long **a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_100003898((char *)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(void *)(a1 + 24) = a3;
  return a1;
}

uint64_t sub_10003B17C(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 24);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_10003B18C()
{
  sub_100003470(&v4, "-h");
  if (siri::dialogengine::OptionExists())
  {
    uint64_t v0 = 1;
  }
  else
  {
    sub_100003470(&__p, "--help");
    uint64_t v0 = siri::dialogengine::OptionExists();
    if (v3 < 0) {
      operator delete(__p);
    }
  }
  if (v5 < 0) {
    operator delete(v4);
  }
  return v0;
}

void sub_10003B220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003B258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(__p[0]) = 10;
  char v5 = sub_1000042E0(&std::cout, (uint64_t)__p, 1);
  uint64_t v6 = sub_1000042E0(v5, (uint64_t)"  ", 2);
  siri::dialogengine::GetExecutableName();
  if ((v24 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if ((v24 & 0x80u) == 0) {
    uint64_t v8 = v24;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  long long v9 = sub_1000042E0(v6, (uint64_t)v7, v8);
  LOBYTE(v25.__locale_) = 32;
  char v10 = sub_1000042E0(v9, (uint64_t)&v25, 1);
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = *(void *)a2;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a2 + 8);
  }
  uint64_t v14 = sub_1000042E0(v10, v12, v13);
  LOBYTE(v25.__locale_) = 10;
  long long v15 = sub_1000042E0(v14, (uint64_t)&v25, 1);
  uint64_t v16 = sub_1000042E0(v15, (uint64_t)"  ", 2);
  uint64_t v17 = sub_1000042E0(v16, (uint64_t)"    ", 4);
  int v18 = *(char *)(a3 + 23);
  if (v18 >= 0) {
    uint64_t v19 = a3;
  }
  else {
    uint64_t v19 = *(void *)a3;
  }
  if (v18 >= 0) {
    uint64_t v20 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v20 = *(void *)(a3 + 8);
  }
  long long v21 = sub_1000042E0(v17, v19, v20);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
  uint64_t v22 = std::locale::use_facet(&v25, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v24 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10003B404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10003B430()
{
  sub_100003470(v6, "<EXECUTABLE>");
  siri::dialogengine::GetExecutableName();
  siri::dialogengine::StringReplace();
  if (v5 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[0].__locale_);
  }
  sub_100003470(&__p, "<COMMAND>");
  siri::dialogengine::StringReplace();
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[0]);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)&v6[0].__locale_;
  uint64_t v9 = v7;
  HIBYTE(v7) = 0;
  LOBYTE(v6[0].__locale_) = 0;
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v9 >= 0) {
    uint64_t v0 = v8;
  }
  else {
    uint64_t v0 = (void **)v8[0];
  }
  if (v9 >= 0) {
    uint64_t v1 = HIBYTE(v9);
  }
  else {
    uint64_t v1 = (uint64_t)v8[1];
  }
  int v2 = sub_1000042E0(&std::cout, (uint64_t)v0, v1);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  char v3 = std::locale::use_facet(v6, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(v6);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[0]);
  }
}

void sub_10003B5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003B644(uint64_t a1)
{
  sub_100003470(v4, "manifest");
  sub_100003470(__p, "Generate the Asset Delivery manifest.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10003B6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003B6F0(long long **a1, uint64_t a2)
{
  unsigned __int8 v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  sub_100003898((char *)&v24, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3) < 3 || sub_10003B18C())
  {
    sub_10003B17C(a2);
    sub_100003470(v29, "\n  <EXECUTABLE> <COMMAND> [--distribution <name>] [--updater] [--version <version> [--minDiffVersion <version>] <template-dir>\n\n      Generate the Asset Delivery manifest file in the template directory, based on all of the files\n      under that directory.\n\n      Specify the distribution name with --distribution. This is required.\n\n      Specify the legacy CAT Updater with --updater.\n\n      Specify the version of the dialog in the template directory with --version <version>\n\n      Specify the minimum version this differential update can be used with by using --minDiffVersion <version>\n\n  <EXECUTABLE> <COMMAND> --list <template-dir>\n\n      Read an existing manifest file within the specified template directory and list its contents.\n"
      "\n"
      "  <EXECUTABLE> <COMMAND> --resolve <template-dir>\n"
      "\n"
      "      Read an existing manifest file within the specified template directory and see if an updated\n"
      "      template directory is available. If so, print the updated directory. If not, print the original\n"
      "      template directory.\n");
    sub_100003470(v27, "manifest");
    sub_10003B430();
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if ((char)v30 < 0) {
      operator delete(v29[0]);
    }
    goto LABEL_8;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v25 - (uint64_t)v24) >> 3) < 3)
  {
LABEL_8:
    uint64_t v4 = 0;
    goto LABEL_9;
  }
  sub_100003470(v29, "--list");
  int v6 = siri::dialogengine::PopOption();
  if ((char)v30 < 0) {
    operator delete(v29[0]);
  }
  sub_100003470(v29, "--resolve");
  int v7 = siri::dialogengine::PopOption();
  if ((char)v30 < 0) {
    operator delete(v29[0]);
  }
  sub_100003470(v27, "--distribution");
  siri::dialogengine::PopStringOption();
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  sub_100003470(__p, "--version");
  siri::dialogengine::PopStringOption();
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  sub_100003470(&v21, "--minDiffVersion");
  siri::dialogengine::PopStringOption();
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  sub_100003470(&v21, "--updater");
  int v8 = siri::dialogengine::PopOption();
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  sub_100003470(v19, "--templateDir");
  siri::dialogengine::PopStringOption();
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
  }
  if (!size) {
    std::string::operator=(&v21, v24 + 2);
  }
  if (!v6)
  {
    if (v7)
    {
      siri::dialogengine::GetUpdatedTemplateDir();
      if (v20 >= 0) {
        int v11 = v19;
      }
      else {
        int v11 = (void **)v19[0];
      }
      printf("Resolved template directory: \"%s\"\n", (const char *)v11);
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      goto LABEL_54;
    }
    unint64_t v12 = v30;
    if ((v30 & 0x80u) != 0) {
      unint64_t v12 = (unint64_t)v29[1];
    }
    if (v12)
    {
      if (v8)
      {
        if ((v30 & 0x80u) == 0) {
          uint64_t v13 = v29;
        }
        else {
          uint64_t v13 = (void ***)v29[0];
        }
        uint64_t v14 = +[NSString stringWithUTF8String:v13];
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v15 = &v21;
        }
        else {
          long long v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
        }
        uint64_t v16 = +[NSString stringWithUTF8String:v15];
        uint64_t v17 = +[NSURL fileURLWithPath:v16 isDirectory:1];

        int v18 = +[DEFilter catUpdates];
        uint64_t v4 = (uint64_t)+[DEUpdater putManifest:v14 src:v17 contents:v18 summary:0 overrides:0];

        goto LABEL_57;
      }
      if (siri::dialogengine::WriteAssetDeliveryConfig()) {
        goto LABEL_54;
      }
    }
    else
    {
      puts("--distribution is required");
    }
LABEL_56:
    uint64_t v4 = 0;
    goto LABEL_57;
  }
  if (!siri::dialogengine::ReadAssetDeliveryConfig()) {
    goto LABEL_56;
  }
  if ((v23 & 0x80u) == 0) {
    unint64_t v10 = v23;
  }
  else {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10) {
    printf("Distribution: \"%s\"\nVersion: \"%s\"\nMinimum Differential Update Version: \"%s\"\n");
  }
  else {
    printf("Distribution: \"%s\"\nVersion: \"%s\"\n");
  }
LABEL_54:
  uint64_t v4 = 1;
LABEL_57:
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if ((char)v30 < 0) {
    operator delete(v29[0]);
  }
LABEL_9:
  v29[0] = (void **)&v24;
  sub_100003B14(v29);
  return v4;
}

void sub_10003BB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (*(char *)(v34 - 57) < 0) {
    operator delete(*(void **)(v34 - 80));
  }
  if (*(char *)(v34 - 33) < 0) {
    operator delete(*(void **)(v34 - 56));
  }
  *(void *)(v34 - 80) = &a31;
  sub_100003B14((void ***)(v34 - 80));
  _Unwind_Resume(a1);
}

void sub_10003BCC4(uint64_t a1)
{
  sub_100003470(v4, "exclude");
  sub_100003470(__p, "Exclude CATs from an output/build folder.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10003BD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003BD70(uint64_t a1, int a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080760, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080760))
  {
    sub_100003470(&qword_100080748, "================================================================================");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100080748, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080760);
  }
  if (a2)
  {
    if (byte_10008075F >= 0) {
      uint64_t v4 = &qword_100080748;
    }
    else {
      uint64_t v4 = (uint64_t *)qword_100080748;
    }
    if (byte_10008075F >= 0) {
      uint64_t v5 = byte_10008075F;
    }
    else {
      uint64_t v5 = unk_100080750;
    }
    int v6 = sub_1000042E0(&std::cout, (uint64_t)v4, v5);
    char v24 = 10;
    int v7 = sub_1000042E0(v6, (uint64_t)&v24, 1);
    int v8 = sub_1000042E0(v7, (uint64_t)"BEGIN: ", 7);
    int v9 = *(char *)(a1 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = *(void *)a1;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a1 + 8);
    }
    unint64_t v12 = sub_1000042E0(v8, v10, v11);
    char v25 = 10;
    uint64_t v13 = (uint64_t *)&v25;
    uint64_t v14 = 1;
  }
  else
  {
    char v26 = 10;
    long long v15 = sub_1000042E0(&std::cout, (uint64_t)&v26, 1);
    uint64_t v16 = sub_1000042E0(v15, (uint64_t)"END: ", 5);
    int v17 = *(char *)(a1 + 23);
    if (v17 >= 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = *(void *)a1;
    }
    if (v17 >= 0) {
      uint64_t v19 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v19 = *(void *)(a1 + 8);
    }
    char v20 = sub_1000042E0(v16, v18, v19);
    char v27 = 10;
    unint64_t v12 = sub_1000042E0(v20, (uint64_t)&v27, 1);
    if (byte_10008075F >= 0) {
      uint64_t v13 = &qword_100080748;
    }
    else {
      uint64_t v13 = (uint64_t *)qword_100080748;
    }
    if (byte_10008075F >= 0) {
      uint64_t v14 = byte_10008075F;
    }
    else {
      uint64_t v14 = unk_100080750;
    }
  }
  std::string v21 = sub_1000042E0(v12, (uint64_t)v13, v14);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
  uint64_t v22 = std::locale::use_facet(&v28, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale(&v28);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_10003BF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_10003BFA4(uint64_t *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) < 3 || sub_10003B18C())
  {
    sub_10003B17C(a2);
    sub_100003470(v100, "\n  <EXECUTABLE> <COMMAND> --templateDir <dir> [--delete] [--debug]\n\n      Report or delete any CAT folders that have a \"meta\" element whose \"name\" attribute is\n      \"excludeIfSet\" and whose \"value\" attribute is an existing environment variable.\n      Example:\n        <meta name=\"excludeIfSet\" value=\"YOUR_ENV_VAR\"/>\n\n      --debug              Output debug log messages\n      --delete             Delete all CATs that meet the criteria instead of merely reporting\n      --templateDir <dir>  Path to the template directory\n");
    sub_100003470(__p, "exclude");
    sub_10003B430();
    if (SHIBYTE(v91) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v101) < 0) {
      operator delete(v100[0].__locale_);
    }
    char v4 = 0;
    return v4 & 1;
  }
  sub_100003470(v100, "--debug");
  int v6 = siri::dialogengine::OptionExists();
  int v8 = v6;
  if (SHIBYTE(v101) < 0)
  {
    operator delete(v100[0].__locale_);
    if (!v8) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v6)
  {
LABEL_13:
    siri::dialogengine::Log::SetLogDebugMessages((siri::dialogengine::Log *)1, v7);
    siri::dialogengine::Log::SetOutputToStdout((siri::dialogengine::Log *)1, v9);
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Activate debug mode", v10);
  }
LABEL_14:
  sub_10003BD70(*a1, 1);
  LOBYTE(v92) = 0;
  sub_100003470(&v104, "--templateDir");
  siri::dialogengine::GetOption();
  siri::dialogengine::ExpandPath();
  *(_OWORD *)std::string __p = *(_OWORD *)&v100[0].__locale_;
  uint64_t v91 = v101;
  HIBYTE(v101) = 0;
  LOBYTE(v100[0].__locale_) = 0;
  if (v108 < 0) {
    operator delete(v106.__locale_);
  }
  if (v105 < 0) {
    operator delete(v104);
  }
  uint64_t v11 = (void *)HIBYTE(v91);
  if (v91 < 0) {
    uint64_t v11 = __p[1];
  }
  if (!v11)
  {
    std::string::size_type v36 = sub_1000042E0(&std::cout, (uint64_t)"Error: No template directory specified.", 39);
LABEL_63:
    std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
    std::string::size_type v40 = std::locale::use_facet(v100, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
    std::locale::~locale(v100);
    std::ostream::put();
    std::ostream::flush();
    char v4 = 0;
    goto LABEL_155;
  }
  if ((siri::dialogengine::DirExists() & 1) == 0)
  {
    std::string::size_type v37 = sub_1000042E0(&std::cout, (uint64_t)"Error: The specified template directory does not exist or is not a directory: ", 78);
    if (v91 >= 0) {
      int v38 = __p;
    }
    else {
      int v38 = (void **)__p[0];
    }
    if (v91 >= 0) {
      uint64_t v39 = HIBYTE(v91);
    }
    else {
      uint64_t v39 = (uint64_t)__p[1];
    }
    std::string::size_type v36 = sub_1000042E0(v37, (uint64_t)v38, v39);
    goto LABEL_63;
  }
  sub_100003470(v100, "--delete");
  LOBYTE(v92) = siri::dialogengine::OptionExists();
  if (SHIBYTE(v101) < 0) {
    operator delete(v100[0].__locale_);
  }
  unint64_t v12 = sub_1000042E0(&std::cout, (uint64_t)"Template directory: ", 20);
  if (v91 >= 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  if (v91 >= 0) {
    uint64_t v14 = HIBYTE(v91);
  }
  else {
    uint64_t v14 = (uint64_t)__p[1];
  }
  long long v15 = sub_1000042E0(v12, (uint64_t)v13, v14);
  LOBYTE(v100[0].__locale_) = 10;
  uint64_t v16 = sub_1000042E0(v15, (uint64_t)v100, 1);
  LOBYTE(v100[0].__locale_) = 10;
  int v17 = sub_1000042E0(v16, (uint64_t)v100, 1);
  uint64_t v18 = sub_1000042E0(v17, (uint64_t)"Delete? ", 8);
  siri::dialogengine::StringFromBool((uint64_t *)v100, (siri::dialogengine *)v92, v19);
  if (v101 >= 0) {
    locale = v100;
  }
  else {
    locale = v100[0].__locale_;
  }
  if (v101 >= 0) {
    uint64_t v21 = HIBYTE(v101);
  }
  else {
    uint64_t v21 = (uint64_t)v100[1].__locale_;
  }
  uint64_t v22 = sub_1000042E0(v18, (uint64_t)locale, v21);
  LOBYTE(v106.__locale_) = 10;
  unsigned __int8 v23 = sub_1000042E0(v22, (uint64_t)&v106, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
  char v24 = std::locale::use_facet(&v106, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v106);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v101) < 0) {
    operator delete(v100[0].__locale_);
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"BEGIN ExcludeCats", v25);
  char v27 = __p;
  if (v91 < 0) {
    char v27 = (void **)__p[0];
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"templateDir: [%s]", v26, v27);
  siri::dialogengine::StringFromBool((uint64_t *)v100, (siri::dialogengine *)v92, v28);
  if (v101 >= 0) {
    unsigned __int8 v30 = v100;
  }
  else {
    unsigned __int8 v30 = v100[0].__locale_;
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"delete: %s", v29, v30);
  if (SHIBYTE(v101) < 0) {
    operator delete(v100[0].__locale_);
  }
  sub_100003470(v100, "dialog");
  siri::dialogengine::JoinPath();
  if (SHIBYTE(v101) < 0) {
    operator delete(v100[0].__locale_);
  }
  siri::dialogengine::ListDirRecursively();
  unint64_t v31 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v103 - (char *)v102) >> 3));
  if (v103 == v102) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v31;
  }
  sub_1000394A0((uint64_t)v102, v103, (uint64_t)v100, v32, 1);
  uint64_t v33 = v102;
  uint64_t v34 = v103;
  while (v33 != v34)
  {
    siri::dialogengine::JoinPath();
    if (*((char *)v33 + 23) < 0) {
      operator delete(*(void **)v33);
    }
    long long v35 = *(_OWORD *)&v100[0].__locale_;
    *((void *)v33 + 2) = v101;
    long long *v33 = v35;
    uint64_t v33 = (long long *)((char *)v33 + 24);
  }
  siri::dialogengine::Context::Context((siri::dialogengine::Context *)v100);
  long long v42 = v102;
  char v43 = v103;
  if (v102 != v103)
  {
    char v4 = 1;
    while (1)
    {
      sub_100003470(&v106, "cat");
      if (siri::dialogengine::HasExtension())
      {
        char v44 = siri::dialogengine::DirExists();
        char v45 = v44;
        if ((v108 & 0x80000000) == 0)
        {
          if ((v44 & 1) == 0) {
            goto LABEL_150;
          }
LABEL_73:
          int v47 = *((char *)v42 + 23);
          if (v47 >= 0) {
            uint64_t v48 = (uint64_t)v42;
          }
          else {
            uint64_t v48 = *(void *)v42;
          }
          if (v47 >= 0) {
            uint64_t v49 = *((unsigned __int8 *)v42 + 23);
          }
          else {
            uint64_t v49 = *((void *)v42 + 1);
          }
          std::string::size_type v50 = sub_1000042E0(&std::cout, v48, v49);
          std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(void *)(*v50 - 24)));
          unint64_t v51 = std::locale::use_facet(&v106, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
          std::locale::~locale(&v106);
          std::ostream::put();
          std::ostream::flush();
          siri::dialogengine::GetCatLocales();
          if ((char *)v106.__locale_ == v107)
          {
            sub_100003470(__dst, (char *)&unk_10006DFE2);
          }
          else if (*((char *)v106.__locale_ + 23) < 0)
          {
            sub_100003600(__dst, *(void **)v106.__locale_, *((void *)v106.__locale_ + 1));
          }
          else
          {
            long long v52 = *(_OWORD *)v106.__locale_;
            uint64_t v99 = *((void *)v106.__locale_ + 2);
            *(_OWORD *)std::string __dst = v52;
          }
          v96.__locale_ = (std::locale::__imp *)&v106;
          sub_100003B14((void ***)&v96);
          siri::dialogengine::FindParamsFile();
          if (SHIBYTE(v99) < 0)
          {
            sub_100003600(&v111, __dst[0], (unint64_t)__dst[1]);
          }
          else
          {
            long long v111 = *(_OWORD *)__dst;
            uint64_t v112 = v99;
          }
          char v93 = 0;
          std::string::size_type v94 = 0;
          char v95 = 0;
          std::locale v109 = &v93;
          char v110 = 0;
          char v93 = (std::__shared_weak_count *)operator new(0x18uLL);
          std::string::size_type v94 = v93;
          char v95 = (char *)&v93[1];
          std::string::size_type v94 = (std::__shared_weak_count *)sub_100008D8C((uint64_t)&v95, &v111, &v113, (char *)v93);
          siri::dialogengine::FindLocaleFile();
          siri::dialogengine::Context::LoadFiles();
          if (v97 < 0) {
            operator delete(v96.__locale_);
          }
          std::locale v109 = &v93;
          sub_100003B14((void ***)&v109);
          if (SHIBYTE(v112) < 0) {
            operator delete((void *)v111);
          }
          if (v108 < 0) {
            operator delete(v106.__locale_);
          }
          siri::dialogengine::Context::GetFile((uint64_t *)&v93, (siri::dialogengine::Context *)v100);
          if (v93)
          {
            sub_100003470(&v96, "excludeIfSet");
            siri::dialogengine::File::GetMetadata();
            if (v97 < 0) {
              operator delete(v96.__locale_);
            }
            uint64_t v53 = v106.__locale_;
            if ((char **)v106.__locale_ != &v107)
            {
              do
              {
                if (*((char *)v53 + 55) < 0) {
                  long long v54 = (const char *)*((void *)v53 + 4);
                }
                else {
                  long long v54 = (char *)v53 + 32;
                }
                if (getenv(v54))
                {
                  if ((_BYTE)v92)
                  {
                    std::string::size_type v77 = sub_1000042E0(&std::cout, (uint64_t)"\t*** The environment variable '", 31);
                    int v78 = *((char *)v53 + 55);
                    if (v78 >= 0) {
                      uint64_t v79 = (uint64_t)v53 + 32;
                    }
                    else {
                      uint64_t v79 = *((void *)v53 + 4);
                    }
                    if (v78 >= 0) {
                      uint64_t v80 = *((unsigned __int8 *)v53 + 55);
                    }
                    else {
                      uint64_t v80 = *((void *)v53 + 5);
                    }
                    std::string::size_type v81 = sub_1000042E0(v77, v79, v80);
                    uint64_t v82 = sub_1000042E0(v81, (uint64_t)"' is defined.  DELETING this CAT. ***", 37);
                    std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(void *)(*v82 - 24)));
                    std::string v83 = std::locale::use_facet(&v96, &std::ctype<char>::id);
                    ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
                    std::locale::~locale(&v96);
                    std::ostream::put();
                    std::ostream::flush();
                    if ((siri::dialogengine::DeleteDirTree() & 1) == 0)
                    {
                      std::string::size_type v84 = sub_1000042E0(&std::cout, (uint64_t)"\tError: Failed to delete CAT: ", 30);
                      int v85 = *((char *)v42 + 23);
                      if (v85 >= 0) {
                        uint64_t v86 = (uint64_t)v42;
                      }
                      else {
                        uint64_t v86 = *(void *)v42;
                      }
                      if (v85 >= 0) {
                        uint64_t v87 = *((unsigned __int8 *)v42 + 23);
                      }
                      else {
                        uint64_t v87 = *((void *)v42 + 1);
                      }
                      std::string v88 = sub_1000042E0(v84, v86, v87);
                      std::ios_base::getloc((const std::ios_base *)((char *)v88 + *(void *)(*v88 - 24)));
                      std::string v89 = std::locale::use_facet(&v96, &std::ctype<char>::id);
                      ((void (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 10);
                      std::locale::~locale(&v96);
                      std::ostream::put();
                      std::ostream::flush();
                      char v4 = 0;
                    }
                    break;
                  }
                  uint64_t v55 = sub_1000042E0(&std::cout, (uint64_t)"\t*** The environment variable '", 31);
                  int v56 = *((char *)v53 + 55);
                  if (v56 >= 0) {
                    uint64_t v57 = (uint64_t)v53 + 32;
                  }
                  else {
                    uint64_t v57 = *((void *)v53 + 4);
                  }
                  if (v56 >= 0) {
                    uint64_t v58 = *((unsigned __int8 *)v53 + 55);
                  }
                  else {
                    uint64_t v58 = *((void *)v53 + 5);
                  }
                  uint64_t v59 = sub_1000042E0(v55, v57, v58);
                  uint64_t v60 = "' is defined.  This CAT will be EXCLUDED. ***";
                  uint64_t v61 = 45;
                }
                else
                {
                  long long v62 = sub_1000042E0(&std::cout, (uint64_t)"\t*** The environment variable '", 31);
                  int v63 = *((char *)v53 + 55);
                  if (v63 >= 0) {
                    uint64_t v64 = (uint64_t)v53 + 32;
                  }
                  else {
                    uint64_t v64 = *((void *)v53 + 4);
                  }
                  if (v63 >= 0) {
                    uint64_t v65 = *((unsigned __int8 *)v53 + 55);
                  }
                  else {
                    uint64_t v65 = *((void *)v53 + 5);
                  }
                  uint64_t v59 = sub_1000042E0(v62, v64, v65);
                  uint64_t v60 = "' is not defined.  Leaving this CAT in place. ***";
                  uint64_t v61 = 49;
                }
                long long v66 = sub_1000042E0(v59, (uint64_t)v60, v61);
                std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(*v66 - 24)));
                uint64_t v67 = std::locale::use_facet(&v96, &std::ctype<char>::id);
                ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
                std::locale::~locale(&v96);
                std::ostream::put();
                std::ostream::flush();
                long long v68 = (char *)*((void *)v53 + 1);
                if (v68)
                {
                  do
                  {
                    std::string::size_type v69 = (char **)v68;
                    long long v68 = *(char **)v68;
                  }
                  while (v68);
                }
                else
                {
                  do
                  {
                    std::string::size_type v69 = (char **)*((void *)v53 + 2);
                    BOOL v70 = *v69 == (char *)v53;
                    uint64_t v53 = (std::locale::__imp *)v69;
                  }
                  while (!v70);
                }
                uint64_t v53 = (std::locale::__imp *)v69;
              }
              while (v69 != &v107);
            }
            sub_10000A3E0((uint64_t)&v106, v107);
          }
          else
          {
            long long v71 = sub_1000042E0(&std::cout, (uint64_t)"\tError: Failed to load CAT: ", 28);
            int v72 = *((char *)v42 + 23);
            if (v72 >= 0) {
              uint64_t v73 = (uint64_t)v42;
            }
            else {
              uint64_t v73 = *(void *)v42;
            }
            if (v72 >= 0) {
              uint64_t v74 = *((unsigned __int8 *)v42 + 23);
            }
            else {
              uint64_t v74 = *((void *)v42 + 1);
            }
            std::string::size_type v75 = sub_1000042E0(v71, v73, v74);
            std::ios_base::getloc((const std::ios_base *)((char *)v75 + *(void *)(*v75 - 24)));
            std::string::size_type v76 = std::locale::use_facet(&v106, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v76->__vftable[2].~facet_0)(v76, 10);
            std::locale::~locale(&v106);
            std::ostream::put();
            std::ostream::flush();
            char v4 = 0;
          }
          if (v94) {
            sub_100006AE0(v94);
          }
          if ((SHIBYTE(v99) & 0x80000000) == 0) {
            goto LABEL_150;
          }
          long long v46 = (std::locale::__imp *)__dst[0];
LABEL_149:
          operator delete(v46);
          goto LABEL_150;
        }
        operator delete(v106.__locale_);
        if (v45) {
          goto LABEL_73;
        }
      }
      else if (v108 < 0)
      {
        long long v46 = v106.__locale_;
        goto LABEL_149;
      }
LABEL_150:
      long long v42 = (long long *)((char *)v42 + 24);
      if (v42 == v43) {
        goto LABEL_153;
      }
    }
  }
  char v4 = 1;
LABEL_153:
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"END ExcludeCats", v41);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v100);
  v100[0].__locale_ = (std::locale::__imp *)&v102;
  sub_100003B14((void ***)v100);
  if (v105 < 0) {
    operator delete(v104);
  }
LABEL_155:
  sub_10003BD70(*a1, 0);
  if (SHIBYTE(v91) < 0) {
    operator delete(__p[0]);
  }
  return v4 & 1;
}

void sub_10003CBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,std::__shared_weak_count *a21,uint64_t a22,std::locale a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,std::locale a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::locale::~locale(&a23);
  sub_10000A3E0(v41 - 168, *(char **)(v41 - 160));
  if (a21) {
    sub_100006AE0(a21);
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a36);
  std::string __p = (void *)(v41 - 216);
  sub_100003B14((void ***)&__p);
  if (*(char *)(v41 - 169) < 0) {
    operator delete(*(void **)(v41 - 192));
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

uint64_t start(int a1, char **a2)
{
  memset(v4, 0, sizeof(v4));
  sub_10003CE9C(v4, a2, &a2[a1], a1);
  uint64_t v2 = sub_100034364((uint64_t)v4) ^ 1;
  uint64_t v5 = (void **)v4;
  sub_100003B14(&v5);
  return v2;
}

void sub_10003CE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100003B14((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_10003CE9C(void *result, char **a2, char **a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    sub_100003920(result, a4);
    double result = sub_10003CF24((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10003CF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100003B14(&a9);
  _Unwind_Resume(a1);
}

void *sub_10003CF24(uint64_t a1, char **a2, char **a3, void *a4)
{
  char v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      sub_100003470(v4, *v6++);
      char v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_100003A94((uint64_t)v8);
  return v4;
}

void sub_10003CFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10003CFC8(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
  {
    if (*(void *)(a1 + 104)) {
      return 1;
    }
  }
  else if (*(unsigned char *)(a1 + 119))
  {
    return 1;
  }
  if (*(char *)(a1 + 95) < 0)
  {
    if (*(void *)(a1 + 80)) {
      return 2;
    }
  }
  else if (*(unsigned char *)(a1 + 95))
  {
    return 2;
  }
  if (*(char *)(a1 + 71) < 0) {
    uint64_t v2 = *(void *)(a1 + 56);
  }
  else {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 71);
  }
  if (v2) {
    return 3;
  }
  else {
    return 0;
  }
}

void *sub_10003D02C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = (void *)sub_10003CFC8(a1);
  switch((int)result)
  {
    case 1:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      {
        uint64_t v5 = a1 + 96;
        goto LABEL_9;
      }
      int v6 = *(void **)(a1 + 96);
      unint64_t v7 = *(void *)(a1 + 104);
      goto LABEL_14;
    case 2:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      {
        uint64_t v5 = a1 + 72;
        goto LABEL_9;
      }
      int v6 = *(void **)(a1 + 72);
      unint64_t v7 = *(void *)(a1 + 80);
      goto LABEL_14;
    case 3:
      if (*(char *)(a1 + 71) < 0)
      {
        int v6 = *(void **)(a1 + 48);
        unint64_t v7 = *(void *)(a1 + 56);
LABEL_14:
        return sub_100003600((unsigned char *)a2, v6, v7);
      }
      else
      {
        uint64_t v5 = a1 + 48;
LABEL_9:
        *(_OWORD *)a2 = *(_OWORD *)v5;
        *(void *)(a2 + 16) = *(void *)(v5 + 16);
      }
      return result;
    default:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      return result;
  }
}

void sub_10003D104(uint64_t a1)
{
  sub_100003470(v4, "metadata");
  sub_100003470(__p, "Perform operations on dialog metadata. (Sub-commands: write, read, copy, grammarFeatures)");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10003D17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003D1B0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (sub_10003CFC8(a1) == 3)
  {
    siri::dialogengine::ListDir();
    uint64_t v2 = (char *)v21[0];
    char v3 = (char *)v21[1];
    while (v2 != v3)
    {
      if (v2[23] < 0)
      {
        sub_100003600(__dst, *(void **)v2, *((void *)v2 + 1));
      }
      else
      {
        long long v4 = *(_OWORD *)v2;
        *(void *)&__dst[16] = *((void *)v2 + 2);
        *(_OWORD *)std::string __dst = v4;
      }
      siri::dialogengine::JoinPath();
      int v5 = siri::dialogengine::DirExists();
      int v6 = v5;
      if (SHIBYTE(v26) < 0)
      {
        operator delete(__p[0]);
        if (v6)
        {
LABEL_10:
          if ((__dst[23] & 0x80000000) != 0)
          {
            sub_100003600(v22, *(void **)__dst, *(unint64_t *)&__dst[8]);
          }
          else
          {
            *(_OWORD *)uint64_t v22 = *(_OWORD *)__dst;
            uint64_t v23 = *(void *)&__dst[16];
          }
          char v24 = 1;
          unint64_t v7 = a2[1];
          unint64_t v8 = a2[2];
          if (v7 >= v8)
          {
            uint64_t v10 = (uint64_t)(v7 - *a2) >> 5;
            unint64_t v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 59) {
              sub_100003974();
            }
            uint64_t v12 = v8 - *a2;
            if (v12 >> 4 > v11) {
              unint64_t v11 = v12 >> 4;
            }
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v13 = v11;
            }
            BOOL v28 = a2 + 2;
            uint64_t v14 = (char *)sub_100029C14((uint64_t)(a2 + 2), v13);
            long long v15 = &v14[32 * v10];
            __p[0] = v14;
            __p[1] = v15;
            char v27 = &v14[32 * v16];
            long long v17 = *(_OWORD *)v22;
            *((void *)v15 + 2) = v23;
            *(_OWORD *)long long v15 = v17;
            uint64_t v23 = 0;
            v22[1] = 0;
            v22[0] = 0;
            v15[24] = v24;
            char v26 = v15 + 32;
            sub_100046990(a2, __p);
            uint64_t v18 = a2[1];
            sub_100046B38((uint64_t)__p);
            int v19 = SHIBYTE(v23);
            a2[1] = v18;
            if (v19 < 0) {
              operator delete(v22[0]);
            }
          }
          else
          {
            long long v9 = *(_OWORD *)v22;
            *(void *)(v7 + 16) = v23;
            *(_OWORD *)unint64_t v7 = v9;
            uint64_t v23 = 0;
            v22[1] = 0;
            v22[0] = 0;
            *(unsigned char *)(v7 + 24) = v24;
            a2[1] = v7 + 32;
          }
        }
      }
      else if (v5)
      {
        goto LABEL_10;
      }
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      v2 += 24;
    }
    __p[0] = v21;
    sub_100003B14((void ***)__p);
  }
  else
  {
    __dst[0] = 1;
    *(_OWORD *)&__dst[8] = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    sub_100003470(__p, "metadata/dialog-metadata.yaml");
    siri::dialogengine::JoinPath();
    if (SHIBYTE(v26) < 0) {
      operator delete(__p[0]);
    }
    if (siri::dialogengine::FileExists()) {
      YAML::LoadFile();
    }
    std::operator+<char>();
    siri::dialogengine::Log::Error();
    if (SHIBYTE(v26) < 0) {
      operator delete(__p[0]);
    }
    if (v30 < 0) {
      operator delete(v29);
    }
    if ((void)v33) {
      sub_100006AE0((std::__shared_weak_count *)v33);
    }
    if (SBYTE7(v32) < 0) {
      operator delete(*(void **)&__dst[8]);
    }
  }
}

void sub_10003E9C0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x3C8]) {
    sub_100006AE0((std::__shared_weak_count *)STACK[0x3C8]);
  }
  sub_10003F540((uint64_t)&STACK[0x3D0]);
  if (a2 == 1)
  {
    uint64_t v74 = __cxa_begin_catch(a1);
    std::operator+<char>();
    std::string::size_type v75 = std::string::append((std::string *)&a71, "\n");
    long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    STACK[0x220] = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x210] = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    uint64_t v79 = (const std::string::value_type *)v74[4];
    int v78 = (char *)(v74 + 4);
    std::string::size_type v77 = v79;
    int v80 = v78[23];
    if (v80 >= 0) {
      std::string::size_type v81 = v78;
    }
    else {
      std::string::size_type v81 = v77;
    }
    if (v80 >= 0) {
      std::string::size_type v82 = v78[23];
    }
    else {
      std::string::size_type v82 = *((void *)v78 + 1);
    }
    std::string v83 = std::string::append((std::string *)&STACK[0x210], v81, v82);
    long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    STACK[0x3E0] = v83->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x3D0] = v84;
    v83->__r_.__value_.__l.__size_ = 0;
    v83->__r_.__value_.__r.__words[2] = 0;
    v83->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Error();
    if (SLOBYTE(STACK[0x3E7]) < 0) {
      operator delete((void *)STACK[0x3D0]);
    }
    if (SLOBYTE(STACK[0x227]) < 0) {
      operator delete((void *)STACK[0x210]);
    }
    if (SLOBYTE(STACK[0x207]) < 0) {
      operator delete((void *)a71);
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (*(char *)(v71 - 193) < 0) {
        operator delete(*(void **)(v71 - 216));
      }
      sub_10003F540(v71 - 192);
      *(void *)(v71 - 192) = a36;
      sub_1000468EC((void ***)(v71 - 192));
      _Unwind_Resume(a1);
    }
    int v85 = __cxa_begin_catch(a1);
    std::operator+<char>();
    uint64_t v86 = std::string::append((std::string *)&a40, " \"");
    long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    STACK[0x200] = v86->__r_.__value_.__r.__words[2];
    a71 = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    std::string v88 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v85 + 16))(v85);
    std::string v89 = std::string::append((std::string *)&a71, v88);
    long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    STACK[0x220] = v89->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x210] = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    uint64_t v91 = std::string::append((std::string *)&STACK[0x210], "\"");
    long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
    STACK[0x3E0] = v91->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x3D0] = v92;
    v91->__r_.__value_.__l.__size_ = 0;
    v91->__r_.__value_.__r.__words[2] = 0;
    v91->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Error();
    if (SLOBYTE(STACK[0x3E7]) < 0) {
      operator delete((void *)STACK[0x3D0]);
    }
    if (SLOBYTE(STACK[0x227]) < 0) {
      operator delete((void *)STACK[0x210]);
    }
    if (SLOBYTE(STACK[0x207]) < 0) {
      operator delete((void *)a71);
    }
    if (a45 < 0) {
      operator delete(a40);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x10003E33CLL);
}

void sub_10003F368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete((void *)STACK[0x3D0]);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a73);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  __cxa_end_catch();
  JUMPOUT(0x10003EC18);
}

void sub_10003F3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete((void *)STACK[0x3D0]);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a71);
  }
  __cxa_end_catch();
  JUMPOUT(0x10003EC18);
}

unsigned char *sub_10003F430(unsigned char *a1, unsigned char *a2)
{
  if (*a1) {
    BOOL v3 = *a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    unint64_t v7 = a1;
    unint64_t v8 = exception;
    if ((char)v7[31] < 0)
    {
      sub_100003600(&v9, *((void **)v7 + 1), *((void *)v7 + 2));
    }
    else
    {
      long long v9 = *(_OWORD *)(v7 + 8);
      uint64_t v10 = *((void *)v7 + 3);
    }
    sub_100043688(v8, (uint64_t)&v9);
  }
  if (!sub_10004340C((uint64_t)a1, (uint64_t)a2)) {
    sub_100043520((uint64_t)a1, (uint64_t)a2);
  }
  return a1;
}

void sub_10003F508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_10003F540(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_100006AE0(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_10003F580(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)a1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0)
    {
      sub_100003600(&__dst, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }
    else
    {
      long long __dst = *(_OWORD *)(a1 + 8);
      uint64_t v15 = *(void *)(a1 + 24);
    }
    sub_100043688(exception, (uint64_t)&__dst);
  }
  sub_100043C58(a1);
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 40);
  int v6 = *(uint64_t ***)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 32);
  unint64_t v13 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = sub_100046BC8(v6, a2, &v12);
  if (v13) {
    sub_100006AE0(v13);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  long long v9 = *(std::__shared_weak_count **)(a1 + 40);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_100006AE0(v9);
  }
  else
  {
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
  }
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 32) = v10;
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = v8;
}

void sub_10003F6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void sub_10003F700(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)a1 == 2)
  {
    int v5 = *(uint64_t **)(a1 + 16);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      goto LABEL_11;
    }
    uint64_t v9 = *(void *)(a1 + 32);
    long long v4 = *(std::__shared_weak_count **)(a1 + 40);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      char v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = v9;
      char v24 = v4;
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(std::__shared_weak_count **)(a1 + 40);
      v19[0] = 1;
      uint64_t v25 = v7;
      if (v10)
      {
        char v11 = 0;
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        std::string __p = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = v9;
        long long v17 = v10;
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_19:
        v12[0] = 1;
        uint64_t v18 = v6;
        sub_100047A0C(a2, (uint64_t)v19, (uint64_t)v12);
        if (v17) {
          sub_100006AE0(v17);
        }
        if (SHIBYTE(v15) < 0) {
          operator delete(__p);
        }
        if ((v11 & 1) == 0) {
          sub_100006AE0(v10);
        }
        goto LABEL_25;
      }
    }
    else
    {
      char v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = v9;
      v19[0] = 1;
      char v24 = 0;
      uint64_t v25 = v7;
    }
    uint64_t v10 = 0;
    std::string __p = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = v9;
    char v11 = 1;
    long long v17 = 0;
    goto LABEL_19;
  }
  if (*(_DWORD *)a1 != 1 || (uint64_t v2 = **(void **)(a1 + 8)) == 0)
  {
LABEL_11:
    *(unsigned char *)a2 = 1;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(unsigned char *)(a2 + 56) = 1;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(unsigned char *)(a2 + 112) = 1;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    return;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  long long v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    char v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = v3;
    char v24 = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    char v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = v3;
    char v24 = 0;
  }
  v19[0] = 1;
  uint64_t v25 = v2;
  sub_10004780C(a2, (uint64_t)v19);
LABEL_25:
  if (v24) {
    sub_100006AE0(v24);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v20);
  }
  if (v4) {
    sub_100006AE0(v4);
  }
}

void sub_10003F8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  char v19 = v18;
  sub_10003F540((uint64_t)&a9);
  if ((v19 & 1) == 0) {
    sub_100006AE0(v17);
  }
  sub_10003F540((uint64_t)&a16);
  if (v16) {
    sub_100006AE0(v16);
  }
  _Unwind_Resume(a1);
}

void sub_10003F914(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)a1 == 2)
  {
    int v5 = *(uint64_t **)(a1 + 16);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      goto LABEL_11;
    }
    uint64_t v9 = *(void *)(a1 + 32);
    long long v4 = *(std::__shared_weak_count **)(a1 + 40);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      char v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = v9;
      char v24 = v4;
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(std::__shared_weak_count **)(a1 + 40);
      v19[0] = 1;
      uint64_t v25 = v7;
      if (v10)
      {
        char v11 = 0;
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        std::string __p = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = v9;
        long long v17 = v10;
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_19:
        v12[0] = 1;
        uint64_t v18 = v6;
        sub_100047A0C(a2, (uint64_t)v19, (uint64_t)v12);
        if (v17) {
          sub_100006AE0(v17);
        }
        if (SHIBYTE(v15) < 0) {
          operator delete(__p);
        }
        if ((v11 & 1) == 0) {
          sub_100006AE0(v10);
        }
        goto LABEL_25;
      }
    }
    else
    {
      char v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = v9;
      v19[0] = 1;
      char v24 = 0;
      uint64_t v25 = v7;
    }
    uint64_t v10 = 0;
    std::string __p = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = v9;
    char v11 = 1;
    long long v17 = 0;
    goto LABEL_19;
  }
  if (*(_DWORD *)a1 != 1 || (uint64_t v2 = **(void **)(a1 + 8)) == 0)
  {
LABEL_11:
    *(unsigned char *)a2 = 1;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(unsigned char *)(a2 + 56) = 1;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(unsigned char *)(a2 + 112) = 1;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    return;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  long long v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    char v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = v3;
    char v24 = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    char v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = v3;
    char v24 = 0;
  }
  v19[0] = 1;
  uint64_t v25 = v2;
  sub_10004780C(a2, (uint64_t)v19);
LABEL_25:
  if (v24) {
    sub_100006AE0(v24);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v20);
  }
  if (v4) {
    sub_100006AE0(v4);
  }
}

void sub_10003FAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  char v19 = v18;
  sub_10003F540((uint64_t)&a9);
  if ((v19 & 1) == 0) {
    sub_100006AE0(v17);
  }
  sub_10003F540((uint64_t)&a16);
  if (v16) {
    sub_100006AE0(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10003FB28(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (v2) {
    sub_100006AE0(v2);
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (v3) {
    sub_100006AE0(v3);
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4) {
    sub_100006AE0(v4);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_10003FBA0(siri::dialogengine::DialogMetadataReader *a1, FILE *a2)
{
  sub_100003470(&v64, (char *)&unk_10006DFE2);
  uint64_t NextSemanticValue = siri::dialogengine::DialogMetadataReader::GetNextSemanticValue(a1);
  uint64_t v57 = a2;
  uint64_t v55 = a1;
  while (NextSemanticValue)
  {
    int v5 = (const void **)(NextSemanticValue + 24);
    if (*(char *)(NextSemanticValue + 47) >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(NextSemanticValue + 47);
    }
    else {
      uint64_t v6 = *(void *)(NextSemanticValue + 32);
    }
    std::string::size_type size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v64.__r_.__value_.__l.__size_;
    }
    if (v6 != size) {
      goto LABEL_18;
    }
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v8 = &v64;
    }
    else {
      BOOL v8 = (std::string *)v64.__r_.__value_.__r.__words[0];
    }
    if ((*(unsigned char *)(NextSemanticValue + 47) & 0x80) != 0)
    {
      char v11 = (const char *)*v5;
      if (memcmp(*v5, v8, *(void *)(NextSemanticValue + 32))) {
        goto LABEL_21;
      }
    }
    else if (*(unsigned char *)(NextSemanticValue + 47))
    {
      uint64_t v9 = (unsigned __int8 *)(NextSemanticValue + 24);
      uint64_t v10 = *(unsigned __int8 *)(NextSemanticValue + 47);
      while (*v9 == v8->__r_.__value_.__s.__data_[0])
      {
        ++v9;
        BOOL v8 = (std::string *)((char *)v8 + 1);
        if (!--v10) {
          goto LABEL_22;
        }
      }
LABEL_18:
      char v11 = (const char *)(NextSemanticValue + 24);
      if ((*(unsigned char *)(NextSemanticValue + 47) & 0x80) != 0) {
        char v11 = (const char *)*v5;
      }
LABEL_21:
      fprintf(a2, "\n%s\n", v11);
    }
LABEL_22:
    std::string __str = (std::string *)(NextSemanticValue + 24);
    uint64_t v13 = *(void *)(NextSemanticValue + 48);
    uint64_t v12 = *(void *)(NextSemanticValue + 56);
    uint64_t v58 = v12;
    while (v13 != v12)
    {
      uint64_t v14 = (const char *)v13;
      if (*(char *)(v13 + 23) < 0) {
        uint64_t v14 = *(const char **)v13;
      }
      fprintf(a2, "    %s", v14);
      if (*(void *)(v13 + 40))
      {
        fwrite(" [d; ", 5uLL, 1uLL, a2);
        uint64_t v61 = 0;
        long long v62 = 0;
        unint64_t v63 = 0;
        uint64_t v15 = *(void **)(v13 + 24);
        if (v15 != (void *)(v13 + 32))
        {
          do
          {
            int v16 = *((char *)v15 + 79);
            if (v16 >= 0) {
              long long v17 = (char *)(v15 + 7);
            }
            else {
              long long v17 = (char *)v15[7];
            }
            if (v16 >= 0) {
              uint64_t v18 = *((unsigned __int8 *)v15 + 79);
            }
            else {
              uint64_t v18 = v15[8];
            }
            if (v18)
            {
              while (1)
              {
                __darwin_ct_rune_t v19 = *v17;
                if (v19 < 0 ? __maskrune(v19, 0x4000uLL) : _DefaultRuneLocale.__runetype[v19] & 0x4000) {
                  break;
                }
                ++v17;
                if (!--v18) {
                  goto LABEL_40;
                }
              }
              sub_1000402F8((const void **)v15 + 4, 61, (uint64_t)&v59);
              std::string::push_back(&v59, 34);
              std::string v70 = v59;
              memset(&v59, 0, sizeof(v59));
              int v33 = *((char *)v15 + 79);
              if (v33 >= 0) {
                uint64_t v34 = (const std::string::value_type *)(v15 + 7);
              }
              else {
                uint64_t v34 = (const std::string::value_type *)v15[7];
              }
              if (v33 >= 0) {
                std::string::size_type v35 = *((unsigned __int8 *)v15 + 79);
              }
              else {
                std::string::size_type v35 = v15[8];
              }
              std::string::size_type v36 = std::string::append(&v70, v34, v35);
              long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
              v60.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v37;
              v36->__r_.__value_.__l.__size_ = 0;
              v36->__r_.__value_.__r.__words[2] = 0;
              v36->__r_.__value_.__r.__words[0] = 0;
              std::string::push_back(&v60, 34);
              v71[0] = v60.__r_.__value_.__l.__size_;
              std::string::size_type v38 = v60.__r_.__value_.__r.__words[0];
              *(void *)((char *)v71 + 7) = *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 7);
              char v39 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
              memset(&v60, 0, sizeof(v60));
              std::string::size_type v40 = v62;
              if ((unint64_t)v62 >= v63)
              {
                unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v62 - v61) >> 3);
                unint64_t v44 = v43 + 1;
                if (v43 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_100003974();
                }
                if (0x5555555555555556 * ((uint64_t)(v63 - v61) >> 3) > v44) {
                  unint64_t v44 = 0x5555555555555556 * ((uint64_t)(v63 - v61) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v61) >> 3) >= 0x555555555555555) {
                  unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v45 = v44;
                }
                std::string::size_type v69 = &v63;
                if (v45) {
                  long long v46 = (char *)sub_10000398C((uint64_t)&v63, v45);
                }
                else {
                  long long v46 = 0;
                }
                uint64_t v49 = &v46[24 * v43];
                std::string __p = v46;
                long long v66 = v49;
                long long v68 = &v46[24 * v45];
                uint64_t v50 = v71[0];
                *(void *)uint64_t v49 = v38;
                *((void *)v49 + 1) = v50;
                *(void *)(v49 + 15) = *(void *)((char *)v71 + 7);
                v49[23] = v39;
                v71[0] = 0;
                *(void *)((char *)v71 + 7) = 0;
                uint64_t v67 = v49 + 24;
                sub_1000040B8(&v61, &__p);
                long long v42 = v62;
                sub_100004250((uint64_t)&__p);
              }
              else
              {
                std::string::size_type v41 = v71[0];
                std::string::size_type *v62 = v38;
                v40[1] = v41;
                *(std::string::size_type *)((char *)v40 + 15) = *(void *)((char *)v71 + 7);
                *((unsigned char *)v40 + 23) = v39;
                long long v42 = v40 + 3;
              }
              long long v62 = v42;
              if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v60.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v70.__r_.__value_.__l.__data_);
              }
              if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_85;
              }
              uint64_t v48 = (void *)v59.__r_.__value_.__r.__words[0];
            }
            else
            {
LABEL_40:
              sub_1000402F8((const void **)v15 + 4, 61, (uint64_t)&v60);
              int v21 = *((char *)v15 + 79);
              if (v21 >= 0) {
                uint64_t v22 = (const std::string::value_type *)(v15 + 7);
              }
              else {
                uint64_t v22 = (const std::string::value_type *)v15[7];
              }
              if (v21 >= 0) {
                std::string::size_type v23 = *((unsigned __int8 *)v15 + 79);
              }
              else {
                std::string::size_type v23 = v15[8];
              }
              char v24 = std::string::append(&v60, v22, v23);
              std::string::size_type v25 = v24->__r_.__value_.__r.__words[0];
              v70.__r_.__value_.__r.__words[0] = v24->__r_.__value_.__l.__size_;
              *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
              char v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
              v24->__r_.__value_.__l.__size_ = 0;
              v24->__r_.__value_.__r.__words[2] = 0;
              v24->__r_.__value_.__r.__words[0] = 0;
              char v27 = v62;
              if ((unint64_t)v62 >= v63)
              {
                unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v62 - v61) >> 3);
                unint64_t v30 = v29 + 1;
                if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_100003974();
                }
                if (0x5555555555555556 * ((uint64_t)(v63 - v61) >> 3) > v30) {
                  unint64_t v30 = 0x5555555555555556 * ((uint64_t)(v63 - v61) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v61) >> 3) >= 0x555555555555555) {
                  unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v31 = v30;
                }
                std::string::size_type v69 = &v63;
                if (v31) {
                  long long v32 = (char *)sub_10000398C((uint64_t)&v63, v31);
                }
                else {
                  long long v32 = 0;
                }
                int v47 = &v32[24 * v29];
                std::string __p = v32;
                long long v66 = v47;
                long long v68 = &v32[24 * v31];
                *(void *)int v47 = v25;
                *((void *)v47 + 1) = v70.__r_.__value_.__r.__words[0];
                *(void *)(v47 + 15) = *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 7);
                v47[23] = v26;
                uint64_t v67 = v47 + 24;
                sub_1000040B8(&v61, &__p);
                BOOL v28 = v62;
                sub_100004250((uint64_t)&__p);
              }
              else
              {
                std::string::size_type *v62 = v25;
                v27[1] = v70.__r_.__value_.__r.__words[0];
                *(std::string::size_type *)((char *)v27 + 15) = *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words
                                                                                          + 7);
                *((unsigned char *)v27 + 23) = v26;
                BOOL v28 = v27 + 3;
              }
              long long v62 = v28;
              if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_85;
              }
              uint64_t v48 = (void *)v60.__r_.__value_.__r.__words[0];
            }
            operator delete(v48);
LABEL_85:
            unint64_t v51 = (void *)v15[1];
            if (v51)
            {
              do
              {
                long long v52 = v51;
                unint64_t v51 = (void *)*v51;
              }
              while (v51);
            }
            else
            {
              do
              {
                long long v52 = (void *)v15[2];
                BOOL v53 = *v52 == (void)v15;
                uint64_t v15 = v52;
              }
              while (!v53);
            }
            uint64_t v15 = v52;
          }
          while (v52 != (void *)(v13 + 32));
        }
        sub_100003470(&v60, ", ");
        siri::dialogengine::StringJoin();
        if (SHIBYTE(v67) >= 0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = (const char *)__p;
        }
        a2 = v57;
        fputs(p_p, v57);
        if (SHIBYTE(v67) < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        fputc(93, v57);
        std::string __p = &v61;
        sub_100003B14((void ***)&__p);
      }
      else
      {
        fwrite(" [d]", 4uLL, 1uLL, a2);
      }
      v13 += 48;
      uint64_t v12 = v58;
    }
    fputc(10, a2);
    std::string::operator=(&v64, __str);
    uint64_t NextSemanticValue = siri::dialogengine::DialogMetadataReader::GetNextSemanticValue(v55);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
}

void sub_1000401FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000402F8@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  uint64_t result = sub_100008CC4(a3, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v7 = (char *)result;
  }
  else {
    uint64_t v7 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      BOOL v8 = a1;
    }
    else {
      BOOL v8 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v7, v8, v5);
  }
  uint64_t v9 = &v7[v5];
  *uint64_t v9 = a2;
  v9[1] = 0;
  return result;
}

uint64_t sub_10004038C(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3 || sub_10003B18C())
  {
    sub_10003B17C(a2);
    sub_100003470(__p, "\n  <EXECUTABLE> <COMMAND> write --templateDir <dir> [--metadataDir <dir>] [--assistantDir <dir>] [--sourceDir <dir>]\n          [--category <name>] [--verbose] [--ignoreIncludes] [--locale <locale1> <locale2> ...] [--allLocales]\n\n      Read the Templates/metadata/dialog-metadata.yaml file to define the categories and locales\n      to convert. If --category is specified, exclude all other configured categories except the\n      one specified. Then read [d] tag metadata from VOC files in the dialog-metadata or assistant\n      repository and generate a CAT dialog metadata file for every locale. You can specify if you\n      want the VOC parser to follow include directives or not. You can override the list of locales\n      in the YAML file with the --locale or --allLocales arguments.\n\n      Note: All of the options --metadataDir, --assistantDir and --sourceDir will allow you to specify the source of the\n      VOC files you wish to convert, but --metdataDir and --assistantDir require the presence of a \"dialog-metadata.yaml\"\n      file in the Templates dir, whereas --sourceDir does not. The latter will consume all available categories present\n"
      "      in the specified source directory.\n"
      "\n"
      "  <EXECUTABLE> <COMMAND> read --templateDir <dir> --category <name> --locale <locale>\n"
      "  <EXECUTABLE> <COMMAND> read --filename <filename>\n"
      "\n"
      "      Read a dialog metadata file and output its contents to the shell. You can either specify\n"
      "      the file through a combination of a template dir, category name (e.g. personRelationship),\n"
      "      and a locale; or you can provide the full path to the file with the --filename option.\n"
      "\n"
      "  <EXECUTABLE> <COMMAND> copy --templateDir <dir> --category <name> --outputDir <dir>\n"
      "\n"
      "      Copy all of the dialog metadata in a CAT .dtag directory into another directory and output\n"
      "      the data in VOC format. This lets you easily view all of the metadata for all locales for a\n"
      "      given category, and also lets you set up a local version of the data that's independent of\n"
      "      the assistant repo.\n"
      "\n"
      "  <EXECUTABLE> <COMMAND> codegen --templateDir <dir> --outputDir <dir> [--category <name>]\n"
      "          [--config <path>] [--swiftCaseStyle none|lower|upper] [--debug]\n"
      "\n"
      "      Read dialog metadata files and generate Swift enum definitions from their contents.\n"
      "\n"
      "      --category <name>         Process the specified category (or all categories if omitted)\n"
      "      --config <path>           Path to a YAML file for configuring output\n"
      "      --debug                   Output debug log messages\n"
      "      --outputDir <dir>         Path to the folder in which to write generated source code files\n"
      "      --swiftCaseStyle <style>  Choose the formatting of Swift enum case statements\n"
      "                                  \"none\": Unmodified (default)\n"
      "                                  \"lower\": All lower case\n"
      "                                  \"upper\": All upper case\n"
      "      --templateDir <dir>       Path to the template directory\n");
    sub_100003470(&v235, "metadata");
    sub_10003B430();
    if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v235.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    return 0;
  }
  sub_100003470(__p, "--debug");
  int v4 = siri::dialogengine::OptionExists();
  int v6 = v4;
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v4) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (v6)
  {
LABEL_12:
    siri::dialogengine::Log::SetLogDebugMessages((siri::dialogengine::Log *)1, v5);
    siri::dialogengine::Log::SetOutputToStdout((siri::dialogengine::Log *)1, v7);
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Activate debug mode", v8);
  }
LABEL_13:
  memset(v209, 0, sizeof(v209));
  long long v207 = 0u;
  memset(v208, 0, sizeof(v208));
  memset(v206, 0, sizeof(v206));
  long long v205 = 0u;
  long long v203 = 0u;
  memset(v204, 0, sizeof(v204));
  memset(__p, 0, sizeof(__p));
  long long v210 = 0u;
  memset(v211, 0, sizeof(v211));
  siri::dialogengine::StringToLower();
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  __p[0] = v235;
  sub_100003470(&v235, "codegen");
  sub_100003470(v236, "copy");
  sub_100003470(v237, "read");
  sub_100003470(v238, "write");
  sub_100003470(v239, "grammarfeatures");
  sub_100033FEC((uint64_t)v200, (const void **)&v235.__r_.__value_.__l.__data_, 5);
  for (uint64_t i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v239[i + 2]) < 0) {
      operator delete((void *)v239[i]);
    }
  }
  if (&v201 == (char **)sub_10000A230((uint64_t)v200, (const void **)&__p[0].__r_.__value_.__l.__data_))
  {
    char v11 = sub_1000042E0(&std::cout, (uint64_t)"Please specify one of the following metadata sub-commands: ", 59);
    sub_100003470(&v233, ", ");
    siri::dialogengine::StringJoin();
    if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v235;
    }
    else {
      uint64_t v12 = (std::string *)v235.__r_.__value_.__r.__words[0];
    }
    if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v235.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v235.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = sub_1000042E0(v11, (uint64_t)v12, size);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
    uint64_t v15 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale((std::locale *)&__dst);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v235.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v234) & 0x80000000) == 0) {
      goto LABEL_281;
    }
    int v16 = (void *)v233;
    goto LABEL_81;
  }
  sub_100003470(&v235, "--verbose");
  v209[24] = siri::dialogengine::OptionExists();
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  sub_100003470(&v235, "--ignoreIncludes");
  v209[25] = siri::dialogengine::OptionExists();
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  sub_100003470(&v235, "--allLocales");
  v209[26] = siri::dialogengine::OptionExists();
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  sub_100003470(&__dst, "--templateDir");
  siri::dialogengine::GetOption();
  siri::dialogengine::ExpandPath();
  if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[1].__r_.__value_.__l.__data_);
  }
  __p[1] = v235;
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 0;
  v235.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v234) < 0) {
    operator delete((void *)v233);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  sub_100003470(&v233, "--sourceDir");
  siri::dialogengine::GetOption();
  if (SHIBYTE(v204[0]) < 0) {
    operator delete((void *)v203);
  }
  long long v203 = *(_OWORD *)&v235.__r_.__value_.__l.__data_;
  v204[0] = *((void *)&v235.__r_.__value_.__l + 2);
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 0;
  v235.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v234) < 0) {
    operator delete((void *)v233);
  }
  sub_100003470(&v233, "--assistantDir");
  siri::dialogengine::GetOption();
  if (SHIBYTE(v204[3]) < 0) {
    operator delete((void *)v204[1]);
  }
  *(std::string *)&v204[1] = v235;
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 0;
  v235.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v234) < 0) {
    operator delete((void *)v233);
  }
  sub_100003470(&v233, "--metadataDir");
  siri::dialogengine::GetOption();
  if (SHIBYTE(v206[0]) < 0) {
    operator delete((void *)v205);
  }
  long long v205 = *(_OWORD *)&v235.__r_.__value_.__l.__data_;
  v206[0] = *((void *)&v235.__r_.__value_.__l + 2);
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 0;
  v235.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v234) < 0) {
    operator delete((void *)v233);
  }
  sub_100003470(&v233, "--category");
  siri::dialogengine::GetOption();
  if (SHIBYTE(v206[3]) < 0) {
    operator delete((void *)v206[1]);
  }
  *(std::string *)&v206[1] = v235;
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 0;
  v235.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v234) < 0) {
    operator delete((void *)v233);
  }
  sub_100003470(&v233, "--locale");
  siri::dialogengine::GetMultipleOptions();
  sub_10002A0BC((uint64_t *)v209);
  *(std::string *)unint64_t v209 = v235;
  memset(&v235, 0, sizeof(v235));
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v235;
  sub_100003B14((void ***)&__dst);
  if (SHIBYTE(v234) < 0) {
    operator delete((void *)v233);
  }
  sub_100003470(&v233, "--filename");
  siri::dialogengine::GetOption();
  if (SHIBYTE(v208[0]) < 0) {
    operator delete((void *)v207);
  }
  long long v207 = *(_OWORD *)&v235.__r_.__value_.__l.__data_;
  v208[0] = *((void *)&v235.__r_.__value_.__l + 2);
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 0;
  v235.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v234) < 0) {
    operator delete((void *)v233);
  }
  sub_100003470(&v233, "--outputDir");
  siri::dialogengine::GetOption();
  if (SHIBYTE(v208[3]) < 0) {
    operator delete((void *)v208[1]);
  }
  *(std::string *)&v208[1] = v235;
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 0;
  v235.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v234) < 0) {
    operator delete((void *)v233);
  }
  sub_100003470(&v233, "--config");
  siri::dialogengine::GetOption();
  if (SHIBYTE(v211[0]) < 0) {
    operator delete((void *)v210);
  }
  long long v210 = *(_OWORD *)&v235.__r_.__value_.__l.__data_;
  v211[0] = *((void *)&v235.__r_.__value_.__l + 2);
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 0;
  v235.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v234) < 0) {
    operator delete((void *)v233);
  }
  sub_100003470(&v233, "--swiftCaseStyle");
  siri::dialogengine::GetOption();
  if (SHIBYTE(v211[3]) < 0) {
    operator delete((void *)v211[1]);
  }
  *(std::string *)&v211[1] = v235;
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 0;
  v235.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v234) < 0) {
    operator delete((void *)v233);
  }
  if ((*((unsigned char *)&__p[0].__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (__p[0].__r_.__value_.__l.__size_ != 4)
    {
      if (__p[0].__r_.__value_.__l.__size_ != 5
        || (*(_DWORD *)__p[0].__r_.__value_.__l.__data_ == 1953067639
          ? (BOOL v17 = *(unsigned char *)(__p[0].__r_.__value_.__r.__words[0] + 4) == 101)
          : (BOOL v17 = 0),
            !v17))
      {
        if (__p[0].__r_.__value_.__l.__size_ == 15)
        {
          uint64_t v10 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
LABEL_90:
          std::string::size_type v18 = v10->__r_.__value_.__r.__words[0];
          uint64_t v19 = *(std::string::size_type *)((char *)v10->__r_.__value_.__r.__words + 7);
          if (v18 != 0x6672616D6D617267 || v19 != 0x7365727574616566) {
            goto LABEL_126;
          }
LABEL_281:
          uint64_t v3 = 0;
          goto LABEL_282;
        }
LABEL_126:
        sub_1000464B8(v199, (long long *)__p);
        uint64_t v3 = sub_10004EFD4((uint64_t)v199, v30);
        sub_100046810((uint64_t)v199);
        goto LABEL_282;
      }
LABEL_101:
      std::string::size_type v22 = HIBYTE(__p[1].__r_.__value_.__r.__words[2]);
      if ((__p[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v22 = __p[1].__r_.__value_.__l.__size_;
      }
      if (v22)
      {
        if (siri::dialogengine::DirExists())
        {
          uint64_t v23 = HIBYTE(v206[0]);
          if (v206[0] < 0) {
            uint64_t v23 = *((void *)&v205 + 1);
          }
          if (v23) {
            goto LABEL_114;
          }
          uint64_t v24 = HIBYTE(v204[3]);
          if (v204[3] < 0) {
            uint64_t v24 = v204[2];
          }
          if (v24) {
            goto LABEL_114;
          }
          uint64_t v25 = HIBYTE(v204[0]);
          if (v204[0] < 0) {
            uint64_t v25 = *((void *)&v203 + 1);
          }
          if (v25)
          {
LABEL_114:
            sub_10003D02C((uint64_t)__p, (uint64_t)&v235);
            char v26 = siri::dialogengine::DirExists();
            if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v235.__r_.__value_.__l.__data_);
            }
            if (v26)
            {
              sub_1000042E0(&std::cout, (uint64_t)"Source type: ", 13);
              uint64_t v27 = HIBYTE(v206[0]);
              if (v206[0] < 0) {
                uint64_t v27 = *((void *)&v205 + 1);
              }
              if (v27)
              {
                BOOL v28 = "dialog-metadata repository";
                uint64_t v29 = 26;
              }
              else
              {
                uint64_t v112 = HIBYTE(v204[3]);
                if (v204[3] < 0) {
                  uint64_t v112 = v204[2];
                }
                if (v112)
                {
                  BOOL v28 = "assistant repository";
                  uint64_t v29 = 20;
                }
                else
                {
                  uint64_t v113 = HIBYTE(v204[0]);
                  if (v204[0] < 0) {
                    uint64_t v113 = *((void *)&v203 + 1);
                  }
                  if (!v113)
                  {
LABEL_348:
                    std::ios_base::getloc((const std::ios_base *)((char *)&std::cout
                                                                + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0));
                    std::string v114 = std::locale::use_facet((const std::locale *)&v235, &std::ctype<char>::id);
                    ((void (*)(const std::locale::facet *, uint64_t))v114->__vftable[2].~facet_0)(v114, 10);
                    std::locale::~locale((std::locale *)&v235);
                    std::ostream::put();
                    std::ostream::flush();
                    unsigned __int8 v115 = sub_1000042E0(&std::cout, (uint64_t)"Source path: ", 13);
                    sub_10003D02C((uint64_t)__p, (uint64_t)&v235);
                    if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string v116 = &v235;
                    }
                    else {
                      std::string v116 = (std::string *)v235.__r_.__value_.__r.__words[0];
                    }
                    if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string::size_type v117 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      std::string::size_type v117 = v235.__r_.__value_.__l.__size_;
                    }
                    char v118 = sub_1000042E0(v115, (uint64_t)v116, v117);
                    std::ios_base::getloc((const std::ios_base *)((char *)v118 + *(void *)(*v118 - 24)));
                    uint64_t v119 = std::locale::use_facet((const std::locale *)&v233, &std::ctype<char>::id);
                    ((void (*)(const std::locale::facet *, uint64_t))v119->__vftable[2].~facet_0)(v119, 10);
                    std::locale::~locale((std::locale *)&v233);
                    std::ostream::put();
                    std::ostream::flush();
                    if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v235.__r_.__value_.__l.__data_);
                    }
                    sub_10003D1B0((uint64_t)__p, (uint64_t *)&v216);
                    uint64_t v121 = (long long *)*((void *)&v216 + 1);
                    std::string::size_type v120 = (long long *)v216;
                    if ((void)v216 == *((void *)&v216 + 1))
                    {
                      uint64_t v128 = HIBYTE(v206[0]);
                      if (v206[0] < 0) {
                        uint64_t v128 = *((void *)&v205 + 1);
                      }
                      if (v128) {
                        goto LABEL_384;
                      }
                      uint64_t v129 = HIBYTE(v204[3]);
                      if (v204[3] < 0) {
                        uint64_t v129 = v204[2];
                      }
                      if (v129)
                      {
LABEL_384:
                        std::string v130 = sub_10000F934(&std::cout);
                        std::string v131 = sub_1000042E0(v130, (uint64_t)"No categories defined in config file", 36);
                        sub_10000F934(v131);
                        goto LABEL_578;
                      }
                      uint64_t v195 = HIBYTE(v206[3]);
                      if (v206[3] < 0) {
                        uint64_t v195 = v206[2];
                      }
                      uint64_t v133 = v216;
                      if (!v195) {
                        goto LABEL_420;
                      }
                    }
                    else
                    {
                      if (v206[3] >= 0) {
                        uint64_t v122 = HIBYTE(v206[3]);
                      }
                      else {
                        uint64_t v122 = v206[2];
                      }
                      if (!v122) {
                        goto LABEL_420;
                      }
                      if (v206[3] >= 0) {
                        char v123 = &v206[1];
                      }
                      else {
                        char v123 = (void *)v206[1];
                      }
                      uint64_t v124 = v216;
                      while (1)
                      {
                        uint64_t v125 = *(unsigned __int8 *)(v124 + 23);
                        uint64_t v126 = (v125 & 0x80u) == 0 ? *(unsigned __int8 *)(v124 + 23) : *(void *)(v124 + 8);
                        if (v126 != v122) {
                          break;
                        }
                        if ((v125 & 0x80) != 0)
                        {
                          if (memcmp(*(const void **)v124, v123, *(void *)(v124 + 8))) {
                            break;
                          }
                        }
                        else if (*(unsigned char *)(v124 + 23))
                        {
                          uint64_t v127 = 0;
                          while (*(unsigned __int8 *)(v124 + v127) == *((unsigned __int8 *)v123 + v127))
                          {
                            if (v125 == ++v127) {
                              goto LABEL_376;
                            }
                          }
                          break;
                        }
LABEL_376:
                        v124 += 32;
                        if ((long long *)v124 == v121) {
                          goto LABEL_409;
                        }
                      }
                      if ((long long *)v124 == v121)
                      {
LABEL_409:
                        std::string::size_type v120 = v121;
                        uint64_t v133 = (uint64_t)v121;
                      }
                      else
                      {
                        uint64_t v132 = v124 + 32;
                        if ((long long *)(v124 + 32) != v121)
                        {
                          uint64_t v133 = v124;
                          while (1)
                          {
                            uint64_t v134 = v124;
                            uint64_t v124 = v132;
                            uint64_t v135 = *(unsigned __int8 *)(v134 + 55);
                            if ((v135 & 0x80u) == 0) {
                              uint64_t v136 = *(unsigned __int8 *)(v134 + 55);
                            }
                            else {
                              uint64_t v136 = *(void *)(v134 + 40);
                            }
                            uint64_t v137 = HIBYTE(v206[3]);
                            if (v206[3] < 0) {
                              uint64_t v137 = v206[2];
                            }
                            if (v136 != v137) {
                              goto LABEL_407;
                            }
                            int v138 = v206[3] >= 0 ? &v206[1] : (void *)v206[1];
                            if ((v135 & 0x80) == 0) {
                              break;
                            }
                            if (!memcmp(*(const void **)v124, v138, *(void *)(v134 + 40))) {
                              goto LABEL_404;
                            }
LABEL_407:
                            uint64_t v132 = v124 + 32;
                            if ((long long *)(v124 + 32) == v121)
                            {
                              std::string::size_type v120 = (long long *)*((void *)&v216 + 1);
                              goto LABEL_412;
                            }
                          }
                          if (*(unsigned char *)(v134 + 55))
                          {
                            uint64_t v139 = 0;
                            while (*(unsigned __int8 *)(v124 + v139) == *((unsigned __int8 *)v138 + v139))
                            {
                              if (v135 == ++v139) {
                                goto LABEL_404;
                              }
                            }
                            goto LABEL_407;
                          }
LABEL_404:
                          if (*(char *)(v133 + 23) < 0) {
                            operator delete(*(void **)v133);
                          }
                          long long v140 = *(_OWORD *)v124;
                          *(void *)(v133 + 16) = *(void *)(v124 + 16);
                          *(_OWORD *)uint64_t v133 = v140;
                          *(unsigned char *)(v134 + 55) = 0;
                          *(unsigned char *)uint64_t v124 = 0;
                          *(unsigned char *)(v133 + 24) = *(unsigned char *)(v134 + 56);
                          v133 += 32;
                          goto LABEL_407;
                        }
                        std::string::size_type v120 = v121;
                        uint64_t v133 = v124;
                      }
                    }
LABEL_412:
                    sub_1000444D0((uint64_t)&v216, v133, v120);
                    if ((void)v216 != *((void *)&v216 + 1))
                    {
                      std::ios_base::getloc((const std::ios_base *)((char *)&std::cout
                                                                  + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0));
                      int v143 = std::locale::use_facet((const std::locale *)&v235, &std::ctype<char>::id);
                      ((void (*)(const std::locale::facet *, uint64_t))v143->__vftable[2].~facet_0)(v143, 10);
                      std::locale::~locale((std::locale *)&v235);
                      std::ostream::put();
                      std::ostream::flush();
                      int v144 = sub_1000042E0(&std::cout, (uint64_t)"Processing only the specified category: ", 40);
                      if (v206[3] >= 0) {
                        int v145 = &v206[1];
                      }
                      else {
                        int v145 = (void *)v206[1];
                      }
                      if (v206[3] >= 0) {
                        uint64_t v146 = HIBYTE(v206[3]);
                      }
                      else {
                        uint64_t v146 = v206[2];
                      }
                      int v147 = sub_1000042E0(v144, (uint64_t)v145, v146);
                      std::ios_base::getloc((const std::ios_base *)((char *)v147 + *(void *)(*v147 - 24)));
                      int v148 = std::locale::use_facet((const std::locale *)&v235, &std::ctype<char>::id);
                      ((void (*)(const std::locale::facet *, uint64_t))v148->__vftable[2].~facet_0)(v148, 10);
                      std::locale::~locale((std::locale *)&v235);
                      std::ostream::put();
                      std::ostream::flush();
LABEL_420:
                      if (v209[26] || *(void *)v209 == *(void *)&v209[8])
                      {
                        uint64_t v215 = 0;
                        long long v214 = 0;
                        v213.__locale_ = (std::locale::__imp *)&v214;
                        std::string::size_type v196 = (long long *)*((void *)&v216 + 1);
                        long long v149 = (long long *)v216;
                        if ((void)v216 != *((void *)&v216 + 1))
                        {
                          do
                          {
                            if (*((char *)v149 + 23) < 0)
                            {
                              sub_100003600(&v235, *(void **)v149, *((void *)v149 + 1));
                            }
                            else
                            {
                              long long v150 = *v149;
                              v235.__r_.__value_.__r.__words[2] = *((void *)v149 + 2);
                              *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v150;
                            }
                            LOBYTE(v236[0]) = *((unsigned char *)v149 + 24);
                            sub_1000445DC((uint64_t)__p, &v233);
                            v198 = v149;
                            siri::dialogengine::ListDir();
                            std::string::size_type v151 = __dst.__r_.__value_.__l.__size_;
                            for (std::string::size_type j = __dst.__r_.__value_.__r.__words[0]; j != v151; j += 24)
                            {
                              if (*(char *)(j + 23) < 0)
                              {
                                sub_100003600(&v231, *(void **)j, *(void *)(j + 8));
                              }
                              else
                              {
                                long long v153 = *(_OWORD *)j;
                                v231.__r_.__value_.__r.__words[2] = *(void *)(j + 16);
                                *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v153;
                              }
                              siri::dialogengine::JoinPath();
                              if (siri::dialogengine::DirExists())
                              {
                                sub_10000A2C0((uint64_t **)&v213, (const void **)&v231.__r_.__value_.__l.__data_, (uint64_t)&v231);
                                siri::dialogengine::ListDir();
                                v154 = (long long *)*((void *)&v227 + 1);
                                for (uint64_t k = (long long *)v227; k != v154; uint64_t k = (long long *)((char *)k + 24))
                                {
                                  if (*((char *)k + 23) < 0)
                                  {
                                    sub_100003600(&v225, *(void **)k, *((void *)k + 1));
                                  }
                                  else
                                  {
                                    long long v156 = *k;
                                    uint64_t v226 = *((void *)k + 2);
                                    long long v225 = v156;
                                  }
                                  siri::dialogengine::JoinPath();
                                  if (siri::dialogengine::DirExists())
                                  {
                                    if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                      std::string::size_type v157 = HIBYTE(v231.__r_.__value_.__r.__words[2]);
                                    }
                                    else {
                                      std::string::size_type v157 = v231.__r_.__value_.__l.__size_;
                                    }
                                    sub_100008CC4((uint64_t)&v220, v157 + 1);
                                    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                      v158 = &v220;
                                    }
                                    else {
                                      v158 = (std::string *)v220.__r_.__value_.__r.__words[0];
                                    }
                                    if (v157)
                                    {
                                      if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                        uint64_t v159 = &v231;
                                      }
                                      else {
                                        uint64_t v159 = (std::string *)v231.__r_.__value_.__r.__words[0];
                                      }
                                      memmove(v158, v159, v157);
                                    }
                                    *(_WORD *)((char *)&v158->__r_.__value_.__l.__data_ + v157) = 95;
                                    siri::dialogengine::StringToUpper();
                                    if (v219 >= 0) {
                                      std::string v160 = (const std::string::value_type *)&v218;
                                    }
                                    else {
                                      std::string v160 = (const std::string::value_type *)v218;
                                    }
                                    if (v219 >= 0) {
                                      std::string::size_type v161 = HIBYTE(v219);
                                    }
                                    else {
                                      std::string::size_type v161 = *((void *)&v218 + 1);
                                    }
                                    std::string v162 = std::string::append(&v220, v160, v161);
                                    long long v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
                                    int64_t v222 = v162->__r_.__value_.__r.__words[2];
                                    long long v221 = v163;
                                    v162->__r_.__value_.__l.__size_ = 0;
                                    v162->__r_.__value_.__r.__words[2] = 0;
                                    v162->__r_.__value_.__r.__words[0] = 0;
                                    sub_100039104((uint64_t **)&v213, (const void **)&v221, (uint64_t)&v221);
                                    if (SHIBYTE(v222) < 0) {
                                      operator delete((void *)v221);
                                    }
                                    if (SHIBYTE(v219) < 0) {
                                      operator delete((void *)v218);
                                    }
                                    if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
                                      operator delete(v220.__r_.__value_.__l.__data_);
                                    }
                                  }
                                  if (SHIBYTE(v224) < 0) {
                                    operator delete((void *)v223);
                                  }
                                  if (SHIBYTE(v226) < 0) {
                                    operator delete((void *)v225);
                                  }
                                }
                                *(void *)&long long v225 = &v227;
                                sub_100003B14((void ***)&v225);
                              }
                              if (SHIBYTE(v230) < 0) {
                                operator delete((void *)v229);
                              }
                              if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v231.__r_.__value_.__l.__data_);
                              }
                            }
                            v231.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            sub_100003B14((void ***)&v231);
                            if (SHIBYTE(v234) < 0) {
                              operator delete((void *)v233);
                            }
                            if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v235.__r_.__value_.__l.__data_);
                            }
                            long long v149 = v198 + 2;
                          }
                          while (v198 + 2 != v196);
                        }
                      }
                      else
                      {
                        sub_100044BD4((uint64_t)&v213, *(const void ***)v209, *(const void ***)&v209[8]);
                      }
                      locale = v213.__locale_;
                      if ((char **)v213.__locale_ != &v214)
                      {
                        do
                        {
                          if (*((char *)locale + 55) < 0)
                          {
                            sub_100003600(&v221, *((void **)locale + 4), *((void *)locale + 5));
                          }
                          else
                          {
                            long long v221 = *((_OWORD *)locale + 2);
                            int64_t v222 = *((void *)locale + 6);
                          }
                          *((void *)&v225 + 1) = 0;
                          uint64_t v226 = 0;
                          *(void *)&long long v225 = (char *)&v225 + 8;
                          std::string::size_type v165 = (long long *)*((void *)&v216 + 1);
                          std::string v166 = (long long *)v216;
                          if ((void)v216 == *((void *)&v216 + 1))
                          {
                            std::string::size_type v186 = 0;
                          }
                          else
                          {
                            do
                            {
                              if (*((char *)v166 + 23) < 0)
                              {
                                sub_100003600(&v235, *(void **)v166, *((void *)v166 + 1));
                              }
                              else
                              {
                                long long v167 = *v166;
                                v235.__r_.__value_.__r.__words[2] = *((void *)v166 + 2);
                                *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v167;
                              }
                              LOBYTE(v236[0]) = *((unsigned char *)v166 + 24);
                              siri::dialogengine::DialogMetadataWriter::DialogMetadataWriter((siri::dialogengine::DialogMetadataWriter *)&v220);
                              siri::dialogengine::DialogMetadataWriter::SetAllowUnbounded((siri::dialogengine::DialogMetadataWriter *)&v220, v236[0]);
                              std::ios_base::getloc((const std::ios_base *)((char *)&std::cout
                                                                          + (unint64_t)std::cout.__vftable[-2].~basic_ostream_0));
                              std::string v168 = std::locale::use_facet((const std::locale *)&v233, &std::ctype<char>::id);
                              ((void (*)(const std::locale::facet *, uint64_t))v168->__vftable[2].~facet_0)(v168, 10);
                              std::locale::~locale((std::locale *)&v233);
                              std::ostream::put();
                              std::ostream::flush();
                              std::operator+<char>();
                              v169 = std::string::append(&v231, " for locale ");
                              long long v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
                              __dst.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
                              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v170;
                              v169->__r_.__value_.__l.__size_ = 0;
                              v169->__r_.__value_.__r.__words[2] = 0;
                              v169->__r_.__value_.__r.__words[0] = 0;
                              if (v222 >= 0) {
                                std::string v171 = (const std::string::value_type *)&v221;
                              }
                              else {
                                std::string v171 = (const std::string::value_type *)v221;
                              }
                              if (v222 >= 0) {
                                std::string::size_type v172 = HIBYTE(v222);
                              }
                              else {
                                std::string::size_type v172 = *((void *)&v221 + 1);
                              }
                              v173 = std::string::append(&__dst, v171, v172);
                              long long v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
                              int64_t v234 = v173->__r_.__value_.__r.__words[2];
                              long long v233 = v174;
                              v173->__r_.__value_.__l.__size_ = 0;
                              v173->__r_.__value_.__r.__words[2] = 0;
                              v173->__r_.__value_.__r.__words[0] = 0;
                              if (v234 >= 0) {
                                std::string v175 = &v233;
                              }
                              else {
                                std::string v175 = (long long *)v233;
                              }
                              if (v234 >= 0) {
                                uint64_t v176 = HIBYTE(v234);
                              }
                              else {
                                uint64_t v176 = *((void *)&v233 + 1);
                              }
                              v177 = sub_1000042E0(&std::cout, (uint64_t)v175, v176);
                              std::ios_base::getloc((const std::ios_base *)((char *)v177 + *(void *)(*v177 - 24)));
                              std::string::size_type v178 = std::locale::use_facet((const std::locale *)&v229, &std::ctype<char>::id);
                              ((void (*)(const std::locale::facet *, uint64_t))v178->__vftable[2].~facet_0)(v178, 10);
                              std::locale::~locale((std::locale *)&v229);
                              std::ostream::put();
                              std::ostream::flush();
                              if (SHIBYTE(v234) < 0) {
                                operator delete((void *)v233);
                              }
                              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(__dst.__r_.__value_.__l.__data_);
                              }
                              if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v231.__r_.__value_.__l.__data_);
                              }
                              sub_1000445DC((uint64_t)__p, &v233);
                              siri::dialogengine::GetLocaleLanguage();
                              siri::dialogengine::StringToLower();
                              if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v231.__r_.__value_.__l.__data_);
                              }
                              siri::dialogengine::GetLocaleCountry();
                              siri::dialogengine::StringToLower();
                              if (SHIBYTE(v230) < 0) {
                                operator delete((void *)v229);
                              }
                              siri::dialogengine::JoinPath();
                              std::string::size_type v179 = HIBYTE(v231.__r_.__value_.__r.__words[2]);
                              if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                std::string::size_type v179 = v231.__r_.__value_.__l.__size_;
                              }
                              if (v179)
                              {
                                siri::dialogengine::JoinPath();
                                if (SHIBYTE(v224) < 0) {
                                  operator delete((void *)v223);
                                }
                                long long v223 = v229;
                                uint64_t v224 = v230;
                                if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                  std::string::size_type v180 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
                                }
                                else {
                                  std::string::size_type v180 = v235.__r_.__value_.__l.__size_;
                                }
                                sub_100008CC4((uint64_t)&v227, v180 + 4);
                                if (v228 >= 0) {
                                  int v181 = &v227;
                                }
                                else {
                                  int v181 = (long long *)v227;
                                }
                                if (v180)
                                {
                                  if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    std::string::size_type v182 = &v235;
                                  }
                                  else {
                                    std::string::size_type v182 = (std::string *)v235.__r_.__value_.__r.__words[0];
                                  }
                                  memmove(v181, v182, v180);
                                }
                              }
                              else
                              {
                                if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                  std::string::size_type v180 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
                                }
                                else {
                                  std::string::size_type v180 = v235.__r_.__value_.__l.__size_;
                                }
                                sub_100008CC4((uint64_t)&v227, v180 + 4);
                                if (v228 >= 0) {
                                  int v181 = &v227;
                                }
                                else {
                                  int v181 = (long long *)v227;
                                }
                                if (v180)
                                {
                                  if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    int v183 = &v235;
                                  }
                                  else {
                                    int v183 = (std::string *)v235.__r_.__value_.__r.__words[0];
                                  }
                                  memmove(v181, v183, v180);
                                }
                              }
                              strcpy((char *)v181 + v180, ".voc");
                              siri::dialogengine::JoinPath();
                              if (SHIBYTE(v224) < 0) {
                                operator delete((void *)v223);
                              }
                              long long v223 = v229;
                              uint64_t v224 = v230;
                              HIBYTE(v230) = 0;
                              LOBYTE(v229) = 0;
                              if (SHIBYTE(v228) < 0) {
                                operator delete((void *)v227);
                              }
                              if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v231.__r_.__value_.__l.__data_);
                              }
                              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(__dst.__r_.__value_.__l.__data_);
                              }
                              if (SHIBYTE(v234) < 0) {
                                operator delete((void *)v233);
                              }
                              uint64_t v184 = HIBYTE(v224);
                              char v185 = HIBYTE(v224);
                              if (v224 < 0) {
                                uint64_t v184 = *((void *)&v223 + 1);
                              }
                              if (v184)
                              {
                                sub_100044C58((const void **)&v223, (siri::dialogengine::DialogMetadataWriter *)&v220, (uint64_t **)&v225, (uint64_t)&v221, (uint64_t)__p);
                                siri::dialogengine::GetDialogMetadataFilename();
                                siri::dialogengine::JoinPath();
                                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(__dst.__r_.__value_.__l.__data_);
                                }
                                siri::dialogengine::DialogMetadataWriter::Save();
                                if (SHIBYTE(v234) < 0) {
                                  operator delete((void *)v233);
                                }
                                char v185 = HIBYTE(v224);
                              }
                              if (v185 < 0) {
                                operator delete((void *)v223);
                              }
                              siri::dialogengine::DialogMetadataWriter::~DialogMetadataWriter((siri::dialogengine::DialogMetadataWriter *)&v220);
                              if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v235.__r_.__value_.__l.__data_);
                              }
                              v166 += 2;
                            }
                            while (v166 != v165);
                            std::string::size_type v186 = (char *)*((void *)&v225 + 1);
                          }
                          sub_10000A3E0((uint64_t)&v225, v186);
                          if (SHIBYTE(v222) < 0) {
                            operator delete((void *)v221);
                          }
                          v187 = (char *)*((void *)locale + 1);
                          if (v187)
                          {
                            do
                            {
                              std::string::size_type v188 = (char **)v187;
                              v187 = *(char **)v187;
                            }
                            while (v187);
                          }
                          else
                          {
                            do
                            {
                              std::string::size_type v188 = (char **)*((void *)locale + 2);
                              BOOL v17 = *v188 == (char *)locale;
                              locale = (std::locale::__imp *)v188;
                            }
                            while (!v17);
                          }
                          locale = (std::locale::__imp *)v188;
                        }
                        while (v188 != &v214);
                      }
                      sub_10000A3E0((uint64_t)&v213, v214);
                      uint64_t v3 = 1;
                      goto LABEL_579;
                    }
                    v189 = sub_10000F934(&std::cout);
                    long long v190 = sub_1000042E0(v189, (uint64_t)"Error: Specified category '", 27);
                    if (v206[3] >= 0) {
                      v191 = &v206[1];
                    }
                    else {
                      v191 = (void *)v206[1];
                    }
                    if (v206[3] >= 0) {
                      uint64_t v192 = HIBYTE(v206[3]);
                    }
                    else {
                      uint64_t v192 = v206[2];
                    }
                    v193 = sub_1000042E0(v190, (uint64_t)v191, v192);
                    std::string::size_type v194 = sub_1000042E0(v193, (uint64_t)"' not found in config file.", 27);
                    sub_10000F934(v194);
LABEL_578:
                    uint64_t v3 = 0;
LABEL_579:
                    v235.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216;
                    sub_1000468EC((void ***)&v235);
                    goto LABEL_282;
                  }
                  BOOL v28 = "source files";
                  uint64_t v29 = 12;
                }
              }
              sub_1000042E0(&std::cout, (uint64_t)v28, v29);
              goto LABEL_348;
            }
            uint64_t v91 = sub_1000042E0(&std::cout, (uint64_t)"The source directory does not exist: ", 37);
            sub_10003D02C((uint64_t)__p, (uint64_t)&v235);
            if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v92 = &v235;
            }
            else {
              long long v92 = (std::string *)v235.__r_.__value_.__r.__words[0];
            }
            if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v93 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v93 = v235.__r_.__value_.__l.__size_;
            }
            std::string::size_type v94 = sub_1000042E0(v91, (uint64_t)v92, v93);
            std::ios_base::getloc((const std::ios_base *)((char *)v94 + *(void *)(*v94 - 24)));
            char v95 = std::locale::use_facet((const std::locale *)&v233, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10);
            std::locale::~locale((std::locale *)&v233);
            std::ostream::put();
            std::ostream::flush();
            if ((SHIBYTE(v235.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_281;
            }
            int v16 = (void *)v235.__r_.__value_.__r.__words[0];
LABEL_81:
            operator delete(v16);
            goto LABEL_281;
          }
          int v141 = sub_1000042E0(&std::cout, (uint64_t)"No source dir specified: --sourceDir or --metadataDir or --assistantDir", 71);
          std::ios_base::getloc((const std::ios_base *)((char *)v141 + *(void *)(*v141 - 24)));
          int v142 = std::locale::use_facet((const std::locale *)&v235, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v142->__vftable[2].~facet_0)(v142, 10);
          std::locale::~locale((std::locale *)&v235);
          std::ostream::put();
        }
        else
        {
          std::string::size_type v81 = sub_1000042E0(&std::cout, (uint64_t)"The --templateDir directory does not exist: ", 44);
          if ((__p[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int data = &__p[1];
          }
          else {
            int data = (std::string *)__p[1].__r_.__value_.__l.__data_;
          }
          if ((__p[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v83 = HIBYTE(__p[1].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v83 = __p[1].__r_.__value_.__l.__size_;
          }
          long long v84 = sub_1000042E0(v81, (uint64_t)data, v83);
          std::ios_base::getloc((const std::ios_base *)((char *)v84 + *(void *)(*v84 - 24)));
          int v85 = std::locale::use_facet((const std::locale *)&v235, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
          std::locale::~locale((std::locale *)&v235);
          std::ostream::put();
        }
      }
      else
      {
        uint64_t v74 = sub_1000042E0(&std::cout, (uint64_t)"No --templateDir specified", 26);
        std::ios_base::getloc((const std::ios_base *)((char *)v74 + *(void *)(*v74 - 24)));
        std::string::size_type v75 = std::locale::use_facet((const std::locale *)&v235, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10);
        std::locale::~locale((std::locale *)&v235);
        std::ostream::put();
      }
LABEL_280:
      std::ostream::flush();
      goto LABEL_281;
    }
    if (*(_DWORD *)__p[0].__r_.__value_.__l.__data_ == 1684104562)
    {
LABEL_127:
      if (SHIBYTE(v208[0]) < 0)
      {
        sub_100003600(&v235, (void *)v207, *((unint64_t *)&v207 + 1));
      }
      else
      {
        *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v207;
        v235.__r_.__value_.__r.__words[2] = v208[0];
      }
      std::string::size_type v76 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
      char v77 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
      std::string::size_type v78 = v235.__r_.__value_.__l.__size_;
      if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v79 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v79 = v235.__r_.__value_.__l.__size_;
      }
      if (!v79)
      {
        if (*(void *)v209 == *(void *)&v209[8])
        {
          sub_100003470(&v233, (char *)&unk_10006DFE2);
        }
        else if (*(char *)(*(void *)v209 + 23) < 0)
        {
          sub_100003600(&v233, **(void ***)v209, *(void *)(*(void *)v209 + 8));
        }
        else
        {
          long long v80 = **(_OWORD **)v209;
          int64_t v234 = *(void *)(*(void *)v209 + 16);
          long long v233 = v80;
        }
        siri::dialogengine::GetDialogMetadataFilename();
        siri::dialogengine::JoinPath();
        if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v235.__r_.__value_.__l.__data_);
        }
        std::string v235 = __dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
        __dst.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v231.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v234) < 0) {
          operator delete((void *)v233);
        }
        std::string::size_type v76 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
        std::string::size_type v78 = v235.__r_.__value_.__l.__size_;
        char v77 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
      }
      if (v77 < 0) {
        std::string::size_type v76 = v78;
      }
      if (v76)
      {
        if (siri::dialogengine::FileExists())
        {
          siri::dialogengine::DialogMetadataReader::DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)&v231);
          uint64_t v3 = siri::dialogengine::DialogMetadataReader::Load();
          if (v3)
          {
            siri::dialogengine::BaseName();
            AllowUnbounded = (siri::dialogengine *)siri::dialogengine::DialogMetadataReader::GetAllowUnbounded((siri::dialogengine::DialogMetadataReader *)&v231);
            siri::dialogengine::StringFromBool((uint64_t *)&__dst, AllowUnbounded, v99);
            std::string::size_type v100 = (const char *)&v233;
            if (v234 < 0) {
              std::string::size_type v100 = (const char *)v233;
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_dst = &__dst;
            }
            else {
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            printf("; %s (allowUnbounded = %s)\n", v100, (const char *)p_dst);
            sub_10003FBA0((siri::dialogengine::DialogMetadataReader *)&v231, __stdoutp);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v234) < 0) {
              operator delete((void *)v233);
            }
          }
          else
          {
            std::string v107 = sub_1000042E0(&std::cout, (uint64_t)"Failed to read file: ", 21);
            if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v108 = &v235;
            }
            else {
              char v108 = (std::string *)v235.__r_.__value_.__r.__words[0];
            }
            if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v109 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v109 = v235.__r_.__value_.__l.__size_;
            }
            char v110 = sub_1000042E0(v107, (uint64_t)v108, v109);
            std::ios_base::getloc((const std::ios_base *)((char *)v110 + *(void *)(*v110 - 24)));
            long long v111 = std::locale::use_facet((const std::locale *)&v233, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v111->__vftable[2].~facet_0)(v111, 10);
            std::locale::~locale((std::locale *)&v233);
            std::ostream::put();
            std::ostream::flush();
          }
          siri::dialogengine::DialogMetadataReader::~DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)&v231);
          goto LABEL_337;
        }
        std::string v103 = sub_1000042E0(&std::cout, (uint64_t)"The metadata file does not exist: ", 34);
        if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v104 = &v235;
        }
        else {
          std::string v104 = (std::string *)v235.__r_.__value_.__r.__words[0];
        }
        if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v105 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v105 = v235.__r_.__value_.__l.__size_;
        }
        char v102 = sub_1000042E0(v103, (uint64_t)v104, v105);
      }
      else
      {
        char v102 = sub_1000042E0(&std::cout, (uint64_t)"No metdata file specified. Try --filename.", 42);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)v102 + *(void *)(*v102 - 24)));
      std::locale v106 = std::locale::use_facet((const std::locale *)&v233, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 10);
      std::locale::~locale((std::locale *)&v233);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v3 = 0;
LABEL_337:
      if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v235.__r_.__value_.__l.__data_);
      }
      goto LABEL_282;
    }
    if (*(_DWORD *)__p[0].__r_.__value_.__l.__data_ != 2037411683) {
      goto LABEL_126;
    }
  }
  else
  {
    if (HIBYTE(__p[0].__r_.__value_.__r.__words[2]) != 4)
    {
      if (HIBYTE(__p[0].__r_.__value_.__r.__words[2]) != 5)
      {
        if (HIBYTE(__p[0].__r_.__value_.__r.__words[2]) == 15)
        {
          uint64_t v10 = __p;
          goto LABEL_90;
        }
        goto LABEL_126;
      }
      if (LODWORD(__p[0].__r_.__value_.__l.__data_) != 1953067639 || __p[0].__r_.__value_.__s.__data_[4] != 101) {
        goto LABEL_126;
      }
      goto LABEL_101;
    }
    if (LODWORD(__p[0].__r_.__value_.__l.__data_) != 2037411683)
    {
      if (LODWORD(__p[0].__r_.__value_.__l.__data_) != 1684104562) {
        goto LABEL_126;
      }
      goto LABEL_127;
    }
  }
  std::string::size_type v31 = HIBYTE(__p[1].__r_.__value_.__r.__words[2]);
  if ((__p[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v31 = __p[1].__r_.__value_.__l.__size_;
  }
  if (!v31)
  {
    uint64_t v86 = sub_1000042E0(&std::cout, (uint64_t)"No template directory specified. Try --templateDir.", 51);
    std::ios_base::getloc((const std::ios_base *)((char *)v86 + *(void *)(*v86 - 24)));
    long long v87 = std::locale::use_facet((const std::locale *)&v235, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v87->__vftable[2].~facet_0)(v87, 10);
    std::locale::~locale((std::locale *)&v235);
    std::ostream::put();
    goto LABEL_280;
  }
  uint64_t v32 = HIBYTE(v208[3]);
  if (v208[3] < 0) {
    uint64_t v32 = v208[2];
  }
  if (!v32)
  {
    std::string v88 = sub_1000042E0(&std::cout, (uint64_t)"No output directory specified. Try --outputDir.", 47);
    std::ios_base::getloc((const std::ios_base *)((char *)v88 + *(void *)(*v88 - 24)));
    std::string v89 = std::locale::use_facet((const std::locale *)&v235, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 10);
    std::locale::~locale((std::locale *)&v235);
    std::ostream::put();
    goto LABEL_280;
  }
  sub_100003470(&v233, "metadata");
  siri::dialogengine::JoinPath();
  if (SHIBYTE(v234) < 0) {
    operator delete((void *)v233);
  }
  siri::dialogengine::ListDir();
  int v33 = (long long *)*((void *)&v233 + 1);
  uint64_t v34 = (long long *)v233;
  if ((void)v233 == *((void *)&v233 + 1))
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v233;
    sub_100003B14((void ***)&__dst);
    goto LABEL_294;
  }
  char v35 = 0;
  char v197 = (long long *)*((void *)&v233 + 1);
  do
  {
    if (*((char *)v34 + 23) < 0)
    {
      sub_100003600(&__dst, *(void **)v34, *((void *)v34 + 1));
    }
    else
    {
      long long v36 = *v34;
      __dst.__r_.__value_.__r.__words[2] = *((void *)v34 + 2);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v36;
    }
    sub_100003470(&v231, ".dtag");
    char v37 = siri::dialogengine::StringContains();
    char v38 = v37;
    if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v231.__r_.__value_.__l.__data_);
      if ((v38 & 1) == 0) {
        goto LABEL_257;
      }
    }
    else if ((v37 & 1) == 0)
    {
      goto LABEL_257;
    }
    siri::dialogengine::RemoveExtension();
    siri::dialogengine::BaseName();
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    std::string __dst = v231;
    *((unsigned char *)&v231.__r_.__value_.__s + 23) = 0;
    v231.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v230) < 0) {
      operator delete((void *)v229);
    }
    uint64_t v39 = HIBYTE(v206[3]);
    if (v206[3] >= 0) {
      uint64_t v40 = HIBYTE(v206[3]);
    }
    else {
      uint64_t v40 = v206[2];
    }
    if (!v40) {
      goto LABEL_167;
    }
    std::string::size_type v41 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v41 = __dst.__r_.__value_.__l.__size_;
    }
    if (v40 == v41)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v42 = &__dst;
      }
      else {
        long long v42 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((v206[3] & 0x8000000000000000) != 0)
      {
        if (memcmp((const void *)v206[1], v42, v206[2])) {
          goto LABEL_257;
        }
LABEL_167:
        sub_100003470(&v225, "en");
        siri::dialogengine::GetDialogMetadataFilename();
        siri::dialogengine::JoinPath();
        siri::dialogengine::DirName();
        if (SHIBYTE(v230) < 0) {
          operator delete((void *)v229);
        }
        if (SHIBYTE(v228) < 0) {
          operator delete((void *)v227);
        }
        if (SHIBYTE(v226) < 0) {
          operator delete((void *)v225);
        }
        if (siri::dialogengine::PathExists())
        {
          siri::dialogengine::ListDir();
          unint64_t v45 = (long long *)*((void *)&v229 + 1);
          for (uint64_t m = (long long *)v229; m != v45; uint64_t m = (long long *)((char *)m + 24))
          {
            if (*((char *)m + 23) < 0)
            {
              sub_100003600(&v227, *(void **)m, *((void *)m + 1));
            }
            else
            {
              long long v46 = *m;
              uint64_t v228 = *((void *)m + 2);
              long long v227 = v46;
            }
            siri::dialogengine::JoinPath();
            siri::dialogengine::DialogMetadataReader::DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)v212);
            if (siri::dialogengine::DialogMetadataReader::Load())
            {
              siri::dialogengine::BaseName();
              siri::dialogengine::StringSplit();
              if (*(char *)(v221 + 23) < 0)
              {
                sub_100003600(&v223, *(void **)v221, *(void *)(v221 + 8));
              }
              else
              {
                long long v47 = *(_OWORD *)v221;
                uint64_t v224 = *(void *)(v221 + 16);
                long long v223 = v47;
              }
              *(void *)&long long v218 = &v221;
              sub_100003B14((void ***)&v218);
              if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v220.__r_.__value_.__l.__data_);
              }
              siri::dialogengine::GetLocaleLanguage();
              siri::dialogengine::GetLocaleCountry();
              siri::dialogengine::JoinPath();
              siri::dialogengine::JoinPath();
              if (SHIBYTE(v217) < 0) {
                operator delete((void *)v216);
              }
              std::string::size_type v53 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
              if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v53 = v220.__r_.__value_.__l.__size_;
              }
              if (v53)
              {
                siri::dialogengine::StringToLower();
                siri::dialogengine::JoinPath();
                if (SHIBYTE(v219) < 0) {
                  operator delete((void *)v218);
                }
                long long v218 = v216;
                uint64_t v219 = v217;
                HIBYTE(v217) = 0;
                LOBYTE(v216) = 0;
                if (SHIBYTE(v215) < 0) {
                  operator delete(v213.__locale_);
                }
              }
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v54 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v54 = __dst.__r_.__value_.__l.__size_;
              }
              sub_100008CC4((uint64_t)&v213, v54 + 4);
              if (v215 >= 0) {
                uint64_t v55 = &v213;
              }
              else {
                uint64_t v55 = v213.__locale_;
              }
              if (v54)
              {
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v56 = &__dst;
                }
                else {
                  int v56 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                }
                memmove(v55, v56, v54);
              }
              strcpy((char *)v55 + v54, ".voc");
              siri::dialogengine::JoinPath();
              if (SHIBYTE(v215) < 0) {
                operator delete(v213.__locale_);
              }
              siri::dialogengine::CreateDir();
              if (v217 >= 0) {
                uint64_t v57 = (const char *)&v216;
              }
              else {
                uint64_t v57 = (const char *)v216;
              }
              uint64_t v58 = fopen(v57, "w");
              if (v58)
              {
                sub_10003FBA0((siri::dialogengine::DialogMetadataReader *)v212, v58);
                std::string v59 = sub_1000042E0(&std::cout, (uint64_t)"Wrote ", 6);
                if (v217 >= 0) {
                  std::string v60 = &v216;
                }
                else {
                  std::string v60 = (long long *)v216;
                }
                if (v217 >= 0) {
                  uint64_t v61 = HIBYTE(v217);
                }
                else {
                  uint64_t v61 = *((void *)&v216 + 1);
                }
                long long v62 = sub_1000042E0(v59, (uint64_t)v60, v61);
                std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
                unint64_t v63 = std::locale::use_facet(&v213, &std::ctype<char>::id);
                ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
                std::locale::~locale(&v213);
                std::ostream::put();
                std::ostream::flush();
                fclose(v58);
                char v35 = 1;
              }
              else
              {
                std::string v64 = sub_1000042E0(&std::cout, (uint64_t)"Failed to write to file: ", 25);
                if (v217 >= 0) {
                  uint64_t v65 = &v216;
                }
                else {
                  uint64_t v65 = (long long *)v216;
                }
                if (v217 >= 0) {
                  uint64_t v66 = HIBYTE(v217);
                }
                else {
                  uint64_t v66 = *((void *)&v216 + 1);
                }
                uint64_t v67 = sub_1000042E0(v64, (uint64_t)v65, v66);
                std::ios_base::getloc((const std::ios_base *)((char *)v67 + *(void *)(*v67 - 24)));
                long long v68 = std::locale::use_facet(&v213, &std::ctype<char>::id);
                ((void (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 10);
                std::locale::~locale(&v213);
                std::ostream::put();
                std::ostream::flush();
              }
              if (SHIBYTE(v217) < 0) {
                operator delete((void *)v216);
              }
              if (SHIBYTE(v219) < 0) {
                operator delete((void *)v218);
              }
              if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v220.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v222) < 0) {
                operator delete((void *)v221);
              }
              if (SHIBYTE(v224) < 0) {
                operator delete((void *)v223);
              }
            }
            else
            {
              uint64_t v48 = sub_1000042E0(&std::cout, (uint64_t)"Failed to read file: ", 21);
              if (v226 >= 0) {
                uint64_t v49 = &v225;
              }
              else {
                uint64_t v49 = (long long *)v225;
              }
              if (v226 >= 0) {
                uint64_t v50 = HIBYTE(v226);
              }
              else {
                uint64_t v50 = *((void *)&v225 + 1);
              }
              unint64_t v51 = sub_1000042E0(v48, (uint64_t)v49, v50);
              std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(void *)(*v51 - 24)));
              long long v52 = std::locale::use_facet((const std::locale *)&v223, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
              std::locale::~locale((std::locale *)&v223);
              std::ostream::put();
              std::ostream::flush();
            }
            siri::dialogengine::DialogMetadataReader::~DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)v212);
            if (SHIBYTE(v226) < 0) {
              operator delete((void *)v225);
            }
            if (SHIBYTE(v228) < 0) {
              operator delete((void *)v227);
            }
          }
          *(void *)&long long v227 = &v229;
          sub_100003B14((void ***)&v227);
          int v33 = v197;
        }
        else
        {
          std::string::size_type v69 = sub_1000042E0(&std::cout, (uint64_t)"ERROR: no such category: ", 25);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v70 = &__dst;
          }
          else {
            std::string v70 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v71 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v71 = __dst.__r_.__value_.__l.__size_;
          }
          int v72 = sub_1000042E0(v69, (uint64_t)v70, v71);
          std::ios_base::getloc((const std::ios_base *)((char *)v72 + *(void *)(*v72 - 24)));
          uint64_t v73 = std::locale::use_facet((const std::locale *)&v229, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10);
          std::locale::~locale((std::locale *)&v229);
          std::ostream::put();
          std::ostream::flush();
        }
        if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v231.__r_.__value_.__l.__data_);
        }
        goto LABEL_257;
      }
      if (!HIBYTE(v206[3])) {
        goto LABEL_167;
      }
      unint64_t v43 = (unsigned __int8 *)&v206[1];
      while (*v43 == v42->__r_.__value_.__s.__data_[0])
      {
        ++v43;
        long long v42 = (std::string *)((char *)v42 + 1);
        if (!--v39) {
          goto LABEL_167;
        }
      }
    }
LABEL_257:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    uint64_t v34 = (long long *)((char *)v34 + 24);
  }
  while (v34 != v33);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v233;
  sub_100003B14((void ***)&__dst);
  if ((v35 & 1) == 0)
  {
LABEL_294:
    std::locale v96 = sub_1000042E0(&std::cout, (uint64_t)"No dialog metadata found to copy.", 33);
    std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(void *)(*v96 - 24)));
    char v97 = std::locale::use_facet((const std::locale *)&v233, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
    std::locale::~locale((std::locale *)&v233);
    std::ostream::put();
    std::ostream::flush();
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  uint64_t v3 = 1;
LABEL_282:
  sub_10000A3E0((uint64_t)v200, v201);
  sub_100046810((uint64_t)__p);
  return v3;
}

void sub_100042C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,void *a51)
{
  STACK[0x360] = (unint64_t)&STACK[0x288];
  sub_1000468EC((void ***)&STACK[0x360]);
  sub_10000A3E0((uint64_t)&a48, (char *)a49);
  sub_100046810((uint64_t)&a51);
  _Unwind_Resume(a1);
}

BOOL sub_10004340C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1) {
    BOOL v3 = *(unsigned char *)a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0)
    {
      sub_100003600(&v8, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }
    else
    {
      long long v8 = *(_OWORD *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 24);
    }
    sub_100043688(exception, (uint64_t)&v8);
  }
  int v4 = *(void **)(a1 + 48);
  return v4 && (BOOL v5 = *(void **)(a2 + 48)) != 0 && *v4 == *v5;
}

void sub_1000434E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_100043520(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1) {
    BOOL v3 = *(unsigned char *)a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    uint64_t v11 = a1;
    uint64_t v12 = exception;
    if (*(char *)(v11 + 31) < 0)
    {
      sub_100003600(&v13, *(void **)(v11 + 8), *(void *)(v11 + 16));
    }
    else
    {
      long long v13 = *(_OWORD *)(v11 + 8);
      uint64_t v14 = *(void *)(v11 + 24);
    }
    sub_100043688(v12, (uint64_t)&v13);
  }
  sub_100043C58(a2);
  BOOL v5 = *(void **)(a1 + 48);
  int v6 = *(void **)(a2 + 48);
  if (v5)
  {
    sub_100043E08(v5, v6);
    YAML::detail::memory_holder::merge(*(void *)(a1 + 32), *(void *)(a2 + 32));
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  else
  {
    *(void *)(a1 + 48) = v6;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 40);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 40);
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v7;
    if (v9)
    {
      sub_100006AE0(v9);
    }
  }
}

void sub_100043650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void *sub_100043688(void *a1, uint64_t a2)
{
  uint64_t v6 = -1;
  int v7 = -1;
  sub_100043744(a2, __p);
  sub_100043924((uint64_t)a1, &v6, (uint64_t)__p);
  *a1 = off_10007D310;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10007D350;
  return a1;
}

void sub_100043728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100043744@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_100024BD8((uint64_t)v12);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4)
  {
    char v5 = sub_1000042E0(v13, (uint64_t)"invalid node; first invalid key: \"", 34);
    int v6 = *(char *)(a1 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = *(void *)a1;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a1 + 8);
    }
    uint64_t v9 = sub_1000042E0(v5, v7, v8);
    sub_1000042E0(v9, (uint64_t)"\"", 1);
    std::stringbuf::str();
  }
  else
  {
    sub_100003470(a2, "invalid node; this may result from using a map iterator as a sequence iterator, or vice-versa");
  }
  *(void *)((char *)v12
  v13[0] = v10;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100043910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100002BF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100043924(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  sub_100043A0C(a2, a3, (uint64_t)&v10);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = off_10007D290;
  uint64_t v6 = *(void *)a2;
  *(_DWORD *)(a1 + 24) = a2[2];
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = (unsigned char *)(a1 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100003600(v7, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)a3;
    *(void *)(a1 + 48) = *(void *)(a3 + 16);
    *(_OWORD *)uint64_t v7 = v8;
  }
  return a1;
}

void sub_1000439E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::runtime_error::~runtime_error(v15);
  _Unwind_Resume(a1);
}

_DWORD *sub_100043A0C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*result == -1 && result[1] == -1 && result[2] == -1)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      long long v13 = *(void **)a2;
      unint64_t v14 = *(void *)(a2 + 8);
      return sub_100003600((unsigned char *)a3, v13, v14);
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
    }
  }
  else
  {
    sub_100024BD8((uint64_t)v15);
    sub_1000042E0(v16, (uint64_t)"yaml-cpp: error at line ", 24);
    uint64_t v6 = (void *)std::ostream::operator<<();
    sub_1000042E0(v6, (uint64_t)", column ", 9);
    uint64_t v7 = (void *)std::ostream::operator<<();
    long long v8 = sub_1000042E0(v7, (uint64_t)": ", 2);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    sub_1000042E0(v8, v10, v11);
    std::stringbuf::str();
    *(void *)((char *)v15
    v16[0] = v12;
    if (v17 < 0) {
      operator delete((void *)v16[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return (_DWORD *)std::ios::~ios();
  }
  return result;
}

void sub_100043C44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100002BF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100043C58(uint64_t result)
{
  uint64_t v1 = result;
  if (!*(unsigned char *)result)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    uint64_t v3 = v1;
    uint64_t v4 = exception;
    if (*(char *)(v3 + 31) < 0)
    {
      sub_100003600(&v5, *(void **)(v3 + 8), *(void *)(v3 + 16));
    }
    else
    {
      long long v5 = *(_OWORD *)(v3 + 8);
      uint64_t v6 = *(void *)(v3 + 24);
    }
    sub_100043688(v4, (uint64_t)&v5);
  }
  if (!*(void *)(result + 48)) {
    operator new();
  }
  return result;
}

void sub_100043DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_100043E08(void *a1, void *a2)
{
  uint64_t v4 = (unsigned char **)*a2;
  if (**(unsigned char **)*a2)
  {
    sub_1000442CC((uint64_t)a1);
    uint64_t v4 = (unsigned char **)*a2;
  }
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v6)
  {
    sub_100006AE0(v6);
  }
}

void sub_100043E84(uint64_t a1, uint64_t a2)
{
  sub_100043ECC(&v2, a2);
}

void sub_100043ECC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100043F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_100043FE4((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100043F60(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100043F98(uint64_t a1)
{
}

uint64_t sub_100043FA0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100043FE4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    long long v2 = *(std::__shared_weak_count **)(a2 + 8);
    if (v2) {
      sub_100006AE0(v2);
    }
    operator delete();
  }
}

BOOL sub_10004403C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void sub_10004408C(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v2 = a2;
  operator new();
}

void sub_100044110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100044268((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_10004412C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100044164(uint64_t a1)
{
}

uint64_t sub_10004416C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1000441B0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100044208(a2, *(void **)(a2 + 8));
    operator delete();
  }
}

void sub_100044208(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100044208(a1, *a2);
    sub_100044208(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[5];
    if (v4) {
      sub_100006AE0(v4);
    }
    operator delete(a2);
  }
}

uint64_t *sub_100044268(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_100044208(v2, *(void **)(v2 + 8));
    operator delete();
  }
  return result;
}

void sub_1000442CC(uint64_t a1)
{
  uint64_t v2 = **(unsigned char ***)a1;
  if (!*v2)
  {
    YAML::detail::node_data::mark_defined((uint64_t)v2);
    uint64_t v3 = *(void **)(a1 + 16);
    uint64_t v4 = (void *)(a1 + 24);
    if (v3 != (void *)(a1 + 24))
    {
      do
      {
        sub_1000442CC(v3[4]);
        uint64_t v5 = (void *)v3[1];
        if (v5)
        {
          do
          {
            uint64_t v6 = v5;
            uint64_t v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            uint64_t v6 = (void *)v3[2];
            BOOL v7 = *v6 == (void)v3;
            uint64_t v3 = v6;
          }
          while (!v7);
        }
        uint64_t v3 = v6;
      }
      while (v6 != v4);
    }
    sub_100044370(a1 + 16, *(void **)(a1 + 24));
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 16) = v4;
  }
}

void sub_100044370(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100044370(a1, *a2);
    sub_100044370(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t sub_1000443C4(uint64_t a1)
{
  if (!*(unsigned char *)a1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0)
    {
      sub_100003600(&v6, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }
    else
    {
      long long v6 = *(_OWORD *)(a1 + 8);
      uint64_t v7 = *(void *)(a1 + 24);
    }
    sub_100043688(exception, (uint64_t)&v6);
  }
  uint64_t v2 = *(uint64_t ***)(a1 + 48);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = **v2;
  if (*(unsigned char *)v3) {
    return *(unsigned int *)(v3 + 16);
  }
  else {
    return 0;
  }
}

void sub_100044498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_1000444D0(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    sub_100044558((uint64_t)&v9, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 9) < 0) {
          operator delete(*(void **)(v7 - 32));
        }
        v7 -= 32;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

long long *sub_100044558(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      *(unsigned char *)(a4 + 24) = *((unsigned char *)v5 + 24);
      a4 += 32;
      v5 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_1000445DC(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = sub_10003CFC8(a1);
  if (!v4)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  int v5 = v4;
  sub_10003D02C(a1, (uint64_t)v49);
  uint64_t v46 = 0;
  unint64_t v47 = 0;
  unint64_t v48 = 0;
  switch(v5)
  {
    case 3:
      unint64_t v47 = sub_100003F94(&v46, (long long *)v49);
      break;
    case 2:
      sub_100003470(v42, "product/assistant/nl/src/main/filesystem/data/nl/siri/voc");
      siri::dialogengine::JoinPath();
      char v9 = (_OWORD *)v47;
      if (v47 >= v48)
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - v46) >> 3);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100003974();
        }
        if (0x5555555555555556 * ((uint64_t)(v48 - v46) >> 3) > v12) {
          unint64_t v12 = 0x5555555555555556 * ((uint64_t)(v48 - v46) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - v46) >> 3) >= 0x555555555555555) {
          unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v13 = v12;
        }
        uint64_t v55 = &v48;
        if (v13) {
          unint64_t v14 = (void **)sub_10000398C((uint64_t)&v48, v13);
        }
        else {
          unint64_t v14 = 0;
        }
        uint64_t v19 = &v14[3 * v11];
        unint64_t v51 = v14;
        long long v52 = v19;
        std::string::size_type v54 = &v14[3 * v13];
        long long v20 = *(_OWORD *)__p;
        v19[2] = v45;
        *(_OWORD *)uint64_t v19 = v20;
        __p[1] = 0;
        unint64_t v45 = 0;
        __p[0] = 0;
        std::string::size_type v53 = v19 + 3;
        sub_1000040B8(&v46, &v51);
        unint64_t v21 = v47;
        sub_100004250((uint64_t)&v51);
        unint64_t v47 = v21;
        if (SHIBYTE(v45) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v10 = *(_OWORD *)__p;
        *(void *)(v47 + 16) = v45;
        *char v9 = v10;
        __p[1] = 0;
        unint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v47 = (unint64_t)v9 + 24;
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      sub_100003470(v42, "product/assistant/nl/src/main/filesystem/data/nl/siri/override-voc");
      siri::dialogengine::JoinPath();
      std::string::size_type v22 = (_OWORD *)v47;
      if (v47 >= v48)
      {
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - v46) >> 3);
        unint64_t v25 = v24 + 1;
        if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100003974();
        }
        if (0x5555555555555556 * ((uint64_t)(v48 - v46) >> 3) > v25) {
          unint64_t v25 = 0x5555555555555556 * ((uint64_t)(v48 - v46) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - v46) >> 3) >= 0x555555555555555) {
          unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v26 = v25;
        }
        uint64_t v55 = &v48;
        if (v26) {
          uint64_t v27 = (void **)sub_10000398C((uint64_t)&v48, v26);
        }
        else {
          uint64_t v27 = 0;
        }
        unint64_t v30 = &v27[3 * v24];
        unint64_t v51 = v27;
        long long v52 = v30;
        std::string::size_type v54 = &v27[3 * v26];
        long long v31 = *(_OWORD *)__p;
        std::locale v30[2] = v45;
        *(_OWORD *)unint64_t v30 = v31;
        __p[1] = 0;
        unint64_t v45 = 0;
        __p[0] = 0;
        std::string::size_type v53 = v30 + 3;
        sub_1000040B8(&v46, &v51);
        unint64_t v32 = v47;
        sub_100004250((uint64_t)&v51);
        unint64_t v47 = v32;
        if (SHIBYTE(v45) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v23 = *(_OWORD *)__p;
        *(void *)(v47 + 16) = v45;
        *std::string::size_type v22 = v23;
        __p[1] = 0;
        unint64_t v45 = 0;
        __p[0] = 0;
        unint64_t v47 = (unint64_t)v22 + 24;
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      sub_100003470(v42, "product/assistant/ontology/src/main/filesystem/data/nl/siri/voc");
      siri::dialogengine::JoinPath();
      int v33 = (_OWORD *)v47;
      if (v47 < v48)
      {
        long long v34 = *(_OWORD *)__p;
        *(void *)(v47 + 16) = v45;
        _OWORD *v33 = v34;
        long long v8 = (char *)v33 + 24;
        __p[1] = 0;
        unint64_t v45 = 0;
        __p[0] = 0;
        goto LABEL_51;
      }
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - v46) >> 3);
      unint64_t v36 = v35 + 1;
      if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100003974();
      }
      if (0x5555555555555556 * ((uint64_t)(v48 - v46) >> 3) > v36) {
        unint64_t v36 = 0x5555555555555556 * ((uint64_t)(v48 - v46) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - v46) >> 3) >= 0x555555555555555) {
        unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v37 = v36;
      }
      uint64_t v55 = &v48;
      if (v37) {
        char v38 = (void **)sub_10000398C((uint64_t)&v48, v37);
      }
      else {
        char v38 = 0;
      }
      uint64_t v39 = &v38[3 * v35];
      unint64_t v51 = v38;
      long long v52 = v39;
      std::string::size_type v54 = &v38[3 * v37];
      long long v40 = *(_OWORD *)__p;
      v39[2] = v45;
      *(_OWORD *)uint64_t v39 = v40;
      __p[1] = 0;
      unint64_t v45 = 0;
      __p[0] = 0;
      std::string::size_type v53 = v39 + 3;
      sub_1000040B8(&v46, &v51);
LABEL_62:
      unint64_t v41 = v47;
      sub_100004250((uint64_t)&v51);
      unint64_t v47 = v41;
      if (SHIBYTE(v45) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_64;
    case 1:
      sub_100003470(v42, "dialog-metadata/voc");
      siri::dialogengine::JoinPath();
      uint64_t v6 = (_OWORD *)v47;
      if (v47 < v48)
      {
        long long v7 = *(_OWORD *)__p;
        *(void *)(v47 + 16) = v45;
        _OWORD *v6 = v7;
        __p[1] = 0;
        unint64_t v45 = 0;
        __p[0] = 0;
        long long v8 = (char *)v6 + 24;
LABEL_51:
        unint64_t v47 = (unint64_t)v8;
LABEL_64:
        if (v43 < 0) {
          operator delete(v42[0]);
        }
        break;
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - v46) >> 3);
      unint64_t v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100003974();
      }
      if (0x5555555555555556 * ((uint64_t)(v48 - v46) >> 3) > v16) {
        unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v48 - v46) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - v46) >> 3) >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v16;
      }
      uint64_t v55 = &v48;
      if (v17) {
        std::string::size_type v18 = (void **)sub_10000398C((uint64_t)&v48, v17);
      }
      else {
        std::string::size_type v18 = 0;
      }
      BOOL v28 = &v18[3 * v15];
      unint64_t v51 = v18;
      long long v52 = v28;
      std::string::size_type v54 = &v18[3 * v17];
      long long v29 = *(_OWORD *)__p;
      v28[2] = v45;
      *(_OWORD *)BOOL v28 = v29;
      __p[1] = 0;
      unint64_t v45 = 0;
      __p[0] = 0;
      std::string::size_type v53 = v28 + 3;
      sub_1000040B8(&v46, &v51);
      goto LABEL_62;
  }
  siri::dialogengine::FindFileInPaths();
  unint64_t v51 = (void **)&v46;
  sub_100003B14(&v51);
  if (v50 < 0) {
    operator delete(v49[0]);
  }
}

void sub_100044B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_100004250(v30 - 88);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::string __p = &a22;
  sub_100003B14((void ***)&__p);
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100044BD4(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_100034070((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 3;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_100044C40(_Unwind_Exception *a1)
{
  sub_10000A3E0(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100044C58(const void **a1, siri::dialogengine::DialogMetadataWriter *a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    if (a3 + 1 != (uint64_t **)sub_10000A230((uint64_t)a3, a1)) {
      return;
    }
    sub_10000A2C0(a3, a1, (uint64_t)a1);
  }
  siri::dialogengine::BaseName();
  siri::dialogengine::RemoveExtension();
  if (SHIBYTE(v92) < 0) {
    operator delete(__p[0]);
  }
  std::operator+<char>();
  siri::dialogengine::Log::Info();
  if (SHIBYTE(v92) < 0) {
    operator delete(__p[0]);
  }
  if (siri::dialogengine::FileExists())
  {
    sub_100003470(&v89, (char *)&unk_10006DFE2);
    sub_100003470(&v88, (char *)&unk_10006DFE2);
    sub_10000256C((void (__cdecl ***)(std::ifstream *__hidden))__p);
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)__p + *((void *)__p[0] - 3)));
      char v9 = std::locale::use_facet((const std::locale *)&v80, &std::ctype<char>::id);
      unsigned __int8 v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale((std::locale *)&v80);
      unint64_t v11 = sub_100002A00(__p, (uint64_t)&v89, v10);
      if ((*((unsigned char *)v11 + *(void *)(*v11 - 24) + 32) & 5) != 0)
      {
        std::filebuf::~filebuf();
        std::istream::~istream();
        std::ios::~ios();
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string v64 = (void *)v88.__r_.__value_.__r.__words[0];
LABEL_176:
          operator delete(v64);
        }
        goto LABEL_177;
      }
      siri::dialogengine::StringTrim();
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        sub_100003470(&v80, ";");
        char v13 = siri::dialogengine::StringStartsWith();
        char v14 = v13;
        if (SBYTE7(v81) < 0)
        {
          operator delete((void *)v80);
          if (v14) {
            goto LABEL_159;
          }
        }
        else if (v13)
        {
          goto LABEL_159;
        }
        sub_100003470(&v80, "#INCLUDE");
        if (siri::dialogengine::StringStartsWith())
        {
          int v15 = *(unsigned __int8 *)(a5 + 217);
          if (SBYTE7(v81) < 0)
          {
            operator delete((void *)v80);
            if (!v15)
            {
LABEL_45:
              sub_100003470(&v86, "#INCLUDE");
              sub_100003470(&v85, (char *)&unk_10006DFE2);
              siri::dialogengine::StringReplace();
              siri::dialogengine::StringTrim();
              if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v76.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v85.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v86.__r_.__value_.__l.__data_);
              }
              siri::dialogengine::StringSplit();
              siri::dialogengine::StringTrim();
              if (SBYTE7(v81) < 0) {
                operator delete((void *)v80);
              }
              long long v80 = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
              *(void *)&long long v81 = *((void *)&v76.__r_.__value_.__l + 2);
              *((unsigned char *)&v76.__r_.__value_.__s + 23) = 0;
              v76.__r_.__value_.__s.__data_[0] = 0;
              v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
              sub_100003B14((void ***)&v85);
              siri::dialogengine::DirName();
              siri::dialogengine::JoinPath();
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v86.__r_.__value_.__l.__data_);
              }
              if (siri::dialogengine::FileExists())
              {
                sub_100044C58(&v76, a2, a3, a4, a5);
              }
              else
              {
                std::operator+<char>();
                siri::dialogengine::Log::Error();
                if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v86.__r_.__value_.__l.__data_);
                }
              }
              if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
              {
                unint64_t v26 = (void *)v76.__r_.__value_.__r.__words[0];
LABEL_63:
                operator delete(v26);
              }
LABEL_157:
              if (SBYTE7(v81) < 0) {
                operator delete((void *)v80);
              }
              goto LABEL_159;
            }
          }
          else if (!*(unsigned char *)(a5 + 217))
          {
            goto LABEL_45;
          }
        }
        else if (SBYTE7(v81) < 0)
        {
          operator delete((void *)v80);
        }
        unint64_t v16 = &v89;
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v16 = (std::string *)v89.__r_.__value_.__r.__words[0];
        }
        __darwin_ct_rune_t v17 = v16->__r_.__value_.__s.__data_[0];
        if (v17 < 0) {
          __uint32_t v18 = __maskrune(v17, 0x4000uLL);
        }
        else {
          __uint32_t v18 = _DefaultRuneLocale.__runetype[v17] & 0x4000;
        }
        if (v18)
        {
          int64_t v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          {
            p_str = &__str;
          }
          else
          {
            int64_t v19 = __str.__r_.__value_.__l.__size_;
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (v19 >= 2)
          {
            unint64_t v21 = (char *)p_str + v19;
            std::string::size_type v22 = p_str;
            do
            {
              long long v23 = (char *)memchr(v22, 91, v19 - 1);
              if (!v23) {
                break;
              }
              if (*(_WORD *)v23 == 25691)
              {
                if (v23 == v21 || v23 - (char *)p_str == -1) {
                  break;
                }
                unint64_t v84 = 0;
                long long v82 = 0u;
                long long v83 = 0u;
                long long v80 = 0u;
                long long v81 = 0u;
                std::string::operator=((std::string *)&v80, &v90);
                std::string::operator=((std::string *)((char *)&v81 + 8), &v88);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int64_t v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                }
                else {
                  int64_t v27 = __str.__r_.__value_.__l.__size_;
                }
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  BOOL v28 = &__str;
                }
                else {
                  BOOL v28 = (std::string *)__str.__r_.__value_.__r.__words[0];
                }
                long long v29 = (char *)v28 + v27;
                uint64_t v67 = a4;
                if (v27 >= 1)
                {
                  uint64_t v30 = v28;
                  do
                  {
                    long long v31 = memchr(v30, 91, v27);
                    if (!v31) {
                      break;
                    }
                    if (*v31 == 91) {
                      goto LABEL_78;
                    }
                    uint64_t v30 = (std::string *)(v31 + 1);
                    int64_t v27 = v29 - (unsigned char *)v30;
                  }
                  while (v29 - (unsigned char *)v30 > 0);
                }
                long long v31 = v29;
LABEL_78:
                unint64_t v32 = v31 - (unsigned char *)v28;
                if (v31 == v29) {
                  std::string::size_type v33 = -1;
                }
                else {
                  std::string::size_type v33 = v31 - (unsigned char *)v28;
                }
                std::string::basic_string(&v76, &__str, 0, v33, (std::allocator<char> *)&v85);
                siri::dialogengine::StringTrim();
                if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v76.__r_.__value_.__l.__data_);
                }
                siri::dialogengine::StringSplit();
                std::string::operator=(&v86, (const std::string *)v76.__r_.__value_.__l.__data_);
                v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
                sub_100003B14((void ***)&v85);
                siri::dialogengine::StringSplit();
                std::string::operator=(&v86, (const std::string *)v76.__r_.__value_.__l.__data_);
                v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
                sub_100003B14((void ***)&v85);
                sub_100003470(&v85, "\\"");
                sub_100003470(&v79, (char *)&unk_10006DFE2);
                siri::dialogengine::StringReplace();
                if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v86.__r_.__value_.__l.__data_);
                }
                std::string v86 = v76;
                *((unsigned char *)&v76.__r_.__value_.__s + 23) = 0;
                v76.__r_.__value_.__s.__data_[0] = 0;
                if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v79.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v85.__r_.__value_.__l.__data_);
                }
                if (v33 != -1)
                {
LABEL_90:
                  std::string::size_type v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    unint64_t v35 = &__str;
                  }
                  else {
                    unint64_t v35 = (std::string *)__str.__r_.__value_.__r.__words[0];
                  }
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v34 = __str.__r_.__value_.__l.__size_;
                  }
                  if (v34 >= v32)
                  {
                    unint64_t v36 = (char *)v35 + v32;
                    unint64_t v37 = (char *)v35 + v34;
                    while (v37 - v36 >= 1)
                    {
                      char v38 = memchr(v36, 93, v37 - v36);
                      if (!v38) {
                        break;
                      }
                      if (*v38 == 93)
                      {
                        if (v38 != v37 && v38 - (unsigned char *)v35 != -1)
                        {
                          std::string::size_type v65 = v38 - (unsigned char *)v35;
                          std::string::basic_string(&v85, &__str, v32 + 1, v38 - (unsigned char *)v35 + ~v32, (std::allocator<char> *)&v76);
                          sub_100003470(&v76, "d");
                          int v39 = siri::dialogengine::StringStartsWith();
                          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v76.__r_.__value_.__l.__data_);
                          }
                          if (v39)
                          {
                            memset(&v76, 0, sizeof(v76));
                            v78[0] = 0;
                            v78[1] = 0;
                            char v77 = (uint64_t *)v78;
                            std::string::operator=(&v76, &v86);
                            std::string::size_type v40 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
                            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                              std::string::size_type v40 = v85.__r_.__value_.__l.__size_;
                            }
                            if (v40 >= 3)
                            {
                              std::string::basic_string(&v79, &v85, 2uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v75);
                              if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v85.__r_.__value_.__l.__data_);
                              }
                              std::string v85 = v79;
                              siri::dialogengine::StringSplit();
                              std::string::size_type v41 = v79.__r_.__value_.__l.__size_;
                              std::string::size_type v66 = v79.__r_.__value_.__l.__size_;
                              for (std::string::size_type i = v79.__r_.__value_.__r.__words[0]; i != v41; i += 24)
                              {
                                siri::dialogengine::StringSplit();
                                unint64_t v44 = v75[0];
                                char v43 = v75[1];
                                while (v44 != v43)
                                {
                                  siri::dialogengine::StringSplit();
                                  if ((void **)((char *)v74[1] - (char *)v74[0]) == (void **)48)
                                  {
                                    siri::dialogengine::StringTrim();
                                    siri::dialogengine::StringTrim();
                                    siri::dialogengine::StringTrim();
                                    if (v70 < 0) {
                                      operator delete(v69);
                                    }
                                    std::string::size_type v69 = v72;
                                    unint64_t v45 = sub_100031CF4(&v77, (const void **)v72, (uint64_t)&std::piecewise_construct, (long long **)&v69);
                                    std::string::operator=((std::string *)(v45 + 7), &v71);
                                    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
                                      operator delete(v71.__r_.__value_.__l.__data_);
                                    }
                                    if (v73 < 0) {
                                      operator delete(v72[0]);
                                    }
                                  }
                                  v72[0] = v74;
                                  sub_100003B14((void ***)v72);
                                  v44 += 3;
                                }
                                v74[0] = (void **)v75;
                                sub_100003B14(v74);
                                std::string::size_type v41 = v66;
                              }
                              v75[0] = (void **)&v79;
                              sub_100003B14(v75);
                            }
                            uint64_t v46 = *((void *)&v83 + 1);
                            if (*((void *)&v83 + 1) >= v84)
                            {
                              uint64_t v47 = sub_100045DC0((uint64_t *)&v83, (long long *)&v76);
                            }
                            else
                            {
                              sub_100045ED0((int)&v84, *((void **)&v83 + 1), (long long *)&v76);
                              uint64_t v47 = v46 + 48;
                            }
                            *((void *)&v83 + 1) = v47;
                            sub_10002A698((uint64_t)&v77, v78[0]);
                            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v76.__r_.__value_.__l.__data_);
                            }
                          }
                          std::string::size_type v48 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            uint64_t v49 = &__str;
                          }
                          else {
                            uint64_t v49 = (std::string *)__str.__r_.__value_.__r.__words[0];
                          }
                          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                            std::string::size_type v48 = __str.__r_.__value_.__l.__size_;
                          }
                          if (v48 <= v65)
                          {
                            unint64_t v32 = -1;
                          }
                          else
                          {
                            char v50 = &v49->__r_.__value_.__s.__data_[v65 + 1];
                            unint64_t v51 = (char *)v49 + v48;
                            int64_t v52 = v48 - (v65 + 1);
                            if (v52 >= 1)
                            {
                              do
                              {
                                std::string::size_type v53 = memchr(v50, 91, v52);
                                if (!v53) {
                                  break;
                                }
                                if (*v53 == 91) {
                                  goto LABEL_141;
                                }
                                char v50 = v53 + 1;
                                int64_t v52 = v51 - v50;
                              }
                              while (v51 - v50 > 0);
                            }
                            std::string::size_type v53 = v51;
LABEL_141:
                            unint64_t v32 = v53 == v51 ? -1 : v53 - (unsigned char *)v49;
                          }
                          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v85.__r_.__value_.__l.__data_);
                          }
                          if (v32 != -1) {
                            goto LABEL_90;
                          }
                        }
                        break;
                      }
                      unint64_t v36 = v38 + 1;
                    }
                  }
                }
                a4 = v67;
                if (*(unsigned char *)(a5 + 216))
                {
                  siri::dialogengine::DialogMetadataSemanticValue::ToString((uint64_t *)&v76, (siri::dialogengine::DialogMetadataSemanticValue *)&v80);
                  std::string::size_type v54 = (v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                      ? &v76
                      : (std::string *)v76.__r_.__value_.__r.__words[0];
                  puts((const char *)v54);
                  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v76.__r_.__value_.__l.__data_);
                  }
                }
                siri::dialogengine::DialogMetadataWriter::AddSemanticValue(a2, (const siri::dialogengine::DialogMetadataSemanticValue *)&v80);
                if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v86.__r_.__value_.__l.__data_);
                }
                v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
                sub_100046420((void ***)&v76);
                if (SHIBYTE(v82) < 0)
                {
                  unint64_t v26 = (void *)*((void *)&v81 + 1);
                  goto LABEL_63;
                }
                goto LABEL_157;
              }
              std::string::size_type v22 = (std::string *)(v23 + 1);
              int64_t v19 = v21 - (char *)v22;
            }
            while (v21 - (char *)v22 >= 2);
          }
        }
        else
        {
          std::string::operator=(&v88, &__str);
          siri::dialogengine::StringSplit();
          std::string::operator=(&v88, (const std::string *)v80);
          v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
          sub_100003B14((void ***)&v76);
          siri::dialogengine::StringSplit();
          std::string::operator=(&v88, (const std::string *)v80);
          v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
          sub_100003B14((void ***)&v76);
          siri::dialogengine::StringTrim();
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v88.__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v80;
          v88.__r_.__value_.__r.__words[2] = v81;
          sub_100003470(&v80, "#");
          int v24 = siri::dialogengine::StringStartsWith();
          int v25 = v24;
          if ((SBYTE7(v81) & 0x80000000) == 0)
          {
            if (!v24) {
              goto LABEL_159;
            }
LABEL_58:
            std::string::assign(&v88, (const std::string::value_type *)&unk_10006DFE2);
            goto LABEL_159;
          }
          operator delete((void *)v80);
          if (v25) {
            goto LABEL_58;
          }
        }
      }
LABEL_159:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
  std::operator+<char>();
  uint64_t v55 = std::string::append(&v89, "' in locale '");
  long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  int v57 = *(char *)(a4 + 23);
  if (v57 >= 0) {
    uint64_t v58 = (const std::string::value_type *)a4;
  }
  else {
    uint64_t v58 = *(const std::string::value_type **)a4;
  }
  if (v57 >= 0) {
    std::string::size_type v59 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v59 = *(void *)(a4 + 8);
  }
  std::string v60 = std::string::append(&v76, v58, v59);
  long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  *(void *)&long long v81 = *((void *)&v60->__r_.__value_.__l + 2);
  long long v80 = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  long long v62 = std::string::append((std::string *)&v80, "'");
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  std::string::size_type v92 = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Error();
  if (SHIBYTE(v92) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v81) < 0) {
    operator delete((void *)v80);
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string v64 = (void *)v76.__r_.__value_.__r.__words[0];
    goto LABEL_176;
  }
LABEL_177:
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
}

void sub_1000459AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::locale a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  sub_100045D24((uint64_t)&a35);
  if (a60 < 0) {
    operator delete(__p);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  sub_100045D64((uint64_t)&a45);
  if (a72 < 0) {
    operator delete(a68);
  }
  sub_100002D28(&STACK[0x210]);
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a77);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100045D24(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100045D64(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  sub_100046420(&v3);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100045DC0(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_100003974();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    long long v7 = (char *)sub_1000461A4((uint64_t)(a1 + 2), v6);
  }
  else {
    long long v7 = 0;
  }
  unsigned __int8 v10 = v7;
  unint64_t v11 = &v7[48 * v3];
  char v13 = &v7[48 * v6];
  sub_100045ED0(a1 + 16, v11, a2);
  unint64_t v12 = v11 + 48;
  sub_10004612C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_1000463A4(&v10);
  return v8;
}

void sub_100045EBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000463A4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100045ED0(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_100003600(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    std::locale __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)std::string __dst = v5;
  }
  return sub_100045F44(__dst + 3, (const void ***)a3 + 3);
}

void sub_100045F28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100045F44(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100045F9C(a1, *a2, a2 + 1);
  return a1;
}

void sub_100045F84(_Unwind_Exception *a1)
{
  sub_10002A698(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100045F9C(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    unint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_100046028(v5, v6, v4 + 4, (long long *)v4 + 2);
      long long v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          long long v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          unint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      unint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100046028(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  unint64_t v6 = sub_10000645C(a1, a2, &v12, &v11, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    sub_1000460C0((uint64_t)a1, a4, (uint64_t)v10);
    sub_100006674(a1, (uint64_t)v12, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_100031E38((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_1000460C0@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_100031B14(v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100046114(_Unwind_Exception *a1)
{
  sub_100031E38(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10004612C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000461EC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1000461A4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_1000035CC();
  }
  return operator new(48 * a2);
}

uint64_t sub_1000461EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  void v15[2] = &v18;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      BOOL v9 = (void *)(a3 - 16);
      uint64_t v10 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v10;
      uint64_t v11 = v7 - 16;
      uint64_t v12 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v12;
      if (v12)
      {
        *(void *)(v10 + 16) = v11;
        *(void *)(a3 - 24) = v9;
        *BOOL v9 = 0;
        *(void *)(a3 - 8) = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v11;
      }
      a3 -= 48;
      uint64_t v7 = *((void *)&v18 + 1) - 48;
      *((void *)&v18 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  sub_1000462C4((uint64_t)v15);
  return v13;
}

uint64_t sub_1000462C4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000462FC((uint64_t *)a1);
  }
  return a1;
}

void sub_1000462FC(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100046350(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void sub_100046350(uint64_t a1, uint64_t a2)
{
  sub_10002A698(a2 + 24, *(void **)(a2 + 32));
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void **sub_1000463A4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1000463D8(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    sub_100046350(v4, i - 48);
  }
}

void sub_100046420(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_100046350((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1000464B8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100003600(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100003600(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_100003600(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_100003600(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_100003600(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_100003600(__dst + 120, *((void **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 120);
    *((void *)__dst + 17) = *((void *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v9;
  }
  if (*((char *)a2 + 167) < 0)
  {
    sub_100003600(__dst + 144, *((void **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v10 = a2[9];
    *((void *)__dst + 20) = *((void *)a2 + 20);
    *((_OWORD *)__dst + 9) = v10;
  }
  if (*((char *)a2 + 191) < 0)
  {
    sub_100003600(__dst + 168, *((void **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v11 = *(long long *)((char *)a2 + 168);
    *((void *)__dst + 23) = *((void *)a2 + 23);
    *(_OWORD *)(__dst + 168) = v11;
  }
  *((void *)__dst + 24) = 0;
  *((void *)__dst + 25) = 0;
  *((void *)__dst + 26) = 0;
  sub_100003898(__dst + 192, *((long long **)a2 + 24), *((long long **)a2 + 25), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 25) - *((void *)a2 + 24)) >> 3));
  __int16 v12 = *((_WORD *)a2 + 108);
  __dst[218] = *((unsigned char *)a2 + 218);
  *((_WORD *)__dst + 108) = v12;
  if (*((char *)a2 + 247) < 0)
  {
    sub_100003600(__dst + 224, *((void **)a2 + 28), *((void *)a2 + 29));
  }
  else
  {
    long long v13 = a2[14];
    *((void *)__dst + 30) = *((void *)a2 + 30);
    *((_OWORD *)__dst + 14) = v13;
  }
  char v14 = __dst + 248;
  if (*((char *)a2 + 271) < 0)
  {
    sub_100003600(v14, *((void **)a2 + 31), *((void *)a2 + 32));
  }
  else
  {
    long long v15 = *(long long *)((char *)a2 + 248);
    *((void *)__dst + 33) = *((void *)a2 + 33);
    *(_OWORD *)char v14 = v15;
  }
  return __dst;
}

void sub_10004671C(_Unwind_Exception *a1, void **a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 247) < 0) {
    operator delete(*v3);
  }
  sub_100003B14((void ***)va);
  if (*(char *)(v2 + 191) < 0) {
    operator delete(*v9);
  }
  if (*(char *)(v2 + 167) < 0) {
    operator delete(*v8);
  }
  if (*(char *)(v2 + 143) < 0) {
    operator delete(*v7);
  }
  if (*(char *)(v2 + 119) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v2 + 95) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*a2);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100046810(uint64_t a1)
{
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  if (*(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  uint64_t v3 = (void **)(a1 + 192);
  sub_100003B14(&v3);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000468EC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100046940((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100046940(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

uint64_t sub_100046990(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100046A08((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100046A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(unsigned char *)(v8 - 8) = *(unsigned char *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100046AB8((uint64_t)v12);
  return v10;
}

uint64_t sub_100046AB8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100046AF0(a1);
  }
  return a1;
}

void sub_100046AF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 32;
  }
}

uint64_t sub_100046B38(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100046B70(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_100046BC8(uint64_t **a1, unsigned __int8 *a2, uint64_t *a3)
{
  long long v4 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v8 = *a3;
  long long v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = sub_100046C4C(v4, a2, &v8);
  if (v9) {
    sub_100006AE0(v9);
  }
  sub_100046CC0(v6, (uint64_t)a1);
  return v6;
}

void sub_100046C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100006AE0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100046C4C(uint64_t *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  long long v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  uint64_t v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = sub_100046D20(v3, a2, &v7);
  if (v8) {
    sub_100006AE0(v8);
  }
  return v5;
}

void sub_100046CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100006AE0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100046CC0(uint64_t a1, uint64_t a2)
{
  if (***(unsigned char ***)a1)
  {
    sub_1000442CC(a2);
  }
  else
  {
    uint64_t v2 = a2;
    sub_1000476DC((uint64_t **)(a1 + 16), (unint64_t *)&v2, &v2);
  }
}

uint64_t sub_100046D20(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6 < 2 || v6 == 3)
  {
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_100006AE0(v8);
      long long v9 = (std::__shared_weak_count *)a3[1];
      uint64_t v19 = *a3;
      long long v20 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v19 = *a3;
      long long v20 = 0;
    }
    YAML::detail::node_data::convert_to_map(a1, (uint64_t)&v19);
    if (v20) {
      sub_100006AE0(v20);
    }
  }
  else if (v6 == 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    sub_100046F3C(exception, a2);
  }
  uint64_t v10 = *(uint64_t **)(a1 + 112);
  if (v10 == *(uint64_t **)(a1 + 120))
  {
LABEL_20:
    uint64_t v14 = a3[1];
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1000474BC((uint64_t)v21);
  }
  while (1)
  {
    uint64_t v11 = *v10;
    __int16 v12 = (std::__shared_weak_count *)a3[1];
    uint64_t v17 = *a3;
    long long v18 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v13 = sub_100046F40(v11, a2, &v17);
    if (v18) {
      sub_100006AE0(v18);
    }
    if (v13) {
      return v10[1];
    }
    v10 += 2;
    if (v10 == *(uint64_t **)(a1 + 120)) {
      goto LABEL_20;
    }
  }
}

void sub_100046EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_100046F40(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  memset(&__s1, 0, sizeof(__s1));
  uint64_t v4 = *a3;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string __p = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = v4;
    unint64_t v26 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    std::string __p = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = v4;
    unint64_t v26 = 0;
  }
  v21[0] = 1;
  uint64_t v27 = a1;
  BOOL v6 = sub_10004734C((uint64_t)v21, &__s1);
  if (v26) {
    sub_100006AE0(v26);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  if (v5) {
    sub_100006AE0(v5);
  }
  if (!v6) {
    goto LABEL_29;
  }
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = a2[23];
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)a2 + 1);
  }
  if (size == v8)
  {
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(unsigned __int8 **)a2;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      BOOL v19 = memcmp(__s1.__r_.__value_.__l.__data_, v10, __s1.__r_.__value_.__l.__size_) == 0;
LABEL_33:
      operator delete(__s1.__r_.__value_.__l.__data_);
      return v19;
    }
    if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
      return 1;
    }
    uint64_t v11 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
    p_s1 = &__s1;
    do
    {
      int v14 = p_s1->__r_.__value_.__s.__data_[0];
      p_s1 = (std::string *)((char *)p_s1 + 1);
      int v13 = v14;
      int v16 = *v10++;
      int v15 = v16;
      BOOL v18 = v11-- != 0;
      BOOL v19 = v13 == v15;
    }
    while (v13 == v15 && v18);
  }
  else
  {
LABEL_29:
    BOOL v19 = 0;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_33;
  }
  return v19;
}

void sub_100047094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_10003F540((uint64_t)&a9);
  if (v21) {
    sub_100006AE0(v21);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_1000470C4(void *a1, uint64_t a2)
{
  uint64_t v6 = -1;
  int v7 = -1;
  sub_100047180(a2);
  sub_100043924((uint64_t)a1, &v6, (uint64_t)&__p);
  *a1 = off_10007D310;
  if (v5 < 0) {
    operator delete(__p);
  }
  *a1 = off_10007D450;
  return a1;
}

void sub_100047164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100047180(uint64_t a1)
{
  sub_100024BD8((uint64_t)v10);
  uint64_t v2 = sub_1000042E0(v11, (uint64_t)"operator[] call on a scalar", 27);
  uint64_t v3 = sub_1000042E0(v2, (uint64_t)" (key: \"", 8);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  int v7 = sub_1000042E0(v3, v5, v6);
  sub_1000042E0(v7, (uint64_t)"\")", 2);
  std::stringbuf::str();
  *(void *)((char *)v10
  v11[0] = v8;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100047338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100002BF0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10004734C(uint64_t a1, std::string *a2)
{
  int v4 = sub_1000443C4(a1);
  if (v4 == 2)
  {
    uint64_t v5 = (const std::string *)sub_1000473A4(a1);
    std::string::operator=(a2, v5);
  }
  return v4 == 2;
}

uint64_t *sub_1000473A4(uint64_t a1)
{
  if (!*(unsigned char *)a1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0)
    {
      sub_100003600(&v5, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }
    else
    {
      long long v5 = *(_OWORD *)(a1 + 8);
      uint64_t v6 = *(void *)(a1 + 24);
    }
    sub_100043688(exception, (uint64_t)&v5);
  }
  uint64_t v2 = *(void ***)(a1 + 48);
  if (v2) {
    return (uint64_t *)(**v2 + 56);
  }
  return YAML::detail::node_data::empty_scalar((YAML::detail::node_data *)a1);
}

void sub_100047484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_1000474BC(uint64_t a1)
{
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  operator new();
}

void sub_100047578(_Unwind_Exception *exception_object)
{
  int v4 = *(std::__shared_weak_count **)(v1 + 40);
  if (v4) {
    sub_100006AE0(v4);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1000475C8(uint64_t a1, const std::string *a2)
{
  if (!*(unsigned char *)a1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0)
    {
      sub_100003600(&v8, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }
    else
    {
      long long v8 = *(_OWORD *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 24);
    }
    sub_100043688(exception, (uint64_t)&v8);
  }
  sub_100043C58(a1);
  int v4 = *(uint64_t ***)(a1 + 48);
  sub_1000442CC((uint64_t)v4);
  uint64_t v5 = **v4;
  return YAML::detail::node_data::set_scalar(v5, a2);
}

void sub_1000476A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000476DC(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        long long v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_100006674(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_100047798(uint64_t result)
{
  if (*(_DWORD *)result == 2)
  {
    uint64_t v1 = *(unsigned char *****)(result + 24);
    uint64_t v2 = (unsigned char ****)(*(void *)(result + 16) + 16);
    if (v1 != v2)
    {
      while (!****v2 || !***v2[1])
      {
        v2 += 2;
        if (v2 == v1)
        {
          uint64_t v2 = *(unsigned char *****)(result + 24);
          break;
        }
      }
    }
    *(void *)(result + 16) = v2;
  }
  else if (*(_DWORD *)result == 1)
  {
    *(void *)(result + 8) += 8;
  }
  return result;
}

uint64_t sub_10004780C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100003600((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  v12[0] = 0;
  *(_OWORD *)int v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  v8[0] = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  sub_100047920(a1 + 56, (uint64_t)v12, (uint64_t)v8);
  if ((void)v11) {
    sub_100006AE0((std::__shared_weak_count *)v11);
  }
  if (SBYTE7(v10) < 0) {
    operator delete(__p[0]);
  }
  if ((void)v15) {
    sub_100006AE0((std::__shared_weak_count *)v15);
  }
  if (SBYTE7(v14) < 0) {
    operator delete(v13[0]);
  }
  return a1;
}

void sub_1000478FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_10003F540((uint64_t)&a9);
  sub_10003F540((uint64_t)&a16);
  sub_10003F540(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_100047920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100003600((unsigned char *)v6, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 8);
    *(void *)(v6 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v6 = v7;
  }
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)a3;
  unint64_t v9 = (unsigned char *)(a1 + 64);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_100003600(v9, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v10 = *(_OWORD *)(a3 + 8);
    *(void *)(a1 + 80) = *(void *)(a3 + 24);
    *(_OWORD *)unint64_t v9 = v10;
  }
  uint64_t v11 = *(void *)(a3 + 40);
  *(void *)(a1 + 88) = *(void *)(a3 + 32);
  *(void *)(a1 + 96) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 104) = *(void *)(a3 + 48);
  return a1;
}

void sub_1000479F8(_Unwind_Exception *a1)
{
  sub_10003F540(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100047A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  sub_100047A60(a1 + 56, a2, a3);
  return a1;
}

void sub_100047A4C(_Unwind_Exception *a1)
{
  sub_10003F540(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100047A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100003600((unsigned char *)v6, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 8);
    *(void *)(v6 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v6 = v7;
  }
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)a3;
  unint64_t v9 = (unsigned char *)(a1 + 64);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_100003600(v9, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v10 = *(_OWORD *)(a3 + 8);
    *(void *)(a1 + 80) = *(void *)(a3 + 24);
    *(_OWORD *)unint64_t v9 = v10;
  }
  uint64_t v11 = *(void *)(a3 + 40);
  *(void *)(a1 + 88) = *(void *)(a3 + 32);
  *(void *)(a1 + 96) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 104) = *(void *)(a3 + 48);
  return a1;
}

void sub_100047B38(_Unwind_Exception *a1)
{
  sub_10003F540(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100047B4C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_1000443C4(*a1) != 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    uint64_t v10 = sub_100047C48(*a1);
    int v11 = v9;
    sub_100047D50(exception, &v10);
    void *exception = &off_10007D268;
  }
  uint64_t result = sub_1000473A4(*a1);
  if (*((char *)result + 23) < 0)
  {
    uint64_t v6 = (void *)*result;
    unint64_t v7 = result[1];
    return (uint64_t *)sub_100003600((unsigned char *)a2, v6, v7);
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = result[2];
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void sub_100047C34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100047C48(uint64_t a1)
{
  if (!*(unsigned char *)a1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0)
    {
      sub_100003600(&v5, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }
    else
    {
      long long v5 = *(_OWORD *)(a1 + 8);
      uint64_t v6 = *(void *)(a1 + 24);
    }
    sub_100043688(exception, (uint64_t)&v5);
  }
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    return *(void *)(**(void **)v2 + 4);
  }
  else {
    return -1;
  }
}

void sub_100047D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void *sub_100047D50(void *a1, _DWORD *a2)
{
  sub_100003470(__p, "bad conversion");
  sub_100043924((uint64_t)a1, a2, (uint64_t)__p);
  *a1 = off_10007D310;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10007D390;
  return a1;
}

void sub_100047DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100047E04(YAML::BadConversion *a1)
{
  YAML::BadConversion::~BadConversion(a1);
  operator delete();
}

void *sub_100047E3C(void *result, long long *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_100003600((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(unsigned char *)(v4 + 24) = *((unsigned char *)a2 + 24);
  v3[1] = v4 + 32;
  return result;
}

void sub_100047EA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100047EAC(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_100003974();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = sub_100029C14(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = &v10[32 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[32 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_100003600(v11, *(void **)a2, *((void *)a2 + 1));
    int v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)int v11 = v12;
  }
  v10[32 * v4 + 24] = *((unsigned char *)a2 + 24);
  uint64_t v16 = v11 + 32;
  sub_100046990(a1, v15);
  uint64_t v13 = a1[1];
  sub_100046B38((uint64_t)v15);
  return v13;
}

void sub_100047FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100046B38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100047FBC()
{
  sub_100003470(qword_100080768, "categories");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_100080768, (void *)&_mh_execute_header);
  sub_100003470(&qword_100080780, "allowUnbounded");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100080780, (void *)&_mh_execute_header);
  sub_100003470(qword_100080798, "locales");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_100080798, (void *)&_mh_execute_header);
}

void sub_10004807C(uint64_t a1)
{
  sub_100003470(v4, "validate");
  sub_100003470(__p, "Validate one or more CAT files.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1000480F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100048128(long long **a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3) < 3 || sub_10003B18C())
  {
    sub_10003B17C(a2);
    sub_100003470(&v54, "\n  <EXECUTABLE> <COMMAND> --templateDir <dir> [--schema <type>] [--catId <id>] [--locale <locale>] [--visualCatId <id>]\n          [--noCheckSnippetDialogIds] [--sourceLocaleDialogIds <ids>] [--xcode] [--quiet] [--errors] [--pedantic]\n\n      If --catId or --visualCatId is specified, then validate the specified CAT file.\n      If --locale is also defined then only check that locale, otherwise check all locales.\n\n      If --schema is specified, then validate the specified type name.\n\n      If none of --catId, --visualCatId, or --schema is specified, then find and validate\n      all schema files and all CAT files under the template directory. If --locale is also defined\n      then only check that locale for each CAT file, otherwise check all locales for all CAT files.\n\n      If --noCheckSnippetDialogIds is specified, do not check for matching dialog IDs in \"UsedForSnippet\" CATs.\n\n      If --sourceLocaleDialogIds is specified, <ids> is expected to be a comma-separated set of dialog IDs to\n      use instead of reading from the source locale file.\n"
      "\n"
      "      If --xcode is specified, output is generated in a format that can be used with Xcode's\n"
      "      Build Phases > Run Script functionality to highlight errors/warnings within Xcode's UI.\n"
      "      As expected by Xcode, the exit code is 1 if there are errors, but 0 if there are only warnings.\n"
      "\n"
      "      If --quiet is specified, no output is generated. The exit code indicates success or failure.\n"
      "\n"
      "      If --errors is specified, no warnings are generated or contribute to the exit code (disables pedantic mode)."
      "\n"
      "\n"
      "      If --pedantic is specified, additional checks are performed for opportunities for improvement (\"nits\").\n");
    sub_100003470(v61, "validate");
    sub_10003B430();
    if ((char)v62 < 0) {
      operator delete(v61[0]);
    }
    if (SHIBYTE(v56) < 0) {
      operator delete(v54);
    }
    return 0;
  }
  LODWORD(v54) = 0;
  BYTE4(v54) = 1;
  v55[0] = 0;
  char v57 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v58 = 0;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3) > 3)
  {
    sub_100003470(__p, "--templateDir");
    siri::dialogengine::GetOption();
    siri::dialogengine::ExpandPath();
    if ((char)v53 < 0) {
      operator delete((void *)v52[0]);
    }
    if ((char)v51 < 0) {
      operator delete(__p[0]);
    }
    sub_100003470(__p, "--schema");
    siri::dialogengine::GetOption();
    if ((char)v51 < 0) {
      operator delete(__p[0]);
    }
    sub_100003470(v48, "--catId");
    siri::dialogengine::GetOption();
    if ((char)v49 < 0) {
      operator delete(v48[0]);
    }
    sub_100003470(v46, "--visualCatId");
    siri::dialogengine::GetOption();
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    sub_100003470(v44, "--locale");
    siri::dialogengine::GetOption();
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    sub_100003470(v44, "--noCheckSnippetDialogIds");
    int v6 = siri::dialogengine::OptionExists();
    sub_10004BD40((uint64_t)&v54, (const char *)(v6 ^ 1u));
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    v44[0] = 0;
    v44[1] = 0;
    uint64_t v45 = 0;
    sub_100003898((char *)v44, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
    sub_100003470(&v38, "--sourceLocaleDialogIds");
    siri::dialogengine::PopStringSetOption();
    sub_10004BDA0((uint64_t)&v54, (uint64_t)v41);
    if (v43) {
      sub_10000A3E0((uint64_t)v41, v42);
    }
    if (v40 < 0) {
      operator delete(v38);
    }
    sub_100003470(&v38, "--xcode");
    uint64_t v7 = (const char *)siri::dialogengine::OptionExists();
    sub_10004BCE0((uint64_t)&v54, v7);
    if (v40 < 0) {
      operator delete(v38);
    }
    sub_100003470(&v38, "--quiet");
    uint64_t v8 = (const char *)siri::dialogengine::OptionExists();
    sub_10004BC88((uint64_t)&v54, v8);
    if (v40 < 0) {
      operator delete(v38);
    }
    sub_100003470(&v38, "--errors");
    unint64_t v9 = (const char *)siri::dialogengine::OptionExists();
    sub_10004BBB0(&v54, v9);
    if (v40 < 0) {
      operator delete(v38);
    }
    sub_100003470(&v38, "--pedantic");
    uint64_t v10 = (const char *)siri::dialogengine::OptionExists();
    sub_10004BC10((uint64_t)&v54, v10);
    if (v40 < 0) {
      operator delete(v38);
    }
    unint64_t v11 = v62;
    if ((v62 & 0x80u) != 0) {
      unint64_t v11 = (unint64_t)v61[1];
    }
    if (!v11)
    {
      sub_100003470(&v38, "--templateDir required for catutil validate");
      sub_100003470(&v35, (char *)&unk_10006DFE2);
      BOOL v4 = sub_10004BDC8(&v54, (uint64_t)&v38, (const void **)&v35, 0);
      if (v37 < 0) {
        operator delete(v35);
      }
      if (v40 < 0) {
        operator delete(v38);
      }
      goto LABEL_57;
    }
    unint64_t v12 = v53;
    if ((v53 & 0x80u) != 0) {
      unint64_t v12 = (unint64_t)v52[1];
    }
    if (v12)
    {
      BOOL v13 = sub_100048FFC(&v54);
LABEL_56:
      BOOL v4 = v13;
LABEL_57:
      char v38 = v44;
      sub_100003B14((void ***)&v38);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      if ((char)v49 < 0) {
        operator delete(v48[0]);
      }
      if ((char)v51 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_63;
    }
    unint64_t v14 = v51;
    if ((v51 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)__p[1];
    }
    if (v14)
    {
      BOOL v13 = sub_100049468(&v54, (uint64_t)v61, (uint64_t)__p, (uint64_t)v46);
      goto LABEL_56;
    }
    unint64_t v15 = v49;
    if ((v49 & 0x80u) != 0) {
      unint64_t v15 = (unint64_t)v48[1];
    }
    if (v15)
    {
      BOOL v13 = sub_100049694();
      goto LABEL_56;
    }
    sub_100003470(v33, "schema");
    siri::dialogengine::JoinPath();
    siri::dialogengine::ListDir();
    if (v37 < 0) {
      operator delete(v35);
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    uint64_t v16 = (char *)v38;
    uint64_t v17 = v39;
    if (v38 != v39)
    {
      do
      {
        sub_100003470(&v35, "catschema");
        HasExtensiouint64_t n = siri::dialogengine::HasExtension();
        int v19 = HasExtension;
        if (v37 < 0)
        {
          operator delete(v35);
          if (v19)
          {
LABEL_78:
            std::operator+<char>();
            sub_10004C1A4(&v54, (uint64_t)&v35);
            if (v37 < 0) {
              operator delete(v35);
            }
            siri::dialogengine::BaseName();
            sub_100048FFC(&v54);
            if (v37 < 0) {
              operator delete(v35);
            }
          }
        }
        else if (HasExtension)
        {
          goto LABEL_78;
        }
        v16 += 24;
      }
      while (v16 != v17);
    }
    unint64_t v35 = &v38;
    sub_100003B14((void ***)&v35);
    sub_100003470(v33, "dialog");
    siri::dialogengine::JoinPath();
    siri::dialogengine::ListDirRecursively();
    if (v37 < 0) {
      operator delete(v35);
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    long long v20 = (char *)v38;
    unint64_t v21 = v39;
    if (v38 == v39)
    {
LABEL_127:
      sub_100003470(v31, "visual");
      siri::dialogengine::JoinPath();
      siri::dialogengine::ListDirRecursively();
      if (v34 < 0) {
        operator delete(v33[0]);
      }
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      uint64_t v27 = (char *)v35;
      BOOL v28 = v36;
      if (v35 != v36)
      {
        do
        {
          if (siri::dialogengine::HasVisualCATExtension())
          {
            std::operator+<char>();
            sub_10004C1A4(&v54, (uint64_t)v33);
            if (v34 < 0) {
              operator delete(v33[0]);
            }
            siri::dialogengine::CatPathToId();
            sub_100049694();
            if (v34 < 0) {
              operator delete(v33[0]);
            }
          }
          siri::dialogengine::StringToLower();
          if (siri::dialogengine::HasVisualCATExtension()
            && (siri::dialogengine::HasVisualCATExtension() & 1) == 0)
          {
            sub_100003470(v31, "Visual CAT xml or binary file extension is not lower case");
            siri::dialogengine::JoinPath();
            sub_10004BDC8(&v54, (uint64_t)v31, (const void **)v29, 0);
            if (v30 < 0) {
              operator delete(v29[0]);
            }
            if (v32 < 0) {
              operator delete(v31[0]);
            }
          }
          if (v34 < 0) {
            operator delete(v33[0]);
          }
          v27 += 24;
        }
        while (v27 != v28);
      }
      BOOL v4 = sub_10004C22C((uint64_t)&v54);
      v33[0] = &v35;
      sub_100003B14((void ***)v33);
      unint64_t v35 = &v38;
      sub_100003B14((void ***)&v35);
      goto LABEL_57;
    }
    while (1)
    {
      sub_100003470(&v35, "cat");
      int v22 = siri::dialogengine::HasExtension();
      int v23 = v22;
      if (v37 < 0)
      {
        operator delete(v35);
        if (!v23) {
          goto LABEL_96;
        }
      }
      else if (!v22)
      {
        goto LABEL_96;
      }
      std::operator+<char>();
      sub_10004C1A4(&v54, (uint64_t)&v35);
      if (v37 < 0) {
        operator delete(v35);
      }
      siri::dialogengine::CatPathToId();
      sub_100049468(&v54, (uint64_t)v61, (uint64_t)&v35, (uint64_t)v46);
      if (v37 < 0) {
        operator delete(v35);
      }
LABEL_96:
      siri::dialogengine::StringToLower();
      sub_100003470(v33, ".cat.xml");
      if (siri::dialogengine::StringEndsWith())
      {
        int v24 = 1;
      }
      else
      {
        sub_100003470(v31, ".cat.bin");
        int v24 = siri::dialogengine::StringEndsWith();
        if (v32 < 0) {
          operator delete(v31[0]);
        }
      }
      if (v34 < 0)
      {
        operator delete(v33[0]);
        if (v24)
        {
LABEL_104:
          siri::dialogengine::DirName();
          sub_100003470(v31, "cat");
          char v25 = siri::dialogengine::HasExtension();
          if (v32 < 0) {
            operator delete(v31[0]);
          }
          if ((v25 & 1) == 0)
          {
            sub_100003470(v31, "CAT xml or binary found outside of .cat file directory");
            siri::dialogengine::JoinPath();
            sub_10004BDC8(&v54, (uint64_t)v31, (const void **)v29, 0);
            if (v30 < 0) {
              operator delete(v29[0]);
            }
            if (v32 < 0) {
              operator delete(v31[0]);
            }
          }
          sub_100003470(v31, ".cat.xml");
          if (siri::dialogengine::StringEndsWith())
          {
            char v26 = 1;
          }
          else
          {
            sub_100003470(v29, ".cat.bin");
            char v26 = siri::dialogengine::StringEndsWith();
            if (v30 < 0) {
              operator delete(v29[0]);
            }
          }
          if (v32 < 0) {
            operator delete(v31[0]);
          }
          if ((v26 & 1) == 0)
          {
            sub_100003470(v31, "CAT xml or binary file extension is not lower case");
            siri::dialogengine::JoinPath();
            sub_10004BDC8(&v54, (uint64_t)v31, (const void **)v29, 0);
            if (v30 < 0) {
              operator delete(v29[0]);
            }
            if (v32 < 0) {
              operator delete(v31[0]);
            }
          }
          if (v34 < 0) {
            operator delete(v33[0]);
          }
        }
      }
      else if (v24)
      {
        goto LABEL_104;
      }
      if (v37 < 0) {
        operator delete(v35);
      }
      v20 += 24;
      if (v20 == v21) {
        goto LABEL_127;
      }
    }
  }
  sub_100003470(v61, "Insufficient arguments specified for catutil validate");
  sub_100003470(v52, (char *)&unk_10006DFE2);
  BOOL v4 = sub_10004BDC8(&v54, (uint64_t)v61, v52, 0);
LABEL_63:
  if ((char)v53 < 0) {
    operator delete((void *)v52[0]);
  }
  if ((char)v62 < 0) {
    operator delete(v61[0]);
  }
  if (v57) {
    sub_10000A3E0((uint64_t)v55, v56);
  }
  return v4;
}

void sub_100048C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  a15 = &a18;
  sub_100003B14((void ***)&a15);
  a18 = &a21;
  sub_100003B14((void ***)&a18);
  a18 = &a28;
  sub_100003B14((void ***)&a18);
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (*(char *)(v49 - 177) < 0) {
    operator delete(*(void **)(v49 - 200));
  }
  if (*(char *)(v49 - 89) < 0) {
    operator delete(*(void **)(v49 - 112));
  }
  if (*(unsigned char *)(v49 - 144)) {
    sub_10000A3E0(v48, *(char **)(v49 - 160));
  }
  _Unwind_Resume(a1);
}

void sub_100048FB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x100048F48);
}

void sub_100048FCC()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  if (*(char *)(v0 - 153) < 0) {
    operator delete(*(void **)(v0 - 176));
  }
  JUMPOUT(0x100048FACLL);
}

BOOL sub_100048FFC(unsigned char *a1)
{
  siri::dialogengine::GetTemplateDirs();
  siri::dialogengine::Context::Context();
  v19[0] = v21;
  sub_10000C39C((void ***)v19);
  siri::dialogengine::BaseName();
  sub_100003470(v19, "yaml");
  if (siri::dialogengine::HasExtension())
  {
    HasExtensiouint64_t n = 1;
  }
  else
  {
    sub_100003470(__p, "catschema");
    HasExtensiouint64_t n = siri::dialogengine::HasExtension();
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete(v19[0]);
    if (!HasExtension) {
      goto LABEL_12;
    }
  }
  else if (!HasExtension)
  {
    goto LABEL_12;
  }
  siri::dialogengine::RemoveExtension();
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  *(_OWORD *)unint64_t v21 = *(_OWORD *)v19;
  uint64_t v22 = v20;
LABEL_12:
  siri::dialogengine::ObjectRegistry::GetObject();
  if (v15)
  {
    siri::dialogengine::ObjectSchema::Validate(v15, (siri::dialogengine::Context *)v23);
    siri::dialogengine::Context::GetSchemaErrors((uint64_t *)v19, (siri::dialogengine::Context *)v23);
    if (v19[0] == v19[1])
    {
      std::operator+<char>();
      BOOL v11 = sub_10004C1A4(a1, (uint64_t)__p);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      std::to_string(&v13, 0xAAAAAAAAAAAAAAABLL * (((char *)v19[1] - (char *)v19[0]) >> 3));
      char v3 = std::string::append(&v13, " error(s) for ");
      long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v4;
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
      v3->__r_.__value_.__r.__words[0] = 0;
      if (v22 >= 0) {
        char v5 = v21;
      }
      else {
        char v5 = (void **)v21[0];
      }
      if (v22 >= 0) {
        std::string::size_type v6 = HIBYTE(v22);
      }
      else {
        std::string::size_type v6 = (std::string::size_type)v21[1];
      }
      uint64_t v7 = std::string::append(&v14, (const std::string::value_type *)v5, v6);
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v18 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      sub_10004C1A4(a1, (uint64_t)__p);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      unint64_t v9 = (char *)v19[0];
      uint64_t v10 = (char *)v19[1];
      while (v9 != v10)
      {
        siri::dialogengine::ObjectSchema::GetFilename((uint64_t *)__p, v15);
        sub_10004BDC8(a1, (uint64_t)v9, (const void **)__p, 0);
        if (SHIBYTE(v18) < 0) {
          operator delete(__p[0]);
        }
        v9 += 24;
      }
      BOOL v11 = sub_10004C22C((uint64_t)a1);
    }
    __p[0] = v19;
    sub_100003B14((void ***)__p);
  }
  else
  {
    std::operator+<char>();
    sub_100003470(__p, (char *)&unk_10006DFE2);
    BOOL v11 = sub_10004BDC8(a1, (uint64_t)v19, (const void **)__p, 0);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
  }
  if (v16) {
    sub_100006AE0(v16);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v23);
  return v11;
}

void sub_10004931C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void **__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  std::string __p = &a31;
  sub_100003B14(&__p);
  if (a24) {
    sub_100006AE0(a24);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a43);
  _Unwind_Resume(a1);
}

BOOL sub_100049468(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned __int8 *)(a4 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a4 + 8);
  }
  if (v5)
  {
    return sub_1000498AC();
  }
  else
  {
    siri::dialogengine::CatIdToPath();
    siri::dialogengine::JoinPath();
    if (v13 < 0) {
      operator delete(__p);
    }
    if (siri::dialogengine::DirExists())
    {
      siri::dialogengine::GetCatLocales();
      uint64_t v7 = (char *)__p;
      if (__p == v12)
      {
        sub_100003470(v9, "Cannot find any locale files in CAT directory");
        BOOL v8 = sub_10004C17C(a1, (uint64_t)v9, (const void **)v14, 0);
        if (v10 < 0) {
          operator delete(v9[0]);
        }
      }
      else
      {
        do
        {
          sub_1000498AC();
          v7 += 24;
        }
        while (v7 != v12);
        BOOL v8 = sub_10004C22C((uint64_t)a1);
      }
      v9[0] = &__p;
      sub_100003B14((void ***)v9);
    }
    else
    {
      sub_100003470(&__p, "CAT does not exist");
      BOOL v8 = sub_10004BDC8(a1, (uint64_t)&__p, (const void **)v14, 0);
      if (v13 < 0) {
        operator delete(__p);
      }
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    return v8;
  }
}

void sub_10004960C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = &a16;
  sub_100003B14(&__p);
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100049694()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  char v3 = (unsigned __int8 *)v0;
  siri::dialogengine::GetTemplateDirs();
  if (*((char *)v2 + 23) < 0)
  {
    sub_100003600(&__dst, *(void **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long __dst = *v2;
    uint64_t v13 = *((void *)v2 + 2);
  }
  siri::dialogengine::FindVisualFile();
  unint64_t v4 = v11;
  if ((v11 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)v10[1];
  }
  if (v4)
  {
    siri::dialogengine::Context::Context((siri::dialogengine::Context *)v8);
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v7);
    siri::dialogengine::RequestInfo::SetTemplateDirs();
    siri::dialogengine::RequestInfo::SetVisualPath();
    siri::dialogengine::RequestInfo::SetRequestType();
    siri::dialogengine::Context::SetRequestInfo();
    BOOL v5 = sub_100049CFC(v3, (siri::dialogengine::Context *)v8, (uint64_t)&__dst);
    sub_10002A454((uint64_t)v7);
    siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v8);
  }
  else
  {
    std::operator+<char>();
    BOOL v5 = sub_10004BDC8(v3, (uint64_t)v8, v10, 0);
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  if ((char)v11 < 0) {
    operator delete((void *)v10[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)__dst);
  }
  v8[0] = (void **)&v14;
  sub_10000C39C(v8);
  return v5;
}

void sub_100049820(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete(*(void **)v1);
  }
  if (*(char *)(v1 + 3535) < 0) {
    operator delete(*(void **)(v1 + 3512));
  }
  if (*(char *)(v1 + 3559) < 0) {
    operator delete(*(void **)(v1 + 3536));
  }
  *(void *)uint64_t v1 = v2 - 56;
  sub_10000C39C((void ***)&STACK[0x200]);
  _Unwind_Resume(a1);
}

BOOL sub_1000498AC()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  BOOL v5 = (unsigned __int8 *)v0;
  siri::dialogengine::GetTemplateDirs();
  if (*((char *)v4 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)v4 + 23);
  }
  else {
    size_t v6 = (size_t)v4[1];
  }
  p_dst = &__dst;
  sub_100008CC4((uint64_t)&__dst, v6 + 2);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)v4 + 23) >= 0) {
      BOOL v8 = v4;
    }
    else {
      BOOL v8 = *v4;
    }
    memmove(p_dst, v8, v6);
  }
  strcpy((char *)p_dst + v6, " (");
  int v9 = *(char *)(v2 + 23);
  if (v9 >= 0) {
    char v10 = (const std::string::value_type *)v2;
  }
  else {
    char v10 = *(const std::string::value_type **)v2;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(v2 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(v2 + 8);
  }
  unint64_t v12 = std::string::append(&__dst, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  char v14 = std::string::append(__p, ")");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v25 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v24 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::FindParamsFile();
  if (*(char *)(v2 + 23) < 0) {
    sub_100003600(&__dst, *(void **)v2, *(void *)(v2 + 8));
  }
  else {
    std::string __dst = *(std::string *)v2;
  }
  memset(__p, 0, 24);
  uint64_t v27 = (void **)__p;
  char v28 = 0;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
  __p[0].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__r.__words[0] + 24;
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)sub_100008D8C((uint64_t)&__p[0].__r_.__value_.__r.__words[2], (long long *)&__dst, v30, __p[0].__r_.__value_.__l.__data_);
  siri::dialogengine::FindLocaleFile();
  uint64_t v27 = (void **)__p;
  sub_100003B14(&v27);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  unint64_t v16 = v21;
  if ((v21 & 0x80u) != 0) {
    unint64_t v16 = (unint64_t)v20[1];
  }
  if (v16)
  {
    siri::dialogengine::Context::Context((siri::dialogengine::Context *)__p);
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__dst);
    siri::dialogengine::RequestInfo::SetTemplateDirs();
    siri::dialogengine::RequestInfo::SetParamsPath();
    siri::dialogengine::RequestInfo::SetLocalePath();
    LODWORD(v27) = 0;
    siri::dialogengine::RequestInfo::SetRequestType();
    siri::dialogengine::Context::SetRequestInfo();
    BOOL v17 = sub_100049CFC(v5, (siri::dialogengine::Context *)__p, (uint64_t)v24);
    sub_10002A454((uint64_t)&__dst);
    siri::dialogengine::Context::~Context((siri::dialogengine::Context *)__p);
  }
  else
  {
    std::operator+<char>();
    BOOL v17 = sub_10004BDC8(v5, (uint64_t)__p, (const void **)v20, 0);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if ((char)v21 < 0) {
    operator delete(v20[0]);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[0]);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  sub_10000C39C((void ***)__p);
  return v17;
}

void sub_100049BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0xDD7]) < 0) {
    operator delete((void *)STACK[0xDC0]);
  }
  if (SLOBYTE(STACK[0xDEF]) < 0) {
    operator delete((void *)STACK[0xDD8]);
  }
  if (SLOBYTE(STACK[0xE07]) < 0) {
    operator delete((void *)STACK[0xDF0]);
  }
  std::string __p = &STACK[0xE08];
  sub_10000C39C((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_100049CFC(unsigned __int8 *a1, siri::dialogengine::Context *this, uint64_t a3)
{
  if (siri::dialogengine::Context::Load(this))
  {
    siri::dialogengine::Context::GetFile((uint64_t *)&v72, this);
    size_t v6 = v72;
    char v7 = sub_10004BD98((uint64_t)a1);
    siri::dialogengine::File::SetCheckSnippetDialogIds(v6, v7);
    sub_10004BDC0((uint64_t)a1);
    siri::dialogengine::File::SetSourceLocaleDialogIds();
    (*(void (**)(siri::dialogengine::File *, siri::dialogengine::Context *))(*(void *)v72 + 16))(v72, this);
    siri::dialogengine::File::GetValidationErrors((uint64_t *)&v74, v72);
    if (v74.__r_.__value_.__r.__words[0] == v74.__r_.__value_.__l.__size_)
    {
      std::operator+<char>();
      sub_10004C1A4(a1, (uint64_t)__p);
      if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_62:
        if ((sub_10004BC08(a1) & 1) == 0)
        {
          siri::dialogengine::File::GetValidationWarnings((uint64_t *)&v69, v72);
          if (v69 != v70)
          {
            std::to_string(&v75, 0x2E8BA2E8BA2E8BA3 * ((v70 - v69) >> 3));
            char v30 = std::string::append(&v75, " validation warning(s) for ");
            long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
            v76.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v31;
            v30->__r_.__value_.__l.__size_ = 0;
            v30->__r_.__value_.__r.__words[2] = 0;
            v30->__r_.__value_.__r.__words[0] = 0;
            int v32 = *(char *)(a3 + 23);
            if (v32 >= 0) {
              std::string::size_type v33 = (const std::string::value_type *)a3;
            }
            else {
              std::string::size_type v33 = *(const std::string::value_type **)a3;
            }
            if (v32 >= 0) {
              std::string::size_type v34 = *(unsigned __int8 *)(a3 + 23);
            }
            else {
              std::string::size_type v34 = *(void *)(a3 + 8);
            }
            unint64_t v35 = std::string::append(&v76, v33, v34);
            long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
            __p[0].__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v36;
            v35->__r_.__value_.__l.__size_ = 0;
            v35->__r_.__value_.__r.__words[2] = 0;
            v35->__r_.__value_.__r.__words[0] = 0;
            sub_10004C1A4(a1, (uint64_t)__p);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v76.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__r_.__value_.__l.__data_);
            }
            siri::dialogengine::Context::GetRequestInfo((uint64_t *)__p, this);
            siri::dialogengine::RequestInfo::GetParamsPath((uint64_t *)&v65, (siri::dialogengine::RequestInfo *)__p);
            sub_10002A454((uint64_t)__p);
            sub_10004A988(this, a1, (uint64_t *)v63);
            char v37 = v69;
            for (uint64_t i = v70; v37 != i; v37 = (siri::dialogengine::LineNumberBase *)((char *)v37 + 88))
            {
              siri::dialogengine::LineNumberBase::GetFilename((uint64_t *)&v76, v37);
              sub_100003470(&v75, "_params.cat");
              int v39 = siri::dialogengine::StringContains();
              if (v39) {
                char v40 = &v65;
              }
              else {
                char v40 = v63;
              }
              std::string::size_type v41 = &v67;
              if (!v39) {
                std::string::size_type v41 = &v64;
              }
              if (*v41 < 0)
              {
                long long v42 = *v40;
                if (v39) {
                  char v43 = &v65;
                }
                else {
                  char v43 = v63;
                }
                sub_100003600(__p, v42, (unint64_t)v43[1]);
              }
              else
              {
                __p[0] = *(std::string *)v40;
              }
              if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v75.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v76.__r_.__value_.__l.__data_);
              }
              siri::dialogengine::ValidationEntry::GetText((uint64_t *)&v76, v37);
              unint64_t LineNumber = siri::dialogengine::LineNumberBase::GetLineNumber(v37);
              sub_10004C17C(a1, (uint64_t)&v76, (const void **)&__p[0].__r_.__value_.__l.__data_, LineNumber);
              if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v76.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p[0].__r_.__value_.__l.__data_);
              }
            }
            if (v64 < 0) {
              operator delete(v63[0]);
            }
            if (v67 < 0) {
              operator delete(v65);
            }
          }
          if (sub_10004BC68(a1))
          {
            siri::dialogengine::File::GetValidationNits((uint64_t *)&v65, v72);
            if (v65 != v66)
            {
              std::to_string(&v75, 0x2E8BA2E8BA2E8BA3 * ((v66 - (siri::dialogengine::LineNumberBase *)v65) >> 3));
              uint64_t v45 = std::string::append(&v75, " validation nit(s) for ");
              long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
              v76.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v46;
              v45->__r_.__value_.__l.__size_ = 0;
              v45->__r_.__value_.__r.__words[2] = 0;
              v45->__r_.__value_.__r.__words[0] = 0;
              int v47 = *(char *)(a3 + 23);
              if (v47 >= 0) {
                uint64_t v48 = (const std::string::value_type *)a3;
              }
              else {
                uint64_t v48 = *(const std::string::value_type **)a3;
              }
              if (v47 >= 0) {
                std::string::size_type v49 = *(unsigned __int8 *)(a3 + 23);
              }
              else {
                std::string::size_type v49 = *(void *)(a3 + 8);
              }
              char v50 = std::string::append(&v76, v48, v49);
              long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
              __p[0].__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v51;
              v50->__r_.__value_.__l.__size_ = 0;
              v50->__r_.__value_.__r.__words[2] = 0;
              v50->__r_.__value_.__r.__words[0] = 0;
              sub_10004C1A4(a1, (uint64_t)__p);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v76.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v75.__r_.__value_.__l.__data_);
              }
              siri::dialogengine::Context::GetRequestInfo((uint64_t *)__p, this);
              siri::dialogengine::RequestInfo::GetParamsPath((uint64_t *)v63, (siri::dialogengine::RequestInfo *)__p);
              sub_10002A454((uint64_t)__p);
              sub_10004A988(this, a1, (uint64_t *)v61);
              int64_t v52 = (siri::dialogengine::LineNumberBase *)v65;
              unsigned __int8 v53 = v66;
              if (v65 != v66)
              {
                do
                {
                  siri::dialogengine::LineNumberBase::GetFilename((uint64_t *)&v76, v52);
                  sub_100003470(&v75, "_params.cat");
                  int v54 = siri::dialogengine::StringContains();
                  if (v54) {
                    uint64_t v55 = v63;
                  }
                  else {
                    uint64_t v55 = v61;
                  }
                  long long v56 = &v64;
                  if (!v54) {
                    long long v56 = &v62;
                  }
                  if (*v56 < 0)
                  {
                    char v57 = *v55;
                    if (v54) {
                      uint64_t v58 = v63;
                    }
                    else {
                      uint64_t v58 = v61;
                    }
                    sub_100003600(__p, v57, (unint64_t)v58[1]);
                  }
                  else
                  {
                    __p[0] = *(std::string *)v55;
                  }
                  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v75.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v76.__r_.__value_.__l.__data_);
                  }
                  siri::dialogengine::ValidationEntry::GetText((uint64_t *)&v76, v52);
                  unint64_t v59 = siri::dialogengine::LineNumberBase::GetLineNumber(v52);
                  sub_10004C190(a1, (uint64_t)&v76, (const void **)&__p[0].__r_.__value_.__l.__data_, v59);
                  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v76.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p[0].__r_.__value_.__l.__data_);
                  }
                  int64_t v52 = (siri::dialogengine::LineNumberBase *)((char *)v52 + 88);
                }
                while (v52 != v53);
              }
              if (v62 < 0) {
                operator delete(v61[0]);
              }
              if (v64 < 0) {
                operator delete(v63[0]);
              }
            }
            __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
            sub_100022808((void ***)__p);
          }
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
          sub_100022808((void ***)__p);
        }
        BOOL v29 = sub_10004C22C((uint64_t)a1);
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
        sub_100022808((void ***)__p);
        if (v73) {
          sub_100006AE0(v73);
        }
        return v29;
      }
      char v23 = (siri::dialogengine::LineNumberBase *)__p[0].__r_.__value_.__r.__words[0];
    }
    else
    {
      std::to_string(&v75, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v74.__r_.__value_.__l.__size_ - v74.__r_.__value_.__r.__words[0]) >> 3));
      BOOL v8 = std::string::append(&v75, " validation error(s) for ");
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      int v10 = *(char *)(a3 + 23);
      if (v10 >= 0) {
        std::string::size_type v11 = (const std::string::value_type *)a3;
      }
      else {
        std::string::size_type v11 = *(const std::string::value_type **)a3;
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v12 = *(void *)(a3 + 8);
      }
      long long v13 = std::string::append(&v76, v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      sub_10004C1A4(a1, (uint64_t)__p);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::Context::GetRequestInfo((uint64_t *)__p, this);
      siri::dialogengine::RequestInfo::GetParamsPath((uint64_t *)&v69, (siri::dialogengine::RequestInfo *)__p);
      sub_10002A454((uint64_t)__p);
      sub_10004A988(this, a1, (uint64_t *)&v65);
      std::string::size_type size = v74.__r_.__value_.__l.__size_;
      for (std::string::size_type j = (siri::dialogengine::LineNumberBase *)v74.__r_.__value_.__r.__words[0];
            j != (siri::dialogengine::LineNumberBase *)size;
            std::string::size_type j = (siri::dialogengine::LineNumberBase *)((char *)j + 88))
      {
        siri::dialogengine::LineNumberBase::GetFilename((uint64_t *)&v76, j);
        sub_100003470(&v75, "_params.cat");
        int v17 = siri::dialogengine::StringContains();
        if (v17) {
          std::string::size_type v18 = (void **)&v69;
        }
        else {
          std::string::size_type v18 = &v65;
        }
        int v19 = &v71;
        if (!v17) {
          int v19 = &v67;
        }
        if (*v19 < 0)
        {
          uint64_t v20 = *v18;
          if (v17) {
            unsigned __int8 v21 = (void **)&v69;
          }
          else {
            unsigned __int8 v21 = &v65;
          }
          sub_100003600(__p, v20, (unint64_t)v21[1]);
        }
        else
        {
          __p[0] = *(std::string *)v18;
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::ValidationEntry::GetText((uint64_t *)&v76, j);
        unint64_t v22 = siri::dialogengine::LineNumberBase::GetLineNumber(j);
        sub_10004BDC8(a1, (uint64_t)&v76, (const void **)&__p[0].__r_.__value_.__l.__data_, v22);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
      }
      if (v67 < 0) {
        operator delete(v65);
      }
      if ((v71 & 0x80000000) == 0) {
        goto LABEL_62;
      }
      char v23 = v69;
    }
    operator delete(v23);
    goto LABEL_62;
  }
  std::operator+<char>();
  siri::dialogengine::Context::GetError((uint64_t *)&v76, this);
  std::string::size_type v24 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v24 = v76.__r_.__value_.__l.__size_;
  }
  if (v24)
  {
    std::operator+<char>();
    std::string::size_type v25 = std::string::append(&v74, "]");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = &v75;
    }
    else {
      uint64_t v27 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = v75.__r_.__value_.__l.__size_;
    }
    std::string::append(__p, (const std::string::value_type *)v27, v28);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
  }
  sub_10004A988(this, a1, (uint64_t *)&v75);
  BOOL v29 = sub_10004BDC8(a1, (uint64_t)__p, (const void **)&v75.__r_.__value_.__l.__data_, 0);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  return v29;
}

void sub_10004A5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  *(void *)(v33 - 144) = &a22;
  sub_100022808((void ***)(v33 - 144));
  *(void *)(v33 - 144) = v33 - 208;
  sub_100022808((void ***)(v33 - 144));
  *(void *)(v33 - 144) = v33 - 168;
  sub_100022808((void ***)(v33 - 144));
  unint64_t v35 = *(std::__shared_weak_count **)(v33 - 176);
  if (v35) {
    sub_100006AE0(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10004A988@<X0>(siri::dialogengine::Context *this@<X1>, unsigned char *a2@<X0>, uint64_t *a3@<X8>)
{
  siri::dialogengine::Context::GetRequestInfo(v14, this);
  Requestint Type = siri::dialogengine::RequestInfo::GetRequestType((siri::dialogengine::RequestInfo *)v14);
  if (RequestType == 1)
  {
    siri::dialogengine::RequestInfo::GetVisualPath((siri::dialogengine::RequestInfo *)v14);
  }
  else if (RequestType)
  {
    siri::dialogengine::RequestInfo::GetRequestTypeString((uint64_t *)&v11, (siri::dialogengine::RequestInfo *)v14);
    size_t v6 = std::string::insert(&v11, 0, "Unknown request type: ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string::size_type v12 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_100003470(__p, (char *)&unk_10006DFE2);
    sub_10004BDC8(a2, (uint64_t)v12, (const void **)__p, 0);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v13) < 0) {
      operator delete(v12[0]);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    sub_100003470(a3, (char *)&unk_10006DFE2);
  }
  else
  {
    siri::dialogengine::RequestInfo::GetLocalePath(a3, (siri::dialogengine::RequestInfo *)v14);
  }
  return sub_10002A454((uint64_t)v14);
}

void sub_10004AAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_10002A454((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_10004AB00(uint64_t a1)
{
  sub_100003470(v4, "upgrade");
  sub_100003470(__p, "Upgrade the version of a CAT file.");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10004AB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004ABAC(void *a1, uint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 6 || sub_10003B18C())
  {
    sub_10003B17C(a2);
    sub_100003470(__p, "\n  <EXECUTABLE> <COMMAND> --version <toVersion> --templateDir <dir> [--catId <id>] [--debug]\n\n      The --version option specifies the version to upgrade to. This can either be\n      a specific version number, or an iOS train name to use the highest supported\n      version number for that train.\n\n      If --templateDir and --catId are specified, then the specified CAT file will be upgraded.\n      If only --templateDir is specified, then all CAT files under that directory will be upgraded.\n\n      The --debug argument will cause DialogEngine logging to be output if you need more\n      detail for why an upgrade failed.\n");
    sub_100003470(v93, "upgrade");
    sub_10003B430();
    if (v94 < 0) {
      operator delete(v93[0]);
    }
    if (SHIBYTE(v81) < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  sub_100003470(__p, "--debug");
  int v6 = siri::dialogengine::OptionExists();
  if (SHIBYTE(v81) < 0) {
    operator delete(__p[0]);
  }
  if (v6)
  {
    siri::dialogengine::Log::SetLogDebugMessages((siri::dialogengine::Log *)1, v5);
    siri::dialogengine::Log::SetOutputToStdout((siri::dialogengine::Log *)1, v7);
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Activate debug mode", v8);
  }
  sub_100003470(v93, "--templateDir");
  siri::dialogengine::GetOption();
  siri::dialogengine::ExpandPath();
  if (SHIBYTE(v81) < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  sub_100003470(__p, "--catId");
  siri::dialogengine::GetOption();
  if (SHIBYTE(v81) < 0) {
    operator delete(__p[0]);
  }
  sub_100003470(__p, "--version");
  siri::dialogengine::GetOption();
  if (SHIBYTE(v81) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = v79;
  if ((v79 & 0x80u) != 0) {
    uint64_t v10 = v78;
  }
  if (!v10)
  {
    std::string::size_type v65 = "--templateDir required for catutil validate";
LABEL_176:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v65, v9);
    uint64_t v3 = 0;
    goto LABEL_177;
  }
  if ((siri::dialogengine::DirExists() & 1) == 0)
  {
    std::string::size_type v65 = "--templateDir directory does note exist";
    goto LABEL_176;
  }
  siri::dialogengine::GetValidVersion();
  if (SHIBYTE(v73) < 0) {
    operator delete(v72[0]);
  }
  *(_OWORD *)int v72 = *(_OWORD *)__p;
  uint64_t v73 = v81;
  sub_100003470(v93, "dialog");
  siri::dialogengine::JoinPath();
  siri::dialogengine::ListDirRecursively();
  if (SHIBYTE(v81) < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  std::string v11 = v70;
  std::string::size_type v12 = v71;
  while (v11 != v12)
  {
    if (*((char *)v11 + 23) < 0)
    {
      sub_100003600(__dst, *(void **)v11, *((void *)v11 + 1));
    }
    else
    {
      long long v13 = *v11;
      uint64_t v69 = *((void *)v11 + 2);
      *(_OWORD *)std::string __dst = v13;
    }
    unint64_t v14 = v76;
    if ((v76 & 0x80u) != 0) {
      unint64_t v14 = v75;
    }
    if (v14)
    {
      siri::dialogengine::CatPathToId();
      if (v81 >= 0) {
        long long v15 = (void *)HIBYTE(v81);
      }
      else {
        long long v15 = __p[1];
      }
      unint64_t v16 = v76;
      if ((v76 & 0x80u) != 0) {
        unint64_t v16 = v75;
      }
      if (v15 != (void *)v16)
      {
        BOOL v23 = 1;
        if ((v81 & 0x8000000000000000) == 0) {
          goto LABEL_56;
        }
LABEL_59:
        operator delete(__p[0]);
        if (v23) {
          goto LABEL_170;
        }
        goto LABEL_62;
      }
      if ((v76 & 0x80u) == 0) {
        int v17 = (unsigned __int8 *)&v74;
      }
      else {
        int v17 = (unsigned __int8 *)v74;
      }
      if (v81 < 0)
      {
        std::string::size_type v25 = __p[0];
        int v26 = memcmp(__p[0], v17, (size_t)__p[1]);
        operator delete(v25);
        if (v26) {
          goto LABEL_170;
        }
        goto LABEL_62;
      }
      if (HIBYTE(v81))
      {
        uint64_t v18 = HIBYTE(v81) - 1;
        int v19 = __p;
        do
        {
          int v21 = *(unsigned __int8 *)v19;
          int v19 = (void **)((char *)v19 + 1);
          int v20 = v21;
          int v22 = *v17++;
          BOOL v23 = v20 != v22;
        }
        while (v20 == v22 && v18-- != 0);
        if ((v81 & 0x8000000000000000) == 0)
        {
LABEL_56:
          if (v23) {
            goto LABEL_170;
          }
          goto LABEL_62;
        }
        goto LABEL_59;
      }
    }
LABEL_62:
    siri::dialogengine::BaseName();
    sub_100003470(v93, "_params");
    char v27 = siri::dialogengine::StringStartsWith();
    if (v94 < 0) {
      operator delete(v93[0]);
    }
    if (SHIBYTE(v81) < 0)
    {
      operator delete(__p[0]);
      if (v27) {
        goto LABEL_170;
      }
    }
    else if (v27)
    {
      goto LABEL_170;
    }
    sub_100003470(__p, "xml");
    if (siri::dialogengine::HasExtension())
    {
      HasExtensiouint64_t n = 1;
    }
    else
    {
      sub_100003470(v93, "bin");
      HasExtensiouint64_t n = siri::dialogengine::HasExtension();
      if (v94 < 0) {
        operator delete(v93[0]);
      }
    }
    if (SHIBYTE(v81) < 0)
    {
      operator delete(__p[0]);
      if (HasExtension)
      {
LABEL_76:
        if (SHIBYTE(v73) < 0)
        {
          sub_100003600(v66, v72[0], (unint64_t)v72[1]);
        }
        else
        {
          *(_OWORD *)std::string::size_type v66 = *(_OWORD *)v72;
          uint64_t v67 = v73;
        }
        siri::dialogengine::StringToLower();
        sub_100003470(v93, ".cat.bin");
        int v29 = siri::dialogengine::StringEndsWith();
        if (v94 < 0) {
          operator delete(v93[0]);
        }
        if (SHIBYTE(v81) < 0) {
          operator delete(__p[0]);
        }
        sub_100003470(&v91, "dialog");
        siri::dialogengine::JoinPath();
        siri::dialogengine::JoinPath();
        if (SHIBYTE(v81) < 0) {
          operator delete(__p[0]);
        }
        if (v92 < 0) {
          operator delete(v91);
        }
        siri::dialogengine::DirName();
        siri::dialogengine::CatPathToId();
        siri::dialogengine::BaseName();
        siri::dialogengine::StringSplit();
        if (*((char *)__p[0] + 23) < 0)
        {
          sub_100003600(&v87, *(void **)__p[0], *((void *)__p[0] + 1));
        }
        else
        {
          long long v30 = *(_OWORD *)__p[0];
          uint64_t v88 = *((void *)__p[0] + 2);
          long long v87 = v30;
        }
        v83[0].__locale_ = (std::locale::__imp *)__p;
        sub_100003B14((void ***)v83);
        if (SHIBYTE(v86) < 0) {
          operator delete((void *)v85);
        }
        long long v85 = 0uLL;
        uint64_t v86 = 0;
        sub_100003470(&v82, "_params");
        if (v29) {
          long long v31 = std::string::append(&v82, ".cat.bin");
        }
        else {
          long long v31 = std::string::append(&v82, ".cat.xml");
        }
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        int64_t v84 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v83[0].__locale_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::JoinPath();
        if (SHIBYTE(v86) < 0) {
          operator delete((void *)v85);
        }
        long long v85 = *(_OWORD *)__p;
        uint64_t v86 = v81;
        HIBYTE(v81) = 0;
        LOBYTE(__p[0]) = 0;
        if (SHIBYTE(v84) < 0) {
          operator delete(v83[0].__locale_);
        }
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::Context::Context((siri::dialogengine::Context *)__p);
        if (siri::dialogengine::Context::LoadFiles())
        {
          siri::dialogengine::Context::GetFile((uint64_t *)&v82, (siri::dialogengine::Context *)__p);
          siri::dialogengine::File::GetFormatVersion((uint64_t *)v83, (siri::dialogengine::File *)v82.__r_.__value_.__l.__data_);
          if (v82.__r_.__value_.__l.__size_) {
            sub_100006AE0((std::__shared_weak_count *)v82.__r_.__value_.__l.__size_);
          }
          if ((siri::dialogengine::Context::UpgradeAndSave() & 1) == 0)
          {
            char v43 = sub_1000042E0(&std::cout, (uint64_t)"Failed to upgrade the CAT file: ", 32);
            uint64_t v44 = HIBYTE(v69);
            uint64_t v45 = __dst[0];
            long long v46 = __dst[1];
            BOOL v47 = v69 < 0;
            uint64_t v48 = __dst;
            goto LABEL_150;
          }
          uint64_t v33 = HIBYTE(v84);
          if (v84 >= 0) {
            locale = (std::locale::__imp *)HIBYTE(v84);
          }
          else {
            locale = v83[1].__locale_;
          }
          unint64_t v35 = (std::locale::__imp *)HIBYTE(v67);
          if (v67 < 0) {
            unint64_t v35 = (std::locale::__imp *)v66[1];
          }
          if (locale != v35) {
            goto LABEL_129;
          }
          if (v67 >= 0) {
            long long v36 = v66;
          }
          else {
            long long v36 = (void **)v66[0];
          }
          if (v84 < 0)
          {
            if (memcmp(v83[0].__locale_, v36, (size_t)v83[1].__locale_)) {
              goto LABEL_129;
            }
          }
          else if (HIBYTE(v84))
          {
            char v37 = v83;
            while (LOBYTE(v37->__locale_) == *(unsigned __int8 *)v36)
            {
              char v37 = (std::locale *)((char *)v37 + 1);
              long long v36 = (void **)((char *)v36 + 1);
              if (!--v33) {
                goto LABEL_142;
              }
            }
LABEL_129:
            std::string::size_type v49 = sub_1000042E0(&std::cout, (uint64_t)"Upgraded ", 9);
            if (v69 >= 0) {
              char v50 = __dst;
            }
            else {
              char v50 = (void **)__dst[0];
            }
            if (v69 >= 0) {
              uint64_t v51 = HIBYTE(v69);
            }
            else {
              uint64_t v51 = (uint64_t)__dst[1];
            }
            int64_t v52 = sub_1000042E0(v49, (uint64_t)v50, v51);
            unsigned __int8 v53 = sub_1000042E0(v52, (uint64_t)" from version ", 14);
            if (v84 >= 0) {
              int v54 = v83;
            }
            else {
              int v54 = v83[0].__locale_;
            }
            if (v84 >= 0) {
              uint64_t v55 = HIBYTE(v84);
            }
            else {
              uint64_t v55 = (uint64_t)v83[1].__locale_;
            }
            long long v56 = sub_1000042E0(v53, (uint64_t)v54, v55);
            char v43 = sub_1000042E0(v56, (uint64_t)" to version ", 12);
LABEL_149:
            uint64_t v44 = HIBYTE(v67);
            uint64_t v45 = v66[0];
            long long v46 = v66[1];
            BOOL v47 = v67 < 0;
            uint64_t v48 = v66;
LABEL_150:
            if (v47) {
              uint64_t v61 = (uint64_t)v45;
            }
            else {
              uint64_t v61 = (uint64_t)v48;
            }
            if (v47) {
              uint64_t v62 = (uint64_t)v46;
            }
            else {
              uint64_t v62 = v44;
            }
            long long v63 = sub_1000042E0(v43, v61, v62);
            std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(void *)(*v63 - 24)));
            char v64 = std::locale::use_facet((const std::locale *)&v82, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
            std::locale::~locale((std::locale *)&v82);
            std::ostream::put();
            std::ostream::flush();
            if (SHIBYTE(v84) < 0) {
              operator delete(v83[0].__locale_);
            }
LABEL_158:
            siri::dialogengine::Context::~Context((siri::dialogengine::Context *)__p);
            if (SHIBYTE(v86) < 0) {
              operator delete((void *)v85);
            }
            if (SHIBYTE(v88) < 0) {
              operator delete((void *)v87);
            }
            if (v90 < 0) {
              operator delete(v89);
            }
            if (v92 < 0) {
              operator delete(v91);
            }
            if (v94 < 0) {
              operator delete(v93[0]);
            }
            if (SHIBYTE(v67) < 0) {
              operator delete(v66[0]);
            }
            goto LABEL_170;
          }
LABEL_142:
          char v57 = sub_1000042E0(&std::cout, (uint64_t)"Skipping ", 9);
          if (v69 >= 0) {
            uint64_t v58 = __dst;
          }
          else {
            uint64_t v58 = (void **)__dst[0];
          }
          if (v69 >= 0) {
            uint64_t v59 = HIBYTE(v69);
          }
          else {
            uint64_t v59 = (uint64_t)__dst[1];
          }
          uint64_t v60 = sub_1000042E0(v57, (uint64_t)v58, v59);
          char v43 = sub_1000042E0(v60, (uint64_t)" - already version ", 19);
          goto LABEL_149;
        }
        char v38 = sub_1000042E0(&std::cout, (uint64_t)"Unable to read CAT file from: ", 30);
        if (v69 >= 0) {
          int v39 = __dst;
        }
        else {
          int v39 = (void **)__dst[0];
        }
        if (v69 >= 0) {
          uint64_t v40 = HIBYTE(v69);
        }
        else {
          uint64_t v40 = (uint64_t)__dst[1];
        }
        std::string::size_type v41 = sub_1000042E0(v38, (uint64_t)v39, v40);
        std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
        long long v42 = std::locale::use_facet(v83, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
        std::locale::~locale(v83);
        std::ostream::put();
        std::ostream::flush();
        goto LABEL_158;
      }
    }
    else if (HasExtension)
    {
      goto LABEL_76;
    }
LABEL_170:
    if (SHIBYTE(v69) < 0) {
      operator delete(__dst[0]);
    }
    std::string v11 = (long long *)((char *)v11 + 24);
  }
  __p[0] = &v70;
  sub_100003B14((void ***)__p);
  uint64_t v3 = 1;
LABEL_177:
  if (SHIBYTE(v73) < 0) {
    operator delete(v72[0]);
  }
  if ((char)v76 < 0) {
    operator delete(v74);
  }
  if ((char)v79 < 0) {
    operator delete(v77);
  }
  return v3;
}

void sub_10004B634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v43 - 89) < 0) {
    operator delete(*(void **)(v43 - 112));
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void sub_10004B95C(uint64_t a1)
{
  sub_100003470(v4, "assetdelivery validate");
  sub_100003470(__p, "Validate currently available Dialog updates (currently not functional).");
  sub_10003B258(a1, (uint64_t)v4, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10004B9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10004BA08(long long **a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_100003898((char *)&v8, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3) < 3 || (sub_10003B18C() & 1) != 0) {
    goto LABEL_9;
  }
  unint64_t v4 = (void *)(v8 + 48);
  int v5 = *(char *)(v8 + 71);
  if (v5 < 0)
  {
    if (*(void *)(v8 + 56) != 8) {
      goto LABEL_9;
    }
    unint64_t v4 = (void *)*v4;
  }
  else if (v5 != 8)
  {
    goto LABEL_9;
  }
  if (*v4 == 0x65746164696C6176)
  {
    BOOL v6 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) > 2;
    goto LABEL_14;
  }
LABEL_9:
  sub_10003B17C(a2);
  sub_100003470(v13, "\n  <EXECUTABLE> <COMMAND> validate [--errors]\n\n      Warnings are ignored when --errors is specified.\n");
  sub_100003470(&__p, "assetdelivery");
  sub_10003B430();
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  BOOL v6 = 0;
LABEL_14:
  v13[0] = &v8;
  sub_100003B14((void ***)v13);
  return v6;
}

void sub_10004BB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  std::string __p = &a10;
  sub_100003B14((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10004BBB0(unsigned char *a1, const char *a2)
{
  char v2 = (char)a2;
  unint64_t v4 = "false";
  if (a2) {
    unint64_t v4 = "true";
  }
  uint64_t result = siri::dialogengine::Log::Info((siri::dialogengine::Log *)"ValidationContext::SetErrorsMode(%s)", a2, v4);
  *a1 = v2;
  return result;
}

uint64_t sub_10004BC08(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t sub_10004BC10(uint64_t a1, const char *a2)
{
  char v2 = (char)a2;
  unint64_t v4 = "false";
  if (a2) {
    unint64_t v4 = "true";
  }
  uint64_t result = siri::dialogengine::Log::Info((siri::dialogengine::Log *)"ValidationContext::SetPedanticMode(%s)", a2, v4);
  *(unsigned char *)(a1 + 1) = v2;
  return result;
}

BOOL sub_10004BC68(unsigned char *a1)
{
  return !*a1 && a1[1] != 0;
}

uint64_t sub_10004BC88(uint64_t a1, const char *a2)
{
  char v2 = (char)a2;
  unint64_t v4 = "false";
  if (a2) {
    unint64_t v4 = "true";
  }
  uint64_t result = siri::dialogengine::Log::Info((siri::dialogengine::Log *)"ValidationContext::SetQuietMode(%s)", a2, v4);
  *(unsigned char *)(a1 + 2) = v2;
  return result;
}

uint64_t sub_10004BCE0(uint64_t a1, const char *a2)
{
  char v2 = (char)a2;
  unint64_t v4 = "false";
  if (a2) {
    unint64_t v4 = "true";
  }
  uint64_t result = siri::dialogengine::Log::Info((siri::dialogengine::Log *)"ValidationContext::SetXcodeMode(%s)", a2, v4);
  *(unsigned char *)(a1 + 3) = v2;
  return result;
}

uint64_t sub_10004BD38(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 3);
}

uint64_t sub_10004BD40(uint64_t a1, const char *a2)
{
  char v2 = (char)a2;
  unint64_t v4 = "false";
  if (a2) {
    unint64_t v4 = "true";
  }
  uint64_t result = siri::dialogengine::Log::Info((siri::dialogengine::Log *)"ValidationContext::SetCheckSnippetDialogIds(%s)", a2, v4);
  *(unsigned char *)(a1 + 4) = v2;
  return result;
}

uint64_t sub_10004BD98(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

void sub_10004BDA0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10004BDC0(uint64_t a1)
{
  return a1 + 8;
}

BOOL sub_10004BDC8(unsigned char *a1, uint64_t a2, const void **a3, unint64_t a4)
{
  return sub_10004BDDC(a1, 3, a2, a3, a4);
}

BOOL sub_10004BDDC(unsigned char *a1, int a2, uint64_t a3, const void **a4, unint64_t a5)
{
  memset(&v34, 0, sizeof(v34));
  switch(a2)
  {
    case 0:
      if (!a1[2] && !a1[3])
      {
        uint64_t v9 = &std::cout;
        goto LABEL_49;
      }
      break;
    case 1:
      if (!*a1 && a1[1])
      {
        uint64_t v10 = a1 + 40;
        std::string v11 = "nit";
        goto LABEL_11;
      }
      break;
    case 2:
      if (!*a1)
      {
        uint64_t v10 = a1 + 48;
        std::string v11 = "warning";
        goto LABEL_11;
      }
      break;
    case 3:
      uint64_t v10 = a1 + 56;
      std::string v11 = "error";
LABEL_11:
      ++*v10;
      std::string::assign(&v34, v11);
      if (!a1[2])
      {
        if (*((char *)a4 + 23) >= 0) {
          size_t v12 = *((unsigned __int8 *)a4 + 23);
        }
        else {
          size_t v12 = (size_t)a4[1];
        }
        if (v12)
        {
          sub_100008CC4((uint64_t)__p, v12 + 1);
          if (v33 >= 0) {
            long long v13 = __p;
          }
          else {
            long long v13 = (void **)__p[0];
          }
          if (*((char *)a4 + 23) >= 0) {
            char v14 = a4;
          }
          else {
            char v14 = *a4;
          }
          memmove(v13, v14, v12);
          *(_WORD *)((char *)v13 + v12) = 58;
          if (v33 >= 0) {
            long long v15 = __p;
          }
          else {
            long long v15 = (void **)__p[0];
          }
          if (v33 >= 0) {
            uint64_t v16 = HIBYTE(v33);
          }
          else {
            uint64_t v16 = (uint64_t)__p[1];
          }
          sub_1000042E0(&std::cout, (uint64_t)v15, v16);
          if (SHIBYTE(v33) < 0) {
            operator delete(__p[0]);
          }
          if (a5)
          {
            std::to_string(&v31, a5);
            int v17 = std::string::append(&v31, ":");
            long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
            int64_t v33 = v17->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v18;
            v17->__r_.__value_.__l.__size_ = 0;
            v17->__r_.__value_.__r.__words[2] = 0;
            v17->__r_.__value_.__r.__words[0] = 0;
            if (v33 >= 0) {
              int v19 = __p;
            }
            else {
              int v19 = (void **)__p[0];
            }
            if (v33 >= 0) {
              uint64_t v20 = HIBYTE(v33);
            }
            else {
              uint64_t v20 = (uint64_t)__p[1];
            }
            sub_1000042E0(&std::cout, (uint64_t)v19, v20);
            if (SHIBYTE(v33) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v31.__r_.__value_.__l.__data_);
            }
          }
          sub_1000042E0(&std::cout, (uint64_t)" ", 1);
        }
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v21 = &v34;
        }
        else {
          int v21 = (std::string *)v34.__r_.__value_.__r.__words[0];
        }
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v34.__r_.__value_.__l.__size_;
        }
        BOOL v23 = sub_1000042E0(&std::cout, (uint64_t)v21, size);
        uint64_t v9 = (std::ostream *)sub_1000042E0(v23, (uint64_t)": ", 2);
LABEL_49:
        int v24 = *(char *)(a3 + 23);
        if (v24 >= 0) {
          uint64_t v25 = a3;
        }
        else {
          uint64_t v25 = *(void *)a3;
        }
        if (v24 >= 0) {
          uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v26 = *(void *)(a3 + 8);
        }
        char v27 = sub_1000042E0(v9, v25, v26);
        std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
        std::string::size_type v28 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
      }
      break;
    default:
      break;
  }
  BOOL v29 = sub_10004C22C((uint64_t)a1);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  return v29;
}

void sub_10004C0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10004C17C(unsigned char *a1, uint64_t a2, const void **a3, unint64_t a4)
{
  return sub_10004BDDC(a1, 2, a2, a3, a4);
}

BOOL sub_10004C190(unsigned char *a1, uint64_t a2, const void **a3, unint64_t a4)
{
  return sub_10004BDDC(a1, 1, a2, a3, a4);
}

BOOL sub_10004C1A4(unsigned char *a1, uint64_t a2)
{
  sub_100003470(__p, (char *)&unk_10006DFE2);
  BOOL v4 = sub_10004BDDC(a1, 0, a2, (const void **)__p, 0);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_10004C210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10004C22C(uint64_t a1)
{
  return !*(void *)(a1 + 56)
      && (*(unsigned char *)a1 || *(unsigned char *)(a1 + 3) || !*(void *)(a1 + 48) && (!*(unsigned char *)(a1 + 1) || !*(void *)(a1 + 40)));
}

void sub_10004C270(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      sub_10003AF64(a1, (void *)a2);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    sub_10000A3E0(a1, *(char **)(a1 + 8));
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    char v3 = (void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)(a1 + 8) = v4;
    uint64_t v5 = a1 + 8;
    uint64_t v6 = *(void *)(a2 + 16);
    *(void *)(a1 + 16) = v6;
    if (v6)
    {
      *(void *)(v4 + 16) = v5;
      *(void *)a2 = v3;
      void *v3 = 0;
      *(void *)(a2 + 16) = 0;
    }
    else
    {
      *(void *)a1 = v5;
    }
    *(unsigned char *)(a1 + 24) = 1;
  }
}

void *sub_10004C31C@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (void *)sub_10000A230(a1 + 48, a2);
  if ((void *)(a1 + 56) == result)
  {
    return sub_100003470(a3, (char *)&unk_10006DFE2);
  }
  else if (*((char *)result + 79) < 0)
  {
    char v7 = (void *)result[7];
    unint64_t v8 = result[8];
    return sub_100003600(a3, v7, v8);
  }
  else
  {
    long long v6 = *(_OWORD *)(result + 7);
    a3[2] = result[9];
    *(_OWORD *)a3 = v6;
  }
  return result;
}

void sub_10004C3BC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    **(unsigned char **)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 23) = 0;
  }
  if (*(char *)(a1 + 47) < 0)
  {
    **(unsigned char **)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 47) = 0;
  }
  sub_10002A698(a1 + 48, *(void **)(a1 + 56));
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)(a1 + 56) = 0;
  char v3 = *(char **)(a1 + 80);
  char v2 = (void *)(a1 + 80);
  *(v2 - 2) = 0;
  sub_10000A3E0((uint64_t)(v2 - 1), v3);
  *(v2 - 1) = v2;
  *char v2 = 0;
  v2[1] = 0;
}

void sub_10004C44C(uint64_t **a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100003600(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }
  char v7 = __p;
  uint64_t v4 = sub_100050118(a1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v7);
  std::string::operator=((std::string *)((char *)v4 + 56), (const std::string *)a2);
  std::string::operator=((std::string *)(v4 + 5), (const std::string *)(a2 + 24));
  if ((_OWORD *)((char *)v4 + 56) != (_OWORD *)a2)
  {
    sub_10004FDD0((uint64_t **)v4 + 13, *(long long **)(a2 + 48), (long long *)(a2 + 56));
    sub_100038670((uint64_t **)v4 + 16, *(void **)(a2 + 72), (void *)(a2 + 80));
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10004C524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004C540(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Null config passed to ReadCodegenConfigFile", 0);
    return 0;
  }
  char v2 = (void *)(a2 + 8);
  sub_10005003C(a2, *(void **)(a2 + 8));
  *(void *)a2 = v2;
  *(void *)(a2 + 16) = 0;
  *char v2 = 0;
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  if (v5)
  {
    if (siri::dialogengine::FileExists())
    {
      char v20 = 1;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      memset(v16, 0, sizeof(v16));
      v18[0] = 0;
      int v17 = v18;
      v19[1] = 0;
      v19[0] = 0;
      v18[1] = 0;
      v18[2] = v19;
      YAML::LoadFile();
    }
    char v7 = sub_1000042E0(&std::cout, (uint64_t)"Error: Cannot find codegen config file: ", 40);
    int v8 = *(char *)(a1 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *(void *)a1;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    std::string v11 = sub_1000042E0(v7, v9, v10);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    size_t v12 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"No codegen config file specified", v4);
  return 1;
}

void sub_10004D79C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,long long a63)
{
  if (STACK[0x3B8]) {
    sub_100006AE0((std::__shared_weak_count *)STACK[0x3B8]);
  }
  sub_10003F540((uint64_t)&STACK[0x3C8]);
  if (a2 == 1)
  {
    std::string v74 = __cxa_begin_catch(a1);
    std::operator+<char>();
    unint64_t v75 = std::string::append((std::string *)&a69, " \"");
    long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    a64 = v75->__r_.__value_.__r.__words[2];
    a63 = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    unsigned __int8 v79 = (const std::string::value_type *)v74[4];
    uint64_t v78 = (char *)(v74 + 4);
    char v77 = v79;
    int v80 = v78[23];
    if (v80 >= 0) {
      uint64_t v81 = v78;
    }
    else {
      uint64_t v81 = v77;
    }
    if (v80 >= 0) {
      std::string::size_type v82 = v78[23];
    }
    else {
      std::string::size_type v82 = *((void *)v78 + 1);
    }
    long long v83 = std::string::append((std::string *)&a63, v81, v82);
    long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    STACK[0x2C0] = v83->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x2B0] = v84;
    v83->__r_.__value_.__l.__size_ = 0;
    v83->__r_.__value_.__r.__words[2] = 0;
    v83->__r_.__value_.__r.__words[0] = 0;
    long long v85 = std::string::append((std::string *)&STACK[0x2B0], "\"");
    long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    STACK[0x3A0] = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x390] = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Error();
    if (SLOBYTE(STACK[0x3A7]) < 0) {
      operator delete((void *)STACK[0x390]);
    }
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      operator delete((void *)STACK[0x2B0]);
    }
    if (SHIBYTE(a64) < 0) {
      operator delete((void *)a63);
    }
    if (a71 < 0) {
      operator delete(a69);
    }
  }
  else
  {
    if (a2 != 2)
    {
      sub_10004E0C4((uint64_t)&STACK[0x400]);
      sub_10003F540(v71 - 192);
      _Unwind_Resume(a1);
    }
    long long v87 = __cxa_begin_catch(a1);
    std::operator+<char>();
    uint64_t v88 = std::string::append((std::string *)&a69, " \"");
    long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    a64 = v88->__r_.__value_.__r.__words[2];
    a63 = v89;
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    char v90 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v87 + 16))(v87);
    uint64_t v91 = std::string::append((std::string *)&a63, v90);
    long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
    STACK[0x2C0] = v91->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x2B0] = v92;
    v91->__r_.__value_.__l.__size_ = 0;
    v91->__r_.__value_.__r.__words[2] = 0;
    v91->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v93 = std::string::append((std::string *)&STACK[0x2B0], "\"");
    long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    STACK[0x3A0] = v93->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x390] = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Error();
    if (SLOBYTE(STACK[0x3A7]) < 0) {
      operator delete((void *)STACK[0x390]);
    }
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      operator delete((void *)STACK[0x2B0]);
    }
    if (SHIBYTE(a64) < 0) {
      operator delete((void *)a63);
    }
    if (a71 < 0) {
      operator delete(a69);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x10004D3C8);
}

void sub_10004DF1C(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)a1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0)
    {
      sub_100003600(&__dst, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }
    else
    {
      long long __dst = *(_OWORD *)(a1 + 8);
      uint64_t v17 = *(void *)(a1 + 24);
    }
    sub_100043688(exception, (uint64_t)&__dst);
  }
  sub_100043C58(a1);
  uint64_t v6 = *(uint64_t ***)(a1 + 48);
  sub_100003470(__p, a2);
  char v7 = *(std::__shared_weak_count **)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  long long v13 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = sub_100046BC8(v6, (unsigned __int8 *)__p, &v12);
  if (v13) {
    sub_100006AE0(v13);
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 40);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_100006AE0(v9);
  }
  else
  {
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
  }
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 32) = v10;
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = v8;
}

void sub_10004E070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_10004E0C4(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10004E120(uint64_t a1)
{
  sub_100024BD8((uint64_t)v14);
  char v2 = sub_1000042E0(v15, (uint64_t)"//\n", 3);
  char v3 = sub_1000042E0(v2, (uint64_t)"// ", 3);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  char v7 = sub_1000042E0(v3, v5, v6);
  uint64_t v8 = sub_1000042E0(v7, (uint64_t)"\n", 1);
  uint64_t v9 = sub_1000042E0(v8, (uint64_t)"//\n", 3);
  uint64_t v10 = sub_1000042E0(v9, (uint64_t)"// GENERATED CODE. You shouldn't be editing this file.\n", 55);
  std::string v11 = sub_1000042E0(v10, (uint64_t)"//\n", 3);
  sub_1000042E0(v11, (uint64_t)"\n", 1);
  std::stringbuf::str();
  *(void *)((char *)v14
  v15[0] = v12;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10004E318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100002BF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10004E32C(uint64_t a1@<X0>, void **a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_100003600(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a1;
    uint64_t v9 = *(void *)(a1 + 16);
  }
  if (v9 >= 0) {
    char v3 = __p;
  }
  else {
    char v3 = (void **)__p[0];
  }
  char v4 = __toupper(*(char *)v3);
  if (v9 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  *(unsigned char *)uint64_t v5 = v4;
  if (v9 >= 0) {
    size_t v6 = HIBYTE(v9);
  }
  else {
    size_t v6 = (size_t)__p[1];
  }
  sub_100008CC4((uint64_t)a2, v6 + 8);
  if (*((char *)a2 + 23) < 0) {
    a2 = (void **)*a2;
  }
  if (v6)
  {
    if (v9 >= 0) {
      char v7 = __p;
    }
    else {
      char v7 = (void **)__p[0];
    }
    memmove(a2, v7, v6);
  }
  strcpy((char *)a2 + v6, "Semantic");
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10004E430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10004E44C@<D0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  if (*((char *)a1 + 23) < 0)
  {
    sub_100003600(a4, *(void **)a1, *((void *)a1 + 1));
    if (!a3) {
      goto LABEL_11;
    }
  }
  else
  {
    long long v8 = *a1;
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *a1;
    a4->__r_.__value_.__r.__words[2] = *((void *)a1 + 2);
    if (!a3) {
      goto LABEL_11;
    }
  }
  sub_10004C31C(a3, (const void **)a1, &__str);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  char v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::operator=(a4, &__str);
    char v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v10 < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_11:
  int v11 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  std::string::size_type v12 = a4->__r_.__value_.__r.__words[0];
  std::string::size_type v13 = a4->__r_.__value_.__l.__size_;
  if ((v11 & 0x80u) == 0) {
    std::string::size_type v14 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = a4->__r_.__value_.__l.__size_;
  }
  if ((v11 & 0x80u) == 0) {
    char v15 = (unsigned __int8 *)a4;
  }
  else {
    char v15 = (unsigned __int8 *)a4->__r_.__value_.__r.__words[0];
  }
  if (v14)
  {
    char v16 = &v15[v14];
    uint64_t v17 = v15;
    while (2)
    {
      for (uint64_t i = 0; i != 4; ++i)
      {
        if (*v17 == asc_100079AB1[i])
        {
          if (v17 != v16)
          {
            int v19 = (unsigned __int8 *)(v17 - v15);
            if (v19 != (unsigned __int8 *)-1)
            {
              while (2)
              {
                if ((v11 & 0x80u) == 0) {
                  std::string::size_type v12 = (std::string::size_type)a4;
                }
                v19[v12] = 95;
                char v20 = v19 + 1;
                int v11 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
                std::string::size_type v12 = a4->__r_.__value_.__r.__words[0];
                std::string::size_type v13 = a4->__r_.__value_.__l.__size_;
                if ((v11 & 0x80u) == 0) {
                  std::string::size_type v21 = (std::string::size_type)a4;
                }
                else {
                  std::string::size_type v21 = a4->__r_.__value_.__r.__words[0];
                }
                if ((v11 & 0x80u) == 0) {
                  unint64_t v22 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
                }
                else {
                  unint64_t v22 = a4->__r_.__value_.__l.__size_;
                }
                if (v22 > (unint64_t)v20)
                {
                  long long v23 = &v20[v21];
                  int v24 = (unsigned __int8 *)(v21 + v22);
LABEL_36:
                  uint64_t v25 = 0;
                  while (*v23 != asc_100079AB1[v25])
                  {
                    if (++v25 == 4)
                    {
                      if (++v23 != v24) {
                        goto LABEL_36;
                      }
                      goto LABEL_43;
                    }
                  }
                  if (v23 != v24)
                  {
                    int v19 = &v23[-v21];
                    if (v19 != (unsigned __int8 *)-1) {
                      continue;
                    }
                  }
                }
                break;
              }
            }
          }
          goto LABEL_43;
        }
      }
      if (++v17 != v16) {
        continue;
      }
      break;
    }
  }
LABEL_43:
  if ((v11 & 0x80) != 0)
  {
    if (!v13) {
      goto LABEL_53;
    }
    LOBYTE(v12) = *(unsigned char *)v12;
    if ((v12 & 0x80) != 0) {
      goto LABEL_53;
    }
  }
  else if (!v11 || (v12 & 0x80) != 0)
  {
    goto LABEL_53;
  }
  if ((_DefaultRuneLocale.__runetype[v12] & 0x400) != 0)
  {
    std::operator+<char>();
    if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(a4->__r_.__value_.__l.__data_);
    }
    *(void *)&long long v8 = __str.__r_.__value_.__r.__words[0];
    *a4 = __str;
  }
LABEL_53:
  uint64_t v26 = (uint64_t *)(a2 + 248);
  int v27 = *(char *)(a2 + 271);
  if (v27 < 0)
  {
    if (*(void *)(a2 + 256) != 5) {
      return *(double *)&v8;
    }
    uint64_t v26 = (uint64_t *)*v26;
  }
  else if (v27 != 5)
  {
    return *(double *)&v8;
  }
  if (*(_DWORD *)v26 == 1701867637 && *((unsigned char *)v26 + 4) == 114)
  {
    siri::dialogengine::StringToUpper();
  }
  else
  {
    int v29 = *(_DWORD *)v26;
    int v30 = *((unsigned __int8 *)v26 + 4);
    if (v29 != 1702326124 || v30 != 114) {
      return *(double *)&v8;
    }
    siri::dialogengine::StringToLower();
  }
  if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(a4->__r_.__value_.__l.__data_);
  }
  *(void *)&long long v8 = __str.__r_.__value_.__r.__words[0];
  *a4 = __str;
  return *(double *)&v8;
}

void sub_10004E6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10004E738(siri::dialogengine::DialogMetadataReader *a1, uint64_t a2, uint64_t a3)
{
  siri::dialogengine::DialogMetadataReader::GetSemanticConcept((uint64_t *)__p, a1);
  uint64_t v6 = sub_10000A230(a3, (const void **)__p);
  uint64_t v7 = v6;
  uint64_t v8 = a3 + 8;
  if (a3 + 8 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v6 + 56;
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(__p[0]);
  }
  v65[0] = 0;
  v65[1] = 0;
  uint64_t v66 = 0;
  if (v8 == v7) {
    goto LABEL_14;
  }
  if (*(char *)(v7 + 103) < 0)
  {
    sub_100003600(__p, *(void **)(v7 + 80), *(void *)(v7 + 88));
    if (SHIBYTE(v66) < 0) {
      operator delete(v65[0]);
    }
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(v7 + 80);
    uint64_t v68 = *(void *)(v7 + 96);
  }
  *(_OWORD *)std::string::size_type v65 = *(_OWORD *)__p;
  uint64_t v66 = v68;
  char v10 = (void *)HIBYTE(v68);
  if (v68 < 0) {
    char v10 = __p[1];
  }
  if (!v10)
  {
LABEL_14:
    siri::dialogengine::DialogMetadataReader::GetSemanticConcept((uint64_t *)v63, a1);
    sub_10004E32C((uint64_t)v63, __p);
    if (SHIBYTE(v66) < 0) {
      operator delete(v65[0]);
    }
    *(_OWORD *)std::string::size_type v65 = *(_OWORD *)__p;
    uint64_t v66 = v68;
    HIBYTE(v68) = 0;
    LOBYTE(__p[0]) = 0;
    if (v64 < 0) {
      operator delete(v63[0]);
    }
  }
  sub_100003470(__p, "swift");
  siri::dialogengine::AddExtension();
  if (SHIBYTE(v68) < 0) {
    operator delete(__p[0]);
  }
  siri::dialogengine::JoinPath();
  int v11 = sub_1000042E0(&std::cout, (uint64_t)"Write Swift enum: ", 18);
  if ((v62 & 0x80u) == 0) {
    std::string::size_type v12 = &v60;
  }
  else {
    std::string::size_type v12 = v60;
  }
  if ((v62 & 0x80u) == 0) {
    uint64_t v13 = v62;
  }
  else {
    uint64_t v13 = v61;
  }
  std::string::size_type v14 = sub_1000042E0(v11, (uint64_t)v12, v13);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
  uint64_t v15 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  sub_1000031C4((void (__cdecl ***)(std::ofstream *__hidden))__p);
  uint64_t v16 = v70;
  if (!v70)
  {
    uint64_t v51 = sub_1000042E0(&std::cout, (uint64_t)"Error: Failed to write to file: ", 32);
    if ((v62 & 0x80u) == 0) {
      int64_t v52 = &v60;
    }
    else {
      int64_t v52 = v60;
    }
    if ((v62 & 0x80u) == 0) {
      uint64_t v53 = v62;
    }
    else {
      uint64_t v53 = v61;
    }
    int v54 = sub_1000042E0(v51, (uint64_t)v52, v53);
    std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
    uint64_t v55 = std::locale::use_facet((const std::locale *)&v59, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
    std::locale::~locale((std::locale *)&v59);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_109;
  }
  sub_10004E120((uint64_t)v63);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v17 = &v59;
  }
  else {
    uint64_t v17 = (std::string *)v59.__r_.__value_.__r.__words[0];
  }
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v59.__r_.__value_.__l.__size_;
  }
  sub_1000042E0(__p, (uint64_t)v17, size);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (v8 != v7 && *(void *)(v7 + 144))
  {
    int v19 = *(void **)(v7 + 128);
    if (v19 != (void *)(v7 + 136))
    {
      do
      {
        char v20 = sub_1000042E0(__p, (uint64_t)"// swiftlint:disable ", 21);
        int v21 = *((char *)v19 + 55);
        if (v21 >= 0) {
          uint64_t v22 = (uint64_t)(v19 + 4);
        }
        else {
          uint64_t v22 = v19[4];
        }
        if (v21 >= 0) {
          uint64_t v23 = *((unsigned __int8 *)v19 + 55);
        }
        else {
          uint64_t v23 = v19[5];
        }
        int v24 = sub_1000042E0(v20, v22, v23);
        sub_1000042E0(v24, (uint64_t)"\n", 1);
        uint64_t v25 = (void *)v19[1];
        if (v25)
        {
          do
          {
            uint64_t v26 = v25;
            uint64_t v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            uint64_t v26 = (void *)v19[2];
            BOOL v27 = *v26 == (void)v19;
            int v19 = v26;
          }
          while (!v27);
        }
        int v19 = v26;
      }
      while (v26 != (void *)(v7 + 136));
    }
    sub_1000042E0(__p, (uint64_t)"\n", 1);
  }
  std::string::size_type v28 = sub_1000042E0(__p, (uint64_t)"/// Semantic concept: ", 22);
  siri::dialogengine::DialogMetadataReader::GetSemanticConcept((uint64_t *)&v59, a1);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v29 = &v59;
  }
  else {
    int v29 = (std::string *)v59.__r_.__value_.__r.__words[0];
  }
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = v59.__r_.__value_.__l.__size_;
  }
  std::string v31 = sub_1000042E0(v28, (uint64_t)v29, v30);
  sub_1000042E0(v31, (uint64_t)"\n", 1);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  long long v32 = sub_1000042E0(__p, (uint64_t)"internal enum ", 14);
  if (v66 >= 0) {
    int64_t v33 = v65;
  }
  else {
    int64_t v33 = (void **)v65[0];
  }
  if (v66 >= 0) {
    uint64_t v34 = HIBYTE(v66);
  }
  else {
    uint64_t v34 = (uint64_t)v65[1];
  }
  unint64_t v35 = sub_1000042E0(v32, (uint64_t)v33, v34);
  sub_1000042E0(v35, (uint64_t)": String, CaseIterable {\n", 25);
  sub_100003470(&v59, (char *)&unk_10006DFE2);
  uint64_t v57 = v16;
  for (uint64_t i = siri::dialogengine::DialogMetadataReader::GetNextSemanticValue(a1);
        i;
        uint64_t i = siri::dialogengine::DialogMetadataReader::GetNextSemanticValue(a1))
  {
    uint64_t v37 = *(unsigned __int8 *)(i + 47);
    if ((v37 & 0x80u) == 0) {
      uint64_t v38 = *(unsigned __int8 *)(i + 47);
    }
    else {
      uint64_t v38 = *(void *)(i + 32);
    }
    std::string::size_type v39 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v39 = v59.__r_.__value_.__l.__size_;
    }
    if (v38 == v39)
    {
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v40 = &v59;
      }
      else {
        uint64_t v40 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      if ((v37 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(i + 24), v40, *(void *)(i + 32))) {
          goto LABEL_97;
        }
      }
      else
      {
        if (!*(unsigned char *)(i + 47)) {
          goto LABEL_97;
        }
        std::string::size_type v41 = (unsigned __int8 *)(i + 24);
        while (*v41 == v40->__r_.__value_.__s.__data_[0])
        {
          ++v41;
          uint64_t v40 = (std::string *)((char *)v40 + 1);
          if (!--v37) {
            goto LABEL_97;
          }
        }
      }
    }
    sub_10004E44C((long long *)(i + 24), a2, v9, &v58);
    long long v42 = sub_1000042E0(__p, (uint64_t)"    case ", 9);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v43 = &v58;
    }
    else {
      uint64_t v43 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v44 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v44 = v58.__r_.__value_.__l.__size_;
    }
    uint64_t v45 = sub_1000042E0(v42, (uint64_t)v43, v44);
    long long v46 = sub_1000042E0(v45, (uint64_t)" = \"", 4);
    int v47 = *(char *)(i + 47);
    if (v47 >= 0) {
      uint64_t v48 = i + 24;
    }
    else {
      uint64_t v48 = *(void *)(i + 24);
    }
    if (v47 >= 0) {
      uint64_t v49 = *(unsigned __int8 *)(i + 47);
    }
    else {
      uint64_t v49 = *(void *)(i + 32);
    }
    char v50 = sub_1000042E0(v46, v48, v49);
    sub_1000042E0(v50, (uint64_t)"\"\n", 2);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
LABEL_97:
    std::string::operator=(&v59, (const std::string *)(i + 24));
  }
  sub_1000042E0(__p, (uint64_t)"}\n", 2);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)__p + *((void *)__p[0] - 3)), *(_DWORD *)&v69[*((void *)__p[0] - 3)] | 4);
  }
  uint64_t v16 = v57;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
LABEL_109:
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if ((char)v62 < 0) {
    operator delete(v60);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete(v65[0]);
  }
  return v16 != 0;
}

void sub_10004EEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,std::locale a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10004EFD4(uint64_t a1, const char *a2)
{
  char v3 = (uint64_t *)(a1 + 168);
  uint64_t v4 = a1 + 168;
  if (*(char *)(a1 + 191) < 0) {
    uint64_t v4 = *v3;
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"mOutputDir: %s", a2, v4);
  uint64_t v6 = a1 + 24;
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v6 = *(void *)(a1 + 24);
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"mTemplateDir: %s", v5, v6);
  uint64_t v8 = (unsigned __int8 **)(a1 + 120);
  uint64_t v9 = (unsigned __int8 *)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    uint64_t v9 = *v8;
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"mCategory: %s", v7, v9);
  int v11 = (const char **)(a1 + 224);
  std::string::size_type v12 = (const char *)(a1 + 224);
  if (*(char *)(a1 + 247) < 0) {
    std::string::size_type v12 = *v11;
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"mCodegenConfigPath: %s", v10, v12);
  std::string::size_type v14 = (void **)(a1 + 248);
  uint64_t v15 = (void *)(a1 + 248);
  if (*(char *)(a1 + 271) < 0) {
    uint64_t v15 = *v14;
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"mSwiftCaseStyle: %s", v13, v15);
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32)) {
      goto LABEL_13;
    }
LABEL_22:
    int v19 = sub_1000042E0(&std::cout, (uint64_t)"Error: No template directory specified. Try --templateDir.", 58);
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
    char v20 = std::locale::use_facet(&v121, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    goto LABEL_38;
  }
  if (!*(unsigned char *)(a1 + 47)) {
    goto LABEL_22;
  }
LABEL_13:
  if ((siri::dialogengine::DirExists() & 1) == 0)
  {
    int v21 = sub_1000042E0(&std::cout, (uint64_t)"Error: The specified template directory does not exist: ", 56);
    int v22 = *(char *)(a1 + 47);
    if (v22 >= 0) {
      uint64_t v23 = a1 + 24;
    }
    else {
      uint64_t v23 = *(void *)(a1 + 24);
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v24 = *(void *)(a1 + 32);
    }
LABEL_37:
    std::string::size_type v28 = sub_1000042E0(v21, v23, v24);
    std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
    int v29 = std::locale::use_facet(&v121, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
    goto LABEL_38;
  }
  if (*(char *)(a1 + 191) < 0)
  {
    if (*(void *)(a1 + 176)) {
      goto LABEL_16;
    }
  }
  else if (*(unsigned char *)(a1 + 191))
  {
LABEL_16:
    if (siri::dialogengine::DirExists())
    {
      sub_10003D1B0(a1, (uint64_t *)&v121);
      locale = v121.__locale_;
      uint64_t v16 = (long long *)v122;
      if (v121.__locale_ == v122)
      {
        long long v32 = sub_1000042E0(&std::cout, (uint64_t)"No categories defined in the metadata config file", 49);
LABEL_125:
        std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
        long long v63 = std::locale::use_facet((const std::locale *)&v120, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
        std::locale::~locale((std::locale *)&v120);
        std::ostream::put();
        std::ostream::flush();
LABEL_126:
        uint64_t i = 0;
LABEL_201:
        v120.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
        sub_1000468EC((void ***)&v120);
        return i;
      }
      char v18 = *(unsigned char *)(a1 + 143);
      if (v18 < 0)
      {
        if (!*(void *)(a1 + 128)) {
          goto LABEL_88;
        }
      }
      else if (!*(unsigned char *)(a1 + 143))
      {
        goto LABEL_88;
      }
      if (v18 >= 0) {
        uint64_t v33 = *(unsigned __int8 *)(a1 + 143);
      }
      else {
        uint64_t v33 = *(void *)(a1 + 128);
      }
      while (1)
      {
        uint64_t v34 = *((unsigned __int8 *)locale + 23);
        uint64_t v35 = (v34 & 0x80u) == 0 ? *((unsigned __int8 *)locale + 23) : *((void *)locale + 1);
        if (v35 != v33) {
          break;
        }
        if (v18 >= 0) {
          long long v36 = (unsigned __int8 *)(a1 + 120);
        }
        else {
          long long v36 = *v8;
        }
        if ((v34 & 0x80) != 0)
        {
          if (memcmp(*(const void **)locale, v36, *((void *)locale + 1))) {
            break;
          }
        }
        else if (*((unsigned char *)locale + 23))
        {
          uint64_t v37 = 0;
          while (*((unsigned __int8 *)locale + v37) == v36[v37])
          {
            if (v34 == ++v37) {
              goto LABEL_59;
            }
          }
          break;
        }
LABEL_59:
        locale = (std::locale::__imp *)((char *)locale + 32);
        if (locale == (std::locale::__imp *)v16) {
          goto LABEL_85;
        }
      }
      if (locale == (std::locale::__imp *)v16)
      {
LABEL_85:
        uint64_t v39 = (uint64_t)v16;
      }
      else
      {
        uint64_t v38 = (std::locale::__imp *)((char *)locale + 32);
        if ((long long *)((char *)locale + 32) != v16)
        {
          uint64_t v39 = (uint64_t)locale;
          while (1)
          {
            uint64_t v40 = locale;
            locale = v38;
            uint64_t v41 = *((unsigned __int8 *)v40 + 55);
            if ((v41 & 0x80u) == 0) {
              uint64_t v42 = *((unsigned __int8 *)v40 + 55);
            }
            else {
              uint64_t v42 = *((void *)v40 + 5);
            }
            uint64_t v43 = *(unsigned __int8 *)(a1 + 143);
            int v44 = (char)v43;
            if ((v43 & 0x80u) != 0) {
              uint64_t v43 = *(void *)(a1 + 128);
            }
            if (v42 != v43) {
              goto LABEL_83;
            }
            uint64_t v45 = v44 >= 0 ? (unsigned __int8 *)(a1 + 120) : *v8;
            if ((v41 & 0x80) == 0) {
              break;
            }
            if (!memcmp(*(const void **)locale, v45, *((void *)v40 + 5))) {
              goto LABEL_80;
            }
LABEL_83:
            uint64_t v38 = (std::locale::__imp *)((char *)locale + 32);
            if ((long long *)((char *)locale + 32) == v16)
            {
              uint64_t v16 = (long long *)v122;
              goto LABEL_87;
            }
          }
          if (*((unsigned char *)v40 + 55))
          {
            uint64_t v46 = 0;
            while (*((unsigned __int8 *)locale + v46) == v45[v46])
            {
              if (v41 == ++v46) {
                goto LABEL_80;
              }
            }
            goto LABEL_83;
          }
LABEL_80:
          if (*(char *)(v39 + 23) < 0) {
            operator delete(*(void **)v39);
          }
          long long v47 = *(_OWORD *)locale;
          *(void *)(v39 + 16) = *((void *)locale + 2);
          *(_OWORD *)uint64_t v39 = v47;
          *((unsigned char *)v40 + 55) = 0;
          *(unsigned char *)locale = 0;
          *(unsigned char *)(v39 + 24) = *((unsigned char *)v40 + 56);
          v39 += 32;
          goto LABEL_83;
        }
        uint64_t v39 = (uint64_t)locale;
      }
LABEL_87:
      sub_1000444D0((uint64_t)&v121, v39, v16);
      if (v121.__locale_ == v122)
      {
        int v54 = sub_1000042E0(&std::cout, (uint64_t)"Error: The specified category '", 31);
        int v55 = *(char *)(a1 + 143);
        if (v55 >= 0) {
          uint64_t v56 = a1 + 120;
        }
        else {
          uint64_t v56 = *(void *)(a1 + 120);
        }
        if (v55 >= 0) {
          uint64_t v57 = *(unsigned __int8 *)(a1 + 143);
        }
        else {
          uint64_t v57 = *(void *)(a1 + 128);
        }
        std::string v58 = sub_1000042E0(v54, v56, v57);
        std::string v59 = sub_1000042E0(v58, (uint64_t)"' was not found in the metadata config file.", 44);
        sub_10000F934(v59);
        goto LABEL_126;
      }
LABEL_88:
      if (*(char *)(a1 + 247) < 0)
      {
        if (!*(void *)(a1 + 232)) {
          goto LABEL_93;
        }
      }
      else if (!*(unsigned char *)(a1 + 247))
      {
        goto LABEL_93;
      }
      if ((siri::dialogengine::FileExists() & 1) == 0)
      {
        uint64_t v49 = sub_1000042E0(&std::cout, (uint64_t)"Error: The specified codegen config file does not exist: ", 57);
        uint64_t v50 = *(unsigned __int8 *)(a1 + 247);
        uint64_t v51 = *(void *)(a1 + 232);
        BOOL v52 = (v50 & 0x80u) != 0;
        if ((v50 & 0x80u) == 0) {
          uint64_t v53 = a1 + 224;
        }
        else {
          uint64_t v53 = *(void *)(a1 + 224);
        }
LABEL_121:
        if (v52) {
          uint64_t v62 = v51;
        }
        else {
          uint64_t v62 = v50;
        }
        long long v32 = sub_1000042E0(v49, v53, v62);
        goto LABEL_125;
      }
LABEL_93:
      if (*(char *)(a1 + 271) < 0) {
        uint64_t v48 = *(void *)(a1 + 256);
      }
      else {
        uint64_t v48 = *(unsigned __int8 *)(a1 + 271);
      }
      if (!v48)
      {
        std::string::assign((std::string *)(a1 + 248), "none");
        goto LABEL_127;
      }
      siri::dialogengine::StringToLower();
      if (*(char *)(a1 + 271) < 0) {
        operator delete(*v14);
      }
      *(_OWORD *)std::string::size_type v14 = *(_OWORD *)&v120.__r_.__value_.__l.__data_;
      *(void *)(a1 + 264) = *((void *)&v120.__r_.__value_.__l + 2);
      int v60 = *(char *)(a1 + 271);
      if (v60 < 0)
      {
        if (*(void *)(a1 + 256) != 4)
        {
LABEL_116:
          if (sub_1000197E4((void *)(a1 + 248), "lower") && sub_1000197E4((void *)(a1 + 248), "upper"))
          {
            uint64_t v49 = sub_1000042E0(&std::cout, (uint64_t)"Error: Invalid value for --swiftCaseStyle: ", 43);
            uint64_t v50 = *(unsigned __int8 *)(a1 + 271);
            uint64_t v51 = *(void *)(a1 + 256);
            BOOL v52 = (v50 & 0x80u) != 0;
            if ((v50 & 0x80u) == 0) {
              uint64_t v53 = a1 + 248;
            }
            else {
              uint64_t v53 = *(void *)(a1 + 248);
            }
            goto LABEL_121;
          }
LABEL_127:
          memset(&v120, 0, sizeof(v120));
          if (*(char *)(a1 + 143) < 0) {
            uint64_t v64 = *(void *)(a1 + 128);
          }
          else {
            uint64_t v64 = *(unsigned __int8 *)(a1 + 143);
          }
          if (v64) {
            std::string::operator=(&v120, (const std::string *)(a1 + 120));
          }
          else {
            std::string::assign(&v120, "(All)");
          }
          std::string::size_type v65 = sub_1000042E0(&std::cout, (uint64_t)"Generate code for metadata\n", 27);
          uint64_t v66 = sub_1000042E0(v65, (uint64_t)"\tOutput directory: ", 19);
          int v67 = *(char *)(a1 + 191);
          if (v67 >= 0) {
            uint64_t v68 = (uint64_t)v3;
          }
          else {
            uint64_t v68 = *(void *)(a1 + 168);
          }
          if (v67 >= 0) {
            uint64_t v69 = *(unsigned __int8 *)(a1 + 191);
          }
          else {
            uint64_t v69 = *(void *)(a1 + 176);
          }
          uint64_t v70 = sub_1000042E0(v66, v68, v69);
          uint64_t v71 = sub_1000042E0(v70, (uint64_t)"\n", 1);
          int v72 = sub_1000042E0(v71, (uint64_t)"\tTemplate directory: ", 21);
          int v73 = *(char *)(a1 + 47);
          if (v73 >= 0) {
            uint64_t v74 = a1 + 24;
          }
          else {
            uint64_t v74 = *(void *)(a1 + 24);
          }
          if (v73 >= 0) {
            uint64_t v75 = *(unsigned __int8 *)(a1 + 47);
          }
          else {
            uint64_t v75 = *(void *)(a1 + 32);
          }
          long long v76 = sub_1000042E0(v72, v74, v75);
          char v77 = sub_1000042E0(v76, (uint64_t)"\n", 1);
          uint64_t v78 = sub_1000042E0(v77, (uint64_t)"\tCategory: ", 11);
          if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned __int8 v79 = &v120;
          }
          else {
            unsigned __int8 v79 = (std::string *)v120.__r_.__value_.__r.__words[0];
          }
          if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v120.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v120.__r_.__value_.__l.__size_;
          }
          uint64_t v81 = sub_1000042E0(v78, (uint64_t)v79, size);
          std::string::size_type v82 = sub_1000042E0(v81, (uint64_t)"\n", 1);
          long long v83 = sub_1000042E0(v82, (uint64_t)"\tConfig file: ", 14);
          if (*(char *)(a1 + 247) < 0)
          {
            if (*(void *)(a1 + 232)) {
              long long v84 = *v11;
            }
            else {
              long long v84 = "(None)";
            }
          }
          else if (*(unsigned char *)(a1 + 247))
          {
            long long v84 = (const char *)(a1 + 224);
          }
          else
          {
            long long v84 = "(None)";
          }
          size_t v85 = strlen(v84);
          long long v86 = sub_1000042E0(v83, (uint64_t)v84, v85);
          long long v87 = sub_1000042E0(v86, (uint64_t)"\n", 1);
          uint64_t v88 = sub_1000042E0(v87, (uint64_t)"\tSwift case style: ", 19);
          int v89 = *(char *)(a1 + 271);
          if (v89 >= 0) {
            uint64_t v90 = a1 + 248;
          }
          else {
            uint64_t v90 = *(void *)(a1 + 248);
          }
          if (v89 >= 0) {
            uint64_t v91 = *(unsigned __int8 *)(a1 + 271);
          }
          else {
            uint64_t v91 = *(void *)(a1 + 256);
          }
          long long v92 = sub_1000042E0(v88, v90, v91);
          std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(void *)(*v92 - 24)));
          std::string::size_type v93 = std::locale::use_facet(&v118, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v93->__vftable[2].~facet_0)(v93, 10);
          std::locale::~locale(&v118);
          std::ostream::put();
          std::ostream::flush();
          v119[0] = 0;
          v119[1] = 0;
          v118.__locale_ = (std::locale::__imp *)v119;
          if (sub_10004C540(a1 + 224, (uint64_t)&v118))
          {
            long long v94 = v121.__locale_;
            char v95 = v122;
            for (uint64_t i = 1; v94 != v95; v94 = (std::locale::__imp *)((char *)v94 + 32))
            {
              sub_100003470(v111, "en");
              siri::dialogengine::GetDialogMetadataFilename();
              siri::dialogengine::JoinPath();
              if (v114 < 0) {
                operator delete(__p[0]);
              }
              if (v112 < 0) {
                operator delete(v111[0]);
              }
              if (siri::dialogengine::FileExists())
              {
                std::locale v96 = sub_1000042E0(&std::cout, (uint64_t)"\nRead metadata file: ", 21);
                if ((v117 & 0x80u) == 0) {
                  char v97 = &v115;
                }
                else {
                  char v97 = v115;
                }
                if ((v117 & 0x80u) == 0) {
                  uint64_t v98 = v117;
                }
                else {
                  uint64_t v98 = v116;
                }
                BOOL v99 = sub_1000042E0(v96, (uint64_t)v97, v98);
                std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(void *)(*v99 - 24)));
                std::string::size_type v100 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
                ((void (*)(const std::locale::facet *, uint64_t))v100->__vftable[2].~facet_0)(v100, 10);
                std::locale::~locale((std::locale *)__p);
                std::ostream::put();
                std::ostream::flush();
                siri::dialogengine::DialogMetadataReader::DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)v111);
                if (siri::dialogengine::DialogMetadataReader::Load())
                {
                  uint64_t i = sub_10004E738((siri::dialogengine::DialogMetadataReader *)v111, a1, (uint64_t)&v118) & i;
                }
                else
                {
                  std::locale v106 = sub_1000042E0(&std::cout, (uint64_t)"Error: Failed to read file: ", 28);
                  if ((v117 & 0x80u) == 0) {
                    std::string v107 = &v115;
                  }
                  else {
                    std::string v107 = v115;
                  }
                  if ((v117 & 0x80u) == 0) {
                    uint64_t v108 = v117;
                  }
                  else {
                    uint64_t v108 = v116;
                  }
                  std::string::size_type v109 = sub_1000042E0(v106, (uint64_t)v107, v108);
                  std::ios_base::getloc((const std::ios_base *)((char *)v109 + *(void *)(*v109 - 24)));
                  char v110 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
                  ((void (*)(const std::locale::facet *, uint64_t))v110->__vftable[2].~facet_0)(v110, 10);
                  std::locale::~locale((std::locale *)__p);
                  std::ostream::put();
                  std::ostream::flush();
                  uint64_t i = 0;
                }
                siri::dialogengine::DialogMetadataReader::~DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)v111);
              }
              else
              {
                uint64_t v101 = sub_1000042E0(&std::cout, (uint64_t)"Error: The metadata file does not exist: ", 41);
                if ((v117 & 0x80u) == 0) {
                  char v102 = &v115;
                }
                else {
                  char v102 = v115;
                }
                if ((v117 & 0x80u) == 0) {
                  uint64_t v103 = v117;
                }
                else {
                  uint64_t v103 = v116;
                }
                std::string v104 = sub_1000042E0(v101, (uint64_t)v102, v103);
                std::ios_base::getloc((const std::ios_base *)((char *)v104 + *(void *)(*v104 - 24)));
                std::string::size_type v105 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
                ((void (*)(const std::locale::facet *, uint64_t))v105->__vftable[2].~facet_0)(v105, 10);
                std::locale::~locale((std::locale *)__p);
                std::ostream::put();
                std::ostream::flush();
                uint64_t i = 0;
              }
              if ((char)v117 < 0) {
                operator delete(v115);
              }
            }
            sub_10000F934(&std::cout);
          }
          else
          {
            sub_10000F934(&std::cout);
            uint64_t i = 0;
          }
          sub_10005003C((uint64_t)&v118, v119[0]);
          if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v120.__r_.__value_.__l.__data_);
          }
          goto LABEL_201;
        }
        uint64_t v61 = *v14;
      }
      else
      {
        uint64_t v61 = (_DWORD *)(a1 + 248);
        if (v60 != 4) {
          goto LABEL_116;
        }
      }
      if (*v61 == 1701736302) {
        goto LABEL_127;
      }
      goto LABEL_116;
    }
    int v21 = sub_1000042E0(&std::cout, (uint64_t)"Error: The specified output directory does not exist: ", 54);
    int v27 = *(char *)(a1 + 191);
    if (v27 >= 0) {
      uint64_t v23 = (uint64_t)v3;
    }
    else {
      uint64_t v23 = *(void *)(a1 + 168);
    }
    if (v27 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 191);
    }
    else {
      uint64_t v24 = *(void *)(a1 + 176);
    }
    goto LABEL_37;
  }
  uint64_t v25 = sub_1000042E0(&std::cout, (uint64_t)"Error: No output directory specified. Try --outputDir.", 54);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
  uint64_t v26 = std::locale::use_facet(&v121, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
LABEL_38:
  std::locale::~locale(&v121);
  std::ostream::put();
  std::ostream::flush();
  return 0;
}

void sub_10004FCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::locale a28,void *a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  sub_10005003C((uint64_t)&a28, a29);
  if (a36 < 0) {
    operator delete(__p);
  }
  a22 = (void *)(v36 - 112);
  sub_1000468EC((void ***)&a22);
  _Unwind_Resume(a1);
}

uint64_t **sub_10004FDD0(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = sub_100033B98((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          char v10 = (uint64_t **)sub_100033B1C((uint64_t)v5, &v18, v17 + 4);
          sub_100006674(v5, v18, v10, (uint64_t *)v17);
          uint64_t v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = sub_100033B98((uint64_t)v16);
          }
          int v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              int v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)sub_10004FF60((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_10004FFB8(v5, a2 + 2);
      uint64_t v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          std::string::size_type v14 = v13;
          uint64_t v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          std::string::size_type v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_10004FF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10004FF60(uint64_t a1)
{
  sub_10002A698(*(void *)a1, *(void **)(a1 + 16));
  char v2 = *(void **)(a1 + 8);
  if (v2)
  {
    char v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        char v2 = v3;
        char v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_10002A698(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_10004FFB8(uint64_t **a1, long long *a2)
{
  sub_1000460C0((uint64_t)a1, a2, (uint64_t)v7);
  char v3 = (uint64_t **)sub_100033B1C((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_100006674(a1, v6, v3, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  sub_100031E38((uint64_t)v7, 0);
  return v4;
}

void sub_100050024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100031E38((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_10005003C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10005003C(a1, *a2);
    sub_10005003C(a1, a2[1]);
    sub_100050098((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100050098(uint64_t a1)
{
  sub_10000A3E0(a1 + 96, *(char **)(a1 + 104));
  sub_10002A698(a1 + 72, *(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    char v2 = *(void **)a1;
    operator delete(v2);
  }
}

_OWORD *sub_100050118(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_1000066CC((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x98uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    *uint64_t v9 = 0;
    *(_OWORD *)((char *)v7 + 104) = 0u;
    *(_OWORD *)((char *)v7 + 56) = 0u;
    *(_OWORD *)((char *)v7 + 72) = 0u;
    *(_OWORD *)((char *)v7 + 88) = 0u;
    *((void *)v7 + 13) = v7 + 7;
    *((void *)v7 + 17) = 0;
    *((void *)v7 + 18) = 0;
    *((void *)v7 + 15) = 0;
    *((void *)v7 + 16) = (char *)v7 + 136;
    char v13 = 1;
    sub_100006674(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_100050204((uint64_t)v12, 0);
  }
  return v7;
}

void sub_100050204(uint64_t a1, uint64_t a2)
{
  char v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100050098((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

double YAML::Directives::Directives(YAML::Directives *this)
{
  *(unsigned char *)this = 1;
  *(void *)&double result = 0x200000001;
  *(void *)((char *)this + 4) = 0x200000001;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
  return result;
}

void *YAML::Directives::TranslateTagHandle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = (void *)sub_10000A230(a1 + 16, (const void **)a2);
  if ((void *)(a1 + 24) != result)
  {
    if ((*((char *)result + 79) & 0x80000000) == 0)
    {
      long long v7 = *(_OWORD *)(result + 7);
      *(void *)(a3 + 16) = result[9];
      *(_OWORD *)a3 = v7;
      return result;
    }
    uint64_t v9 = (_WORD *)result[7];
    unint64_t v10 = result[8];
    goto LABEL_11;
  }
  int v8 = *(char *)(a2 + 23);
  if (v8 < 0)
  {
    uint64_t v9 = *(_WORD **)a2;
    unint64_t v10 = *(void *)(a2 + 8);
    if (v10 != 2 || *v9 != 8481)
    {
LABEL_11:
      return sub_100003600((unsigned char *)a3, v9, v10);
    }
  }
  else if (v8 != 2 || *(_WORD *)a2 != 8481)
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(void *)(a3 + 16) = *(void *)(a2 + 16);
    return result;
  }
  return sub_100003470((void *)a3, "tag:yaml.org,2002:");
}

void YAML::Exception::~Exception(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_10007D290;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[2].__vftable);
  }
  std::runtime_error::~runtime_error(this);
}

{
  uint64_t vars8;

  YAML::Exception::~Exception(this);
  operator delete();
}

void YAML::ParserException::~ParserException(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  operator delete();
}

void YAML::RepresentationException::~RepresentationException(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  operator delete();
}

void YAML::InvalidNode::~InvalidNode(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  operator delete();
}

void YAML::BadConversion::~BadConversion(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  operator delete();
}

void YAML::BadSubscript::~BadSubscript(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  operator delete();
}

void YAML::BadPushback::~BadPushback(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  operator delete();
}

void YAML::BadFile::~BadFile(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  operator delete();
}

uint64_t YAML::Exp::ParseHex(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(result + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(result + 8);
  }
  if (!v2) {
    return 0;
  }
  uint64_t v4 = (void *)result;
  LODWORD(result) = 0;
  if (v3 < 0) {
    uint64_t v4 = (void *)*v4;
  }
  do
  {
    int v6 = *(char *)v4;
    uint64_t v4 = (void *)((char *)v4 + 1);
    int v5 = v6;
    if ((v6 - 97) >= 6)
    {
      if ((v5 - 65) >= 6)
      {
        if ((v5 - 48) >= 0xA)
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
          sub_100003470(v10, "bad character found while scanning hex number");
          sub_100043924((uint64_t)exception, a2, (uint64_t)v10);
          void *exception = off_10007D2D0;
        }
        int v7 = -48;
      }
      else
      {
        int v7 = -55;
      }
    }
    else
    {
      int v7 = -87;
    }
    double result = (v7 + v5 + 16 * result);
    --v2;
  }
  while (v2);
  return result;
}

void sub_1000506F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void YAML::Exp::Escape(YAML::Exp *this@<X0>, YAML::Stream *a2@<X1>, uint64_t a3@<X8>)
{
  memset(&v32, 0, sizeof(v32));
  if ((int)a2 >= 1)
  {
    int v5 = (int)a2;
    do
    {
      std::string::value_type v6 = YAML::Stream::get(this);
      std::string::push_back(&v32, v6);
      --v5;
    }
    while (v5);
  }
  int v7 = *((_DWORD *)this + 4);
  v31.__r_.__value_.__r.__words[0] = *((void *)this + 1);
  LODWORD(v31.__r_.__value_.__r.__words[1]) = v7;
  unsigned int v8 = YAML::Exp::ParseHex((uint64_t)&v32, &v31);
  unsigned int v9 = v8;
  if (HIWORD(v8) > 0x10u || (v8 & 0xFFFFF800) == 55296)
  {
    sub_100024BD8((uint64_t)&v31);
    sub_1000042E0(&v31.__r_.__value_.__r.__words[2], (uint64_t)"invalid unicode: ", 17);
    std::ostream::operator<<();
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    int v22 = *((_DWORD *)this + 4);
    v29.__r_.__value_.__r.__words[0] = *((void *)this + 1);
    LODWORD(v29.__r_.__value_.__r.__words[1]) = v22;
    std::stringbuf::str();
    sub_100043924((uint64_t)exception, &v29, (uint64_t)&__s);
    void *exception = off_10007D2D0;
  }
  if (v8 <= 0x7F)
  {
    *(unsigned char *)(a3 + 23) = 1;
    *(_WORD *)a3 = v8;
    goto LABEL_37;
  }
  if (v8 > 0x7FF)
  {
    if (HIWORD(v8))
    {
      *((unsigned char *)&v29.__r_.__value_.__s + 23) = 1;
      LOWORD(v29.__r_.__value_.__l.__data_) = ((v8 >> 18) - 16);
      char v28 = 1;
      v27[0] = (v8 >> 12) & 0x3F | 0x80;
      v27[1] = 0;
      int v16 = std::string::append(&v29, v27, 1uLL);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      __s.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      char v26 = 1;
      v25[0] = (v9 >> 6) & 0x3F | 0x80;
      v25[1] = 0;
      uint64_t v18 = std::string::append(&__s, v25, 1uLL);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      char v24 = 1;
      LOWORD(__p) = v9 & 0x3F | 0x80;
      char v20 = std::string::append(&v31, (const std::string::value_type *)&__p, 1uLL);
      *(std::string *)a3 = *v20;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (v24 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (v26 < 0) {
        operator delete(*(void **)v25);
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
      if (v28 < 0) {
        operator delete(*(void **)v27);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      {
        BOOL v12 = (void *)v29.__r_.__value_.__r.__words[0];
        goto LABEL_36;
      }
    }
    else
    {
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = ((v8 >> 12) - 32);
      *((unsigned char *)&v29.__r_.__value_.__s + 23) = 1;
      LOWORD(v29.__r_.__value_.__l.__data_) = (v8 >> 6) & 0x3F | 0x80;
      char v13 = std::string::append(&__s, (const std::string::value_type *)&v29, 1uLL);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      char v28 = 1;
      v27[0] = v9 & 0x3F | 0x80;
      v27[1] = 0;
      uint64_t v15 = std::string::append(&v31, v27, 1uLL);
      *(std::string *)a3 = *v15;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (v28 < 0) {
        operator delete(*(void **)v27);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        BOOL v12 = (void *)__s.__r_.__value_.__r.__words[0];
        goto LABEL_36;
      }
    }
  }
  else
  {
    *((unsigned char *)&v31.__r_.__value_.__s + 23) = 1;
    LOWORD(v31.__r_.__value_.__l.__data_) = ((v8 >> 6) - 64);
    *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
    LOWORD(__s.__r_.__value_.__l.__data_) = v8 & 0x3F | 0x80;
    int v11 = std::string::append(&v31, (const std::string::value_type *)&__s, 1uLL);
    *(std::string *)a3 = *v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v12 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_36:
      operator delete(v12);
    }
  }
LABEL_37:
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_100050B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a38 < 0)
  {
    operator delete(__p);
    if ((v46 & 1) == 0)
    {
LABEL_6:
      sub_100002BF0((uint64_t)&a40);
      if (*(char *)(v47 - 49) < 0) {
        operator delete(*(void **)(v47 - 72));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v45);
  goto LABEL_6;
}

void YAML::Exp::Escape(YAML::Exp *this@<X0>, uint64_t a2@<X8>)
{
  int v5 = YAML::Stream::get(this);
  int v6 = YAML::Stream::get(this);
  if (v5 != 39 || v6 != 39)
  {
    if (v6 > 91)
    {
      switch(v6)
      {
        case '\\':
          int v7 = "\\"";
          goto LABEL_4;
        case '_':
          int v7 = "\xA0";
          goto LABEL_4;
        case 'a':
          int v7 = "\a";
          goto LABEL_4;
        case 'b':
          int v7 = "\b";
          goto LABEL_4;
        case 'e':
          int v7 = "\x1B";
          goto LABEL_4;
        case 'f':
          int v7 = "\f";
          goto LABEL_4;
        case 'n':
          int v7 = "\n";
          goto LABEL_4;
        case 'r':
          int v7 = "\r";
          goto LABEL_4;
        case 't':
          goto LABEL_20;
        case 'u':
          uint64_t v8 = a2;
          unsigned int v9 = this;
          uint64_t v10 = 4;
          goto LABEL_38;
        case 'v':
          int v7 = "\v";
          goto LABEL_4;
        case 'x':
          uint64_t v8 = a2;
          unsigned int v9 = this;
          uint64_t v10 = 2;
          goto LABEL_38;
        default:
          goto LABEL_42;
      }
    }
    if (v6 > 46)
    {
      switch(v6)
      {
        case 'L':
          int v7 = "\u2028";
          goto LABEL_4;
        case 'M':
        case 'O':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
          break;
        case 'N':
          int v7 = "\x85";
          goto LABEL_4;
        case 'P':
          int v7 = "\u2029";
          goto LABEL_4;
        case 'U':
          uint64_t v8 = a2;
          unsigned int v9 = this;
          uint64_t v10 = 8;
LABEL_38:
          YAML::Exp::Escape(v9, (YAML::Stream *)v10, v8);
          return;
        default:
          if (v6 == 47)
          {
            int v7 = "/";
            goto LABEL_4;
          }
          if (v6 == 48)
          {
            *(unsigned char *)(a2 + 23) = 1;
            *(_WORD *)a2 = 0;
            return;
          }
          break;
      }
    }
    else if (v6 > 33)
    {
      if (v6 == 34)
      {
        int v7 = "\"";
        goto LABEL_4;
      }
      if (v6 == 39) {
        goto LABEL_3;
      }
    }
    else
    {
      if (v6 == 9)
      {
LABEL_20:
        int v7 = "\t";
        goto LABEL_4;
      }
      if (v6 == 32)
      {
        int v7 = " ";
        goto LABEL_4;
      }
    }
LABEL_42:
    std::string::value_type v11 = v6;
    sub_100024BD8((uint64_t)v18);
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    int v13 = *((_DWORD *)this + 4);
    uint64_t v16 = *((void *)this + 1);
    int v17 = v13;
    sub_100003470(&v14, "unknown escape character: ");
    std::string::push_back(&v14, v11);
    std::string v15 = v14;
    memset(&v14, 0, sizeof(v14));
    sub_100043924((uint64_t)exception, &v16, (uint64_t)&v15);
    void *exception = off_10007D2D0;
  }
LABEL_3:
  int v7 = "'";
LABEL_4:
  sub_100003470((void *)a2, v7);
}

void sub_100050F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      sub_100002BF0((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void YAML::detail::memory_holder::merge(uint64_t a1, uint64_t a2)
{
  int v3 = *(uint64_t **)a1;
  if (v3 != *(uint64_t **)a2)
  {
    sub_100051198(v3, **(void ***)a2, (void *)(*(void *)a2 + 8));
    int v6 = *(uint64_t **)a1;
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    int v7 = *(std::__shared_weak_count **)(a2 + 8);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v5;
    if (v7)
    {
      sub_100006AE0(v7);
    }
  }
}

void YAML::detail::memory::create_node(YAML::detail::memory *this)
{
}

void sub_100051160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100006AE0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100051198(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      double result = sub_100051890(v5, v6, v4 + 4, v4 + 4);
      int v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_100051224()
{
}

void sub_100051280()
{
}

void sub_1000512A4()
{
}

void sub_1000512FC()
{
}

void sub_100051320(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100051390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_100051438((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000513B4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1000513EC(uint64_t a1)
{
}

uint64_t sub_1000513F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100051438(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1000514CC((void *)(a2 + 136));
    int v3 = *(void **)(a2 + 112);
    if (v3)
    {
      *(void *)(a2 + 120) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(a2 + 80);
    if (v4)
    {
      *(void *)(a2 + 88) = v4;
      operator delete(v4);
    }
    if (*(char *)(a2 + 79) < 0) {
      operator delete(*(void **)(a2 + 56));
    }
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    operator delete();
  }
}

void *sub_1000514CC(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    double result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        double result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sub_100051530(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000515A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_100043FE4((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000515C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1000515FC(uint64_t a1)
{
}

uint64_t sub_100051604(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100051648(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000516B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_100051760((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000516DC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100051714(uint64_t a1)
{
}

uint64_t sub_10005171C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100051760(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100044370(a2 + 16, *(void **)(a2 + 24));
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
    if (v3) {
      sub_100006AE0(v3);
    }
    operator delete();
  }
}

uint64_t *sub_1000517C4(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        return (uint64_t *)v8;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = a3[1];
    v10[4] = *a3;
    v10[5] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    sub_100006674(a1, (uint64_t)v8, v6, v10);
  }
  return v10;
}

uint64_t *sub_100051890(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  int v6 = (uint64_t **)sub_100051928(a1, a2, &v12, &v11, a3);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    unint64_t v7 = (uint64_t *)operator new(0x30uLL);
    uint64_t v9 = a4[1];
    v7[4] = *a4;
    v7[5] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    sub_100006674(a1, v12, v8, v7);
  }
  return v7;
}

void *sub_100051928(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        int v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    long long v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      long long v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    char v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          char v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        char v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      int v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *YAML::detail::node_data::empty_scalar(YAML::detail::node_data *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000807C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000807C8))
  {
    qword_1000807B0 = 0;
    *(void *)algn_1000807B8 = 0;
    qword_1000807C0 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1000807B0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000807C8);
  }
  return &qword_1000807B0;
}

double YAML::detail::node_data::node_data(YAML::detail::node_data *this)
{
  *(unsigned char *)this = 0;
  *(void *)((char *)this + 4) = -1;
  *(void *)((char *)this + 12) = 0x1FFFFFFFFLL;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 17) = (char *)this + 136;
  *((void *)this + 18) = (char *)this + 136;
  *((void *)this + 19) = 0;
  return result;
}

uint64_t YAML::detail::node_data::mark_defined(uint64_t this)
{
  if (!*(_DWORD *)(this + 16)) {
    *(_DWORD *)(this + 16) = 1;
  }
  *(unsigned char *)this = 1;
  return this;
}

uint64_t YAML::detail::node_data::set_mark(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 12) = *((_DWORD *)a2 + 2);
  *(void *)(result + 4) = v2;
  return result;
}

void *YAML::detail::node_data::set_type(void *result, int a2)
{
  if (a2)
  {
    *(unsigned char *)double result = 1;
    if (*((_DWORD *)result + 4) != a2)
    {
      *((_DWORD *)result + 4) = a2;
      switch(a2)
      {
        case 4:
          result[15] = result[14];
          return sub_1000514CC(result + 17);
        case 3:
          result[11] = result[10];
          result[13] = 0;
          break;
        case 2:
          if (*((char *)result + 79) < 0)
          {
            *(unsigned char *)result[7] = 0;
            result[8] = 0;
          }
          else
          {
            *((unsigned char *)result + 56) = 0;
            *((unsigned char *)result + 79) = 0;
          }
          break;
      }
    }
  }
  else
  {
    *((_DWORD *)result + 4) = 0;
    *(unsigned char *)double result = 0;
  }
  return result;
}

std::string *YAML::detail::node_data::set_tag(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

uint64_t YAML::detail::node_data::set_style(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t YAML::detail::node_data::set_null(uint64_t this)
{
  *(unsigned char *)this = 1;
  *(_DWORD *)(this + 16) = 1;
  return this;
}

std::string *YAML::detail::node_data::set_scalar(uint64_t a1, const std::string *a2)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 16) = 2;
  return std::string::operator=((std::string *)(a1 + 56), a2);
}

uint64_t YAML::detail::node_data::begin@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)this)
  {
LABEL_5:
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    return this;
  }
  int v2 = *(_DWORD *)(this + 16);
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      uint64_t v3 = *(void *)(this + 80);
      *(_DWORD *)a2 = 1;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = v3;
      return this;
    }
    goto LABEL_5;
  }
  return sub_1000524BC(a2, *(unsigned char *****)(this + 112), *(unsigned char *****)(this + 120));
}

uint64_t YAML::detail::node_data::end@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)this)
  {
LABEL_5:
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    return this;
  }
  int v2 = *(_DWORD *)(this + 16);
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      uint64_t v3 = *(void *)(this + 88);
      *(_DWORD *)a2 = 1;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = v3;
      return this;
    }
    goto LABEL_5;
  }
  return sub_1000524BC(a2, *(unsigned char *****)(this + 120), *(unsigned char *****)(this + 120));
}

void YAML::detail::node_data::push_back(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4 > 1)
  {
    if (v4 != 3)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      sub_100051E78(exception);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 3;
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
    *(void *)(a1 + 104) = 0;
  }
  uint64_t v5 = a1 + 96;
  unint64_t v6 = *(void *)(a1 + 96);
  unint64_t v7 = *(void **)(a1 + 88);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *(void *)(a1 + 80);
    uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_100003974();
    }
    uint64_t v11 = v6 - v9;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      BOOL v14 = (char *)sub_100052514(v5, v13);
    }
    else {
      BOOL v14 = 0;
    }
    unint64_t v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    *(void *)unint64_t v15 = a2;
    uint64_t v8 = v15 + 8;
    unint64_t v18 = *(char **)(a1 + 80);
    int v17 = *(char **)(a1 + 88);
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int v17 = *(char **)(a1 + 80);
    }
    *(void *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = v8;
    *(void *)(a1 + 96) = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *unint64_t v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  *(void *)(a1 + 88) = v8;
}

void sub_100051E64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void YAML::detail::node_data::insert(uint64_t a1, unsigned char ***a2, unsigned char ***a3, void *a4)
{
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (v7 < 2 || v7 == 3)
  {
    uint64_t v9 = (std::__shared_weak_count *)a4[1];
    v11[0] = *a4;
    v11[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    YAML::detail::node_data::convert_to_map(a1, (uint64_t)v11);
    if (v9) {
      sub_100006AE0(v9);
    }
  }
  else if (v7 == 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    sub_10005203C(exception);
  }
  YAML::detail::node_data::insert_map_pair((void *)a1, a2, a3);
}

void sub_100051F50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void YAML::detail::node_data::convert_to_map(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 2)
  {
    *(void *)(a1 + 120) = *(void *)(a1 + 112);
    sub_1000514CC((void *)(a1 + 136));
    *(_DWORD *)(a1 + 16) = 4;
  }
  else if (v3 == 3)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    v5[0] = *(YAML::detail::memory ***)a2;
    v5[1] = (YAML::detail::memory **)v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    YAML::detail::node_data::convert_sequence_to_map(a1, v5);
    if (v4)
    {
      sub_100006AE0((std::__shared_weak_count *)v4);
    }
  }
  else if (v3 == 2)
  {
    sub_10005260C();
  }
}

void sub_100052024(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100006AE0(v1);
  }
  _Unwind_Resume(exception_object);
}

void YAML::detail::node_data::insert_map_pair(void *a1, unsigned char ***a2, unsigned char ***a3)
{
  unint64_t v8 = a1[16];
  uint64_t v6 = (uint64_t)(a1 + 16);
  unint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = (void **)(v6 - 16);
    uint64_t v12 = *(void *)(v6 - 16);
    uint64_t v13 = ((uint64_t)v9 - v12) >> 4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60) {
      sub_100003974();
    }
    uint64_t v15 = v7 - v12;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    int v17 = (char *)sub_10002A278(v6, v16);
    unint64_t v18 = &v17[16 * v13];
    char v20 = &v17[16 * v19];
    *(void *)unint64_t v18 = a2;
    *((void *)v18 + 1) = a3;
    uint64_t v10 = v18 + 16;
    unint64_t v22 = (char *)a1[14];
    int v21 = (char *)a1[15];
    if (v21 != v22)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v21 - 1);
        v18 -= 16;
        v21 -= 16;
      }
      while (v21 != v22);
      int v21 = (char *)*v11;
    }
    a1[14] = v18;
    a1[15] = v10;
    a1[16] = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *uint64_t v9 = a2;
    v9[1] = a3;
    uint64_t v10 = v9 + 2;
  }
  a1[15] = v10;
  if (!***a2 || !***a3)
  {
    uint64_t v23 = operator new(0x20uLL);
    v23[2] = a2;
    v23[3] = a3;
    uint64_t v25 = a1[17];
    int v24 = a1 + 17;
    *uint64_t v23 = v25;
    v23[1] = v24;
    *(void *)(v25 + 8) = v23;
    *int v24 = v23;
    ++v24[2];
  }
}

void *YAML::detail::node_data::convert_sequence_to_map(uint64_t a1, YAML::detail::memory ***a2)
{
  if (*(_DWORD *)(a1 + 16) != 3) {
    sub_100052638();
  }
  *(void *)(a1 + 120) = *(void *)(a1 + 112);
  double result = sub_1000514CC((void *)(a1 + 136));
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4 != *(void *)(a1 + 80))
  {
    sub_100024BD8((uint64_t)&v6);
    std::ostream::operator<<();
    YAML::detail::memory::create_node(**a2);
  }
  *(void *)(a1 + 88) = v4;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 16) = 4;
  return result;
}

void sub_1000523C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

void *sub_1000523FC(void *a1)
{
  uint64_t v5 = -1;
  int v6 = -1;
  sub_100003470(__p, "appending to a non-sequence");
  sub_100043924((uint64_t)a1, &v5, (uint64_t)__p);
  *a1 = off_10007D310;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10007D3D0;
  return a1;
}

void sub_1000524A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000524BC(uint64_t result, unsigned char ****a2, unsigned char ****a3)
{
  *(_DWORD *)double result = 2;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  if (a3 != a2)
  {
    while (!****a2 || !***a2[1])
    {
      a2 += 2;
      if (a2 == a3)
      {
        a2 = a3;
        break;
      }
    }
  }
  *(void *)(result + 16) = a2;
  return result;
}

void *sub_100052514(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_1000035CC();
  }
  return operator new(8 * a2);
}

void *sub_10005254C(void *a1)
{
  uint64_t v5 = -1;
  int v6 = -1;
  sub_100003470(__p, "operator[] call on a scalar");
  sub_100043924((uint64_t)a1, &v5, (uint64_t)__p);
  *a1 = off_10007D310;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10007D450;
  return a1;
}

void sub_1000525F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005260C()
{
}

void sub_100052638()
{
  __assert_rtn("convert_sequence_to_map", "node_data.cpp", 300, "m_type == NodeType::Sequence");
}

void YAML::NodeBuilder::NodeBuilder(YAML::NodeBuilder *this)
{
  *(void *)this = off_10007D5F8;
  operator new();
}

void sub_100052774(_Unwind_Exception *exception_object)
{
  unsigned int v3 = (void *)v1[10];
  if (v3)
  {
    v1[11] = v3;
    operator delete(v3);
  }
  char v4 = (void *)v1[7];
  if (v4)
  {
    v1[8] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)v1[4];
  if (v5)
  {
    v1[5] = v5;
    operator delete(v5);
  }
  int v6 = (std::__shared_weak_count *)v1[2];
  if (v6) {
    sub_100006AE0(v6);
  }
  _Unwind_Resume(exception_object);
}

void YAML::NodeBuilder::~NodeBuilder(YAML::NodeBuilder *this)
{
  *(void *)this = off_10007D5F8;
  int v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  char v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    sub_100006AE0(v5);
  }
}

{
  uint64_t vars8;

  YAML::NodeBuilder::~NodeBuilder(this);
  operator delete();
}

void YAML::NodeBuilder::Root(YAML::NodeBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v4 = *((void *)this + 1);
    unsigned int v3 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      *(unsigned char *)a2 = 1;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = v4;
      *(void *)(a2 + 40) = v3;
      *(void *)(a2 + 48) = v2;
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_100006AE0(v3);
    }
    else
    {
      *(unsigned char *)a2 = 1;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = v4;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = v2;
    }
  }
  else
  {
    *(unsigned char *)a2 = 1;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
  }
}

void YAML::NodeBuilder::OnNull(uint64_t a1)
{
}

void YAML::NodeBuilder::Push(uint64_t a1)
{
}

void YAML::NodeBuilder::Pop(YAML::NodeBuilder *this)
{
  uint64_t v1 = (char *)*((void *)this + 4);
  uint64_t v2 = (char *)*((void *)this + 5);
  if (v1 == v2) {
    sub_1000532AC();
  }
  if (v2 - v1 == 8)
  {
    *((void *)this + 3) = *(void *)v1;
    *((void *)this + 5) = v2 - 8;
    return;
  }
  int v6 = (unsigned char ***)*((void *)v2 - 1);
  uint64_t v5 = v2 - 8;
  uint64_t v4 = v6;
  *((void *)this + 5) = v5;
  unint64_t v7 = (uint64_t **)*((void *)v5 - 1);
  uint64_t v8 = **v7;
  if (!*(unsigned char *)v8) {
    goto LABEL_22;
  }
  int v9 = *(_DWORD *)(v8 + 16);
  if (v9 != 4)
  {
    if (v9 == 3)
    {
      uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 2);
      uint64_t v16 = *((void *)this + 1);
      int v17 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1000530AC(v7, (uint64_t)v4, &v16);
      if (v17) {
        sub_100006AE0(v17);
      }
      return;
    }
LABEL_22:
    sub_1000532D8();
  }
  uint64_t v11 = *((void *)this + 11);
  if (*((void *)this + 10) == v11) {
    sub_100053304();
  }
  if (*(unsigned char *)(v11 - 8))
  {
    uint64_t v12 = *(unsigned char ****)(v11 - 16);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 2);
    uint64_t v14 = *((void *)this + 1);
    uint64_t v15 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100053130(v7, v12, v4, &v14);
    if (v15) {
      sub_100006AE0(v15);
    }
    *((void *)this + 11) -= 16;
  }
  else
  {
    *(unsigned char *)(v11 - 8) = 1;
  }
}

void sub_100052AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    sub_100006AE0(a10);
  }
  _Unwind_Resume(exception_object);
}

void YAML::NodeBuilder::OnAlias(YAML::NodeBuilder *a1, uint64_t a2, uint64_t a3)
{
  YAML::NodeBuilder::Push(a1, *(void *)(*((void *)a1 + 7) + 8 * a3));
  YAML::NodeBuilder::Pop(a1);
}

void YAML::NodeBuilder::Push(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[4];
  int v6 = (void *)a1[5];
  uint64_t v5 = (void **)(a1 + 4);
  if (v4 == v6 || (uint64_t v7 = **(void **)*(v6 - 1), !*(unsigned char *)v7) || *(_DWORD *)(v7 + 16) != 4)
  {
    uint64_t v15 = (uint64_t)(a1 + 6);
    unint64_t v16 = a1[6];
    if ((unint64_t)v6 >= v16)
    {
      uint64_t v18 = v6 - v4;
      if ((unint64_t)(v18 + 1) >> 61) {
        goto LABEL_56;
      }
      uint64_t v19 = v16 - (void)v4;
      uint64_t v20 = v19 >> 2;
      if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
        uint64_t v20 = v18 + 1;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21) {
        unint64_t v22 = (char *)sub_100052514(v15, v21);
      }
      else {
        unint64_t v22 = 0;
      }
      uint64_t v23 = &v22[8 * v18];
      int v24 = &v22[8 * v21];
      *(void *)uint64_t v23 = a2;
      int v17 = v23 + 8;
      char v26 = (char *)a1[4];
      uint64_t v25 = (char *)a1[5];
      if (v25 != v26)
      {
        do
        {
          uint64_t v27 = *((void *)v25 - 1);
          v25 -= 8;
          *((void *)v23 - 1) = v27;
          v23 -= 8;
        }
        while (v25 != v26);
        uint64_t v25 = (char *)*v5;
      }
      a1[4] = v23;
      a1[5] = v17;
      a1[6] = v24;
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      void *v6 = a2;
      int v17 = v6 + 1;
    }
    a1[5] = v17;
    return;
  }
  uint64_t v9 = a1[10];
  uint64_t v10 = a1[11];
  uint64_t v8 = (char **)(a1 + 10);
  unint64_t v11 = a1[13];
  uint64_t v12 = (uint64_t)(a1 + 6);
  unint64_t v13 = a1[6];
  if ((unint64_t)v6 >= v13)
  {
    uint64_t v28 = v6 - v4;
    if (!((unint64_t)(v28 + 1) >> 61))
    {
      uint64_t v29 = v13 - (void)v4;
      uint64_t v30 = v29 >> 2;
      if (v29 >> 2 <= (unint64_t)(v28 + 1)) {
        uint64_t v30 = v28 + 1;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v31) {
        std::string v32 = (char *)sub_100052514(v12, v31);
      }
      else {
        std::string v32 = 0;
      }
      uint64_t v33 = &v32[8 * v28];
      uint64_t v34 = &v32[8 * v31];
      *(void *)uint64_t v33 = a2;
      uint64_t v14 = v33 + 8;
      uint64_t v36 = (char *)a1[4];
      uint64_t v35 = (char *)a1[5];
      if (v35 != v36)
      {
        do
        {
          uint64_t v37 = *((void *)v35 - 1);
          v35 -= 8;
          *((void *)v33 - 1) = v37;
          v33 -= 8;
        }
        while (v35 != v36);
        uint64_t v35 = (char *)*v5;
      }
      a1[4] = v33;
      a1[5] = v14;
      a1[6] = v34;
      if (v35) {
        operator delete(v35);
      }
      goto LABEL_38;
    }
LABEL_56:
    sub_100003974();
  }
  void *v6 = a2;
  uint64_t v14 = v6 + 1;
LABEL_38:
  a1[5] = v14;
  if ((v10 - v9) >> 4 < v11)
  {
    unint64_t v38 = a1[12];
    unint64_t v39 = a1[11];
    if (v39 >= v38)
    {
      uint64_t v41 = (uint64_t)(v39 - (void)*v8) >> 4;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 60) {
        sub_100003974();
      }
      uint64_t v43 = v38 - (void)*v8;
      if (v43 >> 3 > v42) {
        unint64_t v42 = v43 >> 3;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44) {
        uint64_t v45 = (char *)sub_10002A278((uint64_t)(a1 + 12), v44);
      }
      else {
        uint64_t v45 = 0;
      }
      int v46 = &v45[16 * v41];
      uint64_t v47 = &v45[16 * v44];
      *(void *)int v46 = a2;
      v46[8] = 0;
      uint64_t v40 = v46 + 16;
      uint64_t v49 = (char *)a1[10];
      uint64_t v48 = (char *)a1[11];
      if (v48 != v49)
      {
        do
        {
          *((_OWORD *)v46 - 1) = *((_OWORD *)v48 - 1);
          v46 -= 16;
          v48 -= 16;
        }
        while (v48 != v49);
        uint64_t v48 = *v8;
      }
      a1[10] = v46;
      a1[11] = v40;
      a1[12] = v47;
      if (v48) {
        operator delete(v48);
      }
    }
    else
    {
      *(void *)unint64_t v39 = a2;
      *(unsigned char *)(v39 + 8) = 0;
      uint64_t v40 = (char *)(v39 + 16);
    }
    a1[11] = v40;
  }
}

void YAML::NodeBuilder::OnScalar(uint64_t a1)
{
}

void YAML::NodeBuilder::OnSequenceStart(uint64_t a1)
{
}

void YAML::NodeBuilder::OnMapStart(uint64_t a1)
{
}

void YAML::NodeBuilder::OnMapEnd(YAML::NodeBuilder *this)
{
  uint64_t v1 = *((void *)this + 13);
  if (!v1) {
    sub_100053330();
  }
  *((void *)this + 13) = v1 - 1;
  YAML::NodeBuilder::Pop(this);
}

void YAML::NodeBuilder::RegisterAnchor(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = a1[7];
    uint64_t v7 = (void *)a1[8];
    int v6 = (void **)(a1 + 7);
    if (a2 != ((uint64_t)v7 - v5) >> 3) {
      sub_10005335C();
    }
    uint64_t v9 = (uint64_t)(a1 + 9);
    unint64_t v10 = a1[9];
    if ((unint64_t)v7 >= v10)
    {
      if ((unint64_t)(a2 + 1) >> 61) {
        sub_100003974();
      }
      uint64_t v12 = v10 - v5;
      uint64_t v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(a2 + 1)) {
        uint64_t v13 = a2 + 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        uint64_t v15 = (char *)sub_100052514(v9, v14);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v16 = &v15[8 * a2];
      int v17 = &v15[8 * v14];
      *(void *)unint64_t v16 = a3;
      unint64_t v11 = v16 + 8;
      uint64_t v19 = (char *)a1[7];
      uint64_t v18 = (char *)a1[8];
      if (v18 != v19)
      {
        do
        {
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *((void *)v16 - 1) = v20;
          v16 -= 8;
        }
        while (v18 != v19);
        uint64_t v18 = (char *)*v6;
      }
      a1[7] = v16;
      a1[8] = v11;
      a1[9] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *uint64_t v7 = a3;
      unint64_t v11 = v7 + 1;
    }
    a1[8] = v11;
  }
}

void sub_1000530AC(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  int v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  uint64_t v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1000531D4(v5, a2, (uint64_t)&v7);
  if (v8) {
    sub_100006AE0(v8);
  }
  sub_100046CC0(a2, (uint64_t)a1);
}

void sub_100053118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100006AE0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100053130(uint64_t **a1, unsigned char ***a2, unsigned char ***a3, uint64_t *a4)
{
  uint64_t v7 = *a1;
  uint64_t v8 = (std::__shared_weak_count *)a4[1];
  uint64_t v9 = *a4;
  unint64_t v10 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100053240(v7, a2, a3, &v9);
  if (v10) {
    sub_100006AE0(v10);
  }
  sub_100046CC0((uint64_t)a2, (uint64_t)a1);
  sub_100046CC0((uint64_t)a3, (uint64_t)a1);
}

void sub_1000531B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100006AE0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000531D4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v5 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  YAML::detail::node_data::push_back(v3, a2);
  if (v5) {
    sub_100006AE0(v5);
  }
}

void sub_100053228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100006AE0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100053240(uint64_t *a1, unsigned char ***a2, unsigned char ***a3, uint64_t *a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a4[1];
  uint64_t v6 = *a4;
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  YAML::detail::node_data::insert(v4, a2, a3, &v6);
  if (v7) {
    sub_100006AE0(v7);
  }
}

void sub_100053294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100006AE0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000532AC()
{
}

void sub_1000532D8()
{
}

void sub_100053304()
{
}

void sub_100053330()
{
}

void sub_10005335C()
{
  __assert_rtn("RegisterAnchor", "nodebuilder.cpp", 131, "anchor == m_anchors.size()");
}

BOOL YAML::IsNullString(unsigned __int8 **a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v1 = *((unsigned __int8 *)a1 + 23);
    if (!*((unsigned char *)a1 + 23)) {
      return 1;
    }
    if (v1 == 1) {
      return *(unsigned char *)a1 == 126;
    }
    if (v1 == 4)
    {
      if ((*(_DWORD *)a1 & 0xFFFFFFDF) != 0x6C6C754E) {
        return *(_DWORD *)a1 == 1280070990;
      }
      return 1;
    }
    return 0;
  }
  uint64_t v2 = a1[1];
  if (!v2) {
    return 1;
  }
  if (v2 != (unsigned __int8 *)1 || (BOOL v3 = **a1 == 126, **a1 != 126))
  {
    if (v2 == (unsigned __int8 *)4)
    {
      if (*(_DWORD *)*a1 == 1819047278) {
        return 1;
      }
      if (a1[1] == (unsigned __int8 *)4)
      {
        if (*(_DWORD *)*a1 == 1819047246) {
          return 1;
        }
        if (a1[1] == (unsigned __int8 *)4)
        {
          a1 = (unsigned __int8 **)*a1;
          return *(_DWORD *)a1 == 1280070990;
        }
      }
    }
    return 0;
  }
  return v3;
}

void YAML::Load()
{
  YAML::Parser::Parser(&v0);
}

void sub_1000534FC(_Unwind_Exception *a1)
{
  YAML::Parser::~Parser((YAML::Parser *)(v1 - 32));
  _Unwind_Resume(a1);
}

void YAML::LoadFile()
{
  sub_1000536DC(v1);
  if ((*((unsigned char *)&v1[4] + (unint64_t)*(v1[0] - 3)) & 5) == 0) {
    YAML::Load();
  }
  exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
  sub_1000538A0(exception);
}

void sub_1000536B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  sub_100002D28(&a10);
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_1000536DC(void (__cdecl ***a1)(std::ifstream *__hidden this)))(std::ifstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  a1[1] = 0;
  uint64_t v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 2);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_100053868(_Unwind_Exception *a1)
{
}

void *sub_1000538A0(void *a1)
{
  uint64_t v5 = -1;
  int v6 = -1;
  sub_100003470(__p, "bad file");
  sub_100043924((uint64_t)a1, &v5, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10007D410;
  return a1;
}

void sub_100053928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void YAML::Parser::Load()
{
}

void sub_1000539D8()
{
}

void YAML::Parser::Parser(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  YAML::Parser::Load();
}

void sub_100053A44(_Unwind_Exception *a1)
{
  YAML::Parser::~Parser(v1);
  _Unwind_Resume(a1);
}

void YAML::Parser::~Parser(YAML::Parser *this)
{
}

YAML::Scanner *sub_100053A94(YAML::Scanner **a1, YAML::Scanner *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    YAML::Scanner::~Scanner(result);
    operator delete();
  }
  return result;
}

uint64_t *sub_100053AE4(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    sub_10002A698(v2 + 16, *(void **)(v2 + 24));
    operator delete();
  }
  return result;
}

uint64_t YAML::Parser::HandleNextDocument(YAML::Scanner **a1)
{
  if (*a1)
  {
    YAML::Parser::ParseDirectives(a1);
    if (!YAML::Scanner::empty(*a1)) {
      YAML::SingleDocParser::SingleDocParser((YAML::SingleDocParser *)v3, *a1, a1[1]);
    }
  }
  return 0;
}

void sub_100053BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  YAML::SingleDocParser::~SingleDocParser((char **)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::Parser::ParseDirectives(YAML::Scanner **this)
{
  uint64_t result = YAML::Scanner::empty(*this);
  if ((result & 1) == 0)
  {
    char v3 = 0;
    do
    {
      uint64_t result = YAML::Scanner::peek(*this);
      if (*(_DWORD *)(result + 4)) {
        break;
      }
      if ((v3 & 1) == 0) {
        operator new();
      }
      YAML::Parser::HandleDirective((uint64_t)this, result);
      YAML::Scanner::pop((int64x2_t *)*this);
      uint64_t result = YAML::Scanner::empty(*this);
      char v3 = 1;
    }
    while (!result);
  }
  return result;
}

void sub_100053C70()
{
}

uint64_t YAML::Parser::HandleDirective(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (_DWORD *)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4 != 3)
    {
      if (v4 == 4 && **(_DWORD **)v2 == 1280131417) {
        return YAML::Parser::HandleYamlDirective(a1, a2);
      }
      return a1;
    }
    uint64_t v2 = *(_DWORD **)v2;
LABEL_11:
    int v5 = *(unsigned __int16 *)v2;
    int v6 = *((unsigned __int8 *)v2 + 2);
    if (v5 == 16724 && v6 == 71) {
      return (uint64_t)YAML::Parser::HandleTagDirective(a1, a2);
    }
    return a1;
  }
  int v3 = *(unsigned __int8 *)(a2 + 47);
  if (v3 == 3) {
    goto LABEL_11;
  }
  if (v3 == 4 && *v2 == 1280131417) {
    return YAML::Parser::HandleYamlDirective(a1, a2);
  }
  return a1;
}

uint64_t YAML::Parser::HandleYamlDirective(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 48;
  int v3 = *(const std::string **)(a2 + 48);
  if (*(void *)(v4 + 8) - (void)v3 != 24)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    sub_100003470(v22, "YAML directives must have exactly one argument");
    sub_100043924((uint64_t)exception, (_DWORD *)(a2 + 8), (uint64_t)v22);
    void *exception = off_10007D2D0;
  }
  if (!**(unsigned char **)(a1 + 8))
  {
    int v17 = __cxa_allocate_exception(0x38uLL);
    sub_100003470(v22, "repeated YAML directive");
    sub_100043924((uint64_t)v17, (_DWORD *)(a2 + 8), (uint64_t)v22);
    *int v17 = off_10007D2D0;
  }
  sub_10000273C(v22, v3, 24);
  std::istream::operator>>();
  std::istream::get();
  std::istream::operator>>();
  if ((*((unsigned char *)&v22[4] + (unint64_t)*(v22[0] - 3)) & 5) != 0 || std::istream::peek() != -1)
  {
    uint64_t v9 = __cxa_allocate_exception(0x38uLL);
    sub_100003470(&v19, "bad YAML version: ");
    uint64_t v10 = *(void *)(a2 + 48);
    int v11 = *(char *)(v10 + 23);
    if (v11 >= 0) {
      uint64_t v12 = *(const std::string::value_type **)(a2 + 48);
    }
    else {
      uint64_t v12 = *(const std::string::value_type **)v10;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(v10 + 8);
    }
    unint64_t v14 = std::string::append(&v19, v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v21 = v14->__r_.__value_.__r.__words[2];
    long long v20 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_100043924((uint64_t)v9, (_DWORD *)(a2 + 8), (uint64_t)&v20);
    *uint64_t v9 = off_10007D2D0;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(int *)(v6 + 4) >= 2)
  {
    uint64_t v18 = __cxa_allocate_exception(0x38uLL);
    sub_100003470(&v20, "YAML major version too large");
    sub_100043924((uint64_t)v18, (_DWORD *)(a2 + 8), (uint64_t)&v20);
    void *v18 = off_10007D2D0;
  }
  *(unsigned char *)uint64_t v6 = 0;
  *(void (__cdecl ***)(std::basic_stringstream<char> *__hidden))((char *)v22
  void v22[2] = v7;
  if (v23 < 0) {
    operator delete(v22[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10005411C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      sub_100002BF0((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

std::string *YAML::Parser::HandleTagDirective(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  if (*(void *)(a2 + 56) - v3 != 48)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    sub_100003470(v11, "TAG directives must have exactly two arguments");
    sub_100043924((uint64_t)exception, (_DWORD *)(a2 + 8), (uint64_t)v11);
    void *exception = off_10007D2D0;
  }
  uint64_t v5 = sub_10000A230(*(void *)(a1 + 8) + 16, *(const void ***)(a2 + 48));
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6 + 24 != v5)
  {
    uint64_t v10 = __cxa_allocate_exception(0x38uLL);
    sub_100003470(v11, "repeated TAG directive");
    sub_100043924((uint64_t)v10, (_DWORD *)(a2 + 8), (uint64_t)v11);
    void *v10 = off_10007D2D0;
  }
  v11[0] = (long long *)v3;
  uint64_t v7 = sub_100031CF4((uint64_t **)(v6 + 16), (const void **)v3, (uint64_t)&std::piecewise_construct, v11);
  return std::string::operator=((std::string *)(v7 + 7), (const std::string *)(v3 + 24));
}

void sub_10005435C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v15) {
    __cxa_free_exception(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t YAML::RegEx::RegEx(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(_WORD *)(this + 4) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

uint64_t YAML::RegEx::RegEx(uint64_t this, char a2)
{
  *(_DWORD *)this = 1;
  *(unsigned char *)(this + 4) = a2;
  *(unsigned char *)(this + 5) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

uint64_t YAML::RegEx::RegEx(uint64_t this, char a2, char a3)
{
  *(_DWORD *)this = 2;
  *(unsigned char *)(this + 4) = a2;
  *(unsigned char *)(this + 5) = a3;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

uint64_t YAML::RegEx::RegEx(uint64_t a1, char *a2, int a3)
{
  *(_DWORD *)a1 = a3;
  *(_WORD *)(a1 + 4) = 0;
  unint64_t v4 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    unint64_t v5 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    unint64_t v5 = v4;
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  sub_100054710((void *)(a1 + 8), a2, &a2[v5], v5);
  return a1;
}

uint64_t YAML::operator!@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 5;
  *(_WORD *)(a2 + 4) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t result = sub_100054914((uint64_t *)(a2 + 8), a1);
  *(void *)(a2 + 16) = result;
  return result;
}

void sub_100054484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100054694((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::operator|@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 3;
  *(_WORD *)(a3 + 4) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  unint64_t v5 = sub_100054914((uint64_t *)(a3 + 8), a1);
  unint64_t v6 = *(void *)(a3 + 24);
  *(void *)(a3 + 16) = v5;
  if (v5 >= v6)
  {
    uint64_t result = sub_100054914((uint64_t *)(a3 + 8), a2);
  }
  else
  {
    sub_1000548B0(a3 + 8, a2);
    uint64_t result = v5 + 32;
  }
  *(void *)(a3 + 16) = result;
  return result;
}

void sub_10005452C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100054694((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::operator&@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 4;
  *(_WORD *)(a3 + 4) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  unint64_t v5 = sub_100054914((uint64_t *)(a3 + 8), a1);
  unint64_t v6 = *(void *)(a3 + 24);
  *(void *)(a3 + 16) = v5;
  if (v5 >= v6)
  {
    uint64_t result = sub_100054914((uint64_t *)(a3 + 8), a2);
  }
  else
  {
    sub_1000548B0(a3 + 8, a2);
    uint64_t result = v5 + 32;
  }
  *(void *)(a3 + 16) = result;
  return result;
}

void sub_1000545D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100054694((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::operator+@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 6;
  *(_WORD *)(a3 + 4) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  unint64_t v5 = sub_100054914((uint64_t *)(a3 + 8), a1);
  unint64_t v6 = *(void *)(a3 + 24);
  *(void *)(a3 + 16) = v5;
  if (v5 >= v6)
  {
    uint64_t result = sub_100054914((uint64_t *)(a3 + 8), a2);
  }
  else
  {
    sub_1000548B0(a3 + 8, a2);
    uint64_t result = v5 + 32;
  }
  *(void *)(a3 + 16) = result;
  return result;
}

void sub_10005467C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100054694((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100054694(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 32;
        uint64_t v7 = v4 - 24;
        sub_100054694(&v7);
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_100054710(void *result, char *a2, char *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_1000299CC(result, a4);
    uint64_t result = (void *)sub_100054798((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100054778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100054694(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100054798(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      char v5 = *a2++;
      *(_DWORD *)uint64_t v4 = 1;
      *(unsigned char *)(v4 + 4) = v5;
      *(unsigned char *)(v4 + 5) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)(v4 + 24) = 0;
      *(void *)(v4 + 8) = 0;
      v4 += 32;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_100054820((uint64_t)v7);
  return v4;
}

uint64_t sub_100054820(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100054858(a1);
  }
  return a1;
}

void sub_100054858(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      uint64_t v3 = v1 - 32;
      uint64_t v4 = (void **)(v1 - 24);
      sub_100054694(&v4);
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void *sub_1000548B0(uint64_t a1, int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *a2;
  *(_WORD *)(v3 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t v3 = v4;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t result = sub_100054A1C((void *)(v3 + 8), *((int **)a2 + 1), *((int **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 5);
  *(void *)(a1 + 8) = v3 + 32;
  return result;
}

void sub_10005490C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100054914(uint64_t *a1, int *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_100003974();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100029C14(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = &v10[32 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  int v17 = &v10[32 * v9];
  int v12 = *a2;
  *((_WORD *)v11 + 2) = *((_WORD *)a2 + 2);
  *(_DWORD *)int v11 = v12;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 1) = 0;
  sub_100054A1C((void *)v11 + 1, *((int **)a2 + 1), *((int **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 5);
  v16 += 32;
  sub_100054B68(a1, v15);
  uint64_t v13 = a1[1];
  sub_100054D40(v15);
  return v13;
}

void sub_100054A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100054D40((void **)va);
  _Unwind_Resume(a1);
}

void *sub_100054A1C(void *result, int *a2, int *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_1000299CC(result, a4);
    uint64_t result = (void *)sub_100054AA4((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100054A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100054694(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100054AA4(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      int v7 = *v6;
      *(_WORD *)(v4 + 4) = *((_WORD *)v6 + 2);
      *(_DWORD *)uint64_t v4 = v7;
      *(void *)(v4 + 16) = 0;
      *(void *)(v4 + 24) = 0;
      *(void *)(v4 + 8) = 0;
      sub_100054A1C(v4 + 8);
      uint64_t v4 = v12 + 32;
      v12 += 32;
      v6 += 8;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_100054820((uint64_t)v9);
  return v4;
}

void sub_100054B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100054B68(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100054BE0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100054BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  void v15[2] = &v18;
  char v16 = 0;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      int v10 = *(_DWORD *)(v9 - 32);
      v9 -= 32;
      __int16 v11 = *(_WORD *)(v9 + 4);
      *(void *)(v7 - 24) = 0;
      uint64_t v12 = (void *)(v7 - 24);
      *((_WORD *)v12 - 2) = v11;
      *((_DWORD *)v12 - 2) = v10;
      v12[1] = 0;
      void v12[2] = 0;
      sub_100054A1C(v12, *(int **)(v9 + 8), *(int **)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 5);
      uint64_t v7 = *((void *)&v18 + 1) - 32;
      *((void *)&v18 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  sub_100054CB8((uint64_t)v15);
  return v13;
}

void sub_100054CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100054CB8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100054CF0(a1);
  }
  return a1;
}

void sub_100054CF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = (void **)(v1 + 8);
    sub_100054694(&v3);
    v1 += 32;
  }
}

void **sub_100054D40(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100054D74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    uint64_t v4 = (void **)(i - 24);
    sub_100054694(&v4);
  }
}

double YAML::Scanner::Scanner()
{
  uint64_t v0 = YAML::Stream::Stream();
  *(_DWORD *)(v0 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 20sub_100053A94((YAML::Scanner **)this, 0) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  *(void *)(v0 + 312) = 0;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 28sub_100053A94((YAML::Scanner **)this, 0) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  return result;
}

void YAML::Scanner::~Scanner(YAML::Scanner *this)
{
  sub_10005733C((void *)this + 34);
  uint64_t v2 = (void **)((char *)this + 248);
  sub_1000573E4(&v2);
  sub_100057004((void *)this + 25);
  sub_1000570FC((void *)this + 19);
  sub_1000571A4((void *)this + 12);
  YAML::Stream::~Stream(this);
}

BOOL YAML::Scanner::empty(YAML::Scanner *this)
{
  return *((void *)this + 17) == 0;
}

void YAML::Scanner::EnsureTokensInQueue(YAML::Scanner *this)
{
  uint64_t v2 = (int64x2_t *)((char *)this + 96);
  while (1)
  {
    while (1)
    {
      if (!*((void *)this + 17)) {
        goto LABEL_5;
      }
      int v3 = *(_DWORD *)(*(void *)(*((void *)this + 13) + 8 * (*((void *)this + 16) / 0x33uLL))
                     + 80 * (*((void *)this + 16) % 0x33uLL));
      if (v3 != 1) {
        break;
      }
      sub_100057CA4(v2);
    }
    if (!v3) {
      return;
    }
LABEL_5:
    if (*((unsigned char *)this + 145)) {
      break;
    }
    YAML::Scanner::ScanNextToken(this);
  }
}

void YAML::Scanner::pop(int64x2_t *this)
{
  YAML::Scanner::EnsureTokensInQueue((YAML::Scanner *)this);
  if (this[8].i64[1])
  {
    sub_100057CA4(this + 6);
  }
}

unint64_t YAML::Scanner::peek(YAML::Scanner *this)
{
  if (!*((void *)this + 17)) {
    sub_100058C54();
  }
  return *(void *)(*((void *)this + 13) + 8 * (*((void *)this + 16) / 0x33uLL))
       + 80 * (*((void *)this + 16) % 0x33uLL);
}

uint64_t YAML::Scanner::mark(YAML::Scanner *this)
{
  return *((void *)this + 1);
}

void YAML::Scanner::ScanNextToken(YAML::Scanner *this)
{
  if (*((unsigned char *)this + 145)) {
    return;
  }
  if (!*((unsigned char *)this + 144))
  {
    YAML::Scanner::StartStream(this);
  }
  YAML::Scanner::ScanToNextToken(this);
  YAML::Scanner::PopIndentToHere(this);
  if (YAML::Stream::operator BOOL(this))
  {
    if (*((_DWORD *)this + 4))
    {
LABEL_5:
      if (YAML::Stream::peek(this) == 91 || YAML::Stream::peek(this) == 123)
      {
        YAML::Scanner::ScanFlowStart(this);
      }
      else if (YAML::Stream::peek(this) == 93 || YAML::Stream::peek(this) == 125)
      {
        YAML::Scanner::ScanFlowEnd(this);
      }
      else if (YAML::Stream::peek(this) == 44)
      {
        YAML::Scanner::ScanFlowEntry(this);
      }
      else
      {
        uint64_t v4 = sub_100055B90();
        unint64_t v10 = 0;
        __int16 v11 = this;
        if ((sub_10005769C((uint64_t)v4, &v10) & 0x80000000) != 0)
        {
          if (*((void *)this + 39)) {
            uint64_t v5 = sub_100055DE4();
          }
          else {
            uint64_t v5 = sub_100055CF8();
          }
          unint64_t v10 = 0;
          __int16 v11 = this;
          if ((sub_10005769C((uint64_t)v5, &v10) & 0x80000000) != 0)
          {
            ValueRegex = YAML::Scanner::GetValueRegex(this);
            unint64_t v10 = 0;
            __int16 v11 = this;
            if ((sub_10005769C((uint64_t)ValueRegex, &v10) & 0x80000000) != 0)
            {
              if (YAML::Stream::peek(this) == 42 || YAML::Stream::peek(this) == 38)
              {
                YAML::Scanner::ScanAnchorOrAlias(this);
              }
              else if (YAML::Stream::peek(this) == 33)
              {
                YAML::Scanner::ScanTag(this);
              }
              else if (!*((void *)this + 39) {
                     && (YAML::Stream::peek(this) == 124 || YAML::Stream::peek(this) == 62))
              }
              {
                YAML::Scanner::ScanBlockScalar(this);
              }
              else if (YAML::Stream::peek(this) == 39 || YAML::Stream::peek(this) == 34)
              {
                YAML::Scanner::ScanQuotedScalar((std::string::size_type *)this);
              }
              else
              {
                if (*((void *)this + 39)) {
                  uint64_t v7 = sub_1000562A4();
                }
                else {
                  uint64_t v7 = sub_100055FB8();
                }
                unint64_t v10 = 0;
                __int16 v11 = this;
                if ((sub_10005769C((uint64_t)v7, &v10) & 0x80000000) != 0)
                {
                  exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
                  int v9 = *((_DWORD *)this + 4);
                  uint64_t v12 = *((void *)this + 1);
                  int v13 = v9;
                  sub_100003470(&v10, "unknown token");
                  sub_100043924((uint64_t)exception, &v12, (uint64_t)&v10);
                  void *exception = off_10007D2D0;
                }
                YAML::Scanner::ScanPlainScalar(this);
              }
            }
            else
            {
              YAML::Scanner::ScanValue(this);
            }
          }
          else
          {
            YAML::Scanner::ScanKey(this);
          }
        }
        else
        {
          YAML::Scanner::ScanBlockEntry(this);
        }
      }
      return;
    }
    if (YAML::Stream::peek(this) != 37)
    {
      if (!*((_DWORD *)this + 4))
      {
        uint64_t v2 = sub_100055848();
        unint64_t v10 = 0;
        __int16 v11 = this;
        if ((sub_10005769C((uint64_t)v2, &v10) & 0x80000000) == 0)
        {
          YAML::Scanner::ScanDocStart(this);
          return;
        }
        if (!*((_DWORD *)this + 4))
        {
          int v3 = sub_1000559EC();
          unint64_t v10 = 0;
          __int16 v11 = this;
          if ((sub_10005769C((uint64_t)v3, &v10) & 0x80000000) == 0)
          {
            YAML::Scanner::ScanDocEnd(this);
            return;
          }
        }
      }
      goto LABEL_5;
    }
    YAML::Scanner::ScanDirective(this);
  }
  else
  {
    YAML::Scanner::EndStream(this);
  }
}

void sub_100055394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void YAML::Scanner::StartStream(YAML::Scanner *this)
{
  *((unsigned char *)this + 144) = 1;
  *((unsigned char *)this + 146) = 1;
  operator new();
}

void sub_100055474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t YAML::Scanner::ScanToNextToken(YAML::Scanner *this)
{
  while (1)
  {
    while (YAML::Stream::operator BOOL(this))
    {
      int v2 = YAML::Stream::peek(this);
      if (v2 != 32 && v2 != 9) {
        break;
      }
      if (!*((void *)this + 39))
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000801E8, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1000801E8))
        {
          YAML::RegEx::RegEx((uint64_t)&unk_1000801C8, 9);
          __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_1000801C8, (void *)&_mh_execute_header);
          __cxa_guard_release(&qword_1000801E8);
        }
        unint64_t v9 = 0;
        v10[0] = this;
        if ((sub_10005769C((uint64_t)&unk_1000801C8, &v9) & 0x80000000) == 0) {
          *((unsigned char *)this + 146) = 0;
        }
      }
      YAML::Stream::eat(this, 1);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080210, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_100080210))
    {
      YAML::RegEx::RegEx((uint64_t)&dword_1000801F0, 35);
      __cxa_atexit((void (*)(void *))sub_1000565B0, &dword_1000801F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100080210);
    }
    LODWORD(v9) = dword_1000801F0;
    WORD2(v9) = word_1000801F4;
    memset(v10, 0, sizeof(v10));
    sub_100054A1C(v10, (int *)qword_1000801F8, unk_100080200, (unk_100080200 - qword_1000801F8) >> 5);
    v11[0] = 0;
    v11[1] = (void **)this;
    int v3 = sub_10005769C((uint64_t)&v9, (unint64_t *)v11);
    v11[0] = (void **)v10;
    sub_100054694(v11);
    if ((v3 & 0x80000000) == 0 && YAML::Stream::operator BOOL(this))
    {
      do
      {
        uint64_t v4 = sub_1000565EC();
        unint64_t v9 = 0;
        v10[0] = this;
        if ((sub_10005769C((uint64_t)v4, &v9) & 0x80000000) == 0) {
          break;
        }
        YAML::Stream::eat(this, 1);
      }
      while (YAML::Stream::operator BOOL(this));
    }
    uint64_t v5 = sub_1000565EC();
    unint64_t v9 = 0;
    v10[0] = this;
    uint64_t result = sub_10005769C((uint64_t)v5, &v9);
    if ((result & 0x80000000) != 0) {
      break;
    }
    uint64_t v7 = sub_1000565EC();
    unint64_t v9 = 0;
    v10[0] = this;
    int v8 = sub_10005769C((uint64_t)v7, &v9);
    YAML::Stream::eat(this, v8);
    YAML::Scanner::InvalidateSimpleKey(this);
    if (!*((void *)this + 39)) {
      *((unsigned char *)this + 146) = 1;
    }
  }
  return result;
}

void sub_1000556E4(_Unwind_Exception *a1)
{
}

void YAML::Scanner::PopIndentToHere(YAML::Scanner *this)
{
  if (!*((void *)this + 39))
  {
    while (1)
    {
      uint64_t v2 = *((void *)this + 30);
      if (!v2) {
        break;
      }
      int v3 = *(_DWORD **)(*(void *)(*((void *)this + 26)
                                  + (((unint64_t)(v2 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v2 + *((void *)this + 29) - 1) & 0x1FF));
      int v4 = *((_DWORD *)this + 4);
      if (*v3 < v4) {
        goto LABEL_10;
      }
      if (*v3 == v4)
      {
        if (v3[1] != 1) {
          goto LABEL_10;
        }
        uint64_t v5 = sub_100055B90();
        v6[0] = 0;
        v6[1] = (unint64_t)this;
        if ((sub_10005769C((uint64_t)v5, v6) & 0x80000000) == 0)
        {
          while (1)
          {
            uint64_t v2 = *((void *)this + 30);
            if (!v2) {
              break;
            }
LABEL_10:
            if (*(_DWORD *)(*(void *)(*(void *)(*((void *)this + 26)
                                                   + (((unint64_t)(v2 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                       + 8 * ((v2 + *((void *)this + 29) - 1) & 0x1FF))
                           + 8) != 1)
              return;
            YAML::Scanner::PopIndent(this);
          }
          return;
        }
      }
      YAML::Scanner::PopIndent(this);
    }
  }
}

uint64_t YAML::Scanner::EndStream(YAML::Scanner *this)
{
  if (*((int *)this + 4) >= 1) {
    *((_DWORD *)this + 4) = 0;
  }
  YAML::Scanner::PopAllIndents(this);
  uint64_t result = YAML::Scanner::PopAllSimpleKeys((uint64_t)this);
  *(_WORD *)((char *)this + 145) = 1;
  return result;
}

void *sub_100055848()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080058, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080058))
  {
    sub_100003470(__p, "---");
    YAML::RegEx::RegEx((uint64_t)&v8, (char *)__p, 6);
    uint64_t v1 = (int *)sub_10005749C();
    YAML::RegEx::RegEx((uint64_t)&v2);
    YAML::operator|(v1, &v2, (uint64_t)&v4);
    YAML::operator+(&v8, (int *)&v4, (uint64_t)&unk_100080038);
    unint64_t v10 = (void **)&v5;
    sub_100054694(&v10);
    unint64_t v10 = (void **)&v3;
    sub_100054694(&v10);
    int v4 = (void **)&v9;
    sub_100054694(&v4);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080038, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080058);
  }
  return &unk_100080038;
}

void sub_100055968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  *(void *)(v23 - 24) = v22 + 8;
  sub_100054694((void ***)(v23 - 24));
  *(void *)(v23 - 24) = &a10;
  sub_100054694((void ***)(v23 - 24));
  a13 = v23 - 48;
  sub_100054694((void ***)&a13);
  if (a22 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_100080058);
  _Unwind_Resume(a1);
}

void *sub_1000559EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000800F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000800F8))
  {
    sub_100003470(__p, "...");
    YAML::RegEx::RegEx((uint64_t)&v8, (char *)__p, 6);
    uint64_t v1 = (int *)sub_10005749C();
    YAML::RegEx::RegEx((uint64_t)&v2);
    YAML::operator|(v1, &v2, (uint64_t)&v4);
    YAML::operator+(&v8, (int *)&v4, (uint64_t)&unk_1000800D8);
    unint64_t v10 = (void **)&v5;
    sub_100054694(&v10);
    unint64_t v10 = (void **)&v3;
    sub_100054694(&v10);
    int v4 = (void **)&v9;
    sub_100054694(&v4);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_1000800D8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000800F8);
  }
  return &unk_1000800D8;
}

void sub_100055B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  *(void *)(v23 - 24) = v22 + 8;
  sub_100054694((void ***)(v23 - 24));
  *(void *)(v23 - 24) = &a10;
  sub_100054694((void ***)(v23 - 24));
  a13 = v23 - 48;
  sub_100054694((void ***)&a13);
  if (a22 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_1000800F8);
  _Unwind_Resume(a1);
}

void *sub_100055B90()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080120, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080120))
  {
    YAML::RegEx::RegEx((uint64_t)&v6, 45);
    uint64_t v1 = (int *)sub_10005749C();
    YAML::RegEx::RegEx((uint64_t)&v2);
    YAML::operator|(v1, &v2, (uint64_t)&v4);
    YAML::operator+(&v6, (int *)&v4, (uint64_t)&unk_100080100);
    int v8 = (void **)&v5;
    sub_100054694(&v8);
    int v8 = (void **)&v3;
    sub_100054694(&v8);
    int v4 = (void **)&v7;
    sub_100054694(&v4);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080100, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080120);
  }
  return &unk_100080100;
}

void sub_100055C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  *(void *)(v15 - 24) = v14 + 8;
  sub_100054694((void ***)(v15 - 24));
  *(void *)(v15 - 24) = &a11;
  sub_100054694((void ***)(v15 - 24));
  a14 = (void **)(v15 - 48);
  sub_100054694(&a14);
  __cxa_guard_abort(&qword_100080120);
  _Unwind_Resume(a1);
}

void *sub_100055CF8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080148, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080148))
  {
    YAML::RegEx::RegEx((uint64_t)&v2, 63);
    uint64_t v1 = (int *)sub_10005749C();
    YAML::operator+(&v2, v1, (uint64_t)&unk_100080128);
    int v4 = (void **)&v3;
    sub_100054694(&v4);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080128, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080148);
  }
  return &unk_100080128;
}

void sub_100055DB0(_Unwind_Exception *a1)
{
}

void *sub_100055DE4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080170, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080170))
  {
    YAML::RegEx::RegEx((uint64_t)&v2, 63);
    uint64_t v1 = (int *)sub_10005749C();
    YAML::operator+(&v2, v1, (uint64_t)&unk_100080150);
    int v4 = (void **)&v3;
    sub_100054694(&v4);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080150, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080170);
  }
  return &unk_100080150;
}

void sub_100055E9C(_Unwind_Exception *a1)
{
}

void *YAML::Scanner::GetValueRegex(YAML::Scanner *this)
{
  if (*((void *)this + 39))
  {
    if (*((unsigned char *)this + 147))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080288, memory_order_acquire) & 1) == 0)
      {
        if (__cxa_guard_acquire(&qword_100080288))
        {
          YAML::RegEx::RegEx((uint64_t)&unk_100080268, 58);
          __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080268, (void *)&_mh_execute_header);
          __cxa_guard_release(&qword_100080288);
        }
      }
      return &unk_100080268;
    }
    else
    {
      return sub_1000568B0();
    }
  }
  else
  {
    return sub_100056748();
  }
}

void sub_100055FA0(_Unwind_Exception *a1)
{
}

void *sub_100055FB8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080198, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080198))
  {
    uint64_t v1 = (int *)sub_10005749C();
    YAML::RegEx::RegEx((uint64_t)&v15, (char *)v13, 3);
    YAML::operator|(v1, &v15, (uint64_t)&v17);
    sub_100003470(__p, "-?:");
    YAML::RegEx::RegEx((uint64_t)&v9, (char *)__p, 3);
    int v2 = (int *)sub_10005749C();
    YAML::RegEx::RegEx((uint64_t)&v3);
    YAML::operator|(v2, &v3, (uint64_t)&v5);
    YAML::operator+(&v9, (int *)&v5, (uint64_t)&v11);
    YAML::operator|(&v17, (int *)&v11, (uint64_t)&v19);
    YAML::operator!(&v19, (uint64_t)&unk_100080178);
    std::string::size_type v21 = (void **)&v20;
    sub_100054694(&v21);
    std::string::size_type v21 = (void **)&v12;
    sub_100054694(&v21);
    std::string::size_type v21 = (void **)&v6;
    sub_100054694(&v21);
    std::string::size_type v21 = (void **)&v4;
    sub_100054694(&v21);
    uint64_t v5 = (void **)&v10;
    sub_100054694(&v5);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    __int16 v11 = (void **)&v18;
    sub_100054694(&v11);
    __int16 v11 = (void **)&v16;
    sub_100054694(&v11);
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080178, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080198);
  }
  return &unk_100080178;
}

void sub_100056194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  *(void *)(v38 - 4sub_100053A94((YAML::Scanner **)this, 0) = v37 + 8;
  sub_100054694((void ***)(v38 - 40));
  *(void *)(v38 - 4sub_100053A94((YAML::Scanner **)this, 0) = &a29;
  sub_100054694((void ***)(v38 - 40));
  *(void *)(v38 - 4sub_100053A94((YAML::Scanner **)this, 0) = &a15;
  sub_100054694((void ***)(v38 - 40));
  *(void *)(v38 - 4sub_100053A94((YAML::Scanner **)this, 0) = &a11;
  sub_100054694((void ***)(v38 - 40));
  a14 = &a25;
  sub_100054694((void ***)&a14);
  if (a23 < 0) {
    operator delete(__p);
  }
  a28 = v38 - 96;
  sub_100054694((void ***)&a28);
  a28 = v38 - 128;
  sub_100054694((void ***)&a28);
  if (a37 < 0) {
    operator delete(a32);
  }
  __cxa_guard_abort(&qword_100080198);
  _Unwind_Resume(a1);
}

void *sub_1000562A4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000801C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000801C0))
  {
    uint64_t v1 = (int *)sub_10005749C();
    YAML::RegEx::RegEx((uint64_t)&v11, (char *)v9, 3);
    YAML::operator|(v1, &v11, (uint64_t)&v13);
    sub_100003470(__p, "-:");
    YAML::RegEx::RegEx((uint64_t)&v5, (char *)__p, 3);
    int v2 = (int *)sub_10005754C();
    YAML::operator+(&v5, v2, (uint64_t)&v7);
    YAML::operator|(&v13, (int *)&v7, (uint64_t)&v15);
    YAML::operator!(&v15, (uint64_t)&unk_1000801A0);
    int v17 = (void **)&v16;
    sub_100054694(&v17);
    int v17 = (void **)&v8;
    sub_100054694(&v17);
    int v17 = (void **)&v6;
    sub_100054694(&v17);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = (void **)&v14;
    sub_100054694(&v7);
    uint64_t v7 = (void **)&v12;
    sub_100054694(&v7);
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_1000801A0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000801C0);
  }
  return &unk_1000801A0;
}

void sub_10005643C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31)
{
  *(void *)(v32 - 4sub_100053A94((YAML::Scanner **)this, 0) = v31 + 8;
  sub_100054694((void ***)(v32 - 40));
  *(void *)(v32 - 4sub_100053A94((YAML::Scanner **)this, 0) = &a21;
  sub_100054694((void ***)(v32 - 40));
  *(void *)(v32 - 4sub_100053A94((YAML::Scanner **)this, 0) = &a17;
  sub_100054694((void ***)(v32 - 40));
  if (a15 < 0) {
    operator delete(__p);
  }
  a20 = (uint64_t *)(v32 - 96);
  sub_100054694((void ***)&a20);
  a20 = &a31;
  sub_100054694((void ***)&a20);
  if (a29 < 0) {
    operator delete(a24);
  }
  __cxa_guard_abort(&qword_1000801C0);
  _Unwind_Resume(a1);
}

void *sub_100056510()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000801E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000801E8))
  {
    YAML::RegEx::RegEx((uint64_t)&unk_1000801C8, 9);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_1000801C8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000801E8);
  }
  return &unk_1000801C8;
}

void sub_100056598(_Unwind_Exception *a1)
{
}

uint64_t sub_1000565B0(uint64_t a1)
{
  int v3 = (void **)(a1 + 8);
  sub_100054694(&v3);
  return a1;
}

void *sub_1000565EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080238, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080238))
  {
    YAML::RegEx::RegEx((uint64_t)&v5, 10);
    sub_100003470(__p, "\r\n");
    YAML::RegEx::RegEx((uint64_t)&v3, (char *)__p, 6);
    YAML::operator|(&v5, (int *)&v3, (uint64_t)&unk_100080218);
    uint64_t v7 = (void **)&v4;
    sub_100054694(&v7);
    if (v2 < 0) {
      operator delete(__p[0]);
    }
    int v3 = (void **)&v6;
    sub_100054694(&v3);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080218, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080238);
  }
  return &unk_100080218;
}

void sub_1000566E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  *(void *)(v21 - 24) = v20 + 8;
  sub_100054694((void ***)(v21 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = &a20;
  sub_100054694((void ***)&a15);
  __cxa_guard_abort(&qword_100080238);
  _Unwind_Resume(a1);
}

void *sub_100056748()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080260, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080260))
  {
    YAML::RegEx::RegEx((uint64_t)&v6, 58);
    uint64_t v1 = (int *)sub_10005749C();
    YAML::RegEx::RegEx((uint64_t)&v2);
    YAML::operator|(v1, &v2, (uint64_t)&v4);
    YAML::operator+(&v6, (int *)&v4, (uint64_t)&unk_100080240);
    uint64_t v8 = (void **)&v5;
    sub_100054694(&v8);
    uint64_t v8 = (void **)&v3;
    sub_100054694(&v8);
    uint64_t v4 = (void **)&v7;
    sub_100054694(&v4);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080240, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080260);
  }
  return &unk_100080240;
}

void sub_100056844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  *(void *)(v15 - 24) = v14 + 8;
  sub_100054694((void ***)(v15 - 24));
  *(void *)(v15 - 24) = &a11;
  sub_100054694((void ***)(v15 - 24));
  a14 = (void **)(v15 - 48);
  sub_100054694(&a14);
  __cxa_guard_abort(&qword_100080260);
  _Unwind_Resume(a1);
}

void *sub_1000568B0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000802B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000802B0))
  {
    YAML::RegEx::RegEx((uint64_t)&v8, 58);
    uint64_t v1 = (int *)sub_10005749C();
    sub_100003470(__p, ",}");
    YAML::RegEx::RegEx((uint64_t)&v4, (char *)__p, 3);
    YAML::operator|(v1, &v4, (uint64_t)&v6);
    YAML::operator+(&v8, (int *)&v6, (uint64_t)&unk_100080290);
    char v10 = (void **)&v7;
    sub_100054694(&v10);
    char v10 = (void **)&v5;
    sub_100054694(&v10);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    int v6 = (void **)&v9;
    sub_100054694(&v6);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080290, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000802B0);
  }
  return &unk_100080290;
}

void sub_1000569D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(void *)(v20 - 24) = v19 + 8;
  sub_100054694((void ***)(v20 - 24));
  *(void *)(v20 - 24) = &a16;
  sub_100054694((void ***)(v20 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  a19 = v20 - 48;
  sub_100054694((void ***)&a19);
  __cxa_guard_abort(&qword_1000802B0);
  _Unwind_Resume(a1);
}

void sub_100056A50()
{
}

uint64_t sub_100056A58(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_100003974();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    v17[4] = result;
    if (v13) {
      uint64_t v14 = (char *)sub_100052514(result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[8 * v13];
    uint64_t v16 = *a2;
    *a2 = 0;
    *(void *)uint64_t v15 = v16;
    void v17[2] = v15 + 8;
    sub_100057D8C(a1, v17);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = sub_100057F2C((uint64_t)v17);
  }
  else
  {
    uint64_t v8 = *a2;
    *a2 = 0;
    *uint64_t v7 = v8;
    uint64_t v9 = v7 + 1;
    a1[1] = (uint64_t)v9;
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_100056B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057F2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::PopAllIndents(YAML::Scanner *this)
{
  if (!*((void *)this + 39))
  {
    while (1)
    {
      uint64_t v2 = *((void *)this + 30);
      if (!v2
        || *(_DWORD *)(*(void *)(*(void *)(*((void *)this + 26)
                                             + (((unint64_t)(v2 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((v2 + *((void *)this + 29) - 1) & 0x1FF))
                     + 4) == 2)
      {
        break;
      }
      YAML::Scanner::PopIndent(this);
    }
  }
}

unint64_t YAML::Scanner::PushToken(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 16);
  LODWORD(v7) = 0;
  DWORD1(v7) = a2;
  *((void *)&v7 + 1) = v3;
  int v8 = v4;
  *(_OWORD *)std::string __p = 0u;
  memset(v10, 0, sizeof(v10));
  int v11 = 0;
  sub_1000587D4((void *)(a1 + 96), &v7);
  uint64_t v12 = (void **)v10 + 1;
  sub_100003B14(&v12);
  if (SBYTE7(v10[0]) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v5 = *(void *)(a1 + 136) + *(void *)(a1 + 128) - 1;
  return *(void *)(*(void *)(a1 + 104) + 8 * (v5 / 0x33)) + 80 * (v5 % 0x33);
}

void sub_100056C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100056C8C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100056C8C(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  sub_100003B14(&v3);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t YAML::Scanner::GetStartTokenFor(uint64_t a1, int a2)
{
  if (!a2) {
    return 4;
  }
  if (a2 != 1)
  {
    if (a2 == 2) {
      sub_100058CAC();
    }
    sub_100058C80();
  }
  return 3;
}

uint64_t YAML::Scanner::PushIndentTo(uint64_t a1)
{
  if (!*(void *)(a1 + 312)) {
    operator new();
  }
  return 0;
}

void sub_100056E40()
{
}

void YAML::Scanner::PopIndent(YAML::Scanner *this)
{
  uint64_t v2 = *((void *)this + 30) - 1;
  uint64_t v3 = *(void *)(*(void *)(*((void *)this + 26)
                             + (((unint64_t)(v2 + *((void *)this + 29)) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((v2 + *((void *)this + 29)) & 0x1FF));
  *((void *)this + 3sub_100053A94((YAML::Scanner **)this, 0) = v2;
  sub_100058BE4((void *)this + 25, 1);
  if (*(_DWORD *)(v3 + 8))
  {
    YAML::Scanner::InvalidateSimpleKey(this);
  }
  else
  {
    int v4 = *(_DWORD *)(v3 + 4);
    if (v4)
    {
      if (v4 != 1) {
        return;
      }
      uint64_t v5 = *((void *)this + 1);
      int v6 = *((_DWORD *)this + 4);
      *(void *)&long long v9 = 0x500000000;
      *((void *)&v9 + 1) = v5;
      int v10 = v6;
      *(_OWORD *)std::string __p = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      int v14 = 0;
      sub_1000587D4((void *)this + 12, &v9);
    }
    else
    {
      uint64_t v7 = *((void *)this + 1);
      int v8 = *((_DWORD *)this + 4);
      *(void *)&long long v9 = 0x600000000;
      *((void *)&v9 + 1) = v7;
      int v10 = v8;
      *(_OWORD *)std::string __p = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      int v14 = 0;
      sub_1000587D4((void *)this + 12, &v9);
    }
    uint64_t v15 = (void **)&v12 + 1;
    sub_100003B14(&v15);
    if (SBYTE7(v12) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100056FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100056C8C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::Scanner::GetTopIndent(YAML::Scanner *this)
{
  uint64_t v1 = *((void *)this + 30);
  if (v1) {
    return **(unsigned int **)(*(void *)(*((void *)this + 26)
  }
                                         + (((unint64_t)(v1 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * ((v1 + *((void *)this + 29) - 1) & 0x1FF));
  else {
    return 0;
  }
}

uint64_t sub_100057004(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return sub_1000570AC((uint64_t)a1);
}

uint64_t sub_1000570AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1000570FC(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 42;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 85;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return sub_1000570AC((uint64_t)a1);
}

uint64_t sub_1000571A4(void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    unint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x33];
    uint64_t v7 = (uint64_t)*v6 + 80 * (v5 % 0x33);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x33] + 80 * ((a1[5] + v5) % 0x33);
    if (v7 != v8)
    {
      do
      {
        sub_1000572F4((uint64_t)v2, v7);
        v7 += 80;
        if (v7 - (void)*v6 == 4080)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v3 = (void **)a1[1];
      unint64_t v4 = (void **)a1[2];
    }
  }
  *uint64_t v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 25;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 51;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    long long v13 = *v3++;
    operator delete(v13);
  }
  return sub_1000570AC((uint64_t)a1);
}

void sub_1000572F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 48);
  sub_100003B14(&v3);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
}

uint64_t sub_10005733C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return sub_1000570AC((uint64_t)a1);
}

void sub_1000573E4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100057438((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_100057438(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void **)(result + 8);
  while (v3 != a2)
  {
    uint64_t v4 = *--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      operator delete();
    }
  }
  *(void *)(v2 + 8) = a2;
  return result;
}

void *sub_10005749C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080080, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080080))
  {
    uint64_t v1 = (int *)sub_10005754C();
    uint64_t v2 = (int *)sub_1000565EC();
    YAML::operator|(v1, v2, (uint64_t)&unk_100080060);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080060, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080080);
  }
  return &unk_100080060;
}

void sub_100057534(_Unwind_Exception *a1)
{
}

void *sub_10005754C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000800A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000800A8))
  {
    uint64_t v1 = (int *)sub_1000575FC();
    uint64_t v2 = (int *)sub_100056510();
    YAML::operator|(v1, v2, (uint64_t)&unk_100080088);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080088, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000800A8);
  }
  return &unk_100080088;
}

void sub_1000575E4(_Unwind_Exception *a1)
{
}

void *sub_1000575FC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000800D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000800D0))
  {
    YAML::RegEx::RegEx((uint64_t)&unk_1000800B0, 32);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_1000800B0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000800D0);
  }
  return &unk_1000800B0;
}

void sub_100057684(_Unwind_Exception *a1)
{
}

uint64_t sub_10005769C(uint64_t a1, unint64_t *a2)
{
  unint64_t v5 = *a2;
  uint64_t v4 = (YAML::Stream *)a2[1];
  if (*((void *)v4 + 8) <= v5 && !YAML::Stream::_ReadAheadTo(v4, v5)) {
    return 0xFFFFFFFFLL;
  }
  switch(*(_DWORD *)a1)
  {
    case 0:
      if (*(unsigned char *)(*(void *)(*(void *)(a2[1] + 32) + (((*(void *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                    + ((*(void *)(a2[1] + 56) + *a2) & 0xFFF)) == 4)
        uint64_t result = 0;
      else {
        uint64_t result = 0xFFFFFFFFLL;
      }
      break;
    case 1:
      if (*(unsigned __int8 *)(*(void *)(*(void *)(a2[1] + 32)
                                          + (((*(void *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                              + ((*(void *)(a2[1] + 56) + *a2) & 0xFFF)) == *(unsigned __int8 *)(a1 + 4))
        uint64_t result = 1;
      else {
        uint64_t result = 0xFFFFFFFFLL;
      }
      break;
    case 2:
      int v8 = *(char *)(*(void *)(*(void *)(a2[1] + 32) + (((*(void *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                   + ((*(void *)(a2[1] + 56) + *a2) & 0xFFF));
      uint64_t result = 0xFFFFFFFFLL;
      if (*(char *)(a1 + 4) <= v8)
      {
        if (*(char *)(a1 + 5) < v8) {
          uint64_t result = 0xFFFFFFFFLL;
        }
        else {
          uint64_t result = 1;
        }
      }
      break;
    case 3:
      uint64_t result = sub_100057ABC(a1, a2);
      break;
    case 4:
      uint64_t result = sub_100057B28(a1, a2);
      break;
    case 5:
      uint64_t result = sub_100057BB4(a1, a2);
      break;
    case 6:
      uint64_t result = sub_100057BF8(a1, a2);
      break;
    default:
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_100057860(uint64_t a1, void *a2)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      if (*(unsigned char *)(*(void *)(*(void *)(a2[1] + 32)
                                + (((*(void *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                    + ((*(void *)(a2[1] + 56) + *a2) & 0xFFFLL)) == 4)
        uint64_t v4 = 0;
      else {
        uint64_t v4 = 0xFFFFFFFFLL;
      }
      break;
    case 1:
      if (*(unsigned __int8 *)(*(void *)(*(void *)(a2[1] + 32)
                                          + (((*(void *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                              + ((*(void *)(a2[1] + 56) + *a2) & 0xFFFLL)) == *(unsigned __int8 *)(a1 + 4))
        uint64_t v4 = 1;
      else {
        uint64_t v4 = 0xFFFFFFFFLL;
      }
      break;
    case 2:
      int v5 = *(char *)(*(void *)(*(void *)(a2[1] + 32)
                               + (((*(void *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                   + ((*(void *)(a2[1] + 56) + *a2) & 0xFFFLL));
      uint64_t v4 = 0xFFFFFFFFLL;
      if (*(char *)(a1 + 4) <= v5)
      {
        if (*(char *)(a1 + 5) < v5) {
          uint64_t v4 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v4 = 1;
        }
      }
      break;
    case 3:
      uint64_t v6 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v6) {
        goto LABEL_37;
      }
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = sub_100057860(v6 + v7, a2);
        if ((v9 & 0x80000000) == 0) {
          break;
        }
        ++v8;
        uint64_t v6 = *(void *)(a1 + 8);
        v7 += 32;
        if (v8 >= (*(void *)(a1 + 16) - v6) >> 5) {
          goto LABEL_37;
        }
      }
      uint64_t v4 = v9;
      break;
    case 4:
      uint64_t v10 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v10) {
        goto LABEL_37;
      }
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      LODWORD(v4) = -1;
      do
      {
        unsigned int v13 = sub_100057860(v10 + v11, a2);
        if (v13 == -1) {
          goto LABEL_37;
        }
        if (v12) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v13;
        }
        ++v12;
        uint64_t v10 = *(void *)(a1 + 8);
        v11 += 32;
      }
      while (v12 < (*(void *)(a1 + 16) - v10) >> 5);
      break;
    case 5:
      uint64_t v14 = *(void *)(a1 + 8);
      uint64_t v4 = 0xFFFFFFFFLL;
      if (v14 != *(void *)(a1 + 16))
      {
        if ((int)sub_100057860(v14, a2) >= 0) {
          uint64_t v4 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v4 = 1;
        }
      }
      break;
    case 6:
      uint64_t v15 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v15)
      {
        uint64_t v4 = 0;
      }
      else
      {
        uint64_t v16 = 0;
        LODWORD(v4) = 0;
        unint64_t v17 = 0;
        do
        {
          uint64_t v18 = v15 + v16;
          uint64_t v19 = a2[1];
          uint64_t v20 = *a2 + (int)v4;
          if ((int)(v4 + *a2) < 0 != __OFADD__(v4, *a2)) {
            uint64_t v20 = 0;
          }
          v23[0] = v20;
          v23[1] = v19;
          int v21 = sub_10005769C(v18, v23);
          if (v21 == -1) {
            goto LABEL_37;
          }
          uint64_t v4 = (v21 + v4);
          ++v17;
          uint64_t v15 = *(void *)(a1 + 8);
          v16 += 32;
        }
        while (v17 < (*(void *)(a1 + 16) - v15) >> 5);
      }
      break;
    default:
LABEL_37:
      uint64_t v4 = 0xFFFFFFFFLL;
      break;
  }
  return v4;
}

uint64_t sub_100057ABC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) == v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t result = sub_100057860(v2 + v5, a2);
    if ((result & 0x80000000) == 0) {
      break;
    }
    ++v6;
    uint64_t v2 = *(void *)(a1 + 8);
    v5 += 32;
    if (v6 >= (*(void *)(a1 + 16) - v2) >> 5) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_100057B28(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) != v2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    LODWORD(v7) = -1;
    while (1)
    {
      unsigned int v8 = sub_100057860(v2 + v5, a2);
      if (v8 == -1) {
        break;
      }
      if (v6) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = v8;
      }
      ++v6;
      uint64_t v2 = *(void *)(a1 + 8);
      v5 += 32;
      if (v6 >= (*(void *)(a1 + 16) - v2) >> 5) {
        return v7;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_100057BB4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = 0xFFFFFFFFLL;
  if (v3 != *(void *)(a1 + 16))
  {
    if ((int)sub_100057860(v3, a2) >= 0) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  return v4;
}

uint64_t sub_100057BF8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) == v2) {
    return 0;
  }
  uint64_t v5 = 0;
  LODWORD(v6) = 0;
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = v2 + v5;
    uint64_t v9 = a2[1];
    uint64_t v10 = *a2 + (int)v6;
    if ((int)(v6 + *a2) < 0 != __OFADD__(v6, *a2)) {
      uint64_t v10 = 0;
    }
    v13[0] = v10;
    v13[1] = v9;
    int v11 = sub_10005769C(v8, v13);
    if (v11 == -1) {
      break;
    }
    uint64_t v6 = (v11 + v6);
    ++v7;
    uint64_t v2 = *(void *)(a1 + 8);
    v5 += 32;
    if (v7 >= (*(void *)(a1 + 16) - v2) >> 5) {
      return v6;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_100057CA4(int64x2_t *a1)
{
  sub_1000572F4((uint64_t)&a1[2].i64[1], *(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x33uLL)) + 80 * (a1[2].i64[0] % 0x33uLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_100065DC0);
  return sub_100057D2C((uint64_t)a1, 1);
}

uint64_t sub_100057D2C(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x33) {
    a2 = 1;
  }
  if (v2 < 0x66) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 51;
  }
  return v4 ^ 1u;
}

uint64_t sub_100057D8C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100057E04((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100057E04(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100057E9C((uint64_t)v13);
  return v11;
}

uint64_t sub_100057E9C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100057ED4(a1);
  }
  return a1;
}

uint64_t sub_100057ED4(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(result + 16) + 8);
  unint64_t v2 = *(uint64_t **)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    uint64_t *v1 = 0;
    if (result) {
      operator delete();
    }
    ++v1;
  }
  return result;
}

uint64_t sub_100057F2C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100057F64(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = result;
    do
    {
      *(void *)(v3 + 16) = v2 - 8;
      uint64_t result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        operator delete();
      }
      uint64_t v2 = *(void *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void sub_100057FC8(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100058050(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_100058050(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100052514(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100058368(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100058480((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100052514((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100052514((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_1000585A0(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1000586B8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10005831C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100058368(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_100052514(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_100058480(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_100052514(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_1000585A0(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_100052514(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_1000586B8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_100052514(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

__n128 sub_1000587D4(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 51 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1000588CC(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x33)) + 80 * (v7 % 0x33);
  long long v9 = *a2;
  *(_DWORD *)(v8 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)unint64_t v8 = v9;
  long long v10 = *(long long *)((char *)a2 + 24);
  *(void *)(v8 + 4sub_100053A94((YAML::Scanner **)this, 0) = *((void *)a2 + 5);
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  __n128 result = (__n128)a2[3];
  *(__n128 *)(v8 + 48) = result;
  *(void *)(v8 + 64) = *((void *)a2 + 8);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  *(_DWORD *)(v8 + 72) = *((_DWORD *)a2 + 18);
  ++a1[5];
  return result;
}

void sub_1000588CC(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x33;
  unint64_t v4 = v2 - 51;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100052514(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_100058368(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_100058480((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100052514((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100052514((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  sub_1000585A0(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1000586B8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100058B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100058BE4(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_100058C54()
{
}

void sub_100058C80()
{
}

void sub_100058CAC()
{
}

void YAML::ScanScalar(std::string::size_type a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  BOOL v6 = *(_DWORD *)(a2 + 20) == 2;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  *(unsigned char *)(a2 + 4sub_100053A94((YAML::Scanner **)this, 0) = 0;
  if (!*(void *)a2)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000802D8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1000802D8))
    {
      YAML::RegEx::RegEx((uint64_t)&unk_1000802B8);
      __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_1000802B8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1000802D8);
    }
    *(void *)a2 = &unk_1000802B8;
  }
  BOOL v79 = 0;
  int v77 = 0;
  BOOL v7 = 0;
  int v8 = 0;
  char v9 = 0;
  uint64_t v76 = -1;
LABEL_5:
  int v78 = v8;
  BOOL v80 = v7;
  while (1)
  {
    if (!YAML::Stream::operator BOOL((void *)a1)) {
      goto LABEL_122;
    }
LABEL_7:
    std::string::size_type size = (a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(a3->__r_.__value_.__r.__words[2])
         : a3->__r_.__value_.__l.__size_;
    while (1)
    {
      uint64_t v11 = *(void *)a2;
      std::string __p = 0;
      std::string::size_type v82 = a1;
      if ((sub_10005769C(v11, (unint64_t *)&__p) & 0x80000000) == 0
        || (uint64_t v12 = sub_1000565EC(),
            std::string __p = 0,
            std::string::size_type v82 = a1,
            (sub_10005769C((uint64_t)v12, (unint64_t *)&__p) & 0x80000000) == 0)
        || !YAML::Stream::operator BOOL((void *)a1))
      {
LABEL_38:
        int v20 = 0;
        goto LABEL_39;
      }
      if (!*(_DWORD *)(a1 + 16))
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080300, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_100080300))
        {
          uint64_t v18 = (int *)sub_100055848();
          uint64_t v19 = (int *)sub_1000559EC();
          YAML::operator|(v18, v19, (uint64_t)&unk_1000802E0);
          __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_1000802E0, (void *)&_mh_execute_header);
          __cxa_guard_release(&qword_100080300);
        }
        std::string __p = 0;
        std::string::size_type v82 = a1;
        if ((sub_10005769C((uint64_t)&unk_1000802E0, (unint64_t *)&__p) & 0x80000000) == 0)
        {
          int v13 = *(_DWORD *)(a2 + 32);
          if (v13 == 1) {
            goto LABEL_38;
          }
          if (v13 == 2)
          {
            exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
            int v75 = *(_DWORD *)(a1 + 16);
            uint64_t v84 = *(void *)(a1 + 8);
            int v85 = v75;
            sub_100003470(&__p, "illegal document indicator in scalar");
            sub_100043924((uint64_t)exception, &v84, (uint64_t)&__p);
            void *exception = off_10007D2D0;
          }
        }
      }
      if (*(unsigned char *)(a2 + 18) == 92)
      {
        BOOL v14 = sub_1000598A0();
        std::string __p = 0;
        std::string::size_type v82 = a1;
        if ((sub_10005769C((uint64_t)v14, (unint64_t *)&__p) & 0x80000000) == 0) {
          break;
        }
      }
      if (*(unsigned __int8 *)(a2 + 18) == YAML::Stream::peek((YAML::Stream *)a1))
      {
        YAML::Exp::Escape((YAML::Exp *)a1, (uint64_t)&__p);
        if ((v83 & 0x80u) == 0) {
          p_p = (const std::string::value_type *)&__p;
        }
        else {
          p_p = (const std::string::value_type *)__p;
        }
        if ((v83 & 0x80u) == 0) {
          std::string::size_type v17 = v83;
        }
        else {
          std::string::size_type v17 = v82;
        }
        std::string::append(a3, p_p, v17);
        if ((char)v83 < 0) {
          operator delete(__p);
        }
        if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = a3->__r_.__value_.__l.__size_;
        }
        BOOL v6 = 1;
        uint64_t v76 = size;
        char v9 = 1;
      }
      else
      {
        int v15 = YAML::Stream::get((YAML::Stream *)a1);
        std::string::push_back(a3, v15);
        BOOL v6 = 1;
        char v9 = 1;
        if (v15 != 9 && v15 != 32) {
          goto LABEL_7;
        }
      }
    }
    YAML::Stream::get((YAML::Stream *)a1);
    std::string::size_type size = SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0
         ? a3->__r_.__value_.__l.__size_
         : HIBYTE(a3->__r_.__value_.__r.__words[2]);
    int v20 = 1;
    uint64_t v76 = size;
    BOOL v6 = 1;
    char v9 = 1;
LABEL_39:
    if (!YAML::Stream::operator BOOL((void *)a1)) {
      break;
    }
    if (*(_DWORD *)(a2 + 32) == 1 && !*(_DWORD *)(a1 + 16))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080300, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_100080300))
      {
        uint64_t v40 = (int *)sub_100055848();
        uint64_t v41 = (int *)sub_1000559EC();
        YAML::operator|(v40, v41, (uint64_t)&unk_1000802E0);
        __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_1000802E0, (void *)&_mh_execute_header);
        __cxa_guard_release(&qword_100080300);
      }
      std::string __p = 0;
      std::string::size_type v82 = a1;
      if ((sub_10005769C((uint64_t)&unk_1000802E0, (unint64_t *)&__p) & 0x80000000) == 0) {
        goto LABEL_122;
      }
    }
    uint64_t v21 = *(void *)a2;
    std::string __p = 0;
    std::string::size_type v82 = a1;
    int v22 = sub_10005769C(v21, (unint64_t *)&__p);
    if ((v22 & 0x80000000) == 0)
    {
      if (*(unsigned char *)(a2 + 8))
      {
        YAML::Stream::eat((YAML::Stream *)a1, v22);
        unint64_t v45 = v76;
        goto LABEL_123;
      }
      goto LABEL_122;
    }
    if (*(_DWORD *)(a2 + 20) == 2) {
      std::string::erase(a3, size, 0xFFFFFFFFFFFFFFFFLL);
    }
    uint64_t v23 = sub_1000565EC();
    std::string __p = 0;
    std::string::size_type v82 = a1;
    int v24 = sub_10005769C((uint64_t)v23, (unint64_t *)&__p);
    YAML::Stream::eat((YAML::Stream *)a1, v24);
    while (YAML::Stream::peek((YAML::Stream *)a1) == 32
         && (*(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 12) || !((*(unsigned char *)(a2 + 16) == 0) | v9 & 1)))
    {
      uint64_t v25 = *(void *)a2;
      std::string __p = 0;
      std::string::size_type v82 = a1;
      if ((sub_10005769C(v25, (unint64_t *)&__p) & 0x80000000) == 0) {
        break;
      }
      YAML::Stream::eat((YAML::Stream *)a1, 1);
    }
    if (!((*(unsigned char *)(a2 + 16) == 0) | v9 & 1))
    {
      int v26 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a2 + 12) > v26) {
        int v26 = *(_DWORD *)(a2 + 12);
      }
      *(_DWORD *)(a2 + 12) = v26;
    }
    while (1)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000800A8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1000800A8))
      {
        uint64_t v28 = (int *)sub_1000575FC();
        uint64_t v29 = (int *)sub_100056510();
        YAML::operator|(v28, v29, (uint64_t)&unk_100080088);
        __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080088, (void *)&_mh_execute_header);
        __cxa_guard_release(&qword_1000800A8);
      }
      std::string __p = 0;
      std::string::size_type v82 = a1;
      if ((sub_10005769C((uint64_t)&unk_100080088, (unint64_t *)&__p) & 0x80000000) != 0) {
        break;
      }
      if (YAML::Stream::peek((YAML::Stream *)a1) == 9
        && *(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 12)
        && *(_DWORD *)(a2 + 36) == 2)
      {
        int v72 = __cxa_allocate_exception(0x38uLL);
        int v73 = *(_DWORD *)(a1 + 16);
        uint64_t v84 = *(void *)(a1 + 8);
        int v85 = v73;
        sub_100003470(&__p, "illegal tab when looking for indentation");
        sub_100043924((uint64_t)v72, &v84, (uint64_t)&__p);
        void *v72 = off_10007D2D0;
      }
      if (!*(unsigned char *)(a2 + 17)) {
        break;
      }
      uint64_t v27 = *(void *)a2;
      std::string __p = 0;
      std::string::size_type v82 = a1;
      if ((sub_10005769C(v27, (unint64_t *)&__p) & 0x80000000) == 0) {
        break;
      }
      YAML::Stream::eat((YAML::Stream *)a1, 1);
    }
    long long v30 = sub_1000565EC();
    std::string __p = 0;
    std::string::size_type v82 = a1;
    int v31 = sub_10005769C((uint64_t)v30, (unint64_t *)&__p);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000800A8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1000800A8))
    {
      uint64_t v38 = (int *)sub_1000575FC();
      uint64_t v39 = (int *)sub_100056510();
      YAML::operator|(v38, v39, (uint64_t)&unk_100080088);
      __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080088, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1000800A8);
    }
    std::string __p = 0;
    std::string::size_type v82 = a1;
    int v32 = sub_10005769C((uint64_t)&unk_100080088, (unint64_t *)&__p);
    int v33 = v32;
    BOOL v34 = v31 > -1 && v77 == 0;
    BOOL v7 = v32 >= 0;
    int v35 = *(_DWORD *)(a2 + 20);
    BOOL v36 = v34 && v35 == 1;
    BOOL v37 = v79;
    if (v36) {
      BOOL v37 = v80;
    }
    BOOL v79 = v37;
    if (!v6) {
      goto LABEL_84;
    }
    switch(v35)
    {
      case 0:
        std::string::append(a3, "\n");
        goto LABEL_84;
      case 2:
        if (v31 < 0)
        {
          if (((v78 | v20) & 1) == 0) {
            std::string::append(a3, " ");
          }
          goto LABEL_116;
        }
        int v78 = 1;
        std::string::append(a3, "\n");
        BOOL v80 = v7;
        BOOL v6 = 1;
        break;
      case 1:
        if ((v78 | v80) & 1 | (v31 >= 0) || (v32 & 0x80000000) == 0)
        {
          if ((v31 & 0x80000000) == 0)
          {
            ++v77;
            int v8 = 1;
            BOOL v6 = 1;
            goto LABEL_5;
          }
LABEL_102:
          uint64_t v42 = "\n";
        }
        else
        {
          uint64_t v42 = " ";
          if (*(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 12)) {
            goto LABEL_102;
          }
        }
        std::string::append(a3, v42);
        if (v31 < 0 && v77 >= 1)
        {
          sub_10000460C(&__p, (v77 - 1), 10);
          if ((v83 & 0x80u) == 0) {
            uint64_t v43 = (const std::string::value_type *)&__p;
          }
          else {
            uint64_t v43 = (const std::string::value_type *)__p;
          }
          if ((v83 & 0x80u) == 0) {
            std::string::size_type v44 = v83;
          }
          else {
            std::string::size_type v44 = v82;
          }
          std::string::append(a3, v43, v44);
          if ((char)v83 < 0) {
            operator delete(__p);
          }
          if (v79 || v33 >= 0 || (v9 & 1) == 0) {
            std::string::append(a3, "\n");
          }
          int v77 = 0;
        }
LABEL_116:
        int v8 = 0;
        BOOL v6 = 1;
        if (*(_DWORD *)(a1 + 16) >= *(_DWORD *)(a2 + 12)) {
          goto LABEL_5;
        }
        *(unsigned char *)(a2 + 4sub_100053A94((YAML::Scanner **)this, 0) = 1;
LABEL_122:
        unint64_t v45 = v76;
        goto LABEL_123;
      default:
LABEL_84:
        int v78 = 1;
        BOOL v80 = v7;
        BOOL v6 = 1;
        if (v31 < 0) {
          goto LABEL_116;
        }
        break;
    }
  }
  unint64_t v45 = v76;
  if (*(unsigned char *)(a2 + 8))
  {
    unint64_t v46 = __cxa_allocate_exception(0x38uLL);
    int v47 = *(_DWORD *)(a1 + 16);
    uint64_t v84 = *(void *)(a1 + 8);
    int v85 = v47;
    sub_100003470(&__p, "illegal EOF in scalar");
    sub_100043924((uint64_t)v46, &v84, (uint64_t)&__p);
    void *v46 = off_10007D2D0;
  }
LABEL_123:
  if (*(unsigned char *)(a2 + 24))
  {
    unint64_t v48 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v48 & 0x80u) == 0) {
      uint64_t v49 = a3;
    }
    else {
      uint64_t v49 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((v48 & 0x80u) != 0) {
      unint64_t v48 = a3->__r_.__value_.__l.__size_;
    }
    uint64_t v50 = (uint64_t)&v49[-1].__r_.__value_.__r.__words[2] + 7;
    unint64_t v51 = v48;
    while (v51)
    {
      int v52 = *(unsigned __int8 *)(v50 + v51--);
      if (v52 != 32) {
        goto LABEL_134;
      }
    }
    unint64_t v51 = -1;
LABEL_134:
    if (v51 != -1 && v51 >= v45) {
      unint64_t v54 = v51;
    }
    else {
      unint64_t v54 = v45;
    }
    if (v45 != -1) {
      unint64_t v51 = v54;
    }
    if (v51 < v48) {
      std::string::erase(a3, v51 + 1, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
  int v55 = *(_DWORD *)(a2 + 28);
  if (v55 == -1)
  {
    unint64_t v61 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v61 & 0x80u) == 0) {
      uint64_t v62 = a3;
    }
    else {
      uint64_t v62 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((v61 & 0x80u) != 0) {
      unint64_t v61 = a3->__r_.__value_.__l.__size_;
    }
    uint64_t v63 = (uint64_t)&v62[-1].__r_.__value_.__r.__words[2] + 7;
    unint64_t v64 = v61;
    while (v64)
    {
      int v65 = *(unsigned __int8 *)(v63 + v64--);
      if (v65 != 10) {
        goto LABEL_177;
      }
    }
    unint64_t v64 = -1;
LABEL_177:
    if (v64 != -1 && v64 >= v45) {
      unint64_t v70 = v64;
    }
    else {
      unint64_t v70 = v45;
    }
    if (v45 != -1) {
      unint64_t v64 = v70;
    }
    if (v64 == -1)
    {
      std::string::size_type v71 = 0;
    }
    else
    {
      if (v64 >= v61) {
        return;
      }
      std::string::size_type v71 = v64 + 1;
    }
    std::string::erase(a3, v71, 0xFFFFFFFFFFFFFFFFLL);
  }
  else if (!v55)
  {
    unint64_t v56 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v56 & 0x80u) == 0) {
      uint64_t v57 = a3;
    }
    else {
      uint64_t v57 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((v56 & 0x80u) != 0) {
      unint64_t v56 = a3->__r_.__value_.__l.__size_;
    }
    uint64_t v58 = (uint64_t)&v57[-1].__r_.__value_.__r.__words[2] + 7;
    unint64_t v59 = v56;
    while (v59)
    {
      int v60 = *(unsigned __int8 *)(v58 + v59--);
      if (v60 != 10) {
        goto LABEL_165;
      }
    }
    unint64_t v59 = -1;
LABEL_165:
    if (v59 != -1 && v59 >= v45) {
      unint64_t v67 = v59;
    }
    else {
      unint64_t v67 = v45;
    }
    if (v45 != -1) {
      unint64_t v59 = v67;
    }
    if (v59 == -1)
    {
      std::string::size_type v68 = 0;
LABEL_189:
      std::string::erase(a3, v68, 0xFFFFFFFFFFFFFFFFLL);
    }
    else if (v59 + 1 < v56)
    {
      std::string::size_type v68 = v59 + 2;
      goto LABEL_189;
    }
  }
}

void sub_1000597AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_guard_abort(&qword_1000802D8);
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(a1);
}

void *sub_1000598A0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080328, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080328))
  {
    YAML::RegEx::RegEx((uint64_t)&v2, 92);
    uint64_t v1 = (int *)sub_1000565EC();
    YAML::operator+(&v2, v1, (uint64_t)&unk_100080308);
    uint64_t v4 = (void **)&v3;
    sub_100054694(&v4);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080308, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080328);
  }
  return &unk_100080308;
}

void sub_100059958(_Unwind_Exception *a1)
{
}

uint64_t YAML::ScanVerbatimTag@<X0>(YAML *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  YAML::Stream::get(this);
  while (1)
  {
    if (!YAML::Stream::operator BOOL(this))
    {
LABEL_14:
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      int v11 = *((_DWORD *)this + 4);
      uint64_t v12 = *((void *)this + 1);
      int v13 = v11;
      sub_100003470(&__p, "end of verbatim tag not found");
      sub_100043924((uint64_t)exception, &v12, (uint64_t)&__p);
      void *exception = off_10007D2D0;
    }
    if (YAML::Stream::peek(this) == 62) {
      return YAML::Stream::get(this);
    }
    unint64_t v5 = sub_100059B48();
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    int v6 = sub_10005769C((uint64_t)v5, (unint64_t *)&__p);
    if (v6 < 1) {
      goto LABEL_14;
    }
    YAML::Stream::get(this, v6, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_100059AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100059B48()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080350, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080350))
  {
    uint64_t v1 = (int *)sub_100059F70();
    sub_100003470(__p, "#;/?:@&=+$,_.!~*'()[]");
    YAML::RegEx::RegEx((uint64_t)&v12, (char *)__p, 3);
    YAML::operator|(v1, &v12, (uint64_t)&v14);
    YAML::RegEx::RegEx((uint64_t)&v4, 37);
    int v2 = (int *)sub_10005A444();
    YAML::operator+(&v4, v2, (uint64_t)&v6);
    uint64_t v3 = (int *)sub_10005A444();
    YAML::operator+(&v6, v3, (uint64_t)&v8);
    YAML::operator|(&v14, (int *)&v8, (uint64_t)&unk_100080330);
    uint64_t v16 = (void **)&v9;
    sub_100054694(&v16);
    uint64_t v16 = (void **)&v7;
    sub_100054694(&v16);
    uint64_t v16 = (void **)&v5;
    sub_100054694(&v16);
    int v8 = (void **)&v15;
    sub_100054694(&v8);
    int v8 = (void **)&v13;
    sub_100054694(&v8);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080330, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080350);
  }
  return &unk_100080330;
}

void sub_100059CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  *(void *)(v27 - 24) = v26 + 8;
  sub_100054694((void ***)(v27 - 24));
  *(void *)(v27 - 24) = &a14;
  sub_100054694((void ***)(v27 - 24));
  *(void *)(v27 - 24) = &a10;
  sub_100054694((void ***)(v27 - 24));
  a17 = v27 - 48;
  sub_100054694((void ***)&a17);
  a17 = v27 - 80;
  sub_100054694((void ***)&a17);
  if (a26 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_100080350);
  _Unwind_Resume(a1);
}

uint64_t YAML::ScanTagHandle@<X0>(YAML *this@<X0>, YAML::Stream *a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  *(unsigned char *)a2 = 1;
  uint64_t v16 = 0;
  int v17 = 0;
  while (1)
  {
    uint64_t result = YAML::Stream::operator BOOL(this);
    if (!result) {
      return result;
    }
    uint64_t result = YAML::Stream::peek(this);
    if (result == 33)
    {
      if (!*(unsigned char *)a2)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
        sub_100003470(&__p, "illegal character found while scanning tag handle");
        sub_100043924((uint64_t)exception, &v16, (uint64_t)&__p);
        void *exception = off_10007D2D0;
      }
      return result;
    }
    if (*(unsigned char *)a2)
    {
      int v8 = sub_100059F70();
      __p.__r_.__value_.__r.__words[0] = 0;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
      int v9 = sub_10005769C((uint64_t)v8, (unint64_t *)&__p);
      if (v9 <= 0)
      {
        *(unsigned char *)a2 = 0;
        int v10 = *((_DWORD *)this + 4);
        uint64_t v16 = *((void *)this + 1);
        int v17 = v10;
      }
      else if (*(unsigned char *)a2)
      {
        goto LABEL_10;
      }
    }
    char v11 = sub_10005A060();
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    uint64_t result = sub_10005769C((uint64_t)v11, (unint64_t *)&__p);
    int v9 = result;
    if ((int)result < 1) {
      return result;
    }
LABEL_10:
    YAML::Stream::get(this, v9, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a3, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_100059F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v15 + 23) < 0) {
        operator delete(*(void **)v15);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void *sub_100059F70()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000803C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000803C8))
  {
    uint64_t v1 = (int *)sub_10005A65C();
    YAML::RegEx::RegEx((uint64_t)&v2, 45);
    YAML::operator|(v1, &v2, (uint64_t)&unk_1000803A8);
    int v4 = (void **)&v3;
    sub_100054694(&v4);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_1000803A8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000803C8);
  }
  return &unk_1000803A8;
}

void sub_10005A02C(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1 + 8;
  sub_100054694((void ***)(v2 - 24));
  __cxa_guard_abort(&qword_1000803C8);
  _Unwind_Resume(a1);
}

void *sub_10005A060()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080440, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080440))
  {
    uint64_t v1 = (int *)sub_100059F70();
    sub_100003470(__p, "#;/?:@&=+$_.~*'()");
    YAML::RegEx::RegEx((uint64_t)&v12, (char *)__p, 3);
    YAML::operator|(v1, &v12, (uint64_t)&v14);
    YAML::RegEx::RegEx((uint64_t)&v4, 37);
    uint64_t v2 = (int *)sub_10005A444();
    YAML::operator+(&v4, v2, (uint64_t)&v6);
    uint64_t v3 = (int *)sub_10005A444();
    YAML::operator+(&v6, v3, (uint64_t)&v8);
    YAML::operator|(&v14, (int *)&v8, (uint64_t)&unk_100080420);
    uint64_t v16 = (void **)&v9;
    sub_100054694(&v16);
    uint64_t v16 = (void **)&v7;
    sub_100054694(&v16);
    uint64_t v16 = (void **)&v5;
    sub_100054694(&v16);
    int v8 = (void **)&v15;
    sub_100054694(&v8);
    int v8 = (void **)&v13;
    sub_100054694(&v8);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080420, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080440);
  }
  return &unk_100080420;
}

void sub_10005A1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  *(void *)(v27 - 24) = v26 + 8;
  sub_100054694((void ***)(v27 - 24));
  *(void *)(v27 - 24) = &a14;
  sub_100054694((void ***)(v27 - 24));
  *(void *)(v27 - 24) = &a10;
  sub_100054694((void ***)(v27 - 24));
  a17 = v27 - 48;
  sub_100054694((void ***)&a17);
  a17 = v27 - 80;
  sub_100054694((void ***)&a17);
  if (a26 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_100080440);
  _Unwind_Resume(a1);
}

uint64_t YAML::ScanTagSuffix@<X0>(YAML *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  while (1)
  {
    uint64_t result = YAML::Stream::operator BOOL(this);
    if (!result) {
      break;
    }
    int v6 = sub_10005A060();
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    uint64_t result = sub_10005769C((uint64_t)v6, (unint64_t *)&__p);
    if ((int)result < 1) {
      break;
    }
    YAML::Stream::get(this, result, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a2, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  if (!v9)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    int v11 = *((_DWORD *)this + 4);
    uint64_t v12 = *((void *)this + 1);
    int v13 = v11;
    sub_100003470(&__p, "tag handle with no suffix");
    sub_100043924((uint64_t)exception, &v12, (uint64_t)&__p);
    void *exception = off_10007D2D0;
  }
  return result;
}

void sub_10005A3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v17 + 23) < 0) {
        operator delete(*(void **)v17);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void *sub_10005A444()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080378, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080378))
  {
    uint64_t v1 = (int *)sub_10005A5B8();
    YAML::RegEx::RegEx((uint64_t)&v4, 65, 70);
    YAML::operator|(v1, &v4, (uint64_t)&v6);
    YAML::RegEx::RegEx((uint64_t)&v2, 97, 102);
    YAML::operator|(&v6, (int *)&v2, (uint64_t)&unk_100080358);
    int v8 = (void **)&v3;
    sub_100054694(&v8);
    uint64_t v2 = (void **)&v7;
    sub_100054694(&v2);
    uint64_t v2 = (void **)&v5;
    sub_100054694(&v2);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080358, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080378);
  }
  return &unk_100080358;
}

void sub_10005A54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(void *)(v16 - 24) = v15 + 8;
  sub_100054694((void ***)(v16 - 24));
  a10 = (void **)(v16 - 48);
  sub_100054694(&a10);
  a10 = (void **)&a15;
  sub_100054694(&a10);
  __cxa_guard_abort(&qword_100080378);
  _Unwind_Resume(a1);
}

void *sub_10005A5B8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000803A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000803A0))
  {
    YAML::RegEx::RegEx((uint64_t)&unk_100080380, 48, 57);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080380, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000803A0);
  }
  return &unk_100080380;
}

void sub_10005A644(_Unwind_Exception *a1)
{
}

void *sub_10005A65C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000803F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000803F0))
  {
    uint64_t v1 = (int *)sub_10005A70C();
    uint64_t v2 = (int *)sub_10005A5B8();
    YAML::operator|(v1, v2, (uint64_t)&unk_1000803D0);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_1000803D0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000803F0);
  }
  return &unk_1000803D0;
}

void sub_10005A6F4(_Unwind_Exception *a1)
{
}

void *sub_10005A70C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080418, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080418))
  {
    YAML::RegEx::RegEx((uint64_t)&v3, 97, 122);
    YAML::RegEx::RegEx((uint64_t)&v1, 65, 90);
    YAML::operator|(&v3, (int *)&v1, (uint64_t)&unk_1000803F8);
    uint64_t v5 = (void **)&v2;
    sub_100054694(&v5);
    uint64_t v1 = (void **)&v4;
    sub_100054694(&v1);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_1000803F8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080418);
  }
  return &unk_1000803F8;
}

void sub_10005A7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(void *)(v16 - 24) = v15 + 8;
  sub_100054694((void ***)(v16 - 24));
  a10 = (void **)&a15;
  sub_100054694(&a10);
  __cxa_guard_abort(&qword_100080418);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanDirective(YAML::Scanner *this)
{
  memset(v25, 0, 24);
  YAML::Scanner::PopAllIndents(this);
  YAML::Scanner::PopAllSimpleKeys((uint64_t)this);
  *((_WORD *)this + 73) = 0;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  *(void *)&long long v19 = 0;
  *((void *)&v19 + 1) = v2;
  int v20 = v3;
  *(_OWORD *)std::string __p = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  int v24 = 0;
  YAML::Stream::eat(this, 1);
  while (YAML::Stream::operator BOOL(this))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080080, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_100080080))
    {
      uint64_t v5 = (int *)sub_10005754C();
      int v6 = (int *)sub_1000565EC();
      YAML::operator|(v5, v6, (uint64_t)&unk_100080060);
      __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080060, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100080080);
    }
    v17.__r_.__value_.__r.__words[0] = 0;
    v17.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((sub_10005769C((uint64_t)&unk_100080060, (unint64_t *)&v17) & 0x80000000) == 0) {
      break;
    }
    std::string::value_type v4 = YAML::Stream::get(this);
    std::string::push_back((std::string *)__p, v4);
  }
  while (1)
  {
    while (1)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000800A8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1000800A8))
      {
        uint64_t v15 = (int *)sub_1000575FC();
        uint64_t v16 = (int *)sub_100056510();
        YAML::operator|(v15, v16, (uint64_t)&unk_100080088);
        __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080088, (void *)&_mh_execute_header);
        __cxa_guard_release(&qword_1000800A8);
      }
      v17.__r_.__value_.__r.__words[0] = 0;
      v17.__r_.__value_.__l.__size_ = (std::string::size_type)this;
      if ((sub_10005769C((uint64_t)&unk_100080088, (unint64_t *)&v17) & 0x80000000) != 0) {
        break;
      }
      YAML::Stream::eat(this, 1);
    }
    if (!YAML::Stream::operator BOOL(this)) {
      break;
    }
    uint64_t v7 = sub_1000565EC();
    v17.__r_.__value_.__r.__words[0] = 0;
    v17.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((sub_10005769C((uint64_t)v7, (unint64_t *)&v17) & 0x80000000) == 0) {
      break;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080210, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_100080210))
    {
      YAML::RegEx::RegEx((uint64_t)&dword_1000801F0, 35);
      __cxa_atexit((void (*)(void *))sub_1000565B0, &dword_1000801F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100080210);
    }
    LODWORD(v17.__r_.__value_.__l.__data_) = dword_1000801F0;
    WORD2(v17.__r_.__value_.__r.__words[0]) = word_1000801F4;
    uint64_t v18 = 0;
    *(_OWORD *)&v17.__r_.__value_.__r.__words[1] = 0uLL;
    sub_100054A1C(&v17.__r_.__value_.__l.__size_, (int *)qword_1000801F8, unk_100080200, (unk_100080200 - qword_1000801F8) >> 5);
    p_std::string::size_type size = 0;
    uint64_t v27 = this;
    int v8 = sub_10005769C((uint64_t)&v17, (unint64_t *)&p_size);
    p_std::string::size_type size = &v17.__r_.__value_.__l.__size_;
    sub_100054694((void ***)&p_size);
    if ((v8 & 0x80000000) == 0) {
      break;
    }
    memset(&v17, 0, sizeof(v17));
    while (YAML::Stream::operator BOOL(this))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080080, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_100080080))
      {
        int v10 = (int *)sub_10005754C();
        int v11 = (int *)sub_1000565EC();
        YAML::operator|(v10, v11, (uint64_t)&unk_100080060);
        __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080060, (void *)&_mh_execute_header);
        __cxa_guard_release(&qword_100080080);
      }
      p_std::string::size_type size = 0;
      uint64_t v27 = this;
      if ((sub_10005769C((uint64_t)&unk_100080060, (unint64_t *)&p_size) & 0x80000000) == 0) {
        break;
      }
      std::string::value_type v9 = YAML::Stream::get(this);
      std::string::push_back(&v17, v9);
    }
    uint64_t v12 = (_OWORD *)v23;
    if ((unint64_t)v23 >= *((void *)&v23 + 1))
    {
      uint64_t v14 = sub_100003F94((uint64_t *)&v22 + 1, (long long *)&v17);
    }
    else
    {
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_100003600((unsigned char *)v23, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v13 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
        *(void *)(v23 + 16) = *((void *)&v17.__r_.__value_.__l + 2);
        *uint64_t v12 = v13;
      }
      uint64_t v14 = (uint64_t)v12 + 24;
    }
    *(void *)&long long v23 = v14;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  sub_10005DD4C((void *)this + 12, &v19);
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22 + 8;
  sub_100003B14((void ***)&v17);
  if (SBYTE7(v22) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v19 = v25;
  sub_100003B14((void ***)&v19);
}

void sub_10005AC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  a17 = &a27;
  sub_100003B14((void ***)&a17);
  _Unwind_Resume(a1);
}

void *sub_10005ACD8@<X0>(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080210, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080210))
  {
    YAML::RegEx::RegEx((uint64_t)&dword_1000801F0, 35);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &dword_1000801F0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080210);
  }
  *(_DWORD *)a1 = dword_1000801F0;
  *(_WORD *)(a1 + 4) = word_1000801F4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (int *)qword_1000801F8;
  int v3 = (int *)unk_100080200;
  unint64_t v4 = (unk_100080200 - qword_1000801F8) >> 5;
  return sub_100054A1C((void *)(a1 + 8), v2, v3, v4);
}

void sub_10005AD9C(_Unwind_Exception *a1)
{
}

void YAML::Scanner::ScanDocStart(YAML::Scanner *this)
{
  YAML::Scanner::PopAllIndents(this);
  YAML::Scanner::PopAllSimpleKeys((uint64_t)this);
  *((_WORD *)this + 73) = 0;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  YAML::Stream::eat(this, 3);
  *(void *)&long long v4 = &_mh_execute_header;
  *((void *)&v4 + 1) = v2;
  int v5 = v3;
  *(_OWORD *)std::string __p = 0u;
  memset(v7, 0, sizeof(v7));
  int v8 = 0;
  sub_1000587D4((void *)this + 12, &v4);
  std::string::value_type v9 = (void **)v7 + 1;
  sub_100003B14(&v9);
  if (SBYTE7(v7[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005AE5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100056C8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanDocEnd(YAML::Scanner *this)
{
  YAML::Scanner::PopAllIndents(this);
  YAML::Scanner::PopAllSimpleKeys((uint64_t)this);
  *((_WORD *)this + 73) = 0;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  YAML::Stream::eat(this, 3);
  *(void *)&long long v4 = 0x200000000;
  *((void *)&v4 + 1) = v2;
  int v5 = v3;
  *(_OWORD *)std::string __p = 0u;
  memset(v7, 0, sizeof(v7));
  int v8 = 0;
  sub_1000587D4((void *)this + 12, &v4);
  std::string::value_type v9 = (void **)v7 + 1;
  sub_100003B14(&v9);
  if (SBYTE7(v7[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005AF18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100056C8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanFlowStart(YAML::Scanner *this)
{
  YAML::Scanner::InsertPotentialSimpleKey(this);
  *((_WORD *)this + 73) = 1;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  BOOL v10 = YAML::Stream::get(this) == 91;
  sub_10005DED0((void *)this + 34, &v10);
  if (v10) {
    int v4 = 8;
  }
  else {
    int v4 = 9;
  }
  LODWORD(v5) = 0;
  DWORD1(v5) = v4;
  *((void *)&v5 + 1) = v2;
  int v6 = v3;
  *(_OWORD *)std::string __p = 0u;
  memset(v8, 0, sizeof(v8));
  int v9 = 0;
  sub_1000587D4((void *)this + 12, &v5);
  int v11 = (void **)v8 + 1;
  sub_100003B14(&v11);
  if (SBYTE7(v8[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005AFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void YAML::Scanner::ScanFlowEnd(YAML::Scanner *this)
{
  uint64_t v2 = *((void *)this + 39);
  if (!v2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    int v17 = *((_DWORD *)this + 4);
    uint64_t v25 = (void **)*((void *)this + 1);
    int v26 = v17;
    sub_100003470(&v19, "illegal flow end");
    sub_100043924((uint64_t)exception, &v25, (uint64_t)&v19);
    void *exception = off_10007D2D0;
  }
  unint64_t v3 = v2 + *((void *)this + 38) - 1;
  uint64_t v4 = *((void *)this + 35);
  unint64_t v5 = v3 >> 10;
  uint64_t v6 = *(void *)(v4 + 8 * (v3 >> 10));
  unint64_t v7 = v3 & 0x3FF;
  if (!*(_DWORD *)(v6 + 4 * v7))
  {
    if (YAML::Scanner::VerifySimpleKey(this))
    {
      uint64_t v8 = *((void *)this + 1);
      int v9 = *((_DWORD *)this + 4);
      *(void *)&long long v19 = 0xF00000000;
      *((void *)&v19 + 1) = v8;
      int v20 = v9;
      *(_OWORD *)std::string __p = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      int v24 = 0;
      sub_1000587D4((void *)this + 12, &v19);
      uint64_t v25 = (void **)&v22 + 1;
      sub_100003B14(&v25);
      if (SBYTE7(v22) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_9;
    }
    uint64_t v4 = *((void *)this + 35);
    unint64_t v10 = *((void *)this + 39) + *((void *)this + 38) - 1;
    unint64_t v5 = v10 >> 10;
    unint64_t v7 = v10 & 0x3FF;
  }
  if (*(_DWORD *)(*(void *)(v4 + 8 * v5) + 4 * v7) == 1) {
    YAML::Scanner::InvalidateSimpleKey(this);
  }
LABEL_9:
  *((_WORD *)this + 73) = 256;
  int v11 = *((_DWORD *)this + 4);
  uint64_t v25 = (void **)*((void *)this + 1);
  int v26 = v11;
  int v12 = YAML::Stream::get(this);
  uint64_t v13 = *((void *)this + 39) - 1;
  if (*(_DWORD *)(*(void *)(*((void *)this + 35)
                             + (((unint64_t)(v13 + *((void *)this + 38)) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v13 + *((void *)this + 38)) & 0x3FF)) != (v12 == 93))
  {
    uint64_t v18 = __cxa_allocate_exception(0x38uLL);
    sub_100003470(&v19, "illegal flow end");
    sub_100043924((uint64_t)v18, &v25, (uint64_t)&v19);
    void *v18 = off_10007D2D0;
  }
  int v14 = v12;
  *((void *)this + 39) = v13;
  sub_10005E270((void *)this + 34, 1);
  if (v14 == 93) {
    int v15 = 10;
  }
  else {
    int v15 = 11;
  }
  LODWORD(v19) = 0;
  DWORD1(v19) = v15;
  *((void *)&v19 + 1) = v25;
  int v20 = v26;
  *(_OWORD *)std::string __p = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  int v24 = 0;
  sub_1000587D4((void *)this + 12, &v19);
  uint64_t v27 = (void **)&v22 + 1;
  sub_100003B14(&v27);
  if (SBYTE7(v22) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005B2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void YAML::Scanner::ScanFlowEntry(YAML::Scanner *this)
{
  uint64_t v2 = *((void *)this + 39);
  if (!v2) {
    goto LABEL_9;
  }
  unint64_t v3 = v2 + *((void *)this + 38) - 1;
  uint64_t v4 = *((void *)this + 35);
  unint64_t v5 = v3 >> 10;
  uint64_t v6 = *(void *)(v4 + 8 * (v3 >> 10));
  unint64_t v7 = v3 & 0x3FF;
  if (!*(_DWORD *)(v6 + 4 * v7))
  {
    if (YAML::Scanner::VerifySimpleKey(this))
    {
      uint64_t v8 = *((void *)this + 1);
      int v9 = *((_DWORD *)this + 4);
      *(void *)&long long v13 = 0xF00000000;
      *((void *)&v13 + 1) = v8;
      int v14 = v9;
      *(_OWORD *)std::string __p = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      int v18 = 0;
      sub_1000587D4((void *)this + 12, &v13);
      long long v19 = (void **)&v16 + 1;
      sub_100003B14(&v19);
      if (SBYTE7(v16) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_9;
    }
    uint64_t v4 = *((void *)this + 35);
    unint64_t v10 = *((void *)this + 39) + *((void *)this + 38) - 1;
    unint64_t v5 = v10 >> 10;
    unint64_t v7 = v10 & 0x3FF;
  }
  if (*(_DWORD *)(*(void *)(v4 + 8 * v5) + 4 * v7) == 1) {
    YAML::Scanner::InvalidateSimpleKey(this);
  }
LABEL_9:
  *((_WORD *)this + 73) = 1;
  uint64_t v11 = *((void *)this + 1);
  int v12 = *((_DWORD *)this + 4);
  YAML::Stream::eat(this, 1);
  *(void *)&long long v13 = 0xD00000000;
  *((void *)&v13 + 1) = v11;
  int v14 = v12;
  *(_OWORD *)std::string __p = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  int v18 = 0;
  sub_1000587D4((void *)this + 12, &v13);
  long long v19 = (void **)&v16 + 1;
  sub_100003B14(&v19);
  if (SBYTE7(v16) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005B478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100056C8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanBlockEntry(YAML::Scanner *this)
{
  if (*((void *)this + 39))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    int v5 = *((_DWORD *)this + 4);
    long long v13 = (void **)*((void *)this + 1);
    int v14 = v5;
    sub_100003470(&v8, "illegal block entry");
    sub_100043924((uint64_t)exception, &v13, (uint64_t)&v8);
    void *exception = off_10007D2D0;
  }
  if (!*((unsigned char *)this + 146))
  {
    uint64_t v6 = __cxa_allocate_exception(0x38uLL);
    int v7 = *((_DWORD *)this + 4);
    long long v13 = (void **)*((void *)this + 1);
    int v14 = v7;
    sub_100003470(&v8, "illegal block entry");
    sub_100043924((uint64_t)v6, &v13, (uint64_t)&v8);
    void *v6 = off_10007D2D0;
  }
  YAML::Scanner::PushIndentTo((uint64_t)this);
  *((_WORD *)this + 73) = 1;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  YAML::Stream::eat(this, 1);
  *(void *)&long long v8 = 0x700000000;
  *((void *)&v8 + 1) = v2;
  int v9 = v3;
  *(_OWORD *)std::string __p = 0u;
  memset(v11, 0, sizeof(v11));
  int v12 = 0;
  sub_1000587D4((void *)this + 12, &v8);
  long long v13 = (void **)v11 + 1;
  sub_100003B14(&v13);
  if (SBYTE7(v11[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005B65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void YAML::Scanner::ScanKey(YAML::Scanner *this)
{
  uint64_t v2 = *((void *)this + 39);
  if (!v2)
  {
    if (!*((unsigned char *)this + 146))
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      uint64_t v6 = this;
      int v7 = exception;
      long long v8 = (void **)*((void *)v6 + 1);
      LODWORD(v6) = *((_DWORD *)v6 + 4);
      int v14 = v8;
      int v15 = (int)v6;
      sub_100003470(&v9, "illegal map key");
      sub_100043924((uint64_t)v7, &v14, (uint64_t)&v9);
      *int v7 = off_10007D2D0;
    }
    YAML::Scanner::PushIndentTo((uint64_t)this);
    uint64_t v2 = *((void *)this + 39);
  }
  *((unsigned char *)this + 146) = v2 == 0;
  uint64_t v3 = *((void *)this + 1);
  int v4 = *((_DWORD *)this + 4);
  YAML::Stream::eat(this, 1);
  *(void *)&long long v9 = 0xE00000000;
  *((void *)&v9 + 1) = v3;
  int v10 = v4;
  *(_OWORD *)std::string __p = 0u;
  memset(v12, 0, sizeof(v12));
  int v13 = 0;
  sub_1000587D4((void *)this + 12, &v9);
  int v14 = (void **)v12 + 1;
  sub_100003B14(&v14);
  if (SBYTE7(v12[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005B800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void YAML::Scanner::ScanValue(YAML::Scanner *this)
{
  int v2 = YAML::Scanner::VerifySimpleKey(this);
  *((unsigned char *)this + 147) = 0;
  if (v2)
  {
    *((unsigned char *)this + 146) = 0;
  }
  else
  {
    uint64_t v3 = *((void *)this + 39);
    if (!v3)
    {
      if (!*((unsigned char *)this + 146))
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
        int v7 = this;
        long long v8 = exception;
        long long v9 = (void **)*((void *)v7 + 1);
        LODWORD(v7) = *((_DWORD *)v7 + 4);
        int v15 = v9;
        int v16 = (int)v7;
        sub_100003470(&v10, "illegal map value");
        sub_100043924((uint64_t)v8, &v15, (uint64_t)&v10);
        void *v8 = off_10007D2D0;
      }
      YAML::Scanner::PushIndentTo((uint64_t)this);
      uint64_t v3 = *((void *)this + 39);
    }
    *((unsigned char *)this + 146) = v3 == 0;
  }
  uint64_t v4 = *((void *)this + 1);
  int v5 = *((_DWORD *)this + 4);
  YAML::Stream::eat(this, 1);
  *(void *)&long long v10 = 0xF00000000;
  *((void *)&v10 + 1) = v4;
  int v11 = v5;
  *(_OWORD *)std::string __p = 0u;
  memset(v13, 0, sizeof(v13));
  int v14 = 0;
  sub_1000587D4((void *)this + 12, &v10);
  int v15 = (void **)v13 + 1;
  sub_100003B14(&v15);
  if (SBYTE7(v13[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005B9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void YAML::Scanner::ScanAnchorOrAlias(YAML::Scanner *this)
{
  memset(&__str, 0, sizeof(__str));
  YAML::Scanner::InsertPotentialSimpleKey(this);
  *((_WORD *)this + 73) = 0;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  int v4 = YAML::Stream::get(this);
  while (YAML::Stream::operator BOOL(this))
  {
    int v5 = sub_10005BCCC();
    *(void *)&long long v16 = 0;
    *((void *)&v16 + 1) = this;
    if ((sub_10005769C((uint64_t)v5, (unint64_t *)&v16) & 0x80000000) != 0) {
      break;
    }
    std::string::value_type v6 = YAML::Stream::get(this);
    std::string::push_back(&__str, v6);
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    int v11 = *((_DWORD *)this + 4);
    uint64_t v21 = (void **)*((void *)this + 1);
    int v22 = v11;
    if (v4 == 42) {
      int v12 = "alias not found after *";
    }
    else {
      int v12 = "anchor not found after &";
    }
    sub_100003470(&v16, v12);
    sub_100043924((uint64_t)exception, &v21, (uint64_t)&v16);
    void *exception = off_10007D2D0;
  }
  if (YAML::Stream::operator BOOL(this))
  {
    long long v8 = sub_10005BE2C();
    *(void *)&long long v16 = 0;
    *((void *)&v16 + 1) = this;
    if ((sub_10005769C((uint64_t)v8, (unint64_t *)&v16) & 0x80000000) != 0)
    {
      int v13 = __cxa_allocate_exception(0x38uLL);
      int v14 = *((_DWORD *)this + 4);
      uint64_t v21 = (void **)*((void *)this + 1);
      int v22 = v14;
      if (v4 == 42) {
        int v15 = "illegal character found while scanning alias";
      }
      else {
        int v15 = "illegal character found while scanning anchor";
      }
      sub_100003470(&v16, v15);
      sub_100043924((uint64_t)v13, &v21, (uint64_t)&v16);
      void *v13 = off_10007D2D0;
    }
  }
  if (v4 == 42) {
    int v9 = 17;
  }
  else {
    int v9 = 16;
  }
  LODWORD(v16) = 0;
  DWORD1(v16) = v9;
  *((void *)&v16 + 1) = v2;
  int v17 = v3;
  *(_OWORD *)std::string __p = 0u;
  memset(v19, 0, sizeof(v19));
  int v20 = 0;
  std::string::operator=((std::string *)__p, &__str);
  sub_10005DD4C((void *)this + 12, &v16);
  uint64_t v21 = (void **)v19 + 1;
  sub_100003B14(&v21);
  if (SBYTE7(v19[0]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_10005BC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v17 - 33) < 0) {
        operator delete(*(void **)(v17 - 56));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void *sub_10005BCCC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080468, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080468))
  {
    sub_100003470(__p, "[]{},");
    YAML::RegEx::RegEx((uint64_t)&v4, (char *)__p, 3);
    uint64_t v1 = (int *)sub_10005749C();
    YAML::operator|(&v4, v1, (uint64_t)&v6);
    YAML::operator!(&v6, (uint64_t)&unk_100080448);
    long long v8 = (void **)&v7;
    sub_100054694(&v8);
    long long v8 = (void **)&v5;
    sub_100054694(&v8);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080448, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080468);
  }
  return &unk_100080448;
}

void sub_10005BDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16)
{
  *(void *)(v17 - 24) = v16 + 8;
  sub_100054694((void ***)(v17 - 24));
  *(void *)(v17 - 24) = &a16;
  sub_100054694((void ***)(v17 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_100080468);
  _Unwind_Resume(a1);
}

void *sub_10005BE2C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080490, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080490))
  {
    YAML::RegEx::RegEx((uint64_t)&v4, (char *)__p, 3);
    uint64_t v1 = (int *)sub_10005749C();
    YAML::operator|(&v4, v1, (uint64_t)&unk_100080470);
    int v6 = (void **)&v5;
    sub_100054694(&v6);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080470, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080490);
  }
  return &unk_100080470;
}

void sub_10005BF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_100080490);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanTag(YAML::Scanner *this)
{
  YAML::Scanner::InsertPotentialSimpleKey(this);
  *((_WORD *)this + 73) = 0;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  *(void *)&long long v14 = 0x1200000000;
  *((void *)&v14 + 1) = v2;
  int v15 = v3;
  *(_OWORD *)std::string __p = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  int v19 = 0;
  YAML::Stream::get(this);
  if (YAML::Stream::operator BOOL(this) && YAML::Stream::peek(this) == 60)
  {
    YAML::ScanVerbatimTag(this, &__str);
    std::string::operator=((std::string *)__p, &__str);
    int v19 = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    goto LABEL_31;
  }
  char v12 = 0;
  YAML::ScanTagHandle(this, (YAML::Stream *)&v12, &__str);
  std::string::operator=((std::string *)__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  unint64_t v4 = BYTE7(v17);
  if (v12)
  {
    uint64_t v5 = __p[1];
  }
  else
  {
    uint64_t v5 = __p[1];
    if ((SBYTE7(v17) & 0x80u) == 0) {
      int v6 = (void *)BYTE7(v17);
    }
    else {
      int v6 = __p[1];
    }
    if (!v6)
    {
      int v10 = 4;
LABEL_30:
      int v19 = v10;
      goto LABEL_31;
    }
  }
  if (SBYTE7(v17) < 0) {
    unint64_t v4 = (unint64_t)v5;
  }
  if (v4) {
    int v7 = 1;
  }
  else {
    int v7 = 2;
  }
  int v19 = v7;
  if (v12 && YAML::Stream::peek(this) == 33)
  {
    YAML::Stream::get(this);
    YAML::ScanTagSuffix(this, (uint64_t)&__str);
    long long v8 = (_OWORD *)v18;
    if ((unint64_t)v18 >= *((void *)&v18 + 1))
    {
      uint64_t v11 = sub_100003F94((uint64_t *)&v17 + 1, (long long *)&__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_100003600((unsigned char *)v18, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(void *)(v18 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
        _OWORD *v8 = v9;
      }
      uint64_t v11 = (uint64_t)v8 + 24;
    }
    *(void *)&long long v18 = v11;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    int v10 = 3;
    goto LABEL_30;
  }
LABEL_31:
  sub_10005DD4C((void *)this + 12, &v14);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17 + 8;
  sub_100003B14((void ***)&__str);
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005C14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100056C8C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanPlainScalar(YAML::Scanner *this)
{
  memset(&__str, 0, sizeof(__str));
  char v14 = 0;
  __int16 v13 = 0;
  char v19 = 0;
  if (*((void *)this + 39)) {
    uint64_t v2 = sub_10005C320();
  }
  else {
    uint64_t v2 = sub_10005C458();
  }
  int v3 = 0;
  int v10 = v2;
  char v11 = 0;
  if (!*((void *)this + 39)) {
    int v3 = YAML::Scanner::GetTopIndent(this) + 1;
  }
  int v12 = v3;
  int v15 = 2;
  HIBYTE(v13) = 1;
  char v16 = 1;
  uint64_t v17 = 0x1FFFFFFFFLL;
  int v18 = 2;
  YAML::Scanner::InsertPotentialSimpleKey(this);
  std::string::size_type v4 = *((void *)this + 1);
  int v5 = *((_DWORD *)this + 4);
  YAML::ScanScalar((std::string::size_type)this, (uint64_t)&v10, &v6);
  std::string __str = v6;
  *((unsigned char *)this + 146) = v19;
  *((unsigned char *)this + 147) = 0;
  v6.__r_.__value_.__r.__words[0] = 0x1300000000;
  v6.__r_.__value_.__l.__size_ = v4;
  LODWORD(v6.__r_.__value_.__r.__words[2]) = v5;
  *(_OWORD *)std::string __p = 0u;
  memset(v8, 0, sizeof(v8));
  int v9 = 0;
  std::string::operator=((std::string *)__p, &__str);
  sub_10005DD4C((void *)this + 12, (long long *)&v6);
  uint64_t v21 = (void **)v8 + 1;
  sub_100003B14(&v21);
  if (SBYTE7(v8[0]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_10005C2F0(_Unwind_Exception *exception_object)
{
}

void *sub_10005C320()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000804B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000804B8))
  {
    uint64_t v1 = (int *)sub_10005D0BC();
    uint64_t v2 = (int *)sub_10005749C();
    sub_10005ACD8((uint64_t)&v3);
    YAML::operator+(v2, &v3, (uint64_t)&v5);
    YAML::operator|(v1, &v5, (uint64_t)&unk_100080498);
    int v7 = (void **)&v6;
    sub_100054694(&v7);
    int v7 = (void **)&v4;
    sub_100054694(&v7);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080498, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000804B8);
  }
  return &unk_100080498;
}

void sub_10005C404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v12 - 24) = v11 + 8;
  sub_100054694((void ***)(v12 - 24));
  *(void *)(v12 - 24) = &a11;
  sub_100054694((void ***)(v12 - 24));
  __cxa_guard_abort(&qword_1000804B8);
  _Unwind_Resume(a1);
}

void *sub_10005C458()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080508, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080508))
  {
    uint64_t v1 = (int *)sub_10005D39C();
    uint64_t v2 = (int *)sub_10005749C();
    sub_10005ACD8((uint64_t)&v3);
    YAML::operator+(v2, &v3, (uint64_t)&v5);
    YAML::operator|(v1, &v5, (uint64_t)&unk_1000804E8);
    int v7 = (void **)&v6;
    sub_100054694(&v7);
    int v7 = (void **)&v4;
    sub_100054694(&v7);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_1000804E8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080508);
  }
  return &unk_1000804E8;
}

void sub_10005C53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v12 - 24) = v11 + 8;
  sub_100054694((void ***)(v12 - 24));
  *(void *)(v12 - 24) = &a11;
  sub_100054694((void ***)(v12 - 24));
  __cxa_guard_abort(&qword_100080508);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanQuotedScalar(std::string::size_type *this)
{
  memset(&__str, 0, sizeof(__str));
  int v2 = YAML::Stream::peek((YAML::Stream *)this);
  int v15 = 0;
  char v16 = 0;
  char v19 = 0;
  int v18 = 0;
  memset(v17, 0, 7);
  v20[0] = 0;
  *(void *)((char *)v20 + 5) = 0;
  if (v2 == 39)
  {
    YAML::RegEx::RegEx((uint64_t)&v7, 39);
    int v3 = (int *)sub_10005C7EC();
    YAML::operator!(v3, (uint64_t)&p_size);
    YAML::operator&((int *)&v7, (int *)&p_size, (uint64_t)v13);
    int v22 = (void **)&v12;
    sub_100054694(&v22);
    p_std::string::size_type size = &v7.__r_.__value_.__l.__size_;
    sub_100054694((void ***)&p_size);
    char v4 = 39;
  }
  else
  {
    YAML::RegEx::RegEx((uint64_t)v13, v2);
    char v4 = 92;
  }
  int v15 = v13;
  char v16 = 1;
  BYTE2(v17[1]) = v4;
  v17[0] = 0;
  int v18 = 2;
  BYTE1(v17[1]) = 1;
  char v19 = 0;
  v20[0] = 0x200000000;
  YAML::Scanner::InsertPotentialSimpleKey((YAML::Scanner *)this);
  std::string::size_type v5 = this[1];
  int v6 = *((_DWORD *)this + 4);
  YAML::Stream::get((YAML::Stream *)this);
  YAML::ScanScalar((std::string::size_type)this, (uint64_t)&v15, &v7);
  std::string __str = v7;
  *((_WORD *)this + 73) = 256;
  v7.__r_.__value_.__r.__words[0] = 0x1400000000;
  v7.__r_.__value_.__l.__size_ = v5;
  LODWORD(v7.__r_.__value_.__r.__words[2]) = v6;
  *(_OWORD *)std::string __p = 0u;
  memset(v9, 0, sizeof(v9));
  int v10 = 0;
  std::string::operator=((std::string *)__p, &__str);
  sub_10005DD4C(this + 12, (long long *)&v7);
  p_std::string::size_type size = (std::string::size_type *)v9 + 1;
  sub_100003B14((void ***)&p_size);
  if (SBYTE7(v9[0]) < 0) {
    operator delete(__p[0]);
  }
  v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  sub_100054694((void ***)&v7);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_10005C764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

void *sub_10005C7EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080558, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080558))
  {
    sub_100003470(__p, "''");
    YAML::RegEx::RegEx((uint64_t)&unk_100080538, (char *)__p, 6);
    if (v2 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080538, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080558);
  }
  return &unk_100080538;
}

void sub_10005C8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_100080558);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanBlockScalar(YAML::Scanner *this)
{
  memset(&__str, 0, sizeof(__str));
  uint64_t v24 = 0;
  char v25 = 0;
  char v30 = 0;
  char v28 = 0;
  uint64_t v32 = 0;
  char v33 = 0;
  int v26 = 1;
  __int16 v27 = 1;
  std::string::size_type v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  BOOL v29 = YAML::Stream::get(this) == 62;
  int v31 = 0;
  char v4 = sub_10005CEF0();
  __p.__r_.__value_.__r.__words[0] = 0;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
  int v5 = sub_10005769C((uint64_t)v4, (unint64_t *)&__p);
  if (v5 >= 1)
  {
    while (1)
    {
      int v6 = YAML::Stream::get(this);
      int v7 = v6;
      if (v6 == 45)
      {
        int v31 = -1;
      }
      else if (v6 == 43)
      {
        int v31 = 1;
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000803A0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1000803A0))
        {
          YAML::RegEx::RegEx((uint64_t)&unk_100080380, 48, 57);
          __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080380, (void *)&_mh_execute_header);
          __cxa_guard_release(&qword_1000803A0);
        }
        memset(&__p, 0, sizeof(__p));
        std::string::push_back(&__p, v7);
        int v8 = sub_10005D5E8((uint64_t)&unk_100080380, (char *)&__p);
        int v9 = v8;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v9 & 0x80000000) == 0)
          {
LABEL_11:
            if (v7 == 48)
            {
              exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
              int v17 = *((_DWORD *)this + 4);
              p_std::string::size_type size = (std::string::size_type *)*((void *)this + 1);
              LODWORD(v36) = v17;
              sub_100003470(&__p, "cannot set zero indentation for a block scalar");
              sub_100043924((uint64_t)exception, &p_size, (uint64_t)&__p);
              void *exception = off_10007D2D0;
            }
            int v26 = v7 - 48;
            LOBYTE(v27) = 0;
          }
        }
        else if ((v8 & 0x80000000) == 0)
        {
          goto LABEL_11;
        }
      }
      if (!--v5) {
        goto LABEL_20;
      }
    }
  }
  while (1)
  {
LABEL_20:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000800A8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1000800A8))
    {
      int v10 = (int *)sub_1000575FC();
      uint64_t v11 = (int *)sub_100056510();
      YAML::operator|(v10, v11, (uint64_t)&unk_100080088);
      __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080088, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1000800A8);
    }
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((sub_10005769C((uint64_t)&unk_100080088, (unint64_t *)&__p) & 0x80000000) != 0) {
      break;
    }
    YAML::Stream::eat(this, 1);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080210, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080210))
  {
    YAML::RegEx::RegEx((uint64_t)&dword_1000801F0, 35);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &dword_1000801F0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080210);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = dword_1000801F0;
  WORD2(__p.__r_.__value_.__r.__words[0]) = word_1000801F4;
  v21[0] = 0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  sub_100054A1C(&__p.__r_.__value_.__l.__size_, (int *)qword_1000801F8, unk_100080200, (unk_100080200 - qword_1000801F8) >> 5);
  p_std::string::size_type size = 0;
  BOOL v36 = this;
  int v12 = sub_10005769C((uint64_t)&__p, (unint64_t *)&p_size);
  p_std::string::size_type size = &__p.__r_.__value_.__l.__size_;
  sub_100054694((void ***)&p_size);
  if ((v12 & 0x80000000) == 0)
  {
    while (YAML::Stream::operator BOOL(this))
    {
      __int16 v13 = sub_1000565EC();
      __p.__r_.__value_.__r.__words[0] = 0;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
      if ((sub_10005769C((uint64_t)v13, (unint64_t *)&__p) & 0x80000000) == 0) {
        break;
      }
      YAML::Stream::eat(this, 1);
    }
  }
  if (YAML::Stream::operator BOOL(this))
  {
    uint64_t v14 = sub_1000565EC();
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((sub_10005769C((uint64_t)v14, (unint64_t *)&__p) & 0x80000000) != 0)
    {
      int v18 = __cxa_allocate_exception(0x38uLL);
      int v19 = *((_DWORD *)this + 4);
      p_std::string::size_type size = (std::string::size_type *)*((void *)this + 1);
      LODWORD(v36) = v19;
      sub_100003470(&__p, "unexpected character in block scalar");
      sub_100043924((uint64_t)v18, &p_size, (uint64_t)&__p);
      void *v18 = off_10007D2D0;
    }
  }
  if ((YAML::Scanner::GetTopIndent(this) & 0x80000000) == 0)
  {
    int TopIndent = YAML::Scanner::GetTopIndent(this);
    v26 += TopIndent;
  }
  HIBYTE(v27) = 0;
  char v30 = 0;
  HIDWORD(v32) = 2;
  YAML::ScanScalar((std::string::size_type)this, (uint64_t)&v24, &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = __p;
  *((_WORD *)this + 73) = 1;
  __p.__r_.__value_.__r.__words[0] = 0x1400000000;
  __p.__r_.__value_.__l.__size_ = v2;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = v3;
  *(_OWORD *)uint64_t v21 = 0u;
  memset(v22, 0, sizeof(v22));
  int v23 = 0;
  std::string::operator=((std::string *)v21, &__str);
  sub_10005DD4C((void *)this + 12, (long long *)&__p);
  p_std::string::size_type size = (std::string::size_type *)v22 + 1;
  sub_100003B14((void ***)&p_size);
  if (SBYTE7(v22[0]) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_10005CE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_10005CEF0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080580, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080580))
  {
    uint64_t v1 = (int *)sub_10005D504();
    std::string::size_type v2 = (int *)sub_10005A5B8();
    YAML::operator+(v1, v2, (uint64_t)&v9);
    int v3 = (int *)sub_10005A5B8();
    char v4 = (int *)sub_10005D504();
    YAML::operator+(v3, v4, (uint64_t)&v7);
    YAML::operator|(&v9, (int *)&v7, (uint64_t)&v11);
    int v5 = (int *)sub_10005D504();
    YAML::operator|(&v11, v5, (uint64_t)&v13);
    int v6 = (int *)sub_10005A5B8();
    YAML::operator|(&v13, v6, (uint64_t)&unk_100080560);
    int v15 = (void **)&v14;
    sub_100054694(&v15);
    int v15 = (void **)&v12;
    sub_100054694(&v15);
    int v15 = (void **)&v8;
    sub_100054694(&v15);
    int v7 = (void **)&v10;
    sub_100054694(&v7);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080560, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080580);
  }
  return &unk_100080560;
}

void sub_10005D034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(void *)(v15 - 24) = &a11;
  sub_100054694((void ***)(v15 - 24));
  a10 = (void **)&a15;
  sub_100054694(&a10);
  __cxa_guard_abort(&qword_100080580);
  _Unwind_Resume(a1);
}

void *sub_10005D0BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000804E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000804E0))
  {
    YAML::RegEx::RegEx((uint64_t)&v16, 58);
    uint64_t v1 = (int *)sub_10005749C();
    YAML::RegEx::RegEx((uint64_t)&v10);
    YAML::operator|(v1, &v10, (uint64_t)&v12);
    sub_100003470(v6, ",]}");
    YAML::RegEx::RegEx((uint64_t)&v8, (char *)v6, 3);
    YAML::operator|(&v12, (int *)&v8, (uint64_t)&v14);
    YAML::operator+(&v16, (int *)&v14, (uint64_t)&v18);
    sub_100003470(__p, ",?[]{}");
    YAML::RegEx::RegEx((uint64_t)&v4, (char *)__p, 3);
    YAML::operator|(&v18, (int *)&v4, (uint64_t)&unk_1000804C0);
    int v20 = (void **)&v5;
    sub_100054694(&v20);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    char v4 = (void **)&v19;
    sub_100054694(&v4);
    char v4 = (void **)&v15;
    sub_100054694(&v4);
    char v4 = (void **)&v9;
    sub_100054694(&v4);
    if (v7 < 0) {
      operator delete(v6[0]);
    }
    uint64_t v8 = (void **)&v13;
    sub_100054694(&v8);
    uint64_t v8 = (void **)&v11;
    sub_100054694(&v8);
    uint64_t v14 = (void **)&v17;
    sub_100054694(&v14);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_1000804C0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000804E0);
  }
  return &unk_1000804C0;
}

void sub_10005D290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t *a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35)
{
  *(void *)(v36 - 4sub_100053A94((YAML::Scanner **)this, 0) = v35 + 8;
  sub_100054694((void ***)(v36 - 40));
  if (a15 < 0) {
    operator delete(__p);
  }
  a16 = (uint64_t *)(v36 - 64);
  sub_100054694((void ***)&a16);
  a16 = (uint64_t *)(v36 - 128);
  sub_100054694((void ***)&a16);
  a16 = &a27;
  sub_100054694((void ***)&a16);
  if (a25 < 0) {
    operator delete(a20);
  }
  a26 = &a35;
  sub_100054694((void ***)&a26);
  a26 = &a31;
  sub_100054694((void ***)&a26);
  *(void *)(v36 - 136) = v36 - 96;
  sub_100054694((void ***)(v36 - 136));
  __cxa_guard_abort(&qword_1000804E0);
  _Unwind_Resume(a1);
}

void sub_10005D394()
{
}

void *sub_10005D39C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100080530, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100080530))
  {
    YAML::RegEx::RegEx((uint64_t)&v6, 58);
    uint64_t v1 = (int *)sub_10005749C();
    YAML::RegEx::RegEx((uint64_t)&v2);
    YAML::operator|(v1, &v2, (uint64_t)&v4);
    YAML::operator+(&v6, (int *)&v4, (uint64_t)&unk_100080510);
    uint64_t v8 = (void **)&v5;
    sub_100054694(&v8);
    uint64_t v8 = (void **)&v3;
    sub_100054694(&v8);
    char v4 = (void **)&v7;
    sub_100054694(&v4);
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080510, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100080530);
  }
  return &unk_100080510;
}

void sub_10005D498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  *(void *)(v15 - 24) = v14 + 8;
  sub_100054694((void ***)(v15 - 24));
  *(void *)(v15 - 24) = &a11;
  sub_100054694((void ***)(v15 - 24));
  a14 = (void **)(v15 - 48);
  sub_100054694(&a14);
  __cxa_guard_abort(&qword_100080530);
  _Unwind_Resume(a1);
}

void *sub_10005D504()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1000805A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1000805A8))
  {
    sub_100003470(__p, "+-");
    YAML::RegEx::RegEx((uint64_t)&unk_100080588, (char *)__p, 3);
    if (v2 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_1000565B0, &unk_100080588, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1000805A8);
  }
  return &unk_100080588;
}

void sub_10005D5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_1000805A8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005D5E8(uint64_t a1, char *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = *(char **)a2;
  }
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  *(void *)&long long v18 = v3;
  *((void *)&v18 + 1) = v2;
  uint64_t v19 = 0;
  if ((*(_DWORD *)a1 - 3) < 0xFFFFFFFE || v2 != 0)
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
        if (v2) {
          return 0xFFFFFFFFLL;
        }
        else {
          return 0;
        }
      case 1:
        if (*v3 == *(unsigned char *)(a1 + 4)) {
          return 1;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      case 2:
        int v11 = *v3;
        uint64_t v6 = 0xFFFFFFFFLL;
        if (*(char *)(a1 + 4) <= v11)
        {
          if (*(char *)(a1 + 5) < v11) {
            return 0xFFFFFFFFLL;
          }
          else {
            return 1;
          }
        }
        return v6;
      case 3:
        uint64_t v12 = *(void *)(a1 + 8);
        if (*(void *)(a1 + 16) == v12) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        while (1)
        {
          uint64_t v15 = sub_10005D874(v12 + v13, &v18);
          if ((v15 & 0x80000000) == 0) {
            break;
          }
          ++v14;
          uint64_t v12 = *(void *)(a1 + 8);
          v13 += 32;
          uint64_t v6 = 0xFFFFFFFFLL;
          if (v14 >= (*(void *)(a1 + 16) - v12) >> 5) {
            return v6;
          }
        }
        return v15;
      case 4:
        uint64_t v7 = *(void *)(a1 + 8);
        if (*(void *)(a1 + 16) == v7) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        LODWORD(v6) = -1;
        break;
      case 5:
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v6 = 0xFFFFFFFFLL;
        if (v17 != *(void *)(a1 + 16))
        {
          if ((int)sub_10005D874(v17, &v18) >= 0) {
            return 0xFFFFFFFFLL;
          }
          else {
            return 1;
          }
        }
        return v6;
      case 6:
        return sub_10005DBC4(a1, &v18);
      default:
        return 0xFFFFFFFFLL;
    }
    while (1)
    {
      unsigned int v10 = sub_10005D874(v7 + v8, &v18);
      if (v10 == -1) {
        break;
      }
      if (v9) {
        uint64_t v6 = v6;
      }
      else {
        uint64_t v6 = v10;
      }
      ++v9;
      uint64_t v7 = *(void *)(a1 + 8);
      v8 += 32;
      if (v9 >= (*(void *)(a1 + 16) - v7) >> 5) {
        return v6;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_10005D7AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  unint64_t v2 = *(void *)(a2 + 16);
  if ((*(_DWORD *)a1 - 3) >= 0xFFFFFFFE && v2 >= v3)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
        if (v2 >= v3) {
          return 0;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      case 1:
        if (*(unsigned __int8 *)(*(void *)a2 + v2) == *(unsigned __int8 *)(a1 + 4)) {
          return 1;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      case 2:
        int v7 = *(char *)(*(void *)a2 + v2);
        uint64_t v5 = 0xFFFFFFFFLL;
        if (*(char *)(a1 + 4) <= v7)
        {
          if (*(char *)(a1 + 5) < v7) {
            return 0xFFFFFFFFLL;
          }
          else {
            return 1;
          }
        }
        return v5;
      case 3:
        uint64_t result = sub_10005DA88(a1, a2);
        break;
      case 4:
        uint64_t result = sub_10005DAF4(a1, a2);
        break;
      case 5:
        uint64_t result = sub_10005DB80(a1, a2);
        break;
      case 6:
        uint64_t result = sub_10005DBC4(a1, (long long *)a2);
        break;
      default:
        return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_10005D874(uint64_t a1, void *a2)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      if (a2[2] >= a2[1]) {
        uint64_t v4 = 0;
      }
      else {
        uint64_t v4 = 0xFFFFFFFFLL;
      }
      break;
    case 1:
      if (*(unsigned __int8 *)(*a2 + a2[2]) == *(unsigned __int8 *)(a1 + 4)) {
        uint64_t v4 = 1;
      }
      else {
        uint64_t v4 = 0xFFFFFFFFLL;
      }
      break;
    case 2:
      int v5 = *(char *)(*a2 + a2[2]);
      uint64_t v4 = 0xFFFFFFFFLL;
      if (*(char *)(a1 + 4) <= v5)
      {
        if (*(char *)(a1 + 5) < v5) {
          uint64_t v4 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v4 = 1;
        }
      }
      break;
    case 3:
      uint64_t v6 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v6) {
        goto LABEL_37;
      }
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = sub_10005D874(v6 + v7, a2);
        if ((v9 & 0x80000000) == 0) {
          break;
        }
        ++v8;
        uint64_t v6 = *(void *)(a1 + 8);
        v7 += 32;
        if (v8 >= (*(void *)(a1 + 16) - v6) >> 5) {
          goto LABEL_37;
        }
      }
      uint64_t v4 = v9;
      break;
    case 4:
      uint64_t v10 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v10) {
        goto LABEL_37;
      }
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      LODWORD(v4) = -1;
      do
      {
        unsigned int v13 = sub_10005D874(v10 + v11, a2);
        if (v13 == -1) {
          goto LABEL_37;
        }
        if (v12) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v13;
        }
        ++v12;
        uint64_t v10 = *(void *)(a1 + 8);
        v11 += 32;
      }
      while (v12 < (*(void *)(a1 + 16) - v10) >> 5);
      break;
    case 5:
      uint64_t v14 = *(void *)(a1 + 8);
      uint64_t v4 = 0xFFFFFFFFLL;
      if (v14 != *(void *)(a1 + 16))
      {
        if ((int)sub_10005D874(v14, a2) >= 0) {
          uint64_t v4 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v4 = 1;
        }
      }
      break;
    case 6:
      uint64_t v15 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v15)
      {
        uint64_t v4 = 0;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        LODWORD(v4) = 0;
        do
        {
          uint64_t v18 = v15 + v16;
          long long v24 = *(_OWORD *)a2;
          uint64_t v19 = a2[2];
          char v20 = ((int)v4 + (int)v19 < 0) ^ __OFADD__(v4, v19);
          uint64_t v21 = v19 + (int)v4;
          if (v20) {
            uint64_t v21 = 0;
          }
          uint64_t v25 = v21;
          int v22 = sub_10005D7AC(v18, (uint64_t)&v24);
          if (v22 == -1) {
            goto LABEL_37;
          }
          uint64_t v4 = (v22 + v4);
          ++v17;
          uint64_t v15 = *(void *)(a1 + 8);
          v16 += 32;
        }
        while (v17 < (*(void *)(a1 + 16) - v15) >> 5);
      }
      break;
    default:
LABEL_37:
      uint64_t v4 = 0xFFFFFFFFLL;
      break;
  }
  return v4;
}

uint64_t sub_10005DA88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) == v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t result = sub_10005D874(v2 + v5, a2);
    if ((result & 0x80000000) == 0) {
      break;
    }
    ++v6;
    uint64_t v2 = *(void *)(a1 + 8);
    v5 += 32;
    if (v6 >= (*(void *)(a1 + 16) - v2) >> 5) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_10005DAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) != v2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    LODWORD(v7) = -1;
    while (1)
    {
      unsigned int v8 = sub_10005D874(v2 + v5, a2);
      if (v8 == -1) {
        break;
      }
      if (v6) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = v8;
      }
      ++v6;
      uint64_t v2 = *(void *)(a1 + 8);
      v5 += 32;
      if (v6 >= (*(void *)(a1 + 16) - v2) >> 5) {
        return v7;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_10005DB80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = 0xFFFFFFFFLL;
  if (v3 != *(void *)(a1 + 16))
  {
    if ((int)sub_10005D874(v3, a2) >= 0) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  return v4;
}

uint64_t sub_10005DBC4(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    LODWORD(v8) = 0;
    while (2)
    {
      uint64_t v9 = (_DWORD *)(v3 + v6);
      unint64_t v15 = *((void *)a2 + 2);
      long long v14 = *a2;
      unint64_t v10 = v15 + (int)v8;
      if ((int)v8 + (int)v15 < 0 != __OFADD__(v8, v15)) {
        unint64_t v10 = 0;
      }
      unint64_t v15 = v10;
      switch(*v9)
      {
        case 0:
          if (v10 >= *((void *)&v14 + 1)) {
            int v11 = 0;
          }
          else {
            int v11 = -1;
          }
          goto LABEL_19;
        case 1:
          if (*(unsigned __int8 *)(v14 + v10) != *(unsigned __int8 *)(v3 + v6 + 4)) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_14;
        case 2:
          int v12 = *(char *)(v14 + v10);
          if (*(char *)(v3 + v6 + 4) > v12 || *(char *)(v3 + v6 + 5) < v12) {
            return 0xFFFFFFFFLL;
          }
LABEL_14:
          int v11 = 1;
          goto LABEL_21;
        case 3:
          int v11 = sub_10005DA88((uint64_t)v9, (uint64_t)&v14);
          goto LABEL_19;
        case 4:
          int v11 = sub_10005DAF4((uint64_t)v9, (uint64_t)&v14);
          goto LABEL_19;
        case 5:
          int v11 = sub_10005DB80((uint64_t)v9, (uint64_t)&v14);
          goto LABEL_19;
        case 6:
          int v11 = sub_10005DBC4();
LABEL_19:
          if (v11 == -1) {
            return 0xFFFFFFFFLL;
          }
          uint64_t v3 = *(void *)(a1 + 8);
          uint64_t v2 = *(void *)(a1 + 16);
LABEL_21:
          uint64_t v8 = (v11 + v8);
          ++v7;
          v6 += 32;
          if (v7 >= (v2 - v3) >> 5) {
            return v8;
          }
          continue;
        default:
          return 0xFFFFFFFFLL;
      }
    }
  }
  return 0;
}

char *sub_10005DD4C(void *a1, long long *a2)
{
  uint64_t v4 = a1 + 5;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = 51 * ((v6 - v5) >> 3) - 1;
  if (v6 == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == a1[5] + a1[4])
  {
    sub_1000588CC(a1);
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
  }
  if (v6 == v5)
  {
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = a1[5] + a1[4];
    uint64_t v9 = *(void *)(v5 + 8 * (v8 / 0x33)) + 80 * (v8 % 0x33);
  }
  uint64_t result = sub_10005DE18((uint64_t)v4, v9, a2);
  ++*v4;
  return result;
}

char *sub_10005DE18(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v5;
  uint64_t v6 = (unsigned char *)(a2 + 24);
  if (*((char *)a3 + 47) < 0)
  {
    sub_100003600(v6, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    *(void *)(a2 + 4sub_100053A94((YAML::Scanner **)this, 0) = *((void *)a3 + 5);
    *(_OWORD *)uint64_t v6 = v7;
  }
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t result = sub_100003898((char *)(a2 + 48), *((long long **)a3 + 6), *((long long **)a3 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 7) - *((void *)a3 + 6)) >> 3));
  *(_DWORD *)(a2 + 72) = *((_DWORD *)a3 + 18);
  return result;
}

void sub_10005DEB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005DED0(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_10005DF58(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_10005DF58(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_100052514(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100058368(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100058480((uint64_t)a1, &v54);
    std::string::size_type v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_100052514((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100052514((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_1000585A0(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1000586B8((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10005E224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005E270(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 7) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400) {
    a2 = 1;
  }
  if (v5 < 0x800) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

BOOL YAML::Scanner::CanInsertPotentialSimpleKey(YAML::Scanner *this)
{
  if (!*((unsigned char *)this + 146)) {
    return 0;
  }
  uint64_t v1 = *((void *)this + 24);
  return !v1
      || *(void *)(*(void *)(*((void *)this + 20) + 8 * ((v1 + *((void *)this + 23) - 1) / 0x55uLL))
                   + 48 * ((v1 + *((void *)this + 23) - 1) % 0x55uLL)
                   + 16) != *((void *)this + 39);
}

double YAML::Scanner::InsertPotentialSimpleKey(YAML::Scanner *this)
{
  if (YAML::Scanner::CanInsertPotentialSimpleKey(this))
  {
    int v3 = *((_DWORD *)this + 4);
    uint64_t v4 = *((void *)this + 39);
    uint64_t v14 = *((void *)this + 1);
    int v15 = v3;
    uint64_t v16 = v4;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    if (!v4)
    {
      uint64_t v5 = YAML::Scanner::PushIndentTo((uint64_t)this);
      uint64_t v17 = v5;
      if (v5)
      {
        *(_DWORD *)(v5 + 8) = 2;
        uint64_t v18 = *(_DWORD **)(v5 + 16);
        _DWORD *v18 = 2;
      }
    }
    uint64_t v6 = *((void *)this + 1);
    int v7 = *((_DWORD *)this + 4);
    *(void *)&long long v9 = 0xE00000000;
    *((void *)&v9 + 1) = v6;
    int v10 = v7;
    *(_OWORD *)std::string __p = 0u;
    memset(v12, 0, sizeof(v12));
    int v13 = 0;
    sub_1000587D4((void *)this + 12, &v9);
    int64_t v20 = (void **)v12 + 1;
    sub_100003B14(&v20);
    if (SBYTE7(v12[0]) < 0) {
      operator delete(__p[0]);
    }
    unint64_t v8 = *((void *)this + 17) + *((void *)this + 16) - 1;
    uint64_t v19 = (_DWORD *)(*(void *)(*((void *)this + 13) + 8 * (v8 / 0x33)) + 80 * (v8 % 0x33));
    *uint64_t v19 = 2;
    *(void *)&double result = sub_10005E680((void *)this + 19, (uint64_t)&v14).n128_u64[0];
  }
  return result;
}

void sub_10005E474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100056C8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *YAML::Scanner::InvalidateSimpleKey(void *this)
{
  uint64_t v1 = this[24];
  if (v1)
  {
    uint64_t v2 = v1 - 1;
    unint64_t v3 = this[23] + v1 - 1;
    uint64_t v4 = *(void *)(this[20] + 8 * (v3 / 0x55));
    unint64_t v5 = v3 % 0x55;
    if (*(void *)(v4 + 48 * (v3 % 0x55) + 16) == this[39])
    {
      uint64_t v6 = *(void *)(v4 + 48 * v5 + 24);
      if (v6) {
        *(_DWORD *)(v6 + 8) = 1;
      }
      int v7 = *(_DWORD **)(v4 + 48 * v5 + 32);
      if (v7) {
        *int v7 = 1;
      }
      unint64_t v8 = *(_DWORD **)(v4 + 48 * v5 + 40);
      if (v8) {
        _DWORD *v8 = 1;
      }
      this[24] = v2;
      return (void *)sub_10005EA48(this + 19, 1);
    }
  }
  return this;
}

uint64_t YAML::Scanner::VerifySimpleKey(YAML::Scanner *this)
{
  uint64_t v1 = *((void *)this + 24);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = v1 - 1;
  unint64_t v4 = *(void *)(*((void *)this + 20) + 8 * ((*((void *)this + 23) + v3) / 0x55uLL))
     + 48 * ((*((void *)this + 23) + v3) % 0x55uLL);
  if (*(void *)(v4 + 16) != *((void *)this + 39)) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 24);
  unint64_t v5 = *(_DWORD **)(v4 + 32);
  int v7 = *(int **)(v4 + 40);
  int v8 = *(_DWORD *)v4;
  int v9 = *(_DWORD *)(v4 + 4);
  *((void *)this + 24) = v3;
  sub_10005EA48((void *)this + 19, 1);
  if (*((_DWORD *)this + 3) == v9 && *((_DWORD *)this + 2) - v8 <= 1024)
  {
    if (v6) {
      *(_DWORD *)(v6 + 8) = 0;
    }
    if (v5) {
      *unint64_t v5 = 0;
    }
    uint64_t result = 1;
    if (v7)
    {
      int v11 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    if (v6) {
      *(_DWORD *)(v6 + 8) = 1;
    }
    if (v5) {
      *unint64_t v5 = 1;
    }
    uint64_t result = 0;
    if (v7)
    {
      int v11 = 1;
LABEL_18:
      *int v7 = v11;
    }
  }
  return result;
}

uint64_t YAML::Scanner::PopAllSimpleKeys(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 192);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = (void *)(this + 152);
    do
    {
      *(void *)(v2 + 192) = v1 - 1;
      this = sub_10005EA48(v3, 1);
      uint64_t v1 = *(void *)(v2 + 192);
    }
    while (v1);
  }
  return this;
}

__n128 sub_10005E680(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 85 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10005E730(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 32) = v10;
  *(__n128 *)unint64_t v8 = result;
  ++a1[5];
  return result;
}

void sub_10005E730(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x55;
  unint64_t v4 = v2 - 85;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_100052514(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      int v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_100058368(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_100058480((uint64_t)a1, &v54);
    std::string::size_type v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_100052514((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100052514((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  sub_1000585A0(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1000586B8((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10005E9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005EA48(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 85 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x55) {
    a2 = 1;
  }
  if (v5 < 0xAA) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void YAML::SingleDocParser::SingleDocParser(YAML::SingleDocParser *this, YAML::Scanner *a2, const YAML::Directives *a3)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  operator new();
}

void YAML::SingleDocParser::~SingleDocParser(char **this)
{
}

unint64_t YAML::SingleDocParser::HandleDocument(uint64_t a1, uint64_t a2)
{
  if (YAML::Scanner::empty(*(YAML::Scanner **)a1)) {
    sub_100060D6C();
  }
  if (*(void *)(a1 + 48)) {
    sub_100060D98();
  }
  unint64_t v4 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  (*(void (**)(uint64_t, unint64_t))(*(void *)a2 + 16))(a2, v4 + 8);
  if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 1) {
    YAML::Scanner::pop(*(int64x2_t **)a1);
  }
  YAML::SingleDocParser::HandleNode(a1, a2);
  (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  unint64_t result = YAML::Scanner::empty(*(YAML::Scanner **)a1);
  if ((result & 1) == 0)
  {
    do
    {
      unint64_t result = YAML::Scanner::peek(*(YAML::Scanner **)a1);
      if (*(_DWORD *)(result + 4) != 2) {
        break;
      }
      YAML::Scanner::pop(*(int64x2_t **)a1);
      unint64_t result = YAML::Scanner::empty(*(YAML::Scanner **)a1);
    }
    while (!result);
  }
  return result;
}

void YAML::SingleDocParser::HandleNode(uint64_t a1, uint64_t a2)
{
  if (YAML::Scanner::empty(*(YAML::Scanner **)a1))
  {
    __p.__r_.__value_.__r.__words[0] = YAML::Scanner::mark(*(YAML::Scanner **)a1);
    LODWORD(__p.__r_.__value_.__r.__words[1]) = v4;
    (*(void (**)(uint64_t, std::string *, void))(*(void *)a2 + 32))(a2, &__p, 0);
    return;
  }
  unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  uint64_t v26 = *(void *)(v5 + 8);
  int v27 = *(_DWORD *)(v5 + 16);
  if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 15)
  {
    sub_100003470(&__p, "?");
    (*(void (**)(uint64_t, uint64_t *, std::string *, void, void))(*(void *)a2 + 72))(a2, &v26, &__p, 0, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    YAML::SingleDocParser::HandleMap((YAML::Scanner **)a1, a2);
    (*(void (**)(uint64_t))(*(void *)a2 + 80))(a2);
    return;
  }
  if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 17)
  {
    unint64_t v6 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    uint64_t v7 = YAML::SingleDocParser::LookupAnchor(a1, &v26, (const void **)(v6 + 24));
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 40))(a2, &v26, v7);
    YAML::Scanner::pop(*(int64x2_t **)a1);
    return;
  }
  memset(&__p, 0, sizeof(__p));
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v21 = 0;
  YAML::SingleDocParser::ParseProperties((YAML::Scanner **)a1, (uint64_t)&__p, &v21, (uint64_t)&v22);
  uint64_t v8 = HIBYTE(v24);
  if (v24 < 0) {
    uint64_t v8 = v23;
  }
  if (v8) {
    (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)a2 + 88))(a2, &v26, &v22);
  }
  unint64_t v9 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  unint64_t v10 = v9;
  int v11 = *(_DWORD *)(v9 + 4);
  if (v11 != 19) {
    goto LABEL_17;
  }
  if (!YAML::IsNullString((unsigned __int8 **)(v9 + 24)))
  {
    int v11 = *(_DWORD *)(v10 + 4);
LABEL_17:
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      if (v11 == 20) {
        uint64_t v13 = "!";
      }
      else {
        uint64_t v13 = "?";
      }
      std::string::assign(&__p, v13);
      int v11 = *(_DWORD *)(v10 + 4);
    }
    switch(v11)
    {
      case 3:
        (*(void (**)(uint64_t, uint64_t *, std::string *, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, &v26, &__p, v21, 1);
        YAML::SingleDocParser::HandleSequence((YAML::Scanner **)a1, a2);
        goto LABEL_31;
      case 4:
        (*(void (**)(uint64_t, uint64_t *, std::string *, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, &v26, &__p, v21, 1);
        YAML::SingleDocParser::HandleMap((YAML::Scanner **)a1, a2);
        goto LABEL_35;
      case 5:
      case 6:
      case 7:
      case 10:
      case 11:
      case 12:
      case 13:
        goto LABEL_42;
      case 8:
        (*(void (**)(uint64_t, uint64_t *, std::string *, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, &v26, &__p, v21, 2);
        YAML::SingleDocParser::HandleSequence((YAML::Scanner **)a1, a2);
LABEL_31:
        BOOL v14 = (void (**)(uint64_t))(*(void *)a2 + 64);
        goto LABEL_36;
      case 9:
        goto LABEL_34;
      case 14:
        uint64_t v15 = *(void **)(a1 + 16);
        uint64_t v16 = v15[5];
        if (!v16
          || *(_DWORD *)(*(void *)(v15[1] + (((unint64_t)(v16 + v15[4] - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * ((v16 + v15[4] - 1) & 0x3FF)) != 4)
        {
          goto LABEL_42;
        }
LABEL_34:
        (*(void (**)(uint64_t, uint64_t *, std::string *, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, &v26, &__p, v21, 2);
        YAML::SingleDocParser::HandleMap((YAML::Scanner **)a1, a2);
LABEL_35:
        BOOL v14 = (void (**)(uint64_t))(*(void *)a2 + 80);
LABEL_36:
        (*v14)(a2);
        goto LABEL_37;
      default:
        if ((v11 - 19) < 2)
        {
          (*(void (**)(uint64_t, uint64_t *, std::string *, uint64_t, unint64_t))(*(void *)a2 + 48))(a2, &v26, &__p, v21, v10 + 24);
          goto LABEL_28;
        }
LABEL_42:
        BOOL v17 = sub_10001905C(&__p, "?");
        uint64_t v18 = v21;
        if (v17)
        {
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 32))(a2, &v26, v21);
        }
        else
        {
          sub_100003470(v19, (char *)&unk_10006DFE2);
          (*(void (**)(uint64_t, uint64_t *, std::string *, uint64_t, void **))(*(void *)a2 + 48))(a2, &v26, &__p, v18, v19);
          if (v20 < 0) {
            operator delete(v19[0]);
          }
        }
        break;
    }
    goto LABEL_37;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 32))(a2, &v26, v21);
LABEL_28:
  YAML::Scanner::pop(*(int64x2_t **)a1);
LABEL_37:
  if (SHIBYTE(v24) < 0) {
    operator delete(v22);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_10005F24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

unint64_t YAML::SingleDocParser::HandleMap(YAML::Scanner **a1, uint64_t a2)
{
  unint64_t result = YAML::Scanner::peek(*a1);
  int v5 = *(_DWORD *)(result + 4);
  if (v5 > 13)
  {
    if (v5 == 14)
    {
      return YAML::SingleDocParser::HandleCompactMap((uint64_t)a1, a2);
    }
    else if (v5 == 15)
    {
      return YAML::SingleDocParser::HandleCompactMapWithNoKey((uint64_t)a1, a2);
    }
  }
  else if (v5 == 4)
  {
    return YAML::SingleDocParser::HandleBlockMap((uint64_t)a1, a2);
  }
  else if (v5 == 9)
  {
    return YAML::SingleDocParser::HandleFlowMap((uint64_t)a1, a2);
  }
  return result;
}

uint64_t YAML::SingleDocParser::LookupAnchor(uint64_t a1, _DWORD *a2, const void **a3)
{
  uint64_t v5 = sub_10000A230(a1 + 24, a3);
  if (a1 + 32 == v5)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    sub_100003470(v8, "the referenced anchor is not defined");
    sub_100043924((uint64_t)exception, a2, (uint64_t)v8);
    void *exception = off_10007D2D0;
  }
  return *(void *)(v5 + 56);
}

void sub_10005F47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unint64_t YAML::SingleDocParser::ParseProperties(YAML::Scanner **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  if (*(char *)(a4 + 23) < 0)
  {
    **(unsigned char **)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 23) = 0;
  }
  *a3 = 0;
  unint64_t result = YAML::Scanner::empty(*a1);
  if ((result & 1) == 0)
  {
    do
    {
      unint64_t result = YAML::Scanner::peek(*a1);
      int v9 = *(_DWORD *)(result + 4);
      if (v9 == 16)
      {
        YAML::SingleDocParser::ParseAnchor(a1, a3, (std::string *)a4);
      }
      else
      {
        if (v9 != 18) {
          return result;
        }
        YAML::SingleDocParser::ParseTag(a1, a2);
      }
      unint64_t result = YAML::Scanner::empty(*a1);
    }
    while (!result);
  }
  return result;
}

unint64_t YAML::SingleDocParser::HandleSequence(YAML::Scanner **a1, uint64_t a2)
{
  unint64_t result = YAML::Scanner::peek(*a1);
  int v5 = *(_DWORD *)(result + 4);
  if (v5 == 8)
  {
    return YAML::SingleDocParser::HandleFlowSequence((uint64_t)a1, a2);
  }
  else if (v5 == 3)
  {
    return YAML::SingleDocParser::HandleBlockSequence((uint64_t)a1, a2);
  }
  return result;
}

uint64_t YAML::SingleDocParser::HandleBlockSequence(uint64_t a1, uint64_t a2)
{
  YAML::Scanner::pop(*(int64x2_t **)a1);
  int v4 = *(void **)(a1 + 16);
  LODWORD(v17) = 2;
  sub_10006083C(v4, &v17);
  do
  {
    if (YAML::Scanner::empty(*(YAML::Scanner **)a1))
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      uint64_t v15 = (void **)YAML::Scanner::mark(*(YAML::Scanner **)a1);
      int v16 = v14;
      sub_100003470(&v17, "end of sequence not found");
      sub_100043924((uint64_t)exception, &v15, (uint64_t)&v17);
      void *exception = off_10007D2D0;
    }
    unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    unint64_t v6 = v5;
    int v7 = *(_DWORD *)(v5 + 16);
    long long v17 = *(_OWORD *)v5;
    int v18 = v7;
    if (*(char *)(v5 + 47) < 0)
    {
      sub_100003600(&__p, *(void **)(v5 + 24), *(void *)(v5 + 32));
    }
    else
    {
      long long v8 = *(_OWORD *)(v5 + 24);
      uint64_t v20 = *(void *)(v5 + 40);
      long long __p = v8;
    }
    memset(v21, 0, sizeof(v21));
    sub_100003898(v21, *(long long **)(v6 + 48), *(long long **)(v6 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 56) - *(void *)(v6 + 48)) >> 3));
    int v22 = *(_DWORD *)(v6 + 72);
    if ((DWORD1(v17) & 0xFFFFFFFD) != 5)
    {
      uint64_t v12 = __cxa_allocate_exception(0x38uLL);
      sub_100003470(&v15, "end of sequence not found");
      sub_100043924((uint64_t)v12, (_DWORD *)&v17 + 2, (uint64_t)&v15);
      *uint64_t v12 = off_10007D2D0;
    }
    YAML::Scanner::pop(*(int64x2_t **)a1);
    int v9 = DWORD1(v17);
    if (DWORD1(v17) != 5)
    {
      if (YAML::Scanner::empty(*(YAML::Scanner **)a1)
        || (unint64_t v10 = YAML::Scanner::peek(*(YAML::Scanner **)a1), (*(_DWORD *)(v10 + 4) | 2) != 7))
      {
        YAML::SingleDocParser::HandleNode(a1, a2);
      }
      else
      {
        (*(void (**)(uint64_t, unint64_t, void))(*(void *)a2 + 32))(a2, v10 + 8, 0);
      }
    }
    uint64_t v15 = (void **)v21;
    sub_100003B14(&v15);
    if (SHIBYTE(v20) < 0) {
      operator delete((void *)__p);
    }
  }
  while (v9 != 5);
  return sub_10005FBD4(*(void **)(a1 + 16), 2);
}

void sub_10005F8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

uint64_t YAML::SingleDocParser::HandleFlowSequence(uint64_t a1, uint64_t a2)
{
  YAML::Scanner::pop(*(int64x2_t **)a1);
  int v4 = *(void **)(a1 + 16);
  LODWORD(v18[0]) = 4;
  sub_10006083C(v4, v18);
  while (1)
  {
    if (YAML::Scanner::empty(*(YAML::Scanner **)a1))
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      int v9 = (YAML::Scanner **)a1;
      unint64_t v10 = exception;
      uint64_t v19 = YAML::Scanner::mark(*v9);
      int v20 = v11;
      sub_100003470(v18, "end of sequence flow not found");
      sub_100043924((uint64_t)v10, &v19, (uint64_t)v18);
      void *v10 = off_10007D2D0;
    }
    if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 10) {
      break;
    }
    YAML::SingleDocParser::HandleNode(a1, a2);
    if (YAML::Scanner::empty(*(YAML::Scanner **)a1))
    {
      uint64_t v12 = __cxa_allocate_exception(0x38uLL);
      uint64_t v13 = (YAML::Scanner **)a1;
      int v14 = v12;
      uint64_t v19 = YAML::Scanner::mark(*v13);
      int v20 = v15;
      sub_100003470(v18, "end of sequence flow not found");
      sub_100043924((uint64_t)v14, &v19, (uint64_t)v18);
      *int v14 = off_10007D2D0;
    }
    unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    int v6 = *(_DWORD *)(v5 + 4);
    if (v6 != 10)
    {
      if (v6 != 13)
      {
        unint64_t v16 = v5;
        long long v17 = __cxa_allocate_exception(0x38uLL);
        sub_100003470(v18, "end of sequence flow not found");
        sub_100043924((uint64_t)v17, (_DWORD *)(v16 + 8), (uint64_t)v18);
        *long long v17 = off_10007D2D0;
      }
      YAML::Scanner::pop(*(int64x2_t **)a1);
    }
  }
  YAML::Scanner::pop(*(int64x2_t **)a1);
  return sub_10005FBD4(*(void **)(a1 + 16), 4);
}

void sub_10005FB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005FBD4(void *a1, int a2)
{
  uint64_t v2 = a1[5];
  if (v2) {
    int v3 = *(_DWORD *)(*(void *)(a1[1] + (((unint64_t)(v2 + a1[4] - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
  }
                   + 4 * ((v2 + a1[4] - 1) & 0x3FF));
  else {
    int v3 = 0;
  }
  if (v3 != a2) {
    sub_100060DC4();
  }
  a1[5] = v2 - 1;
  return sub_10005E270(a1, 1);
}

uint64_t YAML::SingleDocParser::HandleBlockMap(uint64_t a1, uint64_t a2)
{
  YAML::Scanner::pop(*(int64x2_t **)a1);
  int v4 = *(void **)(a1 + 16);
  LODWORD(v16) = 1;
  sub_10006083C(v4, &v16);
  do
  {
    while (1)
    {
      if (YAML::Scanner::empty(*(YAML::Scanner **)a1))
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
        int v14 = (void **)YAML::Scanner::mark(*(YAML::Scanner **)a1);
        int v15 = v12;
        sub_100003470(&v16, "end of map not found");
        sub_100043924((uint64_t)exception, &v14, (uint64_t)&v16);
        void *exception = off_10007D2D0;
      }
      unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
      unint64_t v6 = v5;
      int v7 = *(_DWORD *)(v5 + 16);
      long long v16 = *(_OWORD *)v5;
      int v17 = v7;
      if (*(char *)(v5 + 47) < 0)
      {
        sub_100003600(&__p, *(void **)(v5 + 24), *(void *)(v5 + 32));
      }
      else
      {
        long long v8 = *(_OWORD *)(v5 + 24);
        uint64_t v19 = *(void *)(v5 + 40);
        long long __p = v8;
      }
      memset(v20, 0, sizeof(v20));
      sub_100003898(v20, *(long long **)(v6 + 48), *(long long **)(v6 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 56) - *(void *)(v6 + 48)) >> 3));
      int v21 = *(_DWORD *)(v6 + 72);
      if (DWORD1(v16) == 6)
      {
        YAML::Scanner::pop(*(int64x2_t **)a1);
        char v9 = 0;
      }
      else
      {
        if (DWORD1(v16) == 14)
        {
          YAML::Scanner::pop(*(int64x2_t **)a1);
          YAML::SingleDocParser::HandleNode(a1, a2);
        }
        else
        {
          if (DWORD1(v16) != 15)
          {
            uint64_t v13 = __cxa_allocate_exception(0x38uLL);
            sub_100003470(&v14, "end of map not found");
            sub_100043924((uint64_t)v13, (_DWORD *)&v16 + 2, (uint64_t)&v14);
            void *v13 = off_10007D2D0;
          }
          (*(void (**)(uint64_t, char *, void))(*(void *)a2 + 32))(a2, (char *)&v16 + 8, 0);
        }
        if (YAML::Scanner::empty(*(YAML::Scanner **)a1)
          || *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) != 15)
        {
          (*(void (**)(uint64_t, char *, void))(*(void *)a2 + 32))(a2, (char *)&v16 + 8, 0);
        }
        else
        {
          YAML::Scanner::pop(*(int64x2_t **)a1);
          YAML::SingleDocParser::HandleNode(a1, a2);
        }
        char v9 = 1;
      }
      int v14 = (void **)v20;
      sub_100003B14(&v14);
      if (SHIBYTE(v19) < 0) {
        break;
      }
      if ((v9 & 1) == 0) {
        return sub_10005FBD4(*(void **)(a1 + 16), 1);
      }
    }
    operator delete((void *)__p);
  }
  while ((v9 & 1) != 0);
  return sub_10005FBD4(*(void **)(a1 + 16), 1);
}

void sub_10005FF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      sub_100056C8C((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

uint64_t YAML::SingleDocParser::HandleFlowMap(uint64_t a1, uint64_t a2)
{
  YAML::Scanner::pop(*(int64x2_t **)a1);
  int v4 = *(void **)(a1 + 16);
  LODWORD(v20[0]) = 3;
  sub_10006083C(v4, v20);
  while (1)
  {
    if (YAML::Scanner::empty(*(YAML::Scanner **)a1))
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      uint64_t v21 = YAML::Scanner::mark(*(YAML::Scanner **)a1);
      int v22 = v11;
      sub_100003470(v20, "end of map flow not found");
      sub_100043924((uint64_t)exception, &v21, (uint64_t)v20);
      void *exception = off_10007D2D0;
    }
    unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    uint64_t v21 = *(void *)(v5 + 8);
    int v22 = *(_DWORD *)(v5 + 16);
    int v6 = *(_DWORD *)(v5 + 4);
    if (v6 == 14)
    {
      YAML::Scanner::pop(*(int64x2_t **)a1);
      YAML::SingleDocParser::HandleNode(a1, a2);
      goto LABEL_7;
    }
    if (v6 == 11) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a2 + 32))(a2, &v21, 0);
LABEL_7:
    if (YAML::Scanner::empty(*(YAML::Scanner **)a1)
      || *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) != 15)
    {
      (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a2 + 32))(a2, &v21, 0);
    }
    else
    {
      YAML::Scanner::pop(*(int64x2_t **)a1);
      YAML::SingleDocParser::HandleNode(a1, a2);
    }
    if (YAML::Scanner::empty(*(YAML::Scanner **)a1))
    {
      int v12 = __cxa_allocate_exception(0x38uLL);
      uint64_t v13 = (YAML::Scanner **)a1;
      int v14 = v12;
      uint64_t v18 = YAML::Scanner::mark(*v13);
      int v19 = v15;
      sub_100003470(v20, "end of map flow not found");
      sub_100043924((uint64_t)v14, &v18, (uint64_t)v20);
      *int v14 = off_10007D2D0;
    }
    unint64_t v7 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    int v8 = *(_DWORD *)(v7 + 4);
    if (v8 != 11)
    {
      if (v8 != 13)
      {
        unint64_t v16 = v7;
        int v17 = __cxa_allocate_exception(0x38uLL);
        sub_100003470(v20, "end of map flow not found");
        sub_100043924((uint64_t)v17, (_DWORD *)(v16 + 8), (uint64_t)v20);
        *int v17 = off_10007D2D0;
      }
      YAML::Scanner::pop(*(int64x2_t **)a1);
    }
  }
  YAML::Scanner::pop(*(int64x2_t **)a1);
  return sub_10005FBD4(*(void **)(a1 + 16), 3);
}

void sub_1000602E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v18) {
    __cxa_free_exception(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t YAML::SingleDocParser::HandleCompactMap(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 16);
  LODWORD(v7) = 5;
  sub_10006083C(v4, &v7);
  unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  uint64_t v7 = *(void *)(v5 + 8);
  int v8 = *(_DWORD *)(v5 + 16);
  YAML::Scanner::pop(*(int64x2_t **)a1);
  YAML::SingleDocParser::HandleNode(a1, a2);
  if (YAML::Scanner::empty(*(YAML::Scanner **)a1) || *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) != 15)
  {
    (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a2 + 32))(a2, &v7, 0);
  }
  else
  {
    YAML::Scanner::pop(*(int64x2_t **)a1);
    YAML::SingleDocParser::HandleNode(a1, a2);
  }
  return sub_10005FBD4(*(void **)(a1 + 16), 5);
}

uint64_t YAML::SingleDocParser::HandleCompactMapWithNoKey(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 16);
  int v7 = 5;
  sub_10006083C(v4, &v7);
  unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  (*(void (**)(uint64_t, unint64_t, void))(*(void *)a2 + 32))(a2, v5 + 8, 0);
  YAML::Scanner::pop(*(int64x2_t **)a1);
  YAML::SingleDocParser::HandleNode(a1, a2);
  return sub_10005FBD4(*(void **)(a1 + 16), 5);
}

void YAML::SingleDocParser::ParseTag(YAML::Scanner **a1, uint64_t a2)
{
  unint64_t v4 = YAML::Scanner::peek(*a1);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    unint64_t v6 = v4;
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    sub_100003470(v9, "cannot assign multiple tags to the same node");
    sub_100043924((uint64_t)exception, (_DWORD *)(v6 + 8), (uint64_t)v9);
    void *exception = off_10007D2D0;
  }
  YAML::Tag::Tag(v9, v4);
  YAML::Tag::Translate((YAML::Tag *)v9, a1[1], (uint64_t)&__p);
  std::string::operator=((std::string *)a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  YAML::Scanner::pop((int64x2_t *)*a1);
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9[1]);
  }
}

void sub_1000605F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void YAML::SingleDocParser::ParseAnchor(YAML::Scanner **a1, uint64_t *a2, std::string *a3)
{
  unint64_t v6 = (const std::string *)YAML::Scanner::peek(*a1);
  int v7 = v6;
  if (*a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    sub_100003470(v11, "cannot assign multiple anchors to the same node");
    sub_100043924((uint64_t)exception, &v7->__r_.__value_.__r.__words[1], (uint64_t)v11);
    void *exception = off_10007D2D0;
  }
  uint64_t v8 = (uint64_t)&v6[1];
  std::string::operator=(a3, v6 + 1);
  *a2 = YAML::SingleDocParser::RegisterAnchor((uint64_t)a1, v8);
  char v9 = *a1;
  YAML::Scanner::pop((int64x2_t *)v9);
}

void sub_10006074C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_100060784(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t YAML::SingleDocParser::RegisterAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 48) + 1;
  *(void *)(a1 + 48) = v3;
  uint64_t v5 = (long long *)a2;
  sub_100060C2C((uint64_t **)(a1 + 24), (const void **)a2, (uint64_t)&std::piecewise_construct, &v5)[7] = v3;
  return v3;
}

void sub_10006083C(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1000608C4(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1000608C4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_100052514(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100058368(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100058480((uint64_t)a1, &v54);
    std::string::size_type v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_100052514((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100052514((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_1000585A0(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1000586B8((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100060B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100060BDC(void **a1, void *a2)
{
  unint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10005733C(result);
    operator delete();
  }
  return result;
}

uint64_t *sub_100060C2C(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_1000066CC((uint64_t)a1, &v9, a2);
  unint64_t result = *v6;
  if (!*v6)
  {
    sub_100060CC4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_100006674(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_100060CC4@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t result = v6 + 32;
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    unint64_t result = sub_100003600(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)unint64_t result = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100060D50(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10000A1D0(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100060D6C()
{
}

void sub_100060D98()
{
}

void sub_100060DC4()
{
  __assert_rtn("PopCollectionType", "collectionstack.h", 31, "type == GetCurCollectionType()");
}

void YAML::Stream::Stream(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_100060BDC((void **)this + 2, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  operator new[]();
}

void sub_100061044(_Unwind_Exception *a1)
{
  sub_100061C54((void *)(v1 + 24));
  _Unwind_Resume(a1);
}

void YAML::Stream::~Stream(YAML::Stream *this)
{
  if (*((void *)this + 9)) {
    operator delete[]();
  }
  sub_100061C54((void *)this + 3);
}

uint64_t YAML::Stream::peek(YAML::Stream *this)
{
  if (*((void *)this + 8)) {
    return *(char *)(*(void *)(*((void *)this + 4)
  }
                                             + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                                 + (*((void *)this + 7) & 0xFFFLL));
  else {
    return 4;
  }
}

BOOL YAML::Stream::operator BOOL(void *a1)
{
  if (!*(_DWORD *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32)) {
    return 1;
  }
  if (a1[8]) {
    return *(unsigned char *)(*(void *)(a1[4] + ((a1[7] >> 9) & 0x7FFFFFFFFFFFF8)) + (a1[7] & 0xFFFLL)) != 4;
  }
  return 0;
}

uint64_t YAML::Stream::get(YAML::Stream *this)
{
  if (*((void *)this + 8)) {
    int v2 = *(unsigned __int8 *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
  }
                            + (*((void *)this + 7) & 0xFFFLL));
  else {
    int v2 = 4;
  }
  YAML::Stream::AdvanceCurrent(this);
  ++*((_DWORD *)this + 4);
  if (v2 == 10) {
    *(void *)((char *)this + 12) = (*((_DWORD *)this + 3) + 1);
  }
  return (char)v2;
}

uint64_t YAML::Stream::AdvanceCurrent(YAML::Stream *this)
{
  uint64_t v2 = *((void *)this + 8);
  if (!v2
    || (++*((void *)this + 7),
        *((void *)this + 8) = v2 - 1,
        uint64_t result = sub_100061CFC((uint64_t)this + 24, 1),
        ++*((_DWORD *)this + 2),
        !*((void *)this + 8)))
  {
    return YAML::Stream::_ReadAheadTo(this, 0);
  }
  return result;
}

void YAML::Stream::get(YAML::Stream *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  int v3 = a2;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a3, a2);
  if (v3 >= 1)
  {
    do
    {
      std::string::value_type v6 = YAML::Stream::get(this);
      std::string::push_back(a3, v6);
      --v3;
    }
    while (v3);
  }
}

void sub_1000612AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

YAML::Stream *YAML::Stream::eat(YAML::Stream *this, int a2)
{
  if (a2 >= 1)
  {
    int v2 = a2;
    int v3 = this;
    do
    {
      this = (YAML::Stream *)YAML::Stream::get(v3);
      --v2;
    }
    while (v2);
  }
  return this;
}

BOOL YAML::Stream::_ReadAheadTo(YAML::Stream *this, unint64_t a2)
{
  for (uint64_t i = *(void **)this; !*(_DWORD *)((char *)i + *(void *)(*i - 24) + 32); uint64_t i = *(void **)this)
  {
    unint64_t v5 = *((void *)this + 8);
    if (v5 > a2) {
      return v5 > a2;
    }
    switch(*((_DWORD *)this + 5))
    {
      case 0:
        YAML::Stream::StreamInUtf8(this);
        break;
      case 1:
      case 2:
        YAML::Stream::StreamInUtf16(this);
        break;
      case 3:
      case 4:
        YAML::Stream::StreamInUtf32(this);
        break;
      default:
        continue;
    }
  }
  char v7 = 4;
  sub_1000616B4((void *)this + 3, &v7);
  unint64_t v5 = *((void *)this + 8);
  return v5 > a2;
}

void YAML::Stream::StreamInUtf8(YAML::Stream *this)
{
  char NextByte = YAML::Stream::GetNextByte(this);
  if (!*(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24) + 32))
  {
    char v3 = NextByte;
    sub_1000616B4((void *)this + 3, &v3);
  }
}

void YAML::Stream::StreamInUtf16(YAML::Stream *this)
{
  int v2 = *((_DWORD *)this + 5);
  char NextByte = YAML::Stream::GetNextByte(this);
  char v13 = YAML::Stream::GetNextByte(this);
  if (!*(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24) + 32))
  {
    BOOL v3 = v2 == 2;
    BOOL v4 = v2 != 2;
    if (v2 == 2) {
      p_char NextByte = &NextByte;
    }
    else {
      p_char NextByte = &v13;
    }
    uint64_t v6 = *p_NextByte;
    if ((v6 & 0xFC) == 0xDC)
    {
      char v7 = (void *)((char *)this + 24);
LABEL_7:
      unint64_t v8 = 65533;
    }
    else
    {
      unint64_t v9 = *(&NextByte + v3) | (unint64_t)(v6 << 8);
      if ((v6 & 0xFC) == 0xD8)
      {
        while (1)
        {
          unint64_t v10 = v9;
          char NextByte = YAML::Stream::GetNextByte(this);
          char v13 = YAML::Stream::GetNextByte(this);
          if (*(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24) + 32))
          {
            char v7 = (void *)((char *)this + 24);
            goto LABEL_7;
          }
          unint64_t v9 = *(&NextByte + v3) | ((unint64_t)*(&NextByte + v4) << 8);
          unint64_t v11 = ((unint64_t)*(&NextByte + v4) << 8) - 57344;
          if (v11 > 0xFFFFFFFFFFFFFBFFLL) {
            break;
          }
          sub_10006180C((void *)this + 3, 0xFFFDuLL);
          if (v11 <= 0xFFFFFFFFFFFFF7FFLL)
          {
            char v7 = (void *)((char *)this + 24);
            unint64_t v8 = v10;
            goto LABEL_16;
          }
        }
        unint64_t v9 = (*(&NextByte + v3) | (unint64_t)((*(&NextByte + v4) << 8) & 0x3FF) | ((v10 & 0x3FF) << 10))
           + 0x10000;
      }
      char v7 = (void *)((char *)this + 24);
      unint64_t v8 = v9;
    }
LABEL_16:
    sub_10006180C(v7, v8);
  }
}

void YAML::Stream::StreamInUtf32(YAML::Stream *this)
{
  if (*((_DWORD *)this + 5) == 4) {
    int v2 = (char *)&unk_1000660F8;
  }
  else {
    int v2 = (char *)&unk_1000660E8;
  }
  v5[0] = YAML::Stream::GetNextByte(this);
  v5[1] = YAML::Stream::GetNextByte(this);
  void v5[2] = YAML::Stream::GetNextByte(this);
  v5[3] = YAML::Stream::GetNextByte(this);
  if (!*(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24) + 32))
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      unint64_t v4 = v5[*(int *)&v2[v3]] | (v4 << 8);
      v3 += 4;
    }
    while (v3 != 16);
    sub_10006180C((void *)this + 3, v4);
  }
}

void sub_1000616B4(void *a1, unsigned char *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 9) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10006193C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(unsigned char *)(*(void *)(v5 + ((v7 >> 9) & 0x7FFFFFFFFFFFF8)) + (v7 & 0xFFF)) = *a2;
  ++a1[5];
}

uint64_t YAML::Stream::GetNextByte(YAML::Stream *this)
{
  unint64_t v2 = *((void *)this + 11);
  if (v2 < *((void *)this + 10)) {
    goto LABEL_5;
  }
  uint64_t v3 = *(void *)(*(void *)this + *(void *)(**(void **)this - 24) + 40);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v3 + 64))(v3, *((void *)this + 9), 2048);
  *((void *)this + 1sub_100060BDC((void **)this + 2, 0) = v4;
  *((void *)this + 11) = 0;
  if (v4
    || (uint64_t v5 = (std::ios_base *)(*(void *)this + *(void *)(**(void **)this - 24)),
        std::ios_base::clear(v5, v5->__rdstate_ | 2),
        *((void *)this + 10)))
  {
    unint64_t v2 = *((void *)this + 11);
LABEL_5:
    uint64_t v6 = *((void *)this + 9);
    *((void *)this + 11) = v2 + 1;
    return *(unsigned __int8 *)(v6 + v2);
  }
  return 0;
}

void sub_10006180C(void *a1, unint64_t a2)
{
  if (a2 == 4) {
    unint64_t v3 = 65533;
  }
  else {
    unint64_t v3 = a2;
  }
  if (v3 > 0x7F)
  {
    if (v3 > 0x7FF)
    {
      if (v3 >> 16)
      {
        char v8 = (v3 >> 18) & 7 | 0xF0;
        sub_1000616B4(a1, &v8);
        char v7 = (v3 >> 12) & 0x3F | 0x80;
        sub_1000616B4(a1, &v7);
        char v6 = (v3 >> 6) & 0x3F | 0x80;
        sub_1000616B4(a1, &v6);
        char v5 = v3 & 0x3F | 0x80;
        uint64_t v4 = &v5;
      }
      else
      {
        char v11 = (v3 >> 12) | 0xE0;
        sub_1000616B4(a1, &v11);
        char v10 = (v3 >> 6) & 0x3F | 0x80;
        sub_1000616B4(a1, &v10);
        char v9 = v3 & 0x3F | 0x80;
        uint64_t v4 = &v9;
      }
    }
    else
    {
      char v13 = (v3 >> 6) | 0xC0;
      sub_1000616B4(a1, &v13);
      char v12 = v3 & 0x3F | 0x80;
      uint64_t v4 = &v12;
    }
  }
  else
  {
    char v14 = v3;
    uint64_t v4 = &v14;
  }
  sub_1000616B4(a1, v4);
}

void sub_10006193C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1000;
  unint64_t v4 = v2 - 4096;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    char v6 = (char *)a1[3];
    a1[4] = v4;
    char v7 = (void *)a1[1];
    char v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)char v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_100052514(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      char v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        char v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100058368(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100058480((uint64_t)a1, &v54);
    std::string::size_type v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_100052514((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        char v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100052514((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_1000585A0(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1000586B8((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100061C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100061C54(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 4096;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    char v7 = *v2++;
    operator delete(v7);
  }
  return sub_1000570AC((uint64_t)a1);
}

uint64_t sub_100061CFC(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x1000) {
    a2 = 1;
  }
  if (v2 < 0x2000) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 4096;
  }
  return v4 ^ 1u;
}

uint64_t YAML::Tag::Tag(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_100060BDC((void **)this + 2, 0) = 0u;
  switch(v3)
  {
    case 0:
    case 1:
    case 2:
      uint64_t v6 = (const std::string *)(a2 + 24);
      goto LABEL_4;
    case 3:
      std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 24));
      uint64_t v6 = *(const std::string **)(a2 + 48);
LABEL_4:
      std::string::operator=(v4, v6);
      break;
    case 4:
      return a1;
    default:
      __assert_rtn("Tag", "tag.cpp", 28, "false");
  }
  return a1;
}

void sub_100061E18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void YAML::Tag::Translate(YAML::Tag *this@<X0>, const YAML::Directives *a2@<X1>, uint64_t a3@<X8>)
{
  switch(*(_DWORD *)this)
  {
    case 0:
      if (*((char *)this + 55) < 0)
      {
        char v9 = (void *)*((void *)this + 4);
        unint64_t v10 = *((void *)this + 5);
        sub_100003600((unsigned char *)a3, v9, v10);
      }
      else
      {
        *(_OWORD *)a3 = *((_OWORD *)this + 2);
        *(void *)(a3 + 16) = *((void *)this + 6);
      }
      return;
    case 1:
      sub_100003470(v12, "!");
      YAML::Directives::TranslateTagHandle((uint64_t)a2, (uint64_t)v12, (uint64_t)__p);
      sub_100029E78((const void **)__p, (const void **)this + 4, a3);
      goto LABEL_15;
    case 2:
      sub_100003470(v12, "!!");
      YAML::Directives::TranslateTagHandle((uint64_t)a2, (uint64_t)v12, (uint64_t)__p);
      sub_100029E78((const void **)__p, (const void **)this + 4, a3);
LABEL_15:
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if ((SHIBYTE(v13) & 0x80000000) == 0) {
        return;
      }
      char v8 = v12[0];
      break;
    case 3:
      std::operator+<char>();
      uint64_t v6 = std::string::append(&v11, "!");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type v13 = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v12 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      YAML::Directives::TranslateTagHandle((uint64_t)a2, (uint64_t)v12, (uint64_t)__p);
      sub_100029E78((const void **)__p, (const void **)this + 4, a3);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v13) < 0) {
        operator delete(v12[0]);
      }
      if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      char v8 = (void *)v11.__r_.__value_.__r.__words[0];
      break;
    case 4:
      sub_100003470((void *)a3, "!");
      return;
    default:
      sub_1000620E4();
  }
  operator delete(v8);
}

void sub_100062050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000620E4()
{
}

void sub_100062110()
{
  __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
}

void sub_10006213C()
{
}

void sub_100062168()
{
  __assert_rtn("ParseNull", "reader.h", 855, "is.Peek() == 'n'");
}

void sub_100062194()
{
}

void sub_1000621C0()
{
  __assert_rtn("ParseTrue", "reader.h", 868, "is.Peek() == 't'");
}

void sub_1000621EC()
{
}

void sub_100062218()
{
  __assert_rtn("ParseFalse", "reader.h", 881, "is.Peek() == 'f'");
}

void sub_100062244()
{
}

void sub_100062270()
{
}

void sub_10006229C()
{
}

void sub_1000622C8()
{
  __assert_rtn("ParseObject", "reader.h", 739, "is.Peek() == '{'");
}

void sub_1000622F4()
{
}

void sub_100062320()
{
}

void sub_10006234C()
{
}

void sub_100062378()
{
  __assert_rtn("ParseArray", "reader.h", 807, "is.Peek() == '['");
}

void sub_1000623A4()
{
}

void sub_1000623D0()
{
  __assert_rtn("PushUnsafe", "stack.h", 131, "static_cast<std::ptrdiff_t>(sizeof(T) * count) <= (stackEnd_ - stackTop_)");
}

void sub_1000623FC()
{
}

void sub_100062428()
{
}

void sub_100062454()
{
}

void sub_100062480()
{
}

void sub_1000624AC()
{
}

void sub_1000624D8()
{
  __assert_rtn("Encode", "encodings.h", 115, "codepoint <= 0x10FFFF");
}

void sub_100062504()
{
  __assert_rtn("GenericStringRef", "document.h", 322, "str != 0 || len == 0u");
}

void sub_100062530()
{
  __assert_rtn("Top", "stack.h", 146, "GetSize() >= sizeof(T)");
}

void sub_10006255C()
{
  __assert_rtn("Accept", "document.h", 1892, "GetType() == kNumberType");
}

void sub_100062588()
{
}

void sub_1000625B4()
{
}

void sub_1000625E0()
{
}

void sub_10006260C()
{
}

void sub_100062638()
{
}

void sub_100062664()
{
  __assert_rtn("EndObject", "prettywriter.h", 139, "Base::level_stack_.GetSize() >= sizeof(typename Base::Level)");
}

void sub_100062690()
{
  __assert_rtn("EndObject", "prettywriter.h", 141, "0 == Base::level_stack_.template Top<typename Base::Level>()->valueCount % 2");
}

void sub_1000626BC()
{
}

void sub_1000626E8()
{
}

void sub_100062714()
{
}

void sub_100062740()
{
}

void sub_10006276C()
{
  __assert_rtn("NotNullStrLen", "document.h", 334, "str != 0");
}

void sub_100062798()
{
}

void sub_1000627C4()
{
}

void sub_1000627F0()
{
}

void sub_10006281C()
{
}

void sub_100062848()
{
}

void sub_100062874()
{
}

void sub_1000628A0()
{
}

void sub_1000628CC()
{
}

void sub_1000628F8()
{
  __assert_rtn("EndArray", "prettywriter.h", 165, "Base::level_stack_.GetSize() >= sizeof(typename Base::Level)");
}

void sub_100062924()
{
}

void sub_100062950()
{
  __assert_rtn("String", "prettywriter.h", 111, "str != 0");
}

void sub_10006297C()
{
  __assert_rtn("i32toa", "itoa.h", 116, "buffer != 0");
}

void sub_1000629A8()
{
  __assert_rtn("i64toa", "itoa.h", 295, "buffer != 0");
}

void sub_1000629D4()
{
}

void sub_100062A00()
{
  __assert_rtn("PrettyPrefix", "prettywriter.h", 243, "type == kStringType");
}

void sub_100062A2C()
{
  __assert_rtn("dtoa", "dtoa.h", 217, "maxDecimalPlaces >= 1");
}

void sub_100062A58()
{
}

void sub_100062A84()
{
  __assert_rtn("Normalize", "diyfp.h", 103, "f != 0");
}

void sub_100062AB0()
{
  __assert_rtn("u32toa", "itoa.h", 40, "buffer != 0");
}

void sub_100062ADC()
{
  __assert_rtn("u64toa", "itoa.h", 127, "buffer != 0");
}

uint64_t sub_100062B08(uint64_t a1, uint64_t (***a2)(void))
{
  uint64_t v3 = a1 - 88;
  int v4 = (uint64_t (***)(void))(a1 - 88);
  unint64_t v5 = (uint64_t (***)(void))(a1 - 88);
  do
  {
    uint64_t v6 = *v5;
    v5 -= 11;
    uint64_t result = (*v6)(v4);
    v3 -= 88;
    BOOL v8 = v4 == a2;
    int v4 = v5;
  }
  while (!v8);
  return result;
}

void sub_100062B7C(uint64_t a1, void **a2)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*a2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_100062BBC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t CATExecute()
{
  return _CATExecute();
}

uint64_t CATFree()
{
  return _CATFree();
}

uint64_t CATPatternExecute()
{
  return _CATPatternExecute();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t siri::dialogengine::DeleteFile()
{
  return siri::dialogengine::DeleteFile();
}

uint64_t siri::dialogengine::ExpandPath()
{
  return siri::dialogengine::ExpandPath();
}

uint64_t siri::dialogengine::FileExists()
{
  return siri::dialogengine::FileExists();
}

uint64_t siri::dialogengine::PathExists()
{
  return siri::dialogengine::PathExists();
}

uint64_t siri::dialogengine::StringJoin()
{
  return siri::dialogengine::StringJoin();
}

{
  return siri::dialogengine::StringJoin();
}

uint64_t siri::dialogengine::StringTrim()
{
  return siri::dialogengine::StringTrim();
}

uint64_t siri::dialogengine::TestRunner::RunTestSuite()
{
  return siri::dialogengine::TestRunner::RunTestSuite();
}

uint64_t siri::dialogengine::CatIdToPath()
{
  return siri::dialogengine::CatIdToPath();
}

uint64_t siri::dialogengine::CatPathToId()
{
  return siri::dialogengine::CatPathToId();
}

uint64_t siri::dialogengine::GetFileSize()
{
  return siri::dialogengine::GetFileSize();
}

uint64_t siri::dialogengine::PatternFile::LoadFromId()
{
  return siri::dialogengine::PatternFile::LoadFromId();
}

uint64_t siri::dialogengine::PatternFile::LoadFromPath()
{
  return siri::dialogengine::PatternFile::LoadFromPath();
}

uint64_t siri::dialogengine::PatternFile::Save()
{
  return siri::dialogengine::PatternFile::Save();
}

uint64_t siri::dialogengine::PatternFile::Validate(siri::dialogengine::PatternFile *a1, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::PatternFile::Validate(a1, a2);
}

uint64_t siri::dialogengine::RequestInfo::SetLocalePath()
{
  return siri::dialogengine::RequestInfo::SetLocalePath();
}

uint64_t siri::dialogengine::RequestInfo::SetParamsPath()
{
  return siri::dialogengine::RequestInfo::SetParamsPath();
}

uint64_t siri::dialogengine::RequestInfo::SetVisualPath()
{
  return siri::dialogengine::RequestInfo::SetVisualPath();
}

uint64_t siri::dialogengine::RequestInfo::SetRequestType()
{
  return siri::dialogengine::RequestInfo::SetRequestType();
}

uint64_t siri::dialogengine::RequestInfo::SetTemplateDirs()
{
  return siri::dialogengine::RequestInfo::SetTemplateDirs();
}

uint64_t siri::dialogengine::RequestInfo::RequestInfo(siri::dialogengine::RequestInfo *this)
{
  return siri::dialogengine::RequestInfo::RequestInfo(this);
}

uint64_t siri::dialogengine::ResolveType()
{
  return siri::dialogengine::ResolveType();
}

uint64_t siri::dialogengine::StringRFind()
{
  return siri::dialogengine::StringRFind();
}

uint64_t siri::dialogengine::StringSplit()
{
  return siri::dialogengine::StringSplit();
}

uint64_t siri::dialogengine::AddExtension()
{
  return siri::dialogengine::AddExtension();
}

uint64_t siri::dialogengine::ElapsedTimer::ElapsedTimer(siri::dialogengine::ElapsedTimer *this)
{
  return siri::dialogengine::ElapsedTimer::ElapsedTimer(this);
}

uint64_t siri::dialogengine::GroupPhrases::GroupPhrases(siri::dialogengine::GroupPhrases *this)
{
  return siri::dialogengine::GroupPhrases::GroupPhrases(this);
}

uint64_t siri::dialogengine::HasExtension()
{
  return siri::dialogengine::HasExtension();
}

uint64_t siri::dialogengine::OptionExists()
{
  return siri::dialogengine::OptionExists();
}

uint64_t siri::dialogengine::ParseXmlFile()
{
  return siri::dialogengine::ParseXmlFile();
}

uint64_t siri::dialogengine::StringToBool()
{
  return siri::dialogengine::StringToBool();
}

uint64_t siri::dialogengine::StringToUInt()
{
  return siri::dialogengine::StringToUInt();
}

uint64_t siri::dialogengine::StringsEqual()
{
  return siri::dialogengine::StringsEqual();
}

uint64_t siri::dialogengine::DeleteDirTree()
{
  return siri::dialogengine::DeleteDirTree();
}

uint64_t siri::dialogengine::GetCatLocales()
{
  return siri::dialogengine::GetCatLocales();
}

uint64_t siri::dialogengine::ParseJSONBool()
{
  return siri::dialogengine::ParseJSONBool();
}

uint64_t siri::dialogengine::SetJSONString()
{
  return siri::dialogengine::SetJSONString();
}

uint64_t siri::dialogengine::StringReplace()
{
  return siri::dialogengine::StringReplace();
}

uint64_t siri::dialogengine::StringToLower()
{
  return siri::dialogengine::StringToLower();
}

uint64_t siri::dialogengine::StringToUpper()
{
  return siri::dialogengine::StringToUpper();
}

uint64_t siri::dialogengine::FindLocaleFile()
{
  return siri::dialogengine::FindLocaleFile();
}

{
  return siri::dialogengine::FindLocaleFile();
}

uint64_t siri::dialogengine::FindParamsFile()
{
  return siri::dialogengine::FindParamsFile();
}

{
  return siri::dialogengine::FindParamsFile();
}

uint64_t siri::dialogengine::FindVisualFile()
{
  return siri::dialogengine::FindVisualFile();
}

void siri::dialogengine::LineNumberBase::~LineNumberBase(siri::dialogengine::LineNumberBase *this)
{
}

uint64_t siri::dialogengine::ObjectRegistry::GetObject()
{
  return siri::dialogengine::ObjectRegistry::GetObject();
}

uint64_t siri::dialogengine::SetJSONUintVal()
{
  return siri::dialogengine::SetJSONUintVal();
}

uint64_t siri::dialogengine::StringContains()
{
  return siri::dialogengine::StringContains();
}

uint64_t siri::dialogengine::StringEndsWith()
{
  return siri::dialogengine::StringEndsWith();
}

uint64_t siri::dialogengine::StringFromBool(siri::dialogengine *this, BOOL a2)
{
  return siri::dialogengine::StringFromBool(this, a2);
}

uint64_t siri::dialogengine::ValidationBase::ValidationBase(siri::dialogengine::ValidationBase *this)
{
  return siri::dialogengine::ValidationBase::ValidationBase(this);
}

void siri::dialogengine::ValidationBase::~ValidationBase(siri::dialogengine::ValidationBase *this)
{
}

uint64_t siri::dialogengine::EncodeXmlString()
{
  return siri::dialogengine::EncodeXmlString();
}

uint64_t siri::dialogengine::FindFileInPaths()
{
  return siri::dialogengine::FindFileInPaths();
}

uint64_t siri::dialogengine::GetJSONArrayVal()
{
  return siri::dialogengine::GetJSONArrayVal();
}

uint64_t siri::dialogengine::GetTemplateDirs()
{
  return siri::dialogengine::GetTemplateDirs();
}

uint64_t siri::dialogengine::GetValidVersion()
{
  return siri::dialogengine::GetValidVersion();
}

uint64_t siri::dialogengine::HasCATExtension()
{
  return siri::dialogengine::HasCATExtension();
}

uint64_t siri::dialogengine::ParseJSONString()
{
  return siri::dialogengine::ParseJSONString();
}

uint64_t siri::dialogengine::PatternIdToPath()
{
  return siri::dialogengine::PatternIdToPath();
}

uint64_t siri::dialogengine::PatternRegistry::GetSchema()
{
  return siri::dialogengine::PatternRegistry::GetSchema();
}

uint64_t siri::dialogengine::PopStringOption()
{
  return siri::dialogengine::PopStringOption();
}

uint64_t siri::dialogengine::RemoveExtension()
{
  return siri::dialogengine::RemoveExtension();
}

uint64_t siri::dialogengine::GetJSONObjectVal()
{
  return siri::dialogengine::GetJSONObjectVal();
}

uint64_t siri::dialogengine::GetJSONStringVal()
{
  return siri::dialogengine::GetJSONStringVal();
}

uint64_t siri::dialogengine::GetLocaleCountry()
{
  return siri::dialogengine::GetLocaleCountry();
}

uint64_t siri::dialogengine::ReadFileToString()
{
  return siri::dialogengine::ReadFileToString();
}

uint64_t siri::dialogengine::StringStartsWith()
{
  return siri::dialogengine::StringStartsWith();
}

uint64_t siri::dialogengine::GetExecutableName()
{
  return siri::dialogengine::GetExecutableName();
}

uint64_t siri::dialogengine::GetLocaleLanguage()
{
  return siri::dialogengine::GetLocaleLanguage();
}

uint64_t siri::dialogengine::VisualCatIdToPath()
{
  return siri::dialogengine::VisualCatIdToPath();
}

uint64_t siri::dialogengine::ChangeCATExtension()
{
  return siri::dialogengine::ChangeCATExtension();
}

uint64_t siri::dialogengine::CreateJSONArrayVal()
{
  return siri::dialogengine::CreateJSONArrayVal();
}

uint64_t siri::dialogengine::GetCanonicalLocale()
{
  return siri::dialogengine::GetCanonicalLocale();
}

uint64_t siri::dialogengine::GetMultipleOptions()
{
  return siri::dialogengine::GetMultipleOptions();
}

uint64_t siri::dialogengine::HasSchemaExtension()
{
  return siri::dialogengine::HasSchemaExtension();
}

uint64_t siri::dialogengine::ListDirRecursively()
{
  return siri::dialogengine::ListDirRecursively();
}

uint64_t siri::dialogengine::ParseCATSchemaYAML()
{
  return siri::dialogengine::ParseCATSchemaYAML();
}

uint64_t siri::dialogengine::PopStringSetOption()
{
  return siri::dialogengine::PopStringSetOption();
}

uint64_t siri::dialogengine::WriteCATSchemaYAML()
{
  return siri::dialogengine::WriteCATSchemaYAML();
}

uint64_t siri::dialogengine::ConstructJSONString()
{
  return siri::dialogengine::ConstructJSONString();
}

uint64_t siri::dialogengine::CreateJSONObjectVal()
{
  return siri::dialogengine::CreateJSONObjectVal();
}

uint64_t siri::dialogengine::CreateJSONStringVal()
{
  return siri::dialogengine::CreateJSONStringVal();
}

uint64_t siri::dialogengine::ExecuteShellCommand()
{
  return siri::dialogengine::ExecuteShellCommand();
}

uint64_t siri::dialogengine::GetParamsForPattern()
{
  return siri::dialogengine::GetParamsForPattern();
}

uint64_t siri::dialogengine::HasPatternExtension()
{
  return siri::dialogengine::HasPatternExtension();
}

uint64_t siri::dialogengine::ParameterCollection::RemoveParameter()
{
  return siri::dialogengine::ParameterCollection::RemoveParameter();
}

uint64_t siri::dialogengine::ParameterCollection::GetUniqueParameters(siri::dialogengine::ParameterCollection *a1, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::ParameterCollection::GetUniqueParameters(a1, a2);
}

uint64_t siri::dialogengine::ParameterCollection::GetConflictingParameters(siri::dialogengine::ParameterCollection *a1, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::ParameterCollection::GetConflictingParameters(a1, a2);
}

uint64_t siri::dialogengine::WriteFileFromString()
{
  return siri::dialogengine::WriteFileFromString();
}

uint64_t siri::dialogengine::ConvertJSONToJSONObj()
{
  return siri::dialogengine::ConvertJSONToJSONObj();
}

uint64_t siri::dialogengine::DialogMetadataReader::GetNextSemanticValue(siri::dialogengine::DialogMetadataReader *this)
{
  return siri::dialogengine::DialogMetadataReader::GetNextSemanticValue(this);
}

uint64_t siri::dialogengine::DialogMetadataReader::Load()
{
  return siri::dialogengine::DialogMetadataReader::Load();
}

uint64_t siri::dialogengine::DialogMetadataReader::DialogMetadataReader(siri::dialogengine::DialogMetadataReader *this)
{
  return siri::dialogengine::DialogMetadataReader::DialogMetadataReader(this);
}

void siri::dialogengine::DialogMetadataReader::~DialogMetadataReader(siri::dialogengine::DialogMetadataReader *this)
{
}

uint64_t siri::dialogengine::DialogMetadataWriter::AddSemanticValue(siri::dialogengine::DialogMetadataWriter *a1, const siri::dialogengine::DialogMetadataSemanticValue *a2)
{
  return siri::dialogengine::DialogMetadataWriter::AddSemanticValue(a1, a2);
}

uint64_t siri::dialogengine::DialogMetadataWriter::SetAllowUnbounded(siri::dialogengine::DialogMetadataWriter *this, BOOL a2)
{
  return siri::dialogengine::DialogMetadataWriter::SetAllowUnbounded(this, a2);
}

uint64_t siri::dialogengine::DialogMetadataWriter::DialogMetadataWriter(siri::dialogengine::DialogMetadataWriter *this)
{
  return siri::dialogengine::DialogMetadataWriter::DialogMetadataWriter(this);
}

void siri::dialogengine::DialogMetadataWriter::~DialogMetadataWriter(siri::dialogengine::DialogMetadataWriter *this)
{
}

uint64_t siri::dialogengine::GetSchemaSearchPaths(siri::dialogengine *this)
{
  return siri::dialogengine::GetSchemaSearchPaths(this);
}

uint64_t siri::dialogengine::ParseCATSchemaBinary()
{
  return siri::dialogengine::ParseCATSchemaBinary();
}

uint64_t siri::dialogengine::WriteCATSchemaBinary()
{
  return siri::dialogengine::WriteCATSchemaBinary();
}

uint64_t siri::dialogengine::CatLocalePathToLocale()
{
  return siri::dialogengine::CatLocalePathToLocale();
}

uint64_t siri::dialogengine::ChangeSchemaExtension()
{
  return siri::dialogengine::ChangeSchemaExtension();
}

uint64_t siri::dialogengine::GetParamsForDialogCat()
{
  return siri::dialogengine::GetParamsForDialogCat();
}

uint64_t siri::dialogengine::GetParamsForVisualCat()
{
  return siri::dialogengine::GetParamsForVisualCat();
}

uint64_t siri::dialogengine::GetUpdatedTemplateDir()
{
  return siri::dialogengine::GetUpdatedTemplateDir();
}

uint64_t siri::dialogengine::HasVisualCATExtension()
{
  return siri::dialogengine::HasVisualCATExtension();
}

uint64_t siri::dialogengine::ChangePatternExtension()
{
  return siri::dialogengine::ChangePatternExtension();
}

uint64_t siri::dialogengine::ParsePatternSchemaYAML()
{
  return siri::dialogengine::ParsePatternSchemaYAML();
}

uint64_t siri::dialogengine::PatternSchemaComponent::SetName()
{
  return siri::dialogengine::PatternSchemaComponent::SetName();
}

uint64_t siri::dialogengine::PrepareRequestFromJson()
{
  return siri::dialogengine::PrepareRequestFromJson();
}

uint64_t siri::dialogengine::VersionLessThanOrEqual()
{
  return siri::dialogengine::VersionLessThanOrEqual();
}

uint64_t siri::dialogengine::WritePatternSchemaYAML()
{
  return siri::dialogengine::WritePatternSchemaYAML();
}

uint64_t siri::dialogengine::MorphunUpdaterTuriTrial::Delete()
{
  return siri::dialogengine::MorphunUpdaterTuriTrial::Delete();
}

uint64_t siri::dialogengine::MorphunUpdaterTuriTrial::GetPath()
{
  return siri::dialogengine::MorphunUpdaterTuriTrial::GetPath();
}

uint64_t siri::dialogengine::MorphunUpdaterTuriTrial::Download()
{
  return siri::dialogengine::MorphunUpdaterTuriTrial::Download();
}

uint64_t siri::dialogengine::MorphunUpdaterTuriTrial::GetPaths(siri::dialogengine::MorphunUpdaterTuriTrial *this)
{
  return siri::dialogengine::MorphunUpdaterTuriTrial::GetPaths(this);
}

uint64_t siri::dialogengine::MorphunUpdaterTuriTrial::DeleteAll(siri::dialogengine::MorphunUpdaterTuriTrial *this)
{
  return siri::dialogengine::MorphunUpdaterTuriTrial::DeleteAll(this);
}

uint64_t siri::dialogengine::ReadAssetDeliveryConfig()
{
  return siri::dialogengine::ReadAssetDeliveryConfig();
}

uint64_t siri::dialogengine::ChangeVisualCATExtension()
{
  return siri::dialogengine::ChangeVisualCATExtension();
}

uint64_t siri::dialogengine::ParsePatternSchemaBinary()
{
  return siri::dialogengine::ParsePatternSchemaBinary();
}

uint64_t siri::dialogengine::WriteAssetDeliveryConfig()
{
  return siri::dialogengine::WriteAssetDeliveryConfig();
}

uint64_t siri::dialogengine::WritePatternSchemaBinary()
{
  return siri::dialogengine::WritePatternSchemaBinary();
}

uint64_t siri::dialogengine::AllComputedParameterNames(siri::dialogengine *this)
{
  return siri::dialogengine::AllComputedParameterNames(this);
}

uint64_t siri::dialogengine::GetDialogMetadataFilename()
{
  return siri::dialogengine::GetDialogMetadataFilename();
}

uint64_t siri::dialogengine::HasPatternSchemaExtension()
{
  return siri::dialogengine::HasPatternSchemaExtension();
}

uint64_t siri::dialogengine::GetDefaultLocaleForLanguage()
{
  return siri::dialogengine::GetDefaultLocaleForLanguage();
}

uint64_t siri::dialogengine::VisualComponentsCombination::Entry::SetComponentName()
{
  return siri::dialogengine::VisualComponentsCombination::Entry::SetComponentName();
}

uint64_t siri::dialogengine::VisualComponentsCombination::Entry::SetType()
{
  return siri::dialogengine::VisualComponentsCombination::Entry::SetType();
}

uint64_t siri::dialogengine::VisualComponentsCombination::Entry::AddChild()
{
  return siri::dialogengine::VisualComponentsCombination::Entry::AddChild();
}

uint64_t siri::dialogengine::VisualComponentsCombination::SetType()
{
  return siri::dialogengine::VisualComponentsCombination::SetType();
}

uint64_t siri::dialogengine::VisualComponentsCombination::AddEntry()
{
  return siri::dialogengine::VisualComponentsCombination::AddEntry();
}

uint64_t siri::dialogengine::ChangePatternSchemaExtension()
{
  return siri::dialogengine::ChangePatternSchemaExtension();
}

uint64_t siri::dialogengine::GetAllSchemasAndGlobalParams(siri::dialogengine *a1, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::GetAllSchemasAndGlobalParams(a1, a2);
}

uint64_t siri::dialogengine::Log::SetOutputToStdout(siri::dialogengine::Log *this, BOOL a2)
{
  return siri::dialogengine::Log::SetOutputToStdout(this, a2);
}

uint64_t siri::dialogengine::Log::SetLogDebugMessages(siri::dialogengine::Log *this, BOOL a2)
{
  return siri::dialogengine::Log::SetLogDebugMessages(this, a2);
}

uint64_t siri::dialogengine::Log::Info(siri::dialogengine::Log *this, const char *a2, ...)
{
  return siri::dialogengine::Log::Info(this, a2);
}

uint64_t siri::dialogengine::Log::Info()
{
  return siri::dialogengine::Log::Info();
}

uint64_t siri::dialogengine::Log::Warn(siri::dialogengine::Log *this, const char *a2, ...)
{
  return siri::dialogengine::Log::Warn(this, a2);
}

uint64_t siri::dialogengine::Log::Debug(siri::dialogengine::Log *this, const char *a2, ...)
{
  return siri::dialogengine::Log::Debug(this, a2);
}

uint64_t siri::dialogengine::Log::Error(siri::dialogengine::Log *this, const char *a2, ...)
{
  return siri::dialogengine::Log::Error(this, a2);
}

uint64_t siri::dialogengine::Log::Error()
{
  return siri::dialogengine::Log::Error();
}

uint64_t siri::dialogengine::File::SetCheckSnippetDialogIds(siri::dialogengine::File *this, BOOL a2)
{
  return siri::dialogengine::File::SetCheckSnippetDialogIds(this, a2);
}

uint64_t siri::dialogengine::Context::SetRequestInfo()
{
  return siri::dialogengine::Context::SetRequestInfo();
}

uint64_t siri::dialogengine::Context::UpgradeAndSave()
{
  return siri::dialogengine::Context::UpgradeAndSave();
}

uint64_t siri::dialogengine::Context::LoadVisualFiles()
{
  return siri::dialogengine::Context::LoadVisualFiles();
}

uint64_t siri::dialogengine::Context::Load(siri::dialogengine::Context *this)
{
  return siri::dialogengine::Context::Load(this);
}

uint64_t siri::dialogengine::Context::Save()
{
  return siri::dialogengine::Context::Save();
}

uint64_t siri::dialogengine::Context::SetFile()
{
  return siri::dialogengine::Context::SetFile();
}

uint64_t siri::dialogengine::Context::LoadFiles()
{
  return siri::dialogengine::Context::LoadFiles();
}

uint64_t siri::dialogengine::Context::Context()
{
  return siri::dialogengine::Context::Context();
}

uint64_t siri::dialogengine::Context::Context(siri::dialogengine::Context *this)
{
  return siri::dialogengine::Context::Context(this);
}

void siri::dialogengine::Context::~Context(siri::dialogengine::Context *this)
{
}

uint64_t siri::dialogengine::DirName()
{
  return siri::dialogengine::DirName();
}

uint64_t siri::dialogengine::ListDir()
{
  return siri::dialogengine::ListDir();
}

uint64_t siri::dialogengine::BaseName()
{
  return siri::dialogengine::BaseName();
}

uint64_t siri::dialogengine::JoinPath()
{
  return siri::dialogengine::JoinPath();
}

uint64_t siri::dialogengine::CreateDir()
{
  return siri::dialogengine::CreateDir();
}

uint64_t siri::dialogengine::DirExists()
{
  return siri::dialogengine::DirExists();
}

uint64_t siri::dialogengine::GetOption()
{
  return siri::dialogengine::GetOption();
}

uint64_t siri::dialogengine::PopOption()
{
  return siri::dialogengine::PopOption();
}

uint64_t siri::dialogengine::TestSuite::LoadTests()
{
  return siri::dialogengine::TestSuite::LoadTests();
}

uint64_t siri::dialogengine::TestSuite::TestSuite(siri::dialogengine::TestSuite *this, BOOL a2)
{
  return siri::dialogengine::TestSuite::TestSuite(this, a2);
}

uint64_t siri::dialogengine::operator<()
{
  return siri::dialogengine::operator<();
}

uint64_t siri::dialogengine::PatternFile::GetPath(siri::dialogengine::PatternFile *this)
{
  return siri::dialogengine::PatternFile::GetPath(this);
}

uint64_t siri::dialogengine::RequestInfo::GetLocalePath(siri::dialogengine::RequestInfo *this)
{
  return siri::dialogengine::RequestInfo::GetLocalePath(this);
}

uint64_t siri::dialogengine::RequestInfo::GetParamsPath(siri::dialogengine::RequestInfo *this)
{
  return siri::dialogengine::RequestInfo::GetParamsPath(this);
}

uint64_t siri::dialogengine::RequestInfo::GetVisualPath(siri::dialogengine::RequestInfo *this)
{
  return siri::dialogengine::RequestInfo::GetVisualPath(this);
}

uint64_t siri::dialogengine::RequestInfo::GetRequestType(siri::dialogengine::RequestInfo *this)
{
  return siri::dialogengine::RequestInfo::GetRequestType(this);
}

uint64_t siri::dialogengine::RequestInfo::GetTemplateDirs(siri::dialogengine::RequestInfo *this)
{
  return siri::dialogengine::RequestInfo::GetTemplateDirs(this);
}

uint64_t siri::dialogengine::RequestInfo::GetRequestTypeString(siri::dialogengine::RequestInfo *this)
{
  return siri::dialogengine::RequestInfo::GetRequestTypeString(this);
}

uint64_t siri::dialogengine::ElapsedTimer::GetSecs(siri::dialogengine::ElapsedTimer *this)
{
  return siri::dialogengine::ElapsedTimer::GetSecs(this);
}

uint64_t siri::dialogengine::GroupPhrases::GetPhrases(siri::dialogengine::GroupPhrases *this)
{
  return siri::dialogengine::GroupPhrases::GetPhrases(this);
}

uint64_t siri::dialogengine::ObjectSchema::GetFilename(siri::dialogengine::ObjectSchema *this)
{
  return siri::dialogengine::ObjectSchema::GetFilename(this);
}

uint64_t siri::dialogengine::ObjectSchema::Validate(siri::dialogengine::ObjectSchema *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::ObjectSchema::Validate(this, a2);
}

uint64_t siri::dialogengine::PropertyBase::GetDeprecated(siri::dialogengine::PropertyBase *this)
{
  return siri::dialogengine::PropertyBase::GetDeprecated(this);
}

uint64_t siri::dialogengine::PropertyBase::GetDescription(siri::dialogengine::PropertyBase *this)
{
  return siri::dialogengine::PropertyBase::GetDescription(this);
}

uint64_t siri::dialogengine::PropertyBase::GetName(siri::dialogengine::PropertyBase *this)
{
  return siri::dialogengine::PropertyBase::GetName(this);
}

uint64_t siri::dialogengine::PropertyBase::GetType(siri::dialogengine::PropertyBase *this)
{
  return siri::dialogengine::PropertyBase::GetType(this);
}

uint64_t siri::dialogengine::ChunkVariable::GetName(siri::dialogengine::ChunkVariable *this)
{
  return siri::dialogengine::ChunkVariable::GetName(this);
}

uint64_t siri::dialogengine::PatternSchema::GetSettings(siri::dialogengine::PatternSchema *this)
{
  return siri::dialogengine::PatternSchema::GetSettings(this);
}

uint64_t siri::dialogengine::PatternSchema::GetDescription(siri::dialogengine::PatternSchema *this)
{
  return siri::dialogengine::PatternSchema::GetDescription(this);
}

uint64_t siri::dialogengine::PatternSchema::GetComputedParameters(siri::dialogengine::PatternSchema *this)
{
  return siri::dialogengine::PatternSchema::GetComputedParameters(this);
}

uint64_t siri::dialogengine::PatternSchema::GetRequiredParameters(siri::dialogengine::PatternSchema *this)
{
  return siri::dialogengine::PatternSchema::GetRequiredParameters(this);
}

uint64_t siri::dialogengine::PatternSchema::GetName(siri::dialogengine::PatternSchema *this)
{
  return siri::dialogengine::PatternSchema::GetName(this);
}

uint64_t siri::dialogengine::PatternSchema::GetGroups(siri::dialogengine::PatternSchema *this)
{
  return siri::dialogengine::PatternSchema::GetGroups(this);
}

uint64_t siri::dialogengine::LineNumberBase::GetFilename(siri::dialogengine::LineNumberBase *this)
{
  return siri::dialogengine::LineNumberBase::GetFilename(this);
}

uint64_t siri::dialogengine::LineNumberBase::GetFullPath(siri::dialogengine::LineNumberBase *this)
{
  return siri::dialogengine::LineNumberBase::GetFullPath(this);
}

uint64_t siri::dialogengine::LineNumberBase::GetLineNumber(siri::dialogengine::LineNumberBase *this)
{
  return siri::dialogengine::LineNumberBase::GetLineNumber(this);
}

uint64_t siri::dialogengine::ObjectProperty::GetDefaultValue(siri::dialogengine::ObjectProperty *this)
{
  return siri::dialogengine::ObjectProperty::GetDefaultValue(this);
}

uint64_t siri::dialogengine::ObjectProperty::GetSemanticConcept(siri::dialogengine::ObjectProperty *this)
{
  return siri::dialogengine::ObjectProperty::GetSemanticConcept(this);
}

uint64_t siri::dialogengine::SpeakableString::GetPrintChunks(siri::dialogengine::SpeakableString *this)
{
  return siri::dialogengine::SpeakableString::GetPrintChunks(this);
}

uint64_t siri::dialogengine::ValidationEntry::GetText(siri::dialogengine::ValidationEntry *this)
{
  return siri::dialogengine::ValidationEntry::GetText(this);
}

uint64_t siri::dialogengine::PatternSchemaGroup::GetName(siri::dialogengine::PatternSchemaGroup *this)
{
  return siri::dialogengine::PatternSchemaGroup::GetName(this);
}

uint64_t siri::dialogengine::PatternSchemaUsage::GetCondition(siri::dialogengine::PatternSchemaUsage *this)
{
  return siri::dialogengine::PatternSchemaUsage::GetCondition(this);
}

uint64_t siri::dialogengine::PatternSchemaUsage::GetUsage(siri::dialogengine::PatternSchemaUsage *this)
{
  return siri::dialogengine::PatternSchemaUsage::GetUsage(this);
}

uint64_t siri::dialogengine::DialogMetadataReader::GetAllowUnbounded(siri::dialogengine::DialogMetadataReader *this)
{
  return siri::dialogengine::DialogMetadataReader::GetAllowUnbounded(this);
}

uint64_t siri::dialogengine::DialogMetadataReader::GetSemanticConcept(siri::dialogengine::DialogMetadataReader *this)
{
  return siri::dialogengine::DialogMetadataReader::GetSemanticConcept(this);
}

uint64_t siri::dialogengine::DialogMetadataWriter::Save()
{
  return siri::dialogengine::DialogMetadataWriter::Save();
}

uint64_t siri::dialogengine::PatternSchemaOverride::GetUsage(siri::dialogengine::PatternSchemaOverride *this)
{
  return siri::dialogengine::PatternSchemaOverride::GetUsage(this);
}

uint64_t siri::dialogengine::PatternSchemaOverride::GetIdioms(siri::dialogengine::PatternSchemaOverride *this)
{
  return siri::dialogengine::PatternSchemaOverride::GetIdioms(this);
}

uint64_t siri::dialogengine::PatternSchemaComponent::GetFullUsage(siri::dialogengine::PatternSchemaComponent *this)
{
  return siri::dialogengine::PatternSchemaComponent::GetFullUsage(this);
}

uint64_t siri::dialogengine::PatternSchemaComponent::GetFullExamples(siri::dialogengine::PatternSchemaComponent *this)
{
  return siri::dialogengine::PatternSchemaComponent::GetFullExamples(this);
}

uint64_t siri::dialogengine::PatternSchemaComponent::GetAllowMultiple(siri::dialogengine::PatternSchemaComponent *this)
{
  return siri::dialogengine::PatternSchemaComponent::GetAllowMultiple(this);
}

uint64_t siri::dialogengine::PatternSchemaComponent::GetFullOverrides(siri::dialogengine::PatternSchemaComponent *this)
{
  return siri::dialogengine::PatternSchemaComponent::GetFullOverrides(this);
}

uint64_t siri::dialogengine::PatternSchemaComponent::GetDefaultVariant(siri::dialogengine::PatternSchemaComponent *this)
{
  return siri::dialogengine::PatternSchemaComponent::GetDefaultVariant(this);
}

uint64_t siri::dialogengine::PatternSchemaComponent::GetAllowedVariants(siri::dialogengine::PatternSchemaComponent *this)
{
  return siri::dialogengine::PatternSchemaComponent::GetAllowedVariants(this);
}

uint64_t siri::dialogengine::PatternSchemaComponent::GetNameWithVariant()
{
  return siri::dialogengine::PatternSchemaComponent::GetNameWithVariant();
}

uint64_t siri::dialogengine::PatternSchemaComponent::GetSupportingUsage(siri::dialogengine::PatternSchemaComponent *this)
{
  return siri::dialogengine::PatternSchemaComponent::GetSupportingUsage(this);
}

uint64_t siri::dialogengine::PatternSchemaComponent::GetDefaultComponent(siri::dialogengine::PatternSchemaComponent *this)
{
  return siri::dialogengine::PatternSchemaComponent::GetDefaultComponent(this);
}

uint64_t siri::dialogengine::PatternSchemaComponent::GetSupportingExamples(siri::dialogengine::PatternSchemaComponent *this)
{
  return siri::dialogengine::PatternSchemaComponent::GetSupportingExamples(this);
}

uint64_t siri::dialogengine::PatternSchemaComponent::GetSupportingOverrides(siri::dialogengine::PatternSchemaComponent *this)
{
  return siri::dialogengine::PatternSchemaComponent::GetSupportingOverrides(this);
}

uint64_t siri::dialogengine::PatternSchemaComponent::GetName(siri::dialogengine::PatternSchemaComponent *this)
{
  return siri::dialogengine::PatternSchemaComponent::GetName(this);
}

uint64_t siri::dialogengine::PatternSchemaComponent::GetUsage(siri::dialogengine::PatternSchemaComponent *this)
{
  return siri::dialogengine::PatternSchemaComponent::GetUsage(this);
}

uint64_t siri::dialogengine::CollectDialogIdsVisitor::GetDialogIds(siri::dialogengine::CollectDialogIdsVisitor *this)
{
  return siri::dialogengine::CollectDialogIdsVisitor::GetDialogIds(this);
}

uint64_t siri::dialogengine::DialogMetadataSemanticValue::ToString(siri::dialogengine::DialogMetadataSemanticValue *this)
{
  return siri::dialogengine::DialogMetadataSemanticValue::ToString(this);
}

uint64_t siri::dialogengine::VisualComponentsCombination::GetEntries(siri::dialogengine::VisualComponentsCombination *this)
{
  return siri::dialogengine::VisualComponentsCombination::GetEntries(this);
}

uint64_t siri::dialogengine::VisualComponentsCombination::Entry::GetChildren(siri::dialogengine::VisualComponentsCombination::Entry *this)
{
  return siri::dialogengine::VisualComponentsCombination::Entry::GetChildren(this);
}

uint64_t siri::dialogengine::VisualComponentsCombination::Entry::GetComponentName(siri::dialogengine::VisualComponentsCombination::Entry *this)
{
  return siri::dialogengine::VisualComponentsCombination::Entry::GetComponentName(this);
}

uint64_t siri::dialogengine::VisualComponentsCombination::Entry::GetType(siri::dialogengine::VisualComponentsCombination::Entry *this)
{
  return siri::dialogengine::VisualComponentsCombination::Entry::GetType(this);
}

uint64_t siri::dialogengine::VisualComponentsCombination::GetType(siri::dialogengine::VisualComponentsCombination *this)
{
  return siri::dialogengine::VisualComponentsCombination::GetType(this);
}

uint64_t siri::dialogengine::File::GetDialogs(siri::dialogengine::File *this)
{
  return siri::dialogengine::File::GetDialogs(this);
}

uint64_t siri::dialogengine::File::GetPhrases(siri::dialogengine::File *this)
{
  return siri::dialogengine::File::GetPhrases(this);
}

uint64_t siri::dialogengine::File::ExpandAsDAG()
{
  return siri::dialogengine::File::ExpandAsDAG();
}

uint64_t siri::dialogengine::File::GetFallback(siri::dialogengine::File *this)
{
  return siri::dialogengine::File::GetFallback(this);
}

uint64_t siri::dialogengine::File::GetMetadata()
{
  return siri::dialogengine::File::GetMetadata();
}

uint64_t siri::dialogengine::File::GetConditions(siri::dialogengine::File *this)
{
  return siri::dialogengine::File::GetConditions(this);
}

uint64_t siri::dialogengine::File::GetOrCreateId()
{
  return siri::dialogengine::File::GetOrCreateId();
}

uint64_t siri::dialogengine::File::GetParameters(siri::dialogengine::File *this)
{
  return siri::dialogengine::File::GetParameters(this);
}

uint64_t siri::dialogengine::File::GetFormatVersion(siri::dialogengine::File *this)
{
  return siri::dialogengine::File::GetFormatVersion(this);
}

uint64_t siri::dialogengine::File::GetMaxLineNumber(siri::dialogengine::File *this)
{
  return siri::dialogengine::File::GetMaxLineNumber(this);
}

uint64_t siri::dialogengine::File::GetLocaleFilename(siri::dialogengine::File *this)
{
  return siri::dialogengine::File::GetLocaleFilename(this);
}

uint64_t siri::dialogengine::File::GetParamsFilename(siri::dialogengine::File *this)
{
  return siri::dialogengine::File::GetParamsFilename(this);
}

uint64_t siri::dialogengine::File::GetValidationNits(siri::dialogengine::File *this)
{
  return siri::dialogengine::File::GetValidationNits(this);
}

uint64_t siri::dialogengine::File::GetValidationErrors(siri::dialogengine::File *this)
{
  return siri::dialogengine::File::GetValidationErrors(this);
}

uint64_t siri::dialogengine::File::GetValidationWarnings(siri::dialogengine::File *this)
{
  return siri::dialogengine::File::GetValidationWarnings(this);
}

uint64_t siri::dialogengine::File::SetSourceLocaleDialogIds()
{
  return siri::dialogengine::File::SetSourceLocaleDialogIds();
}

uint64_t siri::dialogengine::File::GetRoot(siri::dialogengine::File *this)
{
  return siri::dialogengine::File::GetRoot(this);
}

uint64_t siri::dialogengine::File::GetTexts(siri::dialogengine::File *this)
{
  return siri::dialogengine::File::GetTexts(this);
}

uint64_t siri::dialogengine::File::operator!=()
{
  return siri::dialogengine::File::operator!=();
}

uint64_t siri::dialogengine::Group::GetNodes(siri::dialogengine::Group *this)
{
  return siri::dialogengine::Group::GetNodes(this);
}

uint64_t siri::dialogengine::Dialog::GetFull(siri::dialogengine::Dialog *this)
{
  return siri::dialogengine::Dialog::GetFull(this);
}

uint64_t siri::dialogengine::Dialog::operator!=()
{
  return siri::dialogengine::Dialog::operator!=();
}

uint64_t siri::dialogengine::Context::GetRequestInfo(siri::dialogengine::Context *this)
{
  return siri::dialogengine::Context::GetRequestInfo(this);
}

uint64_t siri::dialogengine::Context::GetSchemaErrors(siri::dialogengine::Context *this)
{
  return siri::dialogengine::Context::GetSchemaErrors(this);
}

uint64_t siri::dialogengine::Context::GetFile(siri::dialogengine::Context *this)
{
  return siri::dialogengine::Context::GetFile(this);
}

uint64_t siri::dialogengine::Context::GetError(siri::dialogengine::Context *this)
{
  return siri::dialogengine::Context::GetError(this);
}

uint64_t siri::dialogengine::TestCase::ToString(siri::dialogengine::TestCase *this)
{
  return siri::dialogengine::TestCase::ToString(this);
}

uint64_t siri::dialogengine::TestCase::IsEnabled(siri::dialogengine::TestCase *this)
{
  return siri::dialogengine::TestCase::IsEnabled(this);
}

uint64_t siri::dialogengine::ChunkList::GetChunks(siri::dialogengine::ChunkList *this)
{
  return siri::dialogengine::ChunkList::GetChunks(this);
}

uint64_t siri::dialogengine::ChunkText::GetAttribute()
{
  return siri::dialogengine::ChunkText::GetAttribute();
}

uint64_t siri::dialogengine::TestSuite::GetTests(siri::dialogengine::TestSuite *this)
{
  return siri::dialogengine::TestSuite::GetTests(this);
}

uint64_t std::stringbuf::str()
{
  return std::stringbuf::str();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return std::locale::use_facet(this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return std::ios_base::getloc(this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return std::logic_error::logic_error(this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return std::bad_array_new_length::bad_array_new_length(this);
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return std::string::erase(this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return std::string::append(this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::append(this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return std::string::assign(this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return std::string::insert(this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::insert(this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return std::string::basic_string(this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return std::string::operator=(this, __str);
}

uint64_t std::filebuf::open()
{
  return std::filebuf::open();
}

uint64_t std::filebuf::close()
{
  return std::filebuf::close();
}

uint64_t std::filebuf::basic_filebuf()
{
  return std::filebuf::basic_filebuf();
}

uint64_t std::filebuf::~filebuf()
{
  return std::filebuf::~filebuf();
}

uint64_t std::istream::get()
{
  return std::istream::get();
}

uint64_t std::istream::peek()
{
  return std::istream::peek();
}

uint64_t std::istream::sentry::sentry()
{
  return std::istream::sentry::sentry();
}

uint64_t std::istream::putback()
{
  return std::istream::putback();
}

uint64_t std::istream::~istream()
{
  return std::istream::~istream();
}

uint64_t std::istream::operator>>()
{
  return std::istream::operator>>();
}

uint64_t std::ostream::put()
{
  return std::ostream::put();
}

uint64_t std::ostream::flush()
{
  return std::ostream::flush();
}

uint64_t std::ostream::sentry::sentry()
{
  return std::ostream::sentry::sentry();
}

uint64_t std::ostream::sentry::~sentry()
{
  return std::ostream::sentry::~sentry();
}

uint64_t std::ostream::~ostream()
{
  return std::ostream::~ostream();
}

uint64_t std::ostream::operator<<()
{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

uint64_t std::iostream::~basic_iostream()
{
  return std::iostream::~basic_iostream();
}

uint64_t std::streambuf::basic_streambuf()
{
  return std::streambuf::basic_streambuf();
}

uint64_t std::streambuf::~streambuf()
{
  return std::streambuf::~streambuf();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return std::ios::~ios();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return std::to_string(retstr, __val);
}

uint64_t std::operator+<char>()
{
  return std::operator+<char>();
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return ___cxa_allocate_exception(thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return ___cxa_atexit(lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return ___cxa_guard_acquire((uint64_t *)a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)___dynamic_cast(lpsrc, lpstype, lpdtype, s2d);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return ___maskrune(a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return ___tolower(a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return ___toupper(a1);
}

void bzero(void *a1, size_t a2)
{
}

int fclose(FILE *a1)
{
  return _fclose(a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return _fopen(__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return _fputc(a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return _fputs(a1, a2);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fwrite(__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_realloc(ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return _memchr(__s, __c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

int printf(const char *a1, ...)
{
  return _printf(a1);
}

int putchar(int a1)
{
  return _putchar(a1);
}

int puts(const char *a1)
{
  return _puts(a1);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

id objc_msgSend_catUpdates(void *a1, const char *a2, ...)
{
  return [a1 catUpdates];
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return [a1 currentRunLoop];
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}